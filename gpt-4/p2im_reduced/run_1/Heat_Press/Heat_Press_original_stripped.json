{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_event_loop_000816a8",
                "in_r0": "pkeyContext",
                "EVP_PKEY_CTX": "EncryptionPKeyContext"
            },
            "code": "\nint mainEventLoop_000816a8(void)\n\n{\n  EncryptionPKeyContext *pkeyContext;\n  \n  _watchdogDefaultSetup();\n  init(pkeyContext);\n  initVariant();\n  delay(1);\n  setup();\n  do {\n    do {\n      loop();\n    } while (DAT_000816d0 == 0);\n    serialEventRun();\n  } while( true );\n}\n\n",
            "called": [
                "setup",
                "serialEventRun",
                "init",
                "initVariant",
                "loop",
                "delay",
                "_watchdogDefaultSetup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_event_loop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_bit_fields_00081042",
                "param_1": "baseAddress",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3"
            },
            "code": "\nvoid updateBitFields_00081042(int baseAddress,uint inputValue1,uint inputValue2,uint inputValue3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       inputValue2 | *(uint *)(baseAddress + 4) | (inputValue1 & 0xf) << 0x18 | (inputValue3 & 3) << 0x1c;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_bit_fields_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "__sprint_r_part_0": "process_buffered_data",
                "param_1": "file_descriptor",
                "param_2": "write_buffer",
                "param_3": "data_ptr_array",
                "piVar1": "current_data_ptr",
                "iVar2": "write_result",
                "piVar3": "remaining_data_ptr",
                "uVar4": "write_counter",
                "puVar5": "data_to_write",
                "uVar6": "data_size",
                "uVar7": "write_iterations",
                "FUN_00082ac0": "process_buffered_data_00082ac0"
            },
            "code": "\nint process_buffered_data_00082ac0(undefined4 file_descriptor,int write_buffer,int **data_ptr_array)\n\n{\n  int *current_data_ptr;\n  int write_result;\n  int *remaining_data_ptr;\n  uint write_counter;\n  undefined4 *data_to_write;\n  uint data_size;\n  uint write_iterations;\n  \n  if (-1 < *(int *)(write_buffer + 100) << 0x12) {\n    write_result = __sfvwrite_r();\n    data_ptr_array[2] = (int *)0x0;\n    data_ptr_array[1] = (int *)0x0;\n    return write_result;\n  }\n  remaining_data_ptr = data_ptr_array[2];\n  current_data_ptr = *data_ptr_array;\n  while (remaining_data_ptr != (int *)0x0) {\n    data_size = current_data_ptr[1];\n    write_iterations = data_size >> 2;\n    if (write_iterations != 0) {\n      data_to_write = (undefined4 *)(*current_data_ptr + -4);\n      write_counter = 0;\n      do {\n        data_to_write = data_to_write + 1;\n        write_result = _fputwc_r(file_descriptor,*data_to_write,write_buffer);\n        write_counter = write_counter + 1;\n        if (write_result == -1) goto LAB_00082b00;\n      } while (write_iterations != write_counter);\n      remaining_data_ptr = data_ptr_array[2];\n    }\n    remaining_data_ptr = (int *)((int)remaining_data_ptr - (data_size & 0xfffffffc));\n    data_ptr_array[2] = remaining_data_ptr;\n    current_data_ptr = current_data_ptr + 2;\n  }\n  write_result = 0;\nLAB_00082b00:\n  data_ptr_array[2] = (int *)0x0;\n  data_ptr_array[1] = (int *)0x0;\n  return write_result;\n}\n\n",
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "process_buffered_data_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_serial_events_00080ce0",
                "iVar1": "availability"
            },
            "code": "\nvoid checkSerialEvents_00080ce0(void)\n\n{\n  int availability;\n  \n  availability = UARTClass::available((UARTClass *)PTR_Serial_00080d14);\n  if (availability != 0) {\n    serialEvent();\n  }\n  availability = UARTClass::available((UARTClass *)PTR_Serial1_00080d18);\n  if (availability != 0) {\n    serialEvent1();\n  }\n  availability = UARTClass::available((UARTClass *)PTR_Serial2_00080d1c);\n  if (availability != 0) {\n    serialEvent2();\n  }\n  availability = UARTClass::available((UARTClass *)PTR_Serial3_00080d20);\n  if (availability != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "called": [
                "serialEvent",
                "serialEvent3",
                "serialEvent1",
                "serialEvent2",
                "available"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_serial_events_00080ce0"
        },
        "FUN_00081164": {
            "renaming": {
                "FUN_00081164": "infinite_loop_function_00081164"
            },
            "code": "\nvoid infinite_loop_function_00081164(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081164",
            "calling": [
                "__halt"
            ],
            "imported": false,
            "current_name": "infinite_loop_function_00081164"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_string_00081682",
                "this": "self",
                "cstr": "input_str",
                "length": "str_length"
            },
            "code": "\ninitialize_string_00081682 * __selfcall initialize_string_00081682::initialize_string_00081682(initialize_string_00081682 *self,char *input_str)\n\n{\n  size_t str_length;\n  \n  self->buffer = (char *)0x0;\n  self->capacity = 0;\n  self->len = 0;\n  if (input_str != (char *)0x0) {\n    str_length = strlen(input_str);\n    copy(self,input_str,str_length);\n  }\n  return self;\n}\n\n",
            "called": [
                "strlen",
                "copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "initialize_string_00081682"
        },
        "FUN_00081166": {
            "renaming": {
                "FUN_00081166": "infinite_loop_00081166"
            },
            "code": "\nvoid infinite_loop_00081166(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081166",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_00081166"
        },
        "FUN_00081200": {
            "renaming": {
                "FUN_00081200": "do_nothing_00081200"
            },
            "code": "\nvoid do_nothing_00081200(int pid_UNUSED,int sig_UNUSED)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081200",
            "calling": [
                "_kill_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00081200"
        },
        "FUN_00081202": {
            "renaming": {
                "FUN_00081202": "return_negative_one_00081202"
            },
            "code": "\n__pid_t return_negative_one_00081202(void)\n\n{\n  return -1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081202",
            "calling": [],
            "imported": false,
            "current_name": "return_negative_one_00081202"
        },
        "FUN_000815fe": {
            "renaming": {
                "_String": "clear_string_buffer",
                "String": "StringType",
                "this": "str_instance",
                "__in_chrg": "unused_arg",
                "FUN_000815fe": "clear_string_buffer_000815fe"
            },
            "code": "\nvoid * StringType::clear_string_buffer_000815fe(StringType *str_instance,int unused_arg)\n\n{\n  free(str_instance->buffer);\n  return str_instance;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "clear_string_buffer_000815fe"
        },
        "FUN_00081720": {
            "renaming": {
                "FUN_00081720": "set_memory_value_00081720",
                "param_1": "memory_address"
            },
            "code": "\nvoid set_memory_value_00081720(int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x8000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081720",
            "calling": [
                "_watchdogDefaultSetup"
            ],
            "imported": false,
            "current_name": "set_memory_value_00081720"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_special_value_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "code": "\nuint calculate_special_value_00081d1c(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_special_value_00081d1c"
        },
        "FUN_00083988": {
            "renaming": {
                "FUN_00083988": "register_exit_procedure_00083988",
                "__func": "exitFunction",
                "iVar1": "result"
            },
            "code": "\nint registerExitProcedure_00083988(exitFunction *exitFunction)\n\n{\n  int result;\n  \n  result = __register_exitproc(0,exitFunction,0,0);\n  return result;\n}\n\n",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083988",
            "calling": [
                "register_fini"
            ],
            "imported": false,
            "current_name": "register_exit_procedure_00083988"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "FUNC_000847ac"
            },
            "code": "\nvoid FUNC_000847ac\n               (uint param_1,int param_2,undefined4 param_3,undefined4 param_4,int *param_5)\n\n{\n  uint uVar1;\n  longlong lVar2;\n  \n  lVar2 = __udivdi3();\n  lVar2 = lVar2 * CONCAT44(param_4,param_3);\n  uVar1 = (uint)lVar2;\n  *param_5 = param_1 - uVar1;\n  param_5[1] = (param_2 - (int)((ulonglong)lVar2 >> 0x20)) - (uint)(param_1 < uVar1);\n  return;\n}\n\n",
            "called": [
                "__udivdi3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000847ac",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "FUNC_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_function_00080118",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4"
            },
            "code": "\nvoid executeFunction_00080118(undefined4 inputParam1,undefined *inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  if (DAT_00080134 != 0) {\n    inputParam2 = PTR_object_7862_0008013c;\n  }\n  if ((*(int *)PTR__etext_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(PTR__etext_00080140,inputParam2,inputParam3,DAT_00080144,inputParam4);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_function_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081208": {
            "renaming": {
                "FUN_00081208": "get_tick_count_00081208"
            },
            "code": "\nuint32_t getTickCount_00081208(void)\n\n{\n  return *(uint32_t *)PTR__dwTickCount_0008171c;\n}\n\n",
            "called": [
                "GetTickCount"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "setup",
                "loop",
                "poll",
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "get_tick_count_00081208"
        },
        "FUN_00081728": {
            "renaming": {
                "FUN_00081728": "floating_point_addition_00081728",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "unusedParam",
                "param_4": "tempParam",
                "iVar1": "intVar1",
                "uVar2": "uintVar2",
                "uVar3": "uintVar3",
                "uVar4": "uintVar4",
                "uVar5": "uintVar5",
                "uVar6": "uintVar6",
                "iVar7": "intVar7",
                "bVar8": "boolVar8"
            },
            "code": "\nuint floatingPointAddition_00081728(uint number1,uint number2,undefined4 unusedParam,uint tempParam)\n\n{\n  int intVar1;\n  uint uintVar2;\n  uint uintVar3;\n  uint uintVar4;\n  uint uintVar5;\n  uint uintVar6;\n  int intVar7;\n  bool boolVar8;\n  \n  uintVar2 = number1 ^ 0x80000000;\n  uintVar4 = number1 << 1;\n  boolVar8 = uintVar4 == 0;\n  if (!boolVar8) {\n    tempParam = number2 << 1;\n    boolVar8 = tempParam == 0;\n  }\n  if (!boolVar8) {\n    boolVar8 = uintVar4 == tempParam;\n  }\n  intVar7 = (int)uintVar4 >> 0x18;\n  if (!boolVar8) {\n    boolVar8 = intVar7 == -1;\n  }\n  if (!boolVar8) {\n    boolVar8 = (int)tempParam >> 0x18 == -1;\n  }\n  if (boolVar8) {\n    intVar1 = (int)(number2 << 1) >> 0x18;\n    if (intVar7 == -1 || intVar1 == -1) {\n      uintVar4 = number2;\n      if (intVar7 == -1) {\n        uintVar4 = uintVar2;\n      }\n      if (intVar7 != -1 || intVar1 != -1) {\n        number2 = uintVar4;\n      }\n      boolVar8 = (uintVar4 & 0x7fffff) == 0;\n      if (boolVar8) {\n        boolVar8 = (number2 & 0x7fffff) == 0;\n      }\n      if (boolVar8) {\n        boolVar8 = uintVar4 == number2;\n      }\n      if (!boolVar8) {\n        uintVar4 = uintVar4 | 0x400000;\n      }\n      return uintVar4;\n    }\n    if (((number1 ^ number2) & 0x7fffffff) != 0) {\n      if (uintVar4 == 0) {\n        uintVar2 = number2;\n      }\n      return uintVar2;\n    }\n    if (uintVar2 != number2) {\n      return 0;\n    }\n    if ((uintVar4 & 0xff000000) == 0) {\n      number1 = number1 << 1;\n      if ((uintVar2 & 0x80000000) != 0) {\n        number1 = number1 | 0x80000000;\n      }\n      return number1;\n    }\n    if (uintVar4 < 0xfe000000) {\n      return uintVar2 + 0x800000;\n    }\n    uintVar2 = uintVar2 & 0x80000000;\nLAB_0008186a:\n    return uintVar2 | 0x7f800000;\n  }\n  uintVar4 = uintVar4 >> 0x18;\n  tempParam = tempParam >> 0x18;\n  uintVar6 = tempParam - uintVar4;\n  boolVar8 = uintVar6 != 0;\n  uintVar5 = uintVar4;\n  if (boolVar8 && uintVar4 <= tempParam) {\n    uintVar5 = uintVar4 + uintVar6;\n  }\n  if (boolVar8 && uintVar4 <= tempParam) {\n    number2 = number2 ^ uintVar2;\n  }\n  if (boolVar8 && uintVar4 <= tempParam) {\n    uintVar2 = uintVar2 ^ number2;\n  }\n  if (boolVar8 && uintVar4 <= tempParam) {\n    number2 = number2 ^ uintVar2;\n  }\n  if (tempParam < uintVar4) {\n    uintVar6 = -uintVar6;\n  }\n  if (0x19 < uintVar6) {\n    return uintVar2;\n  }\n  uintVar4 = uintVar2 & 0xffffff | 0x800000;\n  if ((uintVar2 & 0x80000000) != 0) {\n    uintVar4 = -uintVar4;\n  }\n  uintVar3 = number2 & 0xffffff | 0x800000;\n  if ((number2 & 0x80000000) != 0) {\n    uintVar3 = -uintVar3;\n  }\n  if (uintVar5 == uintVar6) {\n    uintVar3 = uintVar3 ^ 0x800000;\n    if (uintVar5 == 0) {\n      uintVar4 = uintVar4 ^ 0x800000;\n      uintVar5 = 1;\n    }\n    else {\n      uintVar6 = uintVar6 - 1;\n    }\n  }\n  uintVar4 = uintVar4 + ((int)uintVar3 >> (uintVar6 & 0xff));\n  uintVar3 = uintVar3 << (0x20 - uintVar6 & 0xff);\n  uintVar2 = uintVar4 & 0x80000000;\n  if ((int)uintVar4 < 0) {\n    boolVar8 = uintVar3 != 0;\n    uintVar3 = -uintVar3;\n    uintVar4 = -uintVar4 - (uint)boolVar8;\n  }\n  if (uintVar4 < 0x800000) {\n    uintVar6 = uintVar3 & 0x80000000;\n    uintVar3 = uintVar3 << 1;\n    uintVar4 = uintVar4 * 2 + (uint)(uintVar6 != 0);\n    uintVar6 = uintVar5 - 2;\n    if ((uintVar4 & 0x800000) == 0) {\n      intVar7 = count_leading_zeroes(uintVar4);\n      uintVar5 = intVar7 - 8;\n      uintVar4 = uintVar4 << (uintVar5 & 0xff);\n      if ((int)uintVar6 < (int)uintVar5) {\n        uintVar4 = uintVar4 >> (-(uintVar6 - uintVar5) & 0xff);\n      }\n      else {\n        uintVar4 = uintVar4 + (uintVar6 - uintVar5) * 0x800000;\n      }\n      return uintVar4 | uintVar2;\n    }\n  }\n  else {\n    uintVar6 = uintVar5 - 1;\n    if (0xffffff < uintVar4) {\n      uintVar6 = uintVar4 & 1;\n      uintVar4 = uintVar4 >> 1;\n      uintVar3 = (uint)(uintVar6 != 0) << 0x1f | uintVar3 >> 1;\n      uintVar6 = uintVar5;\n      if (0xfd < uintVar5) goto LAB_0008186a;\n    }\n  }\n  uintVar4 = uintVar4 + uintVar6 * 0x800000 + (uint)(0x7fffffff < uintVar3);\n  if (uintVar3 == 0x80000000) {\n    uintVar4 = uintVar4 & 0xfffffffe;\n  }\n  return uintVar4 | uintVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081728",
            "calling": [],
            "imported": false,
            "current_name": "floating_point_addition_00081728"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "compare_floats_00081c94",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "code": "\nbool compare_floats_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "compare_floats_00081c94"
        },
        "FUN_000810f4": {
            "renaming": {
                "FUN_000810f4": "execute_callbacks_000810f4",
                "uVar1": "leading_zeroes",
                "uVar2": "current_bitmask"
            },
            "code": "\nvoid execute_callbacks_000810f4(void)\n\n{\n  uint leading_zeroes;\n  uint current_bitmask;\n  \n  current_bitmask = *(uint *)(DAT_00081124 + 0x4c);\n  while( true ) {\n    leading_zeroes = count_leading_zeroes(current_bitmask);\n    if (0x1f < (leading_zeroes & 0xff)) break;\n    leading_zeroes = 0x1f - (leading_zeroes & 0xff) & 0xff;\n    if (*(code **)(PTR_callbacksPioC_00081128 + leading_zeroes * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioC_00081128 + leading_zeroes * 4))();\n    }\n    current_bitmask = current_bitmask & ~(1 << leading_zeroes);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810f4",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_000810f4"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structure_00083b14",
                "param_1": "data_structure_ptr",
                "uVar1": "data_value1",
                "uVar2": "data_value2",
                "uVar3": "data_value3",
                "uVar4": "data_value4",
                "puVar5": "sub_structure1_ptr",
                "puVar6": "sub_structure2_ptr"
            },
            "code": "\nvoid initialize_data_structure_00083b14(int data_structure_ptr)\n\n{\n  undefined4 data_value1;\n  undefined4 data_value2;\n  undefined4 data_value3;\n  undefined4 data_value4;\n  undefined4 *sub_structure1_ptr;\n  undefined4 *sub_structure2_ptr;\n  \n  if (*(int *)(data_structure_ptr + 0x38) == 0) {\n    sub_structure1_ptr = *(undefined4 **)(data_structure_ptr + 4);\n    *(undefined4 *)(data_structure_ptr + 0x3c) = DAT_00083bf4;\n    *(undefined4 *)(data_structure_ptr + 0x2e4) = 3;\n    *(int *)(data_structure_ptr + 0x2e8) = data_structure_ptr + 0x2ec;\n    *(undefined4 *)(data_structure_ptr + 0x2e0) = 0;\n    *(undefined2 *)(sub_structure1_ptr + 3) = 4;\n    *sub_structure1_ptr = 0;\n    sub_structure1_ptr[1] = 0;\n    sub_structure1_ptr[2] = 0;\n    sub_structure1_ptr[0x19] = 0;\n    *(undefined2 *)((int)sub_structure1_ptr + 0xe) = 0;\n    sub_structure1_ptr[4] = 0;\n    sub_structure1_ptr[5] = 0;\n    sub_structure1_ptr[6] = 0;\n    memset(sub_structure1_ptr + 0x17,0,8);\n    data_value4 = DAT_00083c04;\n    data_value3 = DAT_00083c00;\n    data_value2 = DAT_00083bfc;\n    data_value1 = DAT_00083bf8;\n    sub_structure2_ptr = *(undefined4 **)(data_structure_ptr + 8);\n    sub_structure1_ptr[7] = sub_structure1_ptr;\n    sub_structure1_ptr[8] = data_value1;\n    sub_structure1_ptr[9] = data_value2;\n    sub_structure1_ptr[10] = data_value3;\n    sub_structure1_ptr[0xb] = data_value4;\n    *(undefined2 *)((int)sub_structure2_ptr + 0xe) = 1;\n    *(undefined2 *)(sub_structure2_ptr + 3) = 9;\n    *sub_structure2_ptr = 0;\n    sub_structure2_ptr[1] = 0;\n    sub_structure2_ptr[2] = 0;\n    sub_structure2_ptr[0x19] = 0;\n    sub_structure2_ptr[4] = 0;\n    sub_structure2_ptr[5] = 0;\n    sub_structure2_ptr[6] = 0;\n    memset(sub_structure2_ptr + 0x17,0,8);\n    sub_structure1_ptr = *(undefined4 **)(data_structure_ptr + 0xc);\n    sub_structure2_ptr[7] = sub_structure2_ptr;\n    sub_structure2_ptr[8] = data_value1;\n    sub_structure2_ptr[9] = data_value2;\n    sub_structure2_ptr[10] = data_value3;\n    sub_structure2_ptr[0xb] = data_value4;\n    *(undefined2 *)(sub_structure1_ptr + 3) = 0x12;\n    *(undefined2 *)((int)sub_structure1_ptr + 0xe) = 2;\n    *sub_structure1_ptr = 0;\n    sub_structure1_ptr[1] = 0;\n    sub_structure1_ptr[2] = 0;\n    sub_structure1_ptr[0x19] = 0;\n    sub_structure1_ptr[4] = 0;\n    sub_structure1_ptr[5] = 0;\n    sub_structure1_ptr[6] = 0;\n    memset(sub_structure1_ptr + 0x17,0,8);\n    sub_structure1_ptr[7] = sub_structure1_ptr;\n    sub_structure1_ptr[8] = data_value1;\n    sub_structure1_ptr[9] = data_value2;\n    sub_structure1_ptr[10] = data_value3;\n    sub_structure1_ptr[0xb] = data_value4;\n    *(undefined4 *)(data_structure_ptr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__swbuf_r",
                "__swsetup_r",
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_file_descriptor_000842a4",
                "param_1": "reent",
                "param_2": "fileStruct",
                "uVar1": "ushortVar",
                "iVar2": "result",
                "iVar3": "allocatedMemory",
                "uVar4": "uintVar",
                "bVar5": "isCharacterDevice",
                "auStack_54": "fileStatBuffer",
                "local_50": "fileMode"
            },
            "code": "\nvoid processFileDescriptor_000842a4(int reent,int *fileStruct)\n\n{\n  ushort ushortVar;\n  int result;\n  int allocatedMemory;\n  uint uintVar;\n  bool isCharacterDevice;\n  undefined fileStatBuffer [4];\n  uint fileMode;\n  \n  ushortVar = *(ushort *)(fileStruct + 3);\n  uintVar = (uint)ushortVar;\n  if ((int)(uintVar << 0x1e) < 0) {\n    *fileStruct = (int)fileStruct + 0x43;\n    fileStruct[4] = (int)fileStruct + 0x43;\n    fileStruct[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileStruct + 0xe)) {\n    result = _fstat_r(reent,(int)*(short *)((int)fileStruct + 0xe),fileStatBuffer);\n    if (-1 < result) {\n      isCharacterDevice = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (fileStruct[10] == DAT_00084380)) {\n        result = 0x400;\n        *(ushort *)(fileStruct + 3) = *(ushort *)(fileStruct + 3) | 0x400;\n        fileStruct[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(fileStruct + 3) = *(ushort *)(fileStruct + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushortVar = *(ushort *)(fileStruct + 3);\n    uintVar = (uint)ushortVar;\n  }\n  *(ushort *)(fileStruct + 3) = ushortVar | 0x800;\n  if ((uintVar & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isCharacterDevice = false;\nLAB_00084300:\n  allocatedMemory = _malloc_r(reent,result);\n  ushortVar = *(ushort *)(fileStruct + 3);\n  if (allocatedMemory == 0) {\n    if (-1 < (int)((uint)ushortVar << 0x16)) {\n      *(ushort *)(fileStruct + 3) = ushortVar | 2;\n      *fileStruct = (int)fileStruct + 0x43;\n      fileStruct[4] = (int)fileStruct + 0x43;\n      fileStruct[5] = 1;\n    }\n  }\n  else {\n    *(undefined4 *)(reent + 0x3c) = DAT_0008437c;\n    *(ushort *)(fileStruct + 3) = ushortVar | 0x80;\n    *fileStruct = allocatedMemory;\n    fileStruct[4] = allocatedMemory;\n    fileStruct[5] = result;\n    if ((isCharacterDevice) && (result = _isatty_r(reent,(int)*(short *)((int)fileStruct + 0xe)), result != 0)) {\n      *(ushort *)(fileStruct + 3) = *(ushort *)(fileStruct + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "_malloc_r",
                "_fstat_r",
                "_isatty_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "__swsetup_r"
            ],
            "imported": false,
            "current_name": "process_file_descriptor_000842a4"
        },
        "FUN_00081dcc": {
            "renaming": {
                "FUN_00081dcc": "process_data_00081dcc",
                "param_1": "inputData",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "uStack_c": "stackParamA",
                "uStack_8": "stackParamB",
                "uStack_4": "stackParamC"
            },
            "code": "\nvoid processData_00081dcc(undefined4 inputData,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  undefined4 stackParamA;\n  undefined4 stackParamB;\n  undefined4 stackParamC;\n  \n  stackParamA = paramA;\n  stackParamB = paramB;\n  stackParamC = paramC;\n  _vfprocessData_00081dcc_r(*(int *)PTR__impure_ptr_00081df0,\n               *(undefined4 *)(*(int *)PTR__impure_ptr_00081df0 + 8),inputData,&stackParamA);\n  return;\n}\n\n",
            "called": [
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081dcc",
            "calling": [
                "_exit"
            ],
            "imported": false,
            "current_name": "process_data_00081dcc"
        },
        "FUN_0008143c": {
            "renaming": {
                "FUN_0008143c": "wait_for_transmission_completion_0008143c",
                "UARTClass": "UartController",
                "this": "uartInstance",
                "_tx_buffer": "transmitBuffer",
                "_iHead": "headIndex",
                "_iTail": "tailIndex",
                "_pUart": "uartRegister",
                "UART_SR": "uartStatusRegister"
            },
            "code": "\nvoid __uartInstancecall UartController::waitForTransmissionCompletion_0008143c(UartController *uartInstance)\n\n{\n  do {\n  } while (uartInstance->transmitBuffer->headIndex != uartInstance->transmitBuffer->tailIndex);\n  do {\n  } while (-1 < (int)(uartInstance->uartRegister->uartStatusRegister << 0x16));\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008143c",
            "calling": [],
            "imported": false,
            "current_name": "wait_for_transmission_completion_0008143c"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_file_000846a4",
                "__stream": "fileStream",
                "iVar1": "result"
            },
            "code": "\nint processFile_000846a4(FILE *fileStream)\n\n{\n  int result;\n  \n  result = _processFile_000846a4_r(*(undefined4 *)PTR__impure_ptr_000846b0,fileStream);\n  return result;\n}\n\n",
            "called": [
                "_fclose_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_file_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_memory_and_run_00080f24",
                "puVar1": "source",
                "puVar2": "destination",
                "iVar3": "index",
                "puVar4": "zero_fill_ptr"
            },
            "code": "\nvoid initialize_memory_and_run_00080f24(void)\n\n{\n  undefined *source;\n  undefined *destination;\n  int index;\n  undefined4 *zero_fill_ptr;\n  \n  source = PTR_banzai_00080f80;\n  destination = PTR__etext_00080f7c;\n  zero_fill_ptr = (undefined4 *)PTR_completed_7857_00080f84;\n  if (PTR__etext_00080f7c != PTR_banzai_00080f80) {\n    for (index = 0; zero_fill_ptr = (undefined4 *)PTR_completed_7857_00080f84,\n        source + index < PTR_completed_7857_00080f88; index = index + 4) {\n      *(undefined4 *)(source + index) = *(undefined4 *)(destination + index);\n    }\n  }\n  for (; index = DAT_00080f94, zero_fill_ptr < PTR__ebss_00080f8c; zero_fill_ptr = zero_fill_ptr + 1) {\n    *zero_fill_ptr = 0;\n  }\n  destination = PTR_exception_table_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_exception_table_00080f90 & 0x1fffff80;\n  if (destination < (undefined *)0x100000) {\n    *(uint *)(index + 8) = *(uint *)(index + 8) | 0x20000000;\n  }\n  (*DAT_00080f98)();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "banzai",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_memory_and_run_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitwise_conditions_00080e04",
                "param_1": "input_value",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "code": "\nuint check_bitwise_conditions_00080e04(int input_value,uint bitmask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "check_bitwise_conditions_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar1": "telegramPtr",
                "puVar2": "dataPtr",
                "puVar3": "data8024Ptr",
                "this": "masterPtr",
                "uVar4": "currentTime"
            },
            "code": "\nvoid initializeSystem_000804a8(void)\n\n{\n  undefined *telegramPtr;\n  undefined *dataPtr;\n  undefined *data8024Ptr;\n  undefined *masterPtr;\n  uint32_t currentTime;\n  \n  pinMode(1,0);\n  pinMode(6,1);\n  pinMode(0,1);\n  pinMode(1,1);\n  digitalWrite(0,0);\n  digitalWrite(1,0);\n  dataPtr = PTR_au16data_000805ac;\n  telegramPtr = PTR_telegram_000805a8;\n  *(undefined2 *)(PTR_telegram_000805a8 + 0xe) = 0x13;\n  *(undefined2 *)(telegramPtr + 0x10) = 10;\n  *(undefined **)(telegramPtr + 0x14) = dataPtr + 0x26;\n  telegramPtr[1] = 3;\n  telegramPtr[0x19] = 3;\n  *(undefined2 *)(telegramPtr + 0x1a) = 0x14;\n  *(undefined2 *)(telegramPtr + 0x28) = 3;\n  *(undefined2 *)(telegramPtr + 4) = 0x10;\n  *(undefined **)(telegramPtr + 8) = dataPtr;\n  telegramPtr[0xd] = 0x10;\n  *(undefined2 *)(telegramPtr + 0x1c) = 0xc;\n  telegramPtr[0x25] = 0x10;\n  *(undefined2 *)(telegramPtr + 0x34) = 8;\n  data8024Ptr = PTR_data8024_000805b0;\n  *(undefined2 *)(telegramPtr + 0x26) = 0x1c;\n  *(undefined **)(telegramPtr + 0x2c) = dataPtr + 0x38;\n  masterPtr = PTR_master_000805b4;\n  telegramPtr[0x30] = 2;\n  telegramPtr[0x31] = 2;\n  *(undefined **)(telegramPtr + 0x38) = data8024Ptr;\n  telegramPtr[0x3c] = 2;\n  *telegramPtr = 1;\n  telegramPtr[0xc] = 1;\n  telegramPtr[0x18] = 1;\n  telegramPtr[0x24] = 1;\n  *(undefined2 *)(telegramPtr + 0x3e) = 1;\n  *(undefined2 *)(telegramPtr + 0x40) = 1;\n  *(undefined2 *)(telegramPtr + 2) = 0;\n  *(undefined **)(telegramPtr + 0x20) = dataPtr + 0x28;\n  *(undefined2 *)(telegramPtr + 0x32) = 0;\n  telegramPtr[0x3d] = 5;\n  *(undefined **)(telegramPtr + 0x44) = data8024Ptr + 2;\n  Modbus::begin((Modbus *)masterPtr,0x4b00);\n  *(undefined2 *)(masterPtr + 0x56) = 2000;\n  currentTime = millis();\n  *(uint32_t *)PTR_u32wait_000805b8 = currentTime;\n  currentTime = millis();\n  *(uint32_t *)PTR_tiempopid1_000805bc = currentTime + 1000;\n  currentTime = millis();\n  *(uint32_t *)PTR_dutyalto1_000805c0 = currentTime + 1000;\n  currentTime = millis();\n  *(uint32_t *)PTR_dutybajo1_000805c4 = currentTime + 1000;\n  currentTime = millis();\n  *(uint32_t *)PTR_reloj_000805c8 = currentTime + 1000;\n  *PTR_u8state_000805cc = 0;\n  startForkserver(0);\n  return;\n}\n\n",
            "called": [
                "millis",
                "startForkserver",
                "digitalWrite",
                "pinMode",
                "begin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_00084440": {
            "renaming": {
                "FUN_00084440": "update_read_status_00084440",
                "param_1": "fileDescriptor",
                "param_2": "statusBuffer",
                "iVar1": "bytesRead"
            },
            "code": "\nvoid updateReadStatus_00084440(undefined4 fileDescriptor,int statusBuffer)\n\n{\n  int bytesRead;\n  \n  bytesRead = _read_r(fileDescriptor,(int)*(short *)(statusBuffer + 0xe));\n  if (-1 < bytesRead) {\n    *(int *)(statusBuffer + 0x50) = *(int *)(statusBuffer + 0x50) + bytesRead;\n    return;\n  }\n  *(ushort *)(statusBuffer + 0xc) = *(ushort *)(statusBuffer + 0xc) & 0xefff;\n  return;\n}\n\n",
            "called": [
                "_read_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084440",
            "calling": [],
            "imported": false,
            "current_name": "update_read_status_00084440"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "process_modbus_telegram_000802da",
                "Modbus": "modbusInstance",
                "telegram": "modbusTelegram",
                "uVar1": "tempVar1",
                "in_r1": "inputRegCount",
                "bVar3": "byteVar3",
                "in_r2": "inputRegArray",
                "puVar4": "regArrayPtr",
                "uVar5": "uint8Var5",
                "uVar6": "ushortVar6",
                "uVar7": "uintVar7",
                "puVar8": "regArrayEndPtr",
                "local_1c": "localByte1",
                "local_1b": "localByte2",
                "local_1a": "localUshort",
                "uVar2": "tempVar2"
            },
            "code": "\nint8_t __thiscall modbusInstance::processModbusTelegram_000802da(modbusInstance *this,modbus_t modbusTelegram)\n\n{\n  uchar tempVar1;\n  ushort inputRegCount;\n  byte byteVar3;\n  ushort *inputRegArray;\n  ushort *regArrayPtr;\n  uint8_t uint8Var5;\n  ushort ushortVar6;\n  uint uintVar7;\n  ushort *regArrayEndPtr;\n  uchar localByte1;\n  uchar localByte2;\n  ushort localUshort;\n  uchar tempVar2;\n  \n  uintVar7 = (uint)inputRegCount;\n  if (this->u8id != '\\0') {\n    return -2;\n  }\n  if (this->u8state != '\\0') {\n    return -1;\n  }\n  if (0xf6 < (byte)(localByte1 - 1)) {\n    return -3;\n  }\n  this->au8Buffer[0] = localByte1;\n  this->au8Buffer[1] = localByte2;\n  this->au16regs = inputRegArray;\n  this->au8Buffer[2] = (uchar)((uint)localUshort >> 8);\n  this->au8Buffer[3] = (uchar)localUshort;\n  tempVar1 = (uchar)inputRegCount;\n  tempVar2 = (uchar)(uintVar7 >> 8);\n  switch(localByte2) {\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n    this->au8Buffer[4] = tempVar2;\n    break;\n  case '\\x05':\n    ushortVar6 = *inputRegArray;\n    if (ushortVar6 != 0) {\n      ushortVar6 = 1;\n    }\n    this->au8Buffer[4] = -(char)ushortVar6;\n    uintVar7 = 0;\n    break;\n  case '\\x06':\n    this->au8Buffer[4] = (uchar)((uint)*inputRegArray >> 8);\n    uintVar7 = (uint)*inputRegArray;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case '\\x0f':\n    byteVar3 = (byte)(inputRegCount >> 3) & 0xfe;\n    if ((inputRegCount & 0xf) != 0) {\n      byteVar3 = byteVar3 + 1;\n    }\n    this->au8Buffer[5] = tempVar1;\n    this->au8Buffer[4] = tempVar2;\n    this->au8Buffer[6] = byteVar3;\n    uint8Var5 = '\\a';\n    goto LAB_0008034a;\n  case '\\x10':\n    this->au8Buffer[4] = tempVar2;\n    this->au8Buffer[5] = tempVar1;\n    regArrayPtr = inputRegArray + -1;\n    this->au8Buffer[6] = tempVar1 * '\\x02';\n    this->u8BufferSize = '\\a';\n    regArrayEndPtr = regArrayPtr + uintVar7;\n    while (regArrayPtr != regArrayEndPtr) {\n      byteVar3 = this->u8BufferSize;\n      this->au8Buffer[byteVar3] = (uchar)((uint)regArrayPtr[1] >> 8);\n      uintVar7 = byteVar3 + 1 & 0xff;\n      this->u8BufferSize = (uint8_t)uintVar7;\n      regArrayPtr = regArrayPtr + 1;\n      this->au8Buffer[uintVar7] = (uchar)*regArrayPtr;\n      this->u8BufferSize = byteVar3 + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  this->au8Buffer[5] = (uchar)uintVar7;\n  uint8Var5 = '\\x06';\nLAB_0008034a:\n  this->u8BufferSize = uint8Var5;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(this);\n  this->u8state = '\\x01';\n  return '\\0';\n}\n\n",
            "called": [
                "sendTxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "process_modbus_telegram_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "calculate_optimal_configuration_00080f9c",
                "param_1": "config",
                "param_2": "totalSize",
                "param_3": "elementSize",
                "param_4": "maxMultiplier",
                "uVar1": "adjustedSize",
                "uVar2": "index",
                "local_58": "lookupTable"
            },
            "code": "\nundefined4 calculateOptimalConfiguration_00080f9c(undefined4 *config,uint totalSize,int elementSize,int maxMultiplier)\n\n{\n  uint adjustedSize;\n  uint index;\n  uint lookupTable [16];\n  \n  lookupTable[0] = *(uint *)PTR_DAT_0008102c;\n  lookupTable[1] = *(undefined4 *)(PTR_DAT_0008102c + 4);\n  lookupTable[2] = *(undefined4 *)(PTR_DAT_0008102c + 8);\n  lookupTable[3] = *(undefined4 *)(PTR_DAT_0008102c + 0xc);\n  lookupTable[4] = *(undefined4 *)(PTR_DAT_0008102c + 0x10);\n  lookupTable[5] = *(undefined4 *)(PTR_DAT_0008102c + 0x14);\n  lookupTable[6] = *(undefined4 *)(PTR_DAT_0008102c + 0x18);\n  lookupTable[7] = *(undefined4 *)(PTR_DAT_0008102c + 0x1c);\n  lookupTable[8] = *(undefined4 *)(PTR_DAT_0008102c + 0x20);\n  lookupTable[9] = *(undefined4 *)(PTR_DAT_0008102c + 0x24);\n  lookupTable[10] = *(undefined4 *)(PTR_DAT_0008102c + 0x28);\n  lookupTable[11] = *(undefined4 *)(PTR_DAT_0008102c + 0x2c);\n  lookupTable[12] = *(undefined4 *)(PTR_DAT_0008102c + 0x30);\n  lookupTable[13] = *(undefined4 *)(PTR_DAT_0008102c + 0x34);\n  lookupTable[14] = *(undefined4 *)(PTR_DAT_0008102c + 0x38);\n  lookupTable[15] = *(undefined4 *)(PTR_DAT_0008102c + 0x3c);\n  *config = 1;\n  config[1] = 0;\n  config[0x48] = 0x202;\n  config[0x41] = 0;\n  config[0x45] = 0;\n  adjustedSize = totalSize / (uint)(elementSize * 2);\n  if (totalSize == elementSize * 2 * adjustedSize) {\n    adjustedSize = adjustedSize - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(maxMultiplier *\n              (int)(((ulonglong)totalSize / (ulonglong)((adjustedSize + 1) * 2)) / (ulonglong)DAT_00081030))\n        <= lookupTable[index]) {\n      config[1] = (index & 0xf) << 0x10 | (adjustedSize & 0xff) << 8 | config[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "calculate_optimal_configuration_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "ulPin": "pin",
                "ulMode": "mode",
                "puVar1": "pinDescription",
                "puVar2": "pinStatus",
                "uVar3": "pioType",
                "bVar4": "modeMask",
                "bVar5": "currentStatus",
                "iVar6": "pio",
                "iVar7": "pinOffset"
            },
            "code": "\nvoid configurePin_00081210(uint32_t pin,uint32_t mode)\n\n{\n  undefined *pinDescription;\n  undefined *pinStatus;\n  undefined4 pioType;\n  byte modeMask;\n  byte currentStatus;\n  int pio;\n  int pinOffset;\n  \n  pinStatus = PTR_g_pinStatus_00081310;\n  pinDescription = PTR_g_APinDescription_0008130c;\n  if (PTR_g_APinDescription_0008130c[pin * 0x1c + 0xc] != '\\0') {\n    if ((PTR_g_pinStatus_00081310[pin] & 0xf) == 4) {\n      adc_disable_channel(DAT_00081314,PTR_g_APinDescription_0008130c[pin * 0x1c + 0x19]);\n    }\n    currentStatus = pinStatus[pin];\n    modeMask = currentStatus & 0xf;\n    if ((modeMask < 3) && (currentStatus != 0)) {\n      if (modeMask == 2) {\n        if (mode == 0) {\n          return;\n        }\n      }\n      else if (modeMask == 1) {\n        if (mode == 2) {\n          return;\n        }\n      }\n      else if (modeMask == 3) {\n        if (mode == 1) {\n          return;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        pinOffset = pin * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(pinDescription + pinOffset + 8));\n        PIO_Configure(*(undefined4 *)(pinDescription + pinOffset),3,*(undefined4 *)(pinDescription + pinOffset + 4),0);\n        currentStatus = pinStatus[pin] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return;\n        }\n        pinOffset = pin * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(pinDescription + pinOffset + 8));\n        PIO_Configure(*(undefined4 *)(pinDescription + pinOffset),3,*(undefined4 *)(pinDescription + pinOffset + 4),1);\n        currentStatus = pinStatus[pin] & 0xf0 | 1;\n      }\n      pinStatus[pin] = currentStatus;\n      return;\n    }\n    pinOffset = pin * 0x1c;\n    pio = *(int *)(pinDescription + pinOffset);\n    if (currentStatus >> 4 == 0) {\n      pioType = 4;\n    }\n    else {\n      pioType = 5;\n    }\n    PIO_Configure(pio,pioType,*(undefined4 *)(pinDescription + pinOffset + 4),\n                  *(undefined4 *)(pinDescription + pinOffset + 0x10));\n    pinStatus[pin] = pinStatus[pin] & 0xf0 | 3;\n    if (*(int *)(pio + 0x18) == -1) {\n      pmc_disable_periph_clk(*(undefined4 *)(pinDescription + pinOffset + 8));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "pmc_disable_periph_clk",
                "adc_disable_channel"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "setup",
                "digitalWrite",
                "begin"
            ],
            "imported": false,
            "current_name": "configure_pin_00081210"
        },
        "FUN_00083994": {
            "renaming": {
                "FUN_00083994": "process_data_00083994",
                "param_1": "context",
                "param_2": "buffer",
                "piVar1": "tempPointer",
                "iVar2": "difference",
                "uVar3": "shortVal",
                "uVar4": "uintVal",
                "iVar5": "tempVar",
                "pcVar6": "funcPointer",
                "iVar7": "initialValue"
            },
            "code": "\nundefined4 processData_00083994(int *context,int *buffer)\n\n{\n  int *tempPointer;\n  int difference;\n  ushort shortVal;\n  uint uintVal;\n  int tempVar;\n  code *funcPointer;\n  int initialValue;\n  \n  shortVal = *(ushort *)(buffer + 3);\n  if ((int)((uint)shortVal << 0x1c) < 0) {\n    initialValue = buffer[4];\n    if (initialValue == 0) {\n      return 0;\n    }\n    difference = *buffer;\n    if ((shortVal & 3) == 0) {\n      tempVar = buffer[5];\n    }\n    else {\n      tempVar = 0;\n    }\n    *buffer = initialValue;\n    difference = difference - initialValue;\n    buffer[2] = tempVar;\n    do {\n      if (difference < 1) {\n        return 0;\n      }\n      tempVar = (*(code *)buffer[9])(context,buffer[7],initialValue,difference);\n      difference = difference - tempVar;\n      initialValue = initialValue + tempVar;\n    } while (0 < tempVar);\nLAB_00083a54:\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(buffer + 3) = shortVal | 0x800;\n  if ((buffer[1] < 1) && (buffer[0xf] < 1)) {\n    return 0;\n  }\n  funcPointer = (code *)buffer[10];\n  if (funcPointer == (code *)0x0) {\n    return 0;\n  }\n  uintVal = (uint)(shortVal | 0x800);\n  initialValue = *context;\n  *context = 0;\n  if ((shortVal & 0x1000) == 0) {\n    difference = (*funcPointer)(context,buffer[7],uintVal & 0x1000,1);\n    if ((difference == -1) && (tempVar = *context, tempVar != 0)) {\n      if ((tempVar == 0x1d) || (tempVar == 0x16)) {\n        *context = initialValue;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uintVal = (uint)*(ushort *)(buffer + 3);\n    funcPointer = (code *)buffer[10];\n  }\n  else {\n    difference = buffer[0x14];\n  }\n  if (((int)(uintVal << 0x1d) < 0) && (difference = difference - buffer[1], buffer[0xc] != 0)) {\n    difference = difference - buffer[0xf];\n  }\n  difference = (*funcPointer)(context,buffer[7],difference,0);\n  if (difference == -1) {\n    tempVar = *context;\n    if (tempVar != 0) {\n      if ((tempVar != 0x1d) && (tempVar != 0x16)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xf7ff;\n      *buffer = buffer[4];\n      buffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    shortVal = *(ushort *)(buffer + 3) & 0xf7ff;\n    buffer[1] = 0;\n    *(ushort *)(buffer + 3) = shortVal;\n    *buffer = buffer[4];\n  }\n  else {\n    shortVal = *(ushort *)(buffer + 3) & 0xf7ff;\n    *buffer = buffer[4];\n    *(ushort *)(buffer + 3) = shortVal;\n    buffer[1] = 0;\n  }\n  if ((int)((uint)shortVal << 0x13) < 0) {\n    buffer[0x14] = difference;\n  }\nLAB_00083a00:\n  tempPointer = (int *)buffer[0xc];\n  *context = initialValue;\n  if (tempPointer == (int *)0x0) {\n    return 0;\n  }\n  if (tempPointer != buffer + 0x10) {\n    _free_r(context);\n  }\n  buffer[0xc] = 0;\n  return 0;\n}\n\n",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083994",
            "calling": [
                "_fflush_r"
            ],
            "imported": false,
            "current_name": "process_data_00083994"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "write_uart_data_00081454",
                "UARTClass": "uartObj",
                "uc_data": "data",
                "pRVar1": "ringBuffer",
                "uVar2": "updatedHead",
                "this": "self"
            },
            "code": "\nsize_t __selfcall uartObj::writeUARTData_00081454(uartObj *self,uint8_t data)\n\n{\n  RingBuffer *ringBuffer;\n  uint updatedHead;\n  \n  ringBuffer = self->_tx_buffer;\n  if (((int)(self->_pUart->UART_SR << 0x1e) < 0) && (ringBuffer->_iTail == ringBuffer->_iHead)) {\n    self->_pUart->UART_THR = (uint)data;\n  }\n  else {\n    updatedHead = DAT_000814a4 & ringBuffer->_iHead + 1U;\n    if ((int)updatedHead < 0) {\n      updatedHead = (updatedHead - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (ringBuffer->_iTail == updatedHead);\n    ringBuffer->_aucBuffer[ringBuffer->_iHead] = data;\n    self->_tx_buffer->_iHead = updatedHead;\n    self->_pUart->UART_IER = 2;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "write_uart_data_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "calculate_result_00081730",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param",
                "param_4": "temp_var",
                "iVar1": "temp_int",
                "uVar2": "xor_input2",
                "uVar3": "temp_xor",
                "uVar4": "shifted_input1",
                "uVar5": "updated_shift",
                "uVar6": "diff",
                "iVar7": "shifted_int",
                "bVar8": "condition"
            },
            "code": "\nuint calculate_result_00081730(uint input_1,uint input_2,undefined4 unused_param,uint temp_var)\n\n{\n  int temp_int;\n  uint xor_input2;\n  uint temp_xor;\n  uint shifted_input1;\n  uint updated_shift;\n  uint diff;\n  int shifted_int;\n  bool condition;\n  \n  xor_input2 = input_2 ^ 0x80000000;\n  shifted_input1 = input_1 << 1;\n  condition = shifted_input1 == 0;\n  if (!condition) {\n    temp_var = input_2 << 1;\n    condition = temp_var == 0;\n  }\n  if (!condition) {\n    condition = shifted_input1 == temp_var;\n  }\n  shifted_int = (int)shifted_input1 >> 0x18;\n  if (!condition) {\n    condition = shifted_int == -1;\n  }\n  if (!condition) {\n    condition = (int)temp_var >> 0x18 == -1;\n  }\n  if (condition) {\n    temp_int = (int)(input_2 << 1) >> 0x18;\n    if (shifted_int == -1 || temp_int == -1) {\n      shifted_input1 = xor_input2;\n      if (shifted_int == -1) {\n        shifted_input1 = input_1;\n      }\n      if (shifted_int != -1 || temp_int != -1) {\n        xor_input2 = shifted_input1;\n      }\n      condition = (shifted_input1 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (xor_input2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = shifted_input1 == xor_input2;\n      }\n      if (!condition) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input_1 ^ xor_input2) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input_1 = xor_input2;\n      }\n      return input_1;\n    }\n    if (input_1 != xor_input2) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      xor_input2 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        xor_input2 = xor_input2 | 0x80000000;\n      }\n      return xor_input2;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_0008186a:\n    return input_1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  temp_var = temp_var >> 0x18;\n  diff = temp_var - shifted_input1;\n  condition = diff != 0;\n  updated_shift = shifted_input1;\n  if (condition && shifted_input1 <= temp_var) {\n    updated_shift = shifted_input1 + diff;\n  }\n  if (condition && shifted_input1 <= temp_var) {\n    xor_input2 = xor_input2 ^ input_1;\n  }\n  if (condition && shifted_input1 <= temp_var) {\n    input_1 = input_1 ^ xor_input2;\n  }\n  if (condition && shifted_input1 <= temp_var) {\n    xor_input2 = xor_input2 ^ input_1;\n  }\n  if (temp_var < shifted_input1) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return input_1;\n  }\n  shifted_input1 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  temp_xor = xor_input2 & 0xffffff | 0x800000;\n  if ((xor_input2 & 0x80000000) != 0) {\n    temp_xor = -temp_xor;\n  }\n  if (updated_shift == diff) {\n    temp_xor = temp_xor ^ 0x800000;\n    if (updated_shift == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      updated_shift = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)temp_xor >> (diff & 0xff));\n  temp_xor = temp_xor << (0x20 - diff & 0xff);\n  input_1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    condition = temp_xor != 0;\n    temp_xor = -temp_xor;\n    shifted_input1 = -shifted_input1 - (uint)condition;\n  }\n  if (shifted_input1 < 0x800000) {\n    xor_input2 = temp_xor & 0x80000000;\n    temp_xor = temp_xor << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(xor_input2 != 0);\n    xor_input2 = updated_shift - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      shifted_int = count_leading_zeroes(shifted_input1);\n      diff = shifted_int - 8;\n      shifted_input1 = shifted_input1 << (diff & 0xff);\n      if ((int)xor_input2 < (int)diff) {\n        shifted_input1 = shifted_input1 >> (-(xor_input2 - diff) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (xor_input2 - diff) * 0x800000;\n      }\n      return shifted_input1 | input_1;\n    }\n  }\n  else {\n    xor_input2 = updated_shift - 1;\n    if (0xffffff < shifted_input1) {\n      xor_input2 = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      temp_xor = (uint)(xor_input2 != 0) << 0x1f | temp_xor >> 1;\n      xor_input2 = updated_shift;\n      if (0xfd < updated_shift) goto LAB_0008186a;\n    }\n  }\n  shifted_input1 = shifted_input1 + xor_input2 * 0x800000 + (uint)(0x7fffffff < temp_xor);\n  if (temp_xor == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081730",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_result_00081730"
        },
        "FUN_00084600": {
            "renaming": {
                "FUN_00084600": "close_and_update_error_00084600",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "close_result"
            },
            "code": "\nvoid close_and_update_error_00084600(int *error_code_ptr,int file_descriptor)\n\n{\n  undefined *errno_ptr;\n  int close_result;\n  \n  errno_ptr = PTR_errno_00084620;\n  *(undefined4 *)PTR_errno_00084620 = 0;\n  close_result = _close(file_descriptor);\n  if ((close_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084600",
            "calling": [
                "__sclose"
            ],
            "imported": false,
            "current_name": "close_and_update_error_00084600"
        },
        "FUN_00081578": {
            "renaming": {
                "FUN_00081578": "initialize_uart_00081578",
                "UARTClass": "uart",
                "dwBaudRate": "baudRate"
            },
            "code": "\nvoid __thiscall uart::initializeUART_00081578(uart *this,uint32_t baudRate)\n\n{\n  init(this,baudRate,0x800);\n  return;\n}\n\n",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081578",
            "calling": [],
            "imported": false,
            "current_name": "initialize_uart_00081578"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "floating_point_addition_00081734",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "unusedParam",
                "param_4": "tempParam",
                "iVar1": "tempInt1",
                "uVar2": "tempUint2",
                "uVar3": "tempUint3",
                "uVar4": "tempUint4",
                "uVar5": "tempUint5",
                "iVar6": "tempInt6",
                "bVar7": "tempBool"
            },
            "code": "\nuint floatingPointAddition_00081734(uint inputA,uint inputB,undefined4 unusedParam,uint tempParam)\n\n{\n  int tempInt1;\n  uint tempUint2;\n  uint tempUint3;\n  uint tempUint4;\n  uint tempUint5;\n  int tempInt6;\n  bool tempBool;\n  \n  tempUint3 = inputA << 1;\n  tempBool = tempUint3 == 0;\n  if (!tempBool) {\n    tempParam = inputB << 1;\n    tempBool = tempParam == 0;\n  }\n  if (!tempBool) {\n    tempBool = tempUint3 == tempParam;\n  }\n  tempInt6 = (int)tempUint3 >> 0x18;\n  if (!tempBool) {\n    tempBool = tempInt6 == -1;\n  }\n  if (!tempBool) {\n    tempBool = (int)tempParam >> 0x18 == -1;\n  }\n  if (tempBool) {\n    tempInt1 = (int)(inputB << 1) >> 0x18;\n    if (tempInt6 == -1 || tempInt1 == -1) {\n      tempUint3 = inputB;\n      if (tempInt6 == -1) {\n        tempUint3 = inputA;\n      }\n      if (tempInt6 != -1 || tempInt1 != -1) {\n        inputB = tempUint3;\n      }\n      tempBool = (tempUint3 & 0x7fffff) == 0;\n      if (tempBool) {\n        tempBool = (inputB & 0x7fffff) == 0;\n      }\n      if (tempBool) {\n        tempBool = tempUint3 == inputB;\n      }\n      if (!tempBool) {\n        tempUint3 = tempUint3 | 0x400000;\n      }\n      return tempUint3;\n    }\n    if (((inputA ^ inputB) & 0x7fffffff) != 0) {\n      if (tempUint3 == 0) {\n        inputA = inputB;\n      }\n      return inputA;\n    }\n    if (inputA != inputB) {\n      return 0;\n    }\n    if ((tempUint3 & 0xff000000) == 0) {\n      tempUint3 = inputA << 1;\n      if ((inputA & 0x80000000) != 0) {\n        tempUint3 = tempUint3 | 0x80000000;\n      }\n      return tempUint3;\n    }\n    if (tempUint3 < 0xfe000000) {\n      return inputA + 0x800000;\n    }\n    inputA = inputA & 0x80000000;\nLAB_0008186a:\n    return inputA | 0x7f800000;\n  }\n  tempUint3 = tempUint3 >> 0x18;\n  tempParam = tempParam >> 0x18;\n  tempUint5 = tempParam - tempUint3;\n  tempBool = tempUint5 != 0;\n  tempUint4 = tempUint3;\n  if (tempBool && tempUint3 <= tempParam) {\n    tempUint4 = tempUint3 + tempUint5;\n  }\n  if (tempBool && tempUint3 <= tempParam) {\n    inputB = inputB ^ inputA;\n  }\n  if (tempBool && tempUint3 <= tempParam) {\n    inputA = inputA ^ inputB;\n  }\n  if (tempBool && tempUint3 <= tempParam) {\n    inputB = inputB ^ inputA;\n  }\n  if (tempParam < tempUint3) {\n    tempUint5 = -tempUint5;\n  }\n  if (0x19 < tempUint5) {\n    return inputA;\n  }\n  tempUint3 = inputA & 0xffffff | 0x800000;\n  if ((inputA & 0x80000000) != 0) {\n    tempUint3 = -tempUint3;\n  }\n  tempUint2 = inputB & 0xffffff | 0x800000;\n  if ((inputB & 0x80000000) != 0) {\n    tempUint2 = -tempUint2;\n  }\n  if (tempUint4 == tempUint5) {\n    tempUint2 = tempUint2 ^ 0x800000;\n    if (tempUint4 == 0) {\n      tempUint3 = tempUint3 ^ 0x800000;\n      tempUint4 = 1;\n    }\n    else {\n      tempUint5 = tempUint5 - 1;\n    }\n  }\n  tempUint3 = tempUint3 + ((int)tempUint2 >> (tempUint5 & 0xff));\n  tempUint2 = tempUint2 << (0x20 - tempUint5 & 0xff);\n  inputA = tempUint3 & 0x80000000;\n  if ((int)tempUint3 < 0) {\n    tempBool = tempUint2 != 0;\n    tempUint2 = -tempUint2;\n    tempUint3 = -tempUint3 - (uint)tempBool;\n  }\n  if (tempUint3 < 0x800000) {\n    tempUint5 = tempUint2 & 0x80000000;\n    tempUint2 = tempUint2 << 1;\n    tempUint3 = tempUint3 * 2 + (uint)(tempUint5 != 0);\n    tempUint5 = tempUint4 - 2;\n    if ((tempUint3 & 0x800000) == 0) {\n      tempInt6 = count_leading_zeroes(tempUint3);\n      tempUint4 = tempInt6 - 8;\n      tempUint3 = tempUint3 << (tempUint4 & 0xff);\n      if ((int)tempUint5 < (int)tempUint4) {\n        tempUint3 = tempUint3 >> (-(tempUint5 - tempUint4) & 0xff);\n      }\n      else {\n        tempUint3 = tempUint3 + (tempUint5 - tempUint4) * 0x800000;\n      }\n      return tempUint3 | inputA;\n    }\n  }\n  else {\n    tempUint5 = tempUint4 - 1;\n    if (0xffffff < tempUint3) {\n      tempUint5 = tempUint3 & 1;\n      tempUint3 = tempUint3 >> 1;\n      tempUint2 = (uint)(tempUint5 != 0) << 0x1f | tempUint2 >> 1;\n      tempUint5 = tempUint4;\n      if (0xfd < tempUint4) goto LAB_0008186a;\n    }\n  }\n  tempUint3 = tempUint3 + tempUint5 * 0x800000 + (uint)(0x7fffffff < tempUint2);\n  if (tempUint2 == 0x80000000) {\n    tempUint3 = tempUint3 & 0xfffffffe;\n  }\n  return tempUint3 | inputA;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "loop",
                "__aeabi_frsub"
            ],
            "imported": false,
            "current_name": "floating_point_addition_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "read_and_handle_error_00084728",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar1": "errno_ptr",
                "iVar2": "read_result"
            },
            "code": "\nvoid read_and_handle_error_00084728(int *error_code_ptr,int file_descriptor,char *buffer,int buffer_size)\n\n{\n  undefined *errno_ptr;\n  int read_result;\n  \n  errno_ptr = PTR_errno_0008474c;\n  *(undefined4 *)PTR_errno_0008474c = 0;\n  read_result = _read(file_descriptor,buffer,buffer_size);\n  if ((read_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [
                "__sread"
            ],
            "imported": false,
            "current_name": "read_and_handle_error_00084728"
        },
        "FUN_0008116a": {
            "renaming": {
                "FUN_0008116a": "infinite_loop_0008116a"
            },
            "code": "\nvoid infiniteLoop_0008116a(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116a",
            "calling": [],
            "imported": false,
            "current_name": "infinite_loop_0008116a"
        },
        "FUN_000813e0": {
            "renaming": {
                "FUN_000813e0": "is_uart_class_initialized_000813e0",
                "UARTClass": "uart_class"
            },
            "code": "\n/* Original name: operator bool */\n\nbool __thiscall uart_class::isUARTClassInitialized_000813e0(uart_class *this)\n\n{\n  return true;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e0",
            "calling": [],
            "imported": false,
            "current_name": "is_uart_class_initialized_000813e0"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "locale_data",
                "param_2": "input_value",
                "param_3": "buffer",
                "uVar1": "locale_mb_cur_max_result",
                "iVar2": "swbuf_result",
                "uVar3": "temp_value",
                "pbVar4": "buffer_ptr",
                "uVar5": "index",
                "local_1c": "converted_byte",
                "abStack_1b": "additional_bytes"
            },
            "code": "\nuint process_data_00083c40(undefined4 locale_data,uint input_value,byte **buffer)\n\n{\n  uint locale_mb_cur_max_result;\n  int swbuf_result;\n  uint temp_value;\n  byte *buffer_ptr;\n  uint index;\n  byte converted_byte;\n  byte additional_bytes [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  locale_mb_cur_max_result = __locale_mb_cur_max();\n  if ((locale_mb_cur_max_result == 1) && (input_value - 1 < 0xff)) {\n    temp_value = input_value & 0xff;\n    converted_byte = (byte)temp_value;\n  }\n  else {\n    locale_mb_cur_max_result = _wcrtomb_r(locale_data,&converted_byte,input_value,buffer + 0x17);\n    if (locale_mb_cur_max_result == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (locale_mb_cur_max_result == 0) {\n      return input_value;\n    }\n    temp_value = (uint)converted_byte;\n  }\n  index = 0;\n  do {\n    buffer_ptr = buffer[2] + -1;\n    buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)buffer[6] <= (int)buffer_ptr) {\n        **buffer = (byte)temp_value;\n        buffer_ptr = *buffer;\n        temp_value = (uint)*buffer_ptr;\n        if (temp_value != 10) goto LAB_00083c90;\n      }\n      swbuf_result = __swbuf_r(locale_data,temp_value,buffer);\n      if (swbuf_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)temp_value;\n      buffer_ptr = *buffer;\nLAB_00083c90:\n      *buffer = buffer_ptr + 1;\n    }\n    if (locale_mb_cur_max_result <= index + 1) {\n      return input_value;\n    }\n    temp_value = (uint)additional_bytes[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "_wcrtomb_r",
                "__locale_mb_cur_max",
                "__swbuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_0008116e": {
            "renaming": {
                "FUN_0008116e": "process_time_tick_0008116e",
                "iVar1": "isFalseResult"
            },
            "code": "\nvoid processTimeTick_0008116e(void)\n\n{\n  int isFalseResult;\n  \n  isFalseResult = __false();\n  if (isFalseResult == 0) {\n    tickReset();\n    TimeTick_Increment();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "tickReset",
                "TimeTick_Increment",
                "__false"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008116e",
            "calling": [],
            "imported": false,
            "current_name": "process_time_tick_0008116e"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "process_control_loop_000805d0",
                "puVar1": "dataBuffer",
                "puVar2": "dutyCycle",
                "puVar3": "minutesDifference",
                "puVar4": "mmResult",
                "puVar5": "ssResult",
                "puVar6": "secondsDifference",
                "puVar7": "state",
                "puVar8": "minutes",
                "puVar9": "seconds",
                "uVar10": "fixedValue",
                "uVar11": "secondsValue",
                "uVar12": "currentMillis",
                "uVar13": "tempFloat1",
                "uVar14": "tempFloat2",
                "uVar15": "tempFloat3",
                "iVar16": "tempInt1",
                "iVar17": "tempInt2",
                "piVar18": "waitPlancha",
                "iVar20": "tempInt3",
                "uVar19": "tempFloat4"
            },
            "code": "\nvoid processControlLoop_000805d0(void)\n\n{\n  undefined *dataBuffer;\n  undefined *dutyCycle;\n  undefined *minutesDifference;\n  undefined *mmResult;\n  undefined *ssResult;\n  undefined *secondsDifference;\n  undefined *state;\n  undefined *minutes;\n  undefined *seconds;\n  undefined2 fixedValue;\n  uint secondsValue;\n  uint32_t currentMillis;\n  undefined4 tempFloat1;\n  undefined4 tempFloat2;\n  undefined4 tempFloat3;\n  int tempInt1;\n  int tempInt2;\n  int *waitPlancha;\n  undefined4 tempFloat4;\n  int tempInt3;\n  \n  state = PTR_estado_0008089c;\n  seconds = PTR_segundos_00080898;\n  minutes = PTR_minutos_00080894;\n  minutesDifference = PTR_mmt_0008087c;\n  ssResult = PTR_ssres_00080878;\n  mmResult = PTR_mmres_00080874;\n  dutyCycle = PTR_duty1_00080834;\n  dataBuffer = PTR_au16data_00080830;\n  if ((byte)*PTR_u8state_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_u8state_0008082c] * 2))();\n    return;\n  }\n  tempInt2 = *(int *)PTR_minutos_00080894;\n  tempInt1 = tempInt2 - *(int *)PTR_mmres_00080874;\n  if (tempInt1 < 0) {\n    tempInt1 = tempInt1 + 0x3c;\n  }\n  *(int *)PTR_mmt_0008087c = tempInt1;\n  secondsDifference = PTR_sst_00080880;\n  secondsValue = *(uint *)seconds;\n  tempInt1 = secondsValue - *(int *)ssResult;\n  *(int *)PTR_sst_00080880 = tempInt1;\n  if (tempInt1 < 0) {\n    *(int *)minutesDifference = *(int *)minutesDifference + -1;\n    *(int *)secondsDifference = tempInt1 + 0x3c;\n  }\n  tempInt1 = *(int *)minutesDifference;\n  tempInt3 = *(int *)secondsDifference;\n  *(short *)(dataBuffer + 0x36) = (short)tempInt1;\n  *(short *)(dataBuffer + 0x38) = (short)tempInt3;\n  if ((tempInt1 == 0) && (tempInt3 == 0)) {\n    *(undefined4 *)PTR_terminar_ciclo_00080868 = 1;\n    *(undefined4 *)mmResult = 0;\n    *(undefined4 *)ssResult = 0;\n  }\n  secondsDifference = PTR_segundosp_00080888;\n  minutesDifference = PTR_minutosp_00080884;\n  if (*(int *)PTR_minutosp_00080884 == tempInt2) {\n    tempInt1 = 1 - secondsValue;\n    if (1 < secondsValue) {\n      tempInt1 = 0;\n    }\n    *(int *)PTR_segundosp_00080888 = tempInt1;\n    if (tempInt1 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)minutesDifference = tempInt2;\n    minutesDifference = PTR_espera_plancha_00080a50;\n    *(uint *)secondsDifference = secondsValue;\n    *(undefined4 *)mmResult = 0;\n    *(undefined4 *)ssResult = 0;\n    *(undefined4 *)minutesDifference = 0;\n  }\n  secondsDifference = PTR_espera_plancha_0008088c;\n  minutesDifference = PTR_tiempo_espera_00080860;\n  tempInt1 = *(int *)state;\n  if (tempInt1 == 0) {\n    *(undefined4 *)mmResult = 0;\n    *(undefined4 *)ssResult = 0;\n    waitPlancha = (int *)PTR_espera_plancha_0008088c;\nLAB_000808f2:\n    *waitPlancha = tempInt1;\n  }\n  else {\n    if (tempInt1 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_espera_plancha_0008088c < *(int *)PTR_tiempo_espera_00080860) {\n      currentMillis = millis();\n      state = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < currentMillis) {\n        *(int *)secondsDifference = *(int *)secondsDifference + 1;\n        currentMillis = millis();\n        *(uint32_t *)state = currentMillis + 1000;\n      }\n    }\n    if (*(int *)secondsDifference < *(int *)minutesDifference) goto LAB_000808f4;\n    *(int *)PTR_espera_plancha_0008088c = *(int *)minutesDifference + 1;\n    waitPlancha = (int *)PTR_mmres_00080a20;\n    minutesDifference = PTR_ssres_00080a1c;\n    if (*(int *)mmResult < *(int *)minutes) {\n      currentMillis = millis();\n      minutesDifference = PTR_reloj_00080890;\n      if (*(uint *)PTR_reloj_00080890 < currentMillis) {\n        *(int *)ssResult = *(int *)ssResult + 1;\n        currentMillis = millis();\n        *(uint32_t *)minutesDifference = currentMillis + 1000;\n      }\n    }\n    else {\n      if (*(int *)mmResult != *(int *)minutes) goto LAB_000808f4;\n      if (*(int *)seconds < *(int *)ssResult) {\n        tempInt1 = 0;\n        *(undefined4 *)PTR_ssres_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      currentMillis = millis();\n      minutes = PTR_reloj_00080a54;\n      if (*(uint *)PTR_reloj_00080a54 < currentMillis) {\n        *(int *)minutesDifference = *(int *)minutesDifference + 1;\n        currentMillis = millis();\n        *(uint32_t *)minutes = currentMillis + 1000;\n      }\n    }\n    if (0x3b < *(int *)ssResult) {\n      *(undefined4 *)PTR_ssres_00080a1c = 0;\n      *(int *)mmResult = *(int *)mmResult + 1;\n    }\n  }\nLAB_000808f4:\n  currentMillis = millis();\n  minutes = PTR_kia1_00080a60;\n  minutesDifference = PTR_incre_00080a5c;\n  ssResult = PTR_tiempopid1_00080a58;\n  mmResult = PTR_YN_00080a24;\n  if (*(uint *)PTR_tiempopid1_00080a58 < currentMillis) {\n    tempFloat1 = __floatsisf(*(undefined4 *)PTR_tempe_z1_00080a28);\n    tempFloat1 = __aeabi_fsub(tempFloat1,*(undefined4 *)PTR_temperatura1_00080a2c);\n    *(undefined4 *)PTR_e1_00080a30 = tempFloat1;\n    seconds = PTR_ep1_00080a34;\n    tempFloat4 = *(undefined4 *)PTR_ep1_00080a34;\n    tempFloat2 = __addsf3(tempFloat1,tempFloat4);\n    tempFloat2 = __aeabi_fmul(tempFloat2,*(undefined4 *)minutes);\n    state = PTR_kip1_00080a64;\n    tempFloat2 = __addsf3(tempFloat2,*(undefined4 *)PTR_kip1_00080a64);\n    *(undefined4 *)minutes = tempFloat2;\n    tempFloat4 = __aeabi_fsub(tempFloat1,tempFloat4);\n    tempFloat4 = __aeabi_fmul(tempFloat4,*(undefined4 *)PTR_kda1_00080a38);\n    minutes = PTR_kdp1_00080a3c;\n    tempFloat4 = __aeabi_fsub(tempFloat4,*(undefined4 *)PTR_kdp1_00080a3c);\n    *(undefined4 *)PTR_kda1_00080a38 = tempFloat4;\n    tempFloat3 = __aeabi_fmul(tempFloat1,*(undefined4 *)PTR_kpa1_00080a40);\n    tempFloat3 = __addsf3(tempFloat3,tempFloat2);\n    __addsf3(tempFloat3,tempFloat4);\n    tempFloat3 = __aeabi_f2iz();\n    *(undefined4 *)PTR_pid1_00080a44 = tempFloat3;\n    tempFloat3 = __floatsisf();\n    *(undefined4 *)seconds = tempFloat1;\n    *(undefined4 *)mmResult = tempFloat3;\n    *(undefined4 *)minutesDifference = 0;\n    *(undefined4 *)state = tempFloat2;\n    *(undefined4 *)minutes = tempFloat4;\n    currentMillis = millis();\n    *(uint32_t *)ssResult = currentMillis + *(int *)dutyCycle;\n  }\n  tempFloat1 = __floatsisf(*(undefined4 *)dutyCycle);\n  tempInt1 = __aeabi_fcmpge(*(undefined4 *)mmResult,tempFloat1);\n  if (tempInt1 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = tempFloat1;\n  }\n  tempInt1 = __aeabi_fcmple(*(undefined4 *)mmResult,0);\n  if (tempInt1 != 0) {\n    *(undefined4 *)PTR_YN_00080a24 = 0;\n  }\n  fixedValue = __fixunssfsi(*(undefined4 *)mmResult);\n  tempInt1 = *(int *)minutesDifference;\n  *(undefined2 *)(dataBuffer + 0x2a) = fixedValue;\n  *(int *)minutesDifference = tempInt1 + 1;\n  *(uint *)PTR_in1_00080a4c = *(ushort *)PTR_data8024_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "millis",
                "__aeabi_f2iz",
                "poll",
                "__aeabi_fmul",
                "__addsf3",
                "query",
                "__fixunssfsi",
                "__floatunsisf",
                "__aeabi_fsub",
                "__aeabi_fcmple",
                "__aeabi_fcmpge",
                "__floatsisf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_control_loop_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "get_buffer_difference_000813e4",
                "UARTClass": "Uart",
                "_rx_buffer": "rx_buffer",
                "_iHead": "head",
                "_iTail": "tail"
            },
            "code": "\nint __thiscall Uart::get_buffer_difference_000813e4(Uart *this)\n\n{\n  return this->rx_buffer->head - this->rx_buffer->tail & 0x7f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "get_buffer_difference_000813e4"
        },
        "FUN_00081cbc": {
            "renaming": {
                "FUN_00081cbc": "compare_floats_00081cbc",
                "in_CY": "comparison_result"
            },
            "code": "\nbool compare_floats_00081cbc(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cfrcmple();\n  return comparison_result == '\\0';\n}\n\n",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cbc",
            "calling": [],
            "imported": false,
            "current_name": "compare_floats_00081cbc"
        },
        "FUN_00080aac": {
            "renaming": {
                "FUN_00080aac": "handle_uart_interrupt_00080aac",
                "UARTClass": "UARTController"
            },
            "code": "\nvoid handleUARTInterrupt_00080aac(void)\n\n{\n  UARTController::IrqHandler((UARTController *)PTR_Serial_00080ab4);\n  return;\n}\n\n",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aac",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080aac"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(uint32_t ms)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_lc_ctype_charset_00084290"
            },
            "code": "\nundefined * get_lc_ctype_charset_00084290(void)\n\n{\n  return PTR_lc_ctype_charset_00084294;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "get_lc_ctype_charset_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "check_file_status_000846b4",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "param_3": "file_stat",
                "puVar1": "errno_ptr",
                "iVar2": "fstat_result"
            },
            "code": "\nvoid check_file_status_000846b4(int *error_code_ptr,int file_descriptor,stat *file_stat)\n\n{\n  undefined *errno_ptr;\n  int fstat_result;\n  \n  errno_ptr = PTR_errno_000846d8;\n  *(undefined4 *)PTR_errno_000846d8 = 0;\n  fstat_result = _fstat(file_descriptor,file_stat);\n  if ((fstat_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_file_status_000846b4"
        },
        "FUN_0008120e": {
            "renaming": {
                "FUN_0008120e": "do_nothing_0008120e"
            },
            "code": "\nvoid do_nothing_0008120e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120e"
        },
        "FUN_000811a8": {
            "renaming": {
                "FUN_000811a8": "unimplemented_function_000811a8",
                "cOld_UNUSED": "oldString_UNUSED",
                "cNew_UNUSED": "newString_UNUSED"
            },
            "code": "\nint unimplemented_function_000811a8(char *oldString_UNUSED,char *newString_UNUSED)\n\n{\n  return -1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811a8",
            "calling": [],
            "imported": false,
            "current_name": "unimplemented_function_000811a8"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "this": "buffer"
            },
            "code": "\ninitializeBuffer_000813a8 * __buffercall initializeBuffer_000813a8::initializeBuffer_000813a8(initializeBuffer_000813a8 *buffer)\n\n{\n  memset(buffer,0,0x80);\n  buffer->_iHead = 0;\n  buffer->_iTail = 0;\n  return buffer;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "initialize_buffer_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "improved_memory_management_00083d9c",
                "param_1": "context",
                "param_2": "memory_block",
                "puVar1": "temp_pointer1",
                "uVar2": "temp_uint1",
                "iVar3": "temp_int1",
                "iVar4": "temp_int2",
                "uVar5": "adjusted_size",
                "iVar6": "adjusted_block",
                "uVar7": "next_block_size",
                "puVar8": "main_arena"
            },
            "code": "\nvoid improved_memory_management_00083d9c(undefined4 context,int memory_block)\n\n{\n  undefined *temp_pointer1;\n  uint temp_uint1;\n  int temp_int1;\n  int temp_int2;\n  uint adjusted_size;\n  int adjusted_block;\n  uint next_block_size;\n  undefined *main_arena;\n  \n  if (memory_block == 0) {\n    return;\n  }\n  __malloc_lock();\n  main_arena = PTR___malloc_av__00083f24;\n  temp_uint1 = *(uint *)(memory_block + -4);\n  adjusted_block = memory_block + -8;\n  adjusted_size = temp_uint1 & 0xfffffffe;\n  temp_int2 = adjusted_block + adjusted_size;\n  next_block_size = *(uint *)(temp_int2 + 4) & 0xfffffffc;\n  if (*(int *)(PTR___malloc_av__00083f24 + 8) == temp_int2) {\n    next_block_size = next_block_size + adjusted_size;\n    if (-1 < (int)(temp_uint1 << 0x1f)) {\n      adjusted_block = adjusted_block - *(int *)(memory_block + -8);\n      temp_int1 = *(int *)(adjusted_block + 0xc);\n      temp_int2 = *(int *)(adjusted_block + 8);\n      next_block_size = next_block_size + *(int *)(memory_block + -8);\n      *(int *)(temp_int2 + 0xc) = temp_int1;\n      *(int *)(temp_int1 + 8) = temp_int2;\n    }\n    temp_uint1 = *(uint *)PTR___malloc_trim_threshold_00083f2c;\n    *(uint *)(adjusted_block + 4) = next_block_size | 1;\n    *(int *)(main_arena + 8) = adjusted_block;\n    if (temp_uint1 <= next_block_size) {\n      _malloc_trim_r(context,*(undefined4 *)PTR___malloc_top_pad_00083f30);\n    }\n  }\n  else {\n    temp_uint1 = temp_uint1 & 1;\n    *(uint *)(temp_int2 + 4) = next_block_size;\n    if (temp_uint1 == 0) {\n      adjusted_block = adjusted_block - *(int *)(memory_block + -8);\n      temp_pointer1 = *(undefined **)(adjusted_block + 8);\n      adjusted_size = adjusted_size + *(int *)(memory_block + -8);\n      if (temp_pointer1 == main_arena + 8) {\n        temp_uint1 = 1;\n      }\n      else {\n        temp_int1 = *(int *)(adjusted_block + 0xc);\n        *(int *)(temp_pointer1 + 0xc) = temp_int1;\n        *(undefined **)(temp_int1 + 8) = temp_pointer1;\n      }\n    }\n    else {\n      temp_uint1 = 0;\n    }\n    if (-1 < *(int *)(temp_int2 + next_block_size + 4) << 0x1f) {\n      adjusted_size = adjusted_size + next_block_size;\n      temp_pointer1 = *(undefined **)(temp_int2 + 8);\n      if ((temp_uint1 == 0) && (temp_pointer1 == PTR_PTR___malloc_av__00083f28)) {\n        *(int *)(main_arena + 0x14) = adjusted_block;\n        *(int *)(main_arena + 0x10) = adjusted_block;\n        *(undefined **)(adjusted_block + 0xc) = temp_pointer1;\n        *(undefined **)(adjusted_block + 8) = temp_pointer1;\n        *(uint *)(adjusted_block + 4) = adjusted_size | 1;\n        *(uint *)(adjusted_block + adjusted_size) = adjusted_size;\n        goto LAB_00083e30;\n      }\n      temp_int2 = *(int *)(temp_int2 + 0xc);\n      *(int *)(temp_pointer1 + 0xc) = temp_int2;\n      *(undefined **)(temp_int2 + 8) = temp_pointer1;\n    }\n    *(uint *)(adjusted_block + 4) = adjusted_size | 1;\n    *(uint *)(adjusted_block + adjusted_size) = adjusted_size;\n    if (temp_uint1 == 0) {\n      if (adjusted_size < 0x200) {\n        temp_uint1 = *(uint *)(main_arena + 4);\n        temp_pointer1 = main_arena + (adjusted_size & 0xfffffff8);\n        temp_int2 = *(int *)(temp_pointer1 + 8);\n        *(int *)(adjusted_block + 8) = temp_int2;\n        *(undefined **)(adjusted_block + 0xc) = temp_pointer1;\n        *(uint *)(main_arena + 4) = temp_uint1 | 1 << ((int)(adjusted_size >> 3) >> 2 & 0xffU);\n        *(int *)(temp_pointer1 + 8) = adjusted_block;\n        *(int *)(temp_int2 + 0xc) = adjusted_block;\n        __malloc_unlock(context);\n        return;\n      }\n      temp_uint1 = adjusted_size >> 9;\n      if (temp_uint1 < 5) {\n        temp_int2 = (adjusted_size >> 6) + 0x38;\n        temp_int1 = temp_int2 * 2;\n      }\n      else if (temp_uint1 < 0x15) {\n        temp_int2 = temp_uint1 + 0x5b;\n        temp_int1 = temp_int2 * 2;\n      }\n      else if (temp_uint1 < 0x55) {\n        temp_int2 = (adjusted_size >> 0xc) + 0x6e;\n        temp_int1 = temp_int2 * 2;\n      }\n      else if (temp_uint1 < 0x155) {\n        temp_int2 = (adjusted_size >> 0xf) + 0x77;\n        temp_int1 = temp_int2 * 2;\n      }\n      else if (temp_uint1 < 0x555) {\n        temp_int2 = (adjusted_size >> 0x12) + 0x7c;\n        temp_int1 = temp_int2 * 2;\n      }\n      else {\n        temp_int1 = 0xfc;\n        temp_int2 = 0x7e;\n      }\n      main_arena = main_arena + temp_int1 * 4;\n      temp_pointer1 = *(undefined **)(main_arena + 8);\n      if (temp_pointer1 == main_arena) {\n        *(uint *)(PTR___malloc_av__00083f24 + 4) =\n             *(uint *)(PTR___malloc_av__00083f24 + 4) | 1 << (temp_int2 >> 2 & 0xffU);\n        main_arena = temp_pointer1;\n      }\n      else {\n        do {\n          if ((*(uint *)(temp_pointer1 + 4) & 0xfffffffc) <= adjusted_size) break;\n          temp_pointer1 = *(undefined **)(temp_pointer1 + 8);\n        } while (main_arena != temp_pointer1);\n        main_arena = *(undefined **)(temp_pointer1 + 0xc);\n      }\n      *(undefined **)(adjusted_block + 0xc) = main_arena;\n      *(undefined **)(adjusted_block + 8) = temp_pointer1;\n      *(int *)(main_arena + 8) = adjusted_block;\n      *(int *)(temp_pointer1 + 0xc) = adjusted_block;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(context);\n  return;\n}\n\n",
            "called": [
                "__malloc_unlock",
                "_malloc_trim_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "_malloc_r",
                "_realloc_r",
                "__sfvwrite_r",
                "__swsetup_r",
                "_fclose_r",
                "free",
                "__sflush_r"
            ],
            "imported": false,
            "current_name": "improved_memory_management_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_000818c8": {
            "renaming": {
                "FUN_000818c8": "calculate_result_000818c8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "uVar5": "result",
                "iVar6": "intermediate_result",
                "uVar7": "shifted_temp_2",
                "bVar8": "negative_condition"
            },
            "code": "\nuint calculate_result_000818c8(uint input_1,uint input_2)\n\n{\n  uint temp_1;\n  uint temp_2;\n  int leading_zeroes;\n  uint shift_amount;\n  uint result;\n  int intermediate_result;\n  uint shifted_temp_2;\n  bool negative_condition;\n  \n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  result = input_2 & 0x80000000;\n  if ((int)result < 0) {\n    negative_condition = input_1 != 0;\n    input_1 = -input_1;\n    input_2 = -input_2 - (uint)negative_condition;\n  }\n  temp_2 = input_1;\n  temp_1 = input_2;\n  if (input_2 == 0) {\n    temp_2 = 0;\n    temp_1 = input_1;\n  }\n  result = result | 0x5b000000;\n  if (input_2 == 0) {\n    result = result + 0xf0000000;\n  }\n  leading_zeroes = count_leading_zeroes(temp_1);\n  shift_amount = leading_zeroes - 8;\n  intermediate_result = (result - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes < 8) {\n    shift_amount = temp_1 << (leading_zeroes + 0x18U & 0xff);\n    result = intermediate_result + ((temp_1 >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n    if ((temp_2 | shift_amount << 1) == 0) {\n      result = result & ~(shift_amount >> 0x1f);\n    }\n    return result;\n  }\n  shifted_temp_2 = temp_2 << (shift_amount & 0xff);\n  result = intermediate_result + (temp_1 << (shift_amount & 0xff)) +\n          (temp_2 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_temp_2);\n  if (shifted_temp_2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818c8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_000818c8"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "value1",
                "param_2": "value2",
                "uVar2": "double_value1",
                "uVar3": "double_value2",
                "uVar4": "temp_result",
                "bVar1": "is_positive",
                "bVar5": "is_zero"
            },
            "code": "\nuint calculate_result_00081bf4(uint value1,uint value2)\n\n{\n  bool is_positive;\n  uint double_value1;\n  uint double_value2;\n  uint temp_result;\n  bool is_zero;\n  \n  double_value1 = value1 * 2;\n  double_value2 = value2 * 2;\n  if (((int)double_value1 >> 0x18 == -1 || (int)double_value2 >> 0x18 == -1) &&\n     ((((int)double_value1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) ||\n      (((int)double_value2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  temp_result = double_value1 | value2 & 0x7fffffff;\n  is_zero = temp_result == 0;\n  if (!is_zero) {\n    temp_result = value1 ^ value2;\n    is_zero = temp_result == 0;\n  }\n  is_positive = -1 < (int)temp_result;\n  if (is_positive) {\n    value1 = double_value1 + value2 * -2;\n    is_zero = value1 == 0;\n  }\n  if ((is_positive && double_value2 <= double_value1) && !is_zero) {\n    value1 = (int)value2 >> 0x1f;\n  }\n  if (!is_positive || double_value2 > double_value1) {\n    value1 = ~((int)value2 >> 0x1f);\n  }\n  if (!is_zero) {\n    value1 = value1 | 1;\n  }\n  return value1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "execute_preinit_and_init_00081d7c",
                "puVar1": "init_end_ptr",
                "puVar2": "init_start_ptr",
                "iVar3": "index",
                "ppcVar4": "func_ptr",
                "iVar5": "count"
            },
            "code": "\nvoid execute_preinit_and_init_00081d7c(void)\n\n{\n  undefined *init_end_ptr;\n  undefined *init_start_ptr;\n  int index;\n  code **func_ptr;\n  int count;\n  \n  count = (int)PTR___preinit_array_end_00081dbc - (int)PTR___preinit_array_end_00081dc0 >> 2;\n  if (count != 0) {\n    func_ptr = (code **)(PTR___preinit_array_end_00081dc0 + -4);\n    index = 0;\n    do {\n      index = index + 1;\n      func_ptr = func_ptr + 1;\n      (**func_ptr)();\n    } while (count != index);\n  }\n  init_start_ptr = PTR___preinit_array_end_00081dc8;\n  init_end_ptr = PTR__fini_00081dc4;\n  _init();\n  count = (int)init_end_ptr - (int)init_start_ptr >> 2;\n  if (count != 0) {\n    func_ptr = (code **)(init_start_ptr + -4);\n    index = 0;\n    do {\n      index = index + 1;\n      func_ptr = func_ptr + 1;\n      (**func_ptr)();\n    } while (count != index);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "frame_dummy",
                "register_fini",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "execute_preinit_and_init_00081d7c"
        },
        "FUN_000810bc": {
            "renaming": {
                "FUN_000810bc": "execute_callbacks_000810bc",
                "uVar1": "leading_zero_index",
                "uVar2": "callback_bitmask"
            },
            "code": "\nvoid execute_callbacks_000810bc(void)\n\n{\n  uint leading_zero_index;\n  uint callback_bitmask;\n  \n  callback_bitmask = *(uint *)(DAT_000810ec + 0x4c);\n  while( true ) {\n    leading_zero_index = count_leading_zeroes(callback_bitmask);\n    if (0x1f < (leading_zero_index & 0xff)) break;\n    leading_zero_index = 0x1f - (leading_zero_index & 0xff) & 0xff;\n    if (*(code **)(PTR_callbacksPioB_000810f0 + leading_zero_index * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioB_000810f0 + leading_zero_index * 4))();\n    }\n    callback_bitmask = callback_bitmask & ~(1 << leading_zero_index);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000810bc",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_000810bc"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "concatenate_numbers_00081c5c",
                "param_1": "number_1",
                "param_2": "number_2"
            },
            "code": "\nundefined8 concatenate_numbers_00081c5c(undefined4 number_1,undefined4 number_2)\n\n{\n  __cmpsf2();\n  return CONCAT44(number_2,number_1);\n}\n\n",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmple",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "concatenate_numbers_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "execute_callback_on_zero_00081388",
                "iVar1": "countdown"
            },
            "code": "\nvoid executeCallbackOnZero_00081388(void)\n\n{\n  int countdown;\n  \n  if ((*(int *)PTR_ticks_000813a0 != -1) &&\n     (countdown = *(int *)PTR_ticks_000813a0 + -1, *(int *)PTR_ticks_000813a0 = countdown, countdown == 0)) {\n    (*DAT_000813a4)();\n  }\n  return;\n}\n\n",
            "called": [
                "banzai"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "execute_callback_on_zero_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "_malloc_r",
                "_free_r",
                "_realloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "string_copy_optimized_00082994",
                "__dest": "dest",
                "__src": "src",
                "cVar1": "char_temp",
                "uVar2": "ushort_temp",
                "puVar3": "src_uint_ptr1",
                "puVar4": "src_uint_ptr2",
                "uVar5": "uint_temp1",
                "uVar6": "uint_temp2",
                "puVar7": "dest_uint_ptr1",
                "puVar8": "dest_uint_ptr2",
                "pcVar9": "dest_char_ptr",
                "bVar10": "is_zero"
            },
            "code": "\nchar * string_copy_optimized_00082994(char *dest,char *src)\n\n{\n  char char_temp;\n  ushort ushort_temp;\n  uint *src_uint_ptr1;\n  uint *src_uint_ptr2;\n  uint uint_temp1;\n  uint uint_temp2;\n  uint *dest_uint_ptr1;\n  uint *dest_uint_ptr2;\n  char *dest_char_ptr;\n  bool is_zero;\n  \n  dest_char_ptr = dest;\n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      char_temp = *src;\n      *dest_char_ptr = char_temp;\n      src = src + 1;\n      dest_char_ptr = dest_char_ptr + 1;\n    } while (char_temp != '\\0');\n    return dest;\n  }\n  dest_uint_ptr2 = (uint *)dest;\n  if (((uint)src & 3) != 0) {\n    src_uint_ptr2 = (uint *)src;\n    if (((uint)src & 1) != 0) {\n      src_uint_ptr2 = (uint *)(src + 1);\n      char_temp = *src;\n      dest_uint_ptr2 = (uint *)(dest + 1);\n      *dest = char_temp;\n      if (char_temp == '\\0') {\n        return dest;\n      }\n    }\n    src = (char *)src_uint_ptr2;\n    if (((uint)src_uint_ptr2 & 2) != 0) {\n      src = (char *)((int)src_uint_ptr2 + 2);\n      ushort_temp = *(ushort *)src_uint_ptr2;\n      is_zero = (ushort_temp & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest_uint_ptr2 = (char)ushort_temp;\n      }\n      else {\n        *(ushort *)dest_uint_ptr2 = ushort_temp;\n        is_zero = (ushort_temp & 0xff00) == 0;\n        dest_uint_ptr2 = (uint *)((int)dest_uint_ptr2 + 2);\n      }\n      if (is_zero) {\n        return dest;\n      }\n    }\n  }\n  uint_temp1 = *(uint *)src;\n  src_uint_ptr2 = (uint *)((int)src + 4);\n  dest_uint_ptr1 = dest_uint_ptr2;\n  if (((uint)src & 4) != 0) {\n    if ((uint_temp1 + 0xfefefeff & ~uint_temp1 & 0x80808080) != 0) goto LAB_000829f8;\n    dest_uint_ptr1 = dest_uint_ptr2 + 1;\n    *dest_uint_ptr2 = uint_temp1;\n    src_uint_ptr2 = (uint *)((int)src + 8);\n    uint_temp1 = *(uint *)((int)src + 4);\n  }\n  while( true ) {\n    src_uint_ptr1 = src_uint_ptr2 + 1;\n    uint_temp2 = *src_uint_ptr2;\n    dest_uint_ptr2 = dest_uint_ptr1;\n    if ((uint_temp1 + 0xfefefeff & ~uint_temp1 & 0x80808080) != 0) break;\n    dest_uint_ptr2 = dest_uint_ptr1 + 1;\n    *dest_uint_ptr1 = uint_temp1;\n    uint_temp1 = uint_temp2;\n    if ((uint_temp2 + 0xfefefeff & ~uint_temp2 & 0x80808080) != 0) break;\n    src_uint_ptr2 = src_uint_ptr2 + 2;\n    uint_temp1 = *src_uint_ptr1;\n    dest_uint_ptr1 = dest_uint_ptr1 + 2;\n    *dest_uint_ptr2 = uint_temp2;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest_uint_ptr2 = (char)uint_temp1;\n    uint_temp2 = uint_temp1 & 0xff;\n    uint_temp1 = uint_temp1 >> 8 | uint_temp1 << 0x18;\n    dest_uint_ptr2 = (uint *)((int)dest_uint_ptr2 + 1);\n  } while (uint_temp2 != 0);\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "string_copy_optimized_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "initialize_serial_ports_00080c0c",
                "puVar1": "rxBufferPtr",
                "puVar2": "txBufferPtr",
                "this": "rxBuffer3Ptr",
                "this_00": "txBuffer4Ptr",
                "this_01": "rxBuffer2Ptr",
                "this_02": "txBuffer2Ptr"
            },
            "code": "\nvoid initializeSerialPorts_00080c0c(void)\n\n{\n  undefined *rxBufferPtr;\n  undefined *txBufferPtr;\n  undefined *rxBuffer3Ptr;\n  undefined *txBuffer4Ptr;\n  undefined *rxBuffer2Ptr;\n  undefined *txBuffer2Ptr;\n  \n  txBufferPtr = PTR_tx_buffer1_00080ca4;\n  rxBufferPtr = PTR_rx_buffer1_00080ca0;\n  RingBuffer::RingBuffer((RingBuffer *)PTR_rx_buffer1_00080ca0);\n  RingBuffer::RingBuffer((RingBuffer *)txBufferPtr);\n  rxBuffer2Ptr = PTR_rx_buffer2_00080cd8;\n  rxBuffer3Ptr = PTR_rx_buffer3_00080cac;\n  UARTClass::UARTClass\n            ((UARTClass *)PTR_Serial_00080cb0,DAT_00080ca8,UART_IRQn,8,(RingBuffer *)rxBufferPtr,\n             (RingBuffer *)txBufferPtr);\n  rxBufferPtr = PTR_rx_buffer4_00080cb4;\n  RingBuffer::RingBuffer((RingBuffer *)rxBuffer2Ptr);\n  txBuffer2Ptr = PTR_tx_buffer2_00080cdc;\n  RingBuffer::RingBuffer((RingBuffer *)rxBuffer3Ptr);\n  txBufferPtr = PTR_tx_buffer3_00080cb8;\n  RingBuffer::RingBuffer((RingBuffer *)rxBufferPtr);\n  txBuffer4Ptr = PTR_tx_buffer4_00080cbc;\n  RingBuffer::RingBuffer((RingBuffer *)txBuffer2Ptr);\n  RingBuffer::RingBuffer((RingBuffer *)txBufferPtr);\n  RingBuffer::RingBuffer((RingBuffer *)txBuffer4Ptr);\n  USARTClass::USARTClass\n            ((USARTClass *)PTR_Serial1_00080cc4,DAT_00080cc0,USART0_IRQn,0x11,(RingBuffer *)rxBuffer2Ptr,\n             (RingBuffer *)txBuffer2Ptr);\n  USARTClass::USARTClass\n            ((USARTClass *)PTR_Serial2_00080ccc,DAT_00080cc8,USART1_IRQn,0x12,(RingBuffer *)rxBuffer3Ptr,\n             (RingBuffer *)txBufferPtr);\n  USARTClass::USARTClass\n            ((USARTClass *)PTR_Serial3_00080cd4,DAT_00080cd0,USART3_IRQn,0x14,(RingBuffer *)rxBufferPtr,\n             (RingBuffer *)txBuffer4Ptr);\n  return;\n}\n\n",
            "called": [
                "UARTClass",
                "USARTClass",
                "RingBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "initialize_serial_ports_00080c0c"
        },
        "FUN_00084418": {
            "renaming": {
                "FUN_00084418": "send_signal_to_process_00084418",
                "param_1": "result",
                "param_2": "processID",
                "param_3": "signal",
                "puVar1": "errnoPtr"
            },
            "code": "\nvoid sendSignalToProcess_00084418(int *result,int processID,int signal)\n\n{\n  undefined *errnoPtr;\n  \n  errnoPtr = PTR_errno_0008443c;\n  *(undefined4 *)PTR_errno_0008443c = 0;\n  _kill(processID,signal);\n  if ((processID == -1) && (*(int *)errnoPtr != 0)) {\n    *result = *(int *)errnoPtr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_kill"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084418",
            "calling": [
                "kill"
            ],
            "imported": false,
            "current_name": "send_signal_to_process_00084418"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_register_values_00080d2e",
                "param_1": "registerBase",
                "param_2": "operationType",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "code": "\nvoid updateRegisterValues_00080d2e(int registerBase,undefined4 operationType,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(registerBase + 0x44) = value;\n  switch(operationType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(registerBase + 0x70) & *(uint *)(registerBase + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(registerBase + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(registerBase + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(registerBase + 4) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_register_values_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "floating_point_multiplication_00081944",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "unusedParam",
                "param_4": "exp1",
                "uVar3": "exp2",
                "uVar2": "tempResult",
                "iVar4": "expSum",
                "iVar5": "expDifference",
                "uVar6": "productLow",
                "iVar7": "adjustedExp",
                "uVar8": "result",
                "bVar9": "condition",
                "bVar10": "borrowFlag",
                "lVar1": "longProduct"
            },
            "code": "\nuint floatingPointMultiplication_00081944(uint operand1,uint operand2,undefined4 unusedParam,uint exp1)\n\n{\n  longlong longProduct;\n  uint tempResult;\n  uint exp2;\n  int expSum;\n  int expDifference;\n  uint productLow;\n  int adjustedExp;\n  uint result;\n  bool condition;\n  bool borrowFlag;\n  \n  exp2 = operand1 >> 0x17 & 0xff;\n  condition = exp2 == 0;\n  if (!condition) {\n    exp1 = operand2 >> 0x17 & 0xff;\n    condition = exp1 == 0;\n  }\n  if (!condition) {\n    condition = exp2 == 0xff;\n  }\n  if (!condition) {\n    condition = exp1 == 0xff;\n  }\n  if (condition) {\n    exp1 = operand2 >> 0x17 & 0xff;\n    if (exp2 == 0xff || exp1 == 0xff) {\n      condition = operand1 == 0 || operand1 == 0x80000000;\n      tempResult = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        condition = operand2 == 0;\n        tempResult = operand1;\n      }\n      if (!condition) {\n        condition = operand2 == 0x80000000;\n      }\n      result = tempResult;\n      if (((condition) || ((exp2 == 0xff && ((tempResult & 0x7fffff) != 0)))) ||\n         ((exp1 == 0xff && (result = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      tempResult = tempResult ^ operand2;\n      goto LAB_00081a94;\n    }\n    condition = (operand1 & 0x7fffffff) == 0;\n    if (!condition) {\n      condition = (operand2 & 0x7fffffff) == 0;\n    }\n    if (condition) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    condition = exp2 == 0;\n    tempResult = operand1 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        operand1 = operand1 << 1;\n        condition = (operand1 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exp2 = exp2 - 1;\n    }\n    operand1 = operand1 | tempResult;\n    condition = exp1 == 0;\n    tempResult = operand2 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        operand2 = operand2 << 1;\n        condition = (operand2 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exp1 = exp1 - 1;\n    }\n    operand2 = operand2 | tempResult;\n  }\n  expSum = exp2 + exp1;\n  result = operand1 ^ operand2;\n  exp2 = operand1 << 9;\n  condition = exp2 == 0;\n  if (!condition) {\n    operand2 = operand2 << 9;\n    condition = operand2 == 0;\n  }\n  if (condition) {\n    if (exp2 == 0) {\n      operand2 = operand2 << 9;\n    }\n    tempResult = result & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    borrowFlag = SBORROW4(expSum,0x7f);\n    expDifference = expSum + -0x7f;\n    condition = expDifference == 0;\n    adjustedExp = expDifference;\n    if (!condition && 0x7e < expSum) {\n      borrowFlag = SBORROW4(0xff,expDifference);\n      adjustedExp = 0xff - expDifference;\n      condition = expDifference == 0xff;\n    }\n    if (!condition && adjustedExp < 0 == borrowFlag) {\n      tempResult = tempResult | expDifference * 0x800000;\n    }\n    if (!condition && adjustedExp < 0 == borrowFlag) {\n      return tempResult;\n    }\n    tempResult = tempResult | 0x800000;\n    productLow = 0;\n    borrowFlag = SBORROW4(expDifference,1);\n    result = expSum - 0x80;\n    condition = result == 0;\n    exp2 = result;\n  }\n  else {\n    longProduct = (ulonglong)(exp2 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    productLow = (uint)longProduct;\n    tempResult = (uint)((ulonglong)longProduct >> 0x20);\n    condition = tempResult < 0x800000;\n    if (condition) {\n      tempResult = tempResult << 1;\n    }\n    if (condition) {\n      tempResult = tempResult | productLow >> 0x1f;\n      productLow = productLow << 1;\n    }\n    tempResult = result & 0x80000000 | tempResult;\n    result = (expSum + -0x7f) - (uint)condition;\n    borrowFlag = SBORROW4(result,0xfd);\n    condition = result == 0xfd;\n    exp2 = result - 0xfd;\n    if (result < 0xfe) {\n      tempResult = tempResult + result * 0x800000 + (uint)(0x7fffffff < productLow);\n      if (productLow == 0x80000000) {\n        tempResult = tempResult & 0xfffffffe;\n      }\n      return tempResult;\n    }\n  }\n  if (condition || (int)exp2 < 0 != borrowFlag) {\n    condition = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || condition != SCARRY4(result,0x19)) {\n      tempResult = tempResult & 0x80000000;\n    }\n    if (result != 0xffffffe7 && condition == SCARRY4(result,0x19)) {\n      exp2 = (tempResult << 1) >> (-result & 0xff);\n      result = tempResult << (result + 0x20 & 0xff);\n      exp2 = ((uint)((tempResult & 0x80000000) != 0) << 0x1f | exp2 >> 1) + (uint)((byte)exp2 & 1);\n      if ((productLow | result << 1) == 0) {\n        exp2 = exp2 & ~(result >> 0x1f);\n      }\n      return exp2;\n    }\n    return tempResult;\n  }\nLAB_00081a94:\n  return tempResult & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081944",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "floating_point_multiplication_00081944"
        },
        "FUN_20070000": {
            "renaming": {
                "FUN_20070000": "wait_for_data_transfer_20070000"
            },
            "code": "\nvoid wait_for_data_transfer_20070000(void)\n\n{\n  disableIRQinterrupts();\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *(undefined4 *)(DAT_2007001c + 4) = DAT_20070020;\n  do {\n  } while (-1 < *(int *)(DAT_2007001c + 8) << 0x1f);\n  *DAT_20070028 = DAT_20070024;\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x20070000",
            "calling": [
                "tickReset",
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "wait_for_data_transfer_20070000"
        },
        "FUN_000811f0": {
            "renaming": {
                "FUN_000811f0": "print_exit_status_000811f0",
                "status": "exitStatus"
            },
            "code": "\nvoid printExitStatus_000811f0(int exitStatus)\n\n{\n  iprintf(PTR_s_Exiting_with_exitStatus__d__000811fc,exitStatus);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "iprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811f0",
            "calling": [],
            "imported": false,
            "current_name": "print_exit_status_000811f0"
        },
        "FUN_00081704": {
            "renaming": {
                "FUN_00081704": "increment_tick_count_00081704"
            },
            "code": "\nvoid incrementTickCount_00081704(void)\n\n{\n  *(int *)PTR__dwTickCount_00081710 = *(int *)PTR__dwTickCount_00081710 + 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081704",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_tick_count_00081704"
        },
        "FUN_00083c10": {
            "renaming": {
                "FUN_00083c10": "execute_destructors_00083c10",
                "iVar1": "destructor_count",
                "ppcVar2": "destructor_ptr"
            },
            "code": "\nvoid execute_destructors_00083c10(void)\n\n{\n  int destructor_count;\n  code **destructor_ptr;\n  \n  destructor_count = (int)PTR___fini_array_end_00083c3c -\n          (int)PTR___do_global_dtors_aux_fini_array_entry_00083c38 >> 2;\n  if (destructor_count != 0) {\n    destructor_ptr = (code **)(PTR___do_global_dtors_aux_fini_array_entry_00083c38 + destructor_count * 4);\n    do {\n      destructor_count = destructor_count + -1;\n      destructor_ptr = destructor_ptr + -1;\n      (**destructor_ptr)();\n    } while (destructor_count != 0);\n  }\n  _fini();\n  return;\n}\n\n",
            "called": [
                "__do_global_dtors_aux",
                "_fini"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c10",
            "calling": [],
            "imported": false,
            "current_name": "execute_destructors_00083c10"
        },
        "FUN_00081bec": {
            "renaming": {
                "FUN_00081bec": "compare_and_combine_00081bec",
                "param_1": "input_a",
                "param_2": "input_b",
                "uVar2": "double_input_a",
                "uVar3": "double_input_b",
                "uVar4": "combined_value",
                "bVar1": "comparison_result",
                "bVar5": "is_zero"
            },
            "code": "\nuint compare_and_combine_00081bec(uint input_a,uint input_b)\n\n{\n  bool comparison_result;\n  uint double_input_a;\n  uint double_input_b;\n  uint combined_value;\n  bool is_zero;\n  \n  double_input_a = input_a * 2;\n  double_input_b = input_b * 2;\n  if (((int)double_input_a >> 0x18 == -1 || (int)double_input_b >> 0x18 == -1) &&\n     ((((int)double_input_a >> 0x18 == -1 && ((input_a & 0x7fffff) != 0)) ||\n      (((int)double_input_b >> 0x18 == -1 && ((input_b & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_value = double_input_a | input_b & 0x7fffffff;\n  is_zero = combined_value == 0;\n  if (!is_zero) {\n    combined_value = input_a ^ input_b;\n    is_zero = combined_value == 0;\n  }\n  comparison_result = -1 < (int)combined_value;\n  if (comparison_result) {\n    input_a = double_input_a + input_b * -2;\n    is_zero = input_a == 0;\n  }\n  if ((comparison_result && double_input_b <= double_input_a) && !is_zero) {\n    input_a = (int)input_b >> 0x1f;\n  }\n  if (!comparison_result || double_input_b > double_input_a) {\n    input_a = ~((int)input_b >> 0x1f);\n  }\n  if (!is_zero) {\n    input_a = input_a | 1;\n  }\n  return input_a;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bec",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_combine_00081bec"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "write_character_000844c4",
                "param_1": "file_handle",
                "param_2": "character",
                "param_3": "stream_buffer",
                "param_4": "mode",
                "uVar1": "short_var",
                "uVar2": "uint_var",
                "puVar3": "buffer_ptr",
                "iVar4": "temp_var"
            },
            "code": "\nuint write_character_000844c4(int file_handle,uint character,undefined4 *stream_buffer,undefined4 mode)\n\n{\n  ushort short_var;\n  uint uint_var;\n  undefined *buffer_ptr;\n  int temp_var;\n  \n  if ((file_handle != 0) && (*(int *)(file_handle + 0x38) == 0)) {\n    __sinit();\n  }\n  short_var = *(ushort *)(stream_buffer + 3);\n  uint_var = (uint)short_var;\n  stream_buffer[2] = stream_buffer[6];\n  if ((-1 < (int)(uint_var << 0x1c)) || (temp_var = stream_buffer[4], temp_var == 0)) {\n    temp_var = __swsetup_r(file_handle,stream_buffer,short_var,uint_var,mode);\n    if (temp_var != 0) {\n      return 0xffffffff;\n    }\n    short_var = *(ushort *)(stream_buffer + 3);\n    temp_var = stream_buffer[4];\n    uint_var = (uint)short_var;\n  }\n  character = character & 0xff;\n  if ((int)(uint_var << 0x12) < 0) {\n    buffer_ptr = (undefined *)*stream_buffer;\n    temp_var = (int)buffer_ptr - temp_var;\n    if (temp_var < (int)stream_buffer[5]) {\nLAB_000844f6:\n      temp_var = temp_var + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    stream_buffer[0x19] = stream_buffer[0x19] & 0xffffdfff;\n    buffer_ptr = (undefined *)*stream_buffer;\n    *(ushort *)(stream_buffer + 3) = short_var | 0x2000;\n    temp_var = (int)buffer_ptr - temp_var;\n    if (temp_var < (int)stream_buffer[5]) goto LAB_000844f6;\n  }\n  temp_var = _fflush_r(file_handle,stream_buffer);\n  if (temp_var != 0) {\n    return 0xffffffff;\n  }\n  buffer_ptr = (undefined *)*stream_buffer;\n  temp_var = 1;\nLAB_000844f8:\n  stream_buffer[2] = stream_buffer[2] + -1;\n  *stream_buffer = buffer_ptr + 1;\n  *buffer_ptr = (char)character;\n  if (((stream_buffer[5] == temp_var) ||\n      (((int)((uint)*(ushort *)(stream_buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (temp_var = _fflush_r(file_handle,stream_buffer), temp_var != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "called": [
                "_fflush_r",
                "__sinit",
                "__swsetup_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "write_character_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_modified_value_0008189c",
                "param_1": "input_value",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "iVar4": "intermediate_value",
                "uVar5": "temp_value"
            },
            "code": "\nuint calculate_modified_value_0008189c(uint input_value)\n\n{\n  int leading_zeroes;\n  uint shift_amount;\n  uint result;\n  int intermediate_value;\n  uint temp_value;\n  \n  result = input_value & 0x80000000;\n  if ((int)result < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes - 8;\n  intermediate_value = ((result | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes) {\n    temp_value = 0 << (shift_amount & 0xff);\n    result = intermediate_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < temp_value);\n    if (temp_value == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shift_amount = input_value << (leading_zeroes + 0x18U & 0xff);\n  result = intermediate_value + ((input_value >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    result = result & ~(shift_amount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_modified_value_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "optimized_memcpy_0008234c",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "dest_ptr1",
                "puVar2": "dest_ptr2",
                "puVar3": "dest_ptr3",
                "puVar4": "dest_ptr4",
                "puVar5": "src_ptr2",
                "puVar6": "src_ptr1",
                "uVar7": "remaining_bytes1",
                "uVar8": "remaining_bytes2",
                "bVar9": "condition"
            },
            "code": "\nvoid * optimized_memcpy_0008234c(void *dest,void *src,size_t n)\n\n{\n  undefined *dest_ptr1;\n  undefined4 *dest_ptr2;\n  undefined4 *dest_ptr3;\n  undefined *dest_ptr4;\n  undefined4 *src_ptr2;\n  undefined *src_ptr1;\n  uint remaining_bytes1;\n  uint remaining_bytes2;\n  bool condition;\n  \n  dest_ptr3 = (undefined4 *)dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (n < 8) {\n      remaining_bytes2 = n - 4;\n      dest_ptr1 = (undefined *)dest;\n      if (3 < n) {\n        do {\n          src_ptr1 = (undefined *)src;\n          dest_ptr4 = dest_ptr1;\n          condition = remaining_bytes2 != 0;\n          remaining_bytes2 = remaining_bytes2 - 1;\n          *dest_ptr4 = *src_ptr1;\n          dest_ptr1 = dest_ptr4 + 1;\n          src = src_ptr1 + 1;\n        } while (condition);\n        dest_ptr4[1] = src_ptr1[1];\n        dest_ptr4[2] = src_ptr1[2];\n        dest_ptr4[3] = src_ptr1[3];\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      remaining_bytes2 = 4 - ((uint)dest & 3);\n      n = n - remaining_bytes2;\n      dest_ptr2 = (undefined4 *)dest;\n      src_ptr2 = (undefined4 *)src;\n                    /* WARNING: Load size is inaccurate */\n      if (((uint)dest & 1) != 0) {\n        src_ptr2 = (undefined4 *)((int)src + 1);\n        dest_ptr2 = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *src;\n      }\n      dest_ptr3 = dest_ptr2;\n      src = src_ptr2;\n      if ((remaining_bytes2 & 2) != 0) {\n        src = (void *)((int)src_ptr2 + 2);\n        dest_ptr3 = (undefined4 *)((int)dest_ptr2 + 2);\n        *(undefined2 *)dest_ptr2 = *(undefined2 *)src_ptr2;\n      }\n    }\n  }\n  while (0x3f < n) {\n                    /* WARNING: Load size is inaccurate */\n    *dest_ptr3 = *src;\n    dest_ptr3[1] = *(undefined4 *)((int)src + 4);\n    dest_ptr3[2] = *(undefined4 *)((int)src + 8);\n    dest_ptr3[3] = *(undefined4 *)((int)src + 0xc);\n    dest_ptr3[4] = *(undefined4 *)((int)src + 0x10);\n    dest_ptr3[5] = *(undefined4 *)((int)src + 0x14);\n    dest_ptr3[6] = *(undefined4 *)((int)src + 0x18);\n    dest_ptr3[7] = *(undefined4 *)((int)src + 0x1c);\n    dest_ptr3[8] = *(undefined4 *)((int)src + 0x20);\n    dest_ptr3[9] = *(undefined4 *)((int)src + 0x24);\n    dest_ptr3[10] = *(undefined4 *)((int)src + 0x28);\n    dest_ptr3[0xb] = *(undefined4 *)((int)src + 0x2c);\n    dest_ptr3[0xc] = *(undefined4 *)((int)src + 0x30);\n    dest_ptr3[0xd] = *(undefined4 *)((int)src + 0x34);\n    dest_ptr3[0xe] = *(undefined4 *)((int)src + 0x38);\n    dest_ptr3[0xf] = *(undefined4 *)((int)src + 0x3c);\n    dest_ptr3 = dest_ptr3 + 0x10;\n    src = (undefined4 *)((int)src + 0x40);\n    n = n - 0x40;\n  }\n  remaining_bytes1 = n - 0x10;\n  if (0xffffffcf < n - 0x40) {\n    do {\n                    /* WARNING: Load size is inaccurate */\n      *dest_ptr3 = *src;\n      dest_ptr3[1] = *(undefined4 *)((int)src + 4);\n      dest_ptr3[2] = *(undefined4 *)((int)src + 8);\n      dest_ptr3[3] = *(undefined4 *)((int)src + 0xc);\n      dest_ptr3 = dest_ptr3 + 4;\n      src = (void *)((int)src + 0x10);\n      condition = 0xf < remaining_bytes1;\n      remaining_bytes1 = remaining_bytes1 - 0x10;\n    } while (condition);\n  }\n  remaining_bytes2 = remaining_bytes1 + 0xc;\n  src_ptr2 = dest_ptr3;\n  dest_ptr2 = (undefined4 *)src;\n  if (0xfffffff3 < remaining_bytes1) {\n    do {\n      src = dest_ptr2 + 1;\n      *src_ptr2 = *dest_ptr2;\n      condition = 3 < remaining_bytes2;\n      remaining_bytes2 = remaining_bytes2 - 4;\n      dest_ptr3 = src_ptr2 + 1;\n      src_ptr2 = src_ptr2 + 1;\n      dest_ptr2 = (undefined4 *)src;\n    } while (condition);\n  }\nLAB_000823d0:\n  if (remaining_bytes2 + 4 != 0) {\n    dest_ptr2 = dest_ptr3;\n    src_ptr2 = (undefined4 *)src;\n                    /* WARNING: Load size is inaccurate */\n    if ((remaining_bytes2 & 1) != 0) {\n      src_ptr2 = (undefined4 *)((int)src + 1);\n      dest_ptr2 = (undefined4 *)((int)dest_ptr3 + 1);\n      *(undefined *)dest_ptr3 = *src;\n    }\n    if ((remaining_bytes2 + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr2 = *(undefined2 *)src_ptr2;\n    }\n  }\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "optimized_memcpy_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_system_00080a68",
                "puVar1": "tempPointer"
            },
            "code": "\nvoid initializeSystem_00080a68(void)\n\n{\n  undefined *tempPointer;\n  \n  tempPointer = PTR_RxString_00080a94;\n  String::String((String *)PTR_RxString_00080a94,PTR_s__00080a98);\n  __aeabi_atexit(tempPointer,DAT_00080aa0,PTR___dso_handle_00080a9c);\n  tempPointer = PTR_master_00080aa4;\n  PTR_master_00080aa4[4] = 0;\n  tempPointer[5] = 0;\n  tempPointer[6] = 6;\n  *(undefined2 *)(tempPointer + 0x56) = 1000;\n  return;\n}\n\n",
            "called": [
                "String",
                "__aeabi_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "initialize_string_0008165c",
                "this": "string_instance",
                "cstr": "input_cstr",
                "length": "input_length",
                "uVar1": "reserve_result"
            },
            "code": "\nString * __string_instancecall String::initialize_string_0008165c(String *string_instance,char *input_cstr,uint input_length)\n\n{\n  uchar reserve_result;\n  \n  reserve_result = reserve(string_instance,input_length);\n  if (reserve_result == '\\0') {\n    invalidate(string_instance);\n  }\n  else {\n    string_instance->len = input_length;\n    strcpy(string_instance->buffer,input_cstr);\n  }\n  return string_instance;\n}\n\n",
            "called": [
                "invalidate",
                "strcpy",
                "reserve"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "String"
            ],
            "imported": false,
            "current_name": "initialize_string_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "FUNC_000815f8"
            },
            "code": "\nuint16_t FUNC_000815f8(uint8_t h,uint8_t l)\n\n{\n  return CONCAT11(h,l);\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000815f8",
            "calling": [
                "get_FC3"
            ],
            "imported": false,
            "current_name": "FUNC_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_byte_in_memory_00084384",
                "__s": "memory_ptr",
                "__c": "search_byte",
                "__n": "memory_length",
                "puVar1": "end_ptr",
                "puVar2": "current_ptr",
                "uVar3": "search_byte_32",
                "uVar4": "xor_result",
                "pbVar5": "byte_counter",
                "pbVar6": "last_byte_ptr",
                "uVar7": "search_byte_repeated",
                "bVar8": "is_last_byte"
            },
            "code": "\nvoid * find_byte_in_memory_00084384(void *memory_ptr,int search_byte,size_t memory_length)\n\n{\n  uint *end_ptr;\n  uint *current_ptr;\n  uint search_byte_32;\n  uint xor_result;\n  byte *byte_counter;\n  byte *last_byte_ptr;\n  uint search_byte_repeated;\n  bool is_last_byte;\n  \n  search_byte_32 = search_byte & 0xff;\n  if (((uint)memory_ptr & 3) == 0) {\nLAB_000843b4:\n    current_ptr = (uint *)memory_ptr;\n    end_ptr = (uint *)memory_length;\n    if ((uint *)0x3 < memory_length) {\n      search_byte_repeated = search_byte_32 | search_byte_32 << 8;\n      do {\n                    /* WARNING: Load size is inaccurate */\n        xor_result = *memory_ptr ^ (search_byte_repeated | search_byte_repeated << 0x10);\n        current_ptr = (uint *)memory_ptr;\n        end_ptr = (uint *)memory_length;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        memory_length = memory_length + -4;\n        current_ptr = (uint *)((int)memory_ptr + 4);\n        memory_ptr = (uint *)((int)memory_ptr + 4);\n        end_ptr = (uint *)memory_length;\n      } while ((uint *)0x3 < memory_length);\n    }\n    memory_ptr = end_ptr;\n    last_byte_ptr = (byte *)((int)memory_ptr + -1);\n    if (((uint *)memory_ptr != (uint *)0x0) && (memory_ptr = current_ptr, *(byte *)current_ptr != search_byte_32)) {\n      byte_counter = (byte *)0x0;\n      do {\n        memory_ptr = (void *)((int)memory_ptr + 1);\n        is_last_byte = byte_counter == last_byte_ptr;\n        byte_counter = byte_counter + 1;\n        if (is_last_byte) goto LAB_000843dc;\n                    /* WARNING: Load size is inaccurate */\n      } while (*memory_ptr != search_byte_32);\n    }\n  }\n  else if (memory_length == 0) {\nLAB_000843dc:\n    memory_ptr = (uint *)0x0;\n  }\n  else {\n                    /* WARNING: Load size is inaccurate */\n    if (*memory_ptr != search_byte_32) {\n      current_ptr = (uint *)((int)memory_ptr + 1);\n      memory_length = (size_t)(memory_length - 1);\n      do {\n        memory_ptr = current_ptr;\n        if (((uint)memory_ptr & 3) == 0) goto LAB_000843b4;\n        if ((uint *)memory_length == (uint *)0x0) goto LAB_000843dc;\n                    /* WARNING: Load size is inaccurate */\n        current_ptr = (uint *)((int)memory_ptr + 1);\n        memory_length = (size_t)(memory_length + -1);\n      } while (*memory_ptr != search_byte_32);\n    }\n  }\n  return memory_ptr;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "find_byte_in_memory_00084384"
        },
        "FUN_00082ab0": {
            "renaming": {
                "FUN_00082ab0": "send_signal_to_process_00082ab0",
                "__pid": "process_id",
                "__sig": "signal",
                "iVar1": "result"
            },
            "code": "\nint send_signal_to_process_00082ab0(process_id_t process_id,int signal)\n\n{\n  int result;\n  \n  result = _send_signal_to_process_00082ab0_r(*(undefined4 *)PTR__impure_ptr_00082abc,process_id,signal);\n  return result;\n}\n\n",
            "called": [
                "_kill_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ab0",
            "calling": [],
            "imported": false,
            "current_name": "send_signal_to_process_00082ab0"
        },
        "FUN_00081c6c": {
            "renaming": {
                "FUN_00081c6c": "compare_floats_00081c6c",
                "in_ZR": "comparison_result"
            },
            "code": "\nbool compare_floats_00081c6c(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cfcmpeq();\n  return comparison_result != '\\0';\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c6c",
            "calling": [],
            "imported": false,
            "current_name": "compare_floats_00081c6c"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_bitwise_value_00081034",
                "param_1": "baseAddress",
                "param_2": "bitwiseValue1",
                "param_3": "bitwiseValue2"
            },
            "code": "\nvoid updateBitwiseValue_00081034(int baseAddress,uint bitwiseValue1,uint bitwiseValue2)\n\n{\n  *(uint *)(baseAddress + 4) = bitwiseValue1 | *(uint *)(baseAddress + 4) | (bitwiseValue2 & 1) << 7;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "update_bitwise_value_00081034"
        },
        "FUN_000844bc": {
            "renaming": {
                "FUN_000844bc": "close_file_descriptor_000844bc",
                "param_1": "file_descriptor_resource",
                "param_2": "file_info"
            },
            "code": "\nvoid close_file_descriptor_000844bc(undefined4 file_descriptor_resource,int file_info)\n\n{\n  _close_r(file_descriptor_resource,(int)*(short *)(file_info + 0xe));\n  return;\n}\n\n",
            "called": [
                "_close_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844bc",
            "calling": [],
            "imported": false,
            "current_name": "close_file_descriptor_000844bc"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "execute_at_exit_if_needed_00083974"
            },
            "code": "\nvoid executeAtExitIfNeeded_00083974(void)\n\n{\n  if (DAT_00083980 != 0) {\n    atexit(DAT_00083984);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "execute_at_exit_if_needed_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "seek_and_set_error_00084700",
                "param_1": "error",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence",
                "puVar1": "errno_ptr",
                "iVar2": "seek_result"
            },
            "code": "\nvoid seek_and_set_error_00084700(int *error,int file_descriptor,int offset,int whence)\n\n{\n  undefined *errno_ptr;\n  int seek_result;\n  \n  errno_ptr = PTR_errno_00084724;\n  *(undefined4 *)PTR_errno_00084724 = 0;\n  seek_result = _lseek(file_descriptor,offset,whence);\n  if ((seek_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "imported": false,
            "current_name": "seek_and_set_error_00084700"
        },
        "FUN_00085874": {
            "renaming": {
                "FUN_00085874": "do_nothing_00085874"
            },
            "code": "\nvoid do_nothing_00085874(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085874",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085874"
        },
        "FUN_00080e5c": {
            "renaming": {
                "FUN_00080e5c": "check_and_update_bit_00080e5c",
                "param_1": "inputValue",
                "uVar1": "bitMask",
                "uVar2": "bitResult"
            },
            "code": "\nundefined4 checkAndUpdateBit_00080e5c(uint inputValue)\n\n{\n  uint bitMask;\n  uint bitResult;\n  \n  if (inputValue < 0x2d) {\n    if (inputValue < 0x20) {\n      bitMask = 1 << (inputValue & 0xff);\n      bitResult = *(uint *)(DAT_00080e98 + 0x18) & bitMask;\n      if (bitResult == bitMask) {\n        *(uint *)(DAT_00080e98 + 0x14) = bitResult;\n      }\n    }\n    else {\n      bitMask = 1 << (inputValue - 0x20 & 0xff);\n      bitResult = *(uint *)(DAT_00080e98 + 0x108) & bitMask;\n      if (bitResult == bitMask) {\n        *(uint *)(DAT_00080e98 + 0x104) = bitResult;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e5c",
            "calling": [
                "end",
                "pinMode"
            ],
            "imported": false,
            "current_name": "check_and_update_bit_00080e5c"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_carry_or_zero_flag_00081ca8",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkCarryOrZeroFlag_00081ca8(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "check_carry_or_zero_flag_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "update_pin_status_00081318",
                "ulPin": "pin",
                "ulVal": "value",
                "puVar1": "pinDescriptionPtr",
                "puVar2": "pinStatusPtr",
                "iVar3": "outputDataStatus",
                "uVar4": "pinGroup",
                "uVar5": "pinMask",
                "uVar6": "tempValue"
            },
            "code": "\nvoid updatePinStatus_00081318(uint32_t pin,uint32_t value)\n\n{\n  undefined *pinDescriptionPtr;\n  undefined *pinStatusPtr;\n  int outputDataStatus;\n  undefined4 pinGroup;\n  undefined4 pinMask;\n  uint32_t tempValue;\n  \n  pinStatusPtr = PTR_g_pinStatus_00081384;\n  pinDescriptionPtr = PTR_g_APinDescription_00081380;\n  if (PTR_g_APinDescription_00081380[pin * 0x1c + 0xc] != '\\0') {\n    tempValue = value;\n    if ((PTR_g_pinStatus_00081384[pin] & 0xf) == 5) {\n      pinMode(pin,1);\n    }\n    pinStatusPtr[pin] = pinStatusPtr[pin] & 0xf | (byte)(value << 4);\n    pinMask = *(undefined4 *)(pinDescriptionPtr + pin * 0x1c);\n    pinGroup = *(undefined4 *)(pinDescriptionPtr + pin * 0x1c + 4);\n    outputDataStatus = PIO_GetOutputDataStatus(pinMask,pinGroup);\n    if (outputDataStatus == 0) {\n      PIO_PullUp(pinMask,pinGroup,value);\n      return;\n    }\n    PIO_SetOutput(pinMask,pinGroup,value,0,1,tempValue);\n  }\n  return;\n}\n\n",
            "called": [
                "PIO_SetOutput",
                "PIO_PullUp",
                "pinMode",
                "PIO_GetOutputDataStatus"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "setup",
                "init",
                "sendTxBuffer",
                "begin",
                "getRxBuffer"
            ],
            "imported": false,
            "current_name": "update_pin_status_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_tick_count_value_00081714",
                "undefined4": "uint32_t"
            },
            "code": "\nuint32_t GetTickCountValue_00081714(void)\n\n{\n  return *(uint32_t *)PTR__dwTickCount_0008171c;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "millis"
            ],
            "imported": false,
            "current_name": "get_tick_count_value_00081714"
        },
        "FUN_00081c80": {
            "renaming": {
                "FUN_00081c80": "compare_floats_00081c80",
                "in_CY": "comparison_flag"
            },
            "code": "\nbool compare_floats_00081c80(void)\n\n{\n  char comparison_flag;\n  \n  __aeabi_cfcmpeq();\n  return comparison_flag == '\\0';\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c80",
            "calling": [],
            "imported": false,
            "current_name": "compare_floats_00081c80"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "update_file_position_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "iVar1": "seekResult",
                "uVar2": "updatedFlags"
            },
            "code": "\nvoid updateFilePosition_0008449c(undefined4 fileDescriptor,int fileInfo)\n\n{\n  int seekResult;\n  ushort updatedFlags;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe));\n  if (seekResult == -1) {\n    updatedFlags = *(ushort *)(fileInfo + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlags = *(ushort *)(fileInfo + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(fileInfo + 0x50) = seekResult;\n  }\n  *(ushort *)(fileInfo + 0xc) = updatedFlags;\n  return;\n}\n\n",
            "called": [
                "_lseek_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "update_file_position_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "_malloc_r",
                "_free_r",
                "_realloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "FUNC_0008477c"
            },
            "code": "\nvoid FUNC_0008477c\n               (uint param_1,int param_2,undefined4 param_3,undefined4 param_4,int *param_5)\n\n{\n  uint uVar1;\n  longlong lVar2;\n  \n  lVar2 = __divdi3();\n  lVar2 = lVar2 * CONCAT44(param_4,param_3);\n  uVar1 = (uint)lVar2;\n  *param_5 = param_1 - uVar1;\n  param_5[1] = (param_2 - (int)((ulonglong)lVar2 >> 0x20)) - (uint)(param_1 < uVar1);\n  return;\n}\n\n",
            "called": [
                "__divdi3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_modbus_data_000801b0",
                "bVar1": "bufferOverflow",
                "uVar2": "receivedByte",
                "uVar3": "returnValue",
                "iVar4": "readStatus",
                "bVar5": "bufferSize"
            },
            "code": "\nint8_t __thiscall Modbus::processModbusData_000801b0(Modbus *this)\n\n{\n  bool bufferOverflow;\n  uchar receivedByte;\n  uint8_t returnValue;\n  int readStatus;\n  byte bufferSize;\n  \n  if (1 < this->u8txenpin) {\n    digitalWrite((uint)this->u8txenpin,0);\n  }\n  bufferOverflow = false;\n  this->u8BufferSize = '\\0';\n  if (this->u8serno < 4) {\n    while (readStatus = (**(code **)(*(int *)this->port + 8))(), readStatus != 0) {\n      bufferSize = this->u8BufferSize;\n      receivedByte = (**(code **)(*(int *)this->port + 0xc))();\n      returnValue = this->u8BufferSize;\n      this->au8Buffer[bufferSize] = receivedByte;\n      bufferSize = returnValue + 1;\n      this->u8BufferSize = bufferSize;\n      if (0x3f < bufferSize) {\n        bufferOverflow = true;\n      }\n    }\n  }\n  this->u16InCnt = this->u16InCnt + 1;\n  if (bufferOverflow) {\n    returnValue = 0xfd;\n    this->u16errCnt = this->u16errCnt + 1;\n  }\n  else {\n    returnValue = this->u8BufferSize;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "process_modbus_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "add_to_ring_buffer_000813c2",
                "RingBuffer": "ringBuffer",
                "uVar1": "nextHeadIndex"
            },
            "code": "\nvoid __thiscall ringBuffer::addToRingBuffer_000813c2(ringBuffer *this,uint8_t c)\n\n{\n  uint nextHeadIndex;\n  \n  nextHeadIndex = this->_iHead + 1U & 0x7f;\n  if (nextHeadIndex != this->_iTail) {\n    this->_aucBuffer[this->_iHead] = c;\n    this->_iHead = nextHeadIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [
                "IrqHandler"
            ],
            "imported": false,
            "current_name": "add_to_ring_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "FUNC_000814e4"
            },
            "code": "\nFUNC_000814e4 * __thiscall\nFUNC_000814e4::FUNC_000814e4\n          (FUNC_000814e4 *this,Uart *pUart,IRQn_Type dwIrq,uint32_t dwId,RingBuffer *pRx_buffer,\n          RingBuffer *pTx_buffer)\n\n{\n  undefined *puVar1;\n  \n  *(undefined4 *)&this->field_0x4 = 0;\n  *(undefined4 *)&this->field_0x8 = 1000;\n  puVar1 = PTR_PTR_write_1_00081504;\n  this->_pUart = pUart;\n  *(undefined **)this = puVar1;\n  this->_dwIrq = dwIrq;\n  this->_rx_buffer = pRx_buffer;\n  this->_dwId = dwId;\n  this->_tx_buffer = pTx_buffer;\n  return this;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000814e4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription",
                "USARTClass"
            ],
            "imported": false,
            "current_name": "FUNC_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_array_elements_00080d54",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flag",
                "bVar1": "condition1"
            },
            "code": "\nvoid updateArrayElements_00080d54(undefined4 *array,undefined4 value,uint flag)\n\n{\n  bool condition1;\n  \n  condition1 = (int)(flag << 0x1f) < 0;\n  array[0x11] = value;\n  if (condition1) {\n    array[0x19] = value;\n  }\n  if (!condition1) {\n    array[0x18] = value;\n  }\n  condition1 = (flag & 10) != 0;\n  if (condition1) {\n    array[8] = value;\n  }\n  if (!condition1) {\n    array[9] = value;\n  }\n  if (((int)(flag << 0x1e) < 0) || ((int)(flag << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_array_elements_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_crc16_0008021c",
                "u8length": "length",
                "this": "modbusObj",
                "pMVar1": "currentObj",
                "uVar2": "crc",
                "cVar3": "bitCounter",
                "uVar4": "lsb"
            },
            "code": "\nuint16_t __modbusObjcall Modbus::calculateCRC16_0008021c(Modbus *modbusObj,uint8_t length)\n\n{\n  Modbus *currentObj;\n  uint crc;\n  char bitCounter;\n  uint lsb;\n  \n  crc = 0xffff;\n  for (currentObj = modbusObj; ((int)currentObj - (int)modbusObj & 0xffU) < (uint)length;\n      currentObj = (Modbus *)((int)&currentObj->port + 1)) {\n    crc = crc ^ currentObj->au8Buffer[0];\n    bitCounter = '\\b';\n    do {\n      lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bitCounter = bitCounter + -1;\n    } while (bitCounter != '\\0');\n  }\n  return (ushort)(crc << 8) | (ushort)(crc >> 8);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "sendTxBuffer"
            ],
            "imported": false,
            "current_name": "calculate_crc16_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********__s;\n  bool bVar29;\n  longlong lVar30;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    __sinit();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = __swsetup_r(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)__sbprintf(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar29 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        __s = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar29 << 6, bVar29 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar29 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      __s = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar29 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar29);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar29 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar29) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      __s = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (__s != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)strlen((char *)__s);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)memchr(__s,0,(size_t)local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)__s);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)__s)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      __s = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar29 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar30 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      __s = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      __s = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          __s = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar30 >> 0x20);\n          cVar13 = '\\n';\n          __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          *(char *)__s = cVar13 + '0';\n          lVar30 = __aeabi_uldivmod((int)lVar30,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)__s + -1);\n        } while (lVar30 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)__s);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      __s = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      __s = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)__s = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)__s + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    __sprint_r_part_0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    __s = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)__s = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)__s + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)__s);\n    }\n    else {\n      *(undefined *)((int)__s + -1) = 0x30;\n      __s = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)__s);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_blanks_6717_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_blanks_6717_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_zeroes_6718_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)__s;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0\n       )) goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])__s;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_blanks_6717_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_blanks_6717_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = __sprint_r_part_0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "__sprint_r.part.0",
                "__sinit",
                "__sbprintf",
                "strlen",
                "__swsetup_r",
                "__aeabi_uldivmod",
                "memchr"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "__sbprintf",
                "iprintf"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00083b08": {
            "renaming": {
                "FUN_00083b08": "process_file_walk_00083b08",
                "param_1": "fileDescriptor"
            },
            "code": "\nvoid processFileWalk_00083b08(undefined4 fileDescriptor)\n\n{\n  _fwalk(fileDescriptor,DAT_00083b10);\n  return;\n}\n\n",
            "called": [
                "_fwalk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b08",
            "calling": [],
            "imported": false,
            "current_name": "process_file_walk_00083b08"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "process_pointer_00081e04",
                "__ptr": "inputPointer"
            },
            "code": "\nvoid processPointer_00081e04(void *inputPointer)\n\n{\n  _processPointer_00081e04_r(*(undefined4 *)PTR__impure_ptr_00081e10,inputPointer);\n  return;\n}\n\n",
            "called": [
                "_free_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "invalidate",
                "~String"
            ],
            "imported": false,
            "current_name": "process_pointer_00081e04"
        },
        "FUN_000814a8": {
            "renaming": {
                "FUN_000814a8": "reset_uart_000814a8",
                "UARTClass": "uart",
                "_rx_buffer": "rxBuffer",
                "_iHead": "head",
                "_iTail": "tail",
                "_dwIrq": "irqNumber",
                "_dwId": "uartId"
            },
            "code": "\nvoid __thiscall uart::resetUART_000814a8(uart *this)\n\n{\n  this->rxBuffer->head = this->rxBuffer->tail;\n  (**(code **)(*(int *)this + 0x14))();\n  *(int *)(DAT_000814e0 + (((uint)(int)this->irqNumber >> 5) + 0x20) * 4) =\n       1 << (uint)(byte)(this->irqNumber & 0x1f);\n  pmc_disable_periph_clk(this->uartId);\n  return;\n}\n\n",
            "called": [
                "pmc_disable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814a8",
            "calling": [],
            "imported": false,
            "current_name": "reset_uart_000814a8"
        },
        "FUN_00081084": {
            "renaming": {
                "FUN_00081084": "process_callbacks_00081084",
                "uVar1": "leading_zeroes_count",
                "uVar2": "callback_mask"
            },
            "code": "\nvoid process_callbacks_00081084(void)\n\n{\n  uint leading_zeroes_count;\n  uint callback_mask;\n  \n  callback_mask = *(uint *)(DAT_000810b4 + 0x4c);\n  while( true ) {\n    leading_zeroes_count = count_leading_zeroes(callback_mask);\n    if (0x1f < (leading_zeroes_count & 0xff)) break;\n    leading_zeroes_count = 0x1f - (leading_zeroes_count & 0xff) & 0xff;\n    if (*(code **)(PTR_callbacksPioA_000810b8 + leading_zeroes_count * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioA_000810b8 + leading_zeroes_count * 4))();\n    }\n    callback_mask = callback_mask & ~(1 << leading_zeroes_count);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081084",
            "calling": [],
            "imported": false,
            "current_name": "process_callbacks_00081084"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "integer_division_00084750",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder_ptr",
                "param_4": "quotient_ptr"
            },
            "code": "\nvoid integer_division_00084750(int dividend,int divisor,int remainder_ptr,int quotient_ptr)\n\n{\n  if ((quotient_ptr == 0) && (remainder_ptr == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    __aeabi_idiv0(dividend);\n    return;\n  }\n  __gnu_uldivmod_helper();\n  return;\n}\n\n",
            "called": [
                "__gnu_uldivmod_helper",
                "__aeabi_idiv0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "integer_division_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "ctx": "context",
                "puVar1": "systemCoreClockPtr",
                "puVar2": "timerDataPtr",
                "iVar3": "pioConfig1",
                "iVar4": "pioConfig2",
                "iVar5": "pioConfig3",
                "iVar6": "pioConfig4",
                "ulPin": "pinIndex",
                "uVar7": "nextPinIndex"
            },
            "code": "\nint initializeSystem_00080ae4(EVP_PKEY_CTX *context)\n\n{\n  undefined *systemCoreClockPtr;\n  undefined4 *timerDataPtr;\n  int pioConfig1;\n  int pioConfig2;\n  int pioConfig3;\n  int pioConfig4;\n  uint32_t pinIndex;\n  uint32_t nextPinIndex;\n  \n  systemCoreClockPtr = PTR_SystemCoreClock_00080be8;\n  SystemInit();\n  timerDataPtr = DAT_00080bec;\n  DAT_00080bec[1] = *(uint *)systemCoreClockPtr / 1000 - 1;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  timerDataPtr[2] = 0;\n  *timerDataPtr = 7;\n  __libc_initializeSystem_00080ae4_array();\n  pinIndex = 0;\n  do {\n    nextPinIndex = pinIndex + 1;\n    digitalWrite(pinIndex,0);\n    pioConfig3 = DAT_00080c00;\n    pioConfig2 = DAT_00080bfc;\n    pioConfig1 = DAT_00080bf8;\n    pioConfig4 = DAT_00080bf4;\n    pinIndex = nextPinIndex;\n  } while (nextPinIndex != 0x4f);\n  *(undefined4 *)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(pioConfig1 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(pioConfig3 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(pioConfig2 + 0xa0) = 0xffffffff;\n  PIO_Configure(pioConfig4,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(pioConfig4,1,0xc00,0);\n  PIO_Configure(pioConfig4,1,0x3000,0);\n  PIO_Configure(pioConfig2,2,0x30,0);\n  PIO_Configure(pioConfig1,1,0xc00,0);\n  PIO_Configure(pioConfig4,1,3,0);\n  PIO_Configure(pioConfig1,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_initializeSystem_00080ae4(DAT_00080c08,*(undefined4 *)systemCoreClockPtr,DAT_00080c04,0xc);\n  adc_configure_timing(DAT_00080c08,0,0x300000,1);\n  adc_configure_trigger(DAT_00080c08,0,0);\n  adc_disable_interrupt(DAT_00080c08,0xffffffff);\n  pioConfig4 = adc_disable_all_channel(DAT_00080c08);\n  analogOutputInit();\n  return pioConfig4;\n}\n\n",
            "called": [
                "adc_disable_all_channel",
                "analogOutputInit",
                "adc_configure_timing",
                "digitalWrite",
                "__libc_init_array",
                "PIO_Configure",
                "pmc_enable_periph_clk",
                "adc_init",
                "adc_configure_trigger",
                "SystemInit",
                "adc_disable_interrupt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "register_cleanup_function_00081d5c",
                "param_1": "cleanupFunction",
                "param_2": "userData"
            },
            "code": "\nvoid registerCleanupFunction_00081d5c(undefined4 cleanupFunction,undefined4 userData)\n\n{\n  __cxa_atexit(userData,cleanupFunction);\n  return;\n}\n\n",
            "called": [
                "__cxa_atexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "imported": false,
            "current_name": "register_cleanup_function_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "error_code_ptr",
                "param_2": "memory_size",
                "puVar1": "error_code_temp",
                "pcVar2": "allocated_memory"
            },
            "code": "\nvoid allocate_memory_00082970(int *error_code_ptr,int memory_size)\n\n{\n  undefined *error_code_temp;\n  caddr_t allocated_memory;\n  \n  error_code_temp = PTR_errno_00082990;\n  *(undefined4 *)PTR_errno_00082990 = 0;\n  allocated_memory = _sbrk(memory_size);\n  if ((allocated_memory == (caddr_t)0xffffffff) && (*(int *)error_code_temp != 0)) {\n    *error_code_ptr = *(int *)error_code_temp;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "_malloc_r",
                "_malloc_trim_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be",
                "file_UNUSED": "unusedFile"
            },
            "code": "\nint returnOne_000811be(int unusedFile)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "_isatty_r"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "calculate_divmod_00084a80",
                "param_1": "dividend_high",
                "param_2": "dividend_low",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "uVar6": "temp_var5",
                "uVar7": "temp_var6",
                "uVar8": "temp_var7",
                "uVar9": "temp_var8",
                "uVar10": "temp_var9",
                "lVar1": "long_temp",
                "bVar11": "carry_flag"
            },
            "code": "\nundefined8 calculate_divmod_00084a80(uint dividend_high,uint dividend_low,uint divisor_high,uint divisor_low)\n\n{\n  longlong long_temp;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint temp_var9;\n  bool carry_flag;\n  \n  if (divisor_low == 0) {\n    if (divisor_high <= dividend_low) {\n      if (divisor_high == 0) {\n        divisor_high = 1 / 0;\n      }\n      temp_var8 = count_leading_zeroes(divisor_high);\n      if (temp_var8 == 0) {\n        dividend_low = dividend_low - divisor_high;\n        temp_var1 = divisor_high >> 0x10;\n        temp_var3 = divisor_high & 0xffff;\n        temp_var6 = 1;\n      }\n      else {\n        divisor_high = divisor_high << (temp_var8 & 0xff);\n        temp_var2 = dividend_low >> (0x20 - temp_var8 & 0xff);\n        temp_var1 = divisor_high >> 0x10;\n        temp_var7 = temp_var2 / temp_var1;\n        temp_var3 = divisor_high & 0xffff;\n        temp_var6 = temp_var3 * temp_var7;\n        temp_var4 = dividend_high >> (0x20 - temp_var8 & 0xff) | dividend_low << (temp_var8 & 0xff);\n        temp_var2 = temp_var4 >> 0x10 | (temp_var2 - temp_var1 * temp_var7) * 0x10000;\n        dividend_high = dividend_high << (temp_var8 & 0xff);\n        temp_var8 = temp_var7;\n        if (temp_var2 <= temp_var6 && temp_var6 - temp_var2 != 0) {\n          carry_flag = CARRY4(temp_var2,divisor_high);\n          temp_var2 = temp_var2 + divisor_high;\n          temp_var8 = temp_var7 - 1;\n          if ((carry_flag == false) && (temp_var2 <= temp_var6 && temp_var6 - temp_var2 != 0)) {\n            temp_var8 = temp_var7 - 2;\n            temp_var2 = temp_var2 + divisor_high;\n          }\n        }\n        temp_var5 = (temp_var2 - temp_var6) / temp_var1;\n        temp_var7 = temp_var3 * temp_var5;\n        dividend_low = temp_var4 & 0xffff | ((temp_var2 - temp_var6) - temp_var1 * temp_var5) * 0x10000;\n        temp_var6 = temp_var5;\n        if (dividend_low <= temp_var7 && temp_var7 - dividend_low != 0) {\n          carry_flag = CARRY4(dividend_low,divisor_high);\n          dividend_low = dividend_low + divisor_high;\n          temp_var6 = temp_var5 - 1;\n          if ((carry_flag == false) && (dividend_low <= temp_var7 && temp_var7 - dividend_low != 0)) {\n            temp_var6 = temp_var5 - 2;\n            dividend_low = dividend_low + divisor_high;\n          }\n        }\n        dividend_low = dividend_low - temp_var7;\n        temp_var6 = temp_var6 | temp_var8 << 0x10;\n      }\n      temp_var7 = dividend_low / temp_var1;\n      temp_var2 = temp_var3 * temp_var7;\n      temp_var4 = dividend_high >> 0x10 | (dividend_low - temp_var1 * temp_var7) * 0x10000;\n      temp_var8 = temp_var7;\n      if (temp_var4 <= temp_var2 && temp_var2 - temp_var4 != 0) {\n        carry_flag = CARRY4(temp_var4,divisor_high);\n        temp_var4 = temp_var4 + divisor_high;\n        temp_var8 = temp_var7 - 1;\n        if ((carry_flag == false) && (temp_var4 <= temp_var2 && temp_var2 - temp_var4 != 0)) {\n          temp_var8 = temp_var7 - 2;\n          temp_var4 = temp_var4 + divisor_high;\n        }\n      }\n      temp_var7 = (temp_var4 - temp_var2) / temp_var1;\n      temp_var3 = temp_var3 * temp_var7;\n      temp_var4 = dividend_high & 0xffff | ((temp_var4 - temp_var2) - temp_var1 * temp_var7) * 0x10000;\n      temp_var1 = temp_var7;\n      if (temp_var4 <= temp_var3 && temp_var3 - temp_var4 != 0) {\n        temp_var1 = temp_var7 - 1;\n        if ((CARRY4(temp_var4,divisor_high) == false) &&\n           (temp_var4 + divisor_high <= temp_var3 && temp_var3 - (temp_var4 + divisor_high) != 0)) {\n          temp_var1 = temp_var7 - 2;\n        }\n      }\n      return CONCAT44(temp_var6,temp_var1 | temp_var8 << 0x10);\n    }\n    temp_var8 = count_leading_zeroes(divisor_high);\n    if (temp_var8 != 0) {\n      temp_var6 = dividend_high >> (0x20 - temp_var8 & 0xff);\n      divisor_high = divisor_high << (temp_var8 & 0xff);\n      dividend_high = dividend_high << (temp_var8 & 0xff);\n      dividend_low = temp_var6 | dividend_low << (temp_var8 & 0xff);\n    }\n    temp_var6 = divisor_high >> 0x10;\n    temp_var1 = dividend_low / temp_var6;\n    temp_var3 = (divisor_high & 0xffff) * temp_var1;\n    temp_var7 = dividend_high >> 0x10 | (dividend_low - temp_var6 * temp_var1) * 0x10000;\n    temp_var8 = temp_var1;\n    if (temp_var7 <= temp_var3 && temp_var3 - temp_var7 != 0) {\n      carry_flag = CARRY4(temp_var7,divisor_high);\n      temp_var7 = temp_var7 + divisor_high;\n      temp_var8 = temp_var1 - 1;\n      if ((carry_flag == false) && (temp_var7 <= temp_var3 && temp_var3 - temp_var7 != 0)) {\n        temp_var8 = temp_var1 - 2;\n        temp_var7 = temp_var7 + divisor_high;\n      }\n    }\n    temp_var4 = (temp_var7 - temp_var3) / temp_var6;\n    temp_var1 = (divisor_high & 0xffff) * temp_var4;\n    temp_var3 = dividend_high & 0xffff | ((temp_var7 - temp_var3) - temp_var6 * temp_var4) * 0x10000;\n    temp_var6 = temp_var4;\n    if (temp_var3 <= temp_var1 && temp_var1 - temp_var3 != 0) {\n      temp_var6 = temp_var4 - 1;\n      if ((CARRY4(temp_var3,divisor_high) == false) &&\n         (temp_var3 + divisor_high <= temp_var1 && temp_var1 - (temp_var3 + divisor_high) != 0)) {\n        temp_var6 = temp_var4 - 2;\n      }\n    }\n    temp_var8 = temp_var6 | temp_var8 << 0x10;\n    temp_var6 = 0;\n  }\n  else {\n    if (dividend_low < divisor_low) {\n      return 0;\n    }\n    temp_var8 = count_leading_zeroes(divisor_low);\n    if (temp_var8 == 0) {\n      if ((divisor_low < dividend_low) || (temp_var6 = temp_var8, divisor_high <= dividend_high)) {\n        return 1;\n      }\n    }\n    else {\n      temp_var1 = 0x20 - temp_var8;\n      temp_var6 = dividend_low >> (temp_var1 & 0xff);\n      temp_var3 = divisor_low << (temp_var8 & 0xff) | divisor_high >> (temp_var1 & 0xff);\n      temp_var7 = temp_var3 >> 0x10;\n      temp_var5 = temp_var6 / temp_var7;\n      temp_var4 = (temp_var3 & 0xffff) * temp_var5;\n      temp_var2 = dividend_high >> (temp_var1 & 0xff) | dividend_low << (temp_var8 & 0xff);\n      temp_var1 = temp_var2 >> 0x10 | (temp_var6 - temp_var7 * temp_var5) * 0x10000;\n      temp_var6 = temp_var5;\n      if (temp_var1 <= temp_var4 && temp_var4 - temp_var1 != 0) {\n        carry_flag = CARRY4(temp_var1,temp_var3);\n        temp_var1 = temp_var1 + temp_var3;\n        temp_var6 = temp_var5 - 1;\n        if ((carry_flag == false) && (temp_var1 <= temp_var4 && temp_var4 - temp_var1 != 0)) {\n          temp_var6 = temp_var5 - 2;\n          temp_var1 = temp_var1 + temp_var3;\n        }\n      }\n      temp_var5 = (temp_var1 - temp_var4) / temp_var7;\n      temp_var9 = (temp_var3 & 0xffff) * temp_var5;\n      temp_var7 = temp_var2 & 0xffff | ((temp_var1 - temp_var4) - temp_var7 * temp_var5) * 0x10000;\n      temp_var1 = temp_var5;\n      if (temp_var7 <= temp_var9 && temp_var9 - temp_var7 != 0) {\n        carry_flag = CARRY4(temp_var7,temp_var3);\n        temp_var7 = temp_var7 + temp_var3;\n        temp_var1 = temp_var5 - 1;\n        if ((carry_flag == false) && (temp_var7 <= temp_var9 && temp_var9 - temp_var7 != 0)) {\n          temp_var1 = temp_var5 - 2;\n          temp_var7 = temp_var7 + temp_var3;\n        }\n      }\n      temp_var1 = temp_var1 | temp_var6 << 0x10;\n      long_temp = (ulonglong)temp_var1 * (ulonglong)(divisor_high << (temp_var8 & 0xff));\n      temp_var6 = (uint)((ulonglong)long_temp >> 0x20);\n      if ((temp_var7 - temp_var9 < temp_var6) ||\n         ((temp_var7 - temp_var9 == temp_var6 && (dividend_high << (temp_var8 & 0xff) < (uint)long_temp)))) {\n        temp_var8 = temp_var1 - 1;\n        temp_var6 = 0;\n      }\n      else {\n        temp_var8 = temp_var1;\n        temp_var6 = 0;\n      }\n    }\n  }\n  return CONCAT44(temp_var6,temp_var8);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084a80",
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "imported": false,
            "current_name": "calculate_divmod_00084a80"
        },
        "FUN_0008014c": {
            "renaming": {
                "FUN_0008014c": "process_ticks_0008014c",
                "uVar1": "result"
            },
            "code": "\nint process_ticks_0008014c(int ticks)\n\n{\n  uint32_t result;\n  \n  if (*(int *)PTR_noHyperCall_00080160 == 0) {\n    result = aflCall(1,ticks,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008014c",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "process_ticks_0008014c"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "float_a",
                "param_2": "float_b"
            },
            "code": "\nvoid compare_floats_00081c54(undefined4 float_a,undefined4 float_b)\n\n{\n  __aeabi_cfcmpeq(float_b,float_a);\n  return;\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "imported": false,
            "current_name": "compare_floats_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "update_string_buffer_0008163a",
                "this": "strObj",
                "size": "newSize",
                "uVar1": "bufferChanged"
            },
            "code": "\nuchar __strObjcall String::UpdateStringBuffer_0008163a(String *strObj,uint newSize)\n\n{\n  uchar bufferChanged;\n  \n  if ((strObj->buffer == (char *)0x0) || (strObj->capacity < newSize)) {\n    bufferChanged = changeBuffer(strObj,newSize);\n    if (bufferChanged == '\\0') {\n      return '\\0';\n    }\n    if (strObj->len == 0) {\n      *strObj->buffer = '\\0';\n    }\n  }\n  return '\\x01';\n}\n\n",
            "called": [
                "changeBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "update_string_buffer_0008163a"
        },
        "FUN_00081aac": {
            "renaming": {
                "FUN_00081aac": "floating_point_division_00081aac",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "unusedParam",
                "param_4": "numeratorExponent",
                "uVar1": "denominatorMantissa",
                "uVar2": "numeratorExponent",
                "iVar3": "exponentDifference",
                "uVar4": "numeratorMantissa",
                "iVar5": "tempExponent",
                "uVar6": "result",
                "bVar7": "condition",
                "bVar8": "isEqual",
                "bVar9": "isCarry"
            },
            "code": "\nuint floatingPointDivision_00081aac(uint numerator,uint denominator,undefined4 unusedParam,uint numeratorExponent)\n\n{\n  uint denominatorMantissa;\n  uint numeratorExponent;\n  int exponentDifference;\n  uint numeratorMantissa;\n  int tempExponent;\n  uint result;\n  bool condition;\n  bool isEqual;\n  bool isCarry;\n  \n  numeratorExponent = numerator >> 0x17 & 0xff;\n  condition = numeratorExponent == 0;\n  if (!condition) {\n    numeratorExponent = denominator >> 0x17 & 0xff;\n    condition = numeratorExponent == 0;\n  }\n  if (!condition) {\n    condition = numeratorExponent == 0xff;\n  }\n  if (!condition) {\n    condition = numeratorExponent == 0xff;\n  }\n  if (condition) {\n    numeratorExponent = denominator >> 0x17 & 0xff;\n    result = numerator;\n    if (numeratorExponent == 0xff) {\n      if (((numerator & 0x7fffff) != 0) || (result = denominator, numeratorExponent == 0xff)) {\nLAB_00081aa2:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (numeratorExponent == 0xff) {\n        result = denominator;\n        if ((denominator & 0x7fffff) == 0) {\nLAB_00081a58:\n          return (numerator ^ denominator) & 0x80000000;\n        }\n        goto LAB_00081aa2;\n      }\n      condition = (numerator & 0x7fffffff) == 0;\n      if (!condition) {\n        condition = (denominator & 0x7fffffff) == 0;\n      }\n      if (!condition) {\n        condition = numeratorExponent == 0;\n        result = numerator & 0x80000000;\n        while( true ) {\n          if (condition) {\n            numerator = numerator << 1;\n            condition = (numerator & 0x800000) == 0;\n          }\n          if (!condition) break;\n          numeratorExponent = numeratorExponent - 1;\n        }\n        numerator = numerator | result;\n        condition = numeratorExponent == 0;\n        result = denominator & 0x80000000;\n        while( true ) {\n          if (condition) {\n            denominator = denominator << 1;\n            condition = (denominator & 0x800000) == 0;\n          }\n          if (!condition) break;\n          numeratorExponent = numeratorExponent - 1;\n        }\n        denominator = denominator | result;\n        goto LAB_00081ac4;\n      }\n      if ((numerator & 0x7fffffff) == 0) {\n        if ((denominator & 0x7fffffff) != 0) goto LAB_00081a58;\n        goto LAB_00081aa2;\n      }\n    }\n    numerator = numerator ^ denominator;\n  }\n  else {\nLAB_00081ac4:\n    exponentDifference = numeratorExponent - numeratorExponent;\n    if (denominator << 9 == 0) {\n      numerator = (numerator ^ denominator) & 0x80000000 | numerator & 0x7fffff;\n      isCarry = SCARRY4(exponentDifference,0x7f);\n      tempExponent = exponentDifference + 0x7f;\n      condition = tempExponent < 0;\n      isEqual = tempExponent == 0;\n      if (!isEqual && condition == isCarry) {\n        isCarry = SBORROW4(0xff,tempExponent);\n        condition = 0xff - tempExponent < 0;\n        isEqual = tempExponent == 0xff;\n      }\n      if (!isEqual && condition == isCarry) {\n        numerator = numerator | tempExponent * 0x800000;\n      }\n      if (!isEqual && condition == isCarry) {\n        return numerator;\n      }\n      numerator = numerator | 0x800000;\n      numeratorExponent = 0;\n      isEqual = SBORROW4(tempExponent,1);\n      numeratorMantissa = exponentDifference + 0x7e;\n      condition = numeratorMantissa == 0;\n      result = numeratorMantissa;\n    }\n    else {\n      denominatorMantissa = (denominator << 9) >> 4 | 0x10000000;\n      numeratorExponent = (numerator << 9) >> 4 | 0x10000000;\n      numerator = (numerator ^ denominator) & 0x80000000;\n      condition = denominatorMantissa <= numeratorExponent;\n      if (!condition) {\n        numeratorExponent = numeratorExponent << 1;\n      }\n      numeratorMantissa = exponentDifference + 0x7d + (uint)condition;\n      result = 0x800000;\n      do {\n        if (denominatorMantissa <= numeratorExponent) {\n          numeratorExponent = numeratorExponent - denominatorMantissa;\n          numerator = numerator | result;\n        }\n        condition = denominatorMantissa >> 1 <= numeratorExponent;\n        if (condition) {\n          numeratorExponent = numeratorExponent - (denominatorMantissa >> 1);\n        }\n        if (condition) {\n          numerator = numerator | result >> 1;\n        }\n        condition = denominatorMantissa >> 2 <= numeratorExponent;\n        if (condition) {\n          numeratorExponent = numeratorExponent - (denominatorMantissa >> 2);\n        }\n        if (condition) {\n          numerator = numerator | result >> 2;\n        }\n        condition = denominatorMantissa >> 3 <= numeratorExponent;\n        if (condition) {\n          numeratorExponent = numeratorExponent - (denominatorMantissa >> 3);\n        }\n        if (condition) {\n          numerator = numerator | result >> 3;\n        }\n        numeratorExponent = numeratorExponent * 0x10;\n        condition = numeratorExponent == 0;\n        if (!condition) {\n          result = result >> 4;\n          condition = result == 0;\n        }\n      } while (!condition);\n      isEqual = SBORROW4(numeratorMantissa,0xfd);\n      condition = numeratorMantissa == 0xfd;\n      result = numeratorMantissa - 0xfd;\n      if (numeratorMantissa < 0xfe) {\n        numerator = numerator + numeratorMantissa * 0x800000 + (uint)(denominatorMantissa <= numeratorExponent);\n        if (numeratorExponent - denominatorMantissa == 0) {\n          numerator = numerator & 0xfffffffe;\n        }\n        return numerator;\n      }\n    }\n    if (condition || (int)result < 0 != isEqual) {\n      condition = (int)(numeratorMantissa + 0x19) < 0;\n      if (numeratorMantissa == 0xffffffe7 || condition != SCARRY4(numeratorMantissa,0x19)) {\n        numerator = numerator & 0x80000000;\n      }\n      if (numeratorMantissa == 0xffffffe7 || condition != SCARRY4(numeratorMantissa,0x19)) {\n        return numerator;\n      }\n      result = (numerator << 1) >> (-numeratorMantissa & 0xff);\n      numeratorMantissa = numerator << (numeratorMantissa + 0x20 & 0xff);\n      result = ((uint)((numerator & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((numeratorExponent | numeratorMantissa << 1) == 0) {\n        result = result & ~(numeratorMantissa >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return numerator & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081aac",
            "calling": [],
            "imported": false,
            "current_name": "floating_point_division_00081aac"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "allocate_memory_000825a0",
                "__ptr": "memory_ptr",
                "__size": "memory_size",
                "pvVar1": "allocated_memory"
            },
            "code": "\nvoid * allocate_memory_000825a0(void *memory_ptr,size_t memory_size)\n\n{\n  void *allocated_memory;\n  \n  allocated_memory = (void *)_allocate_memory_000825a0_r(*(undefined4 *)PTR__impure_ptr_000825ac,memory_ptr,memory_size);\n  return allocated_memory;\n}\n\n",
            "called": [
                "_realloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "changeBuffer"
            ],
            "imported": false,
            "current_name": "allocate_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "FUNC_000815d4"
            },
            "code": "\nFUNC_000815d4 * __thiscall\nFUNC_000815d4::FUNC_000815d4\n          (FUNC_000815d4 *this,Usart *pUsart,IRQn_Type dwIrq,uint32_t dwId,RingBuffer *pRx_buffer,\n          RingBuffer *pTx_buffer)\n\n{\n  UARTClass::UARTClass(&this->super_UARTClass,(Uart *)pUsart,dwIrq,dwId,pRx_buffer,pTx_buffer);\n  *(undefined **)&this->super_UARTClass = PTR_PTR_write_1_000815f4;\n  this->_pUsart = pUsart;\n  return this;\n}\n\n",
            "called": [
                "UARTClass"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000815d4",
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "imported": false,
            "current_name": "FUNC_000815d4"
        },
        "FUN_00080d24": {
            "renaming": {
                "FUN_00080d24": "update_value_at_offset_00080d24",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_offset_100"
            },
            "code": "\nvoid update_value_at_offset_00080d24(int base_address,undefined4 value,int is_offset_100)\n\n{\n  if (is_offset_100 != 0) {\n    *(undefined4 *)(base_address + 100) = value;\n    return;\n  }\n  *(undefined4 *)(base_address + 0x60) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d24",
            "calling": [
                "digitalWrite"
            ],
            "imported": false,
            "current_name": "update_value_at_offset_00080d24"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "allocator",
                "param_2": "requested_size",
                "puVar1": "allocator_ptr",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "puVar5": "temp_ptr5",
                "iVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "temp_var8",
                "uVar9": "temp_var9",
                "puVar10": "temp_ptr10",
                "puVar11": "temp_ptr11",
                "puVar12": "temp_ptr12",
                "puVar13": "temp_ptr13",
                "puVar14": "temp_ptr14",
                "uVar15": "adjusted_size",
                "puVar16": "temp_ptr16",
                "puVar17": "temp_ptr17"
            },
            "code": "\nint * allocate_memory_00081e14(undefined4 *allocator,uint requested_size)\n\n{\n  undefined *allocator_ptr;\n  int temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  undefined *temp_ptr5;\n  int temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint temp_var9;\n  undefined4 *temp_ptr10;\n  undefined *temp_ptr11;\n  undefined *temp_ptr12;\n  undefined *temp_ptr13;\n  undefined4 *temp_ptr14;\n  uint adjusted_size;\n  undefined4 *temp_ptr16;\n  undefined *temp_ptr17;\n  \n  if (requested_size + 0xb < 0x17) {\n    adjusted_size = 0x10;\n    if (0x10 < requested_size) goto LAB_00081e7a;\n  }\n  else {\n    adjusted_size = requested_size + 0xb & 0xfffffff8;\n    if (((int)adjusted_size < 0) || (adjusted_size < requested_size)) {\nLAB_00081e7a:\n      *allocator = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(allocator);\n  allocator_ptr = PTR___malloc_av__00082140;\n  if (adjusted_size < 0x1f8) {\n    temp_ptr13 = *(undefined **)(PTR___malloc_av__00082140 + adjusted_size + 0xc);\n    if ((temp_ptr13 != PTR___malloc_av__00082140 + adjusted_size) ||\n       (temp_ptr12 = temp_ptr13 + 8, temp_ptr13 = *(undefined **)(temp_ptr13 + 0x14), temp_ptr12 != temp_ptr13)) {\n      temp_var9 = *(uint *)(temp_ptr13 + 4);\n      temp_var6 = *(int *)(temp_ptr13 + 0xc);\n      adjusted_size = *(uint *)(temp_ptr13 + (temp_var9 & 0xfffffffc) + 4);\n      temp_var2 = *(int *)(temp_ptr13 + 8);\n      *(int *)(temp_var2 + 0xc) = temp_var6;\n      *(int *)(temp_var6 + 8) = temp_var2;\n      *(uint *)(temp_ptr13 + (temp_var9 & 0xfffffffc) + 4) = adjusted_size | 1;\n      __malloc_unlock(allocator);\n      return (int *)(temp_ptr13 + 8);\n    }\n    temp_var9 = (adjusted_size >> 3) + 2;\n  }\n  else {\n    temp_var9 = adjusted_size >> 9;\n    if (temp_var9 == 0) {\n      temp_var6 = 0x7e;\n      temp_var2 = 0x3f;\n    }\n    else if (temp_var9 < 5) {\n      temp_var2 = (adjusted_size >> 6) + 0x38;\n      temp_var6 = temp_var2 * 2;\n    }\n    else if (temp_var9 < 0x15) {\n      temp_var2 = temp_var9 + 0x5b;\n      temp_var6 = temp_var2 * 2;\n    }\n    else if (temp_var9 < 0x55) {\n      temp_var2 = (adjusted_size >> 0xc) + 0x6e;\n      temp_var6 = temp_var2 * 2;\n    }\n    else if (temp_var9 < 0x155) {\n      temp_var2 = (adjusted_size >> 0xf) + 0x77;\n      temp_var6 = temp_var2 * 2;\n    }\n    else if (temp_var9 < 0x555) {\n      temp_var2 = (adjusted_size >> 0x12) + 0x7c;\n      temp_var6 = temp_var2 * 2;\n    }\n    else {\n      temp_var6 = 0xfc;\n      temp_var2 = 0x7e;\n    }\n    for (temp_ptr13 = *(undefined **)(PTR___malloc_av__00082140 + temp_var6 * 4 + 0xc);\n        PTR___malloc_av__00082140 + temp_var6 * 4 != temp_ptr13; temp_ptr13 = *(undefined **)(temp_ptr13 + 0xc))\n    {\n      temp_var9 = *(uint *)(temp_ptr13 + 4) & 0xfffffffc;\n      if (0xf < (int)(temp_var9 - adjusted_size)) {\n        temp_var2 = temp_var2 + -1;\n        break;\n      }\n      if (-1 < (int)(temp_var9 - adjusted_size)) {\n        adjusted_size = *(uint *)(temp_ptr13 + temp_var9 + 4);\n        temp_var6 = *(int *)(temp_ptr13 + 0xc);\n        temp_var2 = *(int *)(temp_ptr13 + 8);\n        *(int *)(temp_var2 + 0xc) = temp_var6;\n        *(int *)(temp_var6 + 8) = temp_var2;\n        *(uint *)(temp_ptr13 + temp_var9 + 4) = adjusted_size | 1;\n        __malloc_unlock(allocator);\n        return (int *)(temp_ptr13 + 8);\n      }\n    }\n    temp_var9 = temp_var2 + 1;\n  }\n  temp_ptr13 = *(undefined **)(PTR___malloc_av__00082140 + 0x10);\n  temp_ptr12 = PTR___malloc_av__00082140 + 8;\n  if (temp_ptr13 == temp_ptr12) {\n    temp_var3 = *(uint *)(PTR___malloc_av__00082140 + 4);\n  }\n  else {\n    temp_var3 = *(uint *)(temp_ptr13 + 4);\n    temp_var4 = temp_var3 & 0xfffffffc;\n    temp_var7 = temp_var4 - adjusted_size;\n    if (0xf < (int)temp_var7) {\n      temp_ptr5 = temp_ptr13 + adjusted_size;\n      *(uint *)(temp_ptr13 + 4) = adjusted_size | 1;\n      *(undefined **)(allocator_ptr + 0x14) = temp_ptr5;\n      *(undefined **)(allocator_ptr + 0x10) = temp_ptr5;\n      *(undefined **)(temp_ptr5 + 0xc) = temp_ptr12;\n      *(undefined **)(temp_ptr5 + 8) = temp_ptr12;\n      *(uint *)(temp_ptr5 + 4) = temp_var7 | 1;\n      *(uint *)(temp_ptr5 + temp_var7) = temp_var7;\n      __malloc_unlock(allocator);\n      return (int *)(temp_ptr13 + 8);\n    }\n    *(undefined **)(PTR___malloc_av__00082140 + 0x14) = temp_ptr12;\n    *(undefined **)(allocator_ptr + 0x10) = temp_ptr12;\n    if (-1 < (int)temp_var7) {\n      *(uint *)(temp_ptr13 + temp_var4 + 4) = *(uint *)(temp_ptr13 + temp_var4 + 4) | 1;\n      __malloc_unlock(allocator);\n      return (int *)(temp_ptr13 + 8);\n    }\n    if (temp_var4 < 0x200) {\n      temp_ptr5 = allocator_ptr + (temp_var3 & 0xfffffff8);\n      temp_var2 = *(int *)(temp_ptr5 + 8);\n      temp_var3 = 1 << ((int)(temp_var3 >> 3) >> 2 & 0xffU) | *(uint *)(allocator_ptr + 4);\n      *(int *)(temp_ptr13 + 8) = temp_var2;\n      *(undefined **)(temp_ptr13 + 0xc) = temp_ptr5;\n      *(uint *)(allocator_ptr + 4) = temp_var3;\n      *(undefined **)(temp_ptr5 + 8) = temp_ptr13;\n      *(undefined **)(temp_var2 + 0xc) = temp_ptr13;\n    }\n    else {\n      temp_var7 = temp_var3 >> 9;\n      if (temp_var7 < 5) {\n        temp_var6 = (temp_var3 >> 6) + 0x38;\n        temp_var2 = temp_var6 * 2;\n      }\n      else if (temp_var7 < 0x15) {\n        temp_var6 = temp_var7 + 0x5b;\n        temp_var2 = temp_var6 * 2;\n      }\n      else if (temp_var7 < 0x55) {\n        temp_var6 = (temp_var3 >> 0xc) + 0x6e;\n        temp_var2 = temp_var6 * 2;\n      }\n      else if (temp_var7 < 0x155) {\n        temp_var6 = (temp_var3 >> 0xf) + 0x77;\n        temp_var2 = temp_var6 * 2;\n      }\n      else if (temp_var7 < 0x555) {\n        temp_var6 = (temp_var3 >> 0x12) + 0x7c;\n        temp_var2 = temp_var6 * 2;\n      }\n      else {\n        temp_var2 = 0xfc;\n        temp_var6 = 0x7e;\n      }\n      temp_ptr5 = allocator_ptr + temp_var2 * 4;\n      temp_ptr17 = *(undefined **)(temp_ptr5 + 8);\n      if (temp_ptr17 == temp_ptr5) {\n        temp_var3 = *(uint *)(PTR___malloc_av__00082348 + 4) | 1 << (temp_var6 >> 2 & 0xffU);\n        *(uint *)(PTR___malloc_av__00082348 + 4) = temp_var3;\n        temp_ptr11 = temp_ptr17;\n      }\n      else {\n        do {\n          temp_ptr11 = temp_ptr17;\n          if ((*(uint *)(temp_ptr17 + 4) & 0xfffffffc) <= temp_var4) break;\n          temp_ptr17 = *(undefined **)(temp_ptr17 + 8);\n          temp_ptr11 = temp_ptr17;\n        } while (temp_ptr5 != temp_ptr17);\n        temp_ptr17 = *(undefined **)(temp_ptr11 + 0xc);\n        temp_var3 = *(uint *)(allocator_ptr + 4);\n      }\n      *(undefined **)(temp_ptr13 + 0xc) = temp_ptr17;\n      *(undefined **)(temp_ptr13 + 8) = temp_ptr11;\n      *(undefined **)(temp_ptr17 + 8) = temp_ptr13;\n      *(undefined **)(temp_ptr11 + 0xc) = temp_ptr13;\n    }\n  }\n  temp_var4 = 1 << ((int)temp_var9 >> 2 & 0xffU);\n  if (temp_var4 <= temp_var3) {\n    if ((temp_var3 & temp_var4) == 0) {\n      temp_var9 = temp_var9 & 0xfffffffc;\n      do {\n        temp_var4 = temp_var4 << 1;\n        temp_var9 = temp_var9 + 4;\n      } while ((temp_var3 & temp_var4) == 0);\n    }\n    do {\n      temp_ptr16 = (undefined4 *)(allocator_ptr + temp_var9 * 8);\n      temp_ptr14 = temp_ptr16;\n      temp_var3 = temp_var9;\n      do {\n        for (temp_ptr10 = (undefined4 *)temp_ptr14[3]; temp_ptr14 != temp_ptr10;\n            temp_ptr10 = (undefined4 *)temp_ptr10[3]) {\n          temp_var7 = temp_ptr10[1] & 0xfffffffc;\n          temp_var8 = temp_var7 - adjusted_size;\n          if (0xf < (int)temp_var8) {\n            temp_var6 = temp_ptr10[2];\n            temp_var2 = temp_ptr10[3];\n            temp_ptr13 = (undefined *)(adjusted_size + (int)temp_ptr10);\n            temp_ptr10[1] = adjusted_size | 1;\n            *(int *)(temp_var6 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var6;\n            *(undefined **)(allocator_ptr + 0x14) = temp_ptr13;\n            *(undefined **)(allocator_ptr + 0x10) = temp_ptr13;\n            *(undefined **)(temp_ptr13 + 0xc) = temp_ptr12;\n            *(undefined **)(temp_ptr13 + 8) = temp_ptr12;\n            *(uint *)(temp_ptr13 + 4) = temp_var8 | 1;\n            *(uint *)(temp_ptr13 + temp_var8) = temp_var8;\n            __malloc_unlock(allocator);\n            return temp_ptr10 + 2;\n          }\n          if (-1 < (int)temp_var8) {\n            temp_var2 = temp_ptr10[2];\n            temp_var6 = temp_ptr10[3];\n            *(uint *)((int)temp_ptr10 + temp_var7 + 4) = *(uint *)((int)temp_ptr10 + temp_var7 + 4) | 1;\n            *(int *)(temp_var2 + 0xc) = temp_var6;\n            *(int *)(temp_var6 + 8) = temp_var2;\n            __malloc_unlock(allocator);\n            return temp_ptr10 + 2;\n          }\n        }\n        temp_var3 = temp_var3 + 1;\n        temp_ptr14 = temp_ptr14 + 2;\n      } while ((temp_var3 & 3) != 0);\n      do {\n        temp_var7 = temp_var9 & 3;\n        temp_ptr14 = temp_ptr16 + -2;\n        temp_var9 = temp_var9 - 1;\n        if (temp_var7 == 0) {\n          temp_var7 = *(uint *)(allocator_ptr + 4) & ~temp_var4;\n          *(uint *)(allocator_ptr + 4) = temp_var7;\n          goto LAB_00082262;\n        }\n        temp_ptr16 = (undefined4 *)*temp_ptr16;\n      } while (temp_ptr16 == temp_ptr14);\n      temp_var7 = *(uint *)(allocator_ptr + 4);\nLAB_00082262:\n      temp_var4 = temp_var4 * 2;\n      if ((temp_var7 <= temp_var4 && temp_var4 - temp_var7 != 0) || (temp_var9 = temp_var3, temp_var4 == 0)) break;\n      for (; (temp_var7 & temp_var4) == 0; temp_var4 = temp_var4 << 1) {\n        temp_var9 = temp_var9 + 4;\n      }\n    } while( true );\n  }\n  temp_ptr13 = PTR___malloc_sbrk_base_00082148;\n  temp_ptr12 = *(undefined **)(allocator_ptr + 8);\n  temp_var9 = *(uint *)(temp_ptr12 + 4) & 0xfffffffc;\n  if ((adjusted_size <= temp_var9) && (temp_var3 = temp_var9 - adjusted_size, temp_ptr5 = temp_ptr12, 0xf < (int)temp_var3))\n  goto LAB_0008211e;\n  temp_ptr17 = temp_ptr12 + temp_var9;\n  if (*(int *)PTR___malloc_sbrk_base_00082148 == -1) {\n    temp_var3 = adjusted_size + *(int *)PTR___malloc_top_pad_00082144 + 0x10;\n  }\n  else {\n    temp_var3 = adjusted_size + *(int *)PTR___malloc_top_pad_00082144 + 0x100f & 0xfffff000;\n  }\n  temp_ptr5 = (undefined *)_sbrk_r(allocator,temp_var3);\n  temp_ptr11 = PTR___malloc_current_mallinfo_00082154;\n  if ((temp_ptr5 == (undefined *)0xffffffff) || ((temp_ptr5 < temp_ptr17 && (temp_ptr12 != allocator_ptr)))) {\n    temp_ptr5 = *(undefined **)(allocator_ptr + 8);\n    temp_var9 = *(uint *)(temp_ptr5 + 4) & 0xfffffffc;\n  }\n  else {\n    temp_var4 = *(int *)PTR___malloc_current_mallinfo_00082154 + temp_var3;\n    *(uint *)PTR___malloc_current_mallinfo_00082154 = temp_var4;\n    if ((temp_ptr17 == temp_ptr5) && (((uint)temp_ptr17 & 0xfff) == 0)) {\n      *(uint *)(*(int *)(allocator_ptr + 8) + 4) = temp_var3 + temp_var9 | 1;\n    }\n    else {\n      if (*(int *)temp_ptr13 == -1) {\n        *(undefined **)PTR___malloc_sbrk_base_00082148 = temp_ptr5;\n      }\n      else {\n        *(undefined **)temp_ptr11 = temp_ptr5 + (temp_var4 - (int)temp_ptr17);\n      }\n      temp_var4 = (uint)temp_ptr5 & 7;\n      if (temp_var4 == 0) {\n        temp_var2 = 0x1000;\n      }\n      else {\n        temp_ptr5 = temp_ptr5 + (8 - temp_var4);\n        temp_var2 = 0x1008 - temp_var4;\n      }\n      temp_var2 = temp_var2 - ((uint)(temp_ptr5 + temp_var3) & 0xfff);\n      temp_var6 = _sbrk_r(allocator,temp_var2);\n      if (temp_var6 == -1) {\n        temp_var3 = 1;\n        temp_var2 = 0;\n      }\n      else {\n        temp_var3 = (temp_var6 - (int)temp_ptr5) + temp_var2 | 1;\n      }\n      temp_var4 = *(int *)temp_ptr11 + temp_var2;\n      *(undefined **)(allocator_ptr + 8) = temp_ptr5;\n      *(uint *)temp_ptr11 = temp_var4;\n      *(uint *)(temp_ptr5 + 4) = temp_var3;\n      temp_ptr13 = PTR___malloc_current_mallinfo_00082154;\n      if (temp_ptr12 != allocator_ptr) {\n        if (temp_var9 < 0x10) {\n          *(undefined4 *)(temp_ptr5 + 4) = 1;\n          temp_var9 = 0;\n          goto LAB_00082108;\n        }\n        temp_var9 = temp_var9 - 0xc & 0xfffffff8;\n        *(uint *)(temp_ptr12 + 4) = temp_var9 | *(uint *)(temp_ptr12 + 4) & 1;\n        *(undefined4 *)(temp_ptr12 + temp_var9 + 4) = 5;\n        *(undefined4 *)(temp_ptr12 + temp_var9 + 8) = 5;\n        if (0xf < temp_var9) {\n          _free_r(allocator,temp_ptr12 + 8);\n          temp_var4 = *(uint *)temp_ptr13;\n        }\n      }\n    }\n    temp_ptr5 = *(undefined **)(allocator_ptr + 8);\n    if (*(uint *)PTR___malloc_max_sbrked_mem_0008214c < temp_var4) {\n      *(uint *)PTR___malloc_max_sbrked_mem_0008214c = temp_var4;\n    }\n    if (*(uint *)PTR___malloc_max_total_mem_00082150 < temp_var4) {\n      *(uint *)PTR___malloc_max_total_mem_00082150 = temp_var4;\n    }\n    temp_var9 = *(uint *)(temp_ptr5 + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  temp_var3 = temp_var9 - adjusted_size;\n  if ((temp_var9 < adjusted_size) || ((int)temp_var3 < 0x10)) {\n    __malloc_unlock(allocator);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(temp_ptr5 + 4) = adjusted_size | 1;\n  *(undefined **)(allocator_ptr + 8) = temp_ptr5 + adjusted_size;\n  *(uint *)(temp_ptr5 + adjusted_size + 4) = temp_var3 | 1;\n  __malloc_unlock(allocator);\n  return (int *)(temp_ptr5 + 8);\n}\n\n",
            "called": [
                "_free_r",
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e14",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r",
                "malloc",
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081e14"
        },
        "FUN_000818b8": {
            "renaming": {
                "FUN_000818b8": "calculate_result_000818b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_input_1",
                "uVar2": "temp_input_2",
                "iVar3": "leading_zeroes",
                "uVar4": "shift_amount",
                "iVar5": "base_value",
                "uVar6": "shifted_input_1"
            },
            "code": "\nuint calculate_result_000818b8(uint input_1,uint input_2)\n\n{\n  uint temp_input_1;\n  uint temp_input_2;\n  int leading_zeroes;\n  uint shift_amount;\n  int base_value;\n  uint shifted_input_1;\n  \n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  temp_input_1 = input_1;\n  temp_input_2 = input_2;\n  if (input_2 == 0) {\n    temp_input_1 = 0;\n    temp_input_2 = input_1;\n  }\n  base_value = 0x5b000000;\n  if (input_2 == 0) {\n    base_value = 0x4b000000;\n  }\n  leading_zeroes = count_leading_zeroes(temp_input_2);\n  shift_amount = leading_zeroes - 8;\n  base_value = base_value + -0x800000 + shift_amount * -0x800000;\n  if (leading_zeroes < 8) {\n    shift_amount = temp_input_2 << (leading_zeroes + 0x18U & 0xff);\n    temp_input_2 = base_value + ((temp_input_2 >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n    if ((temp_input_1 | shift_amount << 1) == 0) {\n      temp_input_2 = temp_input_2 & ~(shift_amount >> 0x1f);\n    }\n    return temp_input_2;\n  }\n  shifted_input_1 = temp_input_1 << (shift_amount & 0xff);\n  temp_input_2 = base_value + (temp_input_2 << (shift_amount & 0xff)) +\n          (temp_input_1 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_input_1);\n  if (shifted_input_1 == 0x80000000) {\n    temp_input_2 = temp_input_2 & 0xfffffffe;\n  }\n  return temp_input_2;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000818b8",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_000818b8"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initialize_modbus_00080164",
                "Modbus": "modbusInstance",
                "u32speed": "baudRate",
                "puVar1": "serialPtr",
                "iVar2": "availableBytes"
            },
            "code": "\nvoid __thiscall modbusInstance::initializeModbus_00080164(modbusInstance *this,long baudRate)\n\n{\n  undefined *serialPtr;\n  int availableBytes;\n  \n  serialPtr = PTR_Serial_000801ac;\n  this->port = (HardwareSerial *)PTR_Serial_000801ac;\n  (**(code **)(*(int *)serialPtr + 0x18))(PTR_Serial_000801ac);\n  if (1 < this->u8txenpin) {\n    pinMode((uint)this->u8txenpin,1);\n    digitalWrite((uint)this->u8txenpin,0);\n  }\n  do {\n    availableBytes = (**(code **)(*(int *)this->port + 0xc))();\n  } while (-1 < availableBytes);\n  this->u8BufferSize = '\\0';\n  this->u8lastRec = '\\0';\n  this->u16errCnt = 0;\n  this->u16OutCnt = 0;\n  this->u16InCnt = 0;\n  return;\n}\n\n",
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_modbus_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "file_UNUSED": "file_unused",
                "ptr": "data_ptr",
                "len": "data_length",
                "iVar1": "index"
            },
            "code": "\nint process_data_000811cc(int file_unused,char *data_ptr,int data_length)\n\n{\n  int index;\n  \n  for (index = 0; index < data_length; index = index + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)(byte)data_ptr[index];\n  }\n  return data_length & ~(data_length >> 0x1f);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "_write_r"
            ],
            "imported": false,
            "current_name": "process_data_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "check_isatty_error_000846dc",
                "param_1": "error_code",
                "param_2": "file_descriptor",
                "puVar1": "errno_ptr",
                "iVar2": "isatty_result"
            },
            "code": "\nvoid check_isatty_error_000846dc(int *error_code,int file_descriptor)\n\n{\n  undefined *errno_ptr;\n  int isatty_result;\n  \n  errno_ptr = PTR_errno_000846fc;\n  *(undefined4 *)PTR_errno_000846fc = 0;\n  isatty_result = _isatty(file_descriptor);\n  if ((isatty_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "__smakebuf_r"
            ],
            "imported": false,
            "current_name": "check_isatty_error_000846dc"
        },
        "FUN_00081be4": {
            "renaming": {
                "FUN_00081be4": "calculate_result_00081be4",
                "param_1": "value1",
                "param_2": "value2",
                "uVar2": "doubleValue1",
                "uVar3": "doubleValue2",
                "uVar4": "tempResult",
                "bVar1": "condition1",
                "bVar5": "isZero"
            },
            "code": "\nuint calculateResult_00081be4(uint value1,uint value2)\n\n{\n  bool condition1;\n  uint doubleValue1;\n  uint doubleValue2;\n  uint tempResult;\n  bool isZero;\n  \n  doubleValue1 = value1 * 2;\n  doubleValue2 = value2 * 2;\n  if (((int)doubleValue1 >> 0x18 == -1 || (int)doubleValue2 >> 0x18 == -1) &&\n     ((((int)doubleValue1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) ||\n      (((int)doubleValue2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  tempResult = doubleValue1 | value2 & 0x7fffffff;\n  isZero = tempResult == 0;\n  if (!isZero) {\n    tempResult = value1 ^ value2;\n    isZero = tempResult == 0;\n  }\n  condition1 = -1 < (int)tempResult;\n  if (condition1) {\n    value1 = doubleValue1 + value2 * -2;\n    isZero = value1 == 0;\n  }\n  if ((condition1 && doubleValue2 <= doubleValue1) && !isZero) {\n    value1 = (int)value2 >> 0x1f;\n  }\n  if (!condition1 || doubleValue2 > doubleValue1) {\n    value1 = ~((int)value2 >> 0x1f);\n  }\n  if (!isZero) {\n    value1 = value1 | 1;\n  }\n  return value1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081be4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00081be4"
        },
        "FUN_000815ca": {
            "renaming": {
                "FUN_000815ca": "initialize_usart_000815ca",
                "USARTClass": "usart_class",
                "dwBaudRate": "baud_rate",
                "this": "self",
                "super_UARTClass": "base_uart_class"
            },
            "code": "\nvoid __selfcall usart_class::initializeUSART_000815ca(usart_class *self,uint32_t baud_rate)\n\n{\n  UARTClass::init(&self->base_uart_class,baud_rate,0x8c0);\n  return;\n}\n\n",
            "called": [
                "init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815ca",
            "calling": [],
            "imported": false,
            "current_name": "initialize_usart_000815ca"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_modified_value_00081894",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "adjusted_zeroes_count",
                "iVar3": "intermediate_result",
                "uVar4": "shifted_value"
            },
            "code": "\nuint calculate_modified_value_00081894(uint input_value)\n\n{\n  int leading_zeroes_count;\n  uint adjusted_zeroes_count;\n  int intermediate_result;\n  uint shifted_value;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  adjusted_zeroes_count = leading_zeroes_count - 8;\n  intermediate_result = adjusted_zeroes_count * -0x800000 + 0x4a800000;\n  if (7 < leading_zeroes_count) {\n    shifted_value = 0 << (adjusted_zeroes_count & 0xff);\n    adjusted_zeroes_count = intermediate_result + (input_value << (adjusted_zeroes_count & 0xff)) +\n            (0U >> (0x20 - adjusted_zeroes_count & 0xff)) + (uint)(0x7fffffff < shifted_value);\n    if (shifted_value == 0x80000000) {\n      adjusted_zeroes_count = adjusted_zeroes_count & 0xfffffffe;\n    }\n    return adjusted_zeroes_count;\n  }\n  shifted_value = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  adjusted_zeroes_count = intermediate_result + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_value >> 0x1f));\n  if ((shifted_value & 0x7fffffff) == 0) {\n    adjusted_zeroes_count = adjusted_zeroes_count & ~(shifted_value >> 0x1f);\n  }\n  return adjusted_zeroes_count;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_modified_value_00081894"
        },
        "FUN_00084248": {
            "renaming": {
                "FUN_00084248": "process_data_00084248",
                "param_1": "input_value",
                "param_2": "callback_function",
                "uVar1": "result",
                "iVar2": "current_data",
                "iVar3": "counter",
                "uVar4": "accumulated_result",
                "piVar5": "data_pointer"
            },
            "code": "\nuint process_data_00084248(int input_value,code *callback_function)\n\n{\n  uint result;\n  int current_data;\n  int counter;\n  uint accumulated_result;\n  int *data_pointer;\n  \n  data_pointer = (int *)(input_value + 0x2e0);\n  if (data_pointer != (int *)0x0) {\n    accumulated_result = 0;\n    do {\n      current_data = data_pointer[2];\n      counter = data_pointer[1] + -1;\n      if (-1 < counter) {\n        do {\n          counter = counter + -1;\n          if ((1 < *(ushort *)(current_data + 0xc)) && (*(short *)(current_data + 0xe) != -1)) {\n            result = (*callback_function)(current_data);\n            accumulated_result = accumulated_result | result;\n          }\n          current_data = current_data + 0x68;\n        } while (counter != -1);\n      }\n      data_pointer = (int *)*data_pointer;\n    } while (data_pointer != (int *)0x0);\n    return accumulated_result;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084248",
            "calling": [
                "_cleanup_r"
            ],
            "imported": false,
            "current_name": "process_data_00084248"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "set_byte_value_000845bc",
                "param_1": "error_code_ptr",
                "param_2": "byte_ptr",
                "param_3": "value"
            },
            "code": "\nundefined4 set_byte_value_000845bc(undefined4 *error_code_ptr,undefined *byte_ptr,uint value)\n\n{\n  if (byte_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *byte_ptr = (char)value;\n    return 1;\n  }\n  *error_code_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "_wcrtomb_r"
            ],
            "imported": false,
            "current_name": "set_byte_value_000845bc"
        },
        "FUN_00081412": {
            "renaming": {
                "FUN_00081412": "read_from_ring_buffer_00081412",
                "__fd": "fileDescriptor",
                "__buf": "buffer",
                "__nbytes": "bufferSize",
                "this": "uartInstance",
                "bVar1": "byteRead",
                "pRVar2": "ringBufferPtr"
            },
            "code": "\nssize_t __uartInstancecall UARTClass::readFromRingBuffer_00081412(UARTClass *uartInstance,int fileDescriptor,void *buffer,size_t bufferSize)\n\n{\n  byte byteRead;\n  RingBuffer *ringBufferPtr;\n  \n  ringBufferPtr = uartInstance->_rx_buffer;\n  if (ringBufferPtr->_iHead != ringBufferPtr->_iTail) {\n    byteRead = ringBufferPtr->_aucBuffer[ringBufferPtr->_iTail];\n    ringBufferPtr->_iTail = ringBufferPtr->_iTail + 1U & 0x7f;\n    return (uint)byteRead;\n  }\n  return -1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081412",
            "calling": [],
            "imported": false,
            "current_name": "read_from_ring_buffer_00081412"
        },
        "FUN_000838cc": {
            "renaming": {
                "FUN_000838cc": "process_data_000838cc",
                "param_1": "mode",
                "param_2": "data",
                "param_3": "extraData1",
                "param_4": "extraData2",
                "puVar1": "dataPtr",
                "uVar2": "currentIndex",
                "iVar3": "globalPtr",
                "uVar4": "bitMask"
            },
            "code": "\nundefined4 processData_000838cc(int mode,undefined4 data,undefined4 extraData1,undefined4 extraData2)\n\n{\n  undefined4 *dataPtr;\n  uint currentIndex;\n  int globalPtr;\n  uint bitMask;\n  \n  globalPtr = *(int *)PTR__global_impure_ptr_0008396c;\n  dataPtr = *(undefined4 **)(globalPtr + 0x148);\n  if (dataPtr == (undefined4 *)0x0) {\n    dataPtr = (undefined4 *)(globalPtr + 0x14c);\n    *(undefined4 **)(globalPtr + 0x148) = dataPtr;\n  }\n  currentIndex = dataPtr[1];\n  if (0x1f < (int)currentIndex) {\n    if (DAT_00083970 != 0) {\n      dataPtr = (undefined4 *)malloc(400);\n      if (dataPtr != (undefined4 *)0x0) {\n        *dataPtr = *(undefined4 *)(globalPtr + 0x148);\n        dataPtr[1] = 0;\n        currentIndex = 0;\n        *(undefined4 **)(globalPtr + 0x148) = dataPtr;\n        dataPtr[0x62] = 0;\n        dataPtr[99] = 0;\n        goto LAB_00083922;\n      }\n    }\n    return 0xffffffff;\n  }\nLAB_00083922:\n  if (mode != 0) {\n    bitMask = 1 << (currentIndex & 0xff);\n    dataPtr[currentIndex + 0x22] = extraData1;\n    dataPtr[0x62] = dataPtr[0x62] | bitMask;\n    dataPtr[currentIndex + 0x42] = extraData2;\n    if (mode == 2) {\n      dataPtr[99] = bitMask | dataPtr[99];\n    }\n  }\n  dataPtr[1] = currentIndex + 1;\n  dataPtr[currentIndex + 2] = data;\n  return 0;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000838cc",
            "calling": [
                "__cxa_atexit",
                "atexit"
            ],
            "imported": false,
            "current_name": "process_data_000838cc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "memset_custom_00082504",
                "__s": "dest",
                "__c": "value",
                "__n": "num",
                "puVar1": "cur_uint_ptr",
                "puVar2": "dest_uint_ptr",
                "puVar3": "temp_uint_ptr",
                "uVar4": "filled_value",
                "uVar5": "remaining_bytes",
                "bVar6": "is_zero"
            },
            "code": "\nvoid * memset_custom_00082504(void *dest,int value,size_t num)\n\n{\n  uint *cur_uint_ptr;\n  uint *dest_uint_ptr;\n  uint *temp_uint_ptr;\n  uint filled_value;\n  uint remaining_bytes;\n  bool is_zero;\n  \n  dest_uint_ptr = (uint *)dest;\n  if (((uint)dest & 3) != 0) {\n    is_zero = num == 0;\n    cur_uint_ptr = (uint *)dest;\n    num = num - 1;\n    if (is_zero) {\n      return dest;\n    }\n    while( true ) {\n      dest_uint_ptr = (uint *)((int)cur_uint_ptr + 1);\n      *(char *)cur_uint_ptr = (char)value;\n      if (((uint)dest_uint_ptr & 3) == 0) break;\n      is_zero = num == 0;\n      cur_uint_ptr = dest_uint_ptr;\n      num = num - 1;\n      if (is_zero) {\n        return dest;\n      }\n    }\n  }\n  if (3 < num) {\n    filled_value = value & 0xffU | (value & 0xffU) << 8;\n    filled_value = filled_value | filled_value << 0x10;\n    remaining_bytes = num;\n    cur_uint_ptr = dest_uint_ptr;\n    if (0xf < num) {\n      remaining_bytes = num - 0x10;\n      do {\n        *cur_uint_ptr = filled_value;\n        cur_uint_ptr[1] = filled_value;\n        cur_uint_ptr[2] = filled_value;\n        cur_uint_ptr[3] = filled_value;\n        cur_uint_ptr = cur_uint_ptr + 4;\n      } while (cur_uint_ptr != (uint *)((int)dest_uint_ptr + (remaining_bytes & 0xfffffff0) + 0x10));\n      num = num & 0xf;\n      dest_uint_ptr = dest_uint_ptr + ((remaining_bytes >> 4) + 1) * 4;\n      remaining_bytes = num;\n      cur_uint_ptr = dest_uint_ptr;\n      if (num < 4) goto LAB_00082580;\n    }\n    do {\n      num = num - 4;\n      *dest_uint_ptr = filled_value;\n      dest_uint_ptr = dest_uint_ptr + 1;\n    } while (3 < num);\n    dest_uint_ptr = (uint *)((int)cur_uint_ptr + (remaining_bytes - 4 & 0xfffffffc) + 4);\n    num = remaining_bytes & 3;\n  }\nLAB_00082580:\n  if (num != 0) {\n    cur_uint_ptr = dest_uint_ptr;\n    do {\n      temp_uint_ptr = (uint *)((int)cur_uint_ptr + 1);\n      *(char *)cur_uint_ptr = (char)value;\n      cur_uint_ptr = temp_uint_ptr;\n    } while (temp_uint_ptr != (uint *)(num + (int)dest_uint_ptr));\n  }\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "imported": false,
            "current_name": "memset_custom_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "initialize_etext_pointer_000800f4",
                "param_1": "etext_pointer"
            },
            "code": "\nundefined * initialize_etext_pointer_000800f4(undefined *etext_pointer)\n\n{\n  if (*PTR_completed_7857_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      etext_pointer = PTR__etext_00080114;\n    }\n    *PTR_completed_7857_0008010c = 1;\n  }\n  return etext_pointer;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [
                "__libc_fini_array"
            ],
            "imported": false,
            "current_name": "initialize_etext_pointer_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "print_buffer_0008378c",
                "param_1": "output_stream",
                "param_2": "buffer_info",
                "iVar1": "print_result",
                "iVar2": "flush_result",
                "local_488": "buffer_ptr",
                "local_480": "buffer_size",
                "local_47c": "flag_masked",
                "local_47a": "short_value",
                "local_478": "buffer",
                "local_474": "buffer_limit",
                "local_470": "initial_offset",
                "local_46c": "offset_1c",
                "local_464": "offset_24",
                "local_424": "offset_100",
                "auStack_420": "stack_buffer"
            },
            "code": "\nint print_buffer_0008378c(undefined4 output_stream,int buffer_info)\n\n{\n  int print_result;\n  int flush_result;\n  undefined *buffer_ptr [2];\n  undefined4 buffer_size;\n  ushort flag_masked;\n  undefined2 short_value;\n  undefined *buffer;\n  undefined4 buffer_limit;\n  undefined4 initial_offset;\n  undefined4 offset_1c;\n  undefined4 offset_24;\n  undefined4 offset_100;\n  undefined stack_buffer [1024];\n  \n  offset_100 = *(undefined4 *)(buffer_info + 100);\n  offset_1c = *(undefined4 *)(buffer_info + 0x1c);\n  short_value = *(undefined2 *)(buffer_info + 0xe);\n  offset_24 = *(undefined4 *)(buffer_info + 0x24);\n  buffer_ptr[0] = stack_buffer;\n  flag_masked = *(ushort *)(buffer_info + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_limit = 0x400;\n  initial_offset = 0;\n  buffer = buffer_ptr[0];\n  print_result = _vfiprintf_r(output_stream,buffer_ptr);\n  if ((-1 < print_result) && (flush_result = _fflush_r(output_stream,buffer_ptr), flush_result != 0)) {\n    print_result = -1;\n  }\n  if ((int)((uint)flag_masked << 0x19) < 0) {\n    *(ushort *)(buffer_info + 0xc) = *(ushort *)(buffer_info + 0xc) | 0x40;\n  }\n  return print_result;\n}\n\n",
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "print_buffer_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "initialize_and_flush_00083adc",
                "param_1": "stream_ptr",
                "param_2": "config_ptr"
            },
            "code": "\nvoid initialize_and_flush_00083adc(int stream_ptr,int config_ptr)\n\n{\n  if ((stream_ptr != 0) && (*(int *)(stream_ptr + 0x38) == 0)) {\n    __sinit();\n  }\n  if (*(short *)(config_ptr + 0xc) == 0) {\n    return;\n  }\n  __sflush_r(stream_ptr);\n  return;\n}\n\n",
            "called": [
                "__sinit",
                "__sflush_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "__swbuf_r",
                "_fclose_r"
            ],
            "imported": false,
            "current_name": "initialize_and_flush_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "reallocate_memory_000825b0",
                "param_1": "allocator",
                "param_2": "old_ptr",
                "param_3": "new_size",
                "puVar1": "malloc_av_ptr",
                "iVar2": "temp_var2",
                "piVar3": "new_ptr",
                "uVar4": "temp_var4",
                "sVar5": "size_diff",
                "uVar6": "old_size",
                "piVar7": "temp_ptr7",
                "uVar8": "aligned_old_size",
                "uVar9": "aligned_new_size",
                "piVar10": "temp_ptr10",
                "iVar11": "temp_var11"
            },
            "code": "\nint * reallocate_memory_000825b0(undefined4 *allocator,int *old_ptr,uint new_size)\n\n{\n  undefined *malloc_av_ptr;\n  int temp_var2;\n  int *new_ptr;\n  uint temp_var4;\n  size_t size_diff;\n  uint old_size;\n  int *temp_ptr7;\n  uint aligned_old_size;\n  uint aligned_new_size;\n  int *temp_ptr10;\n  int temp_var11;\n  \n  if (old_ptr == (int *)0x0) {\n    new_ptr = (int *)_malloc_r(allocator,new_size);\n    return new_ptr;\n  }\n  __malloc_lock();\n  malloc_av_ptr = PTR___malloc_av__0008296c;\n  old_size = old_ptr[-1];\n  aligned_old_size = old_size & 0xfffffffc;\n  new_ptr = old_ptr + -2;\n  if (new_size + 0xb < 0x17) {\n    aligned_new_size = 0x10;\n  }\n  else {\n    aligned_new_size = new_size + 0xb & 0xfffffff8;\n    if ((int)aligned_new_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_new_size < new_size) {\nLAB_0008267c:\n    *allocator = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)aligned_old_size < (int)aligned_new_size) {\n    temp_var2 = (int)new_ptr + aligned_old_size;\n    temp_var11 = *(int *)(PTR___malloc_av__0008296c + 8);\n    if (temp_var11 == temp_var2) {\n      temp_var4 = *(uint *)(temp_var11 + 4) & 0xfffffffc;\n      temp_var2 = temp_var11;\n      if ((int)(aligned_new_size + 0x10) <= (int)(temp_var4 + aligned_old_size)) {\n        *(uint *)(PTR___malloc_av__0008296c + 8) = (int)new_ptr + aligned_new_size;\n        *(uint *)((int)new_ptr + aligned_new_size + 4) = (temp_var4 + aligned_old_size) - aligned_new_size | 1;\n        old_ptr[-1] = aligned_new_size | old_ptr[-1] & 1U;\n        __malloc_unlock(allocator);\n        return old_ptr;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var2 + 4) & 0xfffffffe) + temp_var2 + 4) & 1) == 0) {\n      temp_var4 = *(uint *)(temp_var2 + 4) & 0xfffffffc;\n      if ((int)aligned_new_size <= (int)(temp_var4 + aligned_old_size)) {\n        temp_var11 = *(int *)(temp_var2 + 0xc);\n        temp_var2 = *(int *)(temp_var2 + 8);\n        *(int *)(temp_var2 + 0xc) = temp_var11;\n        *(int *)(temp_var11 + 8) = temp_var2;\n        aligned_old_size = temp_var4 + aligned_old_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_var4 = 0;\n      temp_var2 = 0;\n    }\n    if (-1 < (int)(old_size << 0x1f)) {\n      temp_ptr10 = (int *)((int)new_ptr - old_ptr[-2]);\n      old_size = (temp_ptr10[1] & 0xfffffffcU) + aligned_old_size;\n      if (temp_var2 != 0) {\n        if (temp_var2 == temp_var11) {\n          if ((int)(aligned_new_size + 0x10) <= (int)(temp_var4 + old_size)) {\n            new_ptr = temp_ptr10 + 2;\n            temp_var2 = *new_ptr;\n            temp_var11 = temp_ptr10[3];\n            size_diff = aligned_old_size - 4;\n            *(int *)(temp_var2 + 0xc) = temp_var11;\n            *(int *)(temp_var11 + 8) = temp_var2;\n            if (size_diff < 0x25) {\n              temp_ptr7 = new_ptr;\n              if (0x13 < size_diff) {\n                temp_ptr10[2] = *old_ptr;\n                temp_ptr10[3] = old_ptr[1];\n                if (size_diff < 0x1c) {\n                  old_ptr = old_ptr + 2;\n                  temp_ptr7 = temp_ptr10 + 4;\n                }\n                else {\n                  temp_ptr10[4] = old_ptr[2];\n                  temp_ptr10[5] = old_ptr[3];\n                  if (size_diff == 0x24) {\n                    temp_ptr10[6] = old_ptr[4];\n                    temp_ptr7 = old_ptr + 5;\n                    old_ptr = old_ptr + 6;\n                    temp_ptr10[7] = *temp_ptr7;\n                    temp_ptr7 = temp_ptr10 + 8;\n                  }\n                  else {\n                    old_ptr = old_ptr + 4;\n                    temp_ptr7 = temp_ptr10 + 6;\n                  }\n                }\n              }\n              *temp_ptr7 = *old_ptr;\n              temp_ptr7[1] = old_ptr[1];\n              temp_ptr7[2] = old_ptr[2];\n            }\n            else {\n              memmove(new_ptr,old_ptr,size_diff);\n            }\n            *(uint *)(malloc_av_ptr + 8) = (int)temp_ptr10 + aligned_new_size;\n            *(uint *)((int)temp_ptr10 + aligned_new_size + 4) = (temp_var4 + old_size) - aligned_new_size | 1;\n            temp_ptr10[1] = aligned_new_size | temp_ptr10[1] & 1U;\n            __malloc_unlock(allocator);\n            return new_ptr;\n          }\n        }\n        else {\n          temp_var4 = temp_var4 + old_size;\n          if ((int)aligned_new_size <= (int)temp_var4) {\n            temp_var11 = *(int *)(temp_var2 + 0xc);\n            temp_var2 = *(int *)(temp_var2 + 8);\n            *(int *)(temp_var2 + 0xc) = temp_var11;\n            *(int *)(temp_var11 + 8) = temp_var2;\n            temp_ptr7 = temp_ptr10 + 2;\n            temp_var2 = *temp_ptr7;\n            temp_var11 = temp_ptr10[3];\n            size_diff = aligned_old_size - 4;\n            *(int *)(temp_var2 + 0xc) = temp_var11;\n            *(int *)(temp_var11 + 8) = temp_var2;\n            aligned_old_size = temp_var4;\n            if (size_diff < 0x25) {\n              new_ptr = temp_ptr7;\n              if (0x13 < size_diff) {\n                temp_ptr10[2] = *old_ptr;\n                temp_ptr10[3] = old_ptr[1];\n                if (size_diff < 0x1c) {\n                  old_ptr = old_ptr + 2;\n                  new_ptr = temp_ptr10 + 4;\n                }\n                else {\n                  temp_ptr10[4] = old_ptr[2];\n                  temp_ptr10[5] = old_ptr[3];\n                  if (size_diff == 0x24) {\n                    temp_ptr10[6] = old_ptr[4];\n                    new_ptr = old_ptr + 5;\n                    old_ptr = old_ptr + 6;\n                    temp_ptr10[7] = *new_ptr;\n                    new_ptr = temp_ptr10 + 8;\n                  }\n                  else {\n                    old_ptr = old_ptr + 4;\n                    new_ptr = temp_ptr10 + 6;\n                  }\n                }\n              }\n              *new_ptr = *old_ptr;\n              new_ptr[1] = old_ptr[1];\n              new_ptr[2] = old_ptr[2];\n              old_size = temp_ptr10[1];\n              new_ptr = temp_ptr10;\n              old_ptr = temp_ptr7;\n            }\n            else {\n              memmove(temp_ptr7,old_ptr,size_diff);\n              old_size = temp_ptr10[1];\n              new_ptr = temp_ptr10;\n              old_ptr = temp_ptr7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_new_size <= (int)old_size) {\n        temp_ptr7 = temp_ptr10 + 2;\n        temp_var2 = *temp_ptr7;\n        temp_var11 = temp_ptr10[3];\n        size_diff = aligned_old_size - 4;\n        *(int *)(temp_var2 + 0xc) = temp_var11;\n        *(int *)(temp_var11 + 8) = temp_var2;\n        aligned_old_size = old_size;\n        if (size_diff < 0x25) {\n          new_ptr = temp_ptr7;\n          if (0x13 < size_diff) {\n            temp_ptr10[2] = *old_ptr;\n            temp_ptr10[3] = old_ptr[1];\n            if (size_diff < 0x1c) {\n              old_ptr = old_ptr + 2;\n              new_ptr = temp_ptr10 + 4;\n            }\n            else {\n              temp_ptr10[4] = old_ptr[2];\n              temp_ptr10[5] = old_ptr[3];\n              if (size_diff == 0x24) {\n                temp_ptr10[6] = old_ptr[4];\n                new_ptr = old_ptr + 5;\n                old_ptr = old_ptr + 6;\n                temp_ptr10[7] = *new_ptr;\n                new_ptr = temp_ptr10 + 8;\n              }\n              else {\n                old_ptr = old_ptr + 4;\n                new_ptr = temp_ptr10 + 6;\n              }\n            }\n          }\n          *new_ptr = *old_ptr;\n          new_ptr[1] = old_ptr[1];\n          new_ptr[2] = old_ptr[2];\n          old_size = temp_ptr10[1];\n          new_ptr = temp_ptr10;\n          old_ptr = temp_ptr7;\n        }\n        else {\n          memmove(temp_ptr7,old_ptr,size_diff);\n          old_size = temp_ptr10[1];\n          new_ptr = temp_ptr10;\n          old_ptr = temp_ptr7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr10 = (int *)_malloc_r(allocator,new_size);\n    if (temp_ptr10 == (int *)0x0) goto LAB_000826a4;\n    old_size = old_ptr[-1];\n    if (temp_ptr10 + -2 != (int *)((old_size & 0xfffffffe) + (int)new_ptr)) {\n      size_diff = aligned_old_size - 4;\n      if (size_diff < 0x25) {\n        new_ptr = old_ptr;\n        temp_ptr7 = temp_ptr10;\n        if (0x13 < size_diff) {\n          *temp_ptr10 = *old_ptr;\n          temp_ptr10[1] = old_ptr[1];\n          if (size_diff < 0x1c) {\n            new_ptr = old_ptr + 2;\n            temp_ptr7 = temp_ptr10 + 2;\n          }\n          else {\n            temp_ptr10[2] = old_ptr[2];\n            temp_ptr10[3] = old_ptr[3];\n            if (size_diff == 0x24) {\n              temp_ptr10[4] = old_ptr[4];\n              temp_ptr10[5] = old_ptr[5];\n              new_ptr = old_ptr + 6;\n              temp_ptr7 = temp_ptr10 + 6;\n            }\n            else {\n              new_ptr = old_ptr + 4;\n              temp_ptr7 = temp_ptr10 + 4;\n            }\n          }\n        }\n        *temp_ptr7 = *new_ptr;\n        temp_ptr7[1] = new_ptr[1];\n        temp_ptr7[2] = new_ptr[2];\n      }\n      else {\n        memmove(temp_ptr10,old_ptr,size_diff);\n      }\n      _free_r(allocator,old_ptr);\n      goto LAB_000826a4;\n    }\n    aligned_old_size = aligned_old_size + (temp_ptr10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_var4 = aligned_old_size - aligned_new_size;\n  temp_ptr10 = old_ptr;\n  if (temp_var4 < 0x10) {\n    new_ptr[1] = old_size & 1 | aligned_old_size;\n    *(uint *)((int)new_ptr + aligned_old_size + 4) = *(uint *)((int)new_ptr + aligned_old_size + 4) | 1;\n  }\n  else {\n    new_ptr[1] = old_size & 1 | aligned_new_size;\n    *(uint *)((int)new_ptr + aligned_new_size + 4) = temp_var4 | 1;\n    *(uint *)((int)new_ptr + temp_var4 + aligned_new_size + 4) = *(uint *)((int)new_ptr + temp_var4 + aligned_new_size + 4) | 1;\n    _free_r(allocator,(int)new_ptr + aligned_new_size + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(allocator);\n  return temp_ptr10;\n}\n\n",
            "called": [
                "_free_r",
                "_malloc_r",
                "__malloc_unlock",
                "__malloc_lock",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825b0",
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "imported": false,
            "current_name": "reallocate_memory_000825b0"
        },
        "FUN_0008112c": {
            "renaming": {
                "FUN_0008112c": "execute_callbacks_0008112c",
                "uVar1": "leading_zeroes_count",
                "uVar2": "callback_bitmask"
            },
            "code": "\nvoid execute_callbacks_0008112c(void)\n\n{\n  uint leading_zeroes_count;\n  uint callback_bitmask;\n  \n  callback_bitmask = *(uint *)(DAT_0008115c + 0x4c);\n  while( true ) {\n    leading_zeroes_count = count_leading_zeroes(callback_bitmask);\n    if (0x1f < (leading_zeroes_count & 0xff)) break;\n    leading_zeroes_count = 0x1f - (leading_zeroes_count & 0xff) & 0xff;\n    if (*(code **)(PTR_callbacksPioD_00081160 + leading_zeroes_count * 4) != (code *)0x0) {\n      (**(code **)(PTR_callbacksPioD_00081160 + leading_zeroes_count * 4))();\n    }\n    callback_bitmask = callback_bitmask & ~(1 << leading_zeroes_count);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008112c",
            "calling": [],
            "imported": false,
            "current_name": "execute_callbacks_0008112c"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "validate_modbus_function_code_000803d4",
                "Modbus": "modbusInstance",
                "iVar1": "index",
                "au8Buffer": "buffer",
                "u16errCnt": "errorCount"
            },
            "code": "\nuint8_t __thiscall modbusInstance::validateModbusFunctionCode_000803d4(modbusInstance *this)\n\n{\n  int index;\n  \n  if ((int)((uint)this->buffer[1] << 0x18) < 0) {\n    this->errorCount = this->errorCount + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if (PTR_fctsupported_0008040c[index] == this->buffer[1]) {\n      return '\\0';\n    }\n    index = index + 1;\n  } while (index != 8);\n  this->errorCount = this->errorCount + 1;\n  return '\\x01';\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "validate_modbus_function_code_000803d4"
        },
        "FUN_000845d8": {
            "renaming": {
                "FUN_000845d8": "write_and_handle_error_000845d8",
                "param_1": "error_code_ptr",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "buffer_length",
                "puVar1": "errno_ptr",
                "iVar2": "write_result"
            },
            "code": "\nvoid write_and_handle_error_000845d8(int *error_code_ptr,int file_descriptor,char *buffer,int buffer_length)\n\n{\n  undefined *errno_ptr;\n  int write_result;\n  \n  errno_ptr = PTR_errno_000845fc;\n  *(undefined4 *)PTR_errno_000845fc = 0;\n  write_result = _write(file_descriptor,buffer,buffer_length);\n  if ((write_result == -1) && (*(int *)errno_ptr != 0)) {\n    *error_code_ptr = *(int *)errno_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "_write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845d8",
            "calling": [
                "__swrite"
            ],
            "imported": false,
            "current_name": "write_and_handle_error_000845d8"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "process_modbus_0008043e",
                "__thiscall": "this",
                "__fds": "fds",
                "__nfds": "nfds",
                "__timeout": "timeout",
                "bVar1": "byteVar",
                "uVar2": "uint8Var",
                "uVar3": "uint32Var",
                "unaff_r6": "tempResult"
            },
            "code": "\nint this Modbus::processModbus_0008043e(Modbus *this,processModbus_0008043efd *fds,nfds_t nfds,int timeout)\n\n{\n  byte byteVar;\n  uint8_t uint8Var;\n  uint32_t uint32Var;\n  uint tempResult;\n  \n  if (this->u8serno < 4) {\n    byteVar = (**(code **)(*(int *)this->port + 8))();\n    tempResult = (uint)byteVar;\n  }\n  uint32Var = millis();\n  if (this->u32timeOut < uint32Var) {\n    this->u8lastError = 0xff;\n    this->u8state = '\\0';\n    this->u16errCnt = this->u16errCnt + 1;\n  }\n  else if (7 < tempResult) {\n    getRxBuffer(this);\n    uint8Var = validateAnswer(this);\n    if (uint8Var == '\\0') {\n      if (this->au8Buffer[1] - 3 < 2) {\n        get_FC3(this);\n      }\n      this->u8state = '\\0';\n      uint8Var = this->u8BufferSize;\n    }\n    else {\n      this->u8state = '\\0';\n    }\n    goto LAB_000804a2;\n  }\n  uint8Var = '\\0';\nLAB_000804a2:\n  return (int)(char)uint8Var;\n}\n\n",
            "called": [
                "millis",
                "get_FC3",
                "validateAnswer",
                "getRxBuffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "process_modbus_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "clear_string_0008160c",
                "this": "str_obj",
                "len": "length"
            },
            "code": "\nvoid __str_objcall String::clear_string_0008160c(String *str_obj)\n\n{\n  if (str_obj->buffer != (char *)0x0) {\n    free(str_obj->buffer);\n  }\n  str_obj->buffer = (char *)0x0;\n  str_obj->length = 0;\n  str_obj->capacity = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "copy"
            ],
            "imported": false,
            "current_name": "clear_string_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "code": "\nundefined4 set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "init",
                "init",
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "\nint returnZero_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00081580": {
            "renaming": {
                "FUN_00081580": "process_uart_buffer_00081580",
                "UARTClass": "uartClass",
                "this": "self",
                "pRVar1": "txRingBuffer",
                "RVar2": "uartStatus"
            },
            "code": "\nvoid __selfcall uartClass::processUARTBuffer_00081580(uartClass *self)\n\n{\n  RingBuffer *txRingBuffer;\n  RoReg uartStatus;\n  \n  uartStatus = self->_pUart->UART_SR;\n  if ((int)(uartStatus << 0x1f) < 0) {\n    RingBuffer::store_char(self->_rx_buffer,(uint8_t)self->_pUart->UART_RHR);\n  }\n  if ((int)(uartStatus << 0x1e) < 0) {\n    txRingBuffer = self->_tx_buffer;\n    if (txRingBuffer->_iTail != txRingBuffer->_iHead) {\n      self->_pUart->UART_THR = (uint)txRingBuffer->_aucBuffer[txRingBuffer->_iTail];\n      txRingBuffer->_iTail = txRingBuffer->_iTail + 1U & 0x7f;\n      return;\n    }\n    self->_pUart->UART_IDR = 2;\n  }\n  return;\n}\n\n",
            "called": [
                "store_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081580",
            "calling": [
                "USART1_Handler",
                "USART0_Handler",
                "UART_Handler",
                "USART3_Handler"
            ],
            "imported": false,
            "current_name": "process_uart_buffer_00081580"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_mb_cur_max_value_00084298",
                "undefined4": "uint32_t"
            },
            "code": "\nuint32_t get_mb_cur_max_value_00084298(void)\n\n{\n  return *(uint32_t *)PTR___mb_cur_max_000842a0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "get_mb_cur_max_value_00084298"
        },
        "FUN_00080ac0": {
            "renaming": {
                "FUN_00080ac0": "FUNC_00080ac0"
            },
            "code": "\nvoid FUNC_00080ac0(void)\n\n{\n  UARTClass::IrqHandler((UARTClass *)PTR_Serial1_00080ac8);\n  return;\n}\n\n",
            "called": [
                "IrqHandler"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00080ac0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00080ac0"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_memory_value_00081066",
                "param_1": "memory_address"
            },
            "code": "\nvoid set_memory_value_00081066(int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_memory_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "calculate_result_00081cd0",
                "param_1": "input_value",
                "uVar1": "temp_result",
                "uVar2": "shift_value"
            },
            "code": "\nuint calculate_result_00081cd0(uint input_value)\n\n{\n  uint temp_result;\n  uint shift_value;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  temp_result = (input_value << 1) >> 0x18;\n  shift_value = 0x9e - temp_result;\n  if (temp_result < 0x9f && shift_value != 0) {\n    temp_result = (input_value << 8 | 0x80000000) >> (shift_value & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      temp_result = -temp_result;\n    }\n    return temp_result;\n  }\n  if ((shift_value == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "loop"
            ],
            "imported": false,
            "current_name": "calculate_result_00081cd0"
        },
        "FUN_00081188": {
            "renaming": {
                "FUN_00081188": "infinite_loop_00081188"
            },
            "code": "\nvoid infiniteLoop_00081188(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__halt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081188",
            "calling": [
                "PendSV_Handler",
                "SVC_Handler",
                "__halt"
            ],
            "imported": false,
            "current_name": "infinite_loop_00081188"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "__size": "memory_size",
                "pvVar1": "allocated_memory"
            },
            "code": "\nvoid * allocate_memory_00081df4(size_t memory_size)\n\n{\n  void *allocated_memory;\n  \n  allocated_memory = (void *)_allocate_memory_00081df4_r(*(undefined4 *)PTR__impure_ptr_00081e00,memory_size);\n  return allocated_memory;\n}\n\n",
            "called": [
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "__register_exitproc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "update_modbus_registers_00080410"
            },
            "code": "\nvoid __thiscall Modbus::updateModbusRegisters_00080410(Modbus *this)\n\n{\n  uint16_t uVar1;\n  uint uVar2;\n  byte bVar3;\n  uint uVar4;\n  uint16_t *puVar5;\n  \n  bVar3 = 0;\n  while( true ) {\n    uVar4 = (uint)bVar3;\n    bVar3 = bVar3 + 1;\n    uVar2 = uVar4 * 2 + 3 & 0xff;\n    if (this->au8Buffer[2] >> 1 <= uVar4) break;\n    puVar5 = this->au16regs;\n    uVar1 = makeWord(this->au8Buffer[uVar2],this->au8Buffer[uVar2 + 1]);\n    puVar5[uVar4] = uVar1;\n  }\n  return;\n}\n\n",
            "called": [
                "makeWord"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "poll"
            ],
            "imported": false,
            "current_name": "update_modbus_registers_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_parameters_00080da0",
                "param_1": "inputData",
                "param_2": "operationType",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "code": "\nundefined4 processParameters_00080da0(int inputData,int operationType,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(operationType) {\n  case 1:\n  case 2:\n    (*DAT_00080df8)(inputData,operationType,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(inputData + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(inputData + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(inputData + 0x60) = value;\n    }\n    break;\n  case 3:\n    (*DAT_00080dfc)(inputData,value,flag,DAT_00080dfc,inputData);\n    break;\n  case 4:\n  case 5:\n    (*DAT_00080e00)(inputData,value,operationType == 5,(flag << 0x1d) >> 0x1f,flag & 1,operationType,\n                    value);\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "PIO_SetOutput",
                "PIO_SetPeripheral",
                "PIO_SetInput"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "init",
                "pinMode"
            ],
            "imported": false,
            "current_name": "process_parameters_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "send_modbus_message_00080258",
                "Modbus": "modbusObj",
                "u8length": "bufferLength",
                "uVar1": "crcValue",
                "uVar2": "currentMillis",
                "iVar3": "serialStatus"
            },
            "code": "\nvoid __thiscall modbusObj::sendModbusMessage_00080258(modbusObj *this)\n\n{\n  byte bufferLength;\n  uint16_t crcValue;\n  uint32_t currentMillis;\n  int serialStatus;\n  \n  bufferLength = this->u8BufferSize;\n  crcValue = calcCRC(this,bufferLength);\n  this->au8Buffer[bufferLength] = (uchar)((uint)crcValue >> 8);\n  this->au8Buffer[bufferLength + 1 & 0xff] = (uchar)crcValue;\n  this->u8BufferSize = bufferLength + 2;\n  if (1 < this->u8txenpin) {\n    digitalWrite((uint)this->u8txenpin,1);\n  }\n  if (this->u8serno < 4) {\n    (**(code **)(*(int *)this->port + 4))(this->port,this->au8Buffer,this->u8BufferSize);\n  }\n  if (1 < this->u8txenpin) {\n    digitalWrite((uint)this->u8txenpin,0);\n  }\n  if (this->u8serno < 4) {\n    do {\n      serialStatus = (**(code **)(*(int *)this->port + 0xc))();\n    } while (-1 < serialStatus);\n  }\n  this->u8BufferSize = '\\0';\n  currentMillis = millis();\n  this->u32timeOut = currentMillis + this->u16timeOut;\n  this->u16OutCnt = this->u16OutCnt + 1;\n  return;\n}\n\n",
            "called": [
                "millis",
                "calcCRC",
                "digitalWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "query"
            ],
            "imported": false,
            "current_name": "send_modbus_message_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "resize_string_buffer_00081622",
                "this": "strObj",
                "maxStrLen": "newMaxLen",
                "pcVar1": "tempBuffer"
            },
            "code": "\nuchar __strObjcall String::resizeStringBuffer_00081622(String *strObj,uint newMaxLen)\n\n{\n  char *tempBuffer;\n  \n  tempBuffer = (char *)realloc(strObj->buffer,newMaxLen + 1);\n  if (tempBuffer != (char *)0x0) {\n    strObj->buffer = tempBuffer;\n    strObj->capacity = newMaxLen;\n    tempBuffer = (char *)0x1;\n  }\n  return (uchar)tempBuffer;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "reserve"
            ],
            "imported": false,
            "current_name": "resize_string_buffer_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "memory_copy_00082438",
                "__dest": "destination",
                "__src": "source",
                "__n": "num_bytes",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_dest_ptr",
                "puVar5": "temp_src_ptr",
                "uVar6": "remaining_bytes",
                "puVar7": "dest_end_ptr",
                "uVar8": "unaligned_bytes"
            },
            "code": "\nvoid * memory_copy_00082438(void *destination,void *source,size_t num_bytes)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_dest_ptr;\n  undefined *temp_src_ptr;\n  uint remaining_bytes;\n  undefined *dest_end_ptr;\n  uint unaligned_bytes;\n  \n  if ((source < destination) && (temp_src_ptr = (undefined *)((int)source + num_bytes), destination < temp_src_ptr)) {\n    dest_end_ptr = (undefined *)((int)destination + num_bytes);\n    index = num_bytes - 1;\n    if (num_bytes != 0) {\n      do {\n        temp_src_ptr = temp_src_ptr + -1;\n        index = index + -1;\n        dest_end_ptr = dest_end_ptr + -1;\n        *dest_end_ptr = *temp_src_ptr;\n      } while (index != -1);\n    }\n    return destination;\n  }\n  dest_ptr = (undefined4 *)destination;\n  if (num_bytes < 0x10) {\n    if (num_bytes == 0) {\n      return destination;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    src_ptr = (undefined4 *)source;\n    do {\n      temp_dest_ptr = dest_ptr + 4;\n      *dest_ptr = *src_ptr;\n      dest_ptr[1] = src_ptr[1];\n      dest_ptr[2] = src_ptr[2];\n      dest_ptr[3] = src_ptr[3];\n      dest_ptr = temp_dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (temp_dest_ptr != (undefined4 *)((int)destination + (num_bytes - 0x10 & 0xfffffff0) + 0x10));\n    unaligned_bytes = num_bytes & 0xf;\n    index = ((num_bytes - 0x10 >> 4) + 1) * 0x10;\n    source = (void *)((int)source + index);\n    dest_ptr = (undefined4 *)(index + (int)destination);\n    remaining_bytes = unaligned_bytes;\n    src_ptr = dest_ptr;\n    temp_dest_ptr = (undefined4 *)source;\n    if (3 < unaligned_bytes) {\n      do {\n        remaining_bytes = remaining_bytes - 4;\n        *src_ptr = *temp_dest_ptr;\n        src_ptr = src_ptr + 1;\n        temp_dest_ptr = temp_dest_ptr + 1;\n      } while (3 < remaining_bytes);\n      index = (unaligned_bytes - 4 & 0xfffffffc) + 4;\n      dest_ptr = (undefined4 *)((int)dest_ptr + index);\n      source = (void *)((int)source + index);\n      unaligned_bytes = num_bytes & 3;\n    }\n    num_bytes = unaligned_bytes;\n    if (num_bytes == 0) {\n      return destination;\n    }\n  }\n  src_ptr = dest_ptr;\n  do {\n                    /* WARNING: Load size is inaccurate */\n    temp_dest_ptr = (undefined4 *)((int)src_ptr + 1);\n    *(undefined *)src_ptr = *source;\n    source = (undefined4 *)((int)source + 1);\n    src_ptr = temp_dest_ptr;\n  } while (temp_dest_ptr != (undefined4 *)(num_bytes + (int)dest_ptr));\n  return destination;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "_realloc_r",
                "__sfvwrite_r"
            ],
            "imported": false,
            "current_name": "memory_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "initialize_uart_00081508",
                "UARTClass": "uartObj",
                "dwBaudRate": "baudRate",
                "modeReg": "modeRegister",
                "puVar1": "systemCoreClockPtr",
                "pRVar2": "ringBufferPtr",
                "pUVar3": "uartPtr"
            },
            "code": "\nvoid __thiscall uartObj::initializeUART_00081508(uartObj *this,uint32_t baudRate,uint32_t modeRegister)\n\n{\n  undefined *systemCoreClockPtr;\n  RingBuffer *ringBufferPtr;\n  Uart *uartPtr;\n  \n  pmc_enable_periph_clk(this->_dwId);\n  uartPtr = this->_pUart;\n  uartPtr->UART_PTCR = 0x202;\n  uartPtr->UART_CR = 0xac;\n  systemCoreClockPtr = PTR_SystemCoreClock_00081570;\n  uartPtr->UART_MR = modeRegister;\n  uartPtr->UART_BRGR = *(uint *)systemCoreClockPtr / baudRate >> 4;\n  uartPtr->UART_IDR = 0xffffffff;\n  uartPtr->UART_IER = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)this->_dwIrq >> 5) * 4) =\n       1 << (uint)(byte)(this->_dwIrq & 0x1f);\n  ringBufferPtr = this->_rx_buffer;\n  ringBufferPtr->_iTail = 0;\n  ringBufferPtr->_iHead = 0;\n  ringBufferPtr = this->_tx_buffer;\n  ringBufferPtr->_iTail = 0;\n  ringBufferPtr->_iHead = 0;\n  uartPtr->UART_CR = 0x50;\n  return;\n}\n\n",
            "called": [
                "pmc_enable_periph_clk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [
                "begin",
                "begin"
            ],
            "imported": false,
            "current_name": "initialize_uart_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_buffer_00083808",
                "param_1": "buffer_context",
                "param_2": "buffer_info",
                "uVar1": "temp_var1",
                "iVar2": "buffer_value",
                "uVar3": "uint_flag",
                "uVar4": "ushort_flag"
            },
            "code": "\nundefined4 process_buffer_00083808(undefined4 *buffer_context,int *buffer_info)\n\n{\n  uint temp_var1;\n  int buffer_value;\n  uint uint_flag;\n  ushort ushort_flag;\n  \n  if ((*(int *)PTR__impure_ptr_000838c8 != 0) &&\n     (*(int *)(*(int *)PTR__impure_ptr_000838c8 + 0x38) == 0)) {\n    __sinit();\n  }\n  ushort_flag = *(ushort *)(buffer_info + 3);\n  uint_flag = (uint)ushort_flag;\n  if ((int)(uint_flag << 0x1c) < 0) {\n    buffer_value = buffer_info[4];\n  }\n  else {\n    if (-1 < (int)(uint_flag << 0x1b)) {\n      *buffer_context = 9;\n      *(ushort *)(buffer_info + 3) = ushort_flag | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(uint_flag << 0x1d) < 0) {\n      if ((int *)buffer_info[0xc] != (int *)0x0) {\n        if ((int *)buffer_info[0xc] != buffer_info + 0x10) {\n          _free_r(buffer_context);\n          ushort_flag = *(ushort *)(buffer_info + 3);\n        }\n        buffer_info[0xc] = 0;\n      }\n      buffer_value = buffer_info[4];\n      ushort_flag = ushort_flag & 0xffdb;\n      *buffer_info = buffer_value;\n      buffer_info[1] = 0;\n    }\n    else {\n      buffer_value = buffer_info[4];\n    }\n    *(ushort *)(buffer_info + 3) = ushort_flag | 8;\n    uint_flag = (uint)(ushort_flag | 8);\n  }\n  if ((buffer_value == 0) && ((uint_flag & 0x280) != 0x200)) {\n    __smakebuf_r(buffer_context,buffer_info);\n    uint_flag = (uint)*(ushort *)(buffer_info + 3);\n    buffer_value = buffer_info[4];\n  }\n  temp_var1 = uint_flag & 1;\n  if (temp_var1 == 0) {\n    if (-1 < (int)(uint_flag << 0x1e)) {\n      temp_var1 = buffer_info[5];\n    }\n    buffer_info[2] = temp_var1;\n  }\n  else {\n    buffer_info[6] = -buffer_info[5];\n    buffer_info[2] = 0;\n  }\n  if ((buffer_value == 0) && ((int)((uint)*(ushort *)(buffer_info + 3) << 0x18) < 0)) {\n    *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "called": [
                "_free_r",
                "__sinit",
                "__smakebuf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r",
                "__swbuf_r"
            ],
            "imported": false,
            "current_name": "process_buffer_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "calculate_quotient_remainder_000847e0",
                "param_1": "numerator_high",
                "param_2": "numerator_low",
                "param_3": "denominator_high",
                "param_4": "denominator_low",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "temp_var8",
                "uVar9": "sign_result",
                "uVar10": "quotient_low",
                "uVar11": "temp_var11",
                "uVar12": "temp_var12",
                "bVar13": "carry_flag",
                "lVar1": "long_product"
            },
            "code": "\nundefined8 calculate_quotient_remainder_000847e0(uint numerator_high,uint numerator_low,uint denominator_high,uint denominator_low)\n\n{\n  longlong long_product;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint sign_result;\n  uint quotient_low;\n  uint temp_var11;\n  uint temp_var12;\n  bool carry_flag;\n  \n  if ((int)numerator_low < 0) {\n    carry_flag = numerator_high != 0;\n    numerator_high = -numerator_high;\n    numerator_low = -numerator_low - (uint)carry_flag;\n    sign_result = 0xffffffff;\n  }\n  else {\n    sign_result = 0;\n  }\n  if ((int)denominator_low < 0) {\n    sign_result = ~sign_result;\n    carry_flag = denominator_high != 0;\n    denominator_high = -denominator_high;\n    denominator_low = -denominator_low - (uint)carry_flag;\n  }\n  if (denominator_low == 0) {\n    if (numerator_low < denominator_high) {\n      temp_var5 = count_leading_zeroes(denominator_high);\n      if (temp_var5 != 0) {\n        temp_var2 = numerator_high >> (0x20 - temp_var5 & 0xff);\n        denominator_high = denominator_high << (temp_var5 & 0xff);\n        numerator_high = numerator_high << (temp_var5 & 0xff);\n        numerator_low = numerator_low << (temp_var5 & 0xff) | temp_var2;\n      }\n      temp_var2 = denominator_high >> 0x10;\n      temp_var3 = numerator_low / temp_var2;\n      temp_var6 = (denominator_high & 0xffff) * temp_var3;\n      quotient_low = numerator_high >> 0x10 | (numerator_low - temp_var2 * temp_var3) * 0x10000;\n      temp_var5 = temp_var3;\n      if (quotient_low <= temp_var6 && temp_var6 - quotient_low != 0) {\n        carry_flag = CARRY4(quotient_low,denominator_high);\n        quotient_low = quotient_low + denominator_high;\n        temp_var5 = temp_var3 - 1;\n        if ((carry_flag == false) && (quotient_low <= temp_var6 && temp_var6 - quotient_low != 0)) {\n          temp_var5 = temp_var3 - 2;\n          quotient_low = quotient_low + denominator_high;\n        }\n      }\n      temp_var7 = (quotient_low - temp_var6) / temp_var2;\n      temp_var3 = (denominator_high & 0xffff) * temp_var7;\n      temp_var6 = numerator_high & 0xffff | ((quotient_low - temp_var6) - temp_var2 * temp_var7) * 0x10000;\n      temp_var2 = temp_var7;\n      if (temp_var6 <= temp_var3 && temp_var3 - temp_var6 != 0) {\n        temp_var2 = temp_var7 - 1;\n        if ((CARRY4(temp_var6,denominator_high) == false) &&\n           (temp_var6 + denominator_high <= temp_var3 && temp_var3 - (temp_var6 + denominator_high) != 0)) {\n          temp_var2 = temp_var7 - 2;\n        }\n      }\n      temp_var3 = temp_var2 | temp_var5 << 0x10;\n      quotient_low = 0;\n    }\n    else {\n      if (denominator_high == 0) {\n        denominator_high = 1 / 0;\n      }\n      temp_var5 = count_leading_zeroes(denominator_high);\n      if (temp_var5 == 0) {\n        numerator_low = numerator_low - denominator_high;\n        temp_var2 = denominator_high >> 0x10;\n        temp_var12 = denominator_high & 0xffff;\n        quotient_low = 1;\n      }\n      else {\n        denominator_high = denominator_high << (temp_var5 & 0xff);\n        temp_var3 = numerator_low >> (0x20 - temp_var5 & 0xff);\n        temp_var2 = denominator_high >> 0x10;\n        quotient_low = temp_var3 / temp_var2;\n        temp_var12 = denominator_high & 0xffff;\n        temp_var6 = temp_var12 * quotient_low;\n        temp_var7 = numerator_high >> (0x20 - temp_var5 & 0xff) | numerator_low << (temp_var5 & 0xff);\n        temp_var3 = temp_var7 >> 0x10 | (temp_var3 - temp_var2 * quotient_low) * 0x10000;\n        numerator_high = numerator_high << (temp_var5 & 0xff);\n        temp_var5 = quotient_low;\n        if (temp_var3 <= temp_var6 && temp_var6 - temp_var3 != 0) {\n          carry_flag = CARRY4(temp_var3,denominator_high);\n          temp_var3 = temp_var3 + denominator_high;\n          temp_var5 = quotient_low - 1;\n          if ((carry_flag == false) && (temp_var3 <= temp_var6 && temp_var6 - temp_var3 != 0)) {\n            temp_var5 = quotient_low - 2;\n            temp_var3 = temp_var3 + denominator_high;\n          }\n        }\n        temp_var8 = (temp_var3 - temp_var6) / temp_var2;\n        temp_var4 = temp_var12 * temp_var8;\n        numerator_low = temp_var7 & 0xffff | ((temp_var3 - temp_var6) - temp_var2 * temp_var8) * 0x10000;\n        quotient_low = temp_var8;\n        if (numerator_low <= temp_var4 && temp_var4 - numerator_low != 0) {\n          carry_flag = CARRY4(numerator_low,denominator_high);\n          numerator_low = numerator_low + denominator_high;\n          quotient_low = temp_var8 - 1;\n          if ((carry_flag == false) && (numerator_low <= temp_var4 && temp_var4 - numerator_low != 0)) {\n            quotient_low = temp_var8 - 2;\n            numerator_low = numerator_low + denominator_high;\n          }\n        }\n        numerator_low = numerator_low - temp_var4;\n        quotient_low = quotient_low | temp_var5 << 0x10;\n      }\n      temp_var3 = numerator_low / temp_var2;\n      temp_var6 = temp_var12 * temp_var3;\n      temp_var7 = numerator_high >> 0x10 | (numerator_low - temp_var2 * temp_var3) * 0x10000;\n      temp_var5 = temp_var3;\n      if (temp_var7 <= temp_var6 && temp_var6 - temp_var7 != 0) {\n        carry_flag = CARRY4(temp_var7,denominator_high);\n        temp_var7 = temp_var7 + denominator_high;\n        temp_var5 = temp_var3 - 1;\n        if ((carry_flag == false) && (temp_var7 <= temp_var6 && temp_var6 - temp_var7 != 0)) {\n          temp_var5 = temp_var3 - 2;\n          temp_var7 = temp_var7 + denominator_high;\n        }\n      }\n      temp_var4 = (temp_var7 - temp_var6) / temp_var2;\n      temp_var12 = temp_var12 * temp_var4;\n      temp_var3 = numerator_high & 0xffff | ((temp_var7 - temp_var6) - temp_var2 * temp_var4) * 0x10000;\n      temp_var2 = temp_var4;\n      if (temp_var3 <= temp_var12 && temp_var12 - temp_var3 != 0) {\n        temp_var2 = temp_var4 - 1;\n        if ((CARRY4(temp_var3,denominator_high) == false) &&\n           (temp_var3 + denominator_high <= temp_var12 && temp_var12 - (temp_var3 + denominator_high) != 0)) {\n          temp_var2 = temp_var4 - 2;\n        }\n      }\n      temp_var3 = temp_var2 | temp_var5 << 0x10;\n    }\n  }\n  else if (numerator_low < denominator_low) {\n    temp_var3 = 0;\n    quotient_low = 0;\n  }\n  else {\n    temp_var5 = count_leading_zeroes(denominator_low);\n    if (temp_var5 == 0) {\n      if ((denominator_low < numerator_low) || (temp_var3 = temp_var5, quotient_low = temp_var5, denominator_high <= numerator_high)) {\n        temp_var3 = 1;\n        quotient_low = 0;\n      }\n    }\n    else {\n      temp_var2 = 0x20 - temp_var5;\n      temp_var6 = numerator_low >> (temp_var2 & 0xff);\n      temp_var4 = denominator_high >> (temp_var2 & 0xff) | denominator_low << (temp_var5 & 0xff);\n      temp_var7 = temp_var4 >> 0x10;\n      temp_var3 = temp_var6 / temp_var7;\n      temp_var12 = (temp_var4 & 0xffff) * temp_var3;\n      quotient_low = numerator_low << (temp_var5 & 0xff) | numerator_high >> (temp_var2 & 0xff);\n      temp_var6 = quotient_low >> 0x10 | (temp_var6 - temp_var7 * temp_var3) * 0x10000;\n      temp_var2 = temp_var3;\n      if (temp_var6 <= temp_var12 && temp_var12 - temp_var6 != 0) {\n        carry_flag = CARRY4(temp_var6,temp_var4);\n        temp_var6 = temp_var6 + temp_var4;\n        temp_var2 = temp_var3 - 1;\n        if ((carry_flag == false) && (temp_var6 <= temp_var12 && temp_var12 - temp_var6 != 0)) {\n          temp_var2 = temp_var3 - 2;\n          temp_var6 = temp_var6 + temp_var4;\n        }\n      }\n      temp_var8 = (temp_var6 - temp_var12) / temp_var7;\n      temp_var11 = (temp_var4 & 0xffff) * temp_var8;\n      temp_var6 = quotient_low & 0xffff | ((temp_var6 - temp_var12) - temp_var7 * temp_var8) * 0x10000;\n      temp_var3 = temp_var8;\n      if (temp_var6 <= temp_var11 && temp_var11 - temp_var6 != 0) {\n        carry_flag = CARRY4(temp_var6,temp_var4);\n        temp_var6 = temp_var6 + temp_var4;\n        temp_var3 = temp_var8 - 1;\n        if ((carry_flag == false) && (temp_var6 <= temp_var11 && temp_var11 - temp_var6 != 0)) {\n          temp_var3 = temp_var8 - 2;\n          temp_var6 = temp_var6 + temp_var4;\n        }\n      }\n      temp_var3 = temp_var3 | temp_var2 << 0x10;\n      long_product = (ulonglong)temp_var3 * (ulonglong)(denominator_high << (temp_var5 & 0xff));\n      temp_var2 = (uint)((ulonglong)long_product >> 0x20);\n      if ((temp_var6 - temp_var11 < temp_var2) ||\n         ((quotient_low = 0, temp_var6 - temp_var11 == temp_var2 && (numerator_high << (temp_var5 & 0xff) < (uint)long_product)))) {\n        temp_var3 = temp_var3 - 1;\n        quotient_low = 0;\n      }\n    }\n  }\n  if (sign_result != 0) {\n    carry_flag = temp_var3 != 0;\n    temp_var3 = -temp_var3;\n    quotient_low = -quotient_low - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_low,temp_var3);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847e0",
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "imported": false,
            "current_name": "calculate_quotient_remainder_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_at_position_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "code": "\nvoid set_bit_at_position_0008105c(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "pinMode"
            ],
            "imported": false,
            "current_name": "set_bit_at_position_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "convert_encoding_0008456c",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "input_encoding",
                "param_4": "error_code",
                "uVar1": "locale_charset",
                "iVar2": "conversion_result",
                "pcVar3": "conversion_function",
                "auStack_24": "temp_buffer"
            },
            "code": "\nvoid convert_encoding_0008456c(undefined4 *output_buffer,int input_value,undefined4 input_encoding,undefined4 *error_code)\n\n{\n  undefined4 locale_charset;\n  int conversion_result;\n  code *conversion_function;\n  undefined temp_buffer [12];\n  \n  if (input_value == 0) {\n    conversion_function = *(code **)PTR___wctomb_000845b8;\n    locale_charset = __locale_charset();\n    conversion_result = (*conversion_function)(output_buffer,temp_buffer,0,locale_charset,error_code);\n  }\n  else {\n    conversion_function = *(code **)PTR___wctomb_000845b8;\n    locale_charset = __locale_charset();\n    conversion_result = (*conversion_function)(output_buffer,input_value,input_encoding,locale_charset,error_code);\n  }\n  if (conversion_result == -1) {\n    *error_code = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "_fputwc_r"
            ],
            "imported": false,
            "current_name": "convert_encoding_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "serialEventRun"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_file_mode_000811b4",
                "file_UNUSED": "file_descriptor",
                "st": "file_stat"
            },
            "code": "\nint set_file_mode_000811b4(int file_descriptor,file_statat *file_stat)\n\n{\n  file_stat->file_stat_mode = 0x2000;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "_fstat_r"
            ],
            "imported": false,
            "current_name": "set_file_mode_000811b4"
        },
        "FUN_000813f6": {
            "renaming": {
                "FUN_000813f6": "get_buffer_data_000813f6",
                "UARTClass": "UARTDevice",
                "this": "uart_device",
                "uVar1": "buffer_data",
                "pRVar2": "ring_buffer"
            },
            "code": "\nint __uart_devicecall UARTDevice::getBufferData_000813f6(UARTDevice *uart_device)\n\n{\n  uint buffer_data;\n  RingBuffer *ring_buffer;\n  \n  ring_buffer = uart_device->_rx_buffer;\n  if (ring_buffer->_iHead == ring_buffer->_iTail) {\n    buffer_data = 0xffffffff;\n  }\n  else {\n    buffer_data = (uint)ring_buffer->_aucBuffer[ring_buffer->_iTail];\n  }\n  return buffer_data;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813f6",
            "calling": [],
            "imported": false,
            "current_name": "get_buffer_data_000813f6"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "disable_watchdog_timer_000816d4",
                "WDT_Disable": "watchdog_timer_disable"
            },
            "code": "\nvoid disable_watchdog_timer_000816d4(void)\n\n{\n  watchdog_timer_disable(DAT_000816dc);\n  return;\n}\n\n",
            "called": [
                "WDT_Disable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "disable_watchdog_timer_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "context",
                "param_2": "data_buffer",
                "param_3": "data_length",
                "ppvVar1": "buffer_ptr1",
                "iVar2": "result",
                "pvVar3": "temp_var1",
                "pvVar4": "temp_var2",
                "uVar5": "ushort_value",
                "uVar6": "uint_value",
                "iVar7": "length_remaining",
                "ppvVar8": "buffer_ptr2",
                "pvVar9": "buffer_position",
                "pvVar10": "buffer_chunk",
                "pvVar11": "chunk_size",
                "pvVar12": "chunk_position",
                "__n": "bytes_to_move",
                "__n_00": "bytes_to_copy",
                "local_2c": "local_flag"
            },
            "code": "\nundefined4 process_data_00083f34(undefined4 *context,void **data_buffer,undefined4 *data_length)\n\n{\n  void **buffer_ptr1;\n  int result;\n  void *temp_var1;\n  void *temp_var2;\n  ushort ushort_value;\n  uint uint_value;\n  int length_remaining;\n  void **buffer_ptr2;\n  void *buffer_position;\n  void *buffer_chunk;\n  void *chunk_size;\n  void *chunk_position;\n  void *bytes_to_move;\n  size_t bytes_to_copy;\n  void *local_flag;\n  \n  if (data_length[2] != 0) {\n    ushort_value = *(ushort *)(data_buffer + 3);\n    uint_value = (uint)ushort_value;\n    if (((int)(uint_value << 0x1c) < 0) && (data_buffer[4] != (void *)0x0)) {\n      buffer_ptr2 = (void **)*data_length;\n      temp_var1 = DAT_00084244;\n    }\n    else {\n      result = __swsetup_r(context,data_buffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      ushort_value = *(ushort *)(data_buffer + 3);\n      uint_value = (uint)ushort_value;\n      buffer_ptr2 = (void **)*data_length;\n      temp_var1 = DAT_00084244;\n    }\n    DAT_00084244 = temp_var1;\n    if ((ushort_value & 2) == 0) {\n      temp_var1 = (void *)(uint_value & 2);\n      chunk_size = (void *)(uint_value & 1);\n      buffer_position = temp_var1;\n      buffer_chunk = temp_var1;\n      local_flag = temp_var1;\n      chunk_position = chunk_size;\n      if (chunk_size == (void *)0x0) {\n        while( true ) {\n          while (chunk_size == (void *)0x0) {\n            chunk_position = *buffer_ptr2;\n            buffer_ptr1 = buffer_ptr2 + 1;\n            buffer_ptr2 = buffer_ptr2 + 2;\n            chunk_size = *buffer_ptr1;\n          }\n          temp_var1 = data_buffer[2];\n          if ((int)(uint_value << 0x16) < 0) {\n            if (chunk_size < temp_var1) {\n              buffer_position = *data_buffer;\n              temp_var1 = chunk_size;\n            }\n            else if ((uint_value & 0x480) == 0) {\n              buffer_position = *data_buffer;\n            }\n            else {\n              bytes_to_copy = (int)*data_buffer - (int)data_buffer[4];\n              temp_var1 = (void *)(bytes_to_copy + 1 + (int)chunk_size);\n              buffer_position = (void *)(((int)data_buffer[5] * 3) / 2);\n              if (temp_var1 <= buffer_position) {\n                temp_var1 = buffer_position;\n              }\n              if ((int)(uint_value << 0x15) < 0) {\n                buffer_chunk = (void *)_malloc_r(context,temp_var1);\n                if (buffer_chunk == (void *)0x0) {\n                  *context = 0xc;\n                  ushort_value = *(ushort *)(data_buffer + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(buffer_chunk,data_buffer[4],bytes_to_copy);\n                *(ushort *)(data_buffer + 3) = *(ushort *)(data_buffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                buffer_chunk = (void *)_realloc_r(context);\n                if (buffer_chunk == (void *)0x0) {\n                  _free_r(context,data_buffer[4]);\n                  ushort_value = *(ushort *)(data_buffer + 3) & 0xff7f;\n                  *context = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              buffer_position = (void *)((int)buffer_chunk + bytes_to_copy);\n              data_buffer[4] = buffer_chunk;\n              data_buffer[5] = temp_var1;\n              *data_buffer = buffer_position;\n              data_buffer[2] = (void *)((int)temp_var1 - bytes_to_copy);\n              temp_var1 = chunk_size;\n            }\n            memmove(buffer_position,chunk_position,(size_t)temp_var1);\n            data_buffer[2] = (void *)((int)data_buffer[2] - (int)temp_var1);\n            *data_buffer = (void *)((int)*data_buffer + (int)temp_var1);\n            temp_var1 = chunk_size;\n          }\n          else if ((data_buffer[4] < *data_buffer) || (buffer_position = data_buffer[5], chunk_size < buffer_position)) {\n            if (chunk_size < temp_var1) {\n              temp_var1 = chunk_size;\n            }\n            memmove(*data_buffer,chunk_position,(size_t)temp_var1);\n            buffer_position = data_buffer[2];\n            data_buffer[2] = (void *)((int)buffer_position - (int)temp_var1);\n            *data_buffer = (void *)((int)*data_buffer + (int)temp_var1);\n            if (((void *)((int)buffer_position - (int)temp_var1) == (void *)0x0) &&\n               (result = _fflush_r(context,data_buffer), result != 0)) goto LAB_0008402e;\n          }\n          else {\n            temp_var1 = (void *)0x7fffffff;\n            if (chunk_size < (void *)0x7fffffff) {\n              temp_var1 = chunk_size;\n            }\n            temp_var1 = (void *)(*(code *)data_buffer[9])\n                                       (context,data_buffer[7],chunk_position,\n                                        ((uint)temp_var1 / (uint)buffer_position) * (int)buffer_position);\n            if ((int)temp_var1 < 1) goto LAB_0008402e;\n          }\n          result = data_length[2];\n          chunk_size = (void *)((int)chunk_size - (int)temp_var1);\n          data_length[2] = result - (int)temp_var1;\n          if (result - (int)temp_var1 == 0) break;\n          uint_value = (uint)*(ushort *)(data_buffer + 3);\n          chunk_position = (void *)((int)chunk_position + (int)temp_var1);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == (void *)0x0) {\n            buffer_chunk = *buffer_ptr2;\n            temp_var1 = buffer_ptr2[1];\n            local_flag = (void *)0x0;\n            buffer_ptr2 = buffer_ptr2 + 2;\n          }\n          if (local_flag == (void *)0x0) {\n            buffer_position = memchr(buffer_chunk,10,(size_t)temp_var1);\n            if (buffer_position == (void *)0x0) {\n              buffer_position = (void *)((int)temp_var1 + 1);\n              local_flag = (void *)0x1;\n            }\n            else {\n              buffer_position = (void *)((int)buffer_position + (1 - (int)buffer_chunk));\n              local_flag = (void *)0x1;\n            }\n          }\n          chunk_position = *data_buffer;\n          chunk_size = buffer_position;\n          if (temp_var1 <= buffer_position) {\n            chunk_size = temp_var1;\n          }\n          temp_var2 = data_buffer[5];\n          if ((data_buffer[4] < chunk_position) &&\n             (bytes_to_move = (void *)((int)data_buffer[2] + (int)temp_var2), (int)bytes_to_move < (int)chunk_size)) {\n            memmove(chunk_position,buffer_chunk,(size_t)bytes_to_move);\n            *data_buffer = (void *)((int)*data_buffer + (int)bytes_to_move);\n            result = _fflush_r(context,data_buffer);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)chunk_size < (int)temp_var2) {\n            memmove(chunk_position,buffer_chunk,(size_t)chunk_size);\n            data_buffer[2] = (void *)((int)data_buffer[2] - (int)chunk_size);\n            *data_buffer = (void *)((int)chunk_size + (int)*data_buffer);\n            bytes_to_move = chunk_size;\n          }\n          else {\n            bytes_to_move = (void *)(*(code *)data_buffer[9])(context,data_buffer[7],buffer_chunk,temp_var2);\n            if ((int)bytes_to_move < 1) goto LAB_0008402e;\n          }\n          buffer_position = (void *)((int)buffer_position - (int)bytes_to_move);\n          if ((buffer_position == (void *)0x0) &&\n             (result = _fflush_r(context,data_buffer), local_flag = buffer_position, result != 0)) goto LAB_0008402e;\n          result = data_length[2];\n          buffer_chunk = (void *)((int)buffer_chunk + (int)bytes_to_move);\n          temp_var1 = (void *)((int)temp_var1 - (int)bytes_to_move);\n          data_length[2] = result - (int)bytes_to_move;\n        } while (result - (int)bytes_to_move != 0);\n      }\n    }\n    else {\n      buffer_chunk = (void *)0x0;\n      buffer_position = (void *)0x0;\n      do {\n        while( true ) {\n          chunk_size = buffer_position;\n          if (temp_var1 <= buffer_position) {\n            chunk_size = temp_var1;\n          }\n          if (buffer_position != (void *)0x0) break;\n          buffer_chunk = *buffer_ptr2;\n          buffer_position = buffer_ptr2[1];\n          buffer_ptr2 = buffer_ptr2 + 2;\n        }\n        result = (*(code *)data_buffer[9])(context,data_buffer[7],buffer_chunk,chunk_size);\n        if (result < 1) {\nLAB_0008402e:\n          ushort_value = *(ushort *)(data_buffer + 3);\nLAB_00084030:\n          *(ushort *)(data_buffer + 3) = ushort_value | 0x40;\n          return 0xffffffff;\n        }\n        length_remaining = data_length[2];\n        buffer_chunk = (void *)((int)buffer_chunk + result);\n        buffer_position = (void *)((int)buffer_position - result);\n        data_length[2] = length_remaining - result;\n      } while (length_remaining - result != 0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_free_r",
                "_malloc_r",
                "_fflush_r",
                "_realloc_r",
                "memcpy",
                "__swsetup_r",
                "memmove",
                "memchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083f34",
            "calling": [
                "__sprint_r.part.0"
            ],
            "imported": false,
            "current_name": "process_data_00083f34"
        },
        "FUN_00081074": {
            "renaming": {
                "FUN_00081074": "execute_callback_00081074"
            },
            "code": "\nvoid executeCallback_00081074(void)\n\n{\n  if (*(code **)PTR_gpf_isr_00081080 != (code *)0x0) {\n    (**(code **)PTR_gpf_isr_00081080)();\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081074",
            "calling": [],
            "imported": false,
            "current_name": "execute_callback_00081074"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "update_array_values_00080d7a",
                "param_1": "arrayPtr",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "code": "\nvoid updateArrayValues_00080d7a(undefined4 *arrayPtr,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  arrayPtr[0x11] = value;\n  if (condition3 == 0) {\n    arrayPtr[0x18] = value;\n  }\n  else {\n    arrayPtr[0x19] = value;\n  }\n  if (condition2 == 0) {\n    arrayPtr[0x15] = value;\n  }\n  else {\n    arrayPtr[0x14] = value;\n  }\n  if (condition1 == 0) {\n    arrayPtr[0xd] = value;\n  }\n  else {\n    arrayPtr[0xc] = value;\n  }\n  arrayPtr[4] = value;\n  *arrayPtr = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "imported": false,
            "current_name": "update_array_values_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_system_00080e9c",
                "puVar1": "configArray",
                "iVar2": "systemConfig"
            },
            "code": "\nvoid initializeSystem_00080e9c(void)\n\n{\n  undefined4 *configArray;\n  int systemConfig;\n  \n  configArray = DAT_00080f08;\n  *DAT_00080f08 = 0x400;\n  configArray[0x80] = 0x400;\n  systemConfig = DAT_00080f0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    do {\n    } while (-1 < *(int *)(systemConfig + 0x68) << 0x1f);\n  }\n  *(undefined4 *)(systemConfig + 0x20) = DAT_00080f10;\n  do {\n  } while (-1 < *(int *)(systemConfig + 0x68) << 0xf);\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  do {\n  } while (-1 < *(int *)(systemConfig + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  do {\n  } while (-1 < *(int *)(systemConfig + 0x68) << 0x1e);\n  *(undefined4 *)(DAT_00080f0c + 0x30) = 0x11;\n  do {\n  } while (-1 < *(int *)(systemConfig + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x30) = 0x12;\n  do {\n  } while (-1 < *(int *)(systemConfig + 0x68) << 0x1c);\n  *(undefined4 *)PTR_SystemCoreClock_00080f20 = DAT_00080f1c;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "initialize_system_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "update_file_position_and_write_00084464",
                "param_1": "fileDescriptor",
                "param_2": "statusStruct",
                "param_3": "buffer",
                "param_4": "bytesToWrite",
                "uVar1": "statusFlag"
            },
            "code": "\nvoid updateFilePositionAndWrite_00084464(undefined4 fileDescriptor,int statusStruct,undefined4 buffer,undefined4 bytesToWrite)\n\n{\n  ushort statusFlag;\n  \n  statusFlag = *(ushort *)(statusStruct + 0xc);\n  if ((int)((uint)statusFlag << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(statusStruct + 0xe),0,2);\n    statusFlag = *(ushort *)(statusStruct + 0xc);\n  }\n  *(ushort *)(statusStruct + 0xc) = statusFlag & 0xefff;\n  _write_r(fileDescriptor,(int)*(short *)(statusStruct + 0xe),buffer,bytesToWrite);\n  return;\n}\n\n",
            "called": [
                "_lseek_r",
                "_write_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "update_file_position_and_write_00084464"
        },
        "FUN_000847dc": {
            "renaming": {
                "FUN_000847dc": "do_nothing_000847dc"
            },
            "code": "\nvoid do_nothing_000847dc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847dc",
            "calling": [
                "__aeabi_uldivmod"
            ],
            "imported": false,
            "current_name": "do_nothing_000847dc"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_negative_one_000811ae",
                "file_UNUSED": "unused_parameter"
            },
            "code": "\nint return_negative_one_000811ae(int unused_parameter)\n\n{\n  return -1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [
                "_close_r"
            ],
            "imported": false,
            "current_name": "return_negative_one_000811ae"
        },
        "FUN_00080148": {
            "renaming": {
                "FUN_00080148": "trigger_software_interrupt_00080148"
            },
            "code": "\nuint32_t trigger_software_interrupt_00080148(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080148",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_00080148"
        },
        "FUN_00080ad8": {
            "renaming": {
                "FUN_00080ad8": "handle_serial_interrupt_00080ad8",
                "UARTClass": "SerialDevice",
                "IrqHandler": "handleInterrupt"
            },
            "code": "\nvoid handleSerialInterrupt_00080ad8(void)\n\n{\n  SerialDevice::handleInterrupt((SerialDevice *)PTR_Serial3_00080ae0);\n  return;\n}\n\n",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ad8",
            "calling": [],
            "imported": false,
            "current_name": "handle_serial_interrupt_00080ad8"
        },
        "FUN_00084624": {
            "renaming": {
                "FUN_00084624": "process_stream_00084624",
                "param_1": "context",
                "param_2": "stream",
                "uVar1": "result",
                "iVar2": "callback_result"
            },
            "code": "\nundefined4 process_stream_00084624(int context,int stream)\n\n{\n  undefined4 result;\n  int callback_result;\n  \n  if (stream != 0) {\n    if ((context != 0) && (*(int *)(context + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(stream + 0xc) != 0) {\n      result = _fflush_r(context,stream);\n      if ((*(code **)(stream + 0x2c) != (code *)0x0) &&\n         (callback_result = (**(code **)(stream + 0x2c))(context,*(undefined4 *)(stream + 0x1c)), callback_result < 0)\n         ) {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(stream + 0xc) << 0x18) < 0) {\n        _free_r(context,*(undefined4 *)(stream + 0x10));\n      }\n      if (*(int *)(stream + 0x30) != 0) {\n        if (*(int *)(stream + 0x30) != stream + 0x40) {\n          _free_r(context);\n        }\n        *(undefined4 *)(stream + 0x30) = 0;\n      }\n      if (*(int *)(stream + 0x44) != 0) {\n        _free_r(context);\n        *(undefined4 *)(stream + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(stream + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "_free_r",
                "_fflush_r",
                "__sinit",
                "__sfp_lock_release",
                "__sfp_lock_acquire"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084624",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "process_stream_00084624"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "allocate_memory_0008118c",
                "incr": "size",
                "puVar1": "heap_ptr",
                "pcVar2": "current_address"
            },
            "code": "\ncaddr_t allocate_memory_0008118c(int size)\n\n{\n  undefined *heap_ptr;\n  caddr_t current_address;\n  \n  heap_ptr = PTR_heap_000811a0;\n  if (*(int *)PTR_heap_000811a0 == 0) {\n    *(undefined **)PTR_heap_000811a0 = PTR__ebss_000811a4;\n  }\n  current_address = *(caddr_t *)heap_ptr;\n  *(caddr_t *)heap_ptr = current_address + size;\n  return current_address;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "calculate_string_length_00082a50",
                "__s": "input_string",
                "sVar1": "str_length",
                "puVar2": "aligned_ptr",
                "uVar3": "current_word",
                "bVar4": "is_null_byte"
            },
            "code": "\nsize_t calculate_string_length_00082a50(char *input_string)\n\n{\n  size_t str_length;\n  uint *aligned_ptr;\n  uint current_word;\n  bool is_null_byte;\n  \n  aligned_ptr = (uint *)((uint)input_string & 0xfffffffc);\n  str_length = -((uint)input_string & 3);\n  current_word = *aligned_ptr;\n  if (((uint)input_string & 3) != 0) {\n    current_word = current_word | 0xffffffffU >> ((str_length + 4 & 0x1f) << 3);\n  }\n  while (aligned_ptr = aligned_ptr + 1, (current_word + 0xfefefeff & ~current_word & 0x80808080) == 0) {\n    str_length = str_length + 4;\n    current_word = *aligned_ptr;\n  }\n  is_null_byte = (current_word & 0xff) == 0;\n  if (!is_null_byte) {\n    str_length = str_length + 1;\n    is_null_byte = (current_word & 0xff00) == 0;\n  }\n  if (!is_null_byte) {\n    str_length = str_length + 1;\n    is_null_byte = (current_word & 0xff0000) == 0;\n  }\n  if (!is_null_byte) {\n    str_length = str_length + 1;\n  }\n  return str_length;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "imported": false,
            "current_name": "calculate_string_length_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_memory_value_0008106e",
                "param_1": "memory_address",
                "param_2": "value_to_set"
            },
            "code": "\nvoid set_memory_value_0008106e(int memory_address,undefined4 value_to_set)\n\n{\n  *(undefined4 *)(memory_address + 0x28) = value_to_set;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "init"
            ],
            "imported": false,
            "current_name": "set_memory_value_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "do_nothing_function_000811c2",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "dir_UNUSED": "dir_unused"
            },
            "code": "\nint do_nothing_function_000811c2(int file_unused,int ptr_unused,int dir_unused)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "_lseek_r"
            ],
            "imported": false,
            "current_name": "do_nothing_function_000811c2"
        },
        "FUN_000816e0": {
            "renaming": {
                "FUN_000816e0": "print_buffer_000816e0",
                "this": "instance",
                "pPVar1": "currentInstance",
                "sVar2": "bytesWritten"
            },
            "code": "\n/* WARNING: Heritage AFTER dead removal. Example location: r0 : 0x000816f6 */\n/* WARNING: Restarted to delay deadcode elimination for space: register */\n/* WARNING: Exceeded maximum restarts with more pending */\n\nsize_t __instancecall Print::printBuffer_000816e0(Print *instance,uint8_t *buffer,size_t size)\n\n{\n  Print *currentInstance;\n  size_t bytesWritten;\n  \n  bytesWritten = 0;\n  currentInstance = instance;\n  while ((bytesWritten != size &&\n         (currentInstance = (Print *)(**instance->_vptr_Print)(currentInstance,(uint)buffer[bytesWritten]),\n         currentInstance != (Print *)0x0))) {\n    bytesWritten = bytesWritten + 1;\n  }\n  return bytesWritten;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816e0",
            "calling": [],
            "imported": false,
            "current_name": "print_buffer_000816e0"
        },
        "FUN_00080acc": {
            "renaming": {
                "FUN_00080acc": "handle_uart_interrupt_00080acc",
                "UARTClass": "SerialDevice",
                "IrqHandler": "handleInterrupt"
            },
            "code": "\nvoid handleUARTInterrupt_00080acc(void)\n\n{\n  SerialDevice::handleInterrupt((SerialDevice *)PTR_Serial2_00080ad4);\n  return;\n}\n\n",
            "called": [
                "IrqHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080acc",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_00080acc"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "do_nothing_000811c6",
                "file_UNUSED": "file_unused",
                "ptr_UNUSED": "ptr_unused",
                "len_UNUSED": "len_unused"
            },
            "code": "\nint do_nothing_000811c6(int file_unused,char *ptr_unused,int len_unused)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "_read_r"
            ],
            "imported": false,
            "current_name": "do_nothing_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "optimize_memory_allocation_00083d00",
                "param_1": "allocator_handle",
                "param_2": "requested_size",
                "puVar1": "malloc_av_ptr",
                "puVar2": "current_mallinfo_ptr",
                "iVar3": "sbrk_result",
                "uVar4": "aligned_size",
                "iVar5": "size_difference"
            },
            "code": "\nundefined4 optimize_memory_allocation_00083d00(undefined4 allocator_handle,int requested_size)\n\n{\n  undefined *malloc_av_ptr;\n  undefined *current_mallinfo_ptr;\n  int sbrk_result;\n  uint aligned_size;\n  int size_difference;\n  \n  malloc_av_ptr = PTR___malloc_av__00083d90;\n  __malloc_lock();\n  aligned_size = *(uint *)(*(int *)(malloc_av_ptr + 8) + 4) & 0xfffffffc;\n  size_difference = ((aligned_size - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < size_difference) {\n    sbrk_result = _sbrk_r(allocator_handle,0);\n    if (sbrk_result == *(int *)(malloc_av_ptr + 8) + aligned_size) {\n      sbrk_result = _sbrk_r(allocator_handle,-size_difference);\n      current_mallinfo_ptr = PTR___malloc_current_mallinfo_00083d94;\n      if (sbrk_result != -1) {\n        sbrk_result = *(int *)PTR___malloc_current_mallinfo_00083d94;\n        *(uint *)(*(int *)(malloc_av_ptr + 8) + 4) = aligned_size - size_difference | 1;\n        *(int *)current_mallinfo_ptr = sbrk_result - size_difference;\n        __malloc_unlock(allocator_handle);\n        return 1;\n      }\n      size_difference = _sbrk_r(allocator_handle,0);\n      current_mallinfo_ptr = PTR___malloc_current_mallinfo_00083d94;\n      aligned_size = size_difference - *(int *)(malloc_av_ptr + 8);\n      if (0xf < (int)aligned_size) {\n        sbrk_result = *(int *)PTR___malloc_sbrk_base_00083d98;\n        *(uint *)(*(int *)(malloc_av_ptr + 8) + 4) = aligned_size | 1;\n        *(int *)current_mallinfo_ptr = size_difference - sbrk_result;\n      }\n    }\n  }\n  __malloc_unlock(allocator_handle);\n  return 0;\n}\n\n",
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "_free_r"
            ],
            "imported": false,
            "current_name": "optimize_memory_allocation_00083d00"
        },
        "FUN_00081d68": {
            "renaming": {
                "FUN_00081d68": "register_exit_procedure_00081d68",
                "param_1": "exitType",
                "param_2": "exitFunction",
                "param_3": "exitArgument"
            },
            "code": "\nvoid registerExitProcedure_00081d68(undefined4 exitType,undefined4 exitFunction,undefined4 exitArgument)\n\n{\n  __register_exitproc(2,exitType,exitFunction,exitArgument);\n  return;\n}\n\n",
            "called": [
                "__register_exitproc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d68",
            "calling": [
                "__aeabi_atexit"
            ],
            "imported": false,
            "current_name": "register_exit_procedure_00081d68"
        }
    },
    "used_tokens": 109229,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00080ce0",
            "FUN_00081164",
            "FUN_00081166",
            "FUN_00081202",
            "FUN_00081720",
            "FUN_00081d1c",
            "FUN_00083988",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081208",
            "FUN_00081728",
            "FUN_00081c94",
            "FUN_000810f4",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_0008143c",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_00084440",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00083994",
            "FUN_00081454",
            "FUN_00081730",
            "FUN_00084600",
            "FUN_00081578",
            "FUN_00081734",
            "FUN_00084728",
            "FUN_0008116a",
            "FUN_000813e0",
            "FUN_00083c40",
            "FUN_0008116e",
            "FUN_000805d0",
            "FUN_000813e4",
            "FUN_00081cbc",
            "FUN_00080aac",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000811a8",
            "FUN_00083d9c",
            "FUN_000818c8",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_000810bc",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00084418",
            "FUN_00080d2e",
            "FUN_00081944",
            "FUN_20070000",
            "FUN_000811f0",
            "FUN_00081704",
            "FUN_00083c10",
            "FUN_00081bec",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081c6c",
            "FUN_00081034",
            "FUN_000844bc",
            "FUN_00083974",
            "FUN_00084700",
            "FUN_00080e5c",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_00081c80",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00083b08",
            "FUN_000814a8",
            "FUN_00081084",
            "FUN_00084750",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00084a80",
            "FUN_0008014c",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_00081aac",
            "FUN_00080d24",
            "FUN_00081e14",
            "FUN_000818b8",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081be4",
            "FUN_000815ca",
            "FUN_00081894",
            "FUN_00084248",
            "FUN_000845bc",
            "FUN_00081412",
            "FUN_000838cc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000825b0",
            "FUN_0008112c",
            "FUN_000803d4",
            "FUN_000845d8",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00081580",
            "FUN_00084298",
            "FUN_00080ac0",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081188",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_000847e0",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000813f6",
            "FUN_000816d4",
            "FUN_00083f34",
            "FUN_00081074",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_00080148",
            "FUN_00080ad8",
            "FUN_00084624",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000816e0",
            "FUN_00080acc",
            "FUN_000811c6",
            "FUN_00083d00",
            "FUN_00081d68"
        ],
        [
            "FUN_00082ac0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081dcc",
            "FUN_000846a4",
            "FUN_000813a8",
            "FUN_00082ab0",
            "FUN_00081e04",
            "FUN_00080ae4",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_0008043e",
            "FUN_00081df4"
        ]
    ],
    "locked_functions": []
}