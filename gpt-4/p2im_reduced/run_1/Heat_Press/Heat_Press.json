{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "initialize_system_000804a8": "initializeSystem",
                "do_nothing_000816a6": "idleTask",
                "setMemoryValue_000816d4": "setMemoryValue",
                "do_nothing_0008120c": "delay",
                "process_data_points_00080ce0": "processDataPoints",
                "main_function_00080ae4": "initializeHardware",
                "process_data_000805d0": "processData"
            },
            "code": "\nvoid mainLoop_000816a8(void)\n\n{\n  setMemoryValue_000816d4();\n  initializeHardware();\n  do_nothing_000816a6();\n  do_nothing_0008120c(1);\n  initializeSystem();\n  do {\n    do {\n      processData();\n    } while (DAT_000816d0 == 0);\n    process_data_points_00080ce0();\n  } while( true );\n}\n\n",
            "called": [
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_00080ae4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": true,
            "current_name": "main_loop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "FUNC_00081042"
            },
            "code": "\nvoid FUNC_00081042(int param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  *(uint *)(param_1 + 4) =\n       param_3 | *(uint *)(param_1 + 4) | (param_2 & 0xf) << 0x18 | (param_4 & 3) << 0x1c;\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "FUNC_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "iVar2": "result",
                "FUN_00082ac0": "process_int_array_00082ac0",
                "param_1": "input_data",
                "piVar3": "next_element",
                "puVar5": "buffer_data",
                "piVar1": "current_element",
                "param_2": "data_length",
                "param_3": "int_array",
                "uVar4": "index",
                "uVar7": "element_data_shifted",
                "uVar6": "element_data"
            },
            "code": "\nint process_int_array_00082ac0(undefined4 input_data,int data_length,int **int_array)\n\n{\n  int *current_element;\n  int result;\n  int *next_element;\n  uint index;\n  undefined4 *buffer_data;\n  uint element_data;\n  uint element_data_shifted;\n  \n  if (-1 < *(int *)(data_length + 100) << 0x12) {\n    result = process_data_blocks_00083f34();\n    int_array[2] = (int *)0x0;\n    int_array[1] = (int *)0x0;\n    return result;\n  }\n  next_element = int_array[2];\n  current_element = *int_array;\n  while (next_element != (int *)0x0) {\n    element_data = current_element[1];\n    element_data_shifted = element_data >> 2;\n    if (element_data_shifted != 0) {\n      buffer_data = (undefined4 *)(*current_element + -4);\n      index = 0;\n      do {\n        buffer_data = buffer_data + 1;\n        result = process_buffer_data_00083c40(input_data,*buffer_data,data_length);\n        index = index + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (element_data_shifted != index);\n      next_element = int_array[2];\n    }\n    next_element = (int *)((int)next_element - (element_data & 0xfffffffc));\n    int_array[2] = next_element;\n    current_element = current_element + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  int_array[2] = (int *)0x0;\n  int_array[1] = (int *)0x0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_int_array_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "iVar1": "difference",
                "FUN_00080ce0": "process_data_points_00080ce0",
                "do_nothing_00080abc": "process_data_point_4",
                "calculate_difference_000813e4": "calculate_difference",
                "do_nothing_00080aba": "process_data_point_3",
                "do_nothing_00080aa8": "process_data_point_1",
                "do_nothing_00080ab8": "process_data_point_2"
            },
            "code": "\nvoid process_data_points_00080ce0(void)\n\n{\n  int difference;\n  \n  difference = calculate_difference(PTR_DAT_00080d14);\n  if (difference != 0) {\n    do_nothing_00080aa8();\n  }\n  difference = calculate_difference(PTR_DAT_00080d18);\n  if (difference != 0) {\n    do_nothing_00080ab8();\n  }\n  difference = calculate_difference(PTR_DAT_00080d1c);\n  if (difference != 0) {\n    do_nothing_00080aba();\n  }\n  difference = calculate_difference(PTR_DAT_00080d20);\n  if (difference != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00080ab8",
                "FUN_00080abc",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080aba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "process_data_points_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "uVar1": "first_null_byte",
                "FUN_00081682": "initialize_and_update_memory_00081682",
                "param_1": "memory_block",
                "param_2": "input_value"
            },
            "code": "\nundefined4 * initialize_and_update_memory_00081682(undefined4 *memory_block,int input_value)\n\n{\n  undefined4 first_null_byte;\n  \n  *memory_block = 0;\n  memory_block[1] = 0;\n  memory_block[2] = 0;\n  if (input_value != 0) {\n    first_null_byte = find_first_null_byte_00082a50(input_value);\n    update_memory_block_0008165c(memory_block,input_value,first_null_byte);\n  }\n  return memory_block;\n}\n\n",
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": true,
            "current_name": "initialize_and_update_memory_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "merge_memory_wrapper_000815fe",
                "param_1": "memoryBlock"
            },
            "code": "\nundefined4 * mergeMemoryWrapper_000815fe(undefined4 *memoryBlock)\n\n{\n  merge_memory_wrapper_00081e04(*memoryBlock);\n  return memoryBlock;\n}\n\n",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": true,
            "current_name": "merge_memory_wrapper_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "uVar1": "tempVar",
                "param_1": "inputValue",
                "FUN_00081d1c": "calculate_bitwise_operation_00081d1c"
            },
            "code": "\nuint calculateBitwiseOperation_00081d1c(uint inputValue)\n\n{\n  uint tempVar;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  tempVar = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)tempVar) {\n    return (inputValue << 8 | 0x80000000) >> (tempVar & 0xff);\n  }\n  if ((tempVar == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_bitwise_operation_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "uVar1": "temp_uint",
                "param_1": "input_uint",
                "lVar2": "long_product",
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_2": "input_int",
                "param_3": "factor_1",
                "param_4": "factor_2",
                "param_5": "output_array"
            },
            "code": "\nvoid calculate_difference_000847ac(uint input_uint,int input_int,undefined4 factor_1,undefined4 factor_2,int *output_array)\n\n{\n  uint temp_uint;\n  longlong long_product;\n  \n  long_product = improved_division_00084a80();\n  long_product = long_product * CONCAT44(factor_2,factor_1);\n  temp_uint = (uint)long_product;\n  *output_array = input_uint - temp_uint;\n  output_array[1] = (input_int - (int)((ulonglong)long_product >> 0x20)) - (uint)(input_uint < temp_uint);\n  return;\n}\n\n",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": true,
            "current_name": "calculate_difference_000847ac"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00080118": {
            "renaming": {
                "param_1": "unusedParam",
                "FUN_00080118": "executeFunction_00080118",
                "param_2": "functionArg",
                "param_3": "callbackArg1",
                "param_4": "callbackArg2"
            },
            "code": "\nvoid executeFunction_00080118(undefined4 unusedParam,undefined *functionArg,undefined4 callbackArg1,undefined4 callbackArg2)\n\n{\n  if (DAT_00080134 != 0) {\n    functionArg = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140,functionArg,callbackArg1,DAT_00080144,callbackArg2);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "executeFunction_00080118"
        },
        "FUN_00081c94": {
            "renaming": {
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag",
                "FUN_00081c94": "check_condition_00081c94"
            },
            "code": "\nbool checkCondition_00081c94(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  combine_and_return_00081c5c();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "check_condition_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "puVar3": "functionPointer",
                "puVar4": "labelPointer2",
                "param_1": "dataStructure",
                "puVar5": "subDataStructure1",
                "puVar6": "subDataStructure2",
                "puVar1": "labelPointer",
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "uVar2": "dataValue"
            },
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructure)\n\n{\n  undefined *labelPointer;\n  undefined4 dataValue;\n  undefined *functionPointer;\n  undefined *labelPointer2;\n  undefined4 *subDataStructure1;\n  undefined4 *subDataStructure2;\n  \n  if (*(int *)(dataStructure + 0x38) == 0) {\n    subDataStructure1 = *(undefined4 **)(dataStructure + 4);\n    *(undefined **)(dataStructure + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(dataStructure + 0x2e4) = 3;\n    *(int *)(dataStructure + 0x2e8) = dataStructure + 0x2ec;\n    *(undefined4 *)(dataStructure + 0x2e0) = 0;\n    *(undefined2 *)(subDataStructure1 + 3) = 4;\n    *subDataStructure1 = 0;\n    subDataStructure1[1] = 0;\n    subDataStructure1[2] = 0;\n    subDataStructure1[0x19] = 0;\n    *(undefined2 *)((int)subDataStructure1 + 0xe) = 0;\n    subDataStructure1[4] = 0;\n    subDataStructure1[5] = 0;\n    subDataStructure1[6] = 0;\n    set_memory_00082504(subDataStructure1 + 0x17,0,8);\n    labelPointer2 = PTR_LAB_000844bc_1_00083c04;\n    functionPointer = PTR_update_status_and_value_0008449c_1_00083c00;\n    dataValue = DAT_00083bfc;\n    labelPointer = PTR_LAB_00084440_1_00083bf8;\n    subDataStructure2 = *(undefined4 **)(dataStructure + 8);\n    subDataStructure1[7] = subDataStructure1;\n    subDataStructure1[8] = labelPointer;\n    subDataStructure1[9] = dataValue;\n    subDataStructure1[10] = functionPointer;\n    subDataStructure1[0xb] = labelPointer2;\n    *(undefined2 *)((int)subDataStructure2 + 0xe) = 1;\n    *(undefined2 *)(subDataStructure2 + 3) = 9;\n    *subDataStructure2 = 0;\n    subDataStructure2[1] = 0;\n    subDataStructure2[2] = 0;\n    subDataStructure2[0x19] = 0;\n    subDataStructure2[4] = 0;\n    subDataStructure2[5] = 0;\n    subDataStructure2[6] = 0;\n    set_memory_00082504(subDataStructure2 + 0x17,0,8);\n    subDataStructure1 = *(undefined4 **)(dataStructure + 0xc);\n    subDataStructure2[7] = subDataStructure2;\n    subDataStructure2[8] = labelPointer;\n    subDataStructure2[9] = dataValue;\n    subDataStructure2[10] = functionPointer;\n    subDataStructure2[0xb] = labelPointer2;\n    *(undefined2 *)(subDataStructure1 + 3) = 0x12;\n    *(undefined2 *)((int)subDataStructure1 + 0xe) = 2;\n    *subDataStructure1 = 0;\n    subDataStructure1[1] = 0;\n    subDataStructure1[2] = 0;\n    subDataStructure1[0x19] = 0;\n    subDataStructure1[4] = 0;\n    subDataStructure1[5] = 0;\n    subDataStructure1[6] = 0;\n    set_memory_00082504(subDataStructure1 + 0x17,0,8);\n    subDataStructure1[7] = subDataStructure1;\n    subDataStructure1[8] = labelPointer;\n    subDataStructure1[9] = dataValue;\n    subDataStructure1[10] = functionPointer;\n    subDataStructure1[0xb] = labelPointer2;\n    *(undefined4 *)(dataStructure + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_000844c4",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "iVar2": "buffer_result",
                "local_50": "local_value",
                "iVar3": "memory_block",
                "uVar1": "ushort_value",
                "param_1": "context",
                "auStack_54": "stack_buffer",
                "param_2": "memory_params",
                "FUN_000842a4": "initialize_and_allocate_memory_000842a4",
                "uVar4": "uint_value",
                "bVar5": "update_status"
            },
            "code": "\nvoid initialize_and_allocate_memory_000842a4(int context,int *memory_params)\n\n{\n  ushort ushort_value;\n  int buffer_result;\n  int memory_block;\n  uint uint_value;\n  bool update_status;\n  undefined stack_buffer [4];\n  uint local_value;\n  \n  ushort_value = *(ushort *)(memory_params + 3);\n  uint_value = (uint)ushort_value;\n  if ((int)(uint_value << 0x1e) < 0) {\n    *memory_params = (int)memory_params + 0x43;\n    memory_params[4] = (int)memory_params + 0x43;\n    memory_params[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)memory_params + 0xe)) {\n    buffer_result = initialize_buffer_000846b4(context,(int)*(short *)((int)memory_params + 0xe),stack_buffer);\n    if (-1 < buffer_result) {\n      update_status = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) &&\n         ((undefined *)memory_params[10] == PTR_update_status_and_value_0008449c_1_00084380)) {\n        buffer_result = 0x400;\n        *(ushort *)(memory_params + 3) = *(ushort *)(memory_params + 3) | 0x400;\n        memory_params[0x13] = 0x400;\n      }\n      else {\n        buffer_result = 0x400;\n        *(ushort *)(memory_params + 3) = *(ushort *)(memory_params + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushort_value = *(ushort *)(memory_params + 3);\n    uint_value = (uint)ushort_value;\n  }\n  *(ushort *)(memory_params + 3) = ushort_value | 0x800;\n  if ((uint_value & 0x80) == 0) {\n    buffer_result = 0x400;\n  }\n  else {\n    buffer_result = 0x40;\n  }\n  update_status = false;\nLAB_00084300:\n  memory_block = allocate_memory_block_00081e14(context,buffer_result);\n  ushort_value = *(ushort *)(memory_params + 3);\n  if (memory_block == 0) {\n    if (-1 < (int)((uint)ushort_value << 0x16)) {\n      *(ushort *)(memory_params + 3) = ushort_value | 2;\n      *memory_params = (int)memory_params + 0x43;\n      memory_params[4] = (int)memory_params + 0x43;\n      memory_params[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(context + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(memory_params + 3) = ushort_value | 0x80;\n    *memory_params = memory_block;\n    memory_params[4] = memory_block;\n    memory_params[5] = buffer_result;\n    if ((update_status) && (buffer_result = update_param_with_value_000846dc(context,(int)*(short *)((int)memory_params + 0xe)), buffer_result != 0))\n    {\n      *(ushort *)(memory_params + 3) = *(ushort *)(memory_params + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": true,
            "current_name": "initialize_and_allocate_memory_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "iVar2": "callback_result",
                "iVar3": "memory_structure",
                "uVar1": "result",
                "param_1": "input_param",
                "FUN_000846a4": "process_memory_blocks_000846a4"
            },
            "code": "\nundefined4 process_memory_blocks_000846a4(int input_param)\n\n{\n  undefined4 result;\n  int callback_result;\n  int memory_structure;\n  \n  memory_structure = *DAT_000846b0;\n  if (input_param != 0) {\n    if ((memory_structure != 0) && (*(int *)(memory_structure + 0x38) == 0)) {\n      initialize_data_structures_00083b14();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = process_data_00083adc(memory_structure,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (callback_result = (**(code **)(input_param + 0x2c))(memory_structure,*(undefined4 *)(input_param + 0x1c)), callback_result < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        merge_memory_blocks_00083d9c(memory_structure,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          merge_memory_blocks_00083d9c(memory_structure);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        merge_memory_blocks_00083d9c(memory_structure);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      do_nothing_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083c08",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083d9c",
                "FUN_00083c0c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": true,
            "current_name": "process_memory_blocks_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initializeMemory_00080f24",
                "iVar3": "index",
                "puVar2": "destinationPointer",
                "puVar4": "zeroFillPointer",
                "puVar1": "sourcePointer"
            },
            "code": "\nvoid initializeMemory_00080f24(void)\n\n{\n  undefined *sourcePointer;\n  undefined *destinationPointer;\n  int index;\n  undefined4 *zeroFillPointer;\n  \n  sourcePointer = PTR_Elf32_Rel_ARRAY_00080f80;\n  destinationPointer = DAT_00080f7c;\n  zeroFillPointer = (undefined4 *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (index = 0; zeroFillPointer = (undefined4 *)PTR_DAT_00080f84, sourcePointer + index < PTR_DAT_00080f88;\n        index = index + 4) {\n      *(undefined4 *)(sourcePointer + index) = *(undefined4 *)(destinationPointer + index);\n    }\n  }\n  for (; index = DAT_00080f94, zeroFillPointer < DAT_00080f8c; zeroFillPointer = zeroFillPointer + 1) {\n    *zeroFillPointer = 0;\n  }\n  destinationPointer = PTR_DAT_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\n  if (destinationPointer < (undefined *)0x100000) {\n    *(uint *)(index + 8) = *(uint *)(index + 8) | 0x20000000;\n  }\n  (*DAT_00080f98)();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": true,
            "current_name": "initializeMemory_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bitmask_00080e04",
                "uVar1": "result",
                "param_1": "base_address",
                "param_2": "bitmask"
            },
            "code": "\nuint check_bitmask_00080e04(int base_address,uint bitmask)\n\n{\n  uint result;\n  \n  result = *(uint *)(base_address + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(base_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": true,
            "current_name": "check_bitmask_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar2": "data_ptr_1",
                "iVar6": "temp_value",
                "puVar3": "data_ptr_2",
                "puVar4": "data_ptr_3",
                "puVar1": "config_ptr",
                "uVar5": "retrieved_value"
            },
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  undefined *config_ptr;\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  undefined *data_ptr_3;\n  undefined4 retrieved_value;\n  int temp_value;\n  \n  process_function_00081210(1,0);\n  process_function_00081210(6,1);\n  process_function_00081210(0,1);\n  process_function_00081210(1,1);\n  update_data_structure_00081318(0,0);\n  update_data_structure_00081318(1,0);\n  data_ptr_1 = PTR_DAT_000805ac;\n  config_ptr = PTR_DAT_000805a8;\n  *(undefined2 *)(PTR_DAT_000805a8 + 0xe) = 0x13;\n  *(undefined2 *)(config_ptr + 0x10) = 10;\n  *(undefined **)(config_ptr + 0x14) = data_ptr_1 + 0x26;\n  config_ptr[1] = 3;\n  config_ptr[0x19] = 3;\n  *(undefined2 *)(config_ptr + 0x1a) = 0x14;\n  *(undefined2 *)(config_ptr + 0x28) = 3;\n  *(undefined2 *)(config_ptr + 4) = 0x10;\n  *(undefined **)(config_ptr + 8) = data_ptr_1;\n  config_ptr[0xd] = 0x10;\n  *(undefined2 *)(config_ptr + 0x1c) = 0xc;\n  config_ptr[0x25] = 0x10;\n  *(undefined2 *)(config_ptr + 0x34) = 8;\n  data_ptr_2 = PTR_DAT_000805b0;\n  *(undefined2 *)(config_ptr + 0x26) = 0x1c;\n  *(undefined **)(config_ptr + 0x2c) = data_ptr_1 + 0x38;\n  data_ptr_3 = PTR_DAT_000805b4;\n  config_ptr[0x30] = 2;\n  config_ptr[0x31] = 2;\n  *(undefined **)(config_ptr + 0x38) = data_ptr_2;\n  config_ptr[0x3c] = 2;\n  *config_ptr = 1;\n  config_ptr[0xc] = 1;\n  config_ptr[0x18] = 1;\n  config_ptr[0x24] = 1;\n  *(undefined2 *)(config_ptr + 0x3e) = 1;\n  *(undefined2 *)(config_ptr + 0x40) = 1;\n  *(undefined2 *)(config_ptr + 2) = 0;\n  *(undefined **)(config_ptr + 0x20) = data_ptr_1 + 0x28;\n  *(undefined2 *)(config_ptr + 0x32) = 0;\n  config_ptr[0x3d] = 5;\n  *(undefined **)(config_ptr + 0x44) = data_ptr_2 + 2;\n  initialize_and_process_00080164(data_ptr_3,0x4b00);\n  *(undefined2 *)(data_ptr_3 + 0x56) = 2000;\n  retrieved_value = retrieve_data_value_thunk_00081714();\n  *(undefined4 *)PTR_DAT_000805b8 = retrieved_value;\n  temp_value = retrieve_data_value_thunk_00081714();\n  *(int *)PTR_DAT_000805bc = temp_value + 1000;\n  temp_value = retrieve_data_value_thunk_00081714();\n  *(int *)PTR_DAT_000805c0 = temp_value + 1000;\n  temp_value = retrieve_data_value_thunk_00081714();\n  *(int *)PTR_DAT_000805c4 = temp_value + 1000;\n  temp_value = retrieve_data_value_thunk_00081714();\n  *(int *)PTR_DAT_000805c8 = temp_value + 1000;\n  *PTR_DAT_000805cc = 0;\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081210",
                "FUN_00080164",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "bVar2": "tempByte",
                "FUN_000802da": "process_data_000802da",
                "param_1": "dataBuffer",
                "puVar6": "tempPointer",
                "local_1c": "localChar",
                "local_1b": "localUndefined",
                "local_1a": "localUShort",
                "param_2": "inputValue",
                "param_3": "inputArray",
                "cVar1": "result",
                "uVar3": "tempUndefined",
                "uVar5": "tempUInt",
                "uVar4": "tempUShort"
            },
            "code": "\nint processData_000802da(int dataBuffer,ushort inputValue,ushort *inputArray)\n\n{\n  char result;\n  byte tempByte;\n  undefined tempUndefined;\n  ushort tempUShort;\n  uint tempUInt;\n  ushort *tempPointer;\n  char localChar;\n  undefined localUndefined;\n  ushort localUShort;\n  \n  tempUInt = (uint)inputValue;\n  if (*(char *)(dataBuffer + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(dataBuffer + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(localChar - 1U)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(dataBuffer + 9) = localChar;\n  *(undefined *)(dataBuffer + 10) = localUndefined;\n  *(ushort **)(dataBuffer + 0x4c) = inputArray;\n  *(char *)(dataBuffer + 0xb) = (char)((uint)localUShort >> 8);\n  *(char *)(dataBuffer + 0xc) = (char)localUShort;\n  result = (char)inputValue;\n  tempUndefined = (undefined)(tempUInt >> 8);\n  switch(localUndefined) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(dataBuffer + 0xd) = tempUndefined;\n    break;\n  case 5:\n    tempUShort = *inputArray;\n    if (tempUShort != 0) {\n      tempUShort = 1;\n    }\n    *(char *)(dataBuffer + 0xd) = -(char)tempUShort;\n    tempUInt = 0;\n    break;\n  case 6:\n    *(char *)(dataBuffer + 0xd) = (char)((uint)*inputArray >> 8);\n    tempUInt = (uint)*inputArray;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    tempByte = (byte)(inputValue >> 3) & 0xfe;\n    if ((inputValue & 0xf) != 0) {\n      tempByte = tempByte + 1;\n    }\n    *(char *)(dataBuffer + 0xe) = result;\n    *(undefined *)(dataBuffer + 0xd) = tempUndefined;\n    *(byte *)(dataBuffer + 0xf) = tempByte;\n    tempUndefined = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(dataBuffer + 0xd) = tempUndefined;\n    *(char *)(dataBuffer + 0xe) = result;\n    inputArray = inputArray + -1;\n    *(char *)(dataBuffer + 0xf) = result * '\\x02';\n    *(undefined *)(dataBuffer + 0x49) = 7;\n    tempPointer = inputArray + tempUInt;\n    while (inputArray != tempPointer) {\n      tempByte = *(byte *)(dataBuffer + 0x49);\n      *(char *)(dataBuffer + (uint)tempByte + 9) = (char)((uint)inputArray[1] >> 8);\n      tempUInt = tempByte + 1 & 0xff;\n      *(char *)(dataBuffer + 0x49) = (char)tempUInt;\n      inputArray = inputArray + 1;\n      *(char *)(tempUInt + dataBuffer + 9) = (char)*inputArray;\n      *(byte *)(dataBuffer + 0x49) = tempByte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(dataBuffer + 0xe) = (char)tempUInt;\n  tempUndefined = 6;\nLAB_0008034a:\n  *(undefined *)(dataBuffer + 0x49) = tempUndefined;\nswitchD_0008031e_caseD_7:\n  update_data_buffer_00080258(dataBuffer);\n  *(undefined *)(dataBuffer + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "process_data_000802da"
        },
        "FUN_00081210": {
            "renaming": {
                "iVar3": "result",
                "FUN_00081210": "process_function_00081210",
                "puVar2": "functionStatus",
                "param_1": "functionIndex",
                "iVar9": "offset",
                "iVar10": "functionPtr",
                "param_2": "action",
                "puVar1": "functionData",
                "uVar5": "paramType",
                "uVar4": "bitIndex",
                "uVar6": "bitMask",
                "bVar8": "statusByte",
                "bVar7": "statusLowerNibble"
            },
            "code": "\nint processFunction_00081210(int functionIndex,int action)\n\n{\n  undefined *functionData;\n  undefined *functionStatus;\n  int result;\n  uint bitIndex;\n  undefined4 paramType;\n  uint bitMask;\n  byte statusLowerNibble;\n  byte statusByte;\n  int offset;\n  int functionPtr;\n  \n  functionStatus = PTR_DAT_00081310;\n  functionData = PTR_DAT_0008130c;\n  result = functionIndex;\n  if (PTR_DAT_0008130c[functionIndex * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081310[functionIndex] & 0xf) == 4) {\n      result = set_bit_at_index_0008105c(DAT_00081314,PTR_DAT_0008130c[functionIndex * 0x1c + 0x19]);\n    }\n    statusByte = functionStatus[functionIndex];\n    statusLowerNibble = statusByte & 0xf;\n    if ((statusLowerNibble < 3) && (statusByte != 0)) {\n      if (statusLowerNibble == 2) {\n        if (action == 0) {\n          return result;\n        }\n      }\n      else if (statusLowerNibble == 1) {\n        if (action == 2) {\n          return result;\n        }\n      }\n      else if (statusLowerNibble == 3) {\n        if (action == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (action != 1) {\nLAB_0008126c:\n      if (action == 0) {\n        result = functionIndex * 0x1c;\n        update_bit_flags_00080e18(*(undefined4 *)(functionData + result + 8));\n        result = processParams_00080da0(*(undefined4 *)(functionData + result),3,*(undefined4 *)(functionData + result + 4),0\n                            );\n        statusByte = functionStatus[functionIndex] & 0xf0 | 2;\n      }\n      else {\n        if (action != 2) {\n          return result;\n        }\n        result = functionIndex * 0x1c;\n        update_bit_flags_00080e18(*(undefined4 *)(functionData + result + 8));\n        result = processParams_00080da0(*(undefined4 *)(functionData + result),3,*(undefined4 *)(functionData + result + 4),1\n                            );\n        statusByte = functionStatus[functionIndex] & 0xf0 | 1;\n      }\n      functionStatus[functionIndex] = statusByte;\n      return result;\n    }\n    offset = functionIndex * 0x1c;\n    functionPtr = *(int *)(functionData + offset);\n    if (statusByte >> 4 == 0) {\n      paramType = 4;\n    }\n    else {\n      paramType = 5;\n    }\n    result = processParams_00080da0(functionPtr,paramType,*(undefined4 *)(functionData + offset + 4),\n                         *(undefined4 *)(functionData + offset + 0x10));\n    functionStatus[functionIndex] = functionStatus[functionIndex] & 0xf0 | 3;\n    if (*(int *)(functionPtr + 0x18) == -1) {\n      bitIndex = *(uint *)(functionData + offset + 8);\n      if (0x2c < bitIndex) {\n        return 1;\n      }\n      if (bitIndex < 0x20) {\n        bitIndex = 1 << (bitIndex & 0xff);\n        bitMask = *(uint *)(DAT_00080e98 + 0x18) & bitIndex;\n        if (bitMask == bitIndex) {\n          *(uint *)(DAT_00080e98 + 0x14) = bitMask;\n        }\n      }\n      else {\n        bitIndex = 1 << (bitIndex - 0x20 & 0xff);\n        bitMask = *(uint *)(DAT_00080e98 + 0x108) & bitIndex;\n        if (bitMask == bitIndex) {\n          *(uint *)(DAT_00080e98 + 0x104) = bitMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0008105c",
                "FUN_00080da0",
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00081318"
            ],
            "imported": true,
            "current_name": "process_function_00081210"
        },
        "FUN_00080f9c": {
            "renaming": {
                "uVar1": "tempVar1",
                "FUN_00080f9c": "calculateResult_00080f9c",
                "param_1": "resultArray",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "uVar2": "tempVar2",
                "local_58": "localArray"
            },
            "code": "\nundefined4 calculateResult_00080f9c(undefined4 *resultArray,uint inputValue1,int inputValue2,int inputValue3)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint localArray [16];\n  \n  localArray[0] = *(uint *)PTR_DAT_0008102c;\n  localArray[1] = *(undefined4 *)(PTR_DAT_0008102c + 4);\n  localArray[2] = *(undefined4 *)(PTR_DAT_0008102c + 8);\n  localArray[3] = *(undefined4 *)(PTR_DAT_0008102c + 0xc);\n  localArray[4] = *(undefined4 *)(PTR_DAT_0008102c + 0x10);\n  localArray[5] = *(undefined4 *)(PTR_DAT_0008102c + 0x14);\n  localArray[6] = *(undefined4 *)(PTR_DAT_0008102c + 0x18);\n  localArray[7] = *(undefined4 *)(PTR_DAT_0008102c + 0x1c);\n  localArray[8] = *(undefined4 *)(PTR_DAT_0008102c + 0x20);\n  localArray[9] = *(undefined4 *)(PTR_DAT_0008102c + 0x24);\n  localArray[10] = *(undefined4 *)(PTR_DAT_0008102c + 0x28);\n  localArray[11] = *(undefined4 *)(PTR_DAT_0008102c + 0x2c);\n  localArray[12] = *(undefined4 *)(PTR_DAT_0008102c + 0x30);\n  localArray[13] = *(undefined4 *)(PTR_DAT_0008102c + 0x34);\n  localArray[14] = *(undefined4 *)(PTR_DAT_0008102c + 0x38);\n  localArray[15] = *(undefined4 *)(PTR_DAT_0008102c + 0x3c);\n  *resultArray = 1;\n  resultArray[1] = 0;\n  resultArray[0x48] = 0x202;\n  resultArray[0x41] = 0;\n  resultArray[0x45] = 0;\n  tempVar1 = inputValue1 / (uint)(inputValue2 * 2);\n  if (inputValue1 == inputValue2 * 2 * tempVar1) {\n    tempVar1 = tempVar1 - 1;\n  }\n  tempVar2 = 0;\n  do {\n    if ((uint)(inputValue3 *\n              (int)(((ulonglong)inputValue1 / (ulonglong)((tempVar1 + 1) * 2)) / (ulonglong)DAT_00081030))\n        <= localArray[tempVar2]) {\n      resultArray[1] = (tempVar2 & 0xf) << 0x10 | (tempVar1 & 0xff) << 8 | resultArray[1];\n      return 0;\n    }\n    tempVar2 = tempVar2 + 1;\n  } while (tempVar2 != 0x10);\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "calculateResult_00080f9c"
        },
        "FUN_00081454": {
            "renaming": {
                "iVar1": "bufferBase",
                "FUN_00081454": "updateBuffer_00081454",
                "param_1": "bufferPtr",
                "param_2": "inputData",
                "uVar2": "updatedIndex"
            },
            "code": "\nundefined4 updateBuffer_00081454(int bufferPtr,undefined4 inputData)\n\n{\n  int bufferBase;\n  uint updatedIndex;\n  \n  bufferBase = *(int *)(bufferPtr + 0x14);\n  if ((*(int *)(*(int *)(bufferPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(bufferBase + 0x84) == *(int *)(bufferBase + 0x80))) {\n    *(undefined4 *)(*(int *)(bufferPtr + 0x18) + 0x1c) = inputData;\n  }\n  else {\n    updatedIndex = DAT_000814a4 & *(int *)(bufferBase + 0x80) + 1U;\n    if ((int)updatedIndex < 0) {\n      updatedIndex = (updatedIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(bufferBase + 0x84) == updatedIndex);\n    *(char *)(bufferBase + *(int *)(bufferBase + 0x80)) = (char)inputData;\n    *(uint *)(*(int *)(bufferPtr + 0x14) + 0x80) = updatedIndex;\n    *(undefined4 *)(*(int *)(bufferPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": true,
            "current_name": "updateBuffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "iVar1": "temp_var1",
                "iVar7": "temp_var7",
                "FUN_00081730": "calculate_result_00081730",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar3": "temp_var3",
                "uVar2": "temp_var2",
                "uVar5": "temp_var5",
                "uVar4": "temp_var4",
                "uVar6": "temp_var6",
                "bVar8": "condition"
            },
            "code": "\nuint calculate_result_00081730(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  int temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  int temp_var7;\n  bool condition;\n  \n  temp_var2 = input_2 ^ 0x80000000;\n  temp_var4 = input_1 << 1;\n  condition = temp_var4 == 0;\n  if (!condition) {\n    input_4 = input_2 << 1;\n    condition = input_4 == 0;\n  }\n  if (!condition) {\n    condition = temp_var4 == input_4;\n  }\n  temp_var7 = (int)temp_var4 >> 0x18;\n  if (!condition) {\n    condition = temp_var7 == -1;\n  }\n  if (!condition) {\n    condition = (int)input_4 >> 0x18 == -1;\n  }\n  if (condition) {\n    temp_var1 = (int)(input_2 << 1) >> 0x18;\n    if (temp_var7 == -1 || temp_var1 == -1) {\n      temp_var4 = temp_var2;\n      if (temp_var7 == -1) {\n        temp_var4 = input_1;\n      }\n      if (temp_var7 != -1 || temp_var1 != -1) {\n        temp_var2 = temp_var4;\n      }\n      condition = (temp_var4 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (temp_var2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = temp_var4 == temp_var2;\n      }\n      if (!condition) {\n        temp_var4 = temp_var4 | 0x400000;\n      }\n      return temp_var4;\n    }\n    if (((input_1 ^ temp_var2) & 0x7fffffff) != 0) {\n      if (temp_var4 == 0) {\n        input_1 = temp_var2;\n      }\n      return input_1;\n    }\n    if (input_1 != temp_var2) {\n      return 0;\n    }\n    if ((temp_var4 & 0xff000000) == 0) {\n      temp_var2 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        temp_var2 = temp_var2 | 0x80000000;\n      }\n      return temp_var2;\n    }\n    if (temp_var4 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_0008186a:\n    return input_1 | 0x7f800000;\n  }\n  temp_var4 = temp_var4 >> 0x18;\n  input_4 = input_4 >> 0x18;\n  temp_var6 = input_4 - temp_var4;\n  condition = temp_var6 != 0;\n  temp_var5 = temp_var4;\n  if (condition && temp_var4 <= input_4) {\n    temp_var5 = temp_var4 + temp_var6;\n  }\n  if (condition && temp_var4 <= input_4) {\n    temp_var2 = temp_var2 ^ input_1;\n  }\n  if (condition && temp_var4 <= input_4) {\n    input_1 = input_1 ^ temp_var2;\n  }\n  if (condition && temp_var4 <= input_4) {\n    temp_var2 = temp_var2 ^ input_1;\n  }\n  if (input_4 < temp_var4) {\n    temp_var6 = -temp_var6;\n  }\n  if (0x19 < temp_var6) {\n    return input_1;\n  }\n  temp_var4 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    temp_var4 = -temp_var4;\n  }\n  temp_var3 = temp_var2 & 0xffffff | 0x800000;\n  if ((temp_var2 & 0x80000000) != 0) {\n    temp_var3 = -temp_var3;\n  }\n  if (temp_var5 == temp_var6) {\n    temp_var3 = temp_var3 ^ 0x800000;\n    if (temp_var5 == 0) {\n      temp_var4 = temp_var4 ^ 0x800000;\n      temp_var5 = 1;\n    }\n    else {\n      temp_var6 = temp_var6 - 1;\n    }\n  }\n  temp_var4 = temp_var4 + ((int)temp_var3 >> (temp_var6 & 0xff));\n  temp_var3 = temp_var3 << (0x20 - temp_var6 & 0xff);\n  input_1 = temp_var4 & 0x80000000;\n  if ((int)temp_var4 < 0) {\n    condition = temp_var3 != 0;\n    temp_var3 = -temp_var3;\n    temp_var4 = -temp_var4 - (uint)condition;\n  }\n  if (temp_var4 < 0x800000) {\n    temp_var2 = temp_var3 & 0x80000000;\n    temp_var3 = temp_var3 << 1;\n    temp_var4 = temp_var4 * 2 + (uint)(temp_var2 != 0);\n    temp_var2 = temp_var5 - 2;\n    if ((temp_var4 & 0x800000) == 0) {\n      temp_var7 = count_leading_zeroes(temp_var4);\n      temp_var6 = temp_var7 - 8;\n      temp_var4 = temp_var4 << (temp_var6 & 0xff);\n      if ((int)temp_var2 < (int)temp_var6) {\n        temp_var4 = temp_var4 >> (-(temp_var2 - temp_var6) & 0xff);\n      }\n      else {\n        temp_var4 = temp_var4 + (temp_var2 - temp_var6) * 0x800000;\n      }\n      return temp_var4 | input_1;\n    }\n  }\n  else {\n    temp_var2 = temp_var5 - 1;\n    if (0xffffff < temp_var4) {\n      temp_var2 = temp_var4 & 1;\n      temp_var4 = temp_var4 >> 1;\n      temp_var3 = (uint)(temp_var2 != 0) << 0x1f | temp_var3 >> 1;\n      temp_var2 = temp_var5;\n      if (0xfd < temp_var5) goto LAB_0008186a;\n    }\n  }\n  temp_var4 = temp_var4 + temp_var2 * 0x800000 + (uint)(0x7fffffff < temp_var3);\n  if (temp_var3 == 0x80000000) {\n    temp_var4 = temp_var4 & 0xfffffffe;\n  }\n  return temp_var4 | input_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_result_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "FUNC_00081734"
            },
            "code": "\nuint FUNC_00081734(uint param_1,uint param_2,undefined4 param_3,uint param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  bool bVar7;\n  \n  uVar3 = param_1 << 1;\n  bVar7 = uVar3 == 0;\n  if (!bVar7) {\n    param_4 = param_2 << 1;\n    bVar7 = param_4 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = uVar3 == param_4;\n  }\n  iVar6 = (int)uVar3 >> 0x18;\n  if (!bVar7) {\n    bVar7 = iVar6 == -1;\n  }\n  if (!bVar7) {\n    bVar7 = (int)param_4 >> 0x18 == -1;\n  }\n  if (bVar7) {\n    iVar1 = (int)(param_2 << 1) >> 0x18;\n    if (iVar6 == -1 || iVar1 == -1) {\n      uVar3 = param_2;\n      if (iVar6 == -1) {\n        uVar3 = param_1;\n      }\n      if (iVar6 != -1 || iVar1 != -1) {\n        param_2 = uVar3;\n      }\n      bVar7 = (uVar3 & 0x7fffff) == 0;\n      if (bVar7) {\n        bVar7 = (param_2 & 0x7fffff) == 0;\n      }\n      if (bVar7) {\n        bVar7 = uVar3 == param_2;\n      }\n      if (!bVar7) {\n        uVar3 = uVar3 | 0x400000;\n      }\n      return uVar3;\n    }\n    if (((param_1 ^ param_2) & 0x7fffffff) != 0) {\n      if (uVar3 == 0) {\n        param_1 = param_2;\n      }\n      return param_1;\n    }\n    if (param_1 != param_2) {\n      return 0;\n    }\n    if ((uVar3 & 0xff000000) == 0) {\n      uVar3 = param_1 << 1;\n      if ((param_1 & 0x80000000) != 0) {\n        uVar3 = uVar3 | 0x80000000;\n      }\n      return uVar3;\n    }\n    if (uVar3 < 0xfe000000) {\n      return param_1 + 0x800000;\n    }\n    param_1 = param_1 & 0x80000000;\nLAB_0008186a:\n    return param_1 | 0x7f800000;\n  }\n  uVar3 = uVar3 >> 0x18;\n  param_4 = param_4 >> 0x18;\n  uVar5 = param_4 - uVar3;\n  bVar7 = uVar5 != 0;\n  uVar4 = uVar3;\n  if (bVar7 && uVar3 <= param_4) {\n    uVar4 = uVar3 + uVar5;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_1 = param_1 ^ param_2;\n  }\n  if (bVar7 && uVar3 <= param_4) {\n    param_2 = param_2 ^ param_1;\n  }\n  if (param_4 < uVar3) {\n    uVar5 = -uVar5;\n  }\n  if (0x19 < uVar5) {\n    return param_1;\n  }\n  uVar3 = param_1 & 0xffffff | 0x800000;\n  if ((param_1 & 0x80000000) != 0) {\n    uVar3 = -uVar3;\n  }\n  uVar2 = param_2 & 0xffffff | 0x800000;\n  if ((param_2 & 0x80000000) != 0) {\n    uVar2 = -uVar2;\n  }\n  if (uVar4 == uVar5) {\n    uVar2 = uVar2 ^ 0x800000;\n    if (uVar4 == 0) {\n      uVar3 = uVar3 ^ 0x800000;\n      uVar4 = 1;\n    }\n    else {\n      uVar5 = uVar5 - 1;\n    }\n  }\n  uVar3 = uVar3 + ((int)uVar2 >> (uVar5 & 0xff));\n  uVar2 = uVar2 << (0x20 - uVar5 & 0xff);\n  param_1 = uVar3 & 0x80000000;\n  if ((int)uVar3 < 0) {\n    bVar7 = uVar2 != 0;\n    uVar2 = -uVar2;\n    uVar3 = -uVar3 - (uint)bVar7;\n  }\n  if (uVar3 < 0x800000) {\n    uVar5 = uVar2 & 0x80000000;\n    uVar2 = uVar2 << 1;\n    uVar3 = uVar3 * 2 + (uint)(uVar5 != 0);\n    uVar5 = uVar4 - 2;\n    if ((uVar3 & 0x800000) == 0) {\n      iVar6 = count_leading_zeroes(uVar3);\n      uVar4 = iVar6 - 8;\n      uVar3 = uVar3 << (uVar4 & 0xff);\n      if ((int)uVar5 < (int)uVar4) {\n        uVar3 = uVar3 >> (-(uVar5 - uVar4) & 0xff);\n      }\n      else {\n        uVar3 = uVar3 + (uVar5 - uVar4) * 0x800000;\n      }\n      return uVar3 | param_1;\n    }\n  }\n  else {\n    uVar5 = uVar4 - 1;\n    if (0xffffff < uVar3) {\n      uVar5 = uVar3 & 1;\n      uVar3 = uVar3 >> 1;\n      uVar2 = (uint)(uVar5 != 0) << 0x1f | uVar2 >> 1;\n      uVar5 = uVar4;\n      if (0xfd < uVar4) goto LAB_0008186a;\n    }\n  }\n  uVar3 = uVar3 + uVar5 * 0x800000 + (uint)(0x7fffffff < uVar2);\n  if (uVar2 == 0x80000000) {\n    uVar3 = uVar3 & 0xfffffffe;\n  }\n  return uVar3 | param_1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "FUNC_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "iVar2": "zeroCheckResult",
                "param_1": "outputPtr",
                "FUN_00084728": "update_pointer_value_00084728",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "puVar1": "tempPtr"
            },
            "code": "\nvoid updatePointerValue_00084728(int *outputPtr,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  undefined *tempPtr;\n  int zeroCheckResult;\n  \n  tempPtr = PTR_DAT_0008474c;\n  *(undefined4 *)PTR_DAT_0008474c = 0;\n  zeroCheckResult = returnZero_000811c6(inputValue1,inputValue2,inputValue3);\n  if ((zeroCheckResult == -1) && (*(int *)tempPtr != 0)) {\n    *outputPtr = *(int *)tempPtr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": true,
            "current_name": "update_pointer_value_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "iVar2": "input_data_result",
                "uVar1": "data_value",
                "param_1": "input_data",
                "abStack_1b": "byte_array",
                "local_1c": "local_byte",
                "pbVar4": "buffer_position",
                "param_2": "buffer_size",
                "param_3": "buffer",
                "FUN_00083c40": "process_buffer_data_00083c40",
                "uVar3": "processed_value",
                "uVar5": "counter"
            },
            "code": "\nuint process_buffer_data_00083c40(undefined4 input_data,uint buffer_size,byte **buffer)\n\n{\n  uint data_value;\n  int input_data_result;\n  uint processed_value;\n  byte *buffer_position;\n  uint counter;\n  byte local_byte;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  data_value = get_data_value_00084298();\n  if ((data_value == 1) && (buffer_size - 1 < 0xff)) {\n    processed_value = buffer_size & 0xff;\n    local_byte = (byte)processed_value;\n  }\n  else {\n    data_value = process_parameters_0008456c(input_data,&local_byte,buffer_size,buffer + 0x17);\n    if (data_value == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (data_value == 0) {\n      return buffer_size;\n    }\n    processed_value = (uint)local_byte;\n  }\n  counter = 0;\n  do {\n    buffer_position = buffer[2] + -1;\n    buffer[2] = buffer_position;\n    if ((int)buffer_position < 0) {\n      if ((int)buffer[6] <= (int)buffer_position) {\n        **buffer = (byte)processed_value;\n        buffer_position = *buffer;\n        processed_value = (uint)*buffer_position;\n        if (processed_value != 10) goto LAB_00083c90;\n      }\n      input_data_result = process_input_data_000844c4(input_data,processed_value,buffer);\n      if (input_data_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)processed_value;\n      buffer_position = *buffer;\nLAB_00083c90:\n      *buffer = buffer_position + 1;\n    }\n    if (data_value <= counter + 1) {\n      return buffer_size;\n    }\n    processed_value = (uint)byte_array[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": true,
            "current_name": "process_buffer_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "uVar10": "bitwiseResult",
                "uVar11": "tempValue",
                "uVar12": "transformedValueA",
                "uVar13": "resultA",
                "piVar17": "intPointer",
                "uVar14": "resultB",
                "puVar2": "timeElapsed",
                "puVar3": "counterA",
                "uVar18": "resultC",
                "puVar4": "valueA",
                "puVar5": "valueB",
                "puVar6": "counterB",
                "puVar7": "valueC",
                "puVar8": "valueD",
                "puVar9": "valueE",
                "iVar19": "tempIntC",
                "iVar15": "tempIntA",
                "iVar16": "tempIntB",
                "puVar1": "dataBuffer",
                "FUN_000805d0": "process_data_000805d0"
            },
            "code": "\nvoid processData_000805d0(void)\n\n{\n  undefined *dataBuffer;\n  undefined *timeElapsed;\n  undefined *counterA;\n  undefined *valueA;\n  undefined *valueB;\n  undefined *counterB;\n  undefined *valueC;\n  undefined *valueD;\n  undefined *valueE;\n  undefined2 bitwiseResult;\n  uint tempValue;\n  undefined4 transformedValueA;\n  undefined4 resultA;\n  undefined4 resultB;\n  int tempIntA;\n  int tempIntB;\n  int *intPointer;\n  undefined4 resultC;\n  int tempIntC;\n  \n  valueC = PTR_DAT_0008089c;\n  valueE = PTR_DAT_00080898;\n  valueD = PTR_DAT_00080894;\n  counterA = PTR_DAT_0008087c;\n  valueB = PTR_DAT_00080878;\n  valueA = PTR_DAT_00080874;\n  timeElapsed = PTR_DAT_00080834;\n  dataBuffer = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  tempIntB = *(int *)PTR_DAT_00080894;\n  tempIntA = tempIntB - *(int *)PTR_DAT_00080874;\n  if (tempIntA < 0) {\n    tempIntA = tempIntA + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = tempIntA;\n  counterB = PTR_DAT_00080880;\n  tempValue = *(uint *)valueE;\n  tempIntA = tempValue - *(int *)valueB;\n  *(int *)PTR_DAT_00080880 = tempIntA;\n  if (tempIntA < 0) {\n    *(int *)counterA = *(int *)counterA + -1;\n    *(int *)counterB = tempIntA + 0x3c;\n  }\n  tempIntA = *(int *)counterA;\n  tempIntC = *(int *)counterB;\n  *(short *)(dataBuffer + 0x36) = (short)tempIntA;\n  *(short *)(dataBuffer + 0x38) = (short)tempIntC;\n  if ((tempIntA == 0) && (tempIntC == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)valueA = 0;\n    *(undefined4 *)valueB = 0;\n  }\n  counterB = PTR_DAT_00080888;\n  counterA = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == tempIntB) {\n    tempIntA = 1 - tempValue;\n    if (1 < tempValue) {\n      tempIntA = 0;\n    }\n    *(int *)PTR_DAT_00080888 = tempIntA;\n    if (tempIntA != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)counterA = tempIntB;\n    counterA = PTR_DAT_00080a50;\n    *(uint *)counterB = tempValue;\n    *(undefined4 *)valueA = 0;\n    *(undefined4 *)valueB = 0;\n    *(undefined4 *)counterA = 0;\n  }\n  counterB = PTR_DAT_0008088c;\n  counterA = PTR_DAT_00080860;\n  tempIntA = *(int *)valueC;\n  if (tempIntA == 0) {\n    *(undefined4 *)valueA = 0;\n    *(undefined4 *)valueB = 0;\n    intPointer = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *intPointer = tempIntA;\n  }\n  else {\n    if (tempIntA != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      tempValue = retrieve_data_value_thunk_00081714();\n      valueC = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < tempValue) {\n        *(int *)counterB = *(int *)counterB + 1;\n        tempIntA = retrieve_data_value_thunk_00081714();\n        *(int *)valueC = tempIntA + 1000;\n      }\n    }\n    if (*(int *)counterB < *(int *)counterA) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)counterA + 1;\n    intPointer = (int *)PTR_DAT_00080a20;\n    counterA = PTR_DAT_00080a1c;\n    if (*(int *)valueA < *(int *)valueD) {\n      tempValue = retrieve_data_value_thunk_00081714();\n      counterA = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < tempValue) {\n        *(int *)valueB = *(int *)valueB + 1;\n        tempIntA = retrieve_data_value_thunk_00081714();\n        *(int *)counterA = tempIntA + 1000;\n      }\n    }\n    else {\n      if (*(int *)valueA != *(int *)valueD) goto LAB_000808f4;\n      if (*(int *)valueE < *(int *)valueB) {\n        tempIntA = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      tempValue = retrieve_data_value_thunk_00081714();\n      valueD = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < tempValue) {\n        *(int *)counterA = *(int *)counterA + 1;\n        tempIntA = retrieve_data_value_thunk_00081714();\n        *(int *)valueD = tempIntA + 1000;\n      }\n    }\n    if (0x3b < *(int *)valueB) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)valueA = *(int *)valueA + 1;\n    }\n  }\nLAB_000808f4:\n  tempValue = retrieve_data_value_thunk_00081714();\n  valueD = PTR_DAT_00080a60;\n  counterA = PTR_DAT_00080a5c;\n  valueB = PTR_DAT_00080a58;\n  valueA = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < tempValue) {\n    transformedValueA = calculate_transformed_value_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    transformedValueA = calculate_result_00081730(transformedValueA,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = transformedValueA;\n    valueE = PTR_DAT_00080a34;\n    resultC = *(undefined4 *)PTR_DAT_00080a34;\n    resultA = FUNC_00081734(transformedValueA,resultC);\n    resultA = floatingPointMultiplication_00081944(resultA,*(undefined4 *)valueD);\n    valueC = PTR_DAT_00080a64;\n    resultA = FUNC_00081734(resultA,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)valueD = resultA;\n    resultC = calculate_result_00081730(transformedValueA,resultC);\n    resultC = floatingPointMultiplication_00081944(resultC,*(undefined4 *)PTR_DAT_00080a38);\n    valueD = PTR_DAT_00080a3c;\n    resultC = calculate_result_00081730(resultC,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = resultC;\n    resultB = floatingPointMultiplication_00081944(transformedValueA,*(undefined4 *)PTR_DAT_00080a40);\n    resultB = FUNC_00081734(resultB,resultA);\n    FUNC_00081734(resultB,resultC);\n    resultB = processValue_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = resultB;\n    resultB = calculate_transformed_value_0008189c();\n    *(undefined4 *)valueE = transformedValueA;\n    *(undefined4 *)valueA = resultB;\n    *(undefined4 *)counterA = 0;\n    *(undefined4 *)valueC = resultA;\n    *(undefined4 *)valueD = resultC;\n    tempIntA = retrieve_data_value_thunk_00081714();\n    *(int *)valueB = tempIntA + *(int *)timeElapsed;\n  }\n  transformedValueA = calculate_transformed_value_0008189c(*(undefined4 *)timeElapsed);\n  tempIntA = check_swap_and_combine_00081ca8(*(undefined4 *)valueA,transformedValueA);\n  if (tempIntA != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = transformedValueA;\n  }\n  tempIntA = check_condition_00081c94(*(undefined4 *)valueA,0);\n  if (tempIntA != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  bitwiseResult = calculate_bitwise_operation_00081d1c(*(undefined4 *)valueA);\n  tempIntA = *(int *)counterA;\n  *(undefined2 *)(dataBuffer + 0x2a) = bitwiseResult;\n  *(int *)counterA = tempIntA + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00081cd0",
                "FUN_00081944",
                "FUN_00081ca8",
                "FUN_0008043e",
                "FUN_00081894",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008189c",
                "FUN_00081730",
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "process_data_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "param_1": "input_value",
                "FUN_000813e4": "calculate_difference_000813e4"
            },
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_dat_value_00084290"
            },
            "code": "\nundefined4 get_dat_value_00084290(void)\n\n{\n  return DAT_00084294;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": true,
            "current_name": "get_dat_value_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "iVar2": "set_buffer_result",
                "param_1": "buffer_result",
                "param_2": "buffer_length",
                "param_3": "buffer_width",
                "param_4": "buffer_height",
                "puVar1": "temp_ptr",
                "FUN_000846b4": "initialize_buffer_000846b4"
            },
            "code": "\nvoid initialize_buffer_000846b4(int *buffer_result,undefined4 buffer_length,undefined4 buffer_width,undefined4 buffer_height)\n\n{\n  undefined *temp_ptr;\n  int set_buffer_result;\n  \n  temp_ptr = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  set_buffer_result = set_buffer_size_000811b4(buffer_length,buffer_width,buffer_width,0,buffer_height);\n  if ((set_buffer_result == -1) && (*(int *)temp_ptr != 0)) {\n    *buffer_result = *(int *)temp_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "initialize_buffer_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_address"
            },
            "code": "\nint initialize_memory_000813a8(int memory_address)\n\n{\n  set_memory_00082504(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "initialize_memory_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "merge_memory_blocks_00083d9c",
                "iVar1": "prev_block",
                "iVar3": "next_block",
                "iVar5": "current_block",
                "iVar6": "temp_block",
                "iVar8": "memory_start",
                "param_1": "memory_context",
                "param_2": "block_to_merge",
                "uVar2": "block_size_flag",
                "uVar4": "block_size",
                "uVar7": "next_block_size_flag"
            },
            "code": "\nvoid merge_memory_blocks_00083d9c(undefined4 memory_context,int block_to_merge)\n\n{\n  int prev_block;\n  uint block_size_flag;\n  int next_block;\n  uint block_size;\n  int current_block;\n  int temp_block;\n  uint next_block_size_flag;\n  int memory_start;\n  \n  if (block_to_merge == 0) {\n    return;\n  }\n  do_nothing_00082598();\n  memory_start = DAT_00083f24;\n  block_size_flag = *(uint *)(block_to_merge + -4);\n  current_block = block_to_merge + -8;\n  block_size = block_size_flag & 0xfffffffe;\n  next_block = current_block + block_size;\n  next_block_size_flag = *(uint *)(next_block + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == next_block) {\n    next_block_size_flag = next_block_size_flag + block_size;\n    if (-1 < (int)(block_size_flag << 0x1f)) {\n      current_block = current_block - *(int *)(block_to_merge + -8);\n      prev_block = *(int *)(current_block + 0xc);\n      next_block = *(int *)(current_block + 8);\n      next_block_size_flag = next_block_size_flag + *(int *)(block_to_merge + -8);\n      *(int *)(next_block + 0xc) = prev_block;\n      *(int *)(prev_block + 8) = next_block;\n    }\n    block_size_flag = *DAT_00083f2c;\n    *(uint *)(current_block + 4) = next_block_size_flag | 1;\n    *(int *)(memory_start + 8) = current_block;\n    if (block_size_flag <= next_block_size_flag) {\n      adjust_memory_allocation_00083d00(memory_context,*(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    block_size_flag = block_size_flag & 1;\n    *(uint *)(next_block + 4) = next_block_size_flag;\n    if (block_size_flag == 0) {\n      current_block = current_block - *(int *)(block_to_merge + -8);\n      prev_block = *(int *)(current_block + 8);\n      block_size = block_size + *(int *)(block_to_merge + -8);\n      if (prev_block == memory_start + 8) {\n        block_size_flag = 1;\n      }\n      else {\n        temp_block = *(int *)(current_block + 0xc);\n        *(int *)(prev_block + 0xc) = temp_block;\n        *(int *)(temp_block + 8) = prev_block;\n      }\n    }\n    else {\n      block_size_flag = 0;\n    }\n    if (-1 < *(int *)(next_block + next_block_size_flag + 4) << 0x1f) {\n      block_size = block_size + next_block_size_flag;\n      prev_block = *(int *)(next_block + 8);\n      if ((block_size_flag == 0) && (prev_block == DAT_00083f28)) {\n        *(int *)(memory_start + 0x14) = current_block;\n        *(int *)(memory_start + 0x10) = current_block;\n        *(int *)(current_block + 0xc) = prev_block;\n        *(int *)(current_block + 8) = prev_block;\n        *(uint *)(current_block + 4) = block_size | 1;\n        *(uint *)(current_block + block_size) = block_size;\n        goto LAB_00083e30;\n      }\n      next_block = *(int *)(next_block + 0xc);\n      *(int *)(prev_block + 0xc) = next_block;\n      *(int *)(next_block + 8) = prev_block;\n    }\n    *(uint *)(current_block + 4) = block_size | 1;\n    *(uint *)(current_block + block_size) = block_size;\n    if (block_size_flag == 0) {\n      if (block_size < 0x200) {\n        block_size_flag = *(uint *)(memory_start + 4);\n        prev_block = memory_start + (block_size & 0xfffffff8);\n        next_block = *(int *)(prev_block + 8);\n        *(int *)(current_block + 8) = next_block;\n        *(int *)(current_block + 0xc) = prev_block;\n        *(uint *)(memory_start + 4) = block_size_flag | 1 << ((int)(block_size >> 3) >> 2 & 0xffU);\n        *(int *)(prev_block + 8) = current_block;\n        *(int *)(next_block + 0xc) = current_block;\n        do_nothing_0008259c(memory_context);\n        return;\n      }\n      block_size_flag = block_size >> 9;\n      if (block_size_flag < 5) {\n        next_block = (block_size >> 6) + 0x38;\n        prev_block = next_block * 2;\n      }\n      else if (block_size_flag < 0x15) {\n        next_block = block_size_flag + 0x5b;\n        prev_block = next_block * 2;\n      }\n      else if (block_size_flag < 0x55) {\n        next_block = (block_size >> 0xc) + 0x6e;\n        prev_block = next_block * 2;\n      }\n      else if (block_size_flag < 0x155) {\n        next_block = (block_size >> 0xf) + 0x77;\n        prev_block = next_block * 2;\n      }\n      else if (block_size_flag < 0x555) {\n        next_block = (block_size >> 0x12) + 0x7c;\n        prev_block = next_block * 2;\n      }\n      else {\n        prev_block = 0xfc;\n        next_block = 0x7e;\n      }\n      memory_start = memory_start + prev_block * 4;\n      prev_block = *(int *)(memory_start + 8);\n      if (prev_block == memory_start) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (next_block >> 2 & 0xffU);\n        memory_start = prev_block;\n      }\n      else {\n        do {\n          if ((*(uint *)(prev_block + 4) & 0xfffffffc) <= block_size) break;\n          prev_block = *(int *)(prev_block + 8);\n        } while (memory_start != prev_block);\n        memory_start = *(int *)(prev_block + 0xc);\n      }\n      *(int *)(current_block + 0xc) = memory_start;\n      *(int *)(current_block + 8) = prev_block;\n      *(int *)(memory_start + 8) = current_block;\n      *(int *)(prev_block + 0xc) = current_block;\n    }\n  }\nLAB_00083e30:\n  do_nothing_0008259c(memory_context);\n  return;\n}\n\n",
            "called": [
                "FUN_0008259c",
                "FUN_00082598",
                "FUN_00083d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_000825b0",
                "FUN_00083808",
                "FUN_00083adc",
                "FUN_00081e14"
            ],
            "imported": true,
            "current_name": "merge_memory_blocks_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "bVar1": "positive_diff",
                "FUN_00081bf4": "compare_and_combine_00081bf4",
                "param_1": "value1",
                "param_2": "value2",
                "uVar3": "double_value2",
                "uVar2": "double_value1",
                "uVar4": "combined_value",
                "bVar5": "is_zero"
            },
            "code": "\nuint compare_and_combine_00081bf4(uint value1,uint value2)\n\n{\n  bool positive_diff;\n  uint double_value1;\n  uint double_value2;\n  uint combined_value;\n  bool is_zero;\n  \n  double_value1 = value1 * 2;\n  double_value2 = value2 * 2;\n  if (((int)double_value1 >> 0x18 == -1 || (int)double_value2 >> 0x18 == -1) &&\n     ((((int)double_value1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) ||\n      (((int)double_value2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_value = double_value1 | value2 & 0x7fffffff;\n  is_zero = combined_value == 0;\n  if (!is_zero) {\n    combined_value = value1 ^ value2;\n    is_zero = combined_value == 0;\n  }\n  positive_diff = -1 < (int)combined_value;\n  if (positive_diff) {\n    value1 = double_value1 + value2 * -2;\n    is_zero = value1 == 0;\n  }\n  if ((positive_diff && double_value2 <= double_value1) && !is_zero) {\n    value1 = (int)value2 >> 0x1f;\n  }\n  if (!positive_diff || double_value2 > double_value1) {\n    value1 = ~((int)value2 >> 0x1f);\n  }\n  if (!is_zero) {\n    value1 = value1 | 1;\n  }\n  return value1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": true,
            "current_name": "compare_and_combine_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "ppcVar4": "funcPointer",
                "iVar3": "counter",
                "FUN_00081d7c": "executeFunctions_00081d7c",
                "iVar5": "iterations",
                "puVar2": "startPointer",
                "puVar1": "endPointer"
            },
            "code": "\nvoid executeFunctions_00081d7c(void)\n\n{\n  undefined *endPointer;\n  undefined *startPointer;\n  int counter;\n  code **funcPointer;\n  int iterations;\n  \n  iterations = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (iterations != 0) {\n    funcPointer = (code **)(PTR_DAT_00081dc0 + -4);\n    counter = 0;\n    do {\n      counter = counter + 1;\n      funcPointer = funcPointer + 1;\n      (**funcPointer)();\n    } while (iterations != counter);\n  }\n  startPointer = PTR_DAT_00081dc8;\n  endPointer = PTR_LAB_00081dc4;\n  do_nothing_00085858();\n  iterations = (int)endPointer - (int)startPointer >> 2;\n  if (iterations != 0) {\n    funcPointer = (code **)(startPointer + -4);\n    counter = 0;\n    do {\n      counter = counter + 1;\n      funcPointer = funcPointer + 1;\n      (**funcPointer)();\n    } while (iterations != counter);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00080118",
                "FUN_00085858",
                "FUN_00083974"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "executeFunctions_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "combine_and_return_00081c5c",
                "param_1": "input_value1",
                "param_2": "input_value2"
            },
            "code": "\nundefined8 combine_and_return_00081c5c(undefined4 input_value1,undefined4 input_value2)\n\n{\n  compare_and_combine_00081bf4();\n  return CONCAT44(input_value2,input_value1);\n}\n\n",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "imported": true,
            "current_name": "combine_and_return_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "iVar1": "decrementedValue",
                "FUN_00081388": "decrementAndCheck_00081388"
            },
            "code": "\nvoid decrementAndCheck_00081388(void)\n\n{\n  int decrementedValue;\n  \n  if ((*DAT_000813a0 != -1) && (decrementedValue = *DAT_000813a0 + -1, *DAT_000813a0 = decrementedValue, decrementedValue == 0)) {\n    (*DAT_000813a4)();\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": true,
            "current_name": "decrementAndCheck_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "imported": true,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "puVar3": "next_source_ptr",
                "puVar4": "aligned_source_ptr",
                "FUN_00082994": "optimized_string_copy_00082994",
                "param_1": "destination",
                "puVar7": "aligned_destination_ptr",
                "param_2": "source",
                "cVar1": "current_char",
                "uVar2": "current_ushort",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "bVar8": "null_terminator_found"
            },
            "code": "\nvoid optimized_string_copy_00082994(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_ushort;\n  uint *next_source_ptr;\n  uint *aligned_source_ptr;\n  uint current_uint;\n  uint next_uint;\n  uint *aligned_destination_ptr;\n  bool null_terminator_found;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    aligned_source_ptr = source;\n    if (((uint)source & 1) != 0) {\n      aligned_source_ptr = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = aligned_source_ptr;\n    if (((uint)aligned_source_ptr & 2) != 0) {\n      source = (uint *)((int)aligned_source_ptr + 2);\n      current_ushort = *(ushort *)aligned_source_ptr;\n      null_terminator_found = (current_ushort & 0xff) == 0;\n      if (null_terminator_found) {\n        *(char *)destination = (char)current_ushort;\n      }\n      else {\n        *(ushort *)destination = current_ushort;\n        null_terminator_found = (current_ushort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (null_terminator_found) {\n        return;\n      }\n    }\n  }\n  current_uint = *source;\n  aligned_source_ptr = source + 1;\n  aligned_destination_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    aligned_destination_ptr = destination + 1;\n    *destination = current_uint;\n    aligned_source_ptr = source + 2;\n    current_uint = source[1];\n  }\n  while( true ) {\n    next_source_ptr = aligned_source_ptr + 1;\n    next_uint = *aligned_source_ptr;\n    destination = aligned_destination_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    destination = aligned_destination_ptr + 1;\n    *aligned_destination_ptr = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    aligned_source_ptr = aligned_source_ptr + 2;\n    current_uint = *next_source_ptr;\n    aligned_destination_ptr = aligned_destination_ptr + 2;\n    *destination = next_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)current_uint;\n    next_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (next_uint != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "optimized_string_copy_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "puVar2": "buffer_2",
                "puVar3": "buffer_3",
                "puVar4": "buffer_4",
                "param_1": "input_param_1",
                "puVar5": "buffer_5",
                "puVar6": "buffer_6",
                "FUN_00080c0c": "initialize_buffers_and_memory_00080c0c",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "puVar1": "buffer_1"
            },
            "code": "\nvoid initialize_buffers_and_memory_00080c0c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  undefined *buffer_1;\n  undefined *buffer_2;\n  undefined *buffer_3;\n  undefined *buffer_4;\n  undefined *buffer_5;\n  undefined *buffer_6;\n  \n  buffer_2 = PTR_DAT_00080ca4;\n  buffer_1 = PTR_DAT_00080ca0;\n  initialize_memory_000813a8(PTR_DAT_00080ca0);\n  initialize_memory_000813a8(buffer_2);\n  buffer_5 = PTR_DAT_00080cd8;\n  buffer_3 = PTR_DAT_00080cac;\n  initializeBuffer_000814e4(PTR_DAT_00080cb0,DAT_00080ca8,8,8,buffer_1,buffer_2,input_param_3);\n  buffer_1 = PTR_DAT_00080cb4;\n  initialize_memory_000813a8(buffer_5);\n  buffer_6 = PTR_DAT_00080cdc;\n  initialize_memory_000813a8(buffer_3);\n  buffer_2 = PTR_DAT_00080cb8;\n  initialize_memory_000813a8(buffer_1);\n  buffer_4 = PTR_DAT_00080cbc;\n  initialize_memory_000813a8(buffer_6);\n  initialize_memory_000813a8(buffer_2);\n  initialize_memory_000813a8(buffer_4);\n  initialize_and_update_buffer_000815d4(PTR_DAT_00080cc4,DAT_00080cc0,0x11,0x11,buffer_5,buffer_6);\n  initialize_and_update_buffer_000815d4(PTR_DAT_00080ccc,DAT_00080cc8,0x12,0x12,buffer_3,buffer_2);\n  initialize_and_update_buffer_000815d4(PTR_DAT_00080cd4,DAT_00080cd0,0x14,0x14,buffer_1,buffer_4);\n  return;\n}\n\n",
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": true,
            "current_name": "initialize_buffers_and_memory_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "uVar1": "result",
                "param_1": "baseAddress",
                "FUN_00080d2e": "updateBitOperations_00080d2e",
                "param_2": "operationType",
                "param_3": "bitMask"
            },
            "code": "\nvoid updateBitOperations_00080d2e(int baseAddress,undefined4 operationType,uint bitMask)\n\n{\n  uint result;\n  \n  *(uint *)(baseAddress + 0x44) = bitMask;\n  switch(operationType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~bitMask;\n    break;\n  case 2:\n    result = *(uint *)(baseAddress + 0x70) | bitMask;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = result;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = bitMask;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "updateBitOperations_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "bVar10": "borrow",
                "iVar4": "sumExp",
                "iVar5": "tempSumExp",
                "iVar7": "tempVar",
                "param_1": "input1",
                "lVar1": "longProduct",
                "FUN_00081944": "floatingPointMultiplication_00081944",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "tempExp1",
                "uVar3": "exp1",
                "uVar2": "tempExp2",
                "bVar9": "condition",
                "uVar6": "tempProduct",
                "uVar8": "result"
            },
            "code": "\nuint floatingPointMultiplication_00081944(uint input1,uint input2,undefined4 unusedParam,uint tempExp1)\n\n{\n  longlong longProduct;\n  uint tempExp2;\n  uint exp1;\n  int sumExp;\n  int tempSumExp;\n  uint tempProduct;\n  int tempVar;\n  uint result;\n  bool condition;\n  bool borrow;\n  \n  exp1 = input1 >> 0x17 & 0xff;\n  condition = exp1 == 0;\n  if (!condition) {\n    tempExp1 = input2 >> 0x17 & 0xff;\n    condition = tempExp1 == 0;\n  }\n  if (!condition) {\n    condition = exp1 == 0xff;\n  }\n  if (!condition) {\n    condition = tempExp1 == 0xff;\n  }\n  if (condition) {\n    tempExp1 = input2 >> 0x17 & 0xff;\n    if (exp1 == 0xff || tempExp1 == 0xff) {\n      condition = input1 == 0 || input1 == 0x80000000;\n      tempExp2 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition = input2 == 0;\n        tempExp2 = input1;\n      }\n      if (!condition) {\n        condition = input2 == 0x80000000;\n      }\n      result = tempExp2;\n      if (((condition) || ((exp1 == 0xff && ((tempExp2 & 0x7fffff) != 0)))) ||\n         ((tempExp1 == 0xff && (result = input2, (input2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      tempExp2 = tempExp2 ^ input2;\n      goto LAB_00081a94;\n    }\n    condition = (input1 & 0x7fffffff) == 0;\n    if (!condition) {\n      condition = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition = exp1 == 0;\n    tempExp2 = input1 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        input1 = input1 << 1;\n        condition = (input1 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exp1 = exp1 - 1;\n    }\n    input1 = input1 | tempExp2;\n    condition = tempExp1 == 0;\n    tempExp2 = input2 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        input2 = input2 << 1;\n        condition = (input2 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      tempExp1 = tempExp1 - 1;\n    }\n    input2 = input2 | tempExp2;\n  }\n  sumExp = exp1 + tempExp1;\n  result = input1 ^ input2;\n  exp1 = input1 << 9;\n  condition = exp1 == 0;\n  if (!condition) {\n    input2 = input2 << 9;\n    condition = input2 == 0;\n  }\n  if (condition) {\n    if (exp1 == 0) {\n      input2 = input2 << 9;\n    }\n    tempExp2 = result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    borrow = SBORROW4(sumExp,0x7f);\n    tempSumExp = sumExp + -0x7f;\n    condition = tempSumExp == 0;\n    tempVar = tempSumExp;\n    if (!condition && 0x7e < sumExp) {\n      borrow = SBORROW4(0xff,tempSumExp);\n      tempVar = 0xff - tempSumExp;\n      condition = tempSumExp == 0xff;\n    }\n    if (!condition && tempVar < 0 == borrow) {\n      tempExp2 = tempExp2 | tempSumExp * 0x800000;\n    }\n    if (!condition && tempVar < 0 == borrow) {\n      return tempExp2;\n    }\n    tempExp2 = tempExp2 | 0x800000;\n    tempProduct = 0;\n    borrow = SBORROW4(tempSumExp,1);\n    result = sumExp - 0x80;\n    condition = result == 0;\n    exp1 = result;\n  }\n  else {\n    longProduct = (ulonglong)(exp1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    tempProduct = (uint)longProduct;\n    tempExp2 = (uint)((ulonglong)longProduct >> 0x20);\n    condition = tempExp2 < 0x800000;\n    if (condition) {\n      tempExp2 = tempExp2 << 1;\n    }\n    if (condition) {\n      tempExp2 = tempExp2 | tempProduct >> 0x1f;\n      tempProduct = tempProduct << 1;\n    }\n    tempExp2 = result & 0x80000000 | tempExp2;\n    result = (sumExp + -0x7f) - (uint)condition;\n    borrow = SBORROW4(result,0xfd);\n    condition = result == 0xfd;\n    exp1 = result - 0xfd;\n    if (result < 0xfe) {\n      tempExp2 = tempExp2 + result * 0x800000 + (uint)(0x7fffffff < tempProduct);\n      if (tempProduct == 0x80000000) {\n        tempExp2 = tempExp2 & 0xfffffffe;\n      }\n      return tempExp2;\n    }\n  }\n  if (condition || (int)exp1 < 0 != borrow) {\n    condition = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || condition != SCARRY4(result,0x19)) {\n      tempExp2 = tempExp2 & 0x80000000;\n    }\n    if (result != 0xffffffe7 && condition == SCARRY4(result,0x19)) {\n      exp1 = (tempExp2 << 1) >> (-result & 0xff);\n      result = tempExp2 << (result + 0x20 & 0xff);\n      exp1 = ((uint)((tempExp2 & 0x80000000) != 0) << 0x1f | exp1 >> 1) + (uint)((byte)exp1 & 1);\n      if ((tempProduct | result << 1) == 0) {\n        exp1 = exp1 & ~(result >> 0x1f);\n      }\n      return exp1;\n    }\n    return tempExp2;\n  }\nLAB_00081a94:\n  return tempExp2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "floatingPointMultiplication_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "uVar1": "short_value",
                "iVar4": "processing_result",
                "puVar3": "undefined_ptr",
                "param_1": "input_data",
                "param_2": "data_to_process",
                "param_3": "data_structure",
                "param_4": "memory_block",
                "FUN_000844c4": "process_input_data_000844c4",
                "uVar2": "uint_value"
            },
            "code": "\nuint process_input_data_000844c4(int input_data,uint data_to_process,undefined4 *data_structure,undefined4 memory_block)\n\n{\n  ushort short_value;\n  uint uint_value;\n  undefined *undefined_ptr;\n  int processing_result;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  short_value = *(ushort *)(data_structure + 3);\n  uint_value = (uint)short_value;\n  data_structure[2] = data_structure[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (processing_result = data_structure[4], processing_result == 0)) {\n    processing_result = process_memory_blocks_00083808(input_data,data_structure,short_value,uint_value,memory_block);\n    if (processing_result != 0) {\n      return 0xffffffff;\n    }\n    short_value = *(ushort *)(data_structure + 3);\n    processing_result = data_structure[4];\n    uint_value = (uint)short_value;\n  }\n  data_to_process = data_to_process & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    undefined_ptr = (undefined *)*data_structure;\n    processing_result = (int)undefined_ptr - processing_result;\n    if (processing_result < (int)data_structure[5]) {\nLAB_000844f6:\n      processing_result = processing_result + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_structure[0x19] = data_structure[0x19] & 0xffffdfff;\n    undefined_ptr = (undefined *)*data_structure;\n    *(ushort *)(data_structure + 3) = short_value | 0x2000;\n    processing_result = (int)undefined_ptr - processing_result;\n    if (processing_result < (int)data_structure[5]) goto LAB_000844f6;\n  }\n  processing_result = process_data_00083adc(input_data,data_structure);\n  if (processing_result != 0) {\n    return 0xffffffff;\n  }\n  undefined_ptr = (undefined *)*data_structure;\n  processing_result = 1;\nLAB_000844f8:\n  data_structure[2] = data_structure[2] + -1;\n  *data_structure = undefined_ptr + 1;\n  *undefined_ptr = (char)data_to_process;\n  if (((data_structure[5] == processing_result) ||\n      (((int)((uint)*(ushort *)(data_structure + 3) << 0x1f) < 0 && (data_to_process == 10)))) &&\n     (processing_result = process_data_00083adc(input_data,data_structure), processing_result != 0)) {\n    return 0xffffffff;\n  }\n  return data_to_process;\n}\n\n",
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "process_input_data_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "iVar1": "leading_zeroes",
                "iVar4": "intermediate_value",
                "param_1": "input_value",
                "uVar3": "result",
                "FUN_0008189c": "calculate_transformed_value_0008189c",
                "uVar2": "shift_amount",
                "uVar5": "temp_value"
            },
            "code": "\nuint calculate_transformed_value_0008189c(uint input_value)\n\n{\n  int leading_zeroes;\n  uint shift_amount;\n  uint result;\n  int intermediate_value;\n  uint temp_value;\n  \n  result = input_value & 0x80000000;\n  if ((int)result < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes - 8;\n  intermediate_value = ((result | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes) {\n    temp_value = 0 << (shift_amount & 0xff);\n    result = intermediate_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < temp_value);\n    if (temp_value == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shift_amount = input_value << (leading_zeroes + 0x18U & 0xff);\n  result = intermediate_value + ((input_value >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    result = result & ~(shift_amount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_transformed_value_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "puVar2": "temp_dest",
                "puVar3": "temp_ptr",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "temp_src",
                "FUN_0008234c": "copy_memory_0008234c",
                "uVar5": "alignment_diff",
                "uVar4": "remaining_length",
                "bVar6": "condition"
            },
            "code": "\nundefined4 * copy_memory_0008234c(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  undefined4 *temp_src;\n  undefined4 *temp_dest;\n  undefined4 *temp_ptr;\n  uint remaining_length;\n  uint alignment_diff;\n  bool condition;\n  \n  temp_dest = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (length < 8) {\n      alignment_diff = length - 4;\n      if (3 < length) {\n        do {\n          temp_src = src;\n          temp_ptr = temp_dest;\n          condition = alignment_diff != 0;\n          alignment_diff = alignment_diff - 1;\n          *(undefined *)temp_ptr = *(undefined *)temp_src;\n          temp_dest = (undefined4 *)((int)temp_ptr + 1);\n          src = (undefined4 *)((int)temp_src + 1);\n        } while (condition);\n        *(undefined *)(undefined4 *)((int)temp_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)temp_src + 1);\n        *(undefined *)((int)temp_ptr + 2) = *(undefined *)((int)temp_src + 2);\n        *(undefined *)((int)temp_ptr + 3) = *(undefined *)((int)temp_src + 3);\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      alignment_diff = 4 - ((uint)dest & 3);\n      length = length - alignment_diff;\n      temp_src = dest;\n      temp_ptr = src;\n      if (((uint)dest & 1) != 0) {\n        temp_ptr = (undefined4 *)((int)src + 1);\n        temp_src = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      temp_dest = temp_src;\n      src = temp_ptr;\n      if ((alignment_diff & 2) != 0) {\n        src = (undefined4 *)((int)temp_ptr + 2);\n        temp_dest = (undefined4 *)((int)temp_src + 2);\n        *(undefined2 *)temp_src = *(undefined2 *)temp_ptr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *temp_dest = *src;\n    temp_dest[1] = src[1];\n    temp_dest[2] = src[2];\n    temp_dest[3] = src[3];\n    temp_dest[4] = src[4];\n    temp_dest[5] = src[5];\n    temp_dest[6] = src[6];\n    temp_dest[7] = src[7];\n    temp_dest[8] = src[8];\n    temp_dest[9] = src[9];\n    temp_dest[10] = src[10];\n    temp_dest[0xb] = src[0xb];\n    temp_dest[0xc] = src[0xc];\n    temp_dest[0xd] = src[0xd];\n    temp_dest[0xe] = src[0xe];\n    temp_dest[0xf] = src[0xf];\n    temp_dest = temp_dest + 0x10;\n    src = src + 0x10;\n    length = length - 0x40;\n  }\n  remaining_length = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *temp_dest = *src;\n      temp_dest[1] = src[1];\n      temp_dest[2] = src[2];\n      temp_dest[3] = src[3];\n      temp_dest = temp_dest + 4;\n      src = src + 4;\n      condition = 0xf < remaining_length;\n      remaining_length = remaining_length - 0x10;\n    } while (condition);\n  }\n  alignment_diff = remaining_length + 0xc;\n  temp_ptr = temp_dest;\n  temp_src = src;\n  if (0xfffffff3 < remaining_length) {\n    do {\n      src = temp_src + 1;\n      *temp_ptr = *temp_src;\n      condition = 3 < alignment_diff;\n      alignment_diff = alignment_diff - 4;\n      temp_dest = temp_ptr + 1;\n      temp_ptr = temp_ptr + 1;\n      temp_src = src;\n    } while (condition);\n  }\nLAB_000823d0:\n  if (alignment_diff + 4 != 0) {\n    temp_src = temp_dest;\n    temp_ptr = src;\n    if ((alignment_diff & 1) != 0) {\n      temp_ptr = (undefined4 *)((int)src + 1);\n      temp_src = (undefined4 *)((int)temp_dest + 1);\n      *(undefined *)temp_dest = *(undefined *)src;\n    }\n    if ((alignment_diff + 4 & 2) != 0) {\n      *(undefined2 *)temp_src = *(undefined2 *)temp_ptr;\n    }\n  }\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": true,
            "current_name": "copy_memory_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "puVar1": "memory_pointer",
                "FUN_00080a68": "initialize_memory_and_settings_00080a68"
            },
            "code": "\nvoid initialize_memory_and_settings_00080a68(void)\n\n{\n  undefined *memory_pointer;\n  \n  memory_pointer = PTR_DAT_00080a94;\n  initialize_and_update_memory_00081682(PTR_DAT_00080a94,PTR_s__00080a98);\n  allocate_and_update_memory_00081d5c(memory_pointer,DAT_00080aa0,DAT_00080a9c);\n  memory_pointer = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  memory_pointer[5] = 0;\n  memory_pointer[6] = 6;\n  *(undefined2 *)(memory_pointer + 0x56) = 1000;\n  return;\n}\n\n",
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": true,
            "current_name": "initialize_memory_and_settings_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "iVar1": "memory_status",
                "param_1": "memory_block",
                "param_2": "source_data",
                "param_3": "new_size",
                "FUN_0008165c": "update_memory_block_0008165c"
            },
            "code": "\nundefined4 * update_memory_block_0008165c(undefined4 *memory_block,undefined4 source_data,undefined4 new_size)\n\n{\n  int memory_status;\n  \n  memory_status = ensure_memory_capacity_0008163a(memory_block,new_size);\n  if (memory_status == 0) {\n    reset_memory_block_0008160c(memory_block);\n  }\n  else {\n    memory_block[2] = new_size;\n    optimized_string_copy_00082994(*memory_block,source_data);\n  }\n  return memory_block;\n}\n\n",
            "called": [
                "FUN_0008163a",
                "FUN_0008160c",
                "FUN_00082994"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": true,
            "current_name": "update_memory_block_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "param_1": "integer_1",
                "param_2": "integer_2",
                "FUN_000815f8": "combine_two_integers_000815f8"
            },
            "code": "\nuint combine_two_integers_000815f8(int integer_1,uint integer_2)\n\n{\n  return integer_2 | integer_1 << 8;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": true,
            "current_name": "combine_two_integers_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "pcVar3": "char_ptr",
                "param_1": "buffer",
                "param_2": "search_char",
                "param_3": "buffer_length",
                "puVar1": "current_ptr",
                "uVar2": "xor_result",
                "pcVar4": "end_ptr",
                "bVar5": "is_last_char"
            },
            "code": "\nuint * find_char_in_buffer_00084384(uint *buffer,char search_char,uint *buffer_length)\n\n{\n  uint *current_ptr;\n  uint xor_result;\n  char *char_ptr;\n  char *end_ptr;\n  bool is_last_char;\n  \n  if (((uint)buffer & 3) == 0) {\nLAB_000843b4:\n    current_ptr = buffer;\n    if ((uint *)0x3 < buffer_length) {\n      do {\n        xor_result = *buffer ^ CONCAT22(CONCAT11(search_char,search_char),CONCAT11(search_char,search_char));\n        current_ptr = buffer;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        buffer_length = buffer_length + -1;\n        current_ptr = buffer + 1;\n        buffer = buffer + 1;\n      } while ((uint *)0x3 < buffer_length);\n    }\n    buffer = buffer_length;\n    end_ptr = (char *)((int)buffer + -1);\n    if ((buffer != (uint *)0x0) && (buffer = current_ptr, *(char *)current_ptr != search_char)) {\n      char_ptr = (char *)0x0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        is_last_char = char_ptr == end_ptr;\n        char_ptr = char_ptr + 1;\n        if (is_last_char) goto LAB_000843dc;\n      } while (*(char *)buffer != search_char);\n    }\n  }\n  else if (buffer_length == (uint *)0x0) {\nLAB_000843dc:\n    buffer = (uint *)0x0;\n  }\n  else if (*(char *)buffer != search_char) {\n    current_ptr = (uint *)((int)buffer + 1);\n    buffer_length = (uint *)((int)buffer_length + -1);\n    do {\n      buffer = current_ptr;\n      if (((uint)buffer & 3) == 0) goto LAB_000843b4;\n      if (buffer_length == (uint *)0x0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)buffer + 1);\n      buffer_length = (uint *)((int)buffer_length + -1);\n    } while (*(char *)buffer != search_char);\n  }\n  return buffer;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_bitwise_flags_00081034",
                "param_1": "baseAddress",
                "param_2": "flag1",
                "param_3": "flag2"
            },
            "code": "\nvoid updateBitwiseFlags_00081034(int baseAddress,uint flag1,uint flag2)\n\n{\n  *(uint *)(baseAddress + 4) = flag1 | *(uint *)(baseAddress + 4) | (flag2 & 1) << 7;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_bitwise_flags_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "iVar3": "blockIndex",
                "iVar4": "baseAddress",
                "puVar2": "memoryBlock",
                "FUN_00083974": "process_memory_allocation_00083974",
                "param_1": "inputParam",
                "puVar1": "memoryAddress"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n\nundefined4 processMemoryAllocation_00083974(undefined4 inputParam)\n\n{\n  undefined *memoryAddress;\n  undefined4 *memoryBlock;\n  int blockIndex;\n  int baseAddress;\n  \n  memoryAddress = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return inputParam;\n  }\n  baseAddress = *(int *)PTR_DAT_0008396c;\n  memoryBlock = *(undefined4 **)(baseAddress + 0x148);\n  if (memoryBlock == (undefined4 *)0x0) {\n    memoryBlock = (undefined4 *)(baseAddress + 0x14c);\n    *(undefined4 **)(baseAddress + 0x148) = memoryBlock;\n  }\n  blockIndex = memoryBlock[1];\n  if (0x1f < blockIndex) {\n    if ((DAT_00083970 == 0) ||\n       (memoryBlock = (undefined4 *)allocate_memory_wrapper_00081df4(400), memoryBlock == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *memoryBlock = *(undefined4 *)(baseAddress + 0x148);\n    memoryBlock[1] = 0;\n    blockIndex = 0;\n    *(undefined4 **)(baseAddress + 0x148) = memoryBlock;\n    memoryBlock[0x62] = 0;\n    memoryBlock[99] = 0;\n  }\n  memoryBlock[1] = blockIndex + 1;\n  memoryBlock[blockIndex + 2] = memoryAddress;\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "process_memory_allocation_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "iVar2": "return_value",
                "FUN_00084700": "update_value_if_condition_met_00084700",
                "param_1": "output_value",
                "param_2": "input_value1",
                "param_3": "input_value2",
                "param_4": "input_value3",
                "puVar1": "pointer_to_data"
            },
            "code": "\nvoid update_value_if_condition_met_00084700(int *output_value,undefined4 input_value1,undefined4 input_value2,undefined4 input_value3)\n\n{\n  undefined *pointer_to_data;\n  int return_value;\n  \n  pointer_to_data = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  return_value = return_zero_000811c2(input_value1,input_value2,input_value3);\n  if ((return_value == -1) && (*(int *)pointer_to_data != 0)) {\n    *output_value = *(int *)pointer_to_data;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "imported": true,
            "current_name": "update_value_if_condition_met_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "undefined4": "uint32_t",
                "thunk_FUN_00081714": "retrieve_data_value_thunk_00081714"
            },
            "code": "\nuint32_t retrieve_data_value_thunk_00081714(void)\n\n{\n  return *(uint32_t *)PTR_DAT_0008171c;\n}\n\n",
            "called": [
                "FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000804a8",
                "FUN_0008043e",
                "FUN_00080258",
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "retrieve_data_value_thunk_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag",
                "FUN_00081ca8": "check_swap_and_combine_00081ca8"
            },
            "code": "\nbool check_swap_and_combine_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  swap_and_combine_00081c54();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "check_swap_and_combine_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "iVar3": "bitmaskCheckResult",
                "iVar5": "arrayIndex",
                "puVar2": "dataPointer2",
                "param_1": "index",
                "FUN_00081318": "update_data_structure_00081318",
                "param_2": "value",
                "param_3": "data",
                "puVar1": "dataPointer1",
                "uVar4": "tempData"
            },
            "code": "\nvoid updateDataStructure_00081318(int index,int value,undefined4 data)\n\n{\n  undefined *dataPointer1;\n  undefined *dataPointer2;\n  int bitmaskCheckResult;\n  undefined4 tempData;\n  int arrayIndex;\n  \n  dataPointer2 = PTR_DAT_00081384;\n  dataPointer1 = PTR_DAT_00081380;\n  if (PTR_DAT_00081380[index * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081384[index] & 0xf) == 5) {\n      process_function_00081210(index,1,data,5,index,value,data);\n    }\n    dataPointer2[index] = dataPointer2[index] & 0xf | (byte)(value << 4);\n    arrayIndex = *(int *)(dataPointer1 + index * 0x1c);\n    tempData = *(undefined4 *)(dataPointer1 + index * 0x1c + 4);\n    bitmaskCheckResult = check_bitmask_00080e04(arrayIndex,tempData);\n    if (bitmaskCheckResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(arrayIndex + 100) = tempData;\n        return;\n      }\n      *(undefined4 *)(arrayIndex + 0x60) = tempData;\n      return;\n    }\n    updateArrayValues_00080d7a(arrayIndex,tempData,value,0,1);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_000804a8",
                "FUN_00080164",
                "FUN_00080258",
                "FUN_000801b0",
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_data_structure_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_undefined4_value_00081714"
            },
            "code": "\nundefined4 get_undefined4_value_00081714(void)\n\n{\n  return *(undefined4 *)PTR_DAT_0008171c;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": true,
            "current_name": "get_undefined4_value_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "iVar1": "updatedValue",
                "param_1": "status",
                "FUN_0008449c": "update_status_and_value_0008449c",
                "param_2": "dataStructure",
                "uVar2": "updatedStatus"
            },
            "code": "\nvoid updateStatusAndValue_0008449c(undefined4 status,int dataStructure)\n\n{\n  int updatedValue;\n  ushort updatedStatus;\n  \n  updatedValue = update_value_if_condition_met_00084700(status,(int)*(short *)(dataStructure + 0xe));\n  if (updatedValue == -1) {\n    updatedStatus = *(ushort *)(dataStructure + 0xc) & 0xefff;\n  }\n  else {\n    updatedStatus = *(ushort *)(dataStructure + 0xc) | 0x1000;\n  }\n  if (updatedValue != -1) {\n    *(int *)(dataStructure + 0x50) = updatedValue;\n  }\n  *(ushort *)(dataStructure + 0xc) = updatedStatus;\n  return;\n}\n\n",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": true,
            "current_name": "update_status_and_value_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_000825b0",
                "FUN_00083d00",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "imported": true,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "uVar1": "temp_result",
                "param_1": "input_one",
                "lVar2": "intermediate_result",
                "param_2": "input_two",
                "param_3": "multiplier_low",
                "FUN_0008477c": "calculate_differences_0008477c",
                "param_4": "multiplier_high",
                "param_5": "output_array"
            },
            "code": "\nvoid calculate_differences_0008477c(uint input_one,int input_two,undefined4 multiplier_low,undefined4 multiplier_high,int *output_array)\n\n{\n  uint temp_result;\n  longlong intermediate_result;\n  \n  intermediate_result = divide_large_numbers_000847e0();\n  intermediate_result = intermediate_result * CONCAT44(multiplier_high,multiplier_low);\n  temp_result = (uint)intermediate_result;\n  *output_array = input_one - temp_result;\n  output_array[1] = (input_two - (int)((ulonglong)intermediate_result >> 0x20)) - (uint)(input_one < temp_result);\n  return;\n}\n\n",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": true,
            "current_name": "calculate_differences_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "bVar1": "buffer_full",
                "iVar4": "function_status",
                "param_1": "data_ptr",
                "cVar3": "result",
                "FUN_000801b0": "process_data_000801b0",
                "uVar2": "current_byte",
                "bVar5": "byte_counter"
            },
            "code": "\nint process_data_000801b0(int **data_ptr)\n\n{\n  bool buffer_full;\n  undefined current_byte;\n  char result;\n  int function_status;\n  byte byte_counter;\n  \n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    update_data_structure_00081318(*(byte *)((int)data_ptr + 6),0);\n  }\n  buffer_full = false;\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    while (function_status = (**(code **)(**data_ptr + 8))(), function_status != 0) {\n      byte_counter = *(byte *)((int)data_ptr + 0x49);\n      current_byte = (**(code **)(**data_ptr + 0xc))();\n      result = *(char *)((int)data_ptr + 0x49);\n      *(undefined *)((int)data_ptr + byte_counter + 9) = current_byte;\n      byte_counter = result + 1;\n      *(byte *)((int)data_ptr + 0x49) = byte_counter;\n      if (0x3f < byte_counter) {\n        buffer_full = true;\n      }\n    }\n  }\n  *(short *)(data_ptr + 0x14) = *(short *)(data_ptr + 0x14) + 1;\n  if (buffer_full) {\n    result = -3;\n    *(short *)(data_ptr + 0x15) = *(short *)(data_ptr + 0x15) + 1;\n  }\n  else {\n    result = *(char *)((int)data_ptr + 0x49);\n  }\n  return (int)result;\n}\n\n",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "uVar1": "next_index",
                "param_1": "buffer_base",
                "param_2": "new_value",
                "FUN_000813c2": "update_buffer_000813c2"
            },
            "code": "\nvoid update_buffer_000813c2(int buffer_base,undefined new_value)\n\n{\n  uint next_index;\n  \n  next_index = *(int *)(buffer_base + 0x80) + 1U & 0x7f;\n  if (next_index != *(uint *)(buffer_base + 0x84)) {\n    *(undefined *)(buffer_base + *(int *)(buffer_base + 0x80)) = new_value;\n    *(uint *)(buffer_base + 0x80) = next_index;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": true,
            "current_name": "update_buffer_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "param_1": "buffer",
                "param_6": "bufferLimit",
                "param_2": "bufferSize",
                "param_3": "bufferFlag",
                "param_4": "bufferOverflow",
                "param_5": "bufferIndex",
                "puVar1": "updateBufferPtr",
                "FUN_000814e4": "initializeBuffer_000814e4"
            },
            "code": "\nvoid initializeBuffer_000814e4(undefined4 *buffer,undefined4 bufferSize,undefined bufferFlag,undefined4 bufferOverflow,\n                 undefined4 bufferIndex,undefined4 bufferLimit)\n\n{\n  undefined *updateBufferPtr;\n  \n  buffer[1] = 0;\n  buffer[2] = 1000;\n  updateBufferPtr = PTR_PTR_updateBuffer_00081454_1_00081504;\n  buffer[6] = bufferSize;\n  *buffer = updateBufferPtr;\n  *(undefined *)(buffer + 7) = bufferFlag;\n  buffer[4] = bufferIndex;\n  buffer[8] = bufferOverflow;\n  buffer[5] = bufferLimit;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "imported": true,
            "current_name": "initializeBuffer_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "bVar1": "flag",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition",
                "FUN_00080d54": "updateArrayElements_00080d54"
            },
            "code": "\nvoid updateArrayElements_00080d54(undefined4 *array,undefined4 value,uint condition)\n\n{\n  bool flag;\n  \n  flag = (int)(condition << 0x1f) < 0;\n  array[0x11] = value;\n  if (flag) {\n    array[0x19] = value;\n  }\n  if (!flag) {\n    array[0x18] = value;\n  }\n  flag = (condition & 10) != 0;\n  if (flag) {\n    array[8] = value;\n  }\n  if (!flag) {\n    array[9] = value;\n  }\n  if (((int)(condition << 0x1e) < 0) || ((int)(condition << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": true,
            "current_name": "updateArrayElements_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "iVar1": "current_position",
                "param_1": "start_position",
                "param_2": "length",
                "cVar3": "bit_count",
                "uVar2": "checksum",
                "uVar4": "bit_value",
                "FUN_0008021c": "calculate_checksum_0008021c"
            },
            "code": "\nuint calculate_checksum_0008021c(int start_position,uint length)\n\n{\n  int current_position;\n  uint checksum;\n  char bit_count;\n  uint bit_value;\n  \n  checksum = 0xffff;\n  for (current_position = start_position; (current_position - start_position & 0xffU) < length; current_position = current_position + 1) {\n    checksum = checksum ^ *(byte *)(current_position + 9);\n    bit_count = '\\b';\n    do {\n      bit_value = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_value != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_count = bit_count + -1;\n    } while (bit_count != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": true,
            "current_name": "calculate_checksum_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = process_memory_blocks_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)process_input_data_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)find_first_null_byte_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)find_char_in_buffer_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          process_parameters_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = process_parameters_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    process_int_array_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = process_int_array_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00082ac0",
                "FUN_00084750",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00083b14"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": true,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "merge_memory_wrapper_00081e04",
                "param_1": "memoryBlockSize"
            },
            "code": "\nvoid mergeMemoryWrapper_00081e04(undefined4 memoryBlockSize)\n\n{\n  merge_memory_blocks_00083d9c(*DAT_00081e10,memoryBlockSize);\n  return;\n}\n\n",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "imported": true,
            "current_name": "merge_memory_wrapper_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "iVar1": "difference",
                "FUN_00084750": "process_parameters_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "code": "\nint process_parameters_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int difference;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  difference = calculate_difference_000847ac();\n  return difference;\n}\n\n",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_parameters_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "initializeSettings_00080e9c": "initializeSettings",
                "processParams_00080da0": "processParameters",
                "iVar3": "intVar1",
                "iVar4": "intVar2",
                "iVar5": "intVar3",
                "FUN_00080ae4": "main_function_00080ae4",
                "puVar2": "undefined4Ptr",
                "iVar6": "intVar4",
                "iVar7": "loopCounter",
                "update_bit_flags_00080e18": "updateBitFlags",
                "iVar8": "incrementedCounter",
                "update_bitwise_flags_00081034": "updateBitwiseFlags",
                "update_value_at_offset_0008106e": "updateValueAtOffset",
                "calculateResult_00080f9c": "calculateResult",
                "set_memory_value_00081066": "setMemoryValue",
                "puVar1": "uintPtr",
                "executeFunctions_00081d7c": "executeFunctions",
                "update_data_structure_00081318": "updateDataStructure"
            },
            "code": "\nvoid mainFunction_00080ae4(void)\n\n{\n  uint *uintPtr;\n  undefined4 *undefined4Ptr;\n  int intVar1;\n  int intVar2;\n  int intVar3;\n  int intVar4;\n  int loopCounter;\n  int incrementedCounter;\n  \n  uintPtr = DAT_00080be8;\n  initializeSettings_00080e9c();\n  undefined4Ptr = DAT_00080bec;\n  DAT_00080bec[1] = *uintPtr / 1000 - 1;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  undefined4Ptr[2] = 0;\n  *undefined4Ptr = 7;\n  executeFunctions_00081d7c();\n  loopCounter = 0;\n  do {\n    incrementedCounter = loopCounter + 1;\n    updateDataStructure(loopCounter,0);\n    intVar4 = DAT_00080c00;\n    intVar3 = DAT_00080bfc;\n    intVar2 = DAT_00080bf8;\n    intVar1 = DAT_00080bf4;\n    loopCounter = incrementedCounter;\n  } while (incrementedCounter != 0x4f);\n  *(undefined4 *)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(intVar2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(intVar4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(intVar3 + 0xa0) = 0xffffffff;\n  processParams_00080da0(intVar1,1,0x300,0);\n  updateDataStructure(0,1);\n  processParams_00080da0(intVar1,1,0xc00,0);\n  processParams_00080da0(intVar1,1,0x3000,0);\n  processParams_00080da0(intVar3,2,0x30,0);\n  processParams_00080da0(intVar2,1,0xc00,0);\n  processParams_00080da0(intVar1,1,3,0);\n  processParams_00080da0(intVar2,1,0xc000,0);\n  update_bit_flags_00080e18(0x25);\n  calculateResult_00080f9c(DAT_00080c08,*uintPtr,DAT_00080c04,0xc);\n  FUNC_00081042(DAT_00080c08,0,0x300000,1);\n  update_bitwise_flags_00081034(DAT_00080c08,0,0);\n  update_value_at_offset_0008106e(DAT_00080c08,0xffffffff);\n  set_memory_value_00081066(DAT_00080c08);\n  return;\n}\n\n",
            "called": [
                "FUN_00081066",
                "FUN_0008106e",
                "FUN_00081d7c",
                "FUN_00081034",
                "FUN_00080e9c",
                "FUN_00081042",
                "FUN_00080da0",
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "main_function_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "iVar3": "global_data_ptr",
                "FUN_00081d5c": "allocate_and_update_memory_00081d5c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "puVar1": "memory_block",
                "uVar2": "memory_index",
                "uVar4": "bit_mask"
            },
            "code": "\nundefined4 allocate_and_update_memory_00081d5c(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 *memory_block;\n  uint memory_index;\n  int global_data_ptr;\n  uint bit_mask;\n  \n  global_data_ptr = *(int *)PTR_DAT_0008396c;\n  memory_block = *(undefined4 **)(global_data_ptr + 0x148);\n  if (memory_block == (undefined4 *)0x0) {\n    memory_block = (undefined4 *)(global_data_ptr + 0x14c);\n    *(undefined4 **)(global_data_ptr + 0x148) = memory_block;\n  }\n  memory_index = memory_block[1];\n  if (0x1f < (int)memory_index) {\n    if ((DAT_00083970 == 0) ||\n       (memory_block = (undefined4 *)allocate_memory_wrapper_00081df4(400), memory_block == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *memory_block = *(undefined4 *)(global_data_ptr + 0x148);\n    memory_block[1] = 0;\n    memory_index = 0;\n    *(undefined4 **)(global_data_ptr + 0x148) = memory_block;\n    memory_block[0x62] = 0;\n    memory_block[99] = 0;\n  }\n  bit_mask = 1 << (memory_index & 0xff);\n  memory_block[memory_index + 0x22] = input_1;\n  memory_block[0x62] = memory_block[0x62] | bit_mask;\n  memory_block[memory_index + 0x42] = input_3;\n  memory_block[99] = bit_mask | memory_block[99];\n  memory_block[1] = memory_index + 1;\n  memory_block[memory_index + 2] = input_2;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": true,
            "current_name": "allocate_and_update_memory_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "iVar2": "previous_value",
                "FUN_00082970": "update_and_store_previous_value_00082970",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "temp_storage_ptr"
            },
            "code": "\nvoid update_and_store_previous_value_00082970(int *output,undefined4 input)\n\n{\n  undefined *temp_storage_ptr;\n  int previous_value;\n  \n  temp_storage_ptr = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  previous_value = add_and_return_previous_0008118c(input);\n  if ((previous_value == -1) && (*(int *)temp_storage_ptr != 0)) {\n    *output = *(int *)temp_storage_ptr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "imported": true,
            "current_name": "update_and_store_previous_value_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be"
            },
            "code": "\nundefined4 return_one_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": true,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "uVar10": "product_low",
                "bVar11": "carry",
                "param_1": "numerator_high",
                "lVar1": "long_product",
                "FUN_00084a80": "improved_division_00084a80",
                "param_2": "numerator_low",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "uVar3": "temp2",
                "uVar2": "temp1",
                "uVar5": "temp4",
                "uVar4": "temp3",
                "uVar7": "quotient_high",
                "uVar6": "temp5",
                "uVar9": "leading_zeroes",
                "uVar8": "quotient_low"
            },
            "code": "\nundefined8 improved_division_00084a80(uint numerator_high,uint numerator_low,uint divisor_high,uint divisor_low)\n\n{\n  longlong long_product;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint quotient_high;\n  uint quotient_low;\n  uint leading_zeroes;\n  uint product_low;\n  bool carry;\n  \n  if (divisor_low == 0) {\n    if (divisor_high <= numerator_low) {\n      if (divisor_high == 0) {\n        divisor_high = 1 / 0;\n      }\n      leading_zeroes = count_leading_zeroes(divisor_high);\n      if (leading_zeroes == 0) {\n        numerator_low = numerator_low - divisor_high;\n        temp1 = divisor_high >> 0x10;\n        temp3 = divisor_high & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor_high = divisor_high << (leading_zeroes & 0xff);\n        temp2 = numerator_low >> (0x20 - leading_zeroes & 0xff);\n        temp1 = divisor_high >> 0x10;\n        quotient_low = temp2 / temp1;\n        temp3 = divisor_high & 0xffff;\n        quotient_high = temp3 * quotient_low;\n        temp4 = numerator_high >> (0x20 - leading_zeroes & 0xff) | numerator_low << (leading_zeroes & 0xff);\n        temp2 = temp4 >> 0x10 | (temp2 - temp1 * quotient_low) * 0x10000;\n        numerator_high = numerator_high << (leading_zeroes & 0xff);\n        leading_zeroes = quotient_low;\n        if (temp2 <= quotient_high && quotient_high - temp2 != 0) {\n          carry = CARRY4(temp2,divisor_high);\n          temp2 = temp2 + divisor_high;\n          leading_zeroes = quotient_low - 1;\n          if ((carry == false) && (temp2 <= quotient_high && quotient_high - temp2 != 0)) {\n            leading_zeroes = quotient_low - 2;\n            temp2 = temp2 + divisor_high;\n          }\n        }\n        temp5 = (temp2 - quotient_high) / temp1;\n        quotient_low = temp3 * temp5;\n        numerator_low = temp4 & 0xffff | ((temp2 - quotient_high) - temp1 * temp5) * 0x10000;\n        quotient_high = temp5;\n        if (numerator_low <= quotient_low && quotient_low - numerator_low != 0) {\n          carry = CARRY4(numerator_low,divisor_high);\n          numerator_low = numerator_low + divisor_high;\n          quotient_high = temp5 - 1;\n          if ((carry == false) && (numerator_low <= quotient_low && quotient_low - numerator_low != 0)) {\n            quotient_high = temp5 - 2;\n            numerator_low = numerator_low + divisor_high;\n          }\n        }\n        numerator_low = numerator_low - quotient_low;\n        quotient_high = quotient_high | leading_zeroes << 0x10;\n      }\n      quotient_low = numerator_low / temp1;\n      temp2 = temp3 * quotient_low;\n      temp4 = numerator_high >> 0x10 | (numerator_low - temp1 * quotient_low) * 0x10000;\n      leading_zeroes = quotient_low;\n      if (temp4 <= temp2 && temp2 - temp4 != 0) {\n        carry = CARRY4(temp4,divisor_high);\n        temp4 = temp4 + divisor_high;\n        leading_zeroes = quotient_low - 1;\n        if ((carry == false) && (temp4 <= temp2 && temp2 - temp4 != 0)) {\n          leading_zeroes = quotient_low - 2;\n          temp4 = temp4 + divisor_high;\n        }\n      }\n      quotient_low = (temp4 - temp2) / temp1;\n      temp3 = temp3 * quotient_low;\n      temp4 = numerator_high & 0xffff | ((temp4 - temp2) - temp1 * quotient_low) * 0x10000;\n      temp1 = quotient_low;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        temp1 = quotient_low - 1;\n        if ((CARRY4(temp4,divisor_high) == false) &&\n           (temp4 + divisor_high <= temp3 && temp3 - (temp4 + divisor_high) != 0)) {\n          temp1 = quotient_low - 2;\n        }\n      }\n      return CONCAT44(quotient_high,temp1 | leading_zeroes << 0x10);\n    }\n    leading_zeroes = count_leading_zeroes(divisor_high);\n    if (leading_zeroes != 0) {\n      quotient_high = numerator_high >> (0x20 - leading_zeroes & 0xff);\n      divisor_high = divisor_high << (leading_zeroes & 0xff);\n      numerator_high = numerator_high << (leading_zeroes & 0xff);\n      numerator_low = quotient_high | numerator_low << (leading_zeroes & 0xff);\n    }\n    quotient_high = divisor_high >> 0x10;\n    temp1 = numerator_low / quotient_high;\n    temp3 = (divisor_high & 0xffff) * temp1;\n    quotient_low = numerator_high >> 0x10 | (numerator_low - quotient_high * temp1) * 0x10000;\n    leading_zeroes = temp1;\n    if (quotient_low <= temp3 && temp3 - quotient_low != 0) {\n      carry = CARRY4(quotient_low,divisor_high);\n      quotient_low = quotient_low + divisor_high;\n      leading_zeroes = temp1 - 1;\n      if ((carry == false) && (quotient_low <= temp3 && temp3 - quotient_low != 0)) {\n        leading_zeroes = temp1 - 2;\n        quotient_low = quotient_low + divisor_high;\n      }\n    }\n    temp4 = (quotient_low - temp3) / quotient_high;\n    temp1 = (divisor_high & 0xffff) * temp4;\n    temp3 = numerator_high & 0xffff | ((quotient_low - temp3) - quotient_high * temp4) * 0x10000;\n    quotient_high = temp4;\n    if (temp3 <= temp1 && temp1 - temp3 != 0) {\n      quotient_high = temp4 - 1;\n      if ((CARRY4(temp3,divisor_high) == false) &&\n         (temp3 + divisor_high <= temp1 && temp1 - (temp3 + divisor_high) != 0)) {\n        quotient_high = temp4 - 2;\n      }\n    }\n    leading_zeroes = quotient_high | leading_zeroes << 0x10;\n    quotient_high = 0;\n  }\n  else {\n    if (numerator_low < divisor_low) {\n      return 0;\n    }\n    leading_zeroes = count_leading_zeroes(divisor_low);\n    if (leading_zeroes == 0) {\n      if ((divisor_low < numerator_low) || (quotient_high = leading_zeroes, divisor_high <= numerator_high)) {\n        return 1;\n      }\n    }\n    else {\n      temp1 = 0x20 - leading_zeroes;\n      quotient_high = numerator_low >> (temp1 & 0xff);\n      temp3 = divisor_low << (leading_zeroes & 0xff) | divisor_high >> (temp1 & 0xff);\n      quotient_low = temp3 >> 0x10;\n      temp5 = quotient_high / quotient_low;\n      temp4 = (temp3 & 0xffff) * temp5;\n      temp2 = numerator_high >> (temp1 & 0xff) | numerator_low << (leading_zeroes & 0xff);\n      temp1 = temp2 >> 0x10 | (quotient_high - quotient_low * temp5) * 0x10000;\n      quotient_high = temp5;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry = CARRY4(temp1,temp3);\n        temp1 = temp1 + temp3;\n        quotient_high = temp5 - 1;\n        if ((carry == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient_high = temp5 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp5 = (temp1 - temp4) / quotient_low;\n      product_low = (temp3 & 0xffff) * temp5;\n      quotient_low = temp2 & 0xffff | ((temp1 - temp4) - quotient_low * temp5) * 0x10000;\n      temp1 = temp5;\n      if (quotient_low <= product_low && product_low - quotient_low != 0) {\n        carry = CARRY4(quotient_low,temp3);\n        quotient_low = quotient_low + temp3;\n        temp1 = temp5 - 1;\n        if ((carry == false) && (quotient_low <= product_low && product_low - quotient_low != 0)) {\n          temp1 = temp5 - 2;\n          quotient_low = quotient_low + temp3;\n        }\n      }\n      temp1 = temp1 | quotient_high << 0x10;\n      long_product = (ulonglong)temp1 * (ulonglong)(divisor_high << (leading_zeroes & 0xff));\n      quotient_high = (uint)((ulonglong)long_product >> 0x20);\n      if ((quotient_low - product_low < quotient_high) ||\n         ((quotient_low - product_low == quotient_high && (numerator_high << (leading_zeroes & 0xff) < (uint)long_product)))) {\n        leading_zeroes = temp1 - 1;\n        quotient_high = 0;\n      }\n      else {\n        leading_zeroes = temp1;\n        quotient_high = 0;\n      }\n    }\n  }\n  return CONCAT44(quotient_high,leading_zeroes);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": true,
            "current_name": "improved_division_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "param_1": "first_param",
                "param_2": "second_param",
                "FUN_00081c54": "swap_and_combine_00081c54"
            },
            "code": "\nvoid swap_and_combine_00081c54(undefined4 first_param,undefined4 second_param)\n\n{\n  combine_and_return_00081c5c(second_param,first_param);\n  return;\n}\n\n",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": true,
            "current_name": "swap_and_combine_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "iVar1": "resize_result",
                "param_1": "memory_block_ptr",
                "param_2": "required_capacity",
                "FUN_0008163a": "ensure_memory_capacity_0008163a"
            },
            "code": "\nundefined4 ensure_memory_capacity_0008163a(int *memory_block_ptr,uint required_capacity)\n\n{\n  int resize_result;\n  \n  if ((*memory_block_ptr == 0) || ((uint)memory_block_ptr[1] < required_capacity)) {\n    resize_result = update_and_resize_memory_00081622(memory_block_ptr);\n    if (resize_result == 0) {\n      return 0;\n    }\n    if (memory_block_ptr[2] == 0) {\n      *(undefined *)*memory_block_ptr = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "ensure_memory_capacity_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "param_1": "memorySize",
                "param_2": "newMemorySize",
                "FUN_000825a0": "merge_and_resize_memory_000825a0"
            },
            "code": "\nvoid mergeAndResizeMemory_000825a0(undefined4 memorySize,undefined4 newMemorySize)\n\n{\n  resize_and_merge_memory_000825b0(*DAT_000825ac,memorySize,newMemorySize);\n  return;\n}\n\n",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": true,
            "current_name": "merge_and_resize_memory_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "param_1": "bufferPtr",
                "param_2": "updateValue",
                "FUN_000815d4": "initialize_and_update_buffer_000815d4"
            },
            "code": "\nundefined4 * initializeAndUpdateBuffer_000815d4(undefined4 *bufferPtr,undefined4 updateValue)\n\n{\n  initializeBuffer_000814e4();\n  *bufferPtr = PTR_PTR_updateBuffer_00081454_1_000815f4;\n  bufferPtr[9] = updateValue;\n  return bufferPtr;\n}\n\n",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": true,
            "current_name": "initialize_and_update_buffer_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "piVar14": "block_list",
                "piVar16": "block_list_head",
                "uVar1": "memory_base",
                "iVar4": "temp_var1",
                "uVar15": "aligned_size",
                "puVar2": "previous_memory",
                "uVar17": "updated_size",
                "puVar3": "current_memory",
                "iVar7": "new_block",
                "iVar12": "next_block",
                "uVar18": "bucket_index",
                "param_1": "memory_manager",
                "iVar9": "prev_block",
                "param_2": "requested_size",
                "iVar13": "current_block",
                "uVar5": "bit_mask",
                "uVar6": "adjusted_size",
                "piVar10": "block_iterator",
                "FUN_00081e14": "allocate_memory_block_00081e14",
                "uVar8": "remaining_size"
            },
            "code": "\nint * allocate_memory_block_00081e14(undefined4 *memory_manager,uint requested_size)\n\n{\n  uint memory_base;\n  uint *previous_memory;\n  undefined *current_memory;\n  int temp_var1;\n  uint bit_mask;\n  uint adjusted_size;\n  int new_block;\n  uint remaining_size;\n  int prev_block;\n  int *block_iterator;\n  uint memory_base1;\n  int next_block;\n  int current_block;\n  int *block_list;\n  uint aligned_size;\n  int *block_list_head;\n  uint updated_size;\n  uint bucket_index;\n  \n  if (requested_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < requested_size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = requested_size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\nLAB_00081e7a:\n      *memory_manager = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(memory_manager);\n  memory_base = DAT_00082140;\n  if (aligned_size < 0x1f8) {\n    current_block = *(int *)(DAT_00082140 + aligned_size + 0xc);\n    if ((current_block != DAT_00082140 + aligned_size) ||\n       (temp_var1 = current_block + 8, current_block = *(int *)(current_block + 0x14), temp_var1 != current_block)) {\n      new_block = *(int *)(current_block + 0xc);\n      prev_block = (*(uint *)(current_block + 4) & 0xfffffffc) + current_block;\n      aligned_size = *(uint *)(prev_block + 4);\n      temp_var1 = *(int *)(current_block + 8);\n      *(int *)(temp_var1 + 0xc) = new_block;\n      *(int *)(new_block + 8) = temp_var1;\n      *(uint *)(prev_block + 4) = aligned_size | 1;\n      do_nothing_0008259c(memory_manager);\n      return (int *)(current_block + 8);\n    }\n    bucket_index = (aligned_size >> 3) + 2;\n  }\n  else {\n    bucket_index = aligned_size >> 9;\n    if (bucket_index == 0) {\n      temp_var1 = 0x7e;\n      current_block = 0x3f;\n    }\n    else if (bucket_index < 5) {\n      current_block = (aligned_size >> 6) + 0x38;\n      temp_var1 = current_block * 2;\n    }\n    else if (bucket_index < 0x15) {\n      current_block = bucket_index + 0x5b;\n      temp_var1 = current_block * 2;\n    }\n    else if (bucket_index < 0x55) {\n      current_block = (aligned_size >> 0xc) + 0x6e;\n      temp_var1 = current_block * 2;\n    }\n    else if (bucket_index < 0x155) {\n      current_block = (aligned_size >> 0xf) + 0x77;\n      temp_var1 = current_block * 2;\n    }\n    else if (bucket_index < 0x555) {\n      current_block = (aligned_size >> 0x12) + 0x7c;\n      temp_var1 = current_block * 2;\n    }\n    else {\n      temp_var1 = 0xfc;\n      current_block = 0x7e;\n    }\n    new_block = DAT_00082140 + temp_var1 * 4;\n    for (temp_var1 = *(int *)(new_block + 0xc); new_block != temp_var1; temp_var1 = *(int *)(temp_var1 + 0xc)) {\n      bucket_index = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      prev_block = bucket_index - aligned_size;\n      if (0xf < prev_block) {\n        current_block = current_block + -1;\n        break;\n      }\n      if (-1 < prev_block) {\n        new_block = bucket_index + temp_var1;\n        aligned_size = *(uint *)(new_block + 4);\n        prev_block = *(int *)(temp_var1 + 0xc);\n        current_block = *(int *)(temp_var1 + 8);\n        *(int *)(current_block + 0xc) = prev_block;\n        *(int *)(prev_block + 8) = current_block;\n        *(uint *)(new_block + 4) = aligned_size | 1;\n        do_nothing_0008259c(memory_manager);\n        return (int *)(temp_var1 + 8);\n      }\n    }\n    bucket_index = current_block + 1;\n  }\n  current_block = *(int *)(DAT_00082140 + 0x10);\n  temp_var1 = DAT_00082140 + 8;\n  if (current_block == temp_var1) {\n    bit_mask = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    bit_mask = *(uint *)(current_block + 4);\n    adjusted_size = bit_mask & 0xfffffffc;\n    remaining_size = adjusted_size - aligned_size;\n    if (0xf < (int)remaining_size) {\n      new_block = aligned_size + current_block;\n      *(uint *)(current_block + 4) = aligned_size | 1;\n      *(int *)(memory_base + 0x14) = new_block;\n      *(int *)(memory_base + 0x10) = new_block;\n      *(int *)(new_block + 0xc) = temp_var1;\n      *(int *)(new_block + 8) = temp_var1;\n      *(uint *)(new_block + 4) = remaining_size | 1;\n      *(uint *)(new_block + remaining_size) = remaining_size;\n      do_nothing_0008259c(memory_manager);\n      return (int *)(current_block + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = temp_var1;\n    *(int *)(memory_base + 0x10) = temp_var1;\n    if (-1 < (int)remaining_size) {\n      *(uint *)(adjusted_size + current_block + 4) = *(uint *)(adjusted_size + current_block + 4) | 1;\n      do_nothing_0008259c(memory_manager);\n      return (int *)(current_block + 8);\n    }\n    if (adjusted_size < 0x200) {\n      prev_block = memory_base + (bit_mask & 0xfffffff8);\n      new_block = *(int *)(prev_block + 8);\n      bit_mask = 1 << ((int)(bit_mask >> 3) >> 2 & 0xffU) | *(uint *)(memory_base + 4);\n      *(int *)(current_block + 8) = new_block;\n      *(int *)(current_block + 0xc) = prev_block;\n      *(uint *)(memory_base + 4) = bit_mask;\n      *(int *)(prev_block + 8) = current_block;\n      *(int *)(new_block + 0xc) = current_block;\n    }\n    else {\n      remaining_size = bit_mask >> 9;\n      if (remaining_size < 5) {\n        prev_block = (bit_mask >> 6) + 0x38;\n        new_block = prev_block * 2;\n      }\n      else if (remaining_size < 0x15) {\n        prev_block = remaining_size + 0x5b;\n        new_block = prev_block * 2;\n      }\n      else if (remaining_size < 0x55) {\n        prev_block = (bit_mask >> 0xc) + 0x6e;\n        new_block = prev_block * 2;\n      }\n      else if (remaining_size < 0x155) {\n        prev_block = (bit_mask >> 0xf) + 0x77;\n        new_block = prev_block * 2;\n      }\n      else if (remaining_size < 0x555) {\n        prev_block = (bit_mask >> 0x12) + 0x7c;\n        new_block = prev_block * 2;\n      }\n      else {\n        new_block = 0xfc;\n        prev_block = 0x7e;\n      }\n      new_block = memory_base + new_block * 4;\n      next_block = *(int *)(new_block + 8);\n      if (next_block == new_block) {\n        bit_mask = *(uint *)(DAT_00082348 + 4) | 1 << (prev_block >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = bit_mask;\n        prev_block = next_block;\n      }\n      else {\n        do {\n          prev_block = next_block;\n          if ((*(uint *)(next_block + 4) & 0xfffffffc) <= adjusted_size) break;\n          next_block = *(int *)(next_block + 8);\n          prev_block = next_block;\n        } while (new_block != next_block);\n        next_block = *(int *)(prev_block + 0xc);\n        bit_mask = *(uint *)(memory_base + 4);\n      }\n      *(int *)(current_block + 0xc) = next_block;\n      *(int *)(current_block + 8) = prev_block;\n      *(int *)(next_block + 8) = current_block;\n      *(int *)(prev_block + 0xc) = current_block;\n    }\n  }\n  adjusted_size = 1 << ((int)bucket_index >> 2 & 0xffU);\n  if (adjusted_size <= bit_mask) {\n    if ((bit_mask & adjusted_size) == 0) {\n      bucket_index = bucket_index & 0xfffffffc;\n      do {\n        adjusted_size = adjusted_size << 1;\n        bucket_index = bucket_index + 4;\n      } while ((bit_mask & adjusted_size) == 0);\n    }\n    do {\n      block_list_head = (int *)(memory_base + bucket_index * 8);\n      block_list = block_list_head;\n      bit_mask = bucket_index;\n      do {\n        for (block_iterator = (int *)block_list[3]; block_list != block_iterator; block_iterator = (int *)block_iterator[3]) {\n          remaining_size = block_iterator[1] & 0xfffffffc;\n          updated_size = remaining_size - aligned_size;\n          if (0xf < (int)updated_size) {\n            prev_block = block_iterator[2];\n            current_block = block_iterator[3];\n            new_block = aligned_size + (int)block_iterator;\n            block_iterator[1] = aligned_size | 1;\n            *(int *)(prev_block + 0xc) = current_block;\n            *(int *)(current_block + 8) = prev_block;\n            *(int *)(memory_base + 0x14) = new_block;\n            *(int *)(memory_base + 0x10) = new_block;\n            *(int *)(new_block + 0xc) = temp_var1;\n            *(int *)(new_block + 8) = temp_var1;\n            *(uint *)(new_block + 4) = updated_size | 1;\n            *(uint *)(new_block + updated_size) = updated_size;\n            do_nothing_0008259c(memory_manager);\n            return block_iterator + 2;\n          }\n          if (-1 < (int)updated_size) {\n            current_block = block_iterator[2];\n            temp_var1 = block_iterator[3];\n            *(uint *)((int)block_iterator + remaining_size + 4) = *(uint *)((int)block_iterator + remaining_size + 4) | 1;\n            *(int *)(current_block + 0xc) = temp_var1;\n            *(int *)(temp_var1 + 8) = current_block;\n            do_nothing_0008259c(memory_manager);\n            return block_iterator + 2;\n          }\n        }\n        bit_mask = bit_mask + 1;\n        block_list = block_list + 2;\n      } while ((bit_mask & 3) != 0);\n      do {\n        remaining_size = bucket_index & 3;\n        block_list = block_list_head + -2;\n        bucket_index = bucket_index - 1;\n        if (remaining_size == 0) {\n          remaining_size = *(uint *)(memory_base + 4) & ~adjusted_size;\n          *(uint *)(memory_base + 4) = remaining_size;\n          goto LAB_00082262;\n        }\n        block_list_head = (int *)*block_list_head;\n      } while (block_list_head == block_list);\n      remaining_size = *(uint *)(memory_base + 4);\nLAB_00082262:\n      adjusted_size = adjusted_size * 2;\n      if ((remaining_size <= adjusted_size && adjusted_size - remaining_size != 0) || (bucket_index = bit_mask, adjusted_size == 0)) break;\n      for (; (remaining_size & adjusted_size) == 0; adjusted_size = adjusted_size << 1) {\n        bucket_index = bucket_index + 4;\n      }\n    } while( true );\n  }\n  previous_memory = DAT_00082148;\n  bucket_index = *(uint *)(memory_base + 8);\n  bit_mask = *(uint *)(bucket_index + 4) & 0xfffffffc;\n  if ((aligned_size <= bit_mask) && (remaining_size = bit_mask - aligned_size, adjusted_size = bucket_index, 0xf < (int)remaining_size))\n  goto LAB_0008211e;\n  remaining_size = bucket_index + bit_mask;\n  if (*DAT_00082148 == 0xffffffff) {\n    updated_size = aligned_size + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    updated_size = aligned_size + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  adjusted_size = update_and_store_previous_value_00082970(memory_manager,updated_size);\n  current_memory = PTR_DAT_00082154;\n  if ((adjusted_size == 0xffffffff) || ((adjusted_size < remaining_size && (bucket_index != memory_base)))) {\n    adjusted_size = *(uint *)(memory_base + 8);\n    bucket_index = *(uint *)(adjusted_size + 4) & 0xfffffffc;\n  }\n  else {\n    memory_base1 = *(int *)PTR_DAT_00082154 + updated_size;\n    *(uint *)PTR_DAT_00082154 = memory_base1;\n    if ((remaining_size == adjusted_size) && ((remaining_size & 0xfff) == 0)) {\n      *(uint *)(*(int *)(memory_base + 8) + 4) = updated_size + bit_mask | 1;\n    }\n    else {\n      if (*previous_memory == 0xffffffff) {\n        *DAT_00082148 = adjusted_size;\n      }\n      else {\n        *(uint *)current_memory = memory_base1 + (adjusted_size - remaining_size);\n      }\n      remaining_size = adjusted_size & 7;\n      if (remaining_size == 0) {\n        current_block = 0x1000;\n      }\n      else {\n        adjusted_size = adjusted_size + (8 - remaining_size);\n        current_block = 0x1008 - remaining_size;\n      }\n      current_block = current_block - (updated_size + adjusted_size & 0xfff);\n      temp_var1 = update_and_store_previous_value_00082970(memory_manager,current_block);\n      if (temp_var1 == -1) {\n        remaining_size = 1;\n        current_block = 0;\n      }\n      else {\n        remaining_size = (temp_var1 - adjusted_size) + current_block | 1;\n      }\n      memory_base1 = *(int *)current_memory + current_block;\n      *(uint *)(memory_base + 8) = adjusted_size;\n      *(uint *)current_memory = memory_base1;\n      *(uint *)(adjusted_size + 4) = remaining_size;\n      current_memory = PTR_DAT_00082154;\n      if (bucket_index != memory_base) {\n        if (bit_mask < 0x10) {\n          *(undefined4 *)(adjusted_size + 4) = 1;\n          bucket_index = 0;\n          goto LAB_00082108;\n        }\n        bit_mask = bit_mask - 0xc & 0xfffffff8;\n        *(uint *)(bucket_index + 4) = bit_mask | *(uint *)(bucket_index + 4) & 1;\n        *(undefined4 *)(bucket_index + bit_mask + 4) = 5;\n        *(undefined4 *)(bucket_index + bit_mask + 8) = 5;\n        if (0xf < bit_mask) {\n          merge_memory_blocks_00083d9c(memory_manager,bucket_index + 8);\n          memory_base1 = *(uint *)current_memory;\n        }\n      }\n    }\n    adjusted_size = *(uint *)(memory_base + 8);\n    if (*(uint *)PTR_DAT_0008214c < memory_base1) {\n      *(uint *)PTR_DAT_0008214c = memory_base1;\n    }\n    if (*(uint *)PTR_DAT_00082150 < memory_base1) {\n      *(uint *)PTR_DAT_00082150 = memory_base1;\n    }\n    bucket_index = *(uint *)(adjusted_size + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  remaining_size = bucket_index - aligned_size;\n  if ((bucket_index < aligned_size) || ((int)remaining_size < 0x10)) {\n    do_nothing_0008259c(memory_manager);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(adjusted_size + 4) = aligned_size | 1;\n  *(uint *)(memory_base + 8) = aligned_size + adjusted_size;\n  *(uint *)(aligned_size + adjusted_size + 4) = remaining_size | 1;\n  do_nothing_0008259c(memory_manager);\n  return (int *)(adjusted_size + 8);\n}\n\n",
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000842a4",
                "FUN_00081df4",
                "FUN_000825b0"
            ],
            "imported": true,
            "current_name": "allocate_memory_block_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "iVar2": "process_result",
                "FUN_00080164": "initialize_and_process_00080164",
                "param_1": "data_structure_ptr",
                "puVar1": "temp_ptr"
            },
            "code": "\nvoid initialize_and_process_00080164(int **data_structure_ptr)\n\n{\n  undefined *temp_ptr;\n  int process_result;\n  \n  temp_ptr = PTR_DAT_000801ac;\n  *data_structure_ptr = (int *)PTR_DAT_000801ac;\n  (**(code **)(*(int *)temp_ptr + 0x18))(PTR_DAT_000801ac);\n  if (1 < *(byte *)((int)data_structure_ptr + 6)) {\n    process_function_00081210(*(byte *)((int)data_structure_ptr + 6),1);\n    update_data_structure_00081318(*(undefined *)((int)data_structure_ptr + 6),0);\n  }\n  do {\n    process_result = (**(code **)(**data_structure_ptr + 0xc))();\n  } while (-1 < process_result);\n  *(undefined *)((int)data_structure_ptr + 0x49) = 0;\n  *(undefined *)((int)data_structure_ptr + 0x4a) = 0;\n  *(undefined2 *)(data_structure_ptr + 0x15) = 0;\n  *(undefined2 *)((int)data_structure_ptr + 0x52) = 0;\n  *(undefined2 *)(data_structure_ptr + 0x14) = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": true,
            "current_name": "initialize_and_process_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "iVar1": "index",
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "input_value",
                "param_2": "source_array",
                "param_3": "array_length"
            },
            "code": "\nuint process_data_000811cc(undefined4 input_value,int source_array,uint array_length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)array_length; index = index + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(source_array + index);\n  }\n  return array_length & ~((int)array_length >> 0x1f);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": true,
            "current_name": "process_data_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "iVar2": "returnValue",
                "FUN_000846dc": "update_param_with_value_000846dc",
                "param_1": "result",
                "param_2": "inputValue",
                "puVar1": "tempPointer"
            },
            "code": "\nvoid updateParamWithValue_000846dc(int *result,undefined4 inputValue)\n\n{\n  undefined *tempPointer;\n  int returnValue;\n  \n  tempPointer = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  returnValue = return_one_000811be(inputValue);\n  if ((returnValue == -1) && (*(int *)tempPointer != 0)) {\n    *result = *(int *)tempPointer;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": true,
            "current_name": "update_param_with_value_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "iVar1": "leading_zeroes_count",
                "iVar3": "offset_value",
                "FUN_00081894": "calculate_modified_value_00081894",
                "param_1": "input_value",
                "uVar2": "intermediate_value",
                "uVar4": "shifted_value"
            },
            "code": "\nuint calculate_modified_value_00081894(uint input_value)\n\n{\n  int leading_zeroes_count;\n  uint intermediate_value;\n  int offset_value;\n  uint shifted_value;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  intermediate_value = leading_zeroes_count - 8;\n  offset_value = intermediate_value * -0x800000 + 0x4a800000;\n  if (7 < leading_zeroes_count) {\n    shifted_value = 0 << (intermediate_value & 0xff);\n    intermediate_value = offset_value + (input_value << (intermediate_value & 0xff)) +\n            (0U >> (0x20 - intermediate_value & 0xff)) + (uint)(0x7fffffff < shifted_value);\n    if (shifted_value == 0x80000000) {\n      intermediate_value = intermediate_value & 0xfffffffe;\n    }\n    return intermediate_value;\n  }\n  shifted_value = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  intermediate_value = offset_value + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shifted_value >> 0x1f));\n  if ((shifted_value & 0x7fffffff) == 0) {\n    intermediate_value = intermediate_value & ~(shifted_value >> 0x1f);\n  }\n  return intermediate_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "calculate_modified_value_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "convert_uint_to_char_000845bc",
                "param_1": "error_code_ptr",
                "param_2": "char_ptr",
                "param_3": "input_uint"
            },
            "code": "\nundefined4 convert_uint_to_char_000845bc(undefined4 *error_code_ptr,undefined *char_ptr,uint input_uint)\n\n{\n  if (char_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (input_uint < 0x100) {\n    *char_ptr = (char)input_uint;\n    return 1;\n  }\n  *error_code_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": true,
            "current_name": "convert_uint_to_char_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": true,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "puVar2": "next_ptr",
                "param_1": "start_ptr",
                "FUN_00082504": "set_memory_00082504",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "current_ptr",
                "uVar3": "packed_value",
                "uVar4": "remaining_length",
                "bVar5": "is_zero"
            },
            "code": "\nvoid setMemory_00082504(undefined4 *start_ptr,undefined value,uint length)\n\n{\n  undefined4 *current_ptr;\n  undefined4 *next_ptr;\n  undefined4 packed_value;\n  uint remaining_length;\n  bool is_zero;\n  \n  if (((uint)start_ptr & 3) != 0) {\n    is_zero = length == 0;\n    current_ptr = start_ptr;\n    length = length - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      start_ptr = (undefined4 *)((int)current_ptr + 1);\n      *(undefined *)current_ptr = value;\n      if (((uint)start_ptr & 3) == 0) break;\n      is_zero = length == 0;\n      current_ptr = start_ptr;\n      length = length - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    packed_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_length = length;\n    current_ptr = start_ptr;\n    if (0xf < length) {\n      remaining_length = length - 0x10;\n      do {\n        *current_ptr = packed_value;\n        current_ptr[1] = packed_value;\n        current_ptr[2] = packed_value;\n        current_ptr[3] = packed_value;\n        current_ptr = current_ptr + 4;\n      } while (current_ptr != (undefined4 *)((int)start_ptr + (remaining_length & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      start_ptr = start_ptr + ((remaining_length >> 4) + 1) * 4;\n      remaining_length = length;\n      current_ptr = start_ptr;\n      if (length < 4) goto LAB_00082580;\n    }\n    do {\n      length = length - 4;\n      *start_ptr = packed_value;\n      start_ptr = start_ptr + 1;\n    } while (3 < length);\n    start_ptr = (undefined4 *)((int)current_ptr + (remaining_length - 4 & 0xfffffffc) + 4);\n    length = remaining_length & 3;\n  }\nLAB_00082580:\n  if (length != 0) {\n    current_ptr = start_ptr;\n    do {\n      next_ptr = (undefined4 *)((int)current_ptr + 1);\n      *(undefined *)current_ptr = value;\n      current_ptr = next_ptr;\n    } while (next_ptr != (undefined4 *)(length + (int)start_ptr));\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_000813a8",
                "FUN_00083b14"
            ],
            "imported": true,
            "current_name": "set_memory_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "param_1": "input_value",
                "FUN_000800f4": "initialize_and_return_value_000800f4"
            },
            "code": "\nundefined4 initialize_and_return_value_000800f4(undefined4 input_value)\n\n{\n  if (*PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      input_value = DAT_00080114;\n    }\n    *PTR_DAT_0008010c = 1;\n  }\n  return input_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": true,
            "current_name": "initialize_and_return_value_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "local_47c": "maskedValue",
                "iVar1": "result1",
                "local_46c": "value1",
                "iVar2": "result2",
                "local_47a": "shortValue",
                "param_1": "inputData",
                "auStack_420": "stackBuffer",
                "local_424": "value3",
                "local_488": "bufferArray",
                "local_478": "buffer",
                "local_464": "value2",
                "local_474": "initialSize",
                "param_2": "dataStruct",
                "FUN_0008378c": "process_input_data_0008378c",
                "local_480": "bufferSize",
                "local_470": "initialValue"
            },
            "code": "\nint processInputData_0008378c(undefined4 inputData,int dataStruct)\n\n{\n  int result1;\n  int result2;\n  undefined *bufferArray [2];\n  undefined4 bufferSize;\n  ushort maskedValue;\n  undefined2 shortValue;\n  undefined *buffer;\n  undefined4 initialSize;\n  undefined4 initialValue;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined stackBuffer [1024];\n  \n  value3 = *(undefined4 *)(dataStruct + 100);\n  value1 = *(undefined4 *)(dataStruct + 0x1c);\n  shortValue = *(undefined2 *)(dataStruct + 0xe);\n  value2 = *(undefined4 *)(dataStruct + 0x24);\n  bufferArray[0] = stackBuffer;\n  maskedValue = *(ushort *)(dataStruct + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  initialSize = 0x400;\n  initialValue = 0;\n  buffer = bufferArray[0];\n  result1 = FUNC_00082b38(inputData,bufferArray);\n  if ((-1 < result1) && (result2 = process_data_00083adc(inputData,bufferArray), result2 != 0)) {\n    result1 = -1;\n  }\n  if ((int)((uint)maskedValue << 0x19) < 0) {\n    *(ushort *)(dataStruct + 0xc) = *(ushort *)(dataStruct + 0xc) | 0x40;\n  }\n  return result1;\n}\n\n",
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_input_data_0008378c",
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083adc": {
            "renaming": {
                "iVar2": "difference",
                "iVar5": "temp_value",
                "iVar7": "initial_value",
                "param_1": "input_data",
                "piVar1": "temp_pointer",
                "unaff_r4": "unaffected_r4",
                "param_2": "control_data",
                "FUN_00083adc": "process_data_00083adc",
                "uVar3": "ushort_value",
                "pcVar6": "code_pointer",
                "uVar4": "uint_value"
            },
            "code": "\nundefined4 process_data_00083adc(int *input_data,int *control_data)\n\n{\n  int *temp_pointer;\n  int difference;\n  ushort ushort_value;\n  uint uint_value;\n  int temp_value;\n  code *code_pointer;\n  undefined4 unaffected_r4;\n  int initial_value;\n  \n  if ((input_data != (int *)0x0) && (input_data[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(control_data + 3) == 0) {\n    return 0;\n  }\n  ushort_value = *(ushort *)(control_data + 3);\n  if ((int)((uint)ushort_value << 0x1c) < 0) {\n    initial_value = control_data[4];\n    if (initial_value == 0) {\n      return 0;\n    }\n    difference = *control_data;\n    if ((ushort_value & 3) == 0) {\n      temp_value = control_data[5];\n    }\n    else {\n      temp_value = 0;\n    }\n    *control_data = initial_value;\n    difference = difference - initial_value;\n    control_data[2] = temp_value;\n    do {\n      if (difference < 1) {\n        return 0;\n      }\n      temp_value = (*(code *)control_data[9])(input_data,control_data[7],initial_value,difference,unaffected_r4);\n      difference = difference - temp_value;\n      initial_value = initial_value + temp_value;\n    } while (0 < temp_value);\nLAB_00083a54:\n    *(ushort *)(control_data + 3) = *(ushort *)(control_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(control_data + 3) = ushort_value | 0x800;\n  if ((control_data[1] < 1) && (control_data[0xf] < 1)) {\n    return 0;\n  }\n  code_pointer = (code *)control_data[10];\n  if (code_pointer == (code *)0x0) {\n    return 0;\n  }\n  uint_value = (uint)(ushort_value | 0x800);\n  initial_value = *input_data;\n  *input_data = 0;\n  if ((ushort_value & 0x1000) == 0) {\n    difference = (*code_pointer)(input_data,control_data[7],uint_value & 0x1000,1);\n    if ((difference == -1) && (temp_value = *input_data, temp_value != 0)) {\n      if ((temp_value == 0x1d) || (temp_value == 0x16)) {\n        *input_data = initial_value;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uint_value = (uint)*(ushort *)(control_data + 3);\n    code_pointer = (code *)control_data[10];\n  }\n  else {\n    difference = control_data[0x14];\n  }\n  if (((int)(uint_value << 0x1d) < 0) && (difference = difference - control_data[1], control_data[0xc] != 0)) {\n    difference = difference - control_data[0xf];\n  }\n  difference = (*code_pointer)(input_data,control_data[7],difference,0);\n  if (difference == -1) {\n    temp_value = *input_data;\n    if (temp_value != 0) {\n      if ((temp_value != 0x1d) && (temp_value != 0x16)) {\n        *(ushort *)(control_data + 3) = *(ushort *)(control_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(control_data + 3) = *(ushort *)(control_data + 3) & 0xf7ff;\n      *control_data = control_data[4];\n      control_data[1] = 0;\n      goto LAB_00083a00;\n    }\n    ushort_value = *(ushort *)(control_data + 3) & 0xf7ff;\n    control_data[1] = 0;\n    *(ushort *)(control_data + 3) = ushort_value;\n    *control_data = control_data[4];\n  }\n  else {\n    ushort_value = *(ushort *)(control_data + 3) & 0xf7ff;\n    *control_data = control_data[4];\n    *(ushort *)(control_data + 3) = ushort_value;\n    control_data[1] = 0;\n  }\n  if ((int)((uint)ushort_value << 0x13) < 0) {\n    control_data[0x14] = difference;\n  }\nLAB_00083a00:\n  temp_pointer = (int *)control_data[0xc];\n  *input_data = initial_value;\n  if (temp_pointer == (int *)0x0) {\n    return 0;\n  }\n  if (temp_pointer != control_data + 0x10) {\n    merge_memory_blocks_00083d9c(input_data);\n  }\n  control_data[0xc] = 0;\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_0008378c",
                "FUN_000844c4",
                "FUN_000846a4"
            ],
            "imported": true,
            "current_name": "process_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "iVar1": "temp_var1",
                "piVar9": "new_block",
                "iVar4": "global_var",
                "piVar6": "temp_ptr1",
                "piVar2": "current_block_ptr",
                "param_1": "memory_manager",
                "iVar10": "temp_var2",
                "param_2": "current_block",
                "param_3": "new_size",
                "FUN_000825b0": "resize_and_merge_memory_000825b0",
                "uVar3": "temp_block_size",
                "uVar5": "current_block_size",
                "uVar7": "adjusted_block_size",
                "uVar8": "adjusted_new_size"
            },
            "code": "\nint * resize_and_merge_memory_000825b0(undefined4 *memory_manager,int *current_block,uint new_size)\n\n{\n  int temp_var1;\n  int *current_block_ptr;\n  uint temp_block_size;\n  int global_var;\n  uint current_block_size;\n  int *temp_ptr1;\n  uint adjusted_block_size;\n  uint adjusted_new_size;\n  int *new_block;\n  int temp_var2;\n  \n  if (current_block == (int *)0x0) {\n    current_block_ptr = (int *)allocate_memory_block_00081e14(memory_manager,new_size);\n    return current_block_ptr;\n  }\n  do_nothing_00082598();\n  global_var = DAT_0008296c;\n  current_block_size = current_block[-1];\n  adjusted_block_size = current_block_size & 0xfffffffc;\n  current_block_ptr = current_block + -2;\n  if (new_size + 0xb < 0x17) {\n    adjusted_new_size = 0x10;\n  }\n  else {\n    adjusted_new_size = new_size + 0xb & 0xfffffff8;\n    if ((int)adjusted_new_size < 0) goto LAB_0008267c;\n  }\n  if (adjusted_new_size < new_size) {\nLAB_0008267c:\n    *memory_manager = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_block_size < (int)adjusted_new_size) {\n    temp_var1 = (int)current_block_ptr + adjusted_block_size;\n    temp_var2 = *(int *)(DAT_0008296c + 8);\n    if (temp_var2 == temp_var1) {\n      temp_block_size = *(uint *)(temp_var2 + 4) & 0xfffffffc;\n      temp_var1 = temp_var2;\n      if ((int)(adjusted_new_size + 0x10) <= (int)(temp_block_size + adjusted_block_size)) {\n        *(uint *)(DAT_0008296c + 8) = (int)current_block_ptr + adjusted_new_size;\n        *(uint *)((int)current_block_ptr + adjusted_new_size + 4) = (temp_block_size + adjusted_block_size) - adjusted_new_size | 1;\n        current_block[-1] = adjusted_new_size | current_block[-1] & 1U;\n        do_nothing_0008259c(memory_manager);\n        return current_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_block_size = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)adjusted_new_size <= (int)(temp_block_size + adjusted_block_size)) {\n        temp_var2 = *(int *)(temp_var1 + 0xc);\n        global_var = *(int *)(temp_var1 + 8);\n        *(int *)(global_var + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = global_var;\n        adjusted_block_size = temp_block_size + adjusted_block_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_block_size = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(current_block_size << 0x1f)) {\n      new_block = (int *)((int)current_block_ptr - current_block[-2]);\n      current_block_size = (new_block[1] & 0xfffffffcU) + adjusted_block_size;\n      if (temp_var1 != 0) {\n        if (temp_var1 == temp_var2) {\n          if ((int)(adjusted_new_size + 0x10) <= (int)(temp_block_size + current_block_size)) {\n            current_block_ptr = new_block + 2;\n            temp_var1 = *current_block_ptr;\n            temp_var2 = new_block[3];\n            adjusted_block_size = adjusted_block_size - 4;\n            *(int *)(temp_var1 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var1;\n            if (adjusted_block_size < 0x25) {\n              temp_ptr1 = current_block_ptr;\n              if (0x13 < adjusted_block_size) {\n                new_block[2] = *current_block;\n                new_block[3] = current_block[1];\n                if (adjusted_block_size < 0x1c) {\n                  current_block = current_block + 2;\n                  temp_ptr1 = new_block + 4;\n                }\n                else {\n                  new_block[4] = current_block[2];\n                  new_block[5] = current_block[3];\n                  if (adjusted_block_size == 0x24) {\n                    new_block[6] = current_block[4];\n                    temp_ptr1 = current_block + 5;\n                    current_block = current_block + 6;\n                    new_block[7] = *temp_ptr1;\n                    temp_ptr1 = new_block + 8;\n                  }\n                  else {\n                    current_block = current_block + 4;\n                    temp_ptr1 = new_block + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *current_block;\n              temp_ptr1[1] = current_block[1];\n              temp_ptr1[2] = current_block[2];\n            }\n            else {\n              custom_memcpy_00082438(current_block_ptr,current_block);\n            }\n            *(uint *)(global_var + 8) = (int)new_block + adjusted_new_size;\n            *(uint *)((int)new_block + adjusted_new_size + 4) = (temp_block_size + current_block_size) - adjusted_new_size | 1;\n            new_block[1] = adjusted_new_size | new_block[1] & 1U;\n            do_nothing_0008259c(memory_manager);\n            return current_block_ptr;\n          }\n        }\n        else {\n          temp_block_size = temp_block_size + current_block_size;\n          if ((int)adjusted_new_size <= (int)temp_block_size) {\n            temp_var2 = *(int *)(temp_var1 + 0xc);\n            global_var = *(int *)(temp_var1 + 8);\n            *(int *)(global_var + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = global_var;\n            temp_ptr1 = new_block + 2;\n            global_var = *temp_ptr1;\n            temp_var1 = new_block[3];\n            current_block_size = adjusted_block_size - 4;\n            *(int *)(global_var + 0xc) = temp_var1;\n            *(int *)(temp_var1 + 8) = global_var;\n            adjusted_block_size = temp_block_size;\n            if (current_block_size < 0x25) {\n              current_block_ptr = temp_ptr1;\n              if (0x13 < current_block_size) {\n                new_block[2] = *current_block;\n                new_block[3] = current_block[1];\n                if (current_block_size < 0x1c) {\n                  current_block = current_block + 2;\n                  current_block_ptr = new_block + 4;\n                }\n                else {\n                  new_block[4] = current_block[2];\n                  new_block[5] = current_block[3];\n                  if (current_block_size == 0x24) {\n                    new_block[6] = current_block[4];\n                    current_block_ptr = current_block + 5;\n                    current_block = current_block + 6;\n                    new_block[7] = *current_block_ptr;\n                    current_block_ptr = new_block + 8;\n                  }\n                  else {\n                    current_block = current_block + 4;\n                    current_block_ptr = new_block + 6;\n                  }\n                }\n              }\n              *current_block_ptr = *current_block;\n              current_block_ptr[1] = current_block[1];\n              current_block_ptr[2] = current_block[2];\n              current_block_size = new_block[1];\n              current_block_ptr = new_block;\n              current_block = temp_ptr1;\n            }\n            else {\n              custom_memcpy_00082438(temp_ptr1,current_block);\n              current_block_size = new_block[1];\n              current_block_ptr = new_block;\n              current_block = temp_ptr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)adjusted_new_size <= (int)current_block_size) {\n        temp_ptr1 = new_block + 2;\n        global_var = *temp_ptr1;\n        temp_var1 = new_block[3];\n        temp_block_size = adjusted_block_size - 4;\n        *(int *)(global_var + 0xc) = temp_var1;\n        *(int *)(temp_var1 + 8) = global_var;\n        adjusted_block_size = current_block_size;\n        if (temp_block_size < 0x25) {\n          current_block_ptr = temp_ptr1;\n          if (0x13 < temp_block_size) {\n            new_block[2] = *current_block;\n            new_block[3] = current_block[1];\n            if (temp_block_size < 0x1c) {\n              current_block = current_block + 2;\n              current_block_ptr = new_block + 4;\n            }\n            else {\n              new_block[4] = current_block[2];\n              new_block[5] = current_block[3];\n              if (temp_block_size == 0x24) {\n                new_block[6] = current_block[4];\n                current_block_ptr = current_block + 5;\n                current_block = current_block + 6;\n                new_block[7] = *current_block_ptr;\n                current_block_ptr = new_block + 8;\n              }\n              else {\n                current_block = current_block + 4;\n                current_block_ptr = new_block + 6;\n              }\n            }\n          }\n          *current_block_ptr = *current_block;\n          current_block_ptr[1] = current_block[1];\n          current_block_ptr[2] = current_block[2];\n          current_block_size = new_block[1];\n          current_block_ptr = new_block;\n          current_block = temp_ptr1;\n        }\n        else {\n          custom_memcpy_00082438(temp_ptr1,current_block);\n          current_block_size = new_block[1];\n          current_block_ptr = new_block;\n          current_block = temp_ptr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    new_block = (int *)allocate_memory_block_00081e14(memory_manager,new_size);\n    if (new_block == (int *)0x0) goto LAB_000826a4;\n    current_block_size = current_block[-1];\n    if (new_block + -2 != (int *)((current_block_size & 0xfffffffe) + (int)current_block_ptr)) {\n      adjusted_block_size = adjusted_block_size - 4;\n      if (adjusted_block_size < 0x25) {\n        current_block_ptr = current_block;\n        temp_ptr1 = new_block;\n        if (0x13 < adjusted_block_size) {\n          *new_block = *current_block;\n          new_block[1] = current_block[1];\n          if (adjusted_block_size < 0x1c) {\n            current_block_ptr = current_block + 2;\n            temp_ptr1 = new_block + 2;\n          }\n          else {\n            new_block[2] = current_block[2];\n            new_block[3] = current_block[3];\n            if (adjusted_block_size == 0x24) {\n              new_block[4] = current_block[4];\n              new_block[5] = current_block[5];\n              current_block_ptr = current_block + 6;\n              temp_ptr1 = new_block + 6;\n            }\n            else {\n              current_block_ptr = current_block + 4;\n              temp_ptr1 = new_block + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *current_block_ptr;\n        temp_ptr1[1] = current_block_ptr[1];\n        temp_ptr1[2] = current_block_ptr[2];\n      }\n      else {\n        custom_memcpy_00082438(new_block,current_block);\n      }\n      merge_memory_blocks_00083d9c(memory_manager,current_block);\n      goto LAB_000826a4;\n    }\n    adjusted_block_size = adjusted_block_size + (new_block[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_block_size = adjusted_block_size - adjusted_new_size;\n  new_block = current_block;\n  if (temp_block_size < 0x10) {\n    current_block_ptr[1] = current_block_size & 1 | adjusted_block_size;\n    *(uint *)((int)current_block_ptr + adjusted_block_size + 4) = *(uint *)((int)current_block_ptr + adjusted_block_size + 4) | 1;\n  }\n  else {\n    current_block_ptr[1] = current_block_size & 1 | adjusted_new_size;\n    *(uint *)((int)current_block_ptr + adjusted_new_size + 4) = temp_block_size | 1;\n    *(uint *)((int)current_block_ptr + temp_block_size + adjusted_new_size + 4) = *(uint *)((int)current_block_ptr + temp_block_size + adjusted_new_size + 4) | 1;\n    merge_memory_blocks_00083d9c(memory_manager,(int)current_block_ptr + adjusted_new_size + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(memory_manager);\n  return new_block;\n}\n\n",
            "called": [
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": true,
            "current_name": "resize_and_merge_memory_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "iVar1": "index",
                "param_1": "input_struct",
                "FUN_000803d4": "check_byte_and_update_counter_000803d4"
            },
            "code": "\nundefined4 check_byte_and_update_counter_000803d4(int input_struct)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input_struct + 10) << 0x18) < 0) {\n    *(short *)(input_struct + 0x54) = *(short *)(input_struct + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if (PTR_DAT_0008040c[index] == *(byte *)(input_struct + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input_struct + 0x54) = *(short *)(input_struct + 0x54) + 1;\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "check_byte_and_update_counter_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "iVar4": "check_result",
                "param_1": "data_ptr",
                "piVar3": "retrieved_data",
                "unaff_r6": "masked_uint",
                "cVar1": "result_char",
                "uVar2": "temp_uint",
                "FUN_0008043e": "process_and_check_data_0008043e"
            },
            "code": "\nint process_and_check_data_0008043e(int **data_ptr)\n\n{\n  char result_char;\n  uint temp_uint;\n  int *retrieved_data;\n  int check_result;\n  uint masked_uint;\n  \n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    temp_uint = (**(code **)(**data_ptr + 8))();\n    masked_uint = temp_uint & 0xff;\n  }\n  retrieved_data = (int *)retrieve_data_value_thunk_00081714();\n  if (data_ptr[0x17] < retrieved_data) {\n    *(undefined *)(data_ptr + 2) = 0xff;\n    *(undefined *)((int)data_ptr + 7) = 0;\n    *(short *)(data_ptr + 0x15) = *(short *)(data_ptr + 0x15) + 1;\n  }\n  else if (7 < masked_uint) {\n    process_data_000801b0(data_ptr);\n    check_result = check_byte_and_update_counter_000803d4(data_ptr);\n    if (check_result == 0) {\n      if (*(byte *)((int)data_ptr + 10) - 3 < 2) {\n        process_data_00080410(data_ptr);\n      }\n      *(undefined *)((int)data_ptr + 7) = 0;\n      result_char = *(char *)((int)data_ptr + 0x49);\n    }\n    else {\n      *(undefined *)((int)data_ptr + 7) = 0;\n      result_char = (char)check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result_char = '\\0';\nLAB_000804a2:\n  return (int)result_char;\n}\n\n",
            "called": [
                "FUN_00080410",
                "FUN_000801b0",
                "thunk_FUN_00081714",
                "FUN_000803d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "process_and_check_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_memory_block_0008160c",
                "param_1": "memory_block"
            },
            "code": "\nvoid reset_memory_block_0008160c(int *memory_block)\n\n{\n  if (*memory_block != 0) {\n    merge_memory_wrapper_00081e04();\n  }\n  *memory_block = 0;\n  memory_block[2] = 0;\n  memory_block[1] = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": true,
            "current_name": "reset_memory_block_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "update_bit_flags_00080e18",
                "uVar1": "bit_mask",
                "param_1": "bit_position"
            },
            "code": "\nundefined4 update_bit_flags_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4",
                "FUN_00081508"
            ],
            "imported": true,
            "current_name": "update_bit_flags_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "\nundefined4 returnZero_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": true,
            "current_name": "return_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_data_value_00084298"
            },
            "code": "\nundefined4 get_data_value_00084298(void)\n\n{\n  return *DAT_000842a0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "get_data_value_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_memory_value_00081066",
                "param_1": "memory_address"
            },
            "code": "\nvoid set_memory_value_00081066(int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "set_memory_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "uVar1": "tempVar1",
                "FUN_00081cd0": "processValue_00081cd0",
                "param_1": "inputValue",
                "uVar2": "tempVar2"
            },
            "code": "\nuint processValue_00081cd0(uint inputValue)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  tempVar1 = (inputValue << 1) >> 0x18;\n  tempVar2 = 0x9e - tempVar1;\n  if (tempVar1 < 0x9f && tempVar2 != 0) {\n    tempVar1 = (inputValue << 8 | 0x80000000) >> (tempVar2 & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      tempVar1 = -tempVar1;\n    }\n    return tempVar1;\n  }\n  if ((tempVar2 == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": true,
            "current_name": "processValue_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "allocate_memory_wrapper_00081df4",
                "param_1": "memory_size"
            },
            "code": "\nvoid allocate_memory_wrapper_00081df4(undefined4 memory_size)\n\n{\n  allocate_memory_block_00081e14(*DAT_00081e00,memory_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": true,
            "current_name": "allocate_memory_wrapper_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "bVar3": "counter",
                "iVar2": "element_ptr",
                "uVar1": "combined_integers",
                "iVar5": "output_array_ptr",
                "FUN_00080410": "process_data_00080410",
                "param_1": "data_ptr",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "uVar4": "index"
            },
            "code": "\nvoid process_data_00080410(int data_ptr,undefined4 unused_param_2,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  undefined2 combined_integers;\n  int element_ptr;\n  byte counter;\n  uint index;\n  int output_array_ptr;\n  \n  counter = 0;\n  while( true ) {\n    index = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data_ptr + 0xb) >> 1 <= index) break;\n    element_ptr = (index * 2 + 3 & 0xff) + data_ptr;\n    output_array_ptr = *(int *)(data_ptr + 0x4c);\n    combined_integers = combine_two_integers_000815f8(*(undefined *)(element_ptr + 9),*(undefined *)(element_ptr + 10),element_ptr,\n                         *(byte *)(data_ptr + 0xb),unused_param_4);\n    *(undefined2 *)(output_array_ptr + index * 2) = combined_integers;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": true,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "bVar1": "isNegative",
                "FUN_00080da0": "processParams_00080da0",
                "param_1": "baseAddress",
                "param_2": "operation",
                "param_3": "value",
                "param_4": "flags"
            },
            "code": "\nundefined4 processParams_00080da0(int baseAddress,int operation,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(operation) {\n  case 1:\n  case 2:\n    (*DAT_00080df8)(baseAddress,operation,value);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(baseAddress + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(baseAddress + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(baseAddress + 0x60) = value;\n    }\n    break;\n  case 3:\n    (*DAT_00080dfc)(baseAddress,value,flags,DAT_00080dfc,baseAddress);\n    break;\n  case 4:\n  case 5:\n    (*DAT_00080e00)(baseAddress,value,operation == 5,(flags << 0x1d) >> 0x1f,flags & 1,operation,\n                    value);\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "processParams_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "bVar1": "byte_value",
                "iVar3": "result",
                "param_1": "data_buffer",
                "FUN_00080258": "update_data_buffer_00080258",
                "param_2": "unused_param2",
                "param_3": "unused_param3",
                "param_4": "unused_param4",
                "uVar2": "checksum",
                "uVar4": "uint_value"
            },
            "code": "\nvoid update_data_buffer_00080258(int **data_buffer,undefined4 unused_param2,undefined4 unused_param3,undefined4 unused_param4)\n\n{\n  byte byte_value;\n  undefined2 checksum;\n  int result;\n  uint uint_value;\n  \n  byte_value = *(byte *)((int)data_buffer + 0x49);\n  uint_value = (uint)byte_value;\n  checksum = calculate_checksum_0008021c(data_buffer,uint_value,unused_param3,unused_param4,unused_param4);\n  *(char *)((int)data_buffer + uint_value + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)data_buffer + (uint_value + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)data_buffer + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data_buffer + 6)) {\n    update_data_structure_00081318(*(byte *)((int)data_buffer + 6),1);\n  }\n  if (*(byte *)((int)data_buffer + 5) < 4) {\n    (**(code **)(**data_buffer + 4))(*data_buffer,(int)data_buffer + 9,*(undefined *)((int)data_buffer + 0x49));\n  }\n  if (1 < *(byte *)((int)data_buffer + 6)) {\n    update_data_structure_00081318(*(byte *)((int)data_buffer + 6),0);\n  }\n  if (*(byte *)((int)data_buffer + 5) < 4) {\n    do {\n      result = (**(code **)(**data_buffer + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data_buffer + 0x49) = 0;\n  result = retrieve_data_value_thunk_00081714();\n  data_buffer[0x17] = (int *)(result + (uint)*(ushort *)((int)data_buffer + 0x56));\n  *(short *)((int)data_buffer + 0x52) = *(short *)((int)data_buffer + 0x52) + 1;\n  return;\n}\n\n",
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": true,
            "current_name": "update_data_buffer_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "iVar1": "result",
                "param_1": "memory_ptr",
                "FUN_00081622": "update_and_resize_memory_00081622",
                "param_2": "memory_size",
                "param_3": "new_size",
                "param_4": "element_size"
            },
            "code": "\nint update_and_resize_memory_00081622(int *memory_ptr,int memory_size,undefined4 new_size,undefined4 element_size)\n\n{\n  int result;\n  \n  result = merge_and_resize_memory_000825a0(*memory_ptr,memory_size + 1,new_size,element_size,element_size);\n  if (result != 0) {\n    *memory_ptr = result;\n    memory_ptr[1] = memory_size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": true,
            "current_name": "update_and_resize_memory_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "param_1": "dest",
                "puVar6": "dest_byte",
                "FUN_00082438": "custom_memcpy_00082438",
                "param_2": "src",
                "param_3": "count",
                "uVar5": "remaining",
                "uVar7": "num_chunks"
            },
            "code": "\nvoid custom_memcpy_00082438(undefined4 *dest,undefined4 *src,uint count)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining;\n  undefined *dest_byte;\n  uint num_chunks;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + count), dest < temp_ptr)) {\n    dest_byte = (undefined *)((int)dest + count);\n    index = count - 1;\n    if (count != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        dest_byte = dest_byte + -1;\n        *dest_byte = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (count < 0x10) {\n    if (count == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (count - 0x10 & 0xfffffff0) + 0x10));\n    index = (count - 0x10 >> 4) + 1;\n    num_chunks = count & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remaining = num_chunks;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < num_chunks) {\n      do {\n        remaining = remaining - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remaining);\n      index = (num_chunks - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      num_chunks = count & 3;\n    }\n    count = num_chunks;\n    if (count == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(count + (int)dest));\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": true,
            "current_name": "custom_memcpy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "iVar2": "temp_var",
                "puVar3": "settings_ptr",
                "param_1": "device_ptr",
                "FUN_00081508": "initialize_device_settings_00081508",
                "param_2": "divisor",
                "param_3": "setting_value",
                "puVar1": "divider_ptr"
            },
            "code": "\nvoid initialize_device_settings_00081508(int device_ptr,uint divisor,undefined4 setting_value)\n\n{\n  uint *divider_ptr;\n  int temp_var;\n  undefined4 *settings_ptr;\n  \n  update_bit_flags_00080e18(*(undefined4 *)(device_ptr + 0x20));\n  settings_ptr = *(undefined4 **)(device_ptr + 0x18);\n  settings_ptr[0x48] = 0x202;\n  *settings_ptr = 0xac;\n  divider_ptr = DAT_00081570;\n  settings_ptr[1] = setting_value;\n  settings_ptr[8] = *divider_ptr / divisor >> 4;\n  settings_ptr[3] = 0xffffffff;\n  settings_ptr[2] = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)(char)*(byte *)(device_ptr + 0x1c) >> 5) * 4) =\n       1 << (uint)(*(byte *)(device_ptr + 0x1c) & 0x1f);\n  temp_var = *(int *)(device_ptr + 0x10);\n  *(undefined4 *)(temp_var + 0x84) = 0;\n  *(undefined4 *)(temp_var + 0x80) = 0;\n  temp_var = *(int *)(device_ptr + 0x14);\n  *(undefined4 *)(temp_var + 0x84) = 0;\n  *(undefined4 *)(temp_var + 0x80) = 0;\n  *settings_ptr = 0x50;\n  return;\n}\n\n",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": true,
            "current_name": "initialize_device_settings_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "iVar2": "temp_var2",
                "uVar1": "temp_var1",
                "param_1": "output",
                "FUN_00083808": "process_memory_blocks_00083808",
                "param_2": "memory_block",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "code": "\nundefined4 process_memory_blocks_00083808(undefined4 *output,int *memory_block)\n\n{\n  uint temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  temp_var4 = *(ushort *)(memory_block + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = memory_block[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(memory_block + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)memory_block[0xc] != (int *)0x0) {\n        if ((int *)memory_block[0xc] != memory_block + 0x10) {\n          merge_memory_blocks_00083d9c(output);\n          temp_var4 = *(ushort *)(memory_block + 3);\n        }\n        memory_block[0xc] = 0;\n      }\n      temp_var2 = memory_block[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *memory_block = temp_var2;\n      memory_block[1] = 0;\n    }\n    else {\n      temp_var2 = memory_block[4];\n    }\n    *(ushort *)(memory_block + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    initialize_and_allocate_memory_000842a4(output,memory_block);\n    temp_var3 = (uint)*(ushort *)(memory_block + 3);\n    temp_var2 = memory_block[4];\n  }\n  temp_var1 = temp_var3 & 1;\n  if (temp_var1 == 0) {\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = memory_block[5];\n    }\n    memory_block[2] = temp_var1;\n  }\n  else {\n    memory_block[6] = -memory_block[5];\n    memory_block[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(memory_block + 3) << 0x18) < 0)) {\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "process_memory_blocks_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "uVar10": "quotient_low",
                "uVar11": "product_low",
                "uVar12": "product_high",
                "bVar13": "carry",
                "param_1": "numerator_high",
                "lVar1": "long_product",
                "FUN_000847e0": "divide_large_numbers_000847e0",
                "param_2": "numerator_low",
                "param_3": "denominator_high",
                "param_4": "denominator_low",
                "uVar3": "temp2",
                "uVar2": "temp1",
                "uVar5": "quotient_high",
                "uVar4": "temp3",
                "uVar7": "intermediate_denominator",
                "uVar6": "intermediate_numerator",
                "uVar9": "sign",
                "uVar8": "intermediate_result"
            },
            "code": "\nundefined8 divide_large_numbers_000847e0(uint numerator_high,uint numerator_low,uint denominator_high,uint denominator_low)\n\n{\n  longlong long_product;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint quotient_high;\n  uint intermediate_numerator;\n  uint intermediate_denominator;\n  uint intermediate_result;\n  uint sign;\n  uint quotient_low;\n  uint product_low;\n  uint product_high;\n  bool carry;\n  \n  if ((int)numerator_low < 0) {\n    carry = numerator_high != 0;\n    numerator_high = -numerator_high;\n    numerator_low = -numerator_low - (uint)carry;\n    sign = 0xffffffff;\n  }\n  else {\n    sign = 0;\n  }\n  if ((int)denominator_low < 0) {\n    sign = ~sign;\n    carry = denominator_high != 0;\n    denominator_high = -denominator_high;\n    denominator_low = -denominator_low - (uint)carry;\n  }\n  if (denominator_low == 0) {\n    if (numerator_low < denominator_high) {\n      quotient_high = count_leading_zeroes(denominator_high);\n      if (quotient_high != 0) {\n        temp1 = numerator_high >> (0x20 - quotient_high & 0xff);\n        denominator_high = denominator_high << (quotient_high & 0xff);\n        numerator_high = numerator_high << (quotient_high & 0xff);\n        numerator_low = numerator_low << (quotient_high & 0xff) | temp1;\n      }\n      temp1 = denominator_high >> 0x10;\n      temp2 = numerator_low / temp1;\n      intermediate_numerator = (denominator_high & 0xffff) * temp2;\n      quotient_low = numerator_high >> 0x10 | (numerator_low - temp1 * temp2) * 0x10000;\n      quotient_high = temp2;\n      if (quotient_low <= intermediate_numerator && intermediate_numerator - quotient_low != 0) {\n        carry = CARRY4(quotient_low,denominator_high);\n        quotient_low = quotient_low + denominator_high;\n        quotient_high = temp2 - 1;\n        if ((carry == false) && (quotient_low <= intermediate_numerator && intermediate_numerator - quotient_low != 0)) {\n          quotient_high = temp2 - 2;\n          quotient_low = quotient_low + denominator_high;\n        }\n      }\n      intermediate_denominator = (quotient_low - intermediate_numerator) / temp1;\n      temp2 = (denominator_high & 0xffff) * intermediate_denominator;\n      intermediate_numerator = numerator_high & 0xffff | ((quotient_low - intermediate_numerator) - temp1 * intermediate_denominator) * 0x10000;\n      temp1 = intermediate_denominator;\n      if (intermediate_numerator <= temp2 && temp2 - intermediate_numerator != 0) {\n        temp1 = intermediate_denominator - 1;\n        if ((CARRY4(intermediate_numerator,denominator_high) == false) &&\n           (intermediate_numerator + denominator_high <= temp2 && temp2 - (intermediate_numerator + denominator_high) != 0)) {\n          temp1 = intermediate_denominator - 2;\n        }\n      }\n      temp2 = temp1 | quotient_high << 0x10;\n      quotient_low = 0;\n    }\n    else {\n      if (denominator_high == 0) {\n        denominator_high = 1 / 0;\n      }\n      quotient_high = count_leading_zeroes(denominator_high);\n      if (quotient_high == 0) {\n        numerator_low = numerator_low - denominator_high;\n        temp1 = denominator_high >> 0x10;\n        product_high = denominator_high & 0xffff;\n        quotient_low = 1;\n      }\n      else {\n        denominator_high = denominator_high << (quotient_high & 0xff);\n        temp2 = numerator_low >> (0x20 - quotient_high & 0xff);\n        temp1 = denominator_high >> 0x10;\n        quotient_low = temp2 / temp1;\n        product_high = denominator_high & 0xffff;\n        intermediate_numerator = product_high * quotient_low;\n        intermediate_denominator = numerator_high >> (0x20 - quotient_high & 0xff) | numerator_low << (quotient_high & 0xff);\n        temp2 = intermediate_denominator >> 0x10 | (temp2 - temp1 * quotient_low) * 0x10000;\n        numerator_high = numerator_high << (quotient_high & 0xff);\n        quotient_high = quotient_low;\n        if (temp2 <= intermediate_numerator && intermediate_numerator - temp2 != 0) {\n          carry = CARRY4(temp2,denominator_high);\n          temp2 = temp2 + denominator_high;\n          quotient_high = quotient_low - 1;\n          if ((carry == false) && (temp2 <= intermediate_numerator && intermediate_numerator - temp2 != 0)) {\n            quotient_high = quotient_low - 2;\n            temp2 = temp2 + denominator_high;\n          }\n        }\n        intermediate_result = (temp2 - intermediate_numerator) / temp1;\n        temp3 = product_high * intermediate_result;\n        numerator_low = intermediate_denominator & 0xffff | ((temp2 - intermediate_numerator) - temp1 * intermediate_result) * 0x10000;\n        quotient_low = intermediate_result;\n        if (numerator_low <= temp3 && temp3 - numerator_low != 0) {\n          carry = CARRY4(numerator_low,denominator_high);\n          numerator_low = numerator_low + denominator_high;\n          quotient_low = intermediate_result - 1;\n          if ((carry == false) && (numerator_low <= temp3 && temp3 - numerator_low != 0)) {\n            quotient_low = intermediate_result - 2;\n            numerator_low = numerator_low + denominator_high;\n          }\n        }\n        numerator_low = numerator_low - temp3;\n        quotient_low = quotient_low | quotient_high << 0x10;\n      }\n      temp2 = numerator_low / temp1;\n      intermediate_numerator = product_high * temp2;\n      intermediate_denominator = numerator_high >> 0x10 | (numerator_low - temp1 * temp2) * 0x10000;\n      quotient_high = temp2;\n      if (intermediate_denominator <= intermediate_numerator && intermediate_numerator - intermediate_denominator != 0) {\n        carry = CARRY4(intermediate_denominator,denominator_high);\n        intermediate_denominator = intermediate_denominator + denominator_high;\n        quotient_high = temp2 - 1;\n        if ((carry == false) && (intermediate_denominator <= intermediate_numerator && intermediate_numerator - intermediate_denominator != 0)) {\n          quotient_high = temp2 - 2;\n          intermediate_denominator = intermediate_denominator + denominator_high;\n        }\n      }\n      temp3 = (intermediate_denominator - intermediate_numerator) / temp1;\n      product_high = product_high * temp3;\n      temp2 = numerator_high & 0xffff | ((intermediate_denominator - intermediate_numerator) - temp1 * temp3) * 0x10000;\n      temp1 = temp3;\n      if (temp2 <= product_high && product_high - temp2 != 0) {\n        temp1 = temp3 - 1;\n        if ((CARRY4(temp2,denominator_high) == false) &&\n           (temp2 + denominator_high <= product_high && product_high - (temp2 + denominator_high) != 0)) {\n          temp1 = temp3 - 2;\n        }\n      }\n      temp2 = temp1 | quotient_high << 0x10;\n    }\n  }\n  else if (numerator_low < denominator_low) {\n    temp2 = 0;\n    quotient_low = 0;\n  }\n  else {\n    quotient_high = count_leading_zeroes(denominator_low);\n    if (quotient_high == 0) {\n      if ((denominator_low < numerator_low) || (temp2 = quotient_high, quotient_low = quotient_high, denominator_high <= numerator_high)) {\n        temp2 = 1;\n        quotient_low = 0;\n      }\n    }\n    else {\n      temp1 = 0x20 - quotient_high;\n      intermediate_numerator = numerator_low >> (temp1 & 0xff);\n      temp3 = denominator_high >> (temp1 & 0xff) | denominator_low << (quotient_high & 0xff);\n      intermediate_denominator = temp3 >> 0x10;\n      temp2 = intermediate_numerator / intermediate_denominator;\n      product_high = (temp3 & 0xffff) * temp2;\n      quotient_low = numerator_low << (quotient_high & 0xff) | numerator_high >> (temp1 & 0xff);\n      intermediate_numerator = quotient_low >> 0x10 | (intermediate_numerator - intermediate_denominator * temp2) * 0x10000;\n      temp1 = temp2;\n      if (intermediate_numerator <= product_high && product_high - intermediate_numerator != 0) {\n        carry = CARRY4(intermediate_numerator,temp3);\n        intermediate_numerator = intermediate_numerator + temp3;\n        temp1 = temp2 - 1;\n        if ((carry == false) && (intermediate_numerator <= product_high && product_high - intermediate_numerator != 0)) {\n          temp1 = temp2 - 2;\n          intermediate_numerator = intermediate_numerator + temp3;\n        }\n      }\n      intermediate_result = (intermediate_numerator - product_high) / intermediate_denominator;\n      product_low = (temp3 & 0xffff) * intermediate_result;\n      intermediate_numerator = quotient_low & 0xffff | ((intermediate_numerator - product_high) - intermediate_denominator * intermediate_result) * 0x10000;\n      temp2 = intermediate_result;\n      if (intermediate_numerator <= product_low && product_low - intermediate_numerator != 0) {\n        carry = CARRY4(intermediate_numerator,temp3);\n        intermediate_numerator = intermediate_numerator + temp3;\n        temp2 = intermediate_result - 1;\n        if ((carry == false) && (intermediate_numerator <= product_low && product_low - intermediate_numerator != 0)) {\n          temp2 = intermediate_result - 2;\n          intermediate_numerator = intermediate_numerator + temp3;\n        }\n      }\n      temp2 = temp2 | temp1 << 0x10;\n      long_product = (ulonglong)temp2 * (ulonglong)(denominator_high << (quotient_high & 0xff));\n      temp1 = (uint)((ulonglong)long_product >> 0x20);\n      if ((intermediate_numerator - product_low < temp1) ||\n         ((quotient_low = 0, intermediate_numerator - product_low == temp1 && (numerator_high << (quotient_high & 0xff) < (uint)long_product)))) {\n        temp2 = temp2 - 1;\n        quotient_low = 0;\n      }\n    }\n  }\n  if (sign != 0) {\n    carry = temp2 != 0;\n    temp2 = -temp2;\n    quotient_low = -quotient_low - (uint)carry;\n  }\n  return CONCAT44(quotient_low,temp2);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": true,
            "current_name": "divide_large_numbers_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "param_1": "baseAddress",
                "param_2": "bitIndex",
                "FUN_0008105c": "set_bit_at_index_0008105c"
            },
            "code": "\nvoid setBitAtIndex_0008105c(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": true,
            "current_name": "set_bit_at_index_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "iVar2": "function_result",
                "pcVar3": "function_ptr",
                "uVar1": "dat_value",
                "param_1": "result",
                "param_2": "input_value",
                "param_3": "additional_param",
                "param_4": "status",
                "FUN_0008456c": "process_parameters_0008456c",
                "auStack_24": "buffer"
            },
            "code": "\nvoid process_parameters_0008456c(undefined4 *result,int input_value,undefined4 additional_param,undefined4 *status)\n\n{\n  undefined4 dat_value;\n  int function_result;\n  code *function_ptr;\n  undefined buffer [12];\n  \n  if (input_value == 0) {\n    function_ptr = *(code **)PTR_DAT_000845b8;\n    dat_value = get_dat_value_00084290();\n    function_result = (*function_ptr)(result,buffer,0,dat_value,status);\n  }\n  else {\n    function_ptr = *(code **)PTR_DAT_000845b8;\n    dat_value = get_dat_value_00084290();\n    function_result = (*function_ptr)(result,input_value,additional_param,dat_value,status);\n  }\n  if (function_result == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": true,
            "current_name": "process_parameters_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": true,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "param_1": "buffer_id",
                "param_2": "buffer_ptr",
                "FUN_000811b4": "set_buffer_size_000811b4"
            },
            "code": "\nundefined4 set_buffer_size_000811b4(undefined4 buffer_id,int buffer_ptr)\n\n{\n  *(undefined4 *)(buffer_ptr + 4) = 0x2000;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": true,
            "current_name": "set_buffer_size_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "undefined4": "uint32_t",
                "FUN_000816d4": "setMemoryValue_000816d4"
            },
            "code": "\nvoid setMemoryValue_000816d4(void)\n\n{\n  *(uint32_t *)(DAT_000816dc + 4) = 0x8000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": true,
            "current_name": "setMemoryValue_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "uVar10": "temp_block_start",
                "uVar11": "temp_block_end",
                "iVar1": "result",
                "param_1": "error_code_ptr",
                "puVar5": "block_ptr_1",
                "puVar6": "block_ptr_2",
                "local_2c": "local_flag",
                "param_2": "data_block_ptr",
                "param_3": "block_info_ptr",
                "uVar3": "temp_ushort",
                "uVar2": "temp_uint",
                "uVar4": "temp_value",
                "uVar7": "temp_block_size",
                "FUN_00083f34": "process_data_blocks_00083f34",
                "uVar9": "temp_block_data",
                "uVar8": "temp_block_offset"
            },
            "code": "\nundefined4 process_data_blocks_00083f34(undefined4 *error_code_ptr,uint *data_block_ptr,uint **block_info_ptr)\n\n{\n  int result;\n  uint temp_uint;\n  ushort temp_ushort;\n  uint temp_value;\n  uint *block_ptr_1;\n  uint *block_ptr_2;\n  uint temp_block_size;\n  uint temp_block_offset;\n  uint temp_block_data;\n  uint temp_block_start;\n  uint temp_block_end;\n  uint local_flag;\n  \n  if (block_info_ptr[2] != (uint *)0x0) {\n    temp_ushort = *(ushort *)(data_block_ptr + 3);\n    temp_value = (uint)temp_ushort;\n    if (((int)(temp_value << 0x1c) < 0) && (data_block_ptr[4] != 0)) {\n      block_ptr_2 = *block_info_ptr;\n      temp_uint = DAT_00084244;\n    }\n    else {\n      result = process_memory_blocks_00083808(error_code_ptr,data_block_ptr);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      temp_ushort = *(ushort *)(data_block_ptr + 3);\n      temp_value = (uint)temp_ushort;\n      block_ptr_2 = *block_info_ptr;\n      temp_uint = DAT_00084244;\n    }\n    DAT_00084244 = temp_uint;\n    if ((temp_ushort & 2) == 0) {\n      temp_uint = temp_value & 2;\n      temp_block_offset = temp_value & 1;\n      temp_block_size = temp_uint;\n      temp_block_start = temp_uint;\n      local_flag = temp_uint;\n      temp_block_data = temp_block_offset;\n      if (temp_block_offset == 0) {\n        while( true ) {\n          while (temp_block_offset == 0) {\n            temp_block_data = *block_ptr_2;\n            block_ptr_1 = block_ptr_2 + 1;\n            block_ptr_2 = block_ptr_2 + 2;\n            temp_block_offset = *block_ptr_1;\n          }\n          temp_uint = data_block_ptr[2];\n          if ((int)(temp_value << 0x16) < 0) {\n            if (temp_block_offset < temp_uint) {\n              temp_value = *data_block_ptr;\n              temp_uint = temp_block_offset;\n            }\n            else if ((temp_value & 0x480) == 0) {\n              temp_value = *data_block_ptr;\n            }\n            else {\n              result = *data_block_ptr - data_block_ptr[4];\n              temp_uint = result + 1 + temp_block_offset;\n              temp_block_size = (int)(data_block_ptr[5] * 3) / 2;\n              if (temp_uint <= temp_block_size) {\n                temp_uint = temp_block_size;\n              }\n              if ((int)(temp_value << 0x15) < 0) {\n                temp_block_size = allocate_memory_block_00081e14(error_code_ptr,temp_uint);\n                if (temp_block_size == 0) {\n                  *error_code_ptr = 0xc;\n                  temp_ushort = *(ushort *)(data_block_ptr + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(temp_block_size,data_block_ptr[4],result);\n                *(ushort *)(data_block_ptr + 3) = *(ushort *)(data_block_ptr + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_block_size = resize_and_merge_memory_000825b0(error_code_ptr);\n                if (temp_block_size == 0) {\n                  merge_memory_blocks_00083d9c(error_code_ptr,data_block_ptr[4]);\n                  temp_ushort = *(ushort *)(data_block_ptr + 3) & 0xff7f;\n                  *error_code_ptr = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp_value = temp_block_size + result;\n              data_block_ptr[4] = temp_block_size;\n              data_block_ptr[5] = temp_uint;\n              *data_block_ptr = temp_value;\n              data_block_ptr[2] = temp_uint - result;\n              temp_uint = temp_block_offset;\n            }\n            custom_memcpy_00082438(temp_value,temp_block_data,temp_uint);\n            data_block_ptr[2] = data_block_ptr[2] - temp_uint;\n            *data_block_ptr = *data_block_ptr + temp_uint;\n            temp_uint = temp_block_offset;\n          }\n          else if ((data_block_ptr[4] < *data_block_ptr) || (temp_value = data_block_ptr[5], temp_block_offset < temp_value)) {\n            if (temp_block_offset < temp_uint) {\n              temp_uint = temp_block_offset;\n            }\n            custom_memcpy_00082438(*data_block_ptr,temp_block_data,temp_uint);\n            temp_value = data_block_ptr[2];\n            data_block_ptr[2] = temp_value - temp_uint;\n            *data_block_ptr = *data_block_ptr + temp_uint;\n            if ((temp_value - temp_uint == 0) && (result = process_data_00083adc(error_code_ptr,data_block_ptr), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            temp_uint = 0x7fffffff;\n            if (temp_block_offset < 0x7fffffff) {\n              temp_uint = temp_block_offset;\n            }\n            temp_uint = (*(code *)data_block_ptr[9])(error_code_ptr,data_block_ptr[7],temp_block_data,(temp_uint / temp_value) * temp_value);\n            if ((int)temp_uint < 1) goto LAB_0008402e;\n          }\n          block_ptr_1 = block_info_ptr[2];\n          temp_block_offset = temp_block_offset - temp_uint;\n          block_info_ptr[2] = (uint *)((int)block_ptr_1 - temp_uint);\n          if ((uint *)((int)block_ptr_1 - temp_uint) == (uint *)0x0) break;\n          temp_value = (uint)*(ushort *)(data_block_ptr + 3);\n          temp_block_data = temp_block_data + temp_uint;\n        }\n      }\n      else {\n        do {\n          while (temp_uint == 0) {\n            temp_block_start = *block_ptr_2;\n            temp_uint = block_ptr_2[1];\n            local_flag = 0;\n            block_ptr_2 = block_ptr_2 + 2;\n          }\n          if (local_flag == 0) {\n            result = find_char_in_buffer_00084384(temp_block_start,10,temp_uint);\n            if (result == 0) {\n              temp_block_size = temp_uint + 1;\n              local_flag = 1;\n            }\n            else {\n              temp_block_size = (result + 1) - temp_block_start;\n              local_flag = 1;\n            }\n          }\n          temp_block_offset = *data_block_ptr;\n          temp_value = temp_block_size;\n          if (temp_uint <= temp_block_size) {\n            temp_value = temp_uint;\n          }\n          temp_block_data = data_block_ptr[5];\n          if ((data_block_ptr[4] < temp_block_offset) && (temp_block_end = data_block_ptr[2] + temp_block_data, (int)temp_block_end < (int)temp_value)) {\n            custom_memcpy_00082438(temp_block_offset,temp_block_start,temp_block_end);\n            *data_block_ptr = *data_block_ptr + temp_block_end;\n            result = process_data_00083adc(error_code_ptr,data_block_ptr);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp_value < (int)temp_block_data) {\n            custom_memcpy_00082438(temp_block_offset,temp_block_start,temp_value);\n            data_block_ptr[2] = data_block_ptr[2] - temp_value;\n            *data_block_ptr = temp_value + *data_block_ptr;\n            temp_block_end = temp_value;\n          }\n          else {\n            temp_block_end = (*(code *)data_block_ptr[9])(error_code_ptr,data_block_ptr[7],temp_block_start,temp_block_data);\n            if ((int)temp_block_end < 1) goto LAB_0008402e;\n          }\n          temp_block_size = temp_block_size - temp_block_end;\n          if ((temp_block_size == 0) && (result = process_data_00083adc(error_code_ptr,data_block_ptr), local_flag = temp_block_size, result != 0))\n          goto LAB_0008402e;\n          block_ptr_1 = block_info_ptr[2];\n          temp_block_start = temp_block_start + temp_block_end;\n          temp_uint = temp_uint - temp_block_end;\n          block_info_ptr[2] = (uint *)((int)block_ptr_1 - temp_block_end);\n        } while ((uint *)((int)block_ptr_1 - temp_block_end) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_block_size = 0;\n      temp_value = 0;\n      do {\n        while( true ) {\n          temp_block_start = temp_value;\n          if (temp_uint <= temp_value) {\n            temp_block_start = temp_uint;\n          }\n          if (temp_value != 0) break;\n          temp_block_size = *block_ptr_2;\n          temp_value = block_ptr_2[1];\n          block_ptr_2 = block_ptr_2 + 2;\n        }\n        result = (*(code *)data_block_ptr[9])(error_code_ptr,data_block_ptr[7],temp_block_size,temp_block_start);\n        if (result < 1) {\nLAB_0008402e:\n          temp_ushort = *(ushort *)(data_block_ptr + 3);\nLAB_00084030:\n          *(ushort *)(data_block_ptr + 3) = temp_ushort | 0x40;\n          return 0xffffffff;\n        }\n        block_ptr_1 = block_info_ptr[2];\n        temp_block_size = temp_block_size + result;\n        temp_value = temp_value - result;\n        block_info_ptr[2] = (uint *)((int)block_ptr_1 - result);\n      } while ((uint *)((int)block_ptr_1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0008234c",
                "FUN_000825b0",
                "FUN_00082438",
                "FUN_00083808",
                "FUN_00084384",
                "FUN_00083adc",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": true,
            "current_name": "process_data_blocks_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "updateArrayValues_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "code": "\nvoid updateArrayValues_00080d7a(undefined4 *array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[0x11] = value;\n  if (condition3 == 0) {\n    array[0x18] = value;\n  }\n  else {\n    array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    array[0x15] = value;\n  }\n  else {\n    array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    array[0xd] = value;\n  }\n  else {\n    array[0xc] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "imported": true,
            "current_name": "updateArrayValues_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "iVar2": "settingsControl",
                "FUN_00080e9c": "initializeSettings_00080e9c",
                "puVar1": "settingsArray"
            },
            "code": "\nvoid initializeSettings_00080e9c(void)\n\n{\n  undefined4 *settingsArray;\n  int settingsControl;\n  \n  settingsArray = DAT_00080f08;\n  *DAT_00080f08 = 0x400;\n  settingsArray[0x80] = 0x400;\n  settingsControl = DAT_00080f0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    do {\n    } while (-1 < *(int *)(settingsControl + 0x68) << 0x1f);\n  }\n  *(undefined4 *)(settingsControl + 0x20) = DAT_00080f10;\n  do {\n  } while (-1 < *(int *)(settingsControl + 0x68) << 0xf);\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  do {\n  } while (-1 < *(int *)(settingsControl + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  do {\n  } while (-1 < *(int *)(settingsControl + 0x68) << 0x1e);\n  *(undefined4 *)(DAT_00080f0c + 0x30) = 0x11;\n  do {\n  } while (-1 < *(int *)(settingsControl + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x30) = 0x12;\n  do {\n  } while (-1 < *(int *)(settingsControl + 0x68) << 0x1c);\n  *DAT_00080f20 = DAT_00080f1c;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "initializeSettings_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "sVar1": "short_data",
                "iVar3": "process_result",
                "FUN_00084464": "process_and_update_data_00084464",
                "puVar2": "pointer_data",
                "param_1": "result",
                "unaff_r5": "extra_data4",
                "unaff_r6": "extra_data5",
                "unaff_r4": "extra_data3",
                "param_2": "input_data",
                "param_3": "extra_data1",
                "param_4": "extra_data2",
                "uVar4": "ushort_data",
                "in_lr": "extra_data6"
            },
            "code": "\nvoid process_and_update_data_00084464(int *result,int input_data,undefined4 extra_data1,undefined4 extra_data2)\n\n{\n  short short_data;\n  undefined *pointer_data;\n  int process_result;\n  ushort ushort_data;\n  undefined4 extra_data3;\n  undefined4 extra_data4;\n  undefined4 extra_data5;\n  undefined4 extra_data6;\n  \n  ushort_data = *(ushort *)(input_data + 0xc);\n  if ((int)((uint)ushort_data << 0x17) < 0) {\n    update_value_if_condition_met_00084700(result,(int)*(short *)(input_data + 0xe),0,2);\n    ushort_data = *(ushort *)(input_data + 0xc);\n  }\n  *(ushort *)(input_data + 0xc) = ushort_data & 0xefff;\n  pointer_data = PTR_DAT_000845fc;\n  short_data = *(short *)(input_data + 0xe);\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  process_result = process_data_000811cc((int)short_data,extra_data1,extra_data2,extra_data2,extra_data3,extra_data4,extra_data5,extra_data6);\n  if ((process_result == -1) && (*(int *)pointer_data != 0)) {\n    *result = *(int *)pointer_data;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00084700",
                "FUN_000811cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": true,
            "current_name": "process_and_update_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_negative_one_000811ae"
            },
            "code": "\nundefined4 return_negative_one_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": true,
            "current_name": "return_negative_one_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "iVar2": "previous_value",
                "param_1": "input_value",
                "FUN_0008118c": "add_and_return_previous_0008118c",
                "puVar1": "pointer_to_data"
            },
            "code": "\nint add_and_return_previous_0008118c(int input_value)\n\n{\n  undefined *pointer_to_data;\n  int previous_value;\n  \n  pointer_to_data = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  previous_value = *(int *)pointer_to_data;\n  *(int *)pointer_to_data = input_value + previous_value;\n  return previous_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": true,
            "current_name": "add_and_return_previous_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "bVar4": "null_byte_found",
                "iVar1": "byte_index",
                "puVar2": "aligned_ptr",
                "param_1": "input_value",
                "FUN_00082a50": "find_first_null_byte_00082a50",
                "uVar3": "current_value"
            },
            "code": "\nint find_first_null_byte_00082a50(uint input_value)\n\n{\n  int byte_index;\n  uint *aligned_ptr;\n  uint current_value;\n  bool null_byte_found;\n  \n  aligned_ptr = (uint *)(input_value & 0xfffffffc);\n  byte_index = -(input_value & 3);\n  current_value = *aligned_ptr;\n  if ((input_value & 3) != 0) {\n    current_value = current_value | 0xffffffffU >> ((byte_index + 4U & 0x1f) << 3);\n  }\n  while (aligned_ptr = aligned_ptr + 1, (current_value + 0xfefefeff & ~current_value & 0x80808080) == 0) {\n    byte_index = byte_index + 4;\n    current_value = *aligned_ptr;\n  }\n  null_byte_found = (current_value & 0xff) == 0;\n  if (!null_byte_found) {\n    byte_index = byte_index + 1;\n    null_byte_found = (current_value & 0xff00) == 0;\n  }\n  if (!null_byte_found) {\n    byte_index = byte_index + 1;\n    null_byte_found = (current_value & 0xff0000) == 0;\n  }\n  if (!null_byte_found) {\n    byte_index = byte_index + 1;\n  }\n  return byte_index;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "imported": true,
            "current_name": "find_first_null_byte_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "param_1": "base_address",
                "param_2": "new_value",
                "FUN_0008106e": "update_value_at_offset_0008106e"
            },
            "code": "\nvoid update_value_at_offset_0008106e(int base_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(base_address + 0x28) = new_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": true,
            "current_name": "update_value_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2"
            },
            "code": "\nundefined4 return_zero_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": true,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "returnZero_000811c6"
            },
            "code": "\nundefined4 returnZero_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": true,
            "current_name": "returnZero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "iVar1": "memory_data",
                "iVar3": "updated_value",
                "iVar5": "new_size",
                "puVar2": "memory_pointer",
                "param_1": "memory_handle",
                "param_2": "requested_size",
                "FUN_00083d00": "adjust_memory_allocation_00083d00",
                "uVar4": "current_size"
            },
            "code": "\nundefined4 adjust_memory_allocation_00083d00(undefined4 memory_handle,int requested_size)\n\n{\n  int memory_data;\n  undefined *memory_pointer;\n  int updated_value;\n  uint current_size;\n  int new_size;\n  \n  memory_data = DAT_00083d90;\n  do_nothing_00082598();\n  current_size = *(uint *)(*(int *)(memory_data + 8) + 4) & 0xfffffffc;\n  new_size = ((current_size - requested_size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_size) {\n    updated_value = update_and_store_previous_value_00082970(memory_handle,0);\n    if (updated_value == *(int *)(memory_data + 8) + current_size) {\n      updated_value = update_and_store_previous_value_00082970(memory_handle,-new_size);\n      memory_pointer = PTR_DAT_00083d94;\n      if (updated_value != -1) {\n        updated_value = *(int *)PTR_DAT_00083d94;\n        *(uint *)(*(int *)(memory_data + 8) + 4) = current_size - new_size | 1;\n        *(int *)memory_pointer = updated_value - new_size;\n        do_nothing_0008259c(memory_handle);\n        return 1;\n      }\n      new_size = update_and_store_previous_value_00082970(memory_handle,0);\n      memory_pointer = PTR_DAT_00083d94;\n      current_size = new_size - *(int *)(memory_data + 8);\n      if (0xf < (int)current_size) {\n        updated_value = *DAT_00083d98;\n        *(uint *)(*(int *)(memory_data + 8) + 4) = current_size | 1;\n        *(int *)memory_pointer = new_size - updated_value;\n      }\n    }\n  }\n  do_nothing_0008259c(memory_handle);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": true,
            "current_name": "adjust_memory_allocation_00083d00"
        }
    },
    "used_tokens": 95734,
    "layers": [
        [
            "FUN_00081042",
            "FUN_00081d1c",
            "FUN_00080118",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_00080f9c",
            "FUN_00081454",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080d2e",
            "FUN_00081944",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "thunk_FUN_00081714",
            "FUN_00081714",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081d5c",
            "FUN_000811be",
            "FUN_00084a80",
            "FUN_000811cc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_000803d4",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00080da0",
            "FUN_00082438",
            "FUN_000847e0",
            "FUN_0008105c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6"
        ],
        [
            "FUN_00080ce0",
            "FUN_000847ac",
            "FUN_00083b14",
            "FUN_00081210",
            "FUN_00084728",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00081c5c",
            "FUN_00084700",
            "FUN_0008477c",
            "FUN_00082970",
            "FUN_000815d4",
            "FUN_000846dc",
            "FUN_00080410",
            "FUN_00081508",
            "FUN_0008456c"
        ],
        [
            "FUN_00081c94",
            "FUN_00080c0c",
            "FUN_00081318",
            "FUN_0008449c",
            "FUN_00084750",
            "FUN_00081c54",
            "FUN_00084464",
            "FUN_00083d00"
        ],
        [
            "FUN_00083d9c",
            "FUN_00081ca8",
            "FUN_000801b0",
            "FUN_00080ae4",
            "FUN_00080164",
            "FUN_00080258"
        ],
        [
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_000805d0",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc",
            "FUN_0008043e"
        ],
        [
            "FUN_000816a8",
            "FUN_000815fe",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_000825b0",
            "FUN_0008160c",
            "FUN_00081df4"
        ],
        [
            "FUN_00083974",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_000844c4",
            "FUN_00081622",
            "FUN_00083f34"
        ],
        [
            "FUN_00083c40",
            "FUN_0008163a"
        ],
        [
            "FUN_00082ac0",
            "FUN_0008165c"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ],
        [
            "FUN_00082b38"
        ]
    ],
    "locked_functions": []
}