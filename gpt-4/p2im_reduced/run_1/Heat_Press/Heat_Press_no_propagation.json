{
    "functions": {
        "FUN_000816a6": {
            "renaming": {
                "FUN_000816a6": "do_nothing_000816a6"
            },
            "code": "\nvoid do_nothing_000816a6(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a6",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_000816a6"
        },
        "FUN_000816a8": {
            "renaming": {
                "FUN_000816a8": "main_loop_000816a8",
                "do_nothing_000816a6": "idle_task",
                "do_nothing_0008120c": "delay_task"
            },
            "code": "\nvoid main_loop_000816a8(void)\n\n{\n  FUNC_000816d4();\n  FUN_00080ae4();\n  idle_task();\n  delay_task(1);\n  FUN_000804a8();\n  do {\n    do {\n      FUN_000805d0();\n    } while (DAT_000816d0 == 0);\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "called": [
                "FUN_000805d0",
                "FUN_0008120c",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000816a8",
            "calling": [
                "FUN_00080f24"
            ],
            "imported": false,
            "current_name": "main_loop_000816a8"
        },
        "FUN_00081042": {
            "renaming": {
                "FUN_00081042": "update_bitmask_00081042",
                "param_1": "bitmaskPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "code": "\nvoid updateBitmask_00081042(int bitmaskPtr,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(bitmaskPtr + 4) =\n       value2 | *(uint *)(bitmaskPtr + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081042",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_bitmask_00081042"
        },
        "FUN_00082ac0": {
            "renaming": {
                "FUN_00082ac0": "process_elements_00082ac0",
                "param_1": "input_data",
                "param_2": "element_data",
                "param_3": "element_pointers",
                "piVar1": "current_pointer",
                "iVar2": "result",
                "piVar3": "next_pointer",
                "uVar4": "iteration",
                "puVar5": "element_ptr",
                "uVar6": "element_size",
                "uVar7": "num_elements"
            },
            "code": "\nint process_elements_00082ac0(undefined4 input_data,int element_data,int **element_pointers)\n\n{\n  int *current_pointer;\n  int result;\n  int *next_pointer;\n  uint iteration;\n  undefined4 *element_ptr;\n  uint element_size;\n  uint num_elements;\n  \n  if (-1 < *(int *)(element_data + 100) << 0x12) {\n    result = FUN_00083f34();\n    element_pointers[2] = (int *)0x0;\n    element_pointers[1] = (int *)0x0;\n    return result;\n  }\n  next_pointer = element_pointers[2];\n  current_pointer = *element_pointers;\n  while (next_pointer != (int *)0x0) {\n    element_size = current_pointer[1];\n    num_elements = element_size >> 2;\n    if (num_elements != 0) {\n      element_ptr = (undefined4 *)(*current_pointer + -4);\n      iteration = 0;\n      do {\n        element_ptr = element_ptr + 1;\n        result = FUN_00083c40(input_data,*element_ptr,element_data);\n        iteration = iteration + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (num_elements != iteration);\n      next_pointer = element_pointers[2];\n    }\n    next_pointer = (int *)((int)next_pointer - (element_size & 0xfffffffc));\n    element_pointers[2] = next_pointer;\n    current_pointer = current_pointer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  element_pointers[2] = (int *)0x0;\n  element_pointers[1] = (int *)0x0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082ac0",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_elements_00082ac0"
        },
        "FUN_00080ce0": {
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "returnValue",
                "do_nothing_00080aa8": "executeFunctionA",
                "do_nothing_00080ab8": "executeFunctionB",
                "do_nothing_00080aba": "executeFunctionC",
                "do_nothing_00080abc": "executeFunctionD"
            },
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_000813e4(PTR_DAT_00080d14);\n  if (returnValue != 0) {\n    do_nothing_00080aa8();\n  }\n  returnValue = FUN_000813e4(PTR_DAT_00080d18);\n  if (returnValue != 0) {\n    do_nothing_00080ab8();\n  }\n  returnValue = FUN_000813e4(PTR_DAT_00080d1c);\n  if (returnValue != 0) {\n    do_nothing_00080aba();\n  }\n  returnValue = FUN_000813e4(PTR_DAT_00080d20);\n  if (returnValue != 0) {\n    do_nothing_00080abc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00080aa8",
                "FUN_00080abc",
                "FUN_00080aba",
                "FUN_000813e4",
                "FUN_00080ab8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ce0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "check_and_execute_functions_00080ce0"
        },
        "FUN_00081682": {
            "renaming": {
                "FUN_00081682": "initialize_and_process_00081682",
                "param_1": "array_ptr",
                "param_2": "input_value",
                "uVar1": "processed_value"
            },
            "code": "\nundefined4 * initialize_and_process_00081682(undefined4 *array_ptr,int input_value)\n\n{\n  undefined4 processed_value;\n  \n  *array_ptr = 0;\n  array_ptr[1] = 0;\n  array_ptr[2] = 0;\n  if (input_value != 0) {\n    processed_value = FUN_00082a50(input_value);\n    FUN_0008165c(array_ptr,input_value,processed_value);\n  }\n  return array_ptr;\n}\n\n",
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081682",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "initialize_and_process_00081682"
        },
        "FUN_000815fe": {
            "renaming": {
                "FUN_000815fe": "process_data_000815fe",
                "param_1": "data_ptr"
            },
            "code": "\nundefined4 * process_data_000815fe(undefined4 *data_ptr)\n\n{\n  FUN_00081e04(*data_ptr);\n  return data_ptr;\n}\n\n",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815fe",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000815fe"
        },
        "FUN_00081d1c": {
            "renaming": {
                "FUN_00081d1c": "calculate_special_value_00081d1c",
                "param_1": "input_value",
                "uVar1": "intermediate_value"
            },
            "code": "\nuint calculate_special_value_00081d1c(uint input_value)\n\n{\n  uint intermediate_value;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  intermediate_value = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)intermediate_value) {\n    return (input_value << 8 | 0x80000000) >> (intermediate_value & 0xff);\n  }\n  if ((intermediate_value == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d1c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_special_value_00081d1c"
        },
        "FUN_000847ac": {
            "renaming": {
                "FUN_000847ac": "calculate_differences_000847ac",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "multiplier1",
                "param_4": "multiplier2",
                "param_5": "result_array",
                "uVar1": "temp_result",
                "lVar2": "long_multiplication"
            },
            "code": "\nvoid calculate_differences_000847ac(uint value1,int value2,undefined4 multiplier1,undefined4 multiplier2,int *result_array)\n\n{\n  uint temp_result;\n  longlong long_multiplication;\n  \n  long_multiplication = FUN_00084a80();\n  long_multiplication = long_multiplication * CONCAT44(multiplier2,multiplier1);\n  temp_result = (uint)long_multiplication;\n  *result_array = value1 - temp_result;\n  result_array[1] = (value2 - (int)((ulonglong)long_multiplication >> 0x20)) - (uint)(value1 < temp_result);\n  return;\n}\n\n",
            "called": [
                "FUN_00084a80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847ac",
            "calling": [
                "FUN_00084750"
            ],
            "imported": false,
            "current_name": "calculate_differences_000847ac"
        },
        "FUN_00080118": {
            "renaming": {
                "FUN_00080118": "execute_custom_function_00080118",
                "param_1": "unusedParam1",
                "param_2": "inputData",
                "param_3": "paramForFunction",
                "param_4": "unusedParam2"
            },
            "code": "\nvoid executeCustomFunction_00080118(undefined4 unusedParam1,undefined *inputData,undefined4 paramForFunction,undefined4 unusedParam2)\n\n{\n  if (DAT_00080134 != 0) {\n    inputData = PTR_DAT_0008013c;\n  }\n  if ((*DAT_00080140 != 0) && (DAT_00080144 != (code *)0x0)) {\n    (*DAT_00080144)(DAT_00080140,inputData,paramForFunction,DAT_00080144,unusedParam2);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080118",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "execute_custom_function_00080118"
        },
        "FUN_00080aa8": {
            "renaming": {
                "FUN_00080aa8": "do_nothing_00080aa8"
            },
            "code": "\nvoid do_nothing_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aa8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aa8"
        },
        "FUN_00081c94": {
            "renaming": {
                "FUN_00081c94": "check_status_00081c94",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkStatus_00081c94(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_00081c5c();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c94",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_status_00081c94"
        },
        "FUN_00083b14": {
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "baseAddress",
                "puVar1": "tempPointer1",
                "uVar2": "tempValue",
                "puVar3": "tempFunction",
                "puVar4": "tempLabel",
                "puVar5": "dataStructure1",
                "puVar6": "dataStructure2"
            },
            "code": "\nvoid initializeDataStructures_00083b14(int baseAddress)\n\n{\n  undefined *tempPointer1;\n  undefined4 tempValue;\n  undefined *tempFunction;\n  undefined *tempLabel;\n  undefined4 *dataStructure1;\n  undefined4 *dataStructure2;\n  \n  if (*(int *)(baseAddress + 0x38) == 0) {\n    dataStructure1 = *(undefined4 **)(baseAddress + 4);\n    *(undefined **)(baseAddress + 0x3c) = PTR_LAB_00083b08_1_00083bf4;\n    *(undefined4 *)(baseAddress + 0x2e4) = 3;\n    *(int *)(baseAddress + 0x2e8) = baseAddress + 0x2ec;\n    *(undefined4 *)(baseAddress + 0x2e0) = 0;\n    *(undefined2 *)(dataStructure1 + 3) = 4;\n    *dataStructure1 = 0;\n    dataStructure1[1] = 0;\n    dataStructure1[2] = 0;\n    dataStructure1[0x19] = 0;\n    *(undefined2 *)((int)dataStructure1 + 0xe) = 0;\n    dataStructure1[4] = 0;\n    dataStructure1[5] = 0;\n    dataStructure1[6] = 0;\n    FUN_00082504(dataStructure1 + 0x17,0,8);\n    tempLabel = PTR_LAB_000844bc_1_00083c04;\n    tempFunction = PTR_FUN_0008449c_1_00083c00;\n    tempValue = DAT_00083bfc;\n    tempPointer1 = PTR_LAB_00084440_1_00083bf8;\n    dataStructure2 = *(undefined4 **)(baseAddress + 8);\n    dataStructure1[7] = dataStructure1;\n    dataStructure1[8] = tempPointer1;\n    dataStructure1[9] = tempValue;\n    dataStructure1[10] = tempFunction;\n    dataStructure1[0xb] = tempLabel;\n    *(undefined2 *)((int)dataStructure2 + 0xe) = 1;\n    *(undefined2 *)(dataStructure2 + 3) = 9;\n    *dataStructure2 = 0;\n    dataStructure2[1] = 0;\n    dataStructure2[2] = 0;\n    dataStructure2[0x19] = 0;\n    dataStructure2[4] = 0;\n    dataStructure2[5] = 0;\n    dataStructure2[6] = 0;\n    FUN_00082504(dataStructure2 + 0x17,0,8);\n    dataStructure1 = *(undefined4 **)(baseAddress + 0xc);\n    dataStructure2[7] = dataStructure2;\n    dataStructure2[8] = tempPointer1;\n    dataStructure2[9] = tempValue;\n    dataStructure2[10] = tempFunction;\n    dataStructure2[0xb] = tempLabel;\n    *(undefined2 *)(dataStructure1 + 3) = 0x12;\n    *(undefined2 *)((int)dataStructure1 + 0xe) = 2;\n    *dataStructure1 = 0;\n    dataStructure1[1] = 0;\n    dataStructure1[2] = 0;\n    dataStructure1[0x19] = 0;\n    dataStructure1[4] = 0;\n    dataStructure1[5] = 0;\n    dataStructure1[6] = 0;\n    FUN_00082504(dataStructure1 + 0x17,0,8);\n    dataStructure1[7] = dataStructure1;\n    dataStructure1[8] = tempPointer1;\n    dataStructure1[9] = tempValue;\n    dataStructure1[10] = tempFunction;\n    dataStructure1[0xb] = tempLabel;\n    *(undefined4 *)(baseAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083b14",
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00082b38",
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00083b14"
        },
        "FUN_000842a4": {
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "inputData",
                "param_2": "dataStruct",
                "uVar1": "tempUShort",
                "iVar2": "tempInt1",
                "iVar3": "tempInt2",
                "uVar4": "tempUInt",
                "bVar5": "flag",
                "auStack_54": "stackBuffer",
                "local_50": "localValue"
            },
            "code": "\nvoid processData_000842a4(int inputData,int *dataStruct)\n\n{\n  ushort tempUShort;\n  int tempInt1;\n  int tempInt2;\n  uint tempUInt;\n  bool flag;\n  undefined stackBuffer [4];\n  uint localValue;\n  \n  tempUShort = *(ushort *)(dataStruct + 3);\n  tempUInt = (uint)tempUShort;\n  if ((int)(tempUInt << 0x1e) < 0) {\n    *dataStruct = (int)dataStruct + 0x43;\n    dataStruct[4] = (int)dataStruct + 0x43;\n    dataStruct[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)dataStruct + 0xe)) {\n    tempInt1 = FUN_000846b4(inputData,(int)*(short *)((int)dataStruct + 0xe),stackBuffer);\n    if (-1 < tempInt1) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) &&\n         ((undefined *)dataStruct[10] == PTR_FUN_0008449c_1_00084380)) {\n        tempInt1 = 0x400;\n        *(ushort *)(dataStruct + 3) = *(ushort *)(dataStruct + 3) | 0x400;\n        dataStruct[0x13] = 0x400;\n      }\n      else {\n        tempInt1 = 0x400;\n        *(ushort *)(dataStruct + 3) = *(ushort *)(dataStruct + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    tempUShort = *(ushort *)(dataStruct + 3);\n    tempUInt = (uint)tempUShort;\n  }\n  *(ushort *)(dataStruct + 3) = tempUShort | 0x800;\n  if ((tempUInt & 0x80) == 0) {\n    tempInt1 = 0x400;\n  }\n  else {\n    tempInt1 = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  tempInt2 = FUN_00081e14(inputData,tempInt1);\n  tempUShort = *(ushort *)(dataStruct + 3);\n  if (tempInt2 == 0) {\n    if (-1 < (int)((uint)tempUShort << 0x16)) {\n      *(ushort *)(dataStruct + 3) = tempUShort | 2;\n      *dataStruct = (int)dataStruct + 0x43;\n      dataStruct[4] = (int)dataStruct + 0x43;\n      dataStruct[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(inputData + 0x3c) = PTR_LAB_00083b08_1_0008437c;\n    *(ushort *)(dataStruct + 3) = tempUShort | 0x80;\n    *dataStruct = tempInt2;\n    dataStruct[4] = tempInt2;\n    dataStruct[5] = tempInt1;\n    if ((flag) && (tempInt1 = FUN_000846dc(inputData,(int)*(short *)((int)dataStruct + 0xe)), tempInt1 != 0))\n    {\n      *(ushort *)(dataStruct + 3) = *(ushort *)(dataStruct + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00081e14",
                "FUN_000846b4",
                "FUN_000846dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000842a4",
            "calling": [
                "FUN_00083808"
            ],
            "imported": false,
            "current_name": "process_data_000842a4"
        },
        "FUN_000846a4": {
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "inputData",
                "uVar1": "result",
                "iVar2": "callbackResult",
                "iVar3": "dataPointer"
            },
            "code": "\nundefined4 processData_000846a4(int inputData)\n\n{\n  undefined4 result;\n  int callbackResult;\n  int dataPointer;\n  \n  dataPointer = *DAT_000846b0;\n  if (inputData != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(inputData + 0xc) != 0) {\n      result = FUN_00083adc(dataPointer,inputData);\n      if ((*(code **)(inputData + 0x2c) != (code *)0x0) &&\n         (callbackResult = (**(code **)(inputData + 0x2c))(dataPointer,*(undefined4 *)(inputData + 0x1c)), callbackResult < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputData + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(dataPointer,*(undefined4 *)(inputData + 0x10));\n      }\n      if (*(int *)(inputData + 0x30) != 0) {\n        if (*(int *)(inputData + 0x30) != inputData + 0x40) {\n          FUN_00083d9c(dataPointer);\n        }\n        *(undefined4 *)(inputData + 0x30) = 0;\n      }\n      if (*(int *)(inputData + 0x44) != 0) {\n        FUN_00083d9c(dataPointer);\n        *(undefined4 *)(inputData + 0x44) = 0;\n      }\n      do_nothing_00083c08();\n      *(undefined2 *)(inputData + 0xc) = 0;\n      do_nothing_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083c08",
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083c0c",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846a4",
            "calling": [],
            "imported": false,
            "current_name": "process_data_000846a4"
        },
        "FUN_00080f24": {
            "renaming": {
                "FUN_00080f24": "initialize_and_execute_00080f24",
                "puVar1": "srcPtr",
                "puVar2": "destPtr",
                "iVar3": "index",
                "puVar4": "zeroFillPtr"
            },
            "code": "\nvoid initializeAndExecute_00080f24(void)\n\n{\n  undefined *srcPtr;\n  undefined *destPtr;\n  int index;\n  undefined4 *zeroFillPtr;\n  \n  srcPtr = PTR_Elf32_Rel_ARRAY_00080f80;\n  destPtr = DAT_00080f7c;\n  zeroFillPtr = (undefined4 *)PTR_DAT_00080f84;\n  if (DAT_00080f7c != PTR_Elf32_Rel_ARRAY_00080f80) {\n    for (index = 0; zeroFillPtr = (undefined4 *)PTR_DAT_00080f84, srcPtr + index < PTR_DAT_00080f88;\n        index = index + 4) {\n      *(undefined4 *)(srcPtr + index) = *(undefined4 *)(destPtr + index);\n    }\n  }\n  for (; index = DAT_00080f94, zeroFillPtr < DAT_00080f8c; zeroFillPtr = zeroFillPtr + 1) {\n    *zeroFillPtr = 0;\n  }\n  destPtr = PTR_DAT_00080f90 + -0x20000000;\n  *(uint *)(DAT_00080f94 + 8) = (uint)PTR_DAT_00080f90 & 0x1fffff80;\n  if (destPtr < (undefined *)0x100000) {\n    *(uint *)(index + 8) = *(uint *)(index + 8) | 0x20000000;\n  }\n  (*DAT_00080f98)();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_000816a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f24",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_execute_00080f24"
        },
        "FUN_00080e04": {
            "renaming": {
                "FUN_00080e04": "check_bit_intersection_00080e04",
                "param_1": "input_address",
                "param_2": "bitmask",
                "uVar1": "result"
            },
            "code": "\nuint check_bit_intersection_00080e04(int input_address,uint bitmask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_address + 8) & bitmask;\n  if (result != 0) {\n    if ((bitmask & *(uint *)(input_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e04",
            "calling": [
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "check_bit_intersection_00080e04"
        },
        "FUN_000804a8": {
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "puVar1": "config_ptr",
                "puVar2": "data_ptr_1",
                "puVar3": "data_ptr_2",
                "puVar4": "timer_ptr",
                "uVar5": "random_time_1",
                "iVar6": "random_time"
            },
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  undefined *config_ptr;\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  undefined *timer_ptr;\n  undefined4 random_time_1;\n  int random_time;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  data_ptr_1 = PTR_DAT_000805ac;\n  config_ptr = PTR_DAT_000805a8;\n  *(undefined2 *)(PTR_DAT_000805a8 + 0xe) = 0x13;\n  *(undefined2 *)(config_ptr + 0x10) = 10;\n  *(undefined **)(config_ptr + 0x14) = data_ptr_1 + 0x26;\n  config_ptr[1] = 3;\n  config_ptr[0x19] = 3;\n  *(undefined2 *)(config_ptr + 0x1a) = 0x14;\n  *(undefined2 *)(config_ptr + 0x28) = 3;\n  *(undefined2 *)(config_ptr + 4) = 0x10;\n  *(undefined **)(config_ptr + 8) = data_ptr_1;\n  config_ptr[0xd] = 0x10;\n  *(undefined2 *)(config_ptr + 0x1c) = 0xc;\n  config_ptr[0x25] = 0x10;\n  *(undefined2 *)(config_ptr + 0x34) = 8;\n  data_ptr_2 = PTR_DAT_000805b0;\n  *(undefined2 *)(config_ptr + 0x26) = 0x1c;\n  *(undefined **)(config_ptr + 0x2c) = data_ptr_1 + 0x38;\n  timer_ptr = PTR_DAT_000805b4;\n  config_ptr[0x30] = 2;\n  config_ptr[0x31] = 2;\n  *(undefined **)(config_ptr + 0x38) = data_ptr_2;\n  config_ptr[0x3c] = 2;\n  *config_ptr = 1;\n  config_ptr[0xc] = 1;\n  config_ptr[0x18] = 1;\n  config_ptr[0x24] = 1;\n  *(undefined2 *)(config_ptr + 0x3e) = 1;\n  *(undefined2 *)(config_ptr + 0x40) = 1;\n  *(undefined2 *)(config_ptr + 2) = 0;\n  *(undefined **)(config_ptr + 0x20) = data_ptr_1 + 0x28;\n  *(undefined2 *)(config_ptr + 0x32) = 0;\n  config_ptr[0x3d] = 5;\n  *(undefined **)(config_ptr + 0x44) = data_ptr_2 + 2;\n  FUN_00080164(timer_ptr,0x4b00);\n  *(undefined2 *)(timer_ptr + 0x56) = 2000;\n  random_time_1 = thunk_FUNC_00081714();\n  *(undefined4 *)PTR_DAT_000805b8 = random_time_1;\n  random_time = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805bc = random_time + 1000;\n  random_time = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805c0 = random_time + 1000;\n  random_time = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805c4 = random_time + 1000;\n  random_time = thunk_FUNC_00081714();\n  *(int *)PTR_DAT_000805c8 = random_time + 1000;\n  *PTR_DAT_000805cc = 0;\n  if (*(int *)PTR_DAT_00080160 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00080164",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000804a8",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_000804a8"
        },
        "FUN_000802da": {
            "renaming": {
                "FUN_000802da": "update_configuration_000802da",
                "param_1": "configPtr",
                "param_2": "inputValue",
                "param_3": "inputArray",
                "cVar1": "resultCode",
                "bVar2": "tempByte",
                "uVar3": "tempUndef",
                "uVar4": "tempUshort",
                "uVar5": "tempUint",
                "puVar6": "tempPtr",
                "local_1c": "localChar",
                "local_1b": "localUndef",
                "local_1a": "localUshort"
            },
            "code": "\nint updateConfiguration_000802da(int configPtr,ushort inputValue,ushort *inputArray)\n\n{\n  char resultCode;\n  byte tempByte;\n  undefined tempUndef;\n  ushort tempUshort;\n  uint tempUint;\n  ushort *tempPtr;\n  char localChar;\n  undefined localUndef;\n  ushort localUshort;\n  \n  tempUint = (uint)inputValue;\n  if (*(char *)(configPtr + 4) != '\\0') {\n    resultCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(configPtr + 7) != '\\0') {\n    resultCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < (byte)(localChar - 1U)) {\n    resultCode = -3;\n    goto LAB_000803cc;\n  }\n  *(char *)(configPtr + 9) = localChar;\n  *(undefined *)(configPtr + 10) = localUndef;\n  *(ushort **)(configPtr + 0x4c) = inputArray;\n  *(char *)(configPtr + 0xb) = (char)((uint)localUshort >> 8);\n  *(char *)(configPtr + 0xc) = (char)localUshort;\n  resultCode = (char)inputValue;\n  tempUndef = (undefined)(tempUint >> 8);\n  switch(localUndef) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(configPtr + 0xd) = tempUndef;\n    break;\n  case 5:\n    tempUshort = *inputArray;\n    if (tempUshort != 0) {\n      tempUshort = 1;\n    }\n    *(char *)(configPtr + 0xd) = -(char)tempUshort;\n    tempUint = 0;\n    break;\n  case 6:\n    *(char *)(configPtr + 0xd) = (char)((uint)*inputArray >> 8);\n    tempUint = (uint)*inputArray;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    tempByte = (byte)(inputValue >> 3) & 0xfe;\n    if ((inputValue & 0xf) != 0) {\n      tempByte = tempByte + 1;\n    }\n    *(char *)(configPtr + 0xe) = resultCode;\n    *(undefined *)(configPtr + 0xd) = tempUndef;\n    *(byte *)(configPtr + 0xf) = tempByte;\n    tempUndef = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(configPtr + 0xd) = tempUndef;\n    *(char *)(configPtr + 0xe) = resultCode;\n    inputArray = inputArray + -1;\n    *(char *)(configPtr + 0xf) = resultCode * '\\x02';\n    *(undefined *)(configPtr + 0x49) = 7;\n    tempPtr = inputArray + tempUint;\n    while (inputArray != tempPtr) {\n      tempByte = *(byte *)(configPtr + 0x49);\n      *(char *)(configPtr + (uint)tempByte + 9) = (char)((uint)inputArray[1] >> 8);\n      tempUint = tempByte + 1 & 0xff;\n      *(char *)(configPtr + 0x49) = (char)tempUint;\n      inputArray = inputArray + 1;\n      *(char *)(tempUint + configPtr + 9) = (char)*inputArray;\n      *(byte *)(configPtr + 0x49) = tempByte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(configPtr + 0xe) = (char)tempUint;\n  tempUndef = 6;\nLAB_0008034a:\n  *(undefined *)(configPtr + 0x49) = tempUndef;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(configPtr);\n  *(undefined *)(configPtr + 7) = 1;\n  resultCode = '\\0';\nLAB_000803cc:\n  return (int)resultCode;\n}\n\n",
            "called": [
                "FUN_00080258"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000802da",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "update_configuration_000802da"
        },
        "FUN_00080f9c": {
            "renaming": {
                "FUN_00080f9c": "calculate_configuration_00080f9c",
                "param_1": "config",
                "param_2": "total_size",
                "param_3": "size_per_unit",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "lookup_table"
            },
            "code": "\nundefined4 calculate_configuration_00080f9c(undefined4 *config,uint total_size,int size_per_unit,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint lookup_table [16];\n  \n  lookup_table[0] = *(uint *)PTR_DAT_0008102c;\n  lookup_table[1] = *(undefined4 *)(PTR_DAT_0008102c + 4);\n  lookup_table[2] = *(undefined4 *)(PTR_DAT_0008102c + 8);\n  lookup_table[3] = *(undefined4 *)(PTR_DAT_0008102c + 0xc);\n  lookup_table[4] = *(undefined4 *)(PTR_DAT_0008102c + 0x10);\n  lookup_table[5] = *(undefined4 *)(PTR_DAT_0008102c + 0x14);\n  lookup_table[6] = *(undefined4 *)(PTR_DAT_0008102c + 0x18);\n  lookup_table[7] = *(undefined4 *)(PTR_DAT_0008102c + 0x1c);\n  lookup_table[8] = *(undefined4 *)(PTR_DAT_0008102c + 0x20);\n  lookup_table[9] = *(undefined4 *)(PTR_DAT_0008102c + 0x24);\n  lookup_table[10] = *(undefined4 *)(PTR_DAT_0008102c + 0x28);\n  lookup_table[11] = *(undefined4 *)(PTR_DAT_0008102c + 0x2c);\n  lookup_table[12] = *(undefined4 *)(PTR_DAT_0008102c + 0x30);\n  lookup_table[13] = *(undefined4 *)(PTR_DAT_0008102c + 0x34);\n  lookup_table[14] = *(undefined4 *)(PTR_DAT_0008102c + 0x38);\n  lookup_table[15] = *(undefined4 *)(PTR_DAT_0008102c + 0x3c);\n  *config = 1;\n  config[1] = 0;\n  config[0x48] = 0x202;\n  config[0x41] = 0;\n  config[0x45] = 0;\n  quotient = total_size / (uint)(size_per_unit * 2);\n  if (total_size == size_per_unit * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier *\n              (int)(((ulonglong)total_size / (ulonglong)((quotient + 1) * 2)) / (ulonglong)DAT_00081030))\n        <= lookup_table[index]) {\n      config[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | config[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080f9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "calculate_configuration_00080f9c"
        },
        "FUN_00081210": {
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "index",
                "param_2": "operation",
                "puVar1": "data_ptr1",
                "puVar2": "data_ptr2",
                "iVar3": "result",
                "uVar4": "temp_var1",
                "uVar5": "temp_var2",
                "uVar6": "temp_var3",
                "bVar7": "byte_var1",
                "bVar8": "byte_var2",
                "iVar9": "index_offset1",
                "iVar10": "index_offset2"
            },
            "code": "\nint processData_00081210(int index,int operation)\n\n{\n  undefined *data_ptr1;\n  undefined *data_ptr2;\n  int result;\n  uint temp_var1;\n  undefined4 temp_var2;\n  uint temp_var3;\n  byte byte_var1;\n  byte byte_var2;\n  int index_offset1;\n  int index_offset2;\n  \n  data_ptr2 = PTR_DAT_00081310;\n  data_ptr1 = PTR_DAT_0008130c;\n  result = index;\n  if (PTR_DAT_0008130c[index * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081310[index] & 0xf) == 4) {\n      result = FUN_0008105c(DAT_00081314,PTR_DAT_0008130c[index * 0x1c + 0x19]);\n    }\n    byte_var2 = data_ptr2[index];\n    byte_var1 = byte_var2 & 0xf;\n    if ((byte_var1 < 3) && (byte_var2 != 0)) {\n      if (byte_var1 == 2) {\n        if (operation == 0) {\n          return result;\n        }\n      }\n      else if (byte_var1 == 1) {\n        if (operation == 2) {\n          return result;\n        }\n      }\n      else if (byte_var1 == 3) {\n        if (operation == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (operation != 1) {\nLAB_0008126c:\n      if (operation == 0) {\n        result = index * 0x1c;\n        FUN_00080e18(*(undefined4 *)(data_ptr1 + result + 8));\n        result = FUN_00080da0(*(undefined4 *)(data_ptr1 + result),3,*(undefined4 *)(data_ptr1 + result + 4),0\n                            );\n        byte_var2 = data_ptr2[index] & 0xf0 | 2;\n      }\n      else {\n        if (operation != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        FUN_00080e18(*(undefined4 *)(data_ptr1 + result + 8));\n        result = FUN_00080da0(*(undefined4 *)(data_ptr1 + result),3,*(undefined4 *)(data_ptr1 + result + 4),1\n                            );\n        byte_var2 = data_ptr2[index] & 0xf0 | 1;\n      }\n      data_ptr2[index] = byte_var2;\n      return result;\n    }\n    index_offset1 = index * 0x1c;\n    index_offset2 = *(int *)(data_ptr1 + index_offset1);\n    if (byte_var2 >> 4 == 0) {\n      temp_var2 = 4;\n    }\n    else {\n      temp_var2 = 5;\n    }\n    result = FUN_00080da0(index_offset2,temp_var2,*(undefined4 *)(data_ptr1 + index_offset1 + 4),\n                         *(undefined4 *)(data_ptr1 + index_offset1 + 0x10));\n    data_ptr2[index] = data_ptr2[index] & 0xf0 | 3;\n    if (*(int *)(index_offset2 + 0x18) == -1) {\n      temp_var1 = *(uint *)(data_ptr1 + index_offset1 + 8);\n      if (0x2c < temp_var1) {\n        return 1;\n      }\n      if (temp_var1 < 0x20) {\n        temp_var1 = 1 << (temp_var1 & 0xff);\n        temp_var3 = *(uint *)(DAT_00080e98 + 0x18) & temp_var1;\n        if (temp_var3 == temp_var1) {\n          *(uint *)(DAT_00080e98 + 0x14) = temp_var3;\n        }\n      }\n      else {\n        temp_var1 = 1 << (temp_var1 - 0x20 & 0xff);\n        temp_var3 = *(uint *)(DAT_00080e98 + 0x108) & temp_var1;\n        if (temp_var3 == temp_var1) {\n          *(uint *)(DAT_00080e98 + 0x104) = temp_var3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0008105c",
                "FUN_00080da0",
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081210",
            "calling": [
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "process_data_00081210"
        },
        "FUN_00081454": {
            "renaming": {
                "FUN_00081454": "update_buffer_00081454",
                "param_1": "buffer_ptr",
                "param_2": "input_data",
                "iVar1": "buffer_address",
                "uVar2": "updated_index"
            },
            "code": "\nundefined4 updateBuffer_00081454(int buffer_ptr,undefined4 input_data)\n\n{\n  int buffer_address;\n  uint updated_index;\n  \n  buffer_address = *(int *)(buffer_ptr + 0x14);\n  if ((*(int *)(*(int *)(buffer_ptr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(buffer_address + 0x84) == *(int *)(buffer_address + 0x80))) {\n    *(undefined4 *)(*(int *)(buffer_ptr + 0x18) + 0x1c) = input_data;\n  }\n  else {\n    updated_index = DAT_000814a4 & *(int *)(buffer_address + 0x80) + 1U;\n    if ((int)updated_index < 0) {\n      updated_index = (updated_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(buffer_address + 0x84) == updated_index);\n    *(char *)(buffer_address + *(int *)(buffer_address + 0x80)) = (char)input_data;\n    *(uint *)(*(int *)(buffer_ptr + 0x14) + 0x80) = updated_index;\n    *(undefined4 *)(*(int *)(buffer_ptr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081454",
            "calling": [],
            "imported": false,
            "current_name": "update_buffer_00081454"
        },
        "FUN_00081730": {
            "renaming": {
                "FUN_00081730": "floating_point_addition_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "tempVar1",
                "iVar1": "intValue1",
                "uVar2": "xorValue1",
                "uVar3": "xorValue2",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "uVar6": "tempVar4",
                "iVar7": "intValue2",
                "bVar8": "condition"
            },
            "code": "\nuint floatingPointAddition_00081730(uint input1,uint input2,undefined4 unusedParam,uint tempVar1)\n\n{\n  int intValue1;\n  uint xorValue1;\n  uint xorValue2;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  int intValue2;\n  bool condition;\n  \n  xorValue1 = input2 ^ 0x80000000;\n  tempVar2 = input1 << 1;\n  condition = tempVar2 == 0;\n  if (!condition) {\n    tempVar1 = input2 << 1;\n    condition = tempVar1 == 0;\n  }\n  if (!condition) {\n    condition = tempVar2 == tempVar1;\n  }\n  intValue2 = (int)tempVar2 >> 0x18;\n  if (!condition) {\n    condition = intValue2 == -1;\n  }\n  if (!condition) {\n    condition = (int)tempVar1 >> 0x18 == -1;\n  }\n  if (condition) {\n    intValue1 = (int)(input2 << 1) >> 0x18;\n    if (intValue2 == -1 || intValue1 == -1) {\n      tempVar2 = xorValue1;\n      if (intValue2 == -1) {\n        tempVar2 = input1;\n      }\n      if (intValue2 != -1 || intValue1 != -1) {\n        xorValue1 = tempVar2;\n      }\n      condition = (tempVar2 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (xorValue1 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = tempVar2 == xorValue1;\n      }\n      if (!condition) {\n        tempVar2 = tempVar2 | 0x400000;\n      }\n      return tempVar2;\n    }\n    if (((input1 ^ xorValue1) & 0x7fffffff) != 0) {\n      if (tempVar2 == 0) {\n        input1 = xorValue1;\n      }\n      return input1;\n    }\n    if (input1 != xorValue1) {\n      return 0;\n    }\n    if ((tempVar2 & 0xff000000) == 0) {\n      xorValue1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        xorValue1 = xorValue1 | 0x80000000;\n      }\n      return xorValue1;\n    }\n    if (tempVar2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  tempVar2 = tempVar2 >> 0x18;\n  tempVar1 = tempVar1 >> 0x18;\n  tempVar4 = tempVar1 - tempVar2;\n  condition = tempVar4 != 0;\n  tempVar3 = tempVar2;\n  if (condition && tempVar2 <= tempVar1) {\n    tempVar3 = tempVar2 + tempVar4;\n  }\n  if (condition && tempVar2 <= tempVar1) {\n    xorValue1 = xorValue1 ^ input1;\n  }\n  if (condition && tempVar2 <= tempVar1) {\n    input1 = input1 ^ xorValue1;\n  }\n  if (condition && tempVar2 <= tempVar1) {\n    xorValue1 = xorValue1 ^ input1;\n  }\n  if (tempVar1 < tempVar2) {\n    tempVar4 = -tempVar4;\n  }\n  if (0x19 < tempVar4) {\n    return input1;\n  }\n  tempVar2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    tempVar2 = -tempVar2;\n  }\n  xorValue2 = xorValue1 & 0xffffff | 0x800000;\n  if ((xorValue1 & 0x80000000) != 0) {\n    xorValue2 = -xorValue2;\n  }\n  if (tempVar3 == tempVar4) {\n    xorValue2 = xorValue2 ^ 0x800000;\n    if (tempVar3 == 0) {\n      tempVar2 = tempVar2 ^ 0x800000;\n      tempVar3 = 1;\n    }\n    else {\n      tempVar4 = tempVar4 - 1;\n    }\n  }\n  tempVar2 = tempVar2 + ((int)xorValue2 >> (tempVar4 & 0xff));\n  xorValue2 = xorValue2 << (0x20 - tempVar4 & 0xff);\n  input1 = tempVar2 & 0x80000000;\n  if ((int)tempVar2 < 0) {\n    condition = xorValue2 != 0;\n    xorValue2 = -xorValue2;\n    tempVar2 = -tempVar2 - (uint)condition;\n  }\n  if (tempVar2 < 0x800000) {\n    xorValue1 = xorValue2 & 0x80000000;\n    xorValue2 = xorValue2 << 1;\n    tempVar2 = tempVar2 * 2 + (uint)(xorValue1 != 0);\n    xorValue1 = tempVar3 - 2;\n    if ((tempVar2 & 0x800000) == 0) {\n      intValue2 = count_leading_zeroes(tempVar2);\n      tempVar4 = intValue2 - 8;\n      tempVar2 = tempVar2 << (tempVar4 & 0xff);\n      if ((int)xorValue1 < (int)tempVar4) {\n        tempVar2 = tempVar2 >> (-(xorValue1 - tempVar4) & 0xff);\n      }\n      else {\n        tempVar2 = tempVar2 + (xorValue1 - tempVar4) * 0x800000;\n      }\n      return tempVar2 | input1;\n    }\n  }\n  else {\n    xorValue1 = tempVar3 - 1;\n    if (0xffffff < tempVar2) {\n      xorValue1 = tempVar2 & 1;\n      tempVar2 = tempVar2 >> 1;\n      xorValue2 = (uint)(xorValue1 != 0) << 0x1f | xorValue2 >> 1;\n      xorValue1 = tempVar3;\n      if (0xfd < tempVar3) goto LAB_0008186a;\n    }\n  }\n  tempVar2 = tempVar2 + xorValue1 * 0x800000 + (uint)(0x7fffffff < xorValue2);\n  if (xorValue2 == 0x80000000) {\n    tempVar2 = tempVar2 & 0xfffffffe;\n  }\n  return tempVar2 | input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081730",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "floating_point_addition_00081730"
        },
        "FUN_00080ab8": {
            "renaming": {
                "FUN_00080ab8": "do_nothing_00080ab8"
            },
            "code": "\nvoid do_nothing_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ab8",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080ab8"
        },
        "FUN_00081734": {
            "renaming": {
                "FUN_00081734": "calculate_result_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param",
                "param_4": "temp_param",
                "iVar1": "intermediate_var1",
                "uVar2": "unsigned_var2",
                "uVar3": "unsigned_var3",
                "uVar4": "unsigned_var4",
                "uVar5": "unsigned_var5",
                "iVar6": "intermediate_var2",
                "bVar7": "bool_var"
            },
            "code": "\nuint calculate_result_00081734(uint input1,uint input2,undefined4 unused_param,uint temp_param)\n\n{\n  int intermediate_var1;\n  uint unsigned_var2;\n  uint unsigned_var3;\n  uint unsigned_var4;\n  uint unsigned_var5;\n  int intermediate_var2;\n  bool bool_var;\n  \n  unsigned_var3 = input1 << 1;\n  bool_var = unsigned_var3 == 0;\n  if (!bool_var) {\n    temp_param = input2 << 1;\n    bool_var = temp_param == 0;\n  }\n  if (!bool_var) {\n    bool_var = unsigned_var3 == temp_param;\n  }\n  intermediate_var2 = (int)unsigned_var3 >> 0x18;\n  if (!bool_var) {\n    bool_var = intermediate_var2 == -1;\n  }\n  if (!bool_var) {\n    bool_var = (int)temp_param >> 0x18 == -1;\n  }\n  if (bool_var) {\n    intermediate_var1 = (int)(input2 << 1) >> 0x18;\n    if (intermediate_var2 == -1 || intermediate_var1 == -1) {\n      unsigned_var3 = input2;\n      if (intermediate_var2 == -1) {\n        unsigned_var3 = input1;\n      }\n      if (intermediate_var2 != -1 || intermediate_var1 != -1) {\n        input2 = unsigned_var3;\n      }\n      bool_var = (unsigned_var3 & 0x7fffff) == 0;\n      if (bool_var) {\n        bool_var = (input2 & 0x7fffff) == 0;\n      }\n      if (bool_var) {\n        bool_var = unsigned_var3 == input2;\n      }\n      if (!bool_var) {\n        unsigned_var3 = unsigned_var3 | 0x400000;\n      }\n      return unsigned_var3;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (unsigned_var3 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((unsigned_var3 & 0xff000000) == 0) {\n      unsigned_var3 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        unsigned_var3 = unsigned_var3 | 0x80000000;\n      }\n      return unsigned_var3;\n    }\n    if (unsigned_var3 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  unsigned_var3 = unsigned_var3 >> 0x18;\n  temp_param = temp_param >> 0x18;\n  unsigned_var5 = temp_param - unsigned_var3;\n  bool_var = unsigned_var5 != 0;\n  unsigned_var4 = unsigned_var3;\n  if (bool_var && unsigned_var3 <= temp_param) {\n    unsigned_var4 = unsigned_var3 + unsigned_var5;\n  }\n  if (bool_var && unsigned_var3 <= temp_param) {\n    input2 = input2 ^ input1;\n  }\n  if (bool_var && unsigned_var3 <= temp_param) {\n    input1 = input1 ^ input2;\n  }\n  if (bool_var && unsigned_var3 <= temp_param) {\n    input2 = input2 ^ input1;\n  }\n  if (temp_param < unsigned_var3) {\n    unsigned_var5 = -unsigned_var5;\n  }\n  if (0x19 < unsigned_var5) {\n    return input1;\n  }\n  unsigned_var3 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    unsigned_var3 = -unsigned_var3;\n  }\n  unsigned_var2 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    unsigned_var2 = -unsigned_var2;\n  }\n  if (unsigned_var4 == unsigned_var5) {\n    unsigned_var2 = unsigned_var2 ^ 0x800000;\n    if (unsigned_var4 == 0) {\n      unsigned_var3 = unsigned_var3 ^ 0x800000;\n      unsigned_var4 = 1;\n    }\n    else {\n      unsigned_var5 = unsigned_var5 - 1;\n    }\n  }\n  unsigned_var3 = unsigned_var3 + ((int)unsigned_var2 >> (unsigned_var5 & 0xff));\n  unsigned_var2 = unsigned_var2 << (0x20 - unsigned_var5 & 0xff);\n  input1 = unsigned_var3 & 0x80000000;\n  if ((int)unsigned_var3 < 0) {\n    bool_var = unsigned_var2 != 0;\n    unsigned_var2 = -unsigned_var2;\n    unsigned_var3 = -unsigned_var3 - (uint)bool_var;\n  }\n  if (unsigned_var3 < 0x800000) {\n    unsigned_var5 = unsigned_var2 & 0x80000000;\n    unsigned_var2 = unsigned_var2 << 1;\n    unsigned_var3 = unsigned_var3 * 2 + (uint)(unsigned_var5 != 0);\n    unsigned_var5 = unsigned_var4 - 2;\n    if ((unsigned_var3 & 0x800000) == 0) {\n      intermediate_var2 = count_leading_zeroes(unsigned_var3);\n      unsigned_var4 = intermediate_var2 - 8;\n      unsigned_var3 = unsigned_var3 << (unsigned_var4 & 0xff);\n      if ((int)unsigned_var5 < (int)unsigned_var4) {\n        unsigned_var3 = unsigned_var3 >> (-(unsigned_var5 - unsigned_var4) & 0xff);\n      }\n      else {\n        unsigned_var3 = unsigned_var3 + (unsigned_var5 - unsigned_var4) * 0x800000;\n      }\n      return unsigned_var3 | input1;\n    }\n  }\n  else {\n    unsigned_var5 = unsigned_var4 - 1;\n    if (0xffffff < unsigned_var3) {\n      unsigned_var5 = unsigned_var3 & 1;\n      unsigned_var3 = unsigned_var3 >> 1;\n      unsigned_var2 = (uint)(unsigned_var5 != 0) << 0x1f | unsigned_var2 >> 1;\n      unsigned_var5 = unsigned_var4;\n      if (0xfd < unsigned_var4) goto LAB_0008186a;\n    }\n  }\n  unsigned_var3 = unsigned_var3 + unsigned_var5 * 0x800000 + (uint)(0x7fffffff < unsigned_var2);\n  if (unsigned_var2 == 0x80000000) {\n    unsigned_var3 = unsigned_var3 & 0xfffffffe;\n  }\n  return unsigned_var3 | input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081734",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_result_00081734"
        },
        "FUN_00084728": {
            "renaming": {
                "FUN_00084728": "update_result_00084728",
                "param_1": "result_pointer",
                "param_2": "input_value1",
                "param_3": "input_value2",
                "param_4": "input_value3",
                "puVar1": "temp_pointer",
                "iVar2": "function_result"
            },
            "code": "\nvoid update_result_00084728(int *result_pointer,undefined4 input_value1,undefined4 input_value2,undefined4 input_value3)\n\n{\n  undefined *temp_pointer;\n  int function_result;\n  \n  temp_pointer = PTR_DAT_0008474c;\n  *(undefined4 *)PTR_DAT_0008474c = 0;\n  function_result = FUN_000811c6(input_value1,input_value2,input_value3);\n  if ((function_result == -1) && (*(int *)temp_pointer != 0)) {\n    *result_pointer = *(int *)temp_pointer;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084728",
            "calling": [],
            "imported": false,
            "current_name": "update_result_00084728"
        },
        "FUN_00083c40": {
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "input_data",
                "param_2": "data_length",
                "param_3": "byte_buffer",
                "uVar1": "func_result",
                "iVar2": "int_result",
                "uVar3": "current_byte",
                "pbVar4": "byte_pointer",
                "uVar5": "byte_index",
                "local_1c": "local_byte",
                "abStack_1b": "byte_array"
            },
            "code": "\nuint process_data_00083c40(undefined4 input_data,uint data_length,byte **byte_buffer)\n\n{\n  uint func_result;\n  int int_result;\n  uint current_byte;\n  byte *byte_pointer;\n  uint byte_index;\n  byte local_byte;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(byte_buffer + 3) << 0x12)) {\n    *(ushort *)(byte_buffer + 3) = *(ushort *)(byte_buffer + 3) | 0x2000;\n    byte_buffer[0x19] = (byte *)((uint)byte_buffer[0x19] | 0x2000);\n  }\n  func_result = FUN_00084298();\n  if ((func_result == 1) && (data_length - 1 < 0xff)) {\n    current_byte = data_length & 0xff;\n    local_byte = (byte)current_byte;\n  }\n  else {\n    func_result = FUN_0008456c(input_data,&local_byte,data_length,byte_buffer + 0x17);\n    if (func_result == 0xffffffff) {\n      *(ushort *)(byte_buffer + 3) = *(ushort *)(byte_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (func_result == 0) {\n      return data_length;\n    }\n    current_byte = (uint)local_byte;\n  }\n  byte_index = 0;\n  do {\n    byte_pointer = byte_buffer[2] + -1;\n    byte_buffer[2] = byte_pointer;\n    if ((int)byte_pointer < 0) {\n      if ((int)byte_buffer[6] <= (int)byte_pointer) {\n        **byte_buffer = (byte)current_byte;\n        byte_pointer = *byte_buffer;\n        current_byte = (uint)*byte_pointer;\n        if (current_byte != 10) goto LAB_00083c90;\n      }\n      int_result = FUN_000844c4(input_data,current_byte,byte_buffer);\n      if (int_result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **byte_buffer = (byte)current_byte;\n      byte_pointer = *byte_buffer;\nLAB_00083c90:\n      *byte_buffer = byte_pointer + 1;\n    }\n    if (func_result <= byte_index + 1) {\n      return data_length;\n    }\n    current_byte = (uint)byte_array[byte_index];\n    byte_index = byte_index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c40",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083c40"
        },
        "FUN_000805d0": {
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "puVar1": "dataPtr1",
                "puVar2": "dataPtr2",
                "puVar3": "dataPtr3",
                "puVar4": "dataPtr4",
                "puVar5": "dataPtr5",
                "puVar6": "dataPtr6",
                "puVar7": "dataPtr7",
                "puVar8": "dataPtr8",
                "puVar9": "dataPtr9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13",
                "uVar14": "tempVar14",
                "iVar15": "tempVar15",
                "iVar16": "tempVar16",
                "piVar17": "intPtr17",
                "uVar18": "tempVar18",
                "iVar19": "tempVar19"
            },
            "code": "\nvoid processData_000805d0(void)\n\n{\n  undefined *dataPtr1;\n  undefined *dataPtr2;\n  undefined *dataPtr3;\n  undefined *dataPtr4;\n  undefined *dataPtr5;\n  undefined *dataPtr6;\n  undefined *dataPtr7;\n  undefined *dataPtr8;\n  undefined *dataPtr9;\n  undefined2 tempVar10;\n  uint tempVar11;\n  undefined4 tempVar12;\n  undefined4 tempVar13;\n  undefined4 tempVar14;\n  int tempVar15;\n  int tempVar16;\n  int *intPtr17;\n  undefined4 tempVar18;\n  int tempVar19;\n  \n  dataPtr7 = PTR_DAT_0008089c;\n  dataPtr9 = PTR_DAT_00080898;\n  dataPtr8 = PTR_DAT_00080894;\n  dataPtr3 = PTR_DAT_0008087c;\n  dataPtr5 = PTR_DAT_00080878;\n  dataPtr4 = PTR_DAT_00080874;\n  dataPtr2 = PTR_DAT_00080834;\n  dataPtr1 = PTR_DAT_00080830;\n  if ((byte)*PTR_DAT_0008082c < 10) {\n                    /* WARNING: Could not recover jumptable at 0x000805f0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_000805f0::switchdataD_000805f4 +\n              (uint)(&switchD_000805f0::switchdataD_000805f4)[(byte)*PTR_DAT_0008082c] * 2))();\n    return;\n  }\n  tempVar16 = *(int *)PTR_DAT_00080894;\n  tempVar15 = tempVar16 - *(int *)PTR_DAT_00080874;\n  if (tempVar15 < 0) {\n    tempVar15 = tempVar15 + 0x3c;\n  }\n  *(int *)PTR_DAT_0008087c = tempVar15;\n  dataPtr6 = PTR_DAT_00080880;\n  tempVar11 = *(uint *)dataPtr9;\n  tempVar15 = tempVar11 - *(int *)dataPtr5;\n  *(int *)PTR_DAT_00080880 = tempVar15;\n  if (tempVar15 < 0) {\n    *(int *)dataPtr3 = *(int *)dataPtr3 + -1;\n    *(int *)dataPtr6 = tempVar15 + 0x3c;\n  }\n  tempVar15 = *(int *)dataPtr3;\n  tempVar19 = *(int *)dataPtr6;\n  *(short *)(dataPtr1 + 0x36) = (short)tempVar15;\n  *(short *)(dataPtr1 + 0x38) = (short)tempVar19;\n  if ((tempVar15 == 0) && (tempVar19 == 0)) {\n    *(undefined4 *)PTR_DAT_00080868 = 1;\n    *(undefined4 *)dataPtr4 = 0;\n    *(undefined4 *)dataPtr5 = 0;\n  }\n  dataPtr6 = PTR_DAT_00080888;\n  dataPtr3 = PTR_DAT_00080884;\n  if (*(int *)PTR_DAT_00080884 == tempVar16) {\n    tempVar15 = 1 - tempVar11;\n    if (1 < tempVar11) {\n      tempVar15 = 0;\n    }\n    *(int *)PTR_DAT_00080888 = tempVar15;\n    if (tempVar15 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    *(int *)dataPtr3 = tempVar16;\n    dataPtr3 = PTR_DAT_00080a50;\n    *(uint *)dataPtr6 = tempVar11;\n    *(undefined4 *)dataPtr4 = 0;\n    *(undefined4 *)dataPtr5 = 0;\n    *(undefined4 *)dataPtr3 = 0;\n  }\n  dataPtr6 = PTR_DAT_0008088c;\n  dataPtr3 = PTR_DAT_00080860;\n  tempVar15 = *(int *)dataPtr7;\n  if (tempVar15 == 0) {\n    *(undefined4 *)dataPtr4 = 0;\n    *(undefined4 *)dataPtr5 = 0;\n    intPtr17 = (int *)PTR_DAT_0008088c;\nLAB_000808f2:\n    *intPtr17 = tempVar15;\n  }\n  else {\n    if (tempVar15 != 1) goto LAB_000808f4;\n    if (*(int *)PTR_DAT_0008088c < *(int *)PTR_DAT_00080860) {\n      tempVar11 = thunk_FUNC_00081714();\n      dataPtr7 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < tempVar11) {\n        *(int *)dataPtr6 = *(int *)dataPtr6 + 1;\n        tempVar15 = thunk_FUNC_00081714();\n        *(int *)dataPtr7 = tempVar15 + 1000;\n      }\n    }\n    if (*(int *)dataPtr6 < *(int *)dataPtr3) goto LAB_000808f4;\n    *(int *)PTR_DAT_0008088c = *(int *)dataPtr3 + 1;\n    intPtr17 = (int *)PTR_DAT_00080a20;\n    dataPtr3 = PTR_DAT_00080a1c;\n    if (*(int *)dataPtr4 < *(int *)dataPtr8) {\n      tempVar11 = thunk_FUNC_00081714();\n      dataPtr3 = PTR_DAT_00080890;\n      if (*(uint *)PTR_DAT_00080890 < tempVar11) {\n        *(int *)dataPtr5 = *(int *)dataPtr5 + 1;\n        tempVar15 = thunk_FUNC_00081714();\n        *(int *)dataPtr3 = tempVar15 + 1000;\n      }\n    }\n    else {\n      if (*(int *)dataPtr4 != *(int *)dataPtr8) goto LAB_000808f4;\n      if (*(int *)dataPtr9 < *(int *)dataPtr5) {\n        tempVar15 = 0;\n        *(undefined4 *)PTR_DAT_00080a1c = 0;\n        goto LAB_000808f2;\n      }\n      tempVar11 = thunk_FUNC_00081714();\n      dataPtr8 = PTR_DAT_00080a54;\n      if (*(uint *)PTR_DAT_00080a54 < tempVar11) {\n        *(int *)dataPtr3 = *(int *)dataPtr3 + 1;\n        tempVar15 = thunk_FUNC_00081714();\n        *(int *)dataPtr8 = tempVar15 + 1000;\n      }\n    }\n    if (0x3b < *(int *)dataPtr5) {\n      *(undefined4 *)PTR_DAT_00080a1c = 0;\n      *(int *)dataPtr4 = *(int *)dataPtr4 + 1;\n    }\n  }\nLAB_000808f4:\n  tempVar11 = thunk_FUNC_00081714();\n  dataPtr8 = PTR_DAT_00080a60;\n  dataPtr3 = PTR_DAT_00080a5c;\n  dataPtr5 = PTR_DAT_00080a58;\n  dataPtr4 = PTR_DAT_00080a24;\n  if (*(uint *)PTR_DAT_00080a58 < tempVar11) {\n    tempVar12 = FUN_0008189c(*(undefined4 *)PTR_DAT_00080a28);\n    tempVar12 = FUN_00081730(tempVar12,*(undefined4 *)PTR_DAT_00080a2c);\n    *(undefined4 *)PTR_DAT_00080a30 = tempVar12;\n    dataPtr9 = PTR_DAT_00080a34;\n    tempVar18 = *(undefined4 *)PTR_DAT_00080a34;\n    tempVar13 = FUN_00081734(tempVar12,tempVar18);\n    tempVar13 = FUN_00081944(tempVar13,*(undefined4 *)dataPtr8);\n    dataPtr7 = PTR_DAT_00080a64;\n    tempVar13 = FUN_00081734(tempVar13,*(undefined4 *)PTR_DAT_00080a64);\n    *(undefined4 *)dataPtr8 = tempVar13;\n    tempVar18 = FUN_00081730(tempVar12,tempVar18);\n    tempVar18 = FUN_00081944(tempVar18,*(undefined4 *)PTR_DAT_00080a38);\n    dataPtr8 = PTR_DAT_00080a3c;\n    tempVar18 = FUN_00081730(tempVar18,*(undefined4 *)PTR_DAT_00080a3c);\n    *(undefined4 *)PTR_DAT_00080a38 = tempVar18;\n    tempVar14 = FUN_00081944(tempVar12,*(undefined4 *)PTR_DAT_00080a40);\n    tempVar14 = FUN_00081734(tempVar14,tempVar13);\n    FUN_00081734(tempVar14,tempVar18);\n    tempVar14 = FUN_00081cd0();\n    *(undefined4 *)PTR_DAT_00080a44 = tempVar14;\n    tempVar14 = FUN_0008189c();\n    *(undefined4 *)dataPtr9 = tempVar12;\n    *(undefined4 *)dataPtr4 = tempVar14;\n    *(undefined4 *)dataPtr3 = 0;\n    *(undefined4 *)dataPtr7 = tempVar13;\n    *(undefined4 *)dataPtr8 = tempVar18;\n    tempVar15 = thunk_FUNC_00081714();\n    *(int *)dataPtr5 = tempVar15 + *(int *)dataPtr2;\n  }\n  tempVar12 = FUN_0008189c(*(undefined4 *)dataPtr2);\n  tempVar15 = FUN_00081ca8(*(undefined4 *)dataPtr4,tempVar12);\n  if (tempVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = tempVar12;\n  }\n  tempVar15 = FUN_00081c94(*(undefined4 *)dataPtr4,0);\n  if (tempVar15 != 0) {\n    *(undefined4 *)PTR_DAT_00080a24 = 0;\n  }\n  tempVar10 = FUN_00081d1c(*(undefined4 *)dataPtr4);\n  tempVar15 = *(int *)dataPtr3;\n  *(undefined2 *)(dataPtr1 + 0x2a) = tempVar10;\n  *(int *)dataPtr3 = tempVar15 + 1;\n  *(uint *)PTR_DAT_00080a4c = *(ushort *)PTR_DAT_00080a48 & 1 ^ 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081ca8",
                "FUN_00081c94",
                "FUN_00081894",
                "FUN_0008189c",
                "FUN_00081cd0",
                "FUN_00081730",
                "FUN_0008043e",
                "FUN_000802da"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000805d0",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "process_data_000805d0"
        },
        "FUN_000813e4": {
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813e4",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "calculate_difference_000813e4"
        },
        "FUN_0008120c": {
            "renaming": {
                "FUN_0008120c": "do_nothing_0008120c"
            },
            "code": "\nvoid do_nothing_0008120c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008120c",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "do_nothing_0008120c"
        },
        "FUN_00084290": {
            "renaming": {
                "FUN_00084290": "get_dat_value_00084290"
            },
            "code": "\nundefined4 get_dat_value_00084290(void)\n\n{\n  return DAT_00084294;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084290",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "get_dat_value_00084290"
        },
        "FUN_000846b4": {
            "renaming": {
                "FUN_000846b4": "process_data_000846b4",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "tempPointer",
                "iVar2": "functionResult"
            },
            "code": "\nvoid processData_000846b4(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined *tempPointer;\n  int functionResult;\n  \n  tempPointer = PTR_DAT_000846d8;\n  *(undefined4 *)PTR_DAT_000846d8 = 0;\n  functionResult = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((functionResult == -1) && (*(int *)tempPointer != 0)) {\n    *output = *(int *)tempPointer;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846b4",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_000846b4"
        },
        "FUN_000813a8": {
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memory_address"
            },
            "code": "\nint initialize_memory_000813a8(int memory_address)\n\n{\n  FUN_00082504(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "called": [
                "FUN_00082504"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813a8",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_memory_000813a8"
        },
        "FUN_00083d9c": {
            "renaming": {
                "FUN_00083d9c": "memory_management_function_00083d9c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "tempVar1",
                "iVar3": "tempVar3",
                "iVar5": "tempVar5",
                "iVar6": "tempVar6",
                "iVar8": "tempVar8",
                "uVar2": "unsignedVar2",
                "uVar4": "unsignedVar4",
                "uVar7": "unsignedVar7"
            },
            "code": "\nvoid memoryManagementFunction_00083d9c(undefined4 inputParam1,int inputParam2)\n\n{\n  int tempVar1;\n  uint unsignedVar2;\n  int tempVar3;\n  uint unsignedVar4;\n  int tempVar5;\n  int tempVar6;\n  uint unsignedVar7;\n  int tempVar8;\n  \n  if (inputParam2 == 0) {\n    return;\n  }\n  do_nothing_00082598();\n  tempVar8 = DAT_00083f24;\n  unsignedVar2 = *(uint *)(inputParam2 + -4);\n  tempVar5 = inputParam2 + -8;\n  unsignedVar4 = unsignedVar2 & 0xfffffffe;\n  tempVar3 = tempVar5 + unsignedVar4;\n  unsignedVar7 = *(uint *)(tempVar3 + 4) & 0xfffffffc;\n  if (*(int *)(DAT_00083f24 + 8) == tempVar3) {\n    unsignedVar7 = unsignedVar7 + unsignedVar4;\n    if (-1 < (int)(unsignedVar2 << 0x1f)) {\n      tempVar5 = tempVar5 - *(int *)(inputParam2 + -8);\n      tempVar1 = *(int *)(tempVar5 + 0xc);\n      tempVar3 = *(int *)(tempVar5 + 8);\n      unsignedVar7 = unsignedVar7 + *(int *)(inputParam2 + -8);\n      *(int *)(tempVar3 + 0xc) = tempVar1;\n      *(int *)(tempVar1 + 8) = tempVar3;\n    }\n    unsignedVar2 = *DAT_00083f2c;\n    *(uint *)(tempVar5 + 4) = unsignedVar7 | 1;\n    *(int *)(tempVar8 + 8) = tempVar5;\n    if (unsignedVar2 <= unsignedVar7) {\n      FUN_00083d00(inputParam1,*(undefined4 *)PTR_DAT_00083f30);\n    }\n  }\n  else {\n    unsignedVar2 = unsignedVar2 & 1;\n    *(uint *)(tempVar3 + 4) = unsignedVar7;\n    if (unsignedVar2 == 0) {\n      tempVar5 = tempVar5 - *(int *)(inputParam2 + -8);\n      tempVar1 = *(int *)(tempVar5 + 8);\n      unsignedVar4 = unsignedVar4 + *(int *)(inputParam2 + -8);\n      if (tempVar1 == tempVar8 + 8) {\n        unsignedVar2 = 1;\n      }\n      else {\n        tempVar6 = *(int *)(tempVar5 + 0xc);\n        *(int *)(tempVar1 + 0xc) = tempVar6;\n        *(int *)(tempVar6 + 8) = tempVar1;\n      }\n    }\n    else {\n      unsignedVar2 = 0;\n    }\n    if (-1 < *(int *)(tempVar3 + unsignedVar7 + 4) << 0x1f) {\n      unsignedVar4 = unsignedVar4 + unsignedVar7;\n      tempVar1 = *(int *)(tempVar3 + 8);\n      if ((unsignedVar2 == 0) && (tempVar1 == DAT_00083f28)) {\n        *(int *)(tempVar8 + 0x14) = tempVar5;\n        *(int *)(tempVar8 + 0x10) = tempVar5;\n        *(int *)(tempVar5 + 0xc) = tempVar1;\n        *(int *)(tempVar5 + 8) = tempVar1;\n        *(uint *)(tempVar5 + 4) = unsignedVar4 | 1;\n        *(uint *)(tempVar5 + unsignedVar4) = unsignedVar4;\n        goto LAB_00083e30;\n      }\n      tempVar3 = *(int *)(tempVar3 + 0xc);\n      *(int *)(tempVar1 + 0xc) = tempVar3;\n      *(int *)(tempVar3 + 8) = tempVar1;\n    }\n    *(uint *)(tempVar5 + 4) = unsignedVar4 | 1;\n    *(uint *)(tempVar5 + unsignedVar4) = unsignedVar4;\n    if (unsignedVar2 == 0) {\n      if (unsignedVar4 < 0x200) {\n        unsignedVar2 = *(uint *)(tempVar8 + 4);\n        tempVar1 = tempVar8 + (unsignedVar4 & 0xfffffff8);\n        tempVar3 = *(int *)(tempVar1 + 8);\n        *(int *)(tempVar5 + 8) = tempVar3;\n        *(int *)(tempVar5 + 0xc) = tempVar1;\n        *(uint *)(tempVar8 + 4) = unsignedVar2 | 1 << ((int)(unsignedVar4 >> 3) >> 2 & 0xffU);\n        *(int *)(tempVar1 + 8) = tempVar5;\n        *(int *)(tempVar3 + 0xc) = tempVar5;\n        do_nothing_0008259c(inputParam1);\n        return;\n      }\n      unsignedVar2 = unsignedVar4 >> 9;\n      if (unsignedVar2 < 5) {\n        tempVar3 = (unsignedVar4 >> 6) + 0x38;\n        tempVar1 = tempVar3 * 2;\n      }\n      else if (unsignedVar2 < 0x15) {\n        tempVar3 = unsignedVar2 + 0x5b;\n        tempVar1 = tempVar3 * 2;\n      }\n      else if (unsignedVar2 < 0x55) {\n        tempVar3 = (unsignedVar4 >> 0xc) + 0x6e;\n        tempVar1 = tempVar3 * 2;\n      }\n      else if (unsignedVar2 < 0x155) {\n        tempVar3 = (unsignedVar4 >> 0xf) + 0x77;\n        tempVar1 = tempVar3 * 2;\n      }\n      else if (unsignedVar2 < 0x555) {\n        tempVar3 = (unsignedVar4 >> 0x12) + 0x7c;\n        tempVar1 = tempVar3 * 2;\n      }\n      else {\n        tempVar1 = 0xfc;\n        tempVar3 = 0x7e;\n      }\n      tempVar8 = tempVar8 + tempVar1 * 4;\n      tempVar1 = *(int *)(tempVar8 + 8);\n      if (tempVar1 == tempVar8) {\n        *(uint *)(DAT_00083f24 + 4) = *(uint *)(DAT_00083f24 + 4) | 1 << (tempVar3 >> 2 & 0xffU);\n        tempVar8 = tempVar1;\n      }\n      else {\n        do {\n          if ((*(uint *)(tempVar1 + 4) & 0xfffffffc) <= unsignedVar4) break;\n          tempVar1 = *(int *)(tempVar1 + 8);\n        } while (tempVar8 != tempVar1);\n        tempVar8 = *(int *)(tempVar1 + 0xc);\n      }\n      *(int *)(tempVar5 + 0xc) = tempVar8;\n      *(int *)(tempVar5 + 8) = tempVar1;\n      *(int *)(tempVar8 + 8) = tempVar5;\n      *(int *)(tempVar1 + 0xc) = tempVar5;\n    }\n  }\nLAB_00083e30:\n  do_nothing_0008259c(inputParam1);\n  return;\n}\n\n",
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d9c",
            "calling": [
                "FUN_00083f34",
                "FUN_00081e14",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00081e04",
                "FUN_00083808",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "memory_management_function_00083d9c"
        },
        "FUN_00083c08": {
            "renaming": {
                "FUN_00083c08": "do_nothing_00083c08"
            },
            "code": "\nvoid do_nothing_00083c08(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c08",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c08"
        },
        "FUN_00081bf4": {
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubleInput1",
                "uVar3": "doubleInput2",
                "uVar4": "tempResult",
                "bVar1": "isPositive",
                "bVar5": "isZero"
            },
            "code": "\nuint calculateResult_00081bf4(uint input1,uint input2)\n\n{\n  bool isPositive;\n  uint doubleInput1;\n  uint doubleInput2;\n  uint tempResult;\n  bool isZero;\n  \n  doubleInput1 = input1 * 2;\n  doubleInput2 = input2 * 2;\n  if (((int)doubleInput1 >> 0x18 == -1 || (int)doubleInput2 >> 0x18 == -1) &&\n     ((((int)doubleInput1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubleInput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  tempResult = doubleInput1 | input2 & 0x7fffffff;\n  isZero = tempResult == 0;\n  if (!isZero) {\n    tempResult = input1 ^ input2;\n    isZero = tempResult == 0;\n  }\n  isPositive = -1 < (int)tempResult;\n  if (isPositive) {\n    input1 = doubleInput1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isPositive && doubleInput2 <= doubleInput1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isPositive || doubleInput2 > doubleInput1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081bf4",
            "calling": [
                "FUN_00081c5c"
            ],
            "imported": false,
            "current_name": "calculate_result_00081bf4"
        },
        "FUN_00081d7c": {
            "renaming": {
                "FUN_00081d7c": "FUNC_00081d7c"
            },
            "code": "\nvoid FUNC_00081d7c(void)\n\n{\n  undefined *puVar1;\n  undefined *puVar2;\n  int iVar3;\n  code **ppcVar4;\n  int iVar5;\n  \n  iVar5 = (int)PTR_DAT_00081dbc - (int)PTR_DAT_00081dc0 >> 2;\n  if (iVar5 != 0) {\n    ppcVar4 = (code **)(PTR_DAT_00081dc0 + -4);\n    iVar3 = 0;\n    do {\n      iVar3 = iVar3 + 1;\n      ppcVar4 = ppcVar4 + 1;\n      (**ppcVar4)();\n    } while (iVar5 != iVar3);\n  }\n  puVar2 = PTR_DAT_00081dc8;\n  puVar1 = PTR_LAB_00081dc4;\n  do_nothing_00085858();\n  iVar5 = (int)puVar1 - (int)puVar2 >> 2;\n  if (iVar5 != 0) {\n    ppcVar4 = (code **)(puVar2 + -4);\n    iVar3 = 0;\n    do {\n      iVar3 = iVar3 + 1;\n      ppcVar4 = ppcVar4 + 1;\n      (**ppcVar4)();\n    } while (iVar5 != iVar3);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081d7c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "FUNC_00081d7c"
        },
        "FUN_00081c5c": {
            "renaming": {
                "FUN_00081c5c": "combine_two_numbers_00081c5c",
                "param_1": "number1",
                "param_2": "number2"
            },
            "code": "\nundefined8 combine_two_numbers_00081c5c(undefined4 number1,undefined4 number2)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(number2,number1);\n}\n\n",
            "called": [
                "FUN_00081bf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c5c",
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "imported": false,
            "current_name": "combine_two_numbers_00081c5c"
        },
        "FUN_00081388": {
            "renaming": {
                "FUN_00081388": "decrement_and_check_00081388",
                "iVar1": "decrementedValue"
            },
            "code": "\nvoid decrementAndCheck_00081388(void)\n\n{\n  int decrementedValue;\n  \n  if ((*DAT_000813a0 != -1) && (decrementedValue = *DAT_000813a0 + -1, *DAT_000813a0 = decrementedValue, decrementedValue == 0)) {\n    (*DAT_000813a4)();\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081388",
            "calling": [],
            "imported": false,
            "current_name": "decrement_and_check_00081388"
        },
        "FUN_00082598": {
            "renaming": {
                "FUN_00082598": "do_nothing_00082598"
            },
            "code": "\nvoid do_nothing_00082598(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082598",
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "do_nothing_00082598"
        },
        "FUN_00082994": {
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dst",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_ushort",
                "puVar3": "next_src_ptr",
                "puVar4": "aligned_src_ptr",
                "uVar5": "current_uint",
                "uVar6": "next_uint",
                "puVar7": "aligned_dst_ptr",
                "bVar8": "null_byte_found"
            },
            "code": "\nvoid copy_string_00082994(uint *dst,uint *src)\n\n{\n  char current_char;\n  ushort current_ushort;\n  uint *next_src_ptr;\n  uint *aligned_src_ptr;\n  uint current_uint;\n  uint next_uint;\n  uint *aligned_dst_ptr;\n  bool null_byte_found;\n  \n  if ((((uint)dst ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dst = current_char;\n      src = (uint *)((int)src + 1);\n      dst = (uint *)((int)dst + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    aligned_src_ptr = src;\n    if (((uint)src & 1) != 0) {\n      aligned_src_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dst = current_char;\n      dst = (uint *)((int)dst + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = aligned_src_ptr;\n    if (((uint)aligned_src_ptr & 2) != 0) {\n      src = (uint *)((int)aligned_src_ptr + 2);\n      current_ushort = *(ushort *)aligned_src_ptr;\n      null_byte_found = (current_ushort & 0xff) == 0;\n      if (null_byte_found) {\n        *(char *)dst = (char)current_ushort;\n      }\n      else {\n        *(ushort *)dst = current_ushort;\n        null_byte_found = (current_ushort & 0xff00) == 0;\n        dst = (uint *)((int)dst + 2);\n      }\n      if (null_byte_found) {\n        return;\n      }\n    }\n  }\n  current_uint = *src;\n  aligned_src_ptr = src + 1;\n  aligned_dst_ptr = dst;\n  if (((uint)src & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    aligned_dst_ptr = dst + 1;\n    *dst = current_uint;\n    aligned_src_ptr = src + 2;\n    current_uint = src[1];\n  }\n  while( true ) {\n    next_src_ptr = aligned_src_ptr + 1;\n    next_uint = *aligned_src_ptr;\n    dst = aligned_dst_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    dst = aligned_dst_ptr + 1;\n    *aligned_dst_ptr = current_uint;\n    current_uint = next_uint;\n    if ((next_uint + 0xfefefeff & ~next_uint & 0x80808080) != 0) break;\n    aligned_src_ptr = aligned_src_ptr + 2;\n    current_uint = *next_src_ptr;\n    aligned_dst_ptr = aligned_dst_ptr + 2;\n    *dst = next_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dst = (char)current_uint;\n    next_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    dst = (uint *)((int)dst + 1);\n  } while (next_uint != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082994",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "copy_string_00082994"
        },
        "FUN_00080c0c": {
            "renaming": {
                "FUN_00080c0c": "process_data_00080c0c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "puVar1": "data1",
                "puVar2": "data2",
                "puVar3": "data3",
                "puVar4": "data4",
                "puVar5": "data5",
                "puVar6": "data6"
            },
            "code": "\nvoid processData_00080c0c(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined *data1;\n  undefined *data2;\n  undefined *data3;\n  undefined *data4;\n  undefined *data5;\n  undefined *data6;\n  \n  data2 = PTR_DAT_00080ca4;\n  data1 = PTR_DAT_00080ca0;\n  FUN_000813a8(PTR_DAT_00080ca0);\n  FUN_000813a8(data2);\n  data5 = PTR_DAT_00080cd8;\n  data3 = PTR_DAT_00080cac;\n  FUN_000814e4(PTR_DAT_00080cb0,DAT_00080ca8,8,8,data1,data2,input3);\n  data1 = PTR_DAT_00080cb4;\n  FUN_000813a8(data5);\n  data6 = PTR_DAT_00080cdc;\n  FUN_000813a8(data3);\n  data2 = PTR_DAT_00080cb8;\n  FUN_000813a8(data1);\n  data4 = PTR_DAT_00080cbc;\n  FUN_000813a8(data6);\n  FUN_000813a8(data2);\n  FUN_000813a8(data4);\n  FUN_000815d4(PTR_DAT_00080cc4,DAT_00080cc0,0x11,0x11,data5,data6);\n  FUN_000815d4(PTR_DAT_00080ccc,DAT_00080cc8,0x12,0x12,data3,data2);\n  FUN_000815d4(PTR_DAT_00080cd4,DAT_00080cd0,0x14,0x14,data1,data4);\n  return;\n}\n\n",
            "called": [
                "FUN_000814e4",
                "FUN_000815d4",
                "FUN_000813a8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080c0c",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00080c0c"
        },
        "FUN_00080d2e": {
            "renaming": {
                "FUN_00080d2e": "update_bit_operations_00080d2e",
                "param_1": "baseAddress",
                "param_2": "operation",
                "param_3": "bitMask",
                "uVar1": "updatedValue"
            },
            "code": "\nvoid updateBitOperations_00080d2e(int baseAddress,undefined4 operation,uint bitMask)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = bitMask;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~bitMask;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | bitMask;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = bitMask;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d2e",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_bit_operations_00080d2e"
        },
        "FUN_00081944": {
            "renaming": {
                "FUN_00081944": "floating_point_multiplication_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param",
                "param_4": "exp2",
                "lVar1": "longProduct",
                "uVar2": "tempVar1",
                "uVar3": "exp1",
                "iVar4": "tempExp1",
                "iVar5": "tempExp2",
                "uVar6": "productLow",
                "iVar7": "tempExp3",
                "uVar8": "xorInputs",
                "bVar9": "comparisonFlag",
                "bVar10": "signedBorrowFlag"
            },
            "code": "\nuint floatingPointMultiplication_00081944(uint input1,uint input2,undefined4 unused_param,uint exp2)\n\n{\n  longlong longProduct;\n  uint tempVar1;\n  uint exp1;\n  int tempExp1;\n  int tempExp2;\n  uint productLow;\n  int tempExp3;\n  uint xorInputs;\n  bool comparisonFlag;\n  bool signedBorrowFlag;\n  \n  exp1 = input1 >> 0x17 & 0xff;\n  comparisonFlag = exp1 == 0;\n  if (!comparisonFlag) {\n    exp2 = input2 >> 0x17 & 0xff;\n    comparisonFlag = exp2 == 0;\n  }\n  if (!comparisonFlag) {\n    comparisonFlag = exp1 == 0xff;\n  }\n  if (!comparisonFlag) {\n    comparisonFlag = exp2 == 0xff;\n  }\n  if (comparisonFlag) {\n    exp2 = input2 >> 0x17 & 0xff;\n    if (exp1 == 0xff || exp2 == 0xff) {\n      comparisonFlag = input1 == 0 || input1 == 0x80000000;\n      tempVar1 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        comparisonFlag = input2 == 0;\n        tempVar1 = input1;\n      }\n      if (!comparisonFlag) {\n        comparisonFlag = input2 == 0x80000000;\n      }\n      xorInputs = tempVar1;\n      if (((comparisonFlag) || ((exp1 == 0xff && ((tempVar1 & 0x7fffff) != 0)))) ||\n         ((exp2 == 0xff && (xorInputs = input2, (input2 & 0x7fffff) != 0)))) {\n        return xorInputs | 0x7fc00000;\n      }\n      tempVar1 = tempVar1 ^ input2;\n      goto LAB_00081a94;\n    }\n    comparisonFlag = (input1 & 0x7fffffff) == 0;\n    if (!comparisonFlag) {\n      comparisonFlag = (input2 & 0x7fffffff) == 0;\n    }\n    if (comparisonFlag) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    comparisonFlag = exp1 == 0;\n    tempVar1 = input1 & 0x80000000;\n    while( true ) {\n      if (comparisonFlag) {\n        input1 = input1 << 1;\n        comparisonFlag = (input1 & 0x800000) == 0;\n      }\n      if (!comparisonFlag) break;\n      exp1 = exp1 - 1;\n    }\n    input1 = input1 | tempVar1;\n    comparisonFlag = exp2 == 0;\n    tempVar1 = input2 & 0x80000000;\n    while( true ) {\n      if (comparisonFlag) {\n        input2 = input2 << 1;\n        comparisonFlag = (input2 & 0x800000) == 0;\n      }\n      if (!comparisonFlag) break;\n      exp2 = exp2 - 1;\n    }\n    input2 = input2 | tempVar1;\n  }\n  tempExp1 = exp1 + exp2;\n  xorInputs = input1 ^ input2;\n  exp1 = input1 << 9;\n  comparisonFlag = exp1 == 0;\n  if (!comparisonFlag) {\n    input2 = input2 << 9;\n    comparisonFlag = input2 == 0;\n  }\n  if (comparisonFlag) {\n    if (exp1 == 0) {\n      input2 = input2 << 9;\n    }\n    tempVar1 = xorInputs & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    signedBorrowFlag = SBORROW4(tempExp1,0x7f);\n    tempExp2 = tempExp1 + -0x7f;\n    comparisonFlag = tempExp2 == 0;\n    tempExp3 = tempExp2;\n    if (!comparisonFlag && 0x7e < tempExp1) {\n      signedBorrowFlag = SBORROW4(0xff,tempExp2);\n      tempExp3 = 0xff - tempExp2;\n      comparisonFlag = tempExp2 == 0xff;\n    }\n    if (!comparisonFlag && tempExp3 < 0 == signedBorrowFlag) {\n      tempVar1 = tempVar1 | tempExp2 * 0x800000;\n    }\n    if (!comparisonFlag && tempExp3 < 0 == signedBorrowFlag) {\n      return tempVar1;\n    }\n    tempVar1 = tempVar1 | 0x800000;\n    productLow = 0;\n    signedBorrowFlag = SBORROW4(tempExp2,1);\n    xorInputs = tempExp1 - 0x80;\n    comparisonFlag = xorInputs == 0;\n    exp1 = xorInputs;\n  }\n  else {\n    longProduct = (ulonglong)(exp1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    productLow = (uint)longProduct;\n    tempVar1 = (uint)((ulonglong)longProduct >> 0x20);\n    comparisonFlag = tempVar1 < 0x800000;\n    if (comparisonFlag) {\n      tempVar1 = tempVar1 << 1;\n    }\n    if (comparisonFlag) {\n      tempVar1 = tempVar1 | productLow >> 0x1f;\n      productLow = productLow << 1;\n    }\n    tempVar1 = xorInputs & 0x80000000 | tempVar1;\n    xorInputs = (tempExp1 + -0x7f) - (uint)comparisonFlag;\n    signedBorrowFlag = SBORROW4(xorInputs,0xfd);\n    comparisonFlag = xorInputs == 0xfd;\n    exp1 = xorInputs - 0xfd;\n    if (xorInputs < 0xfe) {\n      tempVar1 = tempVar1 + xorInputs * 0x800000 + (uint)(0x7fffffff < productLow);\n      if (productLow == 0x80000000) {\n        tempVar1 = tempVar1 & 0xfffffffe;\n      }\n      return tempVar1;\n    }\n  }\n  if (comparisonFlag || (int)exp1 < 0 != signedBorrowFlag) {\n    comparisonFlag = (int)(xorInputs + 0x19) < 0;\n    if (xorInputs == 0xffffffe7 || comparisonFlag != SCARRY4(xorInputs,0x19)) {\n      tempVar1 = tempVar1 & 0x80000000;\n    }\n    if (xorInputs != 0xffffffe7 && comparisonFlag == SCARRY4(xorInputs,0x19)) {\n      exp1 = (tempVar1 << 1) >> (-xorInputs & 0xff);\n      xorInputs = tempVar1 << (xorInputs + 0x20 & 0xff);\n      exp1 = ((uint)((tempVar1 & 0x80000000) != 0) << 0x1f | exp1 >> 1) + (uint)((byte)exp1 & 1);\n      if ((productLow | xorInputs << 1) == 0) {\n        exp1 = exp1 & ~(xorInputs >> 0x1f);\n      }\n      return exp1;\n    }\n    return tempVar1;\n  }\nLAB_00081a94:\n  return tempVar1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081944",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "floating_point_multiplication_00081944"
        },
        "FUN_000844c4": {
            "renaming": {
                "FUN_000844c4": "process_buffer_000844c4",
                "param_1": "ctx",
                "param_2": "input_byte",
                "param_3": "buffer",
                "param_4": "additional_param",
                "uVar1": "temp_ushort",
                "uVar2": "temp_uint",
                "puVar3": "temp_ptr",
                "iVar4": "temp_int"
            },
            "code": "\nuint process_buffer_000844c4(int ctx,uint input_byte,undefined4 *buffer,undefined4 additional_param)\n\n{\n  ushort temp_ushort;\n  uint temp_uint;\n  undefined *temp_ptr;\n  int temp_int;\n  \n  if ((ctx != 0) && (*(int *)(ctx + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp_ushort = *(ushort *)(buffer + 3);\n  temp_uint = (uint)temp_ushort;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(temp_uint << 0x1c)) || (temp_int = buffer[4], temp_int == 0)) {\n    temp_int = FUN_00083808(ctx,buffer,temp_ushort,temp_uint,additional_param);\n    if (temp_int != 0) {\n      return 0xffffffff;\n    }\n    temp_ushort = *(ushort *)(buffer + 3);\n    temp_int = buffer[4];\n    temp_uint = (uint)temp_ushort;\n  }\n  input_byte = input_byte & 0xff;\n  if ((int)(temp_uint << 0x12) < 0) {\n    temp_ptr = (undefined *)*buffer;\n    temp_int = (int)temp_ptr - temp_int;\n    if (temp_int < (int)buffer[5]) {\nLAB_000844f6:\n      temp_int = temp_int + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    temp_ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = temp_ushort | 0x2000;\n    temp_int = (int)temp_ptr - temp_int;\n    if (temp_int < (int)buffer[5]) goto LAB_000844f6;\n  }\n  temp_int = FUN_00083adc(ctx,buffer);\n  if (temp_int != 0) {\n    return 0xffffffff;\n  }\n  temp_ptr = (undefined *)*buffer;\n  temp_int = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = temp_ptr + 1;\n  *temp_ptr = (char)input_byte;\n  if (((buffer[5] == temp_int) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (input_byte == 10)))) &&\n     (temp_int = FUN_00083adc(ctx,buffer), temp_int != 0)) {\n    return 0xffffffff;\n  }\n  return input_byte;\n}\n\n",
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000844c4",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_buffer_000844c4"
        },
        "FUN_0008189c": {
            "renaming": {
                "FUN_0008189c": "calculate_value_0008189c",
                "param_1": "input_value",
                "iVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "iVar4": "temp_result",
                "uVar5": "intermediate_value"
            },
            "code": "\nuint calculate_value_0008189c(uint input_value)\n\n{\n  int leading_zeroes;\n  uint shift_amount;\n  uint result;\n  int temp_result;\n  uint intermediate_value;\n  \n  result = input_value & 0x80000000;\n  if ((int)result < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes - 8;\n  temp_result = ((result | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes) {\n    intermediate_value = 0 << (shift_amount & 0xff);\n    result = temp_result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < intermediate_value);\n    if (intermediate_value == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shift_amount = input_value << (leading_zeroes + 0x18U & 0xff);\n  result = temp_result + ((input_value >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    result = result & ~(shift_amount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008189c",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_value_0008189c"
        },
        "FUN_0008234c": {
            "renaming": {
                "FUN_0008234c": "optimized_memcpy_0008234c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "bytes_to_copy",
                "puVar1": "tmp_src",
                "puVar2": "tmp_dest",
                "puVar3": "tmp_ptr",
                "uVar4": "remaining_bytes",
                "uVar5": "aligned_bytes",
                "bVar6": "condition"
            },
            "code": "\nundefined4 * optimized_memcpy_0008234c(undefined4 *dest,undefined4 *src,uint bytes_to_copy)\n\n{\n  undefined4 *tmp_src;\n  undefined4 *tmp_dest;\n  undefined4 *tmp_ptr;\n  uint remaining_bytes;\n  uint aligned_bytes;\n  bool condition;\n  \n  tmp_dest = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (bytes_to_copy < 8) {\n      aligned_bytes = bytes_to_copy - 4;\n      if (3 < bytes_to_copy) {\n        do {\n          tmp_src = src;\n          tmp_ptr = tmp_dest;\n          condition = aligned_bytes != 0;\n          aligned_bytes = aligned_bytes - 1;\n          *(undefined *)tmp_ptr = *(undefined *)tmp_src;\n          tmp_dest = (undefined4 *)((int)tmp_ptr + 1);\n          src = (undefined4 *)((int)tmp_src + 1);\n        } while (condition);\n        *(undefined *)(undefined4 *)((int)tmp_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)tmp_src + 1);\n        *(undefined *)((int)tmp_ptr + 2) = *(undefined *)((int)tmp_src + 2);\n        *(undefined *)((int)tmp_ptr + 3) = *(undefined *)((int)tmp_src + 3);\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      aligned_bytes = 4 - ((uint)dest & 3);\n      bytes_to_copy = bytes_to_copy - aligned_bytes;\n      tmp_src = dest;\n      tmp_ptr = src;\n      if (((uint)dest & 1) != 0) {\n        tmp_ptr = (undefined4 *)((int)src + 1);\n        tmp_src = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      tmp_dest = tmp_src;\n      src = tmp_ptr;\n      if ((aligned_bytes & 2) != 0) {\n        src = (undefined4 *)((int)tmp_ptr + 2);\n        tmp_dest = (undefined4 *)((int)tmp_src + 2);\n        *(undefined2 *)tmp_src = *(undefined2 *)tmp_ptr;\n      }\n    }\n  }\n  while (0x3f < bytes_to_copy) {\n    *tmp_dest = *src;\n    tmp_dest[1] = src[1];\n    tmp_dest[2] = src[2];\n    tmp_dest[3] = src[3];\n    tmp_dest[4] = src[4];\n    tmp_dest[5] = src[5];\n    tmp_dest[6] = src[6];\n    tmp_dest[7] = src[7];\n    tmp_dest[8] = src[8];\n    tmp_dest[9] = src[9];\n    tmp_dest[10] = src[10];\n    tmp_dest[0xb] = src[0xb];\n    tmp_dest[0xc] = src[0xc];\n    tmp_dest[0xd] = src[0xd];\n    tmp_dest[0xe] = src[0xe];\n    tmp_dest[0xf] = src[0xf];\n    tmp_dest = tmp_dest + 0x10;\n    src = src + 0x10;\n    bytes_to_copy = bytes_to_copy - 0x40;\n  }\n  remaining_bytes = bytes_to_copy - 0x10;\n  if (0xffffffcf < bytes_to_copy - 0x40) {\n    do {\n      *tmp_dest = *src;\n      tmp_dest[1] = src[1];\n      tmp_dest[2] = src[2];\n      tmp_dest[3] = src[3];\n      tmp_dest = tmp_dest + 4;\n      src = src + 4;\n      condition = 0xf < remaining_bytes;\n      remaining_bytes = remaining_bytes - 0x10;\n    } while (condition);\n  }\n  aligned_bytes = remaining_bytes + 0xc;\n  tmp_ptr = tmp_dest;\n  tmp_src = src;\n  if (0xfffffff3 < remaining_bytes) {\n    do {\n      src = tmp_src + 1;\n      *tmp_ptr = *tmp_src;\n      condition = 3 < aligned_bytes;\n      aligned_bytes = aligned_bytes - 4;\n      tmp_dest = tmp_ptr + 1;\n      tmp_ptr = tmp_ptr + 1;\n      tmp_src = src;\n    } while (condition);\n  }\nLAB_000823d0:\n  if (aligned_bytes + 4 != 0) {\n    tmp_src = tmp_dest;\n    tmp_ptr = src;\n    if ((aligned_bytes & 1) != 0) {\n      tmp_ptr = (undefined4 *)((int)src + 1);\n      tmp_src = (undefined4 *)((int)tmp_dest + 1);\n      *(undefined *)tmp_dest = *(undefined *)src;\n    }\n    if ((aligned_bytes + 4 & 2) != 0) {\n      *(undefined2 *)tmp_src = *(undefined2 *)tmp_ptr;\n    }\n  }\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008234c",
            "calling": [
                "FUN_00083f34"
            ],
            "imported": false,
            "current_name": "optimized_memcpy_0008234c"
        },
        "FUN_00080a68": {
            "renaming": {
                "FUN_00080a68": "initialize_settings_00080a68",
                "puVar1": "settingsPtr"
            },
            "code": "\nvoid initializeSettings_00080a68(void)\n\n{\n  undefined *settingsPtr;\n  \n  settingsPtr = PTR_DAT_00080a94;\n  FUN_00081682(PTR_DAT_00080a94,PTR_s__00080a98);\n  FUN_00081d5c(settingsPtr,DAT_00080aa0,DAT_00080a9c);\n  settingsPtr = PTR_DAT_00080aa4;\n  PTR_DAT_00080aa4[4] = 0;\n  settingsPtr[5] = 0;\n  settingsPtr[6] = 6;\n  *(undefined2 *)(settingsPtr + 0x56) = 1000;\n  return;\n}\n\n",
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080a68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_settings_00080a68"
        },
        "FUN_0008165c": {
            "renaming": {
                "FUN_0008165c": "process_data_0008165c",
                "param_1": "data_ptr",
                "param_2": "data_value",
                "param_3": "condition_value",
                "iVar1": "result"
            },
            "code": "\nundefined4 * process_data_0008165c(undefined4 *data_ptr,undefined4 data_value,undefined4 condition_value)\n\n{\n  int result;\n  \n  result = FUN_0008163a(data_ptr,condition_value);\n  if (result == 0) {\n    FUN_0008160c(data_ptr);\n  }\n  else {\n    data_ptr[2] = condition_value;\n    FUN_00082994(*data_ptr,data_value);\n  }\n  return data_ptr;\n}\n\n",
            "called": [
                "FUN_0008160c",
                "FUN_00082994",
                "FUN_0008163a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008165c",
            "calling": [
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "process_data_0008165c"
        },
        "FUN_000815f8": {
            "renaming": {
                "FUN_000815f8": "combine_int_and_uint_000815f8",
                "param_1": "input_int",
                "param_2": "input_uint"
            },
            "code": "\nuint combine_int_and_uint_000815f8(int input_int,uint input_uint)\n\n{\n  return input_uint | input_int << 8;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815f8",
            "calling": [
                "FUN_00080410"
            ],
            "imported": false,
            "current_name": "combine_int_and_uint_000815f8"
        },
        "FUN_00084384": {
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_length",
                "puVar1": "temp_buffer",
                "uVar2": "temp_uint",
                "pcVar3": "current_char_ptr",
                "pcVar4": "end_char_ptr",
                "bVar5": "is_end_reached"
            },
            "code": "\nuint * find_char_in_buffer_00084384(uint *buffer,char target_char,uint *buffer_length)\n\n{\n  uint *temp_buffer;\n  uint temp_uint;\n  char *current_char_ptr;\n  char *end_char_ptr;\n  bool is_end_reached;\n  \n  if (((uint)buffer & 3) == 0) {\nLAB_000843b4:\n    temp_buffer = buffer;\n    if ((uint *)0x3 < buffer_length) {\n      do {\n        temp_uint = *buffer ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        temp_buffer = buffer;\n        if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n        buffer_length = buffer_length + -1;\n        temp_buffer = buffer + 1;\n        buffer = buffer + 1;\n      } while ((uint *)0x3 < buffer_length);\n    }\n    buffer = buffer_length;\n    end_char_ptr = (char *)((int)buffer + -1);\n    if ((buffer != (uint *)0x0) && (buffer = temp_buffer, *(char *)temp_buffer != target_char)) {\n      current_char_ptr = (char *)0x0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        is_end_reached = current_char_ptr == end_char_ptr;\n        current_char_ptr = current_char_ptr + 1;\n        if (is_end_reached) goto LAB_000843dc;\n      } while (*(char *)buffer != target_char);\n    }\n  }\n  else if (buffer_length == (uint *)0x0) {\nLAB_000843dc:\n    buffer = (uint *)0x0;\n  }\n  else if (*(char *)buffer != target_char) {\n    temp_buffer = (uint *)((int)buffer + 1);\n    buffer_length = (uint *)((int)buffer_length + -1);\n    do {\n      buffer = temp_buffer;\n      if (((uint)buffer & 3) == 0) goto LAB_000843b4;\n      if (buffer_length == (uint *)0x0) goto LAB_000843dc;\n      temp_buffer = (uint *)((int)buffer + 1);\n      buffer_length = (uint *)((int)buffer_length + -1);\n    } while (*(char *)buffer != target_char);\n  }\n  return buffer;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084384",
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_00084384"
        },
        "FUN_00081034": {
            "renaming": {
                "FUN_00081034": "update_bit_field_00081034",
                "param_1": "baseAddress",
                "param_2": "bitmask",
                "param_3": "flag"
            },
            "code": "\nvoid updateBitField_00081034(int baseAddress,uint bitmask,uint flag)\n\n{\n  *(uint *)(baseAddress + 4) = bitmask | *(uint *)(baseAddress + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081034",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_bit_field_00081034"
        },
        "FUN_00083c0c": {
            "renaming": {
                "FUN_00083c0c": "do_nothing_00083c0c"
            },
            "code": "\nvoid do_nothing_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083c0c",
            "calling": [
                "FUN_000846a4"
            ],
            "imported": false,
            "current_name": "do_nothing_00083c0c"
        },
        "FUN_00083974": {
            "renaming": {
                "FUN_00083974": "process_data_00083974",
                "param_1": "inputData",
                "puVar1": "dataPtr",
                "puVar2": "bufferPtr",
                "iVar3": "bufferIndex",
                "iVar4": "globalVar"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n\nundefined4 processData_00083974(undefined4 inputData)\n\n{\n  undefined *dataPtr;\n  undefined4 *bufferPtr;\n  int bufferIndex;\n  int globalVar;\n  \n  dataPtr = PTR_DAT_00083984;\n  if (DAT_00083980 == 0) {\n    return inputData;\n  }\n  globalVar = *(int *)PTR_DAT_0008396c;\n  bufferPtr = *(undefined4 **)(globalVar + 0x148);\n  if (bufferPtr == (undefined4 *)0x0) {\n    bufferPtr = (undefined4 *)(globalVar + 0x14c);\n    *(undefined4 **)(globalVar + 0x148) = bufferPtr;\n  }\n  bufferIndex = bufferPtr[1];\n  if (0x1f < bufferIndex) {\n    if ((DAT_00083970 == 0) ||\n       (bufferPtr = (undefined4 *)FUN_00081df4(400), bufferPtr == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *bufferPtr = *(undefined4 *)(globalVar + 0x148);\n    bufferPtr[1] = 0;\n    bufferIndex = 0;\n    *(undefined4 **)(globalVar + 0x148) = bufferPtr;\n    bufferPtr[0x62] = 0;\n    bufferPtr[99] = 0;\n  }\n  bufferPtr[1] = bufferIndex + 1;\n  bufferPtr[bufferIndex + 2] = dataPtr;\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081df4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083974",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "process_data_00083974"
        },
        "FUN_00084700": {
            "renaming": {
                "FUN_00084700": "process_data_00084700",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "tempPointer",
                "iVar2": "functionResult"
            },
            "code": "\nvoid processData_00084700(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined *tempPointer;\n  int functionResult;\n  \n  tempPointer = PTR_DAT_00084724;\n  *(undefined4 *)PTR_DAT_00084724 = 0;\n  functionResult = FUN_000811c2(input1,input2,input3);\n  if ((functionResult == -1) && (*(int *)tempPointer != 0)) {\n    *output = *(int *)tempPointer;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811c2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084700",
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "imported": false,
            "current_name": "process_data_00084700"
        },
        "thunk_FUN_00081714": {
            "renaming": {
                "thunk_FUN_00081714": "thunk_FUNC_00081714"
            },
            "code": "\nundefined4 thunk_FUNC_00081714(void)\n\n{\n  return *(undefined4 *)PTR_DAT_0008171c;\n}\n\n",
            "called": [
                "FUN_00081714"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00081208",
            "calling": [
                "FUN_000805d0",
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "thunk_FUNC_00081714"
        },
        "FUN_00081ca8": {
            "renaming": {
                "FUN_00081ca8": "check_status_00081ca8",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkStatus_00081ca8(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  FUN_00081c54();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_00081c54"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081ca8",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "check_status_00081ca8"
        },
        "FUN_00081318": {
            "renaming": {
                "FUN_00081318": "process_data_00081318",
                "param_1": "index",
                "param_2": "shiftValue",
                "param_3": "inputData",
                "puVar1": "dataPointer1",
                "puVar2": "dataPointer2",
                "iVar3": "result",
                "uVar4": "tempData",
                "iVar5": "dataOffset"
            },
            "code": "\nvoid processData_00081318(int index,int shiftValue,undefined4 inputData)\n\n{\n  undefined *dataPointer1;\n  undefined *dataPointer2;\n  int result;\n  undefined4 tempData;\n  int dataOffset;\n  \n  dataPointer2 = PTR_DAT_00081384;\n  dataPointer1 = PTR_DAT_00081380;\n  if (PTR_DAT_00081380[index * 0x1c + 0xc] != '\\0') {\n    if ((PTR_DAT_00081384[index] & 0xf) == 5) {\n      FUN_00081210(index,1,inputData,5,index,shiftValue,inputData);\n    }\n    dataPointer2[index] = dataPointer2[index] & 0xf | (byte)(shiftValue << 4);\n    dataOffset = *(int *)(dataPointer1 + index * 0x1c);\n    tempData = *(undefined4 *)(dataPointer1 + index * 0x1c + 4);\n    result = FUN_00080e04(dataOffset,tempData);\n    if (result == 0) {\n      if (shiftValue != 0) {\n        *(undefined4 *)(dataOffset + 100) = tempData;\n        return;\n      }\n      *(undefined4 *)(dataOffset + 0x60) = tempData;\n      return;\n    }\n    FUNC_00080d7a(dataOffset,tempData,shiftValue,0,1);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081318",
            "calling": [
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_00080ae4",
                "FUN_000801b0"
            ],
            "imported": false,
            "current_name": "process_data_00081318"
        },
        "FUN_00081714": {
            "renaming": {
                "FUN_00081714": "get_value_from_memory_00081714"
            },
            "code": "\nundefined4 getValueFromMemory_00081714(void)\n\n{\n  return *(undefined4 *)PTR_DAT_0008171c;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081714",
            "calling": [
                "thunk_FUN_00081714"
            ],
            "imported": false,
            "current_name": "get_value_from_memory_00081714"
        },
        "FUN_0008449c": {
            "renaming": {
                "FUN_0008449c": "update_flag_and_value_0008449c",
                "param_1": "inputValue",
                "param_2": "dataStructure",
                "iVar1": "functionResult",
                "uVar2": "updatedFlag"
            },
            "code": "\nvoid updateFlagAndValue_0008449c(undefined4 inputValue,int dataStructure)\n\n{\n  int functionResult;\n  ushort updatedFlag;\n  \n  functionResult = FUN_00084700(inputValue,(int)*(short *)(dataStructure + 0xe));\n  if (functionResult == -1) {\n    updatedFlag = *(ushort *)(dataStructure + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(dataStructure + 0xc) | 0x1000;\n  }\n  if (functionResult != -1) {\n    *(int *)(dataStructure + 0x50) = functionResult;\n  }\n  *(ushort *)(dataStructure + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "called": [
                "FUN_00084700"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008449c",
            "calling": [],
            "imported": false,
            "current_name": "update_flag_and_value_0008449c"
        },
        "FUN_0008259c": {
            "renaming": {
                "FUN_0008259c": "do_nothing_0008259c"
            },
            "code": "\nvoid do_nothing_0008259c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008259c",
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "do_nothing_0008259c"
        },
        "FUN_0008477c": {
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "multiplier_low",
                "param_4": "multiplier_high",
                "param_5": "result_array",
                "uVar1": "temp_result",
                "lVar2": "long_product"
            },
            "code": "\nvoid calculate_difference_0008477c(uint input_value1,int input_value2,undefined4 multiplier_low,undefined4 multiplier_high,int *result_array)\n\n{\n  uint temp_result;\n  longlong long_product;\n  \n  long_product = FUN_000847e0();\n  long_product = long_product * CONCAT44(multiplier_high,multiplier_low);\n  temp_result = (uint)long_product;\n  *result_array = input_value1 - temp_result;\n  result_array[1] = (input_value2 - (int)((ulonglong)long_product >> 0x20)) - (uint)(input_value1 < temp_result);\n  return;\n}\n\n",
            "called": [
                "FUN_000847e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008477c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_difference_0008477c"
        },
        "FUN_000801b0": {
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data_ptr",
                "bVar1": "buffer_overflow",
                "uVar2": "temp_data",
                "cVar3": "result",
                "iVar4": "function_status",
                "bVar5": "buffer_index"
            },
            "code": "\nint process_data_000801b0(int **data_ptr)\n\n{\n  bool buffer_overflow;\n  undefined temp_data;\n  char result;\n  int function_status;\n  byte buffer_index;\n  \n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    FUN_00081318(*(byte *)((int)data_ptr + 6),0);\n  }\n  buffer_overflow = false;\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    while (function_status = (**(code **)(**data_ptr + 8))(), function_status != 0) {\n      buffer_index = *(byte *)((int)data_ptr + 0x49);\n      temp_data = (**(code **)(**data_ptr + 0xc))();\n      result = *(char *)((int)data_ptr + 0x49);\n      *(undefined *)((int)data_ptr + buffer_index + 9) = temp_data;\n      buffer_index = result + 1;\n      *(byte *)((int)data_ptr + 0x49) = buffer_index;\n      if (0x3f < buffer_index) {\n        buffer_overflow = true;\n      }\n    }\n  }\n  *(short *)(data_ptr + 0x14) = *(short *)(data_ptr + 0x14) + 1;\n  if (buffer_overflow) {\n    result = -3;\n    *(short *)(data_ptr + 0x15) = *(short *)(data_ptr + 0x15) + 1;\n  }\n  else {\n    result = *(char *)((int)data_ptr + 0x49);\n  }\n  return (int)result;\n}\n\n",
            "called": [
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000801b0",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_000801b0"
        },
        "FUN_000813c2": {
            "renaming": {
                "FUN_000813c2": "buffer_insert_000813c2",
                "param_1": "buffer_base",
                "param_2": "data",
                "uVar1": "next_index"
            },
            "code": "\nvoid bufferInsert_000813c2(int buffer_base,undefined data)\n\n{\n  uint next_index;\n  \n  next_index = *(int *)(buffer_base + 0x80) + 1U & 0x7f;\n  if (next_index != *(uint *)(buffer_base + 0x84)) {\n    *(undefined *)(buffer_base + *(int *)(buffer_base + 0x80)) = data;\n    *(uint *)(buffer_base + 0x80) = next_index;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000813c2",
            "calling": [],
            "imported": false,
            "current_name": "buffer_insert_000813c2"
        },
        "FUN_000814e4": {
            "renaming": {
                "FUN_000814e4": "initialize_data_structure_000814e4",
                "param_1": "data_structure",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3",
                "param_5": "parameter_4",
                "param_6": "parameter_5",
                "puVar1": "temp_pointer"
            },
            "code": "\nvoid initialize_data_structure_000814e4(undefined4 *data_structure,undefined4 parameter_1,undefined parameter_2,undefined4 parameter_3,\n                 undefined4 parameter_4,undefined4 parameter_5)\n\n{\n  undefined *temp_pointer;\n  \n  data_structure[1] = 0;\n  data_structure[2] = 1000;\n  temp_pointer = PTR_PTR_FUN_00081454_1_00081504;\n  data_structure[6] = parameter_1;\n  *data_structure = temp_pointer;\n  *(undefined *)(data_structure + 7) = parameter_2;\n  data_structure[4] = parameter_4;\n  data_structure[8] = parameter_3;\n  data_structure[5] = parameter_5;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000814e4",
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_000814e4"
        },
        "FUN_00080d54": {
            "renaming": {
                "FUN_00080d54": "update_param_array_00080d54",
                "param_1": "paramArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "condition"
            },
            "code": "\nvoid updateParamArray_00080d54(undefined4 *paramArray,undefined4 value,uint flags)\n\n{\n  bool condition;\n  \n  condition = (int)(flags << 0x1f) < 0;\n  paramArray[0x11] = value;\n  if (condition) {\n    paramArray[0x19] = value;\n  }\n  if (!condition) {\n    paramArray[0x18] = value;\n  }\n  condition = (flags & 10) != 0;\n  if (condition) {\n    paramArray[8] = value;\n  }\n  if (!condition) {\n    paramArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    paramArray[0x20] = value;\n  }\n  paramArray[5] = value;\n  *paramArray = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080d54",
            "calling": [
                "FUN_00080da0"
            ],
            "imported": false,
            "current_name": "update_param_array_00080d54"
        },
        "FUN_0008021c": {
            "renaming": {
                "FUN_0008021c": "calculate_crc16_0008021c",
                "param_1": "start_index",
                "param_2": "length",
                "iVar1": "current_index",
                "uVar2": "crc",
                "cVar3": "bit_count",
                "uVar4": "lsb"
            },
            "code": "\nuint calculate_crc16_0008021c(int start_index,uint length)\n\n{\n  int current_index;\n  uint crc;\n  char bit_count;\n  uint lsb;\n  \n  crc = 0xffff;\n  for (current_index = start_index; (current_index - start_index & 0xffU) < length; current_index = current_index + 1) {\n    crc = crc ^ *(byte *)(current_index + 9);\n    bit_count = '\\b';\n    do {\n      lsb = crc & 1;\n      crc = crc >> 1;\n      if (lsb != 0) {\n        crc = crc ^ 0xa001;\n      }\n      bit_count = bit_count + -1;\n    } while (bit_count != '\\0');\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008021c",
            "calling": [
                "FUN_00080258"
            ],
            "imported": false,
            "current_name": "calculate_crc16_0008021c"
        },
        "FUN_00082b38": {
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_00082b38(int param_1,int param_2,byte *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  undefined *puVar6;\n  int iVar7;\n  byte *pbVar8;\n  byte ********ppppppppbVar9;\n  int *piVar10;\n  int iVar11;\n  byte **ppbVar12;\n  char cVar13;\n  byte *******pppppppbVar14;\n  uint uVar15;\n  int **ppiVar16;\n  uint uVar17;\n  uint uVar18;\n  byte *******pppppppbVar19;\n  byte *******pppppppbVar20;\n  byte ********ppppppppbVar21;\n  byte *******pppppppbVar22;\n  int *piVar23;\n  byte *******pppppppbVar24;\n  byte *******pppppppbVar25;\n  uint uVar26;\n  int *piVar27;\n  undefined4 uVar28;\n  byte ********ppppppppbVar29;\n  bool bVar30;\n  longlong lVar31;\n  byte *******local_dc;\n  byte *******local_d4;\n  int **local_c8;\n  byte *local_c4;\n  undefined *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  byte ********local_9c;\n  byte *******local_98;\n  byte *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  byte *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  uVar17 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar17 = uVar17 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar17;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar17 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar17 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar11 = FUN_00083808(param_1,param_2);\n    if (iVar11 != 0) {\n      return (byte *)0xffffffff;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    pbVar8 = (byte *)FUN_0008378c(param_1,param_2,param_3,param_4);\n    return pbVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (undefined *)0x0;\n  local_94 = (byte *******)0x0;\n  local_98 = (byte *******)0x0;\n  local_c4 = (byte *)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  local_c8 = param_4;\n  local_9c = (byte ********)local_68;\nLAB_00082b9e:\n  pppppppbVar14 = param_3;\n  if ((*(byte *)param_3 != 0) && (*(byte *)param_3 != 0x25)) {\n    do {\n      pppppppbVar14 = (byte *******)((int)pppppppbVar14 + 1);\n      if (*(byte *)pppppppbVar14 == 0) break;\n    } while (*(byte *)pppppppbVar14 != 0x25);\n    pppppppbVar25 = (byte *******)((int)pppppppbVar14 - (int)param_3);\n    if (pppppppbVar25 != (byte *******)0x0) {\n      local_98 = (byte *******)((int)local_98 + 1);\n      local_94 = (byte *******)((int)local_94 + (int)pppppppbVar25);\n      *ppppppppbVar9 = param_3;\n      ppppppppbVar9[1] = pppppppbVar25;\n      if ((int)local_98 < 8) {\n        ppppppppbVar9 = ppppppppbVar9 + 2;\n      }\n      else {\n        if (local_94 == (byte *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppbVar25;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n          goto LAB_00082bee;\n        }\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        ppppppppbVar9 = (byte ********)local_68;\n        if (iVar11 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppbVar25;\n    }\n  }\nLAB_00082bee:\n  if (*(byte *)pppppppbVar14 != 0) {\n    local_a1 = '\\0';\n    uVar18 = (uint)*(byte *)((int)pppppppbVar14 + 1);\n    uVar17 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar30 = false;\n    pppppppbVar25 = (byte *******)0x0;\n    local_d4 = (byte *******)0xffffffff;\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\nLAB_00082c12:\n    param_3 = (byte *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar18) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar18 != 0) {\n        local_dc = (byte *******)0x1;\n        local_d4 = (byte *******)0x1;\n        ppppppppbVar29 = (byte ********)&local_90;\n        local_90 = (char)uVar18;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppbVar25 = (byte *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppbVar25 < 0) {\n        pppppppbVar25 = (byte *******)-(int)pppppppbVar25;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar18 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar17 = uVar17 | 4;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar18 = (uint)*(byte *)param_3;\n      pppppppbVar14 = (byte *******)((int)param_3 + 1);\n      if (uVar18 == 0x2a) {\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (byte *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppbVar14;\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar15 = uVar18 - 0x30;\n      if (uVar15 < 10) {\n        uVar26 = 0;\n        do {\n          param_3 = (byte *******)((int)pppppppbVar14 + 1);\n          uVar18 = (uint)*(byte *)pppppppbVar14;\n          uVar26 = uVar15 + uVar26 * 10;\n          uVar15 = uVar18 - 0x30;\n          pppppppbVar14 = param_3;\n        } while (uVar15 < 10);\n        local_d4 = (byte *******)(uVar26 | (int)uVar26 >> 0x1f);\n      }\n      else {\n        local_d4 = (byte *******)0x0;\n        param_3 = pppppppbVar14;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar17 = uVar17 | 0x80;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar23 = *local_c8;\n      piVar27 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar11 = (uint)bVar2 << 4;\n      iVar7 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar7 = (uint)bVar30 << 6, bVar30 != 0)) {\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        iVar11 = iVar7;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar30 == false)) {\n        iVar11 = 1;\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\n      else {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar11 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = PTR_s_0123456789ABCDEF_000830ec;\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (byte *******)0x1;\n      local_90 = SUB41(piVar23,0);\n      local_d4 = (byte *******)0x1;\n      ppppppppbVar29 = (byte ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar23 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)((int)piVar23 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar27 < 0) {\n        bVar30 = piVar23 != (int *)0x0;\n        piVar23 = (int *)-(int)piVar23;\n        piVar27 = (int *)(-(int)piVar27 - (uint)bVar30);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar11 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar17 = uVar17 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar18 = (uint)piVar23 | (uint)piVar27;\n      iVar11 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar30 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar18 = (uint)*(byte *)param_3;\n      if (uVar18 == 0x6c) {\n        bVar1 = true;\n        uVar18 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (byte *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar30) {\n            piVar23 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar23 = (short)local_c4;\n          }\n          else {\n            ppbVar12 = (byte **)*local_c8;\n            local_c8 = local_c8 + 1;\n            *ppbVar12 = local_c4;\n          }\n        }\n        else {\n          ppbVar12 = (byte **)*local_c8;\n          local_c8 = local_c8 + 1;\n          *ppbVar12 = local_c4;\n        }\n      }\n      else {\n        ppbVar12 = (byte **)*local_c8;\n        local_c8 = local_c8 + 1;\n        *ppbVar12 = local_c4;\n        ppbVar12[1] = (byte *)((int)local_c4 >> 0x1f);\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 0;\n      break;\n    case 0x70:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      piVar23 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar27 = (int *)0x0;\n      local_a0 = 0x30;\n      iVar11 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar18 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppbVar29 = (byte ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppbVar29 != (byte ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (byte *******)FUN_00082a50(ppppppppbVar29);\n          pppppppbVar14 = (byte *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          pppppppbVar14 = (byte *******)FUN_00084384(ppppppppbVar29,0,local_d4);\n          cVar4 = local_a1;\n          if (pppppppbVar14 != (byte *******)0x0) {\n            pppppppbVar20 = (byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29);\n            if ((int)local_d4 <= (int)(byte *******)((int)pppppppbVar14 - (int)ppppppppbVar29)) {\n              pppppppbVar20 = local_d4;\n            }\n            pppppppbVar14 = (byte *******)0x0;\n            local_d4 = pppppppbVar20;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((byte *******)0x5 < local_d4) {\n        local_d4 = (byte *******)0x6;\n      }\n      local_dc = (byte *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppbVar29 = (byte ********)PTR_s__null__00083784;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppbVar14 = (byte *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar16 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar16 + 2;\n      piVar23 = *ppiVar16;\n      piVar27 = ppiVar16[1];\n      iVar11 = 1;\n      break;\n    case 0x78:\n      local_c0 = PTR_s_0123456789abcdef_000833c4;\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar30 != false)) {\n        piVar27 = (int *)0x0;\n        piVar23 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar23 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar27 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar23 | (uint)piVar27) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar11 = 2;\n        local_9f = (char)uVar18;\n      }\n      else {\n        iVar11 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar17 = uVar17 & 0xffffff7f;\n    }\n    uVar18 = (uint)piVar23 | (uint)piVar27;\njoined_r0x00082d78:\n    lVar31 = CONCAT44(piVar27,piVar23);\n    pppppppbVar14 = local_d4;\n    if ((uVar18 == 0) && (local_d4 == (byte *******)0x0)) {\n      ppppppppbVar29 = (byte ********)local_68;\n      if ((iVar11 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar11 == 1) {\n      if (piVar27 != (int *)0x0 || (int *)0x9 < piVar23) {\n        ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n        do {\n          ppppppppbVar29 = ppppppppbVar21;\n          uVar28 = (undefined4)((ulonglong)lVar31 >> 0x20);\n          cVar13 = '\\n';\n          FUN_00084750((int)lVar31,uVar28,10,0);\n          *(char *)ppppppppbVar29 = cVar13 + '0';\n          lVar31 = FUN_00084750((int)lVar31,uVar28,10,0);\n          ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n        } while (lVar31 != 0);\n        local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar23 + '0';\n      ppppppppbVar29 = (byte ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppbVar21 = (byte ********)(&cStack_6a + 1);\n    if (iVar11 != 2) goto LAB_0008337e;\n    do {\n      ppppppppbVar29 = ppppppppbVar21;\n      uVar18 = (uint)piVar23 & 0xf;\n      piVar23 = (int *)((uint)piVar23 >> 4 | (int)piVar27 << 0x1c);\n      piVar27 = (int *)((uint)piVar27 >> 4);\n      *(undefined *)ppppppppbVar29 = local_c0[uVar18];\n      ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    } while (((uint)piVar23 | (uint)piVar27) != 0);\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (byte *******)0x0) {\n    FUN_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return (byte *)0xffffffff;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppbVar29 = ppppppppbVar21;\n    piVar10 = (int *)((uint)piVar23 >> 3 | (int)piVar27 << 0x1d);\n    piVar27 = (int *)((uint)piVar27 >> 3);\n    iVar11 = ((uint)piVar23 & 7) + 0x30;\n    *(char *)ppppppppbVar29 = (char)iVar11;\n    ppppppppbVar21 = (byte ********)((int)ppppppppbVar29 + -1);\n    piVar23 = piVar10;\n  } while (((uint)piVar10 | (uint)piVar27) != 0);\n  if (bVar3) {\n    if (iVar11 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n    }\n    else {\n      *(undefined *)((int)ppppppppbVar29 + -1) = 0x30;\n      ppppppppbVar29 = ppppppppbVar21;\n      local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar21);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (byte *******)((int)local_68 - (int)ppppppppbVar29);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppbVar14) {\n    local_dc = pppppppbVar14;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (byte *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_000830e8;\n  if (bVar5) {\n    local_dc = (byte *******)((int)local_dc + 2);\n  }\n  if ((uVar17 == 0) &&\n     (pppppppbVar22 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar22)) {\n    if ((int)pppppppbVar22 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar20 = (byte *******)PTR_s__0123456789ABCDEF_00083710;\n    }\n    else {\n      do {\n        pppppppbVar24 = pppppppbVar22;\n        pppppppbVar22 = (byte *******)((int)local_98 + 1);\n        local_94 = local_94 + 4;\n        *ppppppppbVar9 = pppppppbVar20;\n        ppppppppbVar9[1] = (byte *******)0x10;\n        if ((int)pppppppbVar22 < 8) {\n          pppppppbVar19 = (byte *******)((int)local_98 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\n          local_98 = pppppppbVar22;\n        }\n        else if (local_94 == (byte *******)0x0) {\n          pppppppbVar19 = (byte *******)0x1;\n          ppppppppbVar9 = (byte ********)local_68;\n          local_98 = local_94;\n        }\n        else {\n          local_98 = pppppppbVar22;\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 != 0) goto LAB_000833de;\n          pppppppbVar19 = (byte *******)((int)local_98 + 1);\n          ppppppppbVar9 = (byte ********)local_68;\n        }\n        pppppppbVar22 = pppppppbVar24 + -4;\n      } while (0x10 < (int)pppppppbVar22);\n      pppppppbVar22 = pppppppbVar24 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar22);\n    *ppppppppbVar9 = pppppppbVar20;\n    ppppppppbVar9[1] = pppppppbVar22;\n    local_98 = pppppppbVar19;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar19 = (byte *******)((int)pppppppbVar19 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar19 = (byte *******)0x1;\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  else {\n    pppppppbVar19 = (byte *******)((int)local_98 + 1);\n  }\n  pppppppbVar20 = pppppppbVar19;\n  if (local_a1 != '\\0') {\n    local_94 = (byte *******)((int)local_94 + 1);\n    pppppppbVar20 = (byte *******)0x1;\n    *ppppppppbVar9 = (byte *******)&local_a1;\n    ppppppppbVar9[1] = (byte *******)0x1;\n    if ((int)pppppppbVar19 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 1);\n      local_98 = pppppppbVar19;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else {\n      local_98 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n      if (local_94 != (byte *******)0x0) {\n        local_98 = pppppppbVar19;\n        iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n        if (iVar11 != 0) goto LAB_000833de;\n        pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      }\n    }\n  }\n  pppppppbVar22 = pppppppbVar20;\n  pppppppbVar19 = local_98;\n  if (bVar5) {\n    local_94 = (byte *******)((int)local_94 + 2);\n    *ppppppppbVar9 = (byte *******)&local_a0;\n    ppppppppbVar9[1] = (byte *******)0x2;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar22 = (byte *******)((int)pppppppbVar20 + 1);\n      pppppppbVar19 = pppppppbVar20;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar22 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar22 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_0008370c;\n  pppppppbVar20 = pppppppbVar22;\n  if ((uVar17 == 0x80) &&\n     (pppppppbVar24 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar24)) {\n    if (0x10 < (int)pppppppbVar24) {\n      do {\n        while( true ) {\n          pppppppbVar20 = pppppppbVar24;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar22 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_0008348e:\n          pppppppbVar19 = local_98;\n          pppppppbVar24 = pppppppbVar20 + -4;\n          if ((int)(pppppppbVar20 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar22 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar22 = (byte *******)0x1;\n        pppppppbVar19 = local_94;\n        pppppppbVar24 = pppppppbVar20 + -4;\n        ppppppppbVar9 = (byte ********)local_68;\n      } while (0x10 < (int)(pppppppbVar20 + -4));\nLAB_000834b4:\n      pppppppbVar24 = pppppppbVar20 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar24);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar24;\n    if ((int)pppppppbVar22 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar22 + 1);\n      pppppppbVar19 = pppppppbVar22;\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n    }\n    else if (local_94 == (byte *******)0x0) {\n      pppppppbVar20 = (byte *******)0x1;\n      pppppppbVar19 = local_94;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n    else {\n      local_98 = pppppppbVar22;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      pppppppbVar19 = local_98;\n      ppppppppbVar9 = (byte ********)local_68;\n    }\n  }\n  puVar6 = PTR_DAT_000833c8;\n  pppppppbVar14 = (byte *******)((int)pppppppbVar14 - (int)local_d4);\n  ppppppppbVar21 = (byte ********)local_68;\n  if ((int)pppppppbVar14 < 1) {\nLAB_000832c6:\n    local_94 = (byte *******)((int)local_94 + (int)local_d4);\n    *ppppppppbVar9 = (byte *******)ppppppppbVar29;\n    ppppppppbVar9[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = pppppppbVar20;\n    if ((int)pppppppbVar20 < 8) goto LAB_0008345a;\n    local_98 = local_94;\n    if ((local_94 != (byte *******)0x0) &&\n       (local_98 = pppppppbVar20, iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0))\n    goto LAB_000833de;\n  }\n  else {\n    if (0x10 < (int)pppppppbVar14) {\n      do {\n        while( true ) {\n          pppppppbVar22 = pppppppbVar14;\n          local_98 = (byte *******)((int)pppppppbVar19 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar9 = (byte *******)puVar6;\n          ppppppppbVar9[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar20 = (byte *******)((int)pppppppbVar19 + 2);\n          ppppppppbVar9 = ppppppppbVar9 + 2;\nLAB_00083282:\n          pppppppbVar19 = local_98;\n          pppppppbVar14 = pppppppbVar22 + -4;\n          if ((int)(pppppppbVar22 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar20 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar9 = (byte ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = (byte *******)0x1;\n        ppppppppbVar9 = (byte ********)local_68;\n        pppppppbVar19 = local_94;\n        pppppppbVar14 = pppppppbVar22 + -4;\n      } while (0x10 < (int)(pppppppbVar22 + -4));\nLAB_000832aa:\n      pppppppbVar14 = pppppppbVar22 + -4;\n    }\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar14);\n    *ppppppppbVar9 = (byte *******)puVar6;\n    ppppppppbVar9[1] = pppppppbVar14;\n    if ((int)pppppppbVar20 < 8) {\n      pppppppbVar20 = (byte *******)((int)pppppppbVar20 + 1);\n      ppppppppbVar9 = ppppppppbVar9 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (byte *******)0x0) {\n      local_98 = pppppppbVar20;\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n      pppppppbVar20 = (byte *******)((int)local_98 + 1);\n      ppppppppbVar9 = (byte ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = (byte *******)0x1;\n    ppppppppbVar9 = (byte ********)local_68;\n    local_68 = (undefined  [4])ppppppppbVar29;\nLAB_0008345a:\n    ppppppppbVar21 = ppppppppbVar9 + 2;\n    local_94 = local_d4;\n  }\n  pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_000833cc;\n  if (((uVar17 & 4) != 0) &&\n     (pppppppbVar20 = (byte *******)((int)pppppppbVar25 - (int)local_dc), 0 < (int)pppppppbVar20)) {\n    pppppppbVar22 = local_98;\n    if ((int)pppppppbVar20 < 0x11) {\n      pppppppbVar19 = (byte *******)((int)local_98 + 1);\n      pppppppbVar14 = (byte *******)PTR_s__0123456789ABCDEF_00083788;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = (byte *******)((int)pppppppbVar22 + 1);\n          local_94 = local_94 + 4;\n          *ppppppppbVar21 = pppppppbVar14;\n          ppppppppbVar21[1] = (byte *******)0x10;\n          if (7 < (int)local_98) break;\n          pppppppbVar19 = (byte *******)((int)pppppppbVar22 + 2);\n          ppppppppbVar21 = ppppppppbVar21 + 2;\nLAB_00083316:\n          pppppppbVar20 = pppppppbVar20 + -4;\n          pppppppbVar22 = local_98;\n          if ((int)pppppppbVar20 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (byte *******)0x0) {\n          iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n          if (iVar11 == 0) {\n            pppppppbVar19 = (byte *******)((int)local_98 + 1);\n            ppppppppbVar21 = (byte ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppbVar20 = pppppppbVar20 + -4;\n        pppppppbVar19 = (byte *******)0x1;\n        pppppppbVar22 = local_94;\n        ppppppppbVar21 = (byte ********)local_68;\n      } while (0x10 < (int)pppppppbVar20);\n    }\nLAB_0008333e:\n    local_94 = (byte *******)((int)local_94 + (int)pppppppbVar20);\n    *ppppppppbVar21 = pppppppbVar14;\n    ppppppppbVar21[1] = pppppppbVar20;\n    local_98 = pppppppbVar19;\n    if (7 < (int)pppppppbVar19) {\n      if (local_94 == (byte *******)0x0) {\n        if ((int)local_dc < (int)pppppppbVar25) {\n          local_dc = pppppppbVar25;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar11 = FUN_00082ac0(param_1,param_2,&local_9c);\n      if (iVar11 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppbVar25) {\n    local_dc = pppppppbVar25;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (byte *******)0x0) &&\n     (iVar11 = FUN_00082ac0(param_1,param_2,&local_9c), iVar11 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = (byte *******)0x0;\n  ppppppppbVar9 = (byte ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar15 = uVar18 - 0x30;\n  pppppppbVar25 = (byte *******)0x0;\n  pppppppbVar14 = param_3;\n  do {\n    param_3 = (byte *******)((int)pppppppbVar14 + 1);\n    uVar18 = (uint)*(byte *)pppppppbVar14;\n    pppppppbVar25 = (byte *******)(uVar15 + (int)pppppppbVar25 * 10);\n    uVar15 = uVar18 - 0x30;\n    pppppppbVar14 = param_3;\n  } while (uVar15 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar18 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "called": [
                "FUN_00082ac0",
                "FUN_00082a50",
                "FUN_00083b14",
                "FUN_00084384",
                "FUN_00084750",
                "FUN_00083808",
                "FUN_0008378c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00082b38",
            "calling": [
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "FUNC_00082b38"
        },
        "FUN_00081e04": {
            "renaming": {
                "FUN_00081e04": "execute_operation_00081e04",
                "param_1": "operationCode"
            },
            "code": "\nvoid executeOperation_00081e04(undefined4 operationCode)\n\n{\n  FUN_00083d9c(*DAT_00081e10,operationCode);\n  return;\n}\n\n",
            "called": [
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e04",
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "imported": false,
            "current_name": "execute_operation_00081e04"
        },
        "FUN_00084750": {
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "intermediate_result"
            },
            "code": "\nint calculate_result_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int intermediate_result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  intermediate_result = FUN_000847ac();\n  return intermediate_result;\n}\n\n",
            "called": [
                "FUN_000847ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084750",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "calculate_result_00084750"
        },
        "FUN_00080ae4": {
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "puVar1": "dataPointer1",
                "puVar2": "dataPointer2",
                "iVar3": "registerVar1",
                "iVar4": "registerVar2",
                "iVar5": "registerVar3",
                "iVar6": "registerVar4",
                "iVar7": "loopCounter",
                "iVar8": "nextCounter"
            },
            "code": "\nvoid initializeSystem_00080ae4(void)\n\n{\n  uint *dataPointer1;\n  undefined4 *dataPointer2;\n  int registerVar1;\n  int registerVar2;\n  int registerVar3;\n  int registerVar4;\n  int loopCounter;\n  int nextCounter;\n  \n  dataPointer1 = DAT_00080be8;\n  FUN_00080e9c();\n  dataPointer2 = DAT_00080bec;\n  DAT_00080bec[1] = *dataPointer1 / 1000 - 1;\n  *(undefined *)(DAT_00080bf0 + 0x23) = 0xf0;\n  dataPointer2[2] = 0;\n  *dataPointer2 = 7;\n  FUNC_00081d7c();\n  loopCounter = 0;\n  do {\n    nextCounter = loopCounter + 1;\n    FUN_00081318(loopCounter,0);\n    registerVar4 = DAT_00080c00;\n    registerVar3 = DAT_00080bfc;\n    registerVar2 = DAT_00080bf8;\n    registerVar1 = DAT_00080bf4;\n    loopCounter = nextCounter;\n  } while (nextCounter != 0x4f);\n  *(undefined4 *)(DAT_00080bf4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(registerVar2 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(registerVar4 + 0xa0) = 0xffffffff;\n  *(undefined4 *)(registerVar3 + 0xa0) = 0xffffffff;\n  FUN_00080da0(registerVar1,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(registerVar1,1,0xc00,0);\n  FUN_00080da0(registerVar1,1,0x3000,0);\n  FUN_00080da0(registerVar3,2,0x30,0);\n  FUN_00080da0(registerVar2,1,0xc00,0);\n  FUN_00080da0(registerVar1,1,3,0);\n  FUN_00080da0(registerVar2,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(DAT_00080c08,*dataPointer1,DAT_00080c04,0xc);\n  FUN_00081042(DAT_00080c08,0,0x300000,1);\n  FUN_00081034(DAT_00080c08,0,0);\n  FUN_0008106e(DAT_00080c08,0xffffffff);\n  FUN_00081066(DAT_00080c08);\n  return;\n}\n\n",
            "called": [
                "FUN_00081d7c",
                "FUN_00080e9c",
                "FUN_00081066",
                "FUN_00080da0",
                "FUN_00080e18",
                "FUN_00081042",
                "FUN_00081318",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080ae4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "initialize_system_00080ae4"
        },
        "FUN_00081d5c": {
            "renaming": {
                "FUN_00081d5c": "allocate_and_update_memory_00081d5c",
                "param_1": "input_data_1",
                "param_2": "input_data_2",
                "param_3": "input_data_3",
                "puVar1": "memory_block",
                "uVar2": "memory_index",
                "iVar3": "global_data_ptr",
                "uVar4": "bitmask"
            },
            "code": "\nundefined4 allocate_and_update_memory_00081d5c(undefined4 input_data_1,undefined4 input_data_2,undefined4 input_data_3)\n\n{\n  undefined4 *memory_block;\n  uint memory_index;\n  int global_data_ptr;\n  uint bitmask;\n  \n  global_data_ptr = *(int *)PTR_DAT_0008396c;\n  memory_block = *(undefined4 **)(global_data_ptr + 0x148);\n  if (memory_block == (undefined4 *)0x0) {\n    memory_block = (undefined4 *)(global_data_ptr + 0x14c);\n    *(undefined4 **)(global_data_ptr + 0x148) = memory_block;\n  }\n  memory_index = memory_block[1];\n  if (0x1f < (int)memory_index) {\n    if ((DAT_00083970 == 0) ||\n       (memory_block = (undefined4 *)FUN_00081df4(400), memory_block == (undefined4 *)0x0)) {\n      return 0xffffffff;\n    }\n    *memory_block = *(undefined4 *)(global_data_ptr + 0x148);\n    memory_block[1] = 0;\n    memory_index = 0;\n    *(undefined4 **)(global_data_ptr + 0x148) = memory_block;\n    memory_block[0x62] = 0;\n    memory_block[99] = 0;\n  }\n  bitmask = 1 << (memory_index & 0xff);\n  memory_block[memory_index + 0x22] = input_data_1;\n  memory_block[0x62] = memory_block[0x62] | bitmask;\n  memory_block[memory_index + 0x42] = input_data_3;\n  memory_block[99] = bitmask | memory_block[99];\n  memory_block[1] = memory_index + 1;\n  memory_block[memory_index + 2] = input_data_2;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081d5c",
            "calling": [
                "FUN_00080a68"
            ],
            "imported": false,
            "current_name": "allocate_and_update_memory_00081d5c"
        },
        "FUN_00082970": {
            "renaming": {
                "FUN_00082970": "update_pointer_value_00082970",
                "param_1": "outputPointer",
                "param_2": "inputValue",
                "puVar1": "tempPointer",
                "iVar2": "functionResult"
            },
            "code": "\nvoid updatePointerValue_00082970(int *outputPointer,undefined4 inputValue)\n\n{\n  undefined *tempPointer;\n  int functionResult;\n  \n  tempPointer = PTR_DAT_00082990;\n  *(undefined4 *)PTR_DAT_00082990 = 0;\n  functionResult = FUN_0008118c(inputValue);\n  if ((functionResult == -1) && (*(int *)tempPointer != 0)) {\n    *outputPointer = *(int *)tempPointer;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0008118c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082970",
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "imported": false,
            "current_name": "update_pointer_value_00082970"
        },
        "FUN_000811be": {
            "renaming": {
                "FUN_000811be": "return_one_000811be"
            },
            "code": "\nundefined4 return_one_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811be",
            "calling": [
                "FUN_000846dc"
            ],
            "imported": false,
            "current_name": "return_one_000811be"
        },
        "FUN_00084a80": {
            "renaming": {
                "FUN_00084a80": "calculate_divmod_result_00084a80",
                "param_1": "numerator_high",
                "param_2": "numerator_low",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "lVar1": "long_product",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "uVar6": "temp_var5",
                "uVar7": "temp_var6",
                "uVar8": "temp_var7",
                "uVar9": "temp_var8",
                "uVar10": "temp_var9",
                "bVar11": "carry_flag"
            },
            "code": "\nundefined8 calculate_divmod_result_00084a80(uint numerator_high,uint numerator_low,uint divisor_high,uint divisor_low)\n\n{\n  longlong long_product;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint temp_var9;\n  bool carry_flag;\n  \n  if (divisor_low == 0) {\n    if (divisor_high <= numerator_low) {\n      if (divisor_high == 0) {\n        divisor_high = 1 / 0;\n      }\n      temp_var8 = count_leading_zeroes(divisor_high);\n      if (temp_var8 == 0) {\n        numerator_low = numerator_low - divisor_high;\n        temp_var1 = divisor_high >> 0x10;\n        temp_var3 = divisor_high & 0xffff;\n        temp_var6 = 1;\n      }\n      else {\n        divisor_high = divisor_high << (temp_var8 & 0xff);\n        temp_var2 = numerator_low >> (0x20 - temp_var8 & 0xff);\n        temp_var1 = divisor_high >> 0x10;\n        temp_var7 = temp_var2 / temp_var1;\n        temp_var3 = divisor_high & 0xffff;\n        temp_var6 = temp_var3 * temp_var7;\n        temp_var4 = numerator_high >> (0x20 - temp_var8 & 0xff) | numerator_low << (temp_var8 & 0xff);\n        temp_var2 = temp_var4 >> 0x10 | (temp_var2 - temp_var1 * temp_var7) * 0x10000;\n        numerator_high = numerator_high << (temp_var8 & 0xff);\n        temp_var8 = temp_var7;\n        if (temp_var2 <= temp_var6 && temp_var6 - temp_var2 != 0) {\n          carry_flag = CARRY4(temp_var2,divisor_high);\n          temp_var2 = temp_var2 + divisor_high;\n          temp_var8 = temp_var7 - 1;\n          if ((carry_flag == false) && (temp_var2 <= temp_var6 && temp_var6 - temp_var2 != 0)) {\n            temp_var8 = temp_var7 - 2;\n            temp_var2 = temp_var2 + divisor_high;\n          }\n        }\n        temp_var5 = (temp_var2 - temp_var6) / temp_var1;\n        temp_var7 = temp_var3 * temp_var5;\n        numerator_low = temp_var4 & 0xffff | ((temp_var2 - temp_var6) - temp_var1 * temp_var5) * 0x10000;\n        temp_var6 = temp_var5;\n        if (numerator_low <= temp_var7 && temp_var7 - numerator_low != 0) {\n          carry_flag = CARRY4(numerator_low,divisor_high);\n          numerator_low = numerator_low + divisor_high;\n          temp_var6 = temp_var5 - 1;\n          if ((carry_flag == false) && (numerator_low <= temp_var7 && temp_var7 - numerator_low != 0)) {\n            temp_var6 = temp_var5 - 2;\n            numerator_low = numerator_low + divisor_high;\n          }\n        }\n        numerator_low = numerator_low - temp_var7;\n        temp_var6 = temp_var6 | temp_var8 << 0x10;\n      }\n      temp_var7 = numerator_low / temp_var1;\n      temp_var2 = temp_var3 * temp_var7;\n      temp_var4 = numerator_high >> 0x10 | (numerator_low - temp_var1 * temp_var7) * 0x10000;\n      temp_var8 = temp_var7;\n      if (temp_var4 <= temp_var2 && temp_var2 - temp_var4 != 0) {\n        carry_flag = CARRY4(temp_var4,divisor_high);\n        temp_var4 = temp_var4 + divisor_high;\n        temp_var8 = temp_var7 - 1;\n        if ((carry_flag == false) && (temp_var4 <= temp_var2 && temp_var2 - temp_var4 != 0)) {\n          temp_var8 = temp_var7 - 2;\n          temp_var4 = temp_var4 + divisor_high;\n        }\n      }\n      temp_var7 = (temp_var4 - temp_var2) / temp_var1;\n      temp_var3 = temp_var3 * temp_var7;\n      temp_var4 = numerator_high & 0xffff | ((temp_var4 - temp_var2) - temp_var1 * temp_var7) * 0x10000;\n      temp_var1 = temp_var7;\n      if (temp_var4 <= temp_var3 && temp_var3 - temp_var4 != 0) {\n        temp_var1 = temp_var7 - 1;\n        if ((CARRY4(temp_var4,divisor_high) == false) &&\n           (temp_var4 + divisor_high <= temp_var3 && temp_var3 - (temp_var4 + divisor_high) != 0)) {\n          temp_var1 = temp_var7 - 2;\n        }\n      }\n      return CONCAT44(temp_var6,temp_var1 | temp_var8 << 0x10);\n    }\n    temp_var8 = count_leading_zeroes(divisor_high);\n    if (temp_var8 != 0) {\n      temp_var6 = numerator_high >> (0x20 - temp_var8 & 0xff);\n      divisor_high = divisor_high << (temp_var8 & 0xff);\n      numerator_high = numerator_high << (temp_var8 & 0xff);\n      numerator_low = temp_var6 | numerator_low << (temp_var8 & 0xff);\n    }\n    temp_var6 = divisor_high >> 0x10;\n    temp_var1 = numerator_low / temp_var6;\n    temp_var3 = (divisor_high & 0xffff) * temp_var1;\n    temp_var7 = numerator_high >> 0x10 | (numerator_low - temp_var6 * temp_var1) * 0x10000;\n    temp_var8 = temp_var1;\n    if (temp_var7 <= temp_var3 && temp_var3 - temp_var7 != 0) {\n      carry_flag = CARRY4(temp_var7,divisor_high);\n      temp_var7 = temp_var7 + divisor_high;\n      temp_var8 = temp_var1 - 1;\n      if ((carry_flag == false) && (temp_var7 <= temp_var3 && temp_var3 - temp_var7 != 0)) {\n        temp_var8 = temp_var1 - 2;\n        temp_var7 = temp_var7 + divisor_high;\n      }\n    }\n    temp_var4 = (temp_var7 - temp_var3) / temp_var6;\n    temp_var1 = (divisor_high & 0xffff) * temp_var4;\n    temp_var3 = numerator_high & 0xffff | ((temp_var7 - temp_var3) - temp_var6 * temp_var4) * 0x10000;\n    temp_var6 = temp_var4;\n    if (temp_var3 <= temp_var1 && temp_var1 - temp_var3 != 0) {\n      temp_var6 = temp_var4 - 1;\n      if ((CARRY4(temp_var3,divisor_high) == false) &&\n         (temp_var3 + divisor_high <= temp_var1 && temp_var1 - (temp_var3 + divisor_high) != 0)) {\n        temp_var6 = temp_var4 - 2;\n      }\n    }\n    temp_var8 = temp_var6 | temp_var8 << 0x10;\n    temp_var6 = 0;\n  }\n  else {\n    if (numerator_low < divisor_low) {\n      return 0;\n    }\n    temp_var8 = count_leading_zeroes(divisor_low);\n    if (temp_var8 == 0) {\n      if ((divisor_low < numerator_low) || (temp_var6 = temp_var8, divisor_high <= numerator_high)) {\n        return 1;\n      }\n    }\n    else {\n      temp_var1 = 0x20 - temp_var8;\n      temp_var6 = numerator_low >> (temp_var1 & 0xff);\n      temp_var3 = divisor_low << (temp_var8 & 0xff) | divisor_high >> (temp_var1 & 0xff);\n      temp_var7 = temp_var3 >> 0x10;\n      temp_var5 = temp_var6 / temp_var7;\n      temp_var4 = (temp_var3 & 0xffff) * temp_var5;\n      temp_var2 = numerator_high >> (temp_var1 & 0xff) | numerator_low << (temp_var8 & 0xff);\n      temp_var1 = temp_var2 >> 0x10 | (temp_var6 - temp_var7 * temp_var5) * 0x10000;\n      temp_var6 = temp_var5;\n      if (temp_var1 <= temp_var4 && temp_var4 - temp_var1 != 0) {\n        carry_flag = CARRY4(temp_var1,temp_var3);\n        temp_var1 = temp_var1 + temp_var3;\n        temp_var6 = temp_var5 - 1;\n        if ((carry_flag == false) && (temp_var1 <= temp_var4 && temp_var4 - temp_var1 != 0)) {\n          temp_var6 = temp_var5 - 2;\n          temp_var1 = temp_var1 + temp_var3;\n        }\n      }\n      temp_var5 = (temp_var1 - temp_var4) / temp_var7;\n      temp_var9 = (temp_var3 & 0xffff) * temp_var5;\n      temp_var7 = temp_var2 & 0xffff | ((temp_var1 - temp_var4) - temp_var7 * temp_var5) * 0x10000;\n      temp_var1 = temp_var5;\n      if (temp_var7 <= temp_var9 && temp_var9 - temp_var7 != 0) {\n        carry_flag = CARRY4(temp_var7,temp_var3);\n        temp_var7 = temp_var7 + temp_var3;\n        temp_var1 = temp_var5 - 1;\n        if ((carry_flag == false) && (temp_var7 <= temp_var9 && temp_var9 - temp_var7 != 0)) {\n          temp_var1 = temp_var5 - 2;\n          temp_var7 = temp_var7 + temp_var3;\n        }\n      }\n      temp_var1 = temp_var1 | temp_var6 << 0x10;\n      long_product = (ulonglong)temp_var1 * (ulonglong)(divisor_high << (temp_var8 & 0xff));\n      temp_var6 = (uint)((ulonglong)long_product >> 0x20);\n      if ((temp_var7 - temp_var9 < temp_var6) ||\n         ((temp_var7 - temp_var9 == temp_var6 && (numerator_high << (temp_var8 & 0xff) < (uint)long_product)))) {\n        temp_var8 = temp_var1 - 1;\n        temp_var6 = 0;\n      }\n      else {\n        temp_var8 = temp_var1;\n        temp_var6 = 0;\n      }\n    }\n  }\n  return CONCAT44(temp_var6,temp_var8);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084a80",
            "calling": [
                "FUN_000847ac"
            ],
            "imported": false,
            "current_name": "calculate_divmod_result_00084a80"
        },
        "FUN_00081c54": {
            "renaming": {
                "FUN_00081c54": "swap_parameters_00081c54",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "\nvoid swap_parameters_00081c54(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_00081c5c(second_param,first_param);\n  return;\n}\n\n",
            "called": [
                "FUN_00081c5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081c54",
            "calling": [
                "FUN_00081ca8"
            ],
            "imported": false,
            "current_name": "swap_parameters_00081c54"
        },
        "FUN_0008163a": {
            "renaming": {
                "FUN_0008163a": "validate_and_update_0008163a",
                "param_1": "array_ptr",
                "param_2": "threshold",
                "iVar1": "update_result"
            },
            "code": "\nundefined4 validate_and_update_0008163a(int *array_ptr,uint threshold)\n\n{\n  int update_result;\n  \n  if ((*array_ptr == 0) || ((uint)array_ptr[1] < threshold)) {\n    update_result = FUN_00081622(array_ptr);\n    if (update_result == 0) {\n      return 0;\n    }\n    if (array_ptr[2] == 0) {\n      *(undefined *)*array_ptr = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00081622"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008163a",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "validate_and_update_0008163a"
        },
        "FUN_000825a0": {
            "renaming": {
                "FUN_000825a0": "process_data_000825a0",
                "param_1": "input_data_1",
                "param_2": "input_data_2"
            },
            "code": "\nvoid process_data_000825a0(undefined4 input_data_1,undefined4 input_data_2)\n\n{\n  FUN_000825b0(*DAT_000825ac,input_data_1,input_data_2);\n  return;\n}\n\n",
            "called": [
                "FUN_000825b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825a0",
            "calling": [
                "FUN_00081622"
            ],
            "imported": false,
            "current_name": "process_data_000825a0"
        },
        "FUN_000815d4": {
            "renaming": {
                "FUN_000815d4": "initialize_struct_000815d4",
                "param_1": "struct_ptr",
                "param_2": "input_value"
            },
            "code": "\nundefined4 * initialize_struct_000815d4(undefined4 *struct_ptr,undefined4 input_value)\n\n{\n  FUN_000814e4();\n  *struct_ptr = PTR_PTR_FUN_00081454_1_000815f4;\n  struct_ptr[9] = input_value;\n  return struct_ptr;\n}\n\n",
            "called": [
                "FUN_000814e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000815d4",
            "calling": [
                "FUN_00080c0c"
            ],
            "imported": false,
            "current_name": "initialize_struct_000815d4"
        },
        "FUN_00081e14": {
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "allocator",
                "param_2": "size",
                "uVar1": "allocator_base",
                "puVar2": "allocator_end",
                "puVar3": "allocator_limit",
                "iVar4": "temp_var1",
                "uVar5": "bitmap_mask",
                "uVar6": "current_block",
                "uVar8": "adjusted_size",
                "iVar9": "prev_block",
                "iVar7": "next_block",
                "iVar12": "temp_var2",
                "iVar13": "index",
                "piVar10": "current_entry",
                "piVar14": "prev_entry",
                "piVar16": "next_entry",
                "uVar15": "aligned_size",
                "uVar11": "updated_limit",
                "uVar17": "extra_size",
                "uVar18": "bitmap_index"
            },
            "code": "\nint * allocate_memory_00081e14(undefined4 *allocator,uint size)\n\n{\n  uint allocator_base;\n  uint *allocator_end;\n  undefined *allocator_limit;\n  int temp_var1;\n  uint bitmap_mask;\n  uint current_block;\n  int next_block;\n  uint adjusted_size;\n  int prev_block;\n  int *current_entry;\n  uint updated_limit;\n  int temp_var2;\n  int index;\n  int *prev_entry;\n  uint aligned_size;\n  int *next_entry;\n  uint extra_size;\n  uint bitmap_index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *allocator = 0xc;\n      return (int *)0x0;\n    }\n  }\n  do_nothing_00082598(allocator);\n  allocator_base = DAT_00082140;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)(DAT_00082140 + aligned_size + 0xc);\n    if ((index != DAT_00082140 + aligned_size) ||\n       (temp_var1 = index + 8, index = *(int *)(index + 0x14), temp_var1 != index)) {\n      next_block = *(int *)(index + 0xc);\n      prev_block = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(prev_block + 4);\n      temp_var1 = *(int *)(index + 8);\n      *(int *)(temp_var1 + 0xc) = next_block;\n      *(int *)(next_block + 8) = temp_var1;\n      *(uint *)(prev_block + 4) = aligned_size | 1;\n      do_nothing_0008259c(allocator);\n      return (int *)(index + 8);\n    }\n    bitmap_index = (aligned_size >> 3) + 2;\n  }\n  else {\n    bitmap_index = aligned_size >> 9;\n    if (bitmap_index == 0) {\n      temp_var1 = 0x7e;\n      index = 0x3f;\n    }\n    else if (bitmap_index < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      temp_var1 = index * 2;\n    }\n    else if (bitmap_index < 0x15) {\n      index = bitmap_index + 0x5b;\n      temp_var1 = index * 2;\n    }\n    else if (bitmap_index < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      temp_var1 = index * 2;\n    }\n    else if (bitmap_index < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      temp_var1 = index * 2;\n    }\n    else if (bitmap_index < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      temp_var1 = index * 2;\n    }\n    else {\n      temp_var1 = 0xfc;\n      index = 0x7e;\n    }\n    next_block = DAT_00082140 + temp_var1 * 4;\n    for (temp_var1 = *(int *)(next_block + 0xc); next_block != temp_var1; temp_var1 = *(int *)(temp_var1 + 0xc)) {\n      bitmap_index = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      prev_block = bitmap_index - aligned_size;\n      if (0xf < prev_block) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < prev_block) {\n        next_block = bitmap_index + temp_var1;\n        aligned_size = *(uint *)(next_block + 4);\n        prev_block = *(int *)(temp_var1 + 0xc);\n        index = *(int *)(temp_var1 + 8);\n        *(int *)(index + 0xc) = prev_block;\n        *(int *)(prev_block + 8) = index;\n        *(uint *)(next_block + 4) = aligned_size | 1;\n        do_nothing_0008259c(allocator);\n        return (int *)(temp_var1 + 8);\n      }\n    }\n    bitmap_index = index + 1;\n  }\n  index = *(int *)(DAT_00082140 + 0x10);\n  temp_var1 = DAT_00082140 + 8;\n  if (index == temp_var1) {\n    bitmap_mask = *(uint *)(DAT_00082140 + 4);\n  }\n  else {\n    bitmap_mask = *(uint *)(index + 4);\n    current_block = bitmap_mask & 0xfffffffc;\n    adjusted_size = current_block - aligned_size;\n    if (0xf < (int)adjusted_size) {\n      next_block = aligned_size + index;\n      *(uint *)(index + 4) = aligned_size | 1;\n      *(int *)(allocator_base + 0x14) = next_block;\n      *(int *)(allocator_base + 0x10) = next_block;\n      *(int *)(next_block + 0xc) = temp_var1;\n      *(int *)(next_block + 8) = temp_var1;\n      *(uint *)(next_block + 4) = adjusted_size | 1;\n      *(uint *)(next_block + adjusted_size) = adjusted_size;\n      do_nothing_0008259c(allocator);\n      return (int *)(index + 8);\n    }\n    *(int *)(DAT_00082140 + 0x14) = temp_var1;\n    *(int *)(allocator_base + 0x10) = temp_var1;\n    if (-1 < (int)adjusted_size) {\n      *(uint *)(current_block + index + 4) = *(uint *)(current_block + index + 4) | 1;\n      do_nothing_0008259c(allocator);\n      return (int *)(index + 8);\n    }\n    if (current_block < 0x200) {\n      prev_block = allocator_base + (bitmap_mask & 0xfffffff8);\n      next_block = *(int *)(prev_block + 8);\n      bitmap_mask = 1 << ((int)(bitmap_mask >> 3) >> 2 & 0xffU) | *(uint *)(allocator_base + 4);\n      *(int *)(index + 8) = next_block;\n      *(int *)(index + 0xc) = prev_block;\n      *(uint *)(allocator_base + 4) = bitmap_mask;\n      *(int *)(prev_block + 8) = index;\n      *(int *)(next_block + 0xc) = index;\n    }\n    else {\n      adjusted_size = bitmap_mask >> 9;\n      if (adjusted_size < 5) {\n        prev_block = (bitmap_mask >> 6) + 0x38;\n        next_block = prev_block * 2;\n      }\n      else if (adjusted_size < 0x15) {\n        prev_block = adjusted_size + 0x5b;\n        next_block = prev_block * 2;\n      }\n      else if (adjusted_size < 0x55) {\n        prev_block = (bitmap_mask >> 0xc) + 0x6e;\n        next_block = prev_block * 2;\n      }\n      else if (adjusted_size < 0x155) {\n        prev_block = (bitmap_mask >> 0xf) + 0x77;\n        next_block = prev_block * 2;\n      }\n      else if (adjusted_size < 0x555) {\n        prev_block = (bitmap_mask >> 0x12) + 0x7c;\n        next_block = prev_block * 2;\n      }\n      else {\n        next_block = 0xfc;\n        prev_block = 0x7e;\n      }\n      next_block = allocator_base + next_block * 4;\n      temp_var2 = *(int *)(next_block + 8);\n      if (temp_var2 == next_block) {\n        bitmap_mask = *(uint *)(DAT_00082348 + 4) | 1 << (prev_block >> 2 & 0xffU);\n        *(uint *)(DAT_00082348 + 4) = bitmap_mask;\n        prev_block = temp_var2;\n      }\n      else {\n        do {\n          prev_block = temp_var2;\n          if ((*(uint *)(temp_var2 + 4) & 0xfffffffc) <= current_block) break;\n          temp_var2 = *(int *)(temp_var2 + 8);\n          prev_block = temp_var2;\n        } while (next_block != temp_var2);\n        temp_var2 = *(int *)(prev_block + 0xc);\n        bitmap_mask = *(uint *)(allocator_base + 4);\n      }\n      *(int *)(index + 0xc) = temp_var2;\n      *(int *)(index + 8) = prev_block;\n      *(int *)(temp_var2 + 8) = index;\n      *(int *)(prev_block + 0xc) = index;\n    }\n  }\n  current_block = 1 << ((int)bitmap_index >> 2 & 0xffU);\n  if (current_block <= bitmap_mask) {\n    if ((bitmap_mask & current_block) == 0) {\n      bitmap_index = bitmap_index & 0xfffffffc;\n      do {\n        current_block = current_block << 1;\n        bitmap_index = bitmap_index + 4;\n      } while ((bitmap_mask & current_block) == 0);\n    }\n    do {\n      next_entry = (int *)(allocator_base + bitmap_index * 8);\n      prev_entry = next_entry;\n      bitmap_mask = bitmap_index;\n      do {\n        for (current_entry = (int *)prev_entry[3]; prev_entry != current_entry; current_entry = (int *)current_entry[3]) {\n          adjusted_size = current_entry[1] & 0xfffffffc;\n          extra_size = adjusted_size - aligned_size;\n          if (0xf < (int)extra_size) {\n            prev_block = current_entry[2];\n            index = current_entry[3];\n            next_block = aligned_size + (int)current_entry;\n            current_entry[1] = aligned_size | 1;\n            *(int *)(prev_block + 0xc) = index;\n            *(int *)(index + 8) = prev_block;\n            *(int *)(allocator_base + 0x14) = next_block;\n            *(int *)(allocator_base + 0x10) = next_block;\n            *(int *)(next_block + 0xc) = temp_var1;\n            *(int *)(next_block + 8) = temp_var1;\n            *(uint *)(next_block + 4) = extra_size | 1;\n            *(uint *)(next_block + extra_size) = extra_size;\n            do_nothing_0008259c(allocator);\n            return current_entry + 2;\n          }\n          if (-1 < (int)extra_size) {\n            index = current_entry[2];\n            temp_var1 = current_entry[3];\n            *(uint *)((int)current_entry + adjusted_size + 4) = *(uint *)((int)current_entry + adjusted_size + 4) | 1;\n            *(int *)(index + 0xc) = temp_var1;\n            *(int *)(temp_var1 + 8) = index;\n            do_nothing_0008259c(allocator);\n            return current_entry + 2;\n          }\n        }\n        bitmap_mask = bitmap_mask + 1;\n        prev_entry = prev_entry + 2;\n      } while ((bitmap_mask & 3) != 0);\n      do {\n        adjusted_size = bitmap_index & 3;\n        prev_entry = next_entry + -2;\n        bitmap_index = bitmap_index - 1;\n        if (adjusted_size == 0) {\n          adjusted_size = *(uint *)(allocator_base + 4) & ~current_block;\n          *(uint *)(allocator_base + 4) = adjusted_size;\n          goto LAB_00082262;\n        }\n        next_entry = (int *)*next_entry;\n      } while (next_entry == prev_entry);\n      adjusted_size = *(uint *)(allocator_base + 4);\nLAB_00082262:\n      current_block = current_block * 2;\n      if ((adjusted_size <= current_block && current_block - adjusted_size != 0) || (bitmap_index = bitmap_mask, current_block == 0)) break;\n      for (; (adjusted_size & current_block) == 0; current_block = current_block << 1) {\n        bitmap_index = bitmap_index + 4;\n      }\n    } while( true );\n  }\n  allocator_end = DAT_00082148;\n  bitmap_index = *(uint *)(allocator_base + 8);\n  bitmap_mask = *(uint *)(bitmap_index + 4) & 0xfffffffc;\n  if ((aligned_size <= bitmap_mask) && (adjusted_size = bitmap_mask - aligned_size, current_block = bitmap_index, 0xf < (int)adjusted_size))\n  goto LAB_0008211e;\n  adjusted_size = bitmap_index + bitmap_mask;\n  if (*DAT_00082148 == 0xffffffff) {\n    extra_size = aligned_size + *(int *)PTR_DAT_00082144 + 0x10;\n  }\n  else {\n    extra_size = aligned_size + *(int *)PTR_DAT_00082144 + 0x100f & 0xfffff000;\n  }\n  current_block = FUN_00082970(allocator,extra_size);\n  allocator_limit = PTR_DAT_00082154;\n  if ((current_block == 0xffffffff) || ((current_block < adjusted_size && (bitmap_index != allocator_base)))) {\n    current_block = *(uint *)(allocator_base + 8);\n    bitmap_index = *(uint *)(current_block + 4) & 0xfffffffc;\n  }\n  else {\n    updated_limit = *(int *)PTR_DAT_00082154 + extra_size;\n    *(uint *)PTR_DAT_00082154 = updated_limit;\n    if ((adjusted_size == current_block) && ((adjusted_size & 0xfff) == 0)) {\n      *(uint *)(*(int *)(allocator_base + 8) + 4) = extra_size + bitmap_mask | 1;\n    }\n    else {\n      if (*allocator_end == 0xffffffff) {\n        *DAT_00082148 = current_block;\n      }\n      else {\n        *(uint *)allocator_limit = updated_limit + (current_block - adjusted_size);\n      }\n      adjusted_size = current_block & 7;\n      if (adjusted_size == 0) {\n        index = 0x1000;\n      }\n      else {\n        current_block = current_block + (8 - adjusted_size);\n        index = 0x1008 - adjusted_size;\n      }\n      index = index - (extra_size + current_block & 0xfff);\n      temp_var1 = FUN_00082970(allocator,index);\n      if (temp_var1 == -1) {\n        adjusted_size = 1;\n        index = 0;\n      }\n      else {\n        adjusted_size = (temp_var1 - current_block) + index | 1;\n      }\n      updated_limit = *(int *)allocator_limit + index;\n      *(uint *)(allocator_base + 8) = current_block;\n      *(uint *)allocator_limit = updated_limit;\n      *(uint *)(current_block + 4) = adjusted_size;\n      allocator_limit = PTR_DAT_00082154;\n      if (bitmap_index != allocator_base) {\n        if (bitmap_mask < 0x10) {\n          *(undefined4 *)(current_block + 4) = 1;\n          bitmap_index = 0;\n          goto LAB_00082108;\n        }\n        bitmap_mask = bitmap_mask - 0xc & 0xfffffff8;\n        *(uint *)(bitmap_index + 4) = bitmap_mask | *(uint *)(bitmap_index + 4) & 1;\n        *(undefined4 *)(bitmap_index + bitmap_mask + 4) = 5;\n        *(undefined4 *)(bitmap_index + bitmap_mask + 8) = 5;\n        if (0xf < bitmap_mask) {\n          FUN_00083d9c(allocator,bitmap_index + 8);\n          updated_limit = *(uint *)allocator_limit;\n        }\n      }\n    }\n    current_block = *(uint *)(allocator_base + 8);\n    if (*(uint *)PTR_DAT_0008214c < updated_limit) {\n      *(uint *)PTR_DAT_0008214c = updated_limit;\n    }\n    if (*(uint *)PTR_DAT_00082150 < updated_limit) {\n      *(uint *)PTR_DAT_00082150 = updated_limit;\n    }\n    bitmap_index = *(uint *)(current_block + 4) & 0xfffffffc;\n  }\nLAB_00082108:\n  adjusted_size = bitmap_index - aligned_size;\n  if ((bitmap_index < aligned_size) || ((int)adjusted_size < 0x10)) {\n    do_nothing_0008259c(allocator);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  *(uint *)(current_block + 4) = aligned_size | 1;\n  *(uint *)(allocator_base + 8) = aligned_size + current_block;\n  *(uint *)(aligned_size + current_block + 4) = adjusted_size | 1;\n  do_nothing_0008259c(allocator);\n  return (int *)(current_block + 8);\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081e14",
            "calling": [
                "FUN_00083f34",
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00081df4"
            ],
            "imported": false,
            "current_name": "allocate_memory_00081e14"
        },
        "FUN_00080164": {
            "renaming": {
                "FUN_00080164": "initialize_and_execute_00080164",
                "param_1": "configPtr",
                "puVar1": "tempPtr",
                "iVar2": "executionResult"
            },
            "code": "\nvoid initializeAndExecute_00080164(int **configPtr)\n\n{\n  undefined *tempPtr;\n  int executionResult;\n  \n  tempPtr = PTR_DAT_000801ac;\n  *configPtr = (int *)PTR_DAT_000801ac;\n  (**(code **)(*(int *)tempPtr + 0x18))(PTR_DAT_000801ac);\n  if (1 < *(byte *)((int)configPtr + 6)) {\n    FUN_00081210(*(byte *)((int)configPtr + 6),1);\n    FUN_00081318(*(undefined *)((int)configPtr + 6),0);\n  }\n  do {\n    executionResult = (**(code **)(**configPtr + 0xc))();\n  } while (-1 < executionResult);\n  *(undefined *)((int)configPtr + 0x49) = 0;\n  *(undefined *)((int)configPtr + 0x4a) = 0;\n  *(undefined2 *)(configPtr + 0x15) = 0;\n  *(undefined2 *)((int)configPtr + 0x52) = 0;\n  *(undefined2 *)(configPtr + 0x14) = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080164",
            "calling": [
                "FUN_000804a8"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_00080164"
        },
        "FUN_000811cc": {
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "unused_param",
                "param_2": "input_array",
                "param_3": "array_length",
                "iVar1": "index"
            },
            "code": "\nuint process_data_000811cc(undefined4 unused_param,int input_array,uint array_length)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)array_length; index = index + 1) {\n    do {\n    } while (-1 < *(int *)(DAT_000811ec + 0x14) << 0x1e);\n    *(uint *)(DAT_000811ec + 0x1c) = (uint)*(byte *)(input_array + index);\n  }\n  return array_length & ~((int)array_length >> 0x1f);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811cc",
            "calling": [
                "FUN_00084464"
            ],
            "imported": false,
            "current_name": "process_data_000811cc"
        },
        "FUN_000846dc": {
            "renaming": {
                "FUN_000846dc": "process_data_000846dc",
                "param_1": "output",
                "param_2": "input",
                "puVar1": "tempPtr",
                "iVar2": "result"
            },
            "code": "\nvoid processData_000846dc(int *output,undefined4 input)\n\n{\n  undefined *tempPtr;\n  int result;\n  \n  tempPtr = PTR_DAT_000846fc;\n  *(undefined4 *)PTR_DAT_000846fc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (*(int *)tempPtr != 0)) {\n    *output = *(int *)tempPtr;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000811be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000846dc",
            "calling": [
                "FUN_000842a4"
            ],
            "imported": false,
            "current_name": "process_data_000846dc"
        },
        "FUN_00081894": {
            "renaming": {
                "FUN_00081894": "calculate_adjusted_value_00081894",
                "param_1": "input_value",
                "iVar1": "leading_zeroes",
                "uVar2": "adjusted_zeroes",
                "iVar3": "base_value",
                "uVar4": "shifted_value"
            },
            "code": "\nuint calculate_adjusted_value_00081894(uint input_value)\n\n{\n  int leading_zeroes;\n  uint adjusted_zeroes;\n  int base_value;\n  uint shifted_value;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeroes(input_value);\n  adjusted_zeroes = leading_zeroes - 8;\n  base_value = adjusted_zeroes * -0x800000 + 0x4a800000;\n  if (7 < leading_zeroes) {\n    shifted_value = 0 << (adjusted_zeroes & 0xff);\n    adjusted_zeroes = base_value + (input_value << (adjusted_zeroes & 0xff)) +\n            (0U >> (0x20 - adjusted_zeroes & 0xff)) + (uint)(0x7fffffff < shifted_value);\n    if (shifted_value == 0x80000000) {\n      adjusted_zeroes = adjusted_zeroes & 0xfffffffe;\n    }\n    return adjusted_zeroes;\n  }\n  shifted_value = input_value << (leading_zeroes + 0x18U & 0xff);\n  adjusted_zeroes = base_value + ((input_value >> (0x20 - (leading_zeroes + 0x18U) & 0xff)) - ((int)shifted_value >> 0x1f));\n  if ((shifted_value & 0x7fffffff) == 0) {\n    adjusted_zeroes = adjusted_zeroes & ~(shifted_value >> 0x1f);\n  }\n  return adjusted_zeroes;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081894",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_adjusted_value_00081894"
        },
        "FUN_000845bc": {
            "renaming": {
                "FUN_000845bc": "convert_uint_to_char_000845bc",
                "param_1": "error_code",
                "param_2": "output_char",
                "param_3": "input_uint"
            },
            "code": "\nundefined4 convert_uint_to_char_000845bc(undefined4 *error_code,undefined *output_char,uint input_uint)\n\n{\n  if (output_char == (undefined *)0x0) {\n    return 0;\n  }\n  if (input_uint < 0x100) {\n    *output_char = (char)input_uint;\n    return 1;\n  }\n  *error_code = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000845bc",
            "calling": [
                "FUN_0008456c"
            ],
            "imported": false,
            "current_name": "convert_uint_to_char_000845bc"
        },
        "FUN_00085858": {
            "renaming": {
                "FUN_00085858": "do_nothing_00085858"
            },
            "code": "\nvoid do_nothing_00085858(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00085858",
            "calling": [
                "FUN_00081d7c"
            ],
            "imported": false,
            "current_name": "do_nothing_00085858"
        },
        "FUN_00082504": {
            "renaming": {
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "param_1": "destination",
                "param_2": "fill_byte",
                "param_3": "count",
                "puVar1": "dest_ptr",
                "puVar2": "next_ptr",
                "uVar3": "fill_value",
                "uVar4": "remaining_count",
                "bVar5": "is_zero"
            },
            "code": "\nvoid fillMemoryWithByte_00082504(undefined4 *destination,undefined fill_byte,uint count)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_ptr;\n  undefined4 fill_value;\n  uint remaining_count;\n  bool is_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_zero = count == 0;\n    dest_ptr = destination;\n    count = count - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = fill_byte;\n      if (((uint)destination & 3) == 0) break;\n      is_zero = count == 0;\n      dest_ptr = destination;\n      count = count - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    fill_value = CONCAT22(CONCAT11(fill_byte,fill_byte),CONCAT11(fill_byte,fill_byte));\n    remaining_count = count;\n    dest_ptr = destination;\n    if (0xf < count) {\n      remaining_count = count - 0x10;\n      do {\n        *dest_ptr = fill_value;\n        dest_ptr[1] = fill_value;\n        dest_ptr[2] = fill_value;\n        dest_ptr[3] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_count & 0xfffffff0) + 0x10));\n      count = count & 0xf;\n      destination = destination + ((remaining_count >> 4) + 1) * 4;\n      remaining_count = count;\n      dest_ptr = destination;\n      if (count < 4) goto LAB_00082580;\n    }\n    do {\n      count = count - 4;\n      *destination = fill_value;\n      destination = destination + 1;\n    } while (3 < count);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_count - 4 & 0xfffffffc) + 4);\n    count = remaining_count & 3;\n  }\nLAB_00082580:\n  if (count != 0) {\n    dest_ptr = destination;\n    do {\n      next_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = fill_byte;\n      dest_ptr = next_ptr;\n    } while (next_ptr != (undefined4 *)(count + (int)destination));\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082504",
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "imported": false,
            "current_name": "fill_memory_with_byte_00082504"
        },
        "FUN_000800f4": {
            "renaming": {
                "FUN_000800f4": "initialize_and_return_value_000800f4",
                "param_1": "input_value"
            },
            "code": "\nundefined4 initialize_and_return_value_000800f4(undefined4 input_value)\n\n{\n  if (*PTR_DAT_0008010c == '\\0') {\n    if (DAT_00080110 != 0) {\n      input_value = DAT_00080114;\n    }\n    *PTR_DAT_0008010c = 1;\n  }\n  return input_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000800f4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_return_value_000800f4"
        },
        "FUN_0008378c": {
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "inputData",
                "param_2": "dataBuffer",
                "iVar1": "result1",
                "iVar2": "result2",
                "local_488": "bufferArray",
                "local_480": "bufferSize",
                "local_47c": "filteredValue",
                "local_47a": "shortValue",
                "local_478": "bufferPointer",
                "local_474": "initialSize",
                "local_470": "initialIndex",
                "local_46c": "value1",
                "local_464": "value2",
                "local_424": "value3",
                "auStack_420": "stackBuffer"
            },
            "code": "\nint processData_0008378c(undefined4 inputData,int dataBuffer)\n\n{\n  int result1;\n  int result2;\n  undefined *bufferArray [2];\n  undefined4 bufferSize;\n  ushort filteredValue;\n  undefined2 shortValue;\n  undefined *bufferPointer;\n  undefined4 initialSize;\n  undefined4 initialIndex;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined stackBuffer [1024];\n  \n  value3 = *(undefined4 *)(dataBuffer + 100);\n  value1 = *(undefined4 *)(dataBuffer + 0x1c);\n  shortValue = *(undefined2 *)(dataBuffer + 0xe);\n  value2 = *(undefined4 *)(dataBuffer + 0x24);\n  bufferArray[0] = stackBuffer;\n  filteredValue = *(ushort *)(dataBuffer + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  initialSize = 0x400;\n  initialIndex = 0;\n  bufferPointer = bufferArray[0];\n  result1 = FUNC_00082b38(inputData,bufferArray);\n  if ((-1 < result1) && (result2 = FUN_00083adc(inputData,bufferArray), result2 != 0)) {\n    result1 = -1;\n  }\n  if ((int)((uint)filteredValue << 0x19) < 0) {\n    *(ushort *)(dataBuffer + 0xc) = *(ushort *)(dataBuffer + 0xc) | 0x40;\n  }\n  return result1;\n}\n\n",
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008378c",
            "calling": [
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_0008378c"
        },
        "FUN_00083adc": {
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "input_data",
                "param_2": "processing_parameters",
                "piVar1": "temp_pointer",
                "iVar2": "difference",
                "uVar3": "ushort_value",
                "uVar4": "uint_value",
                "iVar5": "function_result",
                "pcVar6": "function_pointer",
                "unaff_r4": "undefined_variable",
                "iVar7": "current_value"
            },
            "code": "\nundefined4 process_data_00083adc(int *input_data,int *processing_parameters)\n\n{\n  int *temp_pointer;\n  int difference;\n  ushort ushort_value;\n  uint uint_value;\n  int function_result;\n  code *function_pointer;\n  undefined4 undefined_variable;\n  int current_value;\n  \n  if ((input_data != (int *)0x0) && (input_data[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(processing_parameters + 3) == 0) {\n    return 0;\n  }\n  ushort_value = *(ushort *)(processing_parameters + 3);\n  if ((int)((uint)ushort_value << 0x1c) < 0) {\n    current_value = processing_parameters[4];\n    if (current_value == 0) {\n      return 0;\n    }\n    difference = *processing_parameters;\n    if ((ushort_value & 3) == 0) {\n      function_result = processing_parameters[5];\n    }\n    else {\n      function_result = 0;\n    }\n    *processing_parameters = current_value;\n    difference = difference - current_value;\n    processing_parameters[2] = function_result;\n    do {\n      if (difference < 1) {\n        return 0;\n      }\n      function_result = (*(code *)processing_parameters[9])(input_data,processing_parameters[7],current_value,difference,undefined_variable);\n      difference = difference - function_result;\n      current_value = current_value + function_result;\n    } while (0 < function_result);\nLAB_00083a54:\n    *(ushort *)(processing_parameters + 3) = *(ushort *)(processing_parameters + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(processing_parameters + 3) = ushort_value | 0x800;\n  if ((processing_parameters[1] < 1) && (processing_parameters[0xf] < 1)) {\n    return 0;\n  }\n  function_pointer = (code *)processing_parameters[10];\n  if (function_pointer == (code *)0x0) {\n    return 0;\n  }\n  uint_value = (uint)(ushort_value | 0x800);\n  current_value = *input_data;\n  *input_data = 0;\n  if ((ushort_value & 0x1000) == 0) {\n    difference = (*function_pointer)(input_data,processing_parameters[7],uint_value & 0x1000,1);\n    if ((difference == -1) && (function_result = *input_data, function_result != 0)) {\n      if ((function_result == 0x1d) || (function_result == 0x16)) {\n        *input_data = current_value;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    uint_value = (uint)*(ushort *)(processing_parameters + 3);\n    function_pointer = (code *)processing_parameters[10];\n  }\n  else {\n    difference = processing_parameters[0x14];\n  }\n  if (((int)(uint_value << 0x1d) < 0) && (difference = difference - processing_parameters[1], processing_parameters[0xc] != 0)) {\n    difference = difference - processing_parameters[0xf];\n  }\n  difference = (*function_pointer)(input_data,processing_parameters[7],difference,0);\n  if (difference == -1) {\n    function_result = *input_data;\n    if (function_result != 0) {\n      if ((function_result != 0x1d) && (function_result != 0x16)) {\n        *(ushort *)(processing_parameters + 3) = *(ushort *)(processing_parameters + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(processing_parameters + 3) = *(ushort *)(processing_parameters + 3) & 0xf7ff;\n      *processing_parameters = processing_parameters[4];\n      processing_parameters[1] = 0;\n      goto LAB_00083a00;\n    }\n    ushort_value = *(ushort *)(processing_parameters + 3) & 0xf7ff;\n    processing_parameters[1] = 0;\n    *(ushort *)(processing_parameters + 3) = ushort_value;\n    *processing_parameters = processing_parameters[4];\n  }\n  else {\n    ushort_value = *(ushort *)(processing_parameters + 3) & 0xf7ff;\n    *processing_parameters = processing_parameters[4];\n    *(ushort *)(processing_parameters + 3) = ushort_value;\n    processing_parameters[1] = 0;\n  }\n  if ((int)((uint)ushort_value << 0x13) < 0) {\n    processing_parameters[0x14] = difference;\n  }\nLAB_00083a00:\n  temp_pointer = (int *)processing_parameters[0xc];\n  *input_data = current_value;\n  if (temp_pointer == (int *)0x0) {\n    return 0;\n  }\n  if (temp_pointer != processing_parameters + 0x10) {\n    FUN_00083d9c(input_data);\n  }\n  processing_parameters[0xc] = 0;\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083adc",
            "calling": [
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c"
            ],
            "imported": false,
            "current_name": "process_data_00083adc"
        },
        "FUN_000825b0": {
            "renaming": {
                "FUN_000825b0": "allocate_memory_and_copy_000825b0",
                "param_1": "error_code_ptr",
                "param_2": "src_memory_block",
                "param_3": "requested_size",
                "iVar1": "current_block_end",
                "piVar2": "memory_block",
                "uVar3": "previous_block_size",
                "iVar4": "global_var",
                "uVar5": "current_block_size",
                "piVar6": "temp_ptr",
                "uVar7": "adjusted_block_size",
                "uVar8": "aligned_size",
                "piVar9": "new_memory_block",
                "iVar10": "next_block"
            },
            "code": "\nint * allocate_memory_and_copy_000825b0(undefined4 *error_code_ptr,int *src_memory_block,uint requested_size)\n\n{\n  int current_block_end;\n  int *memory_block;\n  uint previous_block_size;\n  int global_var;\n  uint current_block_size;\n  int *temp_ptr;\n  uint adjusted_block_size;\n  uint aligned_size;\n  int *new_memory_block;\n  int next_block;\n  \n  if (src_memory_block == (int *)0x0) {\n    memory_block = (int *)FUN_00081e14(error_code_ptr,requested_size);\n    return memory_block;\n  }\n  do_nothing_00082598();\n  global_var = DAT_0008296c;\n  current_block_size = src_memory_block[-1];\n  adjusted_block_size = current_block_size & 0xfffffffc;\n  memory_block = src_memory_block + -2;\n  if (requested_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = requested_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < requested_size) {\nLAB_0008267c:\n    *error_code_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_block_size < (int)aligned_size) {\n    current_block_end = (int)memory_block + adjusted_block_size;\n    next_block = *(int *)(DAT_0008296c + 8);\n    if (next_block == current_block_end) {\n      previous_block_size = *(uint *)(next_block + 4) & 0xfffffffc;\n      current_block_end = next_block;\n      if ((int)(aligned_size + 0x10) <= (int)(previous_block_size + adjusted_block_size)) {\n        *(uint *)(DAT_0008296c + 8) = (int)memory_block + aligned_size;\n        *(uint *)((int)memory_block + aligned_size + 4) = (previous_block_size + adjusted_block_size) - aligned_size | 1;\n        src_memory_block[-1] = aligned_size | src_memory_block[-1] & 1U;\n        do_nothing_0008259c(error_code_ptr);\n        return src_memory_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(current_block_end + 4) & 0xfffffffe) + current_block_end + 4) & 1) == 0) {\n      previous_block_size = *(uint *)(current_block_end + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(previous_block_size + adjusted_block_size)) {\n        next_block = *(int *)(current_block_end + 0xc);\n        global_var = *(int *)(current_block_end + 8);\n        *(int *)(global_var + 0xc) = next_block;\n        *(int *)(next_block + 8) = global_var;\n        adjusted_block_size = previous_block_size + adjusted_block_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      previous_block_size = 0;\n      current_block_end = 0;\n    }\n    if (-1 < (int)(current_block_size << 0x1f)) {\n      new_memory_block = (int *)((int)memory_block - src_memory_block[-2]);\n      current_block_size = (new_memory_block[1] & 0xfffffffcU) + adjusted_block_size;\n      if (current_block_end != 0) {\n        if (current_block_end == next_block) {\n          if ((int)(aligned_size + 0x10) <= (int)(previous_block_size + current_block_size)) {\n            memory_block = new_memory_block + 2;\n            current_block_end = *memory_block;\n            next_block = new_memory_block[3];\n            adjusted_block_size = adjusted_block_size - 4;\n            *(int *)(current_block_end + 0xc) = next_block;\n            *(int *)(next_block + 8) = current_block_end;\n            if (adjusted_block_size < 0x25) {\n              temp_ptr = memory_block;\n              if (0x13 < adjusted_block_size) {\n                new_memory_block[2] = *src_memory_block;\n                new_memory_block[3] = src_memory_block[1];\n                if (adjusted_block_size < 0x1c) {\n                  src_memory_block = src_memory_block + 2;\n                  temp_ptr = new_memory_block + 4;\n                }\n                else {\n                  new_memory_block[4] = src_memory_block[2];\n                  new_memory_block[5] = src_memory_block[3];\n                  if (adjusted_block_size == 0x24) {\n                    new_memory_block[6] = src_memory_block[4];\n                    temp_ptr = src_memory_block + 5;\n                    src_memory_block = src_memory_block + 6;\n                    new_memory_block[7] = *temp_ptr;\n                    temp_ptr = new_memory_block + 8;\n                  }\n                  else {\n                    src_memory_block = src_memory_block + 4;\n                    temp_ptr = new_memory_block + 6;\n                  }\n                }\n              }\n              *temp_ptr = *src_memory_block;\n              temp_ptr[1] = src_memory_block[1];\n              temp_ptr[2] = src_memory_block[2];\n            }\n            else {\n              FUN_00082438(memory_block,src_memory_block);\n            }\n            *(uint *)(global_var + 8) = (int)new_memory_block + aligned_size;\n            *(uint *)((int)new_memory_block + aligned_size + 4) = (previous_block_size + current_block_size) - aligned_size | 1;\n            new_memory_block[1] = aligned_size | new_memory_block[1] & 1U;\n            do_nothing_0008259c(error_code_ptr);\n            return memory_block;\n          }\n        }\n        else {\n          previous_block_size = previous_block_size + current_block_size;\n          if ((int)aligned_size <= (int)previous_block_size) {\n            next_block = *(int *)(current_block_end + 0xc);\n            global_var = *(int *)(current_block_end + 8);\n            *(int *)(global_var + 0xc) = next_block;\n            *(int *)(next_block + 8) = global_var;\n            temp_ptr = new_memory_block + 2;\n            global_var = *temp_ptr;\n            current_block_end = new_memory_block[3];\n            current_block_size = adjusted_block_size - 4;\n            *(int *)(global_var + 0xc) = current_block_end;\n            *(int *)(current_block_end + 8) = global_var;\n            adjusted_block_size = previous_block_size;\n            if (current_block_size < 0x25) {\n              memory_block = temp_ptr;\n              if (0x13 < current_block_size) {\n                new_memory_block[2] = *src_memory_block;\n                new_memory_block[3] = src_memory_block[1];\n                if (current_block_size < 0x1c) {\n                  src_memory_block = src_memory_block + 2;\n                  memory_block = new_memory_block + 4;\n                }\n                else {\n                  new_memory_block[4] = src_memory_block[2];\n                  new_memory_block[5] = src_memory_block[3];\n                  if (current_block_size == 0x24) {\n                    new_memory_block[6] = src_memory_block[4];\n                    memory_block = src_memory_block + 5;\n                    src_memory_block = src_memory_block + 6;\n                    new_memory_block[7] = *memory_block;\n                    memory_block = new_memory_block + 8;\n                  }\n                  else {\n                    src_memory_block = src_memory_block + 4;\n                    memory_block = new_memory_block + 6;\n                  }\n                }\n              }\n              *memory_block = *src_memory_block;\n              memory_block[1] = src_memory_block[1];\n              memory_block[2] = src_memory_block[2];\n              current_block_size = new_memory_block[1];\n              memory_block = new_memory_block;\n              src_memory_block = temp_ptr;\n            }\n            else {\n              FUN_00082438(temp_ptr,src_memory_block);\n              current_block_size = new_memory_block[1];\n              memory_block = new_memory_block;\n              src_memory_block = temp_ptr;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)current_block_size) {\n        temp_ptr = new_memory_block + 2;\n        global_var = *temp_ptr;\n        current_block_end = new_memory_block[3];\n        previous_block_size = adjusted_block_size - 4;\n        *(int *)(global_var + 0xc) = current_block_end;\n        *(int *)(current_block_end + 8) = global_var;\n        adjusted_block_size = current_block_size;\n        if (previous_block_size < 0x25) {\n          memory_block = temp_ptr;\n          if (0x13 < previous_block_size) {\n            new_memory_block[2] = *src_memory_block;\n            new_memory_block[3] = src_memory_block[1];\n            if (previous_block_size < 0x1c) {\n              src_memory_block = src_memory_block + 2;\n              memory_block = new_memory_block + 4;\n            }\n            else {\n              new_memory_block[4] = src_memory_block[2];\n              new_memory_block[5] = src_memory_block[3];\n              if (previous_block_size == 0x24) {\n                new_memory_block[6] = src_memory_block[4];\n                memory_block = src_memory_block + 5;\n                src_memory_block = src_memory_block + 6;\n                new_memory_block[7] = *memory_block;\n                memory_block = new_memory_block + 8;\n              }\n              else {\n                src_memory_block = src_memory_block + 4;\n                memory_block = new_memory_block + 6;\n              }\n            }\n          }\n          *memory_block = *src_memory_block;\n          memory_block[1] = src_memory_block[1];\n          memory_block[2] = src_memory_block[2];\n          current_block_size = new_memory_block[1];\n          memory_block = new_memory_block;\n          src_memory_block = temp_ptr;\n        }\n        else {\n          FUN_00082438(temp_ptr,src_memory_block);\n          current_block_size = new_memory_block[1];\n          memory_block = new_memory_block;\n          src_memory_block = temp_ptr;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    new_memory_block = (int *)FUN_00081e14(error_code_ptr,requested_size);\n    if (new_memory_block == (int *)0x0) goto LAB_000826a4;\n    current_block_size = src_memory_block[-1];\n    if (new_memory_block + -2 != (int *)((current_block_size & 0xfffffffe) + (int)memory_block)) {\n      adjusted_block_size = adjusted_block_size - 4;\n      if (adjusted_block_size < 0x25) {\n        memory_block = src_memory_block;\n        temp_ptr = new_memory_block;\n        if (0x13 < adjusted_block_size) {\n          *new_memory_block = *src_memory_block;\n          new_memory_block[1] = src_memory_block[1];\n          if (adjusted_block_size < 0x1c) {\n            memory_block = src_memory_block + 2;\n            temp_ptr = new_memory_block + 2;\n          }\n          else {\n            new_memory_block[2] = src_memory_block[2];\n            new_memory_block[3] = src_memory_block[3];\n            if (adjusted_block_size == 0x24) {\n              new_memory_block[4] = src_memory_block[4];\n              new_memory_block[5] = src_memory_block[5];\n              memory_block = src_memory_block + 6;\n              temp_ptr = new_memory_block + 6;\n            }\n            else {\n              memory_block = src_memory_block + 4;\n              temp_ptr = new_memory_block + 4;\n            }\n          }\n        }\n        *temp_ptr = *memory_block;\n        temp_ptr[1] = memory_block[1];\n        temp_ptr[2] = memory_block[2];\n      }\n      else {\n        FUN_00082438(new_memory_block,src_memory_block);\n      }\n      FUN_00083d9c(error_code_ptr,src_memory_block);\n      goto LAB_000826a4;\n    }\n    adjusted_block_size = adjusted_block_size + (new_memory_block[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  previous_block_size = adjusted_block_size - aligned_size;\n  new_memory_block = src_memory_block;\n  if (previous_block_size < 0x10) {\n    memory_block[1] = current_block_size & 1 | adjusted_block_size;\n    *(uint *)((int)memory_block + adjusted_block_size + 4) = *(uint *)((int)memory_block + adjusted_block_size + 4) | 1;\n  }\n  else {\n    memory_block[1] = current_block_size & 1 | aligned_size;\n    *(uint *)((int)memory_block + aligned_size + 4) = previous_block_size | 1;\n    *(uint *)((int)memory_block + previous_block_size + aligned_size + 4) = *(uint *)((int)memory_block + previous_block_size + aligned_size + 4) | 1;\n    FUN_00083d9c(error_code_ptr,(int)memory_block + aligned_size + 8);\n  }\nLAB_000826a4:\n  do_nothing_0008259c(error_code_ptr);\n  return new_memory_block;\n}\n\n",
            "called": [
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000825b0",
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_copy_000825b0"
        },
        "FUN_000803d4": {
            "renaming": {
                "FUN_000803d4": "check_byte_and_update_000803d4",
                "param_1": "input_struct",
                "iVar1": "index"
            },
            "code": "\nundefined4 check_byte_and_update_000803d4(int input_struct)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input_struct + 10) << 0x18) < 0) {\n    *(short *)(input_struct + 0x54) = *(short *)(input_struct + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if (PTR_DAT_0008040c[index] == *(byte *)(input_struct + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input_struct + 0x54) = *(short *)(input_struct + 0x54) + 1;\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000803d4",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "check_byte_and_update_000803d4"
        },
        "FUN_0008043e": {
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data_ptr",
                "cVar1": "resultChar",
                "uVar2": "tempUint",
                "piVar3": "thresholdPtr",
                "iVar4": "tempInt",
                "unaff_r6": "maskedUint"
            },
            "code": "\nint processData_0008043e(int **data_ptr)\n\n{\n  char resultChar;\n  uint tempUint;\n  int *thresholdPtr;\n  int tempInt;\n  uint maskedUint;\n  \n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    tempUint = (**(code **)(**data_ptr + 8))();\n    maskedUint = tempUint & 0xff;\n  }\n  thresholdPtr = (int *)thunk_FUNC_00081714();\n  if (data_ptr[0x17] < thresholdPtr) {\n    *(undefined *)(data_ptr + 2) = 0xff;\n    *(undefined *)((int)data_ptr + 7) = 0;\n    *(short *)(data_ptr + 0x15) = *(short *)(data_ptr + 0x15) + 1;\n  }\n  else if (7 < maskedUint) {\n    FUN_000801b0(data_ptr);\n    tempInt = FUN_000803d4(data_ptr);\n    if (tempInt == 0) {\n      if (*(byte *)((int)data_ptr + 10) - 3 < 2) {\n        FUN_00080410(data_ptr);\n      }\n      *(undefined *)((int)data_ptr + 7) = 0;\n      resultChar = *(char *)((int)data_ptr + 0x49);\n    }\n    else {\n      *(undefined *)((int)data_ptr + 7) = 0;\n      resultChar = (char)tempInt;\n    }\n    goto LAB_000804a2;\n  }\n  resultChar = '\\0';\nLAB_000804a2:\n  return (int)resultChar;\n}\n\n",
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008043e",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "process_data_0008043e"
        },
        "FUN_0008160c": {
            "renaming": {
                "FUN_0008160c": "reset_array_values_0008160c",
                "param_1": "arrayPtr"
            },
            "code": "\nvoid resetArrayValues_0008160c(int *arrayPtr)\n\n{\n  if (*arrayPtr != 0) {\n    FUN_00081e04();\n  }\n  *arrayPtr = 0;\n  arrayPtr[2] = 0;\n  arrayPtr[1] = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_00081e04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008160c",
            "calling": [
                "FUN_0008165c"
            ],
            "imported": false,
            "current_name": "reset_array_values_0008160c"
        },
        "FUN_00080e18": {
            "renaming": {
                "FUN_00080e18": "update_bit_flags_00080e18",
                "param_1": "input_value",
                "uVar1": "bit_mask"
            },
            "code": "\nundefined4 update_bit_flags_00080e18(uint input_value)\n\n{\n  uint bit_mask;\n  \n  if (input_value < 0x2d) {\n    if (input_value < 0x20) {\n      bit_mask = 1 << (input_value & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x18)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x10) = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (input_value - 0x20 & 0xff);\n      if ((bit_mask & *(uint *)(DAT_00080e58 + 0x108)) != bit_mask) {\n        *(uint *)(DAT_00080e58 + 0x100) = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e18",
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "update_bit_flags_00080e18"
        },
        "FUN_00081184": {
            "renaming": {
                "FUN_00081184": "return_zero_00081184"
            },
            "code": "\nundefined4 returnZero_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081184",
            "calling": [],
            "imported": false,
            "current_name": "return_zero_00081184"
        },
        "FUN_00084298": {
            "renaming": {
                "FUN_00084298": "get_data_value_00084298"
            },
            "code": "\nundefined4 get_data_value_00084298(void)\n\n{\n  return *DAT_000842a0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084298",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "get_data_value_00084298"
        },
        "FUN_00081066": {
            "renaming": {
                "FUN_00081066": "set_undefined_value_00081066",
                "param_1": "input_value"
            },
            "code": "\nvoid set_undefined_value_00081066(int input_value)\n\n{\n  *(undefined4 *)(input_value + 0x14) = 0xffff;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081066",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_undefined_value_00081066"
        },
        "FUN_00081cd0": {
            "renaming": {
                "FUN_00081cd0": "calculate_result_00081cd0",
                "param_1": "input_value",
                "uVar1": "temp_result",
                "uVar2": "shift_amount"
            },
            "code": "\nuint calculate_result_00081cd0(uint input_value)\n\n{\n  uint temp_result;\n  uint shift_amount;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  temp_result = (input_value << 1) >> 0x18;\n  shift_amount = 0x9e - temp_result;\n  if (temp_result < 0x9f && shift_amount != 0) {\n    temp_result = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      temp_result = -temp_result;\n    }\n    return temp_result;\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081cd0",
            "calling": [
                "FUN_000805d0"
            ],
            "imported": false,
            "current_name": "calculate_result_00081cd0"
        },
        "FUN_00081df4": {
            "renaming": {
                "FUN_00081df4": "execute_function_00081df4",
                "param_1": "input_parameter"
            },
            "code": "\nvoid execute_function_00081df4(undefined4 input_parameter)\n\n{\n  FUN_00081e14(*DAT_00081e00,input_parameter);\n  return;\n}\n\n",
            "called": [
                "FUN_00081e14"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081df4",
            "calling": [
                "FUN_00083974"
            ],
            "imported": false,
            "current_name": "execute_function_00081df4"
        },
        "FUN_00080410": {
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "input_data",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "output_data",
                "uVar1": "processed_value",
                "iVar2": "current_element",
                "bVar3": "index",
                "uVar4": "uint_index",
                "iVar5": "output_offset"
            },
            "code": "\nvoid processData_00080410(int input_data,undefined4 unused_param_2,undefined4 unused_param_3,undefined4 output_data)\n\n{\n  undefined2 processed_value;\n  int current_element;\n  byte index;\n  uint uint_index;\n  int output_offset;\n  \n  index = 0;\n  while( true ) {\n    uint_index = (uint)index;\n    index = index + 1;\n    if (*(byte *)(input_data + 0xb) >> 1 <= uint_index) break;\n    current_element = (uint_index * 2 + 3 & 0xff) + input_data;\n    output_offset = *(int *)(input_data + 0x4c);\n    processed_value = FUN_000815f8(*(undefined *)(current_element + 9),*(undefined *)(current_element + 10),current_element,\n                         *(byte *)(input_data + 0xb),output_data);\n    *(undefined2 *)(output_offset + uint_index * 2) = processed_value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000815f8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080410",
            "calling": [
                "FUN_0008043e"
            ],
            "imported": false,
            "current_name": "process_data_00080410"
        },
        "FUN_00080da0": {
            "renaming": {
                "FUN_00080da0": "process_parameters_00080da0",
                "param_1": "baseAddress",
                "param_2": "operationType",
                "param_3": "inputValue",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "code": "\nundefined4 processParameters_00080da0(int baseAddress,int operationType,undefined4 inputValue,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(operationType) {\n  case 1:\n  case 2:\n    (*DAT_00080df8)(baseAddress,operationType,inputValue);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(baseAddress + 0x44) = inputValue;\n    if (isNegative) {\n      *(undefined4 *)(baseAddress + 100) = inputValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(baseAddress + 0x60) = inputValue;\n    }\n    break;\n  case 3:\n    (*DAT_00080dfc)(baseAddress,inputValue,flag,DAT_00080dfc,baseAddress);\n    break;\n  case 4:\n  case 5:\n    (*DAT_00080e00)(baseAddress,inputValue,operationType == 5,(flag << 0x1d) >> 0x1f,flag & 1,operationType,\n                    inputValue);\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00080d7a",
                "FUN_00080d54",
                "FUN_00080d2e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080da0",
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "process_parameters_00080da0"
        },
        "FUN_00080258": {
            "renaming": {
                "FUN_00080258": "process_data_00080258",
                "param_1": "data_ptr",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "bVar1": "byte_value",
                "uVar2": "ushort_value",
                "iVar3": "int_result",
                "uVar4": "uint_value"
            },
            "code": "\nvoid processData_00080258(int **data_ptr,undefined4 unused_param_2,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  byte byte_value;\n  undefined2 ushort_value;\n  int int_result;\n  uint uint_value;\n  \n  byte_value = *(byte *)((int)data_ptr + 0x49);\n  uint_value = (uint)byte_value;\n  ushort_value = FUN_0008021c(data_ptr,uint_value,unused_param_3,unused_param_4,unused_param_4);\n  *(char *)((int)data_ptr + uint_value + 9) = (char)((ushort)ushort_value >> 8);\n  *(char *)((int)data_ptr + (uint_value + 1 & 0xff) + 9) = (char)ushort_value;\n  *(byte *)((int)data_ptr + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    FUN_00081318(*(byte *)((int)data_ptr + 6),1);\n  }\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    (**(code **)(**data_ptr + 4))(*data_ptr,(int)data_ptr + 9,*(undefined *)((int)data_ptr + 0x49));\n  }\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    FUN_00081318(*(byte *)((int)data_ptr + 6),0);\n  }\n  if (*(byte *)((int)data_ptr + 5) < 4) {\n    do {\n      int_result = (**(code **)(**data_ptr + 0xc))();\n    } while (-1 < int_result);\n  }\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  int_result = thunk_FUNC_00081714();\n  data_ptr[0x17] = (int *)(int_result + (uint)*(ushort *)((int)data_ptr + 0x56));\n  *(short *)((int)data_ptr + 0x52) = *(short *)((int)data_ptr + 0x52) + 1;\n  return;\n}\n\n",
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080258",
            "calling": [
                "FUN_000802da"
            ],
            "imported": false,
            "current_name": "process_data_00080258"
        },
        "FUN_00081622": {
            "renaming": {
                "FUN_00081622": "update_parameters_00081622",
                "param_1": "parameter_array",
                "param_2": "offset",
                "param_3": "additional_param_1",
                "param_4": "additional_param_2",
                "iVar1": "result"
            },
            "code": "\nint update_parameters_00081622(int *parameter_array,int offset,undefined4 additional_param_1,undefined4 additional_param_2)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*parameter_array,offset + 1,additional_param_1,additional_param_2,additional_param_2);\n  if (result != 0) {\n    *parameter_array = result;\n    parameter_array[1] = offset;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_000825a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081622",
            "calling": [
                "FUN_0008163a"
            ],
            "imported": false,
            "current_name": "update_parameters_00081622"
        },
        "FUN_00082438": {
            "renaming": {
                "FUN_00082438": "memory_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "remaining_bytes",
                "puVar6": "reverse_ptr",
                "uVar7": "loop_counter"
            },
            "code": "\nvoid memory_copy_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_bytes;\n  undefined *reverse_ptr;\n  uint loop_counter;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    reverse_ptr = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        reverse_ptr = reverse_ptr + -1;\n        *reverse_ptr = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    loop_counter = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remaining_bytes = loop_counter;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < loop_counter) {\n      do {\n        remaining_bytes = remaining_bytes - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remaining_bytes);\n      index = (loop_counter - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      loop_counter = size & 3;\n    }\n    size = loop_counter;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082438",
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "imported": false,
            "current_name": "memory_copy_00082438"
        },
        "FUN_00081508": {
            "renaming": {
                "FUN_00081508": "update_parameters_00081508",
                "param_1": "inputData",
                "param_2": "divider",
                "param_3": "additionalParam",
                "puVar1": "ptrVar1",
                "iVar2": "intVar2",
                "puVar3": "ptrVar3"
            },
            "code": "\nvoid updateParameters_00081508(int inputData,uint divider,undefined4 additionalParam)\n\n{\n  uint *ptrVar1;\n  int intVar2;\n  undefined4 *ptrVar3;\n  \n  FUN_00080e18(*(undefined4 *)(inputData + 0x20));\n  ptrVar3 = *(undefined4 **)(inputData + 0x18);\n  ptrVar3[0x48] = 0x202;\n  *ptrVar3 = 0xac;\n  ptrVar1 = DAT_00081570;\n  ptrVar3[1] = additionalParam;\n  ptrVar3[8] = *ptrVar1 / divider >> 4;\n  ptrVar3[3] = 0xffffffff;\n  ptrVar3[2] = 0x61;\n  *(int *)(DAT_00081574 + ((uint)(int)(char)*(byte *)(inputData + 0x1c) >> 5) * 4) =\n       1 << (uint)(*(byte *)(inputData + 0x1c) & 0x1f);\n  intVar2 = *(int *)(inputData + 0x10);\n  *(undefined4 *)(intVar2 + 0x84) = 0;\n  *(undefined4 *)(intVar2 + 0x80) = 0;\n  intVar2 = *(int *)(inputData + 0x14);\n  *(undefined4 *)(intVar2 + 0x84) = 0;\n  *(undefined4 *)(intVar2 + 0x80) = 0;\n  *ptrVar3 = 0x50;\n  return;\n}\n\n",
            "called": [
                "FUN_00080e18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00081508",
            "calling": [],
            "imported": false,
            "current_name": "update_parameters_00081508"
        },
        "FUN_00083808": {
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4"
            },
            "code": "\nundefined4 processData_00083808(undefined4 *output,int *input)\n\n{\n  uint tempVar1;\n  int tempVar2;\n  uint tempVar3;\n  ushort tempVar4;\n  \n  if ((*DAT_000838c8 != 0) && (*(int *)(*DAT_000838c8 + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  tempVar4 = *(ushort *)(input + 3);\n  tempVar3 = (uint)tempVar4;\n  if ((int)(tempVar3 << 0x1c) < 0) {\n    tempVar2 = input[4];\n  }\n  else {\n    if (-1 < (int)(tempVar3 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = tempVar4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempVar3 << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          FUN_00083d9c(output);\n          tempVar4 = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      tempVar2 = input[4];\n      tempVar4 = tempVar4 & 0xffdb;\n      *input = tempVar2;\n      input[1] = 0;\n    }\n    else {\n      tempVar2 = input[4];\n    }\n    *(ushort *)(input + 3) = tempVar4 | 8;\n    tempVar3 = (uint)(tempVar4 | 8);\n  }\n  if ((tempVar2 == 0) && ((tempVar3 & 0x280) != 0x200)) {\n    FUN_000842a4(output,input);\n    tempVar3 = (uint)*(ushort *)(input + 3);\n    tempVar2 = input[4];\n  }\n  tempVar1 = tempVar3 & 1;\n  if (tempVar1 == 0) {\n    if (-1 < (int)(tempVar3 << 0x1e)) {\n      tempVar1 = input[5];\n    }\n    input[2] = tempVar1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00083b14",
                "FUN_000842a4",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083808",
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_00082b38"
            ],
            "imported": false,
            "current_name": "process_data_00083808"
        },
        "FUN_000847e0": {
            "renaming": {
                "FUN_000847e0": "calculate_quotient_remainder_000847e0",
                "param_1": "numerator_high",
                "param_2": "numerator_low",
                "param_3": "denominator_high",
                "param_4": "denominator_low",
                "lVar1": "long_product",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "temp_var8",
                "uVar9": "sign_mask",
                "uVar10": "remainder",
                "uVar11": "temp_var11",
                "uVar12": "temp_var12",
                "bVar13": "carry_flag"
            },
            "code": "\nundefined8 calculate_quotient_remainder_000847e0(uint numerator_high,uint numerator_low,uint denominator_high,uint denominator_low)\n\n{\n  longlong long_product;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint sign_mask;\n  uint remainder;\n  uint temp_var11;\n  uint temp_var12;\n  bool carry_flag;\n  \n  if ((int)numerator_low < 0) {\n    carry_flag = numerator_high != 0;\n    numerator_high = -numerator_high;\n    numerator_low = -numerator_low - (uint)carry_flag;\n    sign_mask = 0xffffffff;\n  }\n  else {\n    sign_mask = 0;\n  }\n  if ((int)denominator_low < 0) {\n    sign_mask = ~sign_mask;\n    carry_flag = denominator_high != 0;\n    denominator_high = -denominator_high;\n    denominator_low = -denominator_low - (uint)carry_flag;\n  }\n  if (denominator_low == 0) {\n    if (numerator_low < denominator_high) {\n      temp_var5 = count_leading_zeroes(denominator_high);\n      if (temp_var5 != 0) {\n        temp_var2 = numerator_high >> (0x20 - temp_var5 & 0xff);\n        denominator_high = denominator_high << (temp_var5 & 0xff);\n        numerator_high = numerator_high << (temp_var5 & 0xff);\n        numerator_low = numerator_low << (temp_var5 & 0xff) | temp_var2;\n      }\n      temp_var2 = denominator_high >> 0x10;\n      temp_var3 = numerator_low / temp_var2;\n      temp_var6 = (denominator_high & 0xffff) * temp_var3;\n      remainder = numerator_high >> 0x10 | (numerator_low - temp_var2 * temp_var3) * 0x10000;\n      temp_var5 = temp_var3;\n      if (remainder <= temp_var6 && temp_var6 - remainder != 0) {\n        carry_flag = CARRY4(remainder,denominator_high);\n        remainder = remainder + denominator_high;\n        temp_var5 = temp_var3 - 1;\n        if ((carry_flag == false) && (remainder <= temp_var6 && temp_var6 - remainder != 0)) {\n          temp_var5 = temp_var3 - 2;\n          remainder = remainder + denominator_high;\n        }\n      }\n      temp_var7 = (remainder - temp_var6) / temp_var2;\n      temp_var3 = (denominator_high & 0xffff) * temp_var7;\n      temp_var6 = numerator_high & 0xffff | ((remainder - temp_var6) - temp_var2 * temp_var7) * 0x10000;\n      temp_var2 = temp_var7;\n      if (temp_var6 <= temp_var3 && temp_var3 - temp_var6 != 0) {\n        temp_var2 = temp_var7 - 1;\n        if ((CARRY4(temp_var6,denominator_high) == false) &&\n           (temp_var6 + denominator_high <= temp_var3 && temp_var3 - (temp_var6 + denominator_high) != 0)) {\n          temp_var2 = temp_var7 - 2;\n        }\n      }\n      temp_var3 = temp_var2 | temp_var5 << 0x10;\n      remainder = 0;\n    }\n    else {\n      if (denominator_high == 0) {\n        denominator_high = 1 / 0;\n      }\n      temp_var5 = count_leading_zeroes(denominator_high);\n      if (temp_var5 == 0) {\n        numerator_low = numerator_low - denominator_high;\n        temp_var2 = denominator_high >> 0x10;\n        temp_var12 = denominator_high & 0xffff;\n        remainder = 1;\n      }\n      else {\n        denominator_high = denominator_high << (temp_var5 & 0xff);\n        temp_var3 = numerator_low >> (0x20 - temp_var5 & 0xff);\n        temp_var2 = denominator_high >> 0x10;\n        remainder = temp_var3 / temp_var2;\n        temp_var12 = denominator_high & 0xffff;\n        temp_var6 = temp_var12 * remainder;\n        temp_var7 = numerator_high >> (0x20 - temp_var5 & 0xff) | numerator_low << (temp_var5 & 0xff);\n        temp_var3 = temp_var7 >> 0x10 | (temp_var3 - temp_var2 * remainder) * 0x10000;\n        numerator_high = numerator_high << (temp_var5 & 0xff);\n        temp_var5 = remainder;\n        if (temp_var3 <= temp_var6 && temp_var6 - temp_var3 != 0) {\n          carry_flag = CARRY4(temp_var3,denominator_high);\n          temp_var3 = temp_var3 + denominator_high;\n          temp_var5 = remainder - 1;\n          if ((carry_flag == false) && (temp_var3 <= temp_var6 && temp_var6 - temp_var3 != 0)) {\n            temp_var5 = remainder - 2;\n            temp_var3 = temp_var3 + denominator_high;\n          }\n        }\n        temp_var8 = (temp_var3 - temp_var6) / temp_var2;\n        temp_var4 = temp_var12 * temp_var8;\n        numerator_low = temp_var7 & 0xffff | ((temp_var3 - temp_var6) - temp_var2 * temp_var8) * 0x10000;\n        remainder = temp_var8;\n        if (numerator_low <= temp_var4 && temp_var4 - numerator_low != 0) {\n          carry_flag = CARRY4(numerator_low,denominator_high);\n          numerator_low = numerator_low + denominator_high;\n          remainder = temp_var8 - 1;\n          if ((carry_flag == false) && (numerator_low <= temp_var4 && temp_var4 - numerator_low != 0)) {\n            remainder = temp_var8 - 2;\n            numerator_low = numerator_low + denominator_high;\n          }\n        }\n        numerator_low = numerator_low - temp_var4;\n        remainder = remainder | temp_var5 << 0x10;\n      }\n      temp_var3 = numerator_low / temp_var2;\n      temp_var6 = temp_var12 * temp_var3;\n      temp_var7 = numerator_high >> 0x10 | (numerator_low - temp_var2 * temp_var3) * 0x10000;\n      temp_var5 = temp_var3;\n      if (temp_var7 <= temp_var6 && temp_var6 - temp_var7 != 0) {\n        carry_flag = CARRY4(temp_var7,denominator_high);\n        temp_var7 = temp_var7 + denominator_high;\n        temp_var5 = temp_var3 - 1;\n        if ((carry_flag == false) && (temp_var7 <= temp_var6 && temp_var6 - temp_var7 != 0)) {\n          temp_var5 = temp_var3 - 2;\n          temp_var7 = temp_var7 + denominator_high;\n        }\n      }\n      temp_var4 = (temp_var7 - temp_var6) / temp_var2;\n      temp_var12 = temp_var12 * temp_var4;\n      temp_var3 = numerator_high & 0xffff | ((temp_var7 - temp_var6) - temp_var2 * temp_var4) * 0x10000;\n      temp_var2 = temp_var4;\n      if (temp_var3 <= temp_var12 && temp_var12 - temp_var3 != 0) {\n        temp_var2 = temp_var4 - 1;\n        if ((CARRY4(temp_var3,denominator_high) == false) &&\n           (temp_var3 + denominator_high <= temp_var12 && temp_var12 - (temp_var3 + denominator_high) != 0)) {\n          temp_var2 = temp_var4 - 2;\n        }\n      }\n      temp_var3 = temp_var2 | temp_var5 << 0x10;\n    }\n  }\n  else if (numerator_low < denominator_low) {\n    temp_var3 = 0;\n    remainder = 0;\n  }\n  else {\n    temp_var5 = count_leading_zeroes(denominator_low);\n    if (temp_var5 == 0) {\n      if ((denominator_low < numerator_low) || (temp_var3 = temp_var5, remainder = temp_var5, denominator_high <= numerator_high)) {\n        temp_var3 = 1;\n        remainder = 0;\n      }\n    }\n    else {\n      temp_var2 = 0x20 - temp_var5;\n      temp_var6 = numerator_low >> (temp_var2 & 0xff);\n      temp_var4 = denominator_high >> (temp_var2 & 0xff) | denominator_low << (temp_var5 & 0xff);\n      temp_var7 = temp_var4 >> 0x10;\n      temp_var3 = temp_var6 / temp_var7;\n      temp_var12 = (temp_var4 & 0xffff) * temp_var3;\n      remainder = numerator_low << (temp_var5 & 0xff) | numerator_high >> (temp_var2 & 0xff);\n      temp_var6 = remainder >> 0x10 | (temp_var6 - temp_var7 * temp_var3) * 0x10000;\n      temp_var2 = temp_var3;\n      if (temp_var6 <= temp_var12 && temp_var12 - temp_var6 != 0) {\n        carry_flag = CARRY4(temp_var6,temp_var4);\n        temp_var6 = temp_var6 + temp_var4;\n        temp_var2 = temp_var3 - 1;\n        if ((carry_flag == false) && (temp_var6 <= temp_var12 && temp_var12 - temp_var6 != 0)) {\n          temp_var2 = temp_var3 - 2;\n          temp_var6 = temp_var6 + temp_var4;\n        }\n      }\n      temp_var8 = (temp_var6 - temp_var12) / temp_var7;\n      temp_var11 = (temp_var4 & 0xffff) * temp_var8;\n      temp_var6 = remainder & 0xffff | ((temp_var6 - temp_var12) - temp_var7 * temp_var8) * 0x10000;\n      temp_var3 = temp_var8;\n      if (temp_var6 <= temp_var11 && temp_var11 - temp_var6 != 0) {\n        carry_flag = CARRY4(temp_var6,temp_var4);\n        temp_var6 = temp_var6 + temp_var4;\n        temp_var3 = temp_var8 - 1;\n        if ((carry_flag == false) && (temp_var6 <= temp_var11 && temp_var11 - temp_var6 != 0)) {\n          temp_var3 = temp_var8 - 2;\n          temp_var6 = temp_var6 + temp_var4;\n        }\n      }\n      temp_var3 = temp_var3 | temp_var2 << 0x10;\n      long_product = (ulonglong)temp_var3 * (ulonglong)(denominator_high << (temp_var5 & 0xff));\n      temp_var2 = (uint)((ulonglong)long_product >> 0x20);\n      if ((temp_var6 - temp_var11 < temp_var2) ||\n         ((remainder = 0, temp_var6 - temp_var11 == temp_var2 && (numerator_high << (temp_var5 & 0xff) < (uint)long_product)))) {\n        temp_var3 = temp_var3 - 1;\n        remainder = 0;\n      }\n    }\n  }\n  if (sign_mask != 0) {\n    carry_flag = temp_var3 != 0;\n    temp_var3 = -temp_var3;\n    remainder = -remainder - (uint)carry_flag;\n  }\n  return CONCAT44(remainder,temp_var3);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000847e0",
            "calling": [
                "FUN_0008477c"
            ],
            "imported": false,
            "current_name": "calculate_quotient_remainder_000847e0"
        },
        "FUN_0008105c": {
            "renaming": {
                "FUN_0008105c": "set_bit_in_integer_0008105c",
                "param_1": "integer_ptr",
                "param_2": "bit_position"
            },
            "code": "\nvoid set_bit_in_integer_0008105c(int integer_ptr,uint bit_position)\n\n{\n  *(int *)(integer_ptr + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008105c",
            "calling": [
                "FUN_00081210"
            ],
            "imported": false,
            "current_name": "set_bit_in_integer_0008105c"
        },
        "FUN_0008456c": {
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "output_data",
                "param_2": "input_data",
                "param_3": "input_data_size",
                "param_4": "status_code",
                "uVar1": "func_result",
                "iVar2": "call_result",
                "pcVar3": "function_pointer",
                "auStack_24": "buffer"
            },
            "code": "\nvoid process_data_0008456c(undefined4 *output_data,int input_data,undefined4 input_data_size,undefined4 *status_code)\n\n{\n  undefined4 func_result;\n  int call_result;\n  code *function_pointer;\n  undefined buffer [12];\n  \n  if (input_data == 0) {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    func_result = FUN_00084290();\n    call_result = (*function_pointer)(output_data,buffer,0,func_result,status_code);\n  }\n  else {\n    function_pointer = *(code **)PTR_DAT_000845b8;\n    func_result = FUN_00084290();\n    call_result = (*function_pointer)(output_data,input_data,input_data_size,func_result,status_code);\n  }\n  if (call_result == -1) {\n    *status_code = 0;\n    *output_data = 0x8a;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008456c",
            "calling": [
                "FUN_00083c40"
            ],
            "imported": false,
            "current_name": "process_data_0008456c"
        },
        "FUN_00080aba": {
            "renaming": {
                "FUN_00080aba": "do_nothing_00080aba"
            },
            "code": "\nvoid do_nothing_00080aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080aba",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080aba"
        },
        "FUN_00080abc": {
            "renaming": {
                "FUN_00080abc": "do_nothing_00080abc"
            },
            "code": "\nvoid do_nothing_00080abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080abc",
            "calling": [
                "FUN_00080ce0"
            ],
            "imported": false,
            "current_name": "do_nothing_00080abc"
        },
        "FUN_000811b4": {
            "renaming": {
                "FUN_000811b4": "set_memory_size_000811b4",
                "param_1": "memory_id",
                "param_2": "memory_ptr"
            },
            "code": "\nundefined4 set_memory_size_000811b4(undefined4 memory_id,int memory_ptr)\n\n{\n  *(undefined4 *)(memory_ptr + 4) = 0x2000;\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811b4",
            "calling": [
                "FUN_000846b4"
            ],
            "imported": false,
            "current_name": "set_memory_size_000811b4"
        },
        "FUN_000816d4": {
            "renaming": {
                "FUN_000816d4": "FUNC_000816d4"
            },
            "code": "\nvoid FUNC_000816d4(void)\n\n{\n  *(undefined4 *)(DAT_000816dc + 4) = 0x8000;\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x000816d4",
            "calling": [
                "FUN_000816a8"
            ],
            "imported": false,
            "current_name": "FUNC_000816d4"
        },
        "FUN_00083f34": {
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "error_code_ptr",
                "param_2": "buffer_info",
                "param_3": "data_chunks",
                "iVar1": "result",
                "uVar2": "temp_var",
                "uVar3": "buffer_flags",
                "uVar4": "buffer_flags_uint",
                "puVar5": "current_chunk_ptr",
                "puVar6": "data_chunk_ptr",
                "uVar7": "chunk_size",
                "uVar8": "remaining_size",
                "uVar9": "processed_size",
                "uVar10": "chunk_to_process",
                "uVar11": "adjusted_chunk_size",
                "local_2c": "chunk_processed"
            },
            "code": "\nundefined4 process_data_00083f34(undefined4 *error_code_ptr,uint *buffer_info,uint **data_chunks)\n\n{\n  int result;\n  uint temp_var;\n  ushort buffer_flags;\n  uint buffer_flags_uint;\n  uint *current_chunk_ptr;\n  uint *data_chunk_ptr;\n  uint chunk_size;\n  uint remaining_size;\n  uint processed_size;\n  uint chunk_to_process;\n  uint adjusted_chunk_size;\n  uint chunk_processed;\n  \n  if (data_chunks[2] != (uint *)0x0) {\n    buffer_flags = *(ushort *)(buffer_info + 3);\n    buffer_flags_uint = (uint)buffer_flags;\n    if (((int)(buffer_flags_uint << 0x1c) < 0) && (buffer_info[4] != 0)) {\n      data_chunk_ptr = *data_chunks;\n      temp_var = DAT_00084244;\n    }\n    else {\n      result = FUN_00083808(error_code_ptr,buffer_info);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      buffer_flags = *(ushort *)(buffer_info + 3);\n      buffer_flags_uint = (uint)buffer_flags;\n      data_chunk_ptr = *data_chunks;\n      temp_var = DAT_00084244;\n    }\n    DAT_00084244 = temp_var;\n    if ((buffer_flags & 2) == 0) {\n      temp_var = buffer_flags_uint & 2;\n      remaining_size = buffer_flags_uint & 1;\n      chunk_size = temp_var;\n      chunk_to_process = temp_var;\n      chunk_processed = temp_var;\n      processed_size = remaining_size;\n      if (remaining_size == 0) {\n        while( true ) {\n          while (remaining_size == 0) {\n            processed_size = *data_chunk_ptr;\n            current_chunk_ptr = data_chunk_ptr + 1;\n            data_chunk_ptr = data_chunk_ptr + 2;\n            remaining_size = *current_chunk_ptr;\n          }\n          temp_var = buffer_info[2];\n          if ((int)(buffer_flags_uint << 0x16) < 0) {\n            if (remaining_size < temp_var) {\n              buffer_flags_uint = *buffer_info;\n              temp_var = remaining_size;\n            }\n            else if ((buffer_flags_uint & 0x480) == 0) {\n              buffer_flags_uint = *buffer_info;\n            }\n            else {\n              result = *buffer_info - buffer_info[4];\n              temp_var = result + 1 + remaining_size;\n              chunk_size = (int)(buffer_info[5] * 3) / 2;\n              if (temp_var <= chunk_size) {\n                temp_var = chunk_size;\n              }\n              if ((int)(buffer_flags_uint << 0x15) < 0) {\n                chunk_size = FUN_00081e14(error_code_ptr,temp_var);\n                if (chunk_size == 0) {\n                  *error_code_ptr = 0xc;\n                  buffer_flags = *(ushort *)(buffer_info + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(chunk_size,buffer_info[4],result);\n                *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                chunk_size = FUN_000825b0(error_code_ptr);\n                if (chunk_size == 0) {\n                  FUN_00083d9c(error_code_ptr,buffer_info[4]);\n                  buffer_flags = *(ushort *)(buffer_info + 3) & 0xff7f;\n                  *error_code_ptr = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              buffer_flags_uint = chunk_size + result;\n              buffer_info[4] = chunk_size;\n              buffer_info[5] = temp_var;\n              *buffer_info = buffer_flags_uint;\n              buffer_info[2] = temp_var - result;\n              temp_var = remaining_size;\n            }\n            FUN_00082438(buffer_flags_uint,processed_size,temp_var);\n            buffer_info[2] = buffer_info[2] - temp_var;\n            *buffer_info = *buffer_info + temp_var;\n            temp_var = remaining_size;\n          }\n          else if ((buffer_info[4] < *buffer_info) || (buffer_flags_uint = buffer_info[5], remaining_size < buffer_flags_uint)) {\n            if (remaining_size < temp_var) {\n              temp_var = remaining_size;\n            }\n            FUN_00082438(*buffer_info,processed_size,temp_var);\n            buffer_flags_uint = buffer_info[2];\n            buffer_info[2] = buffer_flags_uint - temp_var;\n            *buffer_info = *buffer_info + temp_var;\n            if ((buffer_flags_uint - temp_var == 0) && (result = FUN_00083adc(error_code_ptr,buffer_info), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            temp_var = 0x7fffffff;\n            if (remaining_size < 0x7fffffff) {\n              temp_var = remaining_size;\n            }\n            temp_var = (*(code *)buffer_info[9])(error_code_ptr,buffer_info[7],processed_size,(temp_var / buffer_flags_uint) * buffer_flags_uint);\n            if ((int)temp_var < 1) goto LAB_0008402e;\n          }\n          current_chunk_ptr = data_chunks[2];\n          remaining_size = remaining_size - temp_var;\n          data_chunks[2] = (uint *)((int)current_chunk_ptr - temp_var);\n          if ((uint *)((int)current_chunk_ptr - temp_var) == (uint *)0x0) break;\n          buffer_flags_uint = (uint)*(ushort *)(buffer_info + 3);\n          processed_size = processed_size + temp_var;\n        }\n      }\n      else {\n        do {\n          while (temp_var == 0) {\n            chunk_to_process = *data_chunk_ptr;\n            temp_var = data_chunk_ptr[1];\n            chunk_processed = 0;\n            data_chunk_ptr = data_chunk_ptr + 2;\n          }\n          if (chunk_processed == 0) {\n            result = FUN_00084384(chunk_to_process,10,temp_var);\n            if (result == 0) {\n              chunk_size = temp_var + 1;\n              chunk_processed = 1;\n            }\n            else {\n              chunk_size = (result + 1) - chunk_to_process;\n              chunk_processed = 1;\n            }\n          }\n          remaining_size = *buffer_info;\n          buffer_flags_uint = chunk_size;\n          if (temp_var <= chunk_size) {\n            buffer_flags_uint = temp_var;\n          }\n          processed_size = buffer_info[5];\n          if ((buffer_info[4] < remaining_size) && (adjusted_chunk_size = buffer_info[2] + processed_size, (int)adjusted_chunk_size < (int)buffer_flags_uint)) {\n            FUN_00082438(remaining_size,chunk_to_process,adjusted_chunk_size);\n            *buffer_info = *buffer_info + adjusted_chunk_size;\n            result = FUN_00083adc(error_code_ptr,buffer_info);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)buffer_flags_uint < (int)processed_size) {\n            FUN_00082438(remaining_size,chunk_to_process,buffer_flags_uint);\n            buffer_info[2] = buffer_info[2] - buffer_flags_uint;\n            *buffer_info = buffer_flags_uint + *buffer_info;\n            adjusted_chunk_size = buffer_flags_uint;\n          }\n          else {\n            adjusted_chunk_size = (*(code *)buffer_info[9])(error_code_ptr,buffer_info[7],chunk_to_process,processed_size);\n            if ((int)adjusted_chunk_size < 1) goto LAB_0008402e;\n          }\n          chunk_size = chunk_size - adjusted_chunk_size;\n          if ((chunk_size == 0) && (result = FUN_00083adc(error_code_ptr,buffer_info), chunk_processed = chunk_size, result != 0))\n          goto LAB_0008402e;\n          current_chunk_ptr = data_chunks[2];\n          chunk_to_process = chunk_to_process + adjusted_chunk_size;\n          temp_var = temp_var - adjusted_chunk_size;\n          data_chunks[2] = (uint *)((int)current_chunk_ptr - adjusted_chunk_size);\n        } while ((uint *)((int)current_chunk_ptr - adjusted_chunk_size) != (uint *)0x0);\n      }\n    }\n    else {\n      chunk_size = 0;\n      buffer_flags_uint = 0;\n      do {\n        while( true ) {\n          chunk_to_process = buffer_flags_uint;\n          if (temp_var <= buffer_flags_uint) {\n            chunk_to_process = temp_var;\n          }\n          if (buffer_flags_uint != 0) break;\n          chunk_size = *data_chunk_ptr;\n          buffer_flags_uint = data_chunk_ptr[1];\n          data_chunk_ptr = data_chunk_ptr + 2;\n        }\n        result = (*(code *)buffer_info[9])(error_code_ptr,buffer_info[7],chunk_size,chunk_to_process);\n        if (result < 1) {\nLAB_0008402e:\n          buffer_flags = *(ushort *)(buffer_info + 3);\nLAB_00084030:\n          *(ushort *)(buffer_info + 3) = buffer_flags | 0x40;\n          return 0xffffffff;\n        }\n        current_chunk_ptr = data_chunks[2];\n        chunk_size = chunk_size + result;\n        buffer_flags_uint = buffer_flags_uint - result;\n        data_chunks[2] = (uint *)((int)current_chunk_ptr - result);\n      } while ((uint *)((int)current_chunk_ptr - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_00083adc",
                "FUN_0008234c",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083f34",
            "calling": [
                "FUN_00082ac0"
            ],
            "imported": false,
            "current_name": "process_data_00083f34"
        },
        "FUN_00080d7a": {
            "renaming": {
                "FUN_00080d7a": "FUNC_00080d7a"
            },
            "code": "\nvoid FUNC_00080d7a(undefined4 *param_1,undefined4 param_2,int param_3,int param_4,int param_5)\n\n{\n  param_1[0x11] = param_2;\n  if (param_5 == 0) {\n    param_1[0x18] = param_2;\n  }\n  else {\n    param_1[0x19] = param_2;\n  }\n  if (param_4 == 0) {\n    param_1[0x15] = param_2;\n  }\n  else {\n    param_1[0x14] = param_2;\n  }\n  if (param_3 == 0) {\n    param_1[0xd] = param_2;\n  }\n  else {\n    param_1[0xc] = param_2;\n  }\n  param_1[4] = param_2;\n  *param_1 = param_2;\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00080d7a",
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "imported": false,
            "current_name": "FUNC_00080d7a"
        },
        "FUN_00080e9c": {
            "renaming": {
                "FUN_00080e9c": "initialize_hardware_settings_00080e9c",
                "puVar1": "configRegister",
                "iVar2": "controlRegister"
            },
            "code": "\nvoid initializeHardwareSettings_00080e9c(void)\n\n{\n  undefined4 *configRegister;\n  int controlRegister;\n  \n  configRegister = DAT_00080f08;\n  *DAT_00080f08 = 0x400;\n  configRegister[0x80] = 0x400;\n  controlRegister = DAT_00080f0c;\n  if (-1 < *(int *)(DAT_00080f0c + 0x20) << 7) {\n    *(undefined4 *)(DAT_00080f0c + 0x20) = DAT_00080f14;\n    do {\n    } while (-1 < *(int *)(controlRegister + 0x68) << 0x1f);\n  }\n  *(undefined4 *)(controlRegister + 0x20) = DAT_00080f10;\n  do {\n  } while (-1 < *(int *)(controlRegister + 0x68) << 0xf);\n  *(uint *)(DAT_00080f0c + 0x30) = *(uint *)(DAT_00080f0c + 0x30) & 0xfffffffc | 1;\n  do {\n  } while (-1 < *(int *)(controlRegister + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x28) = DAT_00080f18;\n  do {\n  } while (-1 < *(int *)(controlRegister + 0x68) << 0x1e);\n  *(undefined4 *)(DAT_00080f0c + 0x30) = 0x11;\n  do {\n  } while (-1 < *(int *)(controlRegister + 0x68) << 0x1c);\n  *(undefined4 *)(DAT_00080f0c + 0x30) = 0x12;\n  do {\n  } while (-1 < *(int *)(controlRegister + 0x68) << 0x1c);\n  *DAT_00080f20 = DAT_00080f1c;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00080e9c",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "initialize_hardware_settings_00080e9c"
        },
        "FUN_00084464": {
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "inputData",
                "param_3": "additionalData1",
                "param_4": "additionalData2",
                "sVar1": "tempShort",
                "puVar2": "tempPointer",
                "iVar3": "functionResult",
                "uVar4": "tempUShort",
                "unaff_r4": "register_r4",
                "unaff_r5": "register_r5",
                "unaff_r6": "register_r6",
                "in_lr": "inputLinkRegister"
            },
            "code": "\nvoid processData_00084464(int *result,int inputData,undefined4 additionalData1,undefined4 additionalData2)\n\n{\n  short tempShort;\n  undefined *tempPointer;\n  int functionResult;\n  ushort tempUShort;\n  undefined4 register_r4;\n  undefined4 register_r5;\n  undefined4 register_r6;\n  undefined4 inputLinkRegister;\n  \n  tempUShort = *(ushort *)(inputData + 0xc);\n  if ((int)((uint)tempUShort << 0x17) < 0) {\n    FUN_00084700(result,(int)*(short *)(inputData + 0xe),0,2);\n    tempUShort = *(ushort *)(inputData + 0xc);\n  }\n  *(ushort *)(inputData + 0xc) = tempUShort & 0xefff;\n  tempPointer = PTR_DAT_000845fc;\n  tempShort = *(short *)(inputData + 0xe);\n  *(undefined4 *)PTR_DAT_000845fc = 0;\n  functionResult = FUN_000811cc((int)tempShort,additionalData1,additionalData2,additionalData2,register_r4,register_r5,register_r6,inputLinkRegister);\n  if ((functionResult == -1) && (*(int *)tempPointer != 0)) {\n    *result = *(int *)tempPointer;\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00084700",
                "FUN_000811cc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00084464",
            "calling": [],
            "imported": false,
            "current_name": "process_data_00084464"
        },
        "FUN_000811ae": {
            "renaming": {
                "FUN_000811ae": "return_error_code_000811ae"
            },
            "code": "\nundefined4 return_error_code_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811ae",
            "calling": [],
            "imported": false,
            "current_name": "return_error_code_000811ae"
        },
        "FUN_0008118c": {
            "renaming": {
                "FUN_0008118c": "add_and_return_previous_0008118c",
                "param_1": "value_to_add",
                "puVar1": "pointer_to_data",
                "iVar2": "previous_value"
            },
            "code": "\nint add_and_return_previous_0008118c(int value_to_add)\n\n{\n  undefined *pointer_to_data;\n  int previous_value;\n  \n  pointer_to_data = PTR_DAT_000811a0;\n  if (*(int *)PTR_DAT_000811a0 == 0) {\n    *(undefined4 *)PTR_DAT_000811a0 = DAT_000811a4;\n  }\n  previous_value = *(int *)pointer_to_data;\n  *(int *)pointer_to_data = value_to_add + previous_value;\n  return previous_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008118c",
            "calling": [
                "FUN_00082970"
            ],
            "imported": false,
            "current_name": "add_and_return_previous_0008118c"
        },
        "FUN_00082a50": {
            "renaming": {
                "FUN_00082a50": "find_null_terminator_00082a50",
                "param_1": "input_value",
                "iVar1": "offset",
                "puVar2": "aligned_ptr",
                "uVar3": "current_value",
                "bVar4": "is_zero_byte"
            },
            "code": "\nint find_null_terminator_00082a50(uint input_value)\n\n{\n  int offset;\n  uint *aligned_ptr;\n  uint current_value;\n  bool is_zero_byte;\n  \n  aligned_ptr = (uint *)(input_value & 0xfffffffc);\n  offset = -(input_value & 3);\n  current_value = *aligned_ptr;\n  if ((input_value & 3) != 0) {\n    current_value = current_value | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while (aligned_ptr = aligned_ptr + 1, (current_value + 0xfefefeff & ~current_value & 0x80808080) == 0) {\n    offset = offset + 4;\n    current_value = *aligned_ptr;\n  }\n  is_zero_byte = (current_value & 0xff) == 0;\n  if (!is_zero_byte) {\n    offset = offset + 1;\n    is_zero_byte = (current_value & 0xff00) == 0;\n  }\n  if (!is_zero_byte) {\n    offset = offset + 1;\n    is_zero_byte = (current_value & 0xff0000) == 0;\n  }\n  if (!is_zero_byte) {\n    offset = offset + 1;\n  }\n  return offset;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00082a50",
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "imported": false,
            "current_name": "find_null_terminator_00082a50"
        },
        "FUN_0008106e": {
            "renaming": {
                "FUN_0008106e": "set_value_at_offset_0008106e",
                "param_1": "base_address",
                "param_2": "value_to_set"
            },
            "code": "\nvoid set_value_at_offset_0008106e(int base_address,undefined4 value_to_set)\n\n{\n  *(undefined4 *)(base_address + 0x28) = value_to_set;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0008106e",
            "calling": [
                "FUN_00080ae4"
            ],
            "imported": false,
            "current_name": "set_value_at_offset_0008106e"
        },
        "FUN_000811c2": {
            "renaming": {
                "FUN_000811c2": "return_zero_000811c2"
            },
            "code": "\nundefined4 returnZero_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c2",
            "calling": [
                "FUN_00084700"
            ],
            "imported": false,
            "current_name": "return_zero_000811c2"
        },
        "FUN_000811c6": {
            "renaming": {
                "FUN_000811c6": "return_zero_000811c6"
            },
            "code": "\nundefined4 return_zero_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x000811c6",
            "calling": [
                "FUN_00084728"
            ],
            "imported": false,
            "current_name": "return_zero_000811c6"
        },
        "FUN_00083d00": {
            "renaming": {
                "FUN_00083d00": "adjust_memory_allocation_00083d00",
                "param_1": "process_handle",
                "param_2": "memory_offset",
                "iVar1": "global_data",
                "puVar2": "memory_ptr",
                "iVar3": "allocated_memory",
                "uVar4": "adjusted_offset",
                "iVar5": "new_offset"
            },
            "code": "\nundefined4 adjust_memory_allocation_00083d00(undefined4 process_handle,int memory_offset)\n\n{\n  int global_data;\n  undefined *memory_ptr;\n  int allocated_memory;\n  uint adjusted_offset;\n  int new_offset;\n  \n  global_data = DAT_00083d90;\n  do_nothing_00082598();\n  adjusted_offset = *(uint *)(*(int *)(global_data + 8) + 4) & 0xfffffffc;\n  new_offset = ((adjusted_offset - memory_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_offset) {\n    allocated_memory = FUN_00082970(process_handle,0);\n    if (allocated_memory == *(int *)(global_data + 8) + adjusted_offset) {\n      allocated_memory = FUN_00082970(process_handle,-new_offset);\n      memory_ptr = PTR_DAT_00083d94;\n      if (allocated_memory != -1) {\n        allocated_memory = *(int *)PTR_DAT_00083d94;\n        *(uint *)(*(int *)(global_data + 8) + 4) = adjusted_offset - new_offset | 1;\n        *(int *)memory_ptr = allocated_memory - new_offset;\n        do_nothing_0008259c(process_handle);\n        return 1;\n      }\n      new_offset = FUN_00082970(process_handle,0);\n      memory_ptr = PTR_DAT_00083d94;\n      adjusted_offset = new_offset - *(int *)(global_data + 8);\n      if (0xf < (int)adjusted_offset) {\n        allocated_memory = *DAT_00083d98;\n        *(uint *)(*(int *)(global_data + 8) + 4) = adjusted_offset | 1;\n        *(int *)memory_ptr = new_offset - allocated_memory;\n      }\n    }\n  }\n  do_nothing_0008259c(process_handle);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00083d00",
            "calling": [
                "FUN_00083d9c"
            ],
            "imported": false,
            "current_name": "adjust_memory_allocation_00083d00"
        }
    },
    "used_tokens": 88724,
    "layers": [
        [
            "FUN_000816a8",
            "FUN_00081042",
            "FUN_00082ac0",
            "FUN_00080ce0",
            "FUN_00081682",
            "FUN_000815fe",
            "FUN_00081d1c",
            "FUN_000847ac",
            "FUN_00080118",
            "FUN_00081c94",
            "FUN_00083b14",
            "FUN_000842a4",
            "FUN_000846a4",
            "FUN_00080f24",
            "FUN_00080e04",
            "FUN_000804a8",
            "FUN_000802da",
            "FUN_00080f9c",
            "FUN_00081210",
            "FUN_00081454",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00084728",
            "FUN_00083c40",
            "FUN_000805d0",
            "FUN_000813e4",
            "FUN_00084290",
            "FUN_000846b4",
            "FUN_000813a8",
            "FUN_00083d9c",
            "FUN_00081bf4",
            "FUN_00081d7c",
            "FUN_00081c5c",
            "FUN_00081388",
            "FUN_00082994",
            "FUN_00080c0c",
            "FUN_00080d2e",
            "FUN_00081944",
            "FUN_000844c4",
            "FUN_0008189c",
            "FUN_0008234c",
            "FUN_00080a68",
            "FUN_0008165c",
            "FUN_000815f8",
            "FUN_00084384",
            "FUN_00081034",
            "FUN_00083974",
            "FUN_00084700",
            "thunk_FUN_00081714",
            "FUN_00081ca8",
            "FUN_00081318",
            "FUN_00081714",
            "FUN_0008449c",
            "FUN_0008477c",
            "FUN_000801b0",
            "FUN_000813c2",
            "FUN_000814e4",
            "FUN_00080d54",
            "FUN_0008021c",
            "FUN_00081e04",
            "FUN_00084750",
            "FUN_00080ae4",
            "FUN_00081d5c",
            "FUN_00082970",
            "FUN_000811be",
            "FUN_00084a80",
            "FUN_00081c54",
            "FUN_0008163a",
            "FUN_000825a0",
            "FUN_000815d4",
            "FUN_00081e14",
            "FUN_00080164",
            "FUN_000811cc",
            "FUN_000846dc",
            "FUN_00081894",
            "FUN_000845bc",
            "FUN_00082504",
            "FUN_000800f4",
            "FUN_0008378c",
            "FUN_00083adc",
            "FUN_000825b0",
            "FUN_000803d4",
            "FUN_0008043e",
            "FUN_0008160c",
            "FUN_00080e18",
            "FUN_00081184",
            "FUN_00084298",
            "FUN_00081066",
            "FUN_00081cd0",
            "FUN_00081df4",
            "FUN_00080410",
            "FUN_00080da0",
            "FUN_00080258",
            "FUN_00081622",
            "FUN_00082438",
            "FUN_00081508",
            "FUN_00083808",
            "FUN_000847e0",
            "FUN_0008105c",
            "FUN_0008456c",
            "FUN_000811b4",
            "FUN_000816d4",
            "FUN_00083f34",
            "FUN_00080d7a",
            "FUN_00080e9c",
            "FUN_00084464",
            "FUN_000811ae",
            "FUN_0008118c",
            "FUN_00082a50",
            "FUN_0008106e",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_00083d00"
        ]
    ],
    "locked_functions": []
}