{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "format_and_copy_data_080050fc",
                "param_1": "error_code",
                "param_2": "output_buffer",
                "param_3": "format_string",
                "param_4": "input_values",
                "puVar1": "tmp_ptr",
                "iVar2": "result",
                "iVar3": "copy_result",
                "puVar4": "formatted_data",
                "piVar5": "next_input_value",
                "bVar6": "is_digit",
                "pbVar7": "current_char",
                "pbVar8": "next_char",
                "unaff_r9": "processed_data",
                "local_8c": "input_value_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "unused",
                "local_7c": "width",
                "local_74": "total_copied",
                "local_70": "specifier",
                "local_6f": "unused_char1",
                "local_6e": "unused_char2",
                "local_45": "sign_char",
                "local_30": "unused_int"
            },
            "code": "\nint format_and_copy_data_080050fc(undefined4 *error_code,int *output_buffer,byte *format_string,int *input_values)\n\n{\n  undefined *tmp_ptr;\n  int result;\n  int copy_result;\n  undefined4 *formatted_data;\n  int *next_input_value;\n  bool is_digit;\n  byte *current_char;\n  byte *next_char;\n  undefined4 *processed_data;\n  int *input_value_ptr;\n  uint flags;\n  int precision;\n  undefined4 unused;\n  int width;\n  int total_copied;\n  byte specifier;\n  undefined unused_char1;\n  undefined unused_char2;\n  undefined sign_char;\n  undefined4 unused_int;\n  \n  input_value_ptr = input_values;\n  if (((int)((uint)*(ushort *)(output_buffer + 3) << 0x18) < 0) && (output_buffer[4] == 0)) {\n    result = allocate_memory_08005714(error_code,0x40);\n    *output_buffer = result;\n    output_buffer[4] = result;\n    if (result == 0) {\n      *error_code = 0xc;\n      return -1;\n    }\n    output_buffer[5] = 0x40;\n  }\n  total_copied = 0;\n  unused_char1 = 0x20;\n  unused_char2 = 0x30;\n  current_char = format_string;\nLAB_08005146:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_char - (int)format_string;\n  if (result != 0) {\n    copy_result = resize_and_copy_buffer_08005044(error_code,output_buffer,format_string,result);\n    if (copy_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(output_buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_copied;\n    }\n    total_copied = total_copied + result;\n  }\n  if (*next_char == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  unused = 0;\n  sign_char = 0;\n  unused_int = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    result = find_char_in_range_08005614(PTR_DAT_080052d0,*current_char);\n    tmp_ptr = PTR_DAT_080052d4;\n    format_string = current_char + 1;\n    if (result == 0) break;\n    flags = 1 << (result - (int)PTR_DAT_080052d0 & 0xffU) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    sign_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    sign_char = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    next_input_value = input_value_ptr + 1;\n    result = *input_value_ptr;\n    input_value_ptr = next_input_value;\n    if (-1 < result) goto LAB_080051ee;\n    width = -result;\n    flags = flags | 2;\n  }\n  else {\n    is_digit = false;\n    result = width;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      is_digit = true;\n      format_string = format_string + 1;\n    }\n    if (is_digit) {\nLAB_080051ee:\n      width = result;\n    }\n  }\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      next_input_value = input_value_ptr + 1;\n      precision = *input_value_ptr;\n      input_value_ptr = next_input_value;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = result;\n      }\n    }\n  }\n  result = find_char_in_range_08005614(PTR_DAT_080052d4,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result - (int)tmp_ptr & 0xffU);\n  }\n  specifier = *format_string;\n  format_string = format_string + 1;\n  result = find_char_in_range_08005614(PTR_s_efgEFG_080052d8,specifier,6);\n  if (result == 0) {\n    formatted_data = (undefined4 *)format_and_process_data_080053d4(error_code,&flags,output_buffer,DAT_080052e0,&input_value_ptr);\n  }\n  else {\n    formatted_data = error_code;\n    if (DAT_080052dc == 0) {\n      input_value_ptr = (int *)(((int)input_value_ptr + 7U & 0xfffffff8) + 8);\n      formatted_data = processed_data;\n      goto LAB_08005260;\n    }\n  }\n  if (formatted_data == (undefined4 *)0xffffffff) goto LAB_080052ac;\nLAB_08005260:\n  total_copied = total_copied + (int)formatted_data;\n  current_char = format_string;\n  processed_data = formatted_data;\n  goto LAB_08005146;\n}\n\n",
            "called": [
                "FUN_08005714",
                "FUN_08005044",
                "FUN_08005614",
                "FUN_080053d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050fc",
            "calling": [
                "FUN_08004ffc"
            ],
            "imported": false,
            "current_name": "format_and_copy_data_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "update_global_variable_08003320",
                "param_1": "new_value"
            },
            "code": "\nvoid updateGlobalVariable_08003320(undefined4 new_value)\n\n{\n  *(undefined4 *)PTR_DAT_08003328 = new_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "update_global_variable_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "process_data_08004410",
                "param_1": "inputData",
                "param_2": "maskData",
                "param_3": "additionalData",
                "local_10": "processedData",
                "local_c": "maskedData",
                "uStack_8": "storedAdditionalData"
            },
            "code": "\nvoid processData_08004410(undefined4 inputData,uint maskData,undefined4 additionalData)\n\n{\n  undefined4 processedData;\n  uint maskedData;\n  undefined4 storedAdditionalData;\n  \n  processedData = *(undefined4 *)PTR_DAT_08004430;\n  maskedData = maskData & 0xffff0000 | (uint)*(ushort *)(PTR_DAT_08004430 + 4);\n  storedAdditionalData = additionalData;\n  process_encrypted_data_08004300(0x6c,&processedData,6);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004410"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "configure_pins_08001264",
                "param_1": "configArray",
                "param_2": "pinSettings",
                "puVar1": "pinControl",
                "uVar2": "configValue1",
                "uVar3": "configValue2",
                "uVar4": "pinMode",
                "uVar5": "bitMask",
                "uVar6": "pinFunction",
                "uVar8": "pinIndex",
                "uVar9": "shiftedBit",
                "uVar10": "configValue3",
                "iVar7": "pinGroup",
                "iVar11": "shiftAmount",
                "unaff_r10": "currentConfig"
            },
            "code": "\nvoid configurePins_08001264(uint *configArray,uint *pinSettings)\n\n{\n  uint *pinControl;\n  uint configValue1;\n  uint configValue2;\n  uint pinMode;\n  uint bitMask;\n  uint pinFunction;\n  int pinGroup;\n  uint pinIndex;\n  uint shiftedBit;\n  uint configValue3;\n  uint *currentConfig;\n  int shiftAmount;\n  \n  configValue2 = DAT_08001418;\n  configValue1 = DAT_08001414;\n  pinControl = DAT_08001404;\n  pinMode = 0;\n  pinIndex = 0;\n  do {\n    shiftedBit = 1 << (pinIndex & 0xff);\n    bitMask = shiftedBit & *pinSettings;\n    if (shiftedBit == bitMask) {\n      pinFunction = pinSettings[1];\n      if (pinFunction == 0x12) {\n        pinMode = pinSettings[3] + 0xc;\n      }\n      else if (pinFunction < 0x13) {\n        if (pinFunction == 2) {\n          pinMode = pinSettings[3] + 8;\n        }\n        else if (pinFunction < 3) {\n          if (pinFunction == 0) goto LAB_080013be;\n          if (pinFunction == 1) {\n            pinMode = pinSettings[3];\n          }\n        }\n        else if (pinFunction == 3) {\n          pinMode = 0;\n        }\n        else if (pinFunction == 0x11) {\n          pinMode = pinSettings[3] + 4;\n        }\n      }\n      else {\n        if (pinFunction != DAT_08001410) {\n          if (DAT_08001410 < pinFunction) {\n            if ((pinFunction != configValue1) && (configValue3 = DAT_08001420, pinFunction != configValue2)) goto LAB_080013b8;\n          }\n          else if (pinFunction != DAT_0800141c) {\n            configValue3 = DAT_0800141c + 0x10000;\nLAB_080013b8:\n            if (pinFunction != configValue3) goto LAB_080012a8;\n          }\n        }\nLAB_080013be:\n        pinMode = pinSettings[2];\n        if (pinMode == 0) {\n          pinMode = 4;\n        }\n        else {\n          if (pinMode == 1) {\n            configArray[4] = shiftedBit;\n          }\n          if (pinMode != 1) {\n            configArray[5] = shiftedBit;\n          }\n          pinMode = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        shiftedBit = *configArray;\n        pinFunction = pinIndex << 2;\n        currentConfig = configArray;\n      }\n      else {\n        shiftedBit = configArray[1];\n        pinFunction = (pinIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        currentConfig = configArray + 1;\n      }\n      *currentConfig = shiftedBit & ~(0xf << (pinFunction & 0xff)) | pinMode << (pinFunction & 0xff);\n      currentConfig = (uint *)pinSettings[1];\n      if (((uint)currentConfig & 0x10000000) != 0) {\n        *(uint *)(DAT_08001408 + 0x18) = *(uint *)(DAT_08001408 + 0x18) | 1;\n        shiftAmount = (pinIndex & 3) << 2;\n        if (configArray == DAT_0800140c) {\n          pinGroup = 0;\n        }\n        else if (configArray == DAT_0800140c + 0x100) {\n          pinGroup = 1;\n        }\n        else if (configArray == DAT_0800140c + 0x200) {\n          pinGroup = 2;\n        }\n        else if (configArray == DAT_0800140c + 0x300) {\n          pinGroup = 3;\n        }\n        else {\n          pinGroup = 4;\n        }\n        *(uint *)(&DAT_40010008 + (pinIndex & 0xfffffffc)) =\n             pinGroup << shiftAmount | *(uint *)(&DAT_40010008 + (pinIndex & 0xfffffffc)) & ~(0xf << shiftAmount);\n        if (((uint)currentConfig & 0x10000) == 0) {\n          shiftedBit = *pinControl & ~bitMask;\n        }\n        else {\n          shiftedBit = *pinControl | bitMask;\n        }\n        *pinControl = shiftedBit;\n        if (((uint)currentConfig & 0x20000) == 0) {\n          shiftedBit = pinControl[1] & ~bitMask;\n        }\n        else {\n          shiftedBit = pinControl[1] | bitMask;\n        }\n        pinControl[1] = shiftedBit;\n        if (((uint)currentConfig & 0x100000) == 0) {\n          shiftedBit = pinControl[2] & ~bitMask;\n        }\n        else {\n          shiftedBit = pinControl[2] | bitMask;\n        }\n        pinControl[2] = shiftedBit;\n        if (((uint)currentConfig & 0x200000) == 0) {\n          bitMask = pinControl[3] & ~bitMask;\n        }\n        else {\n          bitMask = bitMask | pinControl[3];\n        }\n        pinControl[3] = bitMask;\n      }\n    }\n    pinIndex = pinIndex + 1;\n    if (pinIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "FUN_08004e7c",
                "FUN_08004e14",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "configure_pins_08001264"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "sensor_data_handler_08002ea0",
                "param_1": "unused_param1",
                "param_2": "unused_param2",
                "param_3": "unused_param3",
                "param_4": "unused_param4",
                "extraout_r1": "result_sensor_data"
            },
            "code": "\nvoid sensor_data_handler_08002ea0(undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3,undefined4 unused_param4)\n\n{\n  undefined4 result_sensor_data;\n  \n  initialize_mpu9250_08002ad0();\n  process_sensor_data_08002cb0();\n  set_global_variable_08003314(DAT_08002ebc);\n  update_global_variable_08003320(0,result_sensor_data,unused_param3,unused_param4);\n  return;\n}\n\n",
            "called": [
                "FUN_08003314",
                "FUN_08003320",
                "FUN_08002cb0",
                "FUN_08002ad0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "sensor_data_handler_08002ea0"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "improved_calculation_080070b0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8"
            },
            "code": "\nulonglong improved_calculation_080070b0(uint input_1,uint input_2,undefined4 input_3)\n\n{\n  undefined4 tempVar1;\n  uint tempVar2;\n  undefined4 tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  undefined8 tempVar7;\n  ulonglong tempVar8;\n  \n  tempVar6 = (input_2 << 1) >> 0x15;\n  tempVar5 = tempVar6 - 0x3ff;\n  tempVar2 = input_2;\n  if ((int)tempVar5 < 0x14) {\n    if ((int)tempVar5 < 0) {\n      if ((input_2 & 0x7fffffff | input_1) == 0) {\n        return CONCAT44(input_2,input_1);\n      }\n      tempVar2 = input_2 & 0xfffff | input_1;\n      tempVar1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)input_2 >> 0x1f) * -8);\n      tempVar3 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)input_2 >> 0x1f) * -8) + 4);\n      tempVar7 = floating_point_addition_0800016c(input_1,(-tempVar2 | tempVar2) >> 0xc & 0x80000 | input_2 & 0xfffe0000,tempVar1,\n                           tempVar3,input_1,input_2,input_3);\n      tempVar8 = floating_point_operation_08000168((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),tempVar1,tempVar3);\n      return tempVar8 & 0xffffffff |\n             (ulonglong)((uint)(tempVar8 >> 0x20) & 0x7fffffff | input_2 & 0x80000000) << 0x20;\n    }\n    tempVar6 = DAT_080071bc >> (tempVar5 & 0xff);\n    if ((input_2 & tempVar6 | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    tempVar6 = tempVar6 >> 1;\n    tempVar4 = input_2 & tempVar6 | input_1;\n    if (tempVar4 != 0) {\n      if (tempVar5 == 0x13) {\n        tempVar4 = 0x80000000;\n      }\n      else {\n        tempVar4 = 0;\n      }\n      tempVar2 = 0x40000 >> (tempVar5 & 0xff) | input_2 & ~tempVar6;\n    }\n  }\n  else {\n    if (0x33 < (int)tempVar5) {\n      if (tempVar5 != 0x400) {\n        return CONCAT44(input_2,input_1);\n      }\n      tempVar8 = floating_point_addition_0800016c();\n      return tempVar8;\n    }\n    tempVar6 = tempVar6 - 0x413;\n    tempVar5 = 0xffffffff >> (tempVar6 & 0xff);\n    if ((input_1 & tempVar5) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    tempVar5 = tempVar5 >> 1;\n    tempVar4 = input_1;\n    if ((input_1 & tempVar5) != 0) {\n      tempVar4 = 0x40000000 >> (tempVar6 & 0xff) | input_1 & ~tempVar5;\n    }\n  }\n  tempVar1 = *(undefined4 *)(PTR_DAT_080071b8 + ((int)input_2 >> 0x1f) * -8);\n  tempVar3 = *(undefined4 *)((int)(PTR_DAT_080071b8 + ((int)input_2 >> 0x1f) * -8) + 4);\n  tempVar7 = floating_point_addition_0800016c(tempVar4,tempVar2,tempVar1,tempVar3,input_1,input_2,input_3);\n  tempVar8 = floating_point_operation_08000168((int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20),tempVar1,tempVar3);\n  return tempVar8;\n}\n\n",
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "improved_calculation_080070b0"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "update_value_08001424",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "condition"
            },
            "code": "\nvoid updateValue_08001424(int baseAddress,int value,int condition)\n\n{\n  if (condition == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(baseAddress + 0x10) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "FUN_08004490",
                "FUN_0800458c",
                "FUN_08003f3c"
            ],
            "imported": false,
            "current_name": "update_value_08001424"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "check_combined_parameters_08001028",
                "in_CY": "combined_status"
            },
            "code": "\nbool check_combined_parameters_08001028(void)\n\n{\n  char combined_status;\n  \n  combine_parameters_08001004();\n  return combined_status == '\\0';\n}\n\n",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "FUN_0800483c",
                "FUN_08004a84",
                "FUN_08002ee8"
            ],
            "imported": false,
            "current_name": "check_combined_parameters_08001028"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "improved_calculation_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "local_50": "condition_flag",
                "local_4c": "data_pointer",
                "local_48": "temp_input_1",
                "uStack_44": "temp_input_2",
                "local_40": "temp_input_3",
                "uStack_3c": "temp_input_4",
                "local_38": "result",
                "local_30": "condition_result",
                "cVar1": "char_value",
                "puVar2": "pointer_value",
                "iVar3": "comparison_result",
                "iVar4": "non_zero_result",
                "piVar5": "int_pointer",
                "puVar6": "uint_pointer",
                "uVar7": "upper_lVar9",
                "uVar8": "lower_lVar9",
                "lVar9": "initial_value",
                "uVar10": "calculated_result_1",
                "uVar11": "calculated_result_2"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nlonglong improved_calculation_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char char_value;\n  undefined *pointer_value;\n  int comparison_result;\n  int non_zero_result;\n  int *int_pointer;\n  undefined4 *uint_pointer;\n  undefined4 upper_lVar9;\n  undefined4 lower_lVar9;\n  longlong initial_value;\n  undefined8 calculated_result_1;\n  undefined8 calculated_result_2;\n  undefined4 condition_flag;\n  undefined *data_pointer;\n  undefined4 temp_input_1;\n  undefined4 temp_input_2;\n  undefined4 temp_input_3;\n  undefined4 temp_input_4;\n  undefined8 result;\n  int condition_result;\n  \n  initial_value = FUNC_08006228();\n  pointer_value = PTR_DAT_08005ba8;\n  upper_lVar9 = (undefined4)((ulonglong)initial_value >> 0x20);\n  lower_lVar9 = (undefined4)initial_value;\n  char_value = *PTR_DAT_08005ba8;\n  if (char_value == -1) {\n    return initial_value;\n  }\n  condition_result = check_conditions_08000a04(input_3,input_4,input_3,input_4);\n  if (condition_result != 0) {\n    return initial_value;\n  }\n  comparison_result = check_conditions_08000a04(input_1,input_2,input_1,input_2);\n  temp_input_1 = input_1;\n  temp_input_2 = input_2;\n  temp_input_3 = input_3;\n  temp_input_4 = input_4;\n  if (comparison_result == 0) {\n    non_zero_result = is_not_zero_080009a0(input_1,input_2,0,0);\n    if (non_zero_result != 0) {\n      condition_result = is_not_zero_080009a0(input_3,input_4,0,0);\n      if (condition_result != 0) {\n        condition_flag = 1;\n        data_pointer = PTR_DAT_08005bac;\n        result = 0;\n        condition_result = comparison_result;\n        if (char_value != '\\0') {\n          result = (ulonglong)DAT_08005bb0 << 0x20;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      comparison_result = calculate_bitwise_operation_08007092(input_3,input_4);\n      if (comparison_result == 0) {\n        return initial_value;\n      }\n      comparison_result = is_comparison_equal_080009b4(input_3,input_4,0,0);\n      if (comparison_result == 0) {\n        return initial_value;\n      }\n      condition_flag = 1;\n      data_pointer = PTR_DAT_08005bac;\n      char_value = *pointer_value;\n      if (char_value == '\\0') goto LAB_08005a22;\n      result = (ulonglong)DAT_08005bb4 << 0x20;\nLAB_08005a32:\n      if (char_value != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    comparison_result = calculate_bitwise_operation_08007092(lower_lVar9,upper_lVar9);\n    if (((comparison_result != 0) || (non_zero_result = calculate_bitwise_operation_08007092(input_1,input_2), non_zero_result == 0)) ||\n       (non_zero_result = calculate_bitwise_operation_08007092(input_3,input_4), non_zero_result == 0)) {\n      comparison_result = is_not_zero_080009a0(lower_lVar9,upper_lVar9,0,0);\n      if (comparison_result == 0) {\n        return initial_value;\n      }\n      comparison_result = calculate_bitwise_operation_08007092(input_1,input_2);\n      if (comparison_result == 0) {\n        return initial_value;\n      }\n      comparison_result = calculate_bitwise_operation_08007092(input_3,input_4);\n      if (comparison_result == 0) {\n        return initial_value;\n      }\n      condition_flag = 4;\n      data_pointer = PTR_DAT_08005bac;\n      condition_result = 0;\n      result._0_4_ = 0;\n      result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    condition_result = check_conditions_08000a04(lower_lVar9,upper_lVar9);\n    char_value = *pointer_value;\n    if (condition_result != 0) {\n      data_pointer = PTR_DAT_08005bac;\n      condition_flag = 1;\n      condition_result = comparison_result;\n      if (char_value != '\\0') {\n        result = floating_point_operation_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      condition_flag = 1;\n      result = 0;\n      data_pointer = PTR_DAT_08005bac;\n      goto LAB_08005978;\n    }\n    data_pointer = PTR_DAT_08005bac;\n    condition_flag = 3;\n    if (char_value == '\\0') {\n      result._0_4_ = 0xe0000000;\n      result._4_4_ = DAT_08005bb8;\n      comparison_result = is_comparison_equal_080009b4(input_1,input_2,0,0);\n      if (comparison_result != 0) {\n        calculated_result_1 = calculate_result_080004d0(input_3,input_4,0,DAT_08005bbc);\n        calculated_result_2 = improved_calculation_08005900_080070b0();\n        comparison_result = is_not_zero_080009a0((int)calculated_result_1,(int)((ulonglong)calculated_result_1 >> 0x20),(int)calculated_result_2,\n                             (int)((ulonglong)calculated_result_2 >> 0x20));\n        if (comparison_result == 0) {\n          result._0_4_ = 0xe0000000;\n          result._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      comparison_result = return_zero_0800709e(&condition_flag);\n      if (comparison_result != 0) goto LAB_080059d0;\n    }\n    else {\n      result._0_4_ = 0;\n      result._4_4_ = DAT_08005bc4;\n      comparison_result = is_comparison_equal_080009b4(input_1,input_2,0,0);\n      if (comparison_result != 0) {\n        calculated_result_1 = calculate_result_080004d0(input_3,input_4,0,DAT_08005bbc);\n        calculated_result_2 = improved_calculation_08005900_080070b0();\n        comparison_result = is_not_zero_080009a0((int)calculated_result_1,(int)((ulonglong)calculated_result_1 >> 0x20),(int)calculated_result_2,\n                             (int)((ulonglong)calculated_result_2 >> 0x20));\n        if (comparison_result == 0) {\n          result._0_4_ = 0;\n          result._4_4_ = DAT_08005bb4;\n        }\n      }\nLAB_08005afa:\n      if (*pointer_value != '\\x02') goto LAB_08005b98;\n    }\n    uint_pointer = (undefined4 *)get_data_from_pointer_080072ac();\n    lower_lVar9 = 0x22;\n  }\n  else {\n    comparison_result = is_not_zero_080009a0(input_3,input_4,0,0);\n    if (comparison_result == 0) {\n      return initial_value;\n    }\n    condition_flag = 1;\n    data_pointer = PTR_DAT_08005bac;\n    result = (ulonglong)DAT_08005bb0 << 0x20;\n    if (char_value == '\\x02') {\n      return (ulonglong)DAT_08005bb0 << 0x20;\n    }\nLAB_08005978:\n    comparison_result = return_zero_0800709e(&condition_flag);\n    if (comparison_result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    uint_pointer = (undefined4 *)get_data_from_pointer_080072ac();\n    lower_lVar9 = 0x21;\n  }\n  *uint_pointer = lower_lVar9;\nLAB_080059d0:\n  if (condition_result != 0) {\n    int_pointer = (int *)get_data_from_pointer_080072ac();\n    *int_pointer = condition_result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08007092",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080009a0",
                "FUN_080072ac",
                "FUN_0800709e",
                "FUN_080070b0",
                "FUN_080004d0",
                "FUN_08000724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "improved_calculation_08005900"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "process_data_080006ac",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "uVar1": "tempVar1",
                "unaff_r4": "constantR4",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "in_r12": "constantR12",
                "bVar4": "condition"
            },
            "code": "\nulonglong processData_080006ac(uint inputA,uint inputB,uint inputC,uint inputD)\n\n{\n  uint tempVar1;\n  uint constantR4;\n  uint tempVar2;\n  uint tempVar3;\n  uint constantR12;\n  bool condition;\n  \n  tempVar2 = constantR12 & inputD >> 0x14;\n  if (constantR4 != constantR12 && tempVar2 != constantR12) {\n    condition = (inputA | inputB << 1) == 0;\n    if (!condition) {\n      condition = (inputC | inputD << 1) == 0;\n    }\n    if (condition) {\n      return (ulonglong)((inputB ^ inputD) & 0x80000000) << 0x20;\n    }\n    if (constantR4 == 0) {\n      tempVar3 = inputB & 0x80000000;\n      do {\n        tempVar1 = inputA & 0x80000000;\n        inputA = inputA << 1;\n        inputB = inputB * 2 + (uint)(tempVar1 != 0);\n      } while ((inputB & 0x100000) == 0);\n      inputB = inputB | tempVar3;\n      if (tempVar2 != 0) {\n        return CONCAT44(inputB,inputA);\n      }\n    }\n    do {\n      tempVar2 = inputC & 0x80000000;\n      inputC = inputC << 1;\n      inputD = inputD * 2 + (uint)(tempVar2 != 0);\n    } while ((inputD & 0x100000) == 0);\n    return CONCAT44(inputB,inputA);\n  }\n  condition = (inputA | inputB << 1) == 0;\n  if (condition) {\n    inputB = inputD;\n    inputA = inputC;\n  }\n  if (!condition) {\n    condition = (inputC | inputD << 1) == 0;\n  }\n  tempVar3 = inputB;\n  if (((!condition) && ((constantR4 != constantR12 || ((inputA | inputB << 0xc) == 0)))) &&\n     ((tempVar2 != constantR12 || (inputA = inputC, tempVar3 = inputD, (inputC | inputD << 0xc) == 0)))) {\n    return (ulonglong)((inputB ^ inputD) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(tempVar3,inputA) | 0x7ff8000000000000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "FUN_080004d0"
            ],
            "imported": false,
            "current_name": "process_data_080006ac"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "process_buffer_08001828",
                "param_1": "buffer_ptr",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "input_data",
                "param_6": "data_length",
                "param_7": "arg7",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "puVar3": "buffer",
                "uVar4": "temp_buffer_value"
            },
            "code": "\nundefined4\nprocess_buffer_08001828(uint **buffer_ptr,undefined4 arg2,undefined4 arg3,undefined4 arg4,byte *input_data,\n            short data_length,undefined4 arg7)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint *buffer;\n  uint temp_buffer_value;\n  \n  if (*(char *)((int)buffer_ptr + 0x35) == ' ') {\n    if (input_data == (byte *)0x0) {\n      return 1;\n    }\n    if (data_length == 0) {\n      return 1;\n    }\n    temp_var1 = get_undefined4_value_0800115c();\n    do {\n      buffer = *buffer_ptr;\n      if ((~buffer[6] & 2) != 0) {\n        if (*(char *)(buffer_ptr + 0xd) == '\\x01') {\n          return 2;\n        }\n        temp_buffer_value = *buffer;\n        *(undefined *)(buffer_ptr + 0xd) = 1;\n        *buffer = temp_buffer_value & 0xfffff7ff;\n        *(undefined *)((int)buffer_ptr + 0x35) = 0x21;\n        *(undefined *)((int)buffer_ptr + 0x36) = 0x40;\n        buffer_ptr[0xe] = (uint *)0x0;\n        temp_var1 = process_input_data_08001530(buffer_ptr,arg2,arg3,arg4,arg7);\n        if (temp_var1 != 0) {\n          *(undefined *)(buffer_ptr + 0xd) = 0;\n          if (buffer_ptr[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      temp_var2 = get_undefined4_value_0800115c();\n    } while ((uint)(temp_var2 - temp_var1) < 0x2711);\n    *(undefined *)(buffer_ptr + 0xd) = 0;\n    *(undefined *)((int)buffer_ptr + 0x35) = 0x20;\n  }\n  return 2;\n  while (data_length != 0) {\nLAB_080018e2:\n    temp_var1 = process_data_080014e2(buffer_ptr,arg7);\n    if (temp_var1 != 0) goto LAB_080018ee;\n    buffer = *buffer_ptr;\n    buffer[4] = (uint)*input_data;\n    if ((int)(buffer[5] << 0x1d) < 0) {\n      if ((short)(data_length + -1) == 0) break;\n      data_length = data_length + -2;\n      buffer[4] = (uint)input_data[1];\n      input_data = input_data + 2;\n    }\n    else {\n      input_data = input_data + 1;\n      data_length = data_length + -1;\n    }\n  }\n  temp_var1 = process_data_080014e2(buffer_ptr,arg7);\n  if (temp_var1 == 0) {\n    **buffer_ptr = **buffer_ptr | 0x200;\n    *(undefined *)(buffer_ptr + 0xd) = 0;\n    *(undefined *)((int)buffer_ptr + 0x35) = 0x20;\n    *(undefined *)((int)buffer_ptr + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (buffer_ptr[0xe] == (uint *)0x4) {\n    **buffer_ptr = **buffer_ptr | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "FUN_0800403c"
            ],
            "imported": false,
            "current_name": "process_buffer_08001828"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_memory_08004c64",
                "puVar1": "memory_ptr",
                "iVar2": "index"
            },
            "code": "\nvoid initialize_memory_08004c64(void)\n\n{\n  undefined *memory_ptr;\n  int index;\n  \n  memory_ptr = PTR_DAT_08004c6c;\n  index = 0;\n  *(undefined2 *)(PTR_DAT_08004c6c + 0x800) = 0;\n  *(undefined2 *)(memory_ptr + 0x802) = 0;\n  *(undefined2 *)(memory_ptr + 0x804) = 0;\n  do {\n    memory_ptr[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "FUN_08004c70"
            ],
            "imported": false,
            "current_name": "initialize_memory_08004c64"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "floating_point_addition_0800016c",
                "param_1": "operand1_mantissa",
                "param_2": "operand1_exponent",
                "param_3": "operand2_mantissa",
                "param_4": "operand2_exponent",
                "iVar1": "temp_var1",
                "bVar2": "temp_byte",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "mantissa1_shifted",
                "uVar7": "exponent1_shifted",
                "uVar8": "mantissa_result",
                "uVar9": "exponent_result",
                "uVar10": "exponent_diff",
                "uVar11": "mantissa_aux",
                "uVar12": "mantissa_sum",
                "bVar13": "bool_var1",
                "bVar14": "bool_var2",
                "bVar15": "bool_var3"
            },
            "code": "\nulonglong floating_point_addition_0800016c(uint operand1_mantissa,uint operand1_exponent,uint operand2_mantissa,uint operand2_exponent)\n\n{\n  int temp_var1;\n  byte temp_byte;\n  uint temp_var3;\n  uint temp_var4;\n  uint mantissa1_shifted;\n  int iVar6;\n  uint exponent1_shifted;\n  uint mantissa_result;\n  uint exponent_result;\n  uint exponent_diff;\n  uint mantissa_aux;\n  uint mantissa_sum;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  \n  exponent1_shifted = operand1_exponent << 1;\n  exponent_result = operand2_exponent << 1;\n  bool_var1 = ((operand1_exponent ^ operand2_exponent) & 0x7fffffff) == 0;\n  bool_var2 = bool_var1 && operand1_mantissa == operand2_mantissa;\n  if (!bool_var1 || operand1_mantissa != operand2_mantissa) {\n    bool_var2 = (exponent1_shifted | operand1_mantissa) == 0;\n  }\n  if (!bool_var2) {\n    bool_var2 = (exponent_result | operand2_mantissa) == 0;\n  }\n  iVar6 = (int)exponent1_shifted >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = iVar6 == -1;\n  }\n  temp_var1 = (int)exponent_result >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = temp_var1 == -1;\n  }\n  if (bool_var2) {\n    if (iVar6 == -1 || temp_var1 == -1) {\n      exponent_result = operand2_exponent;\n      exponent1_shifted = operand2_mantissa;\n      if (iVar6 == -1) {\n        exponent_result = operand1_exponent;\n        exponent1_shifted = operand1_mantissa;\n      }\n      if (iVar6 != -1 || temp_var1 != -1) {\n        operand2_mantissa = exponent1_shifted;\n        operand2_exponent = exponent_result;\n      }\n      bool_var2 = (exponent1_shifted | exponent_result << 0xc) == 0;\n      if (bool_var2) {\n        bool_var2 = (operand2_mantissa | operand2_exponent << 0xc) == 0;\n      }\n      if (bool_var2) {\n        bool_var2 = exponent_result == operand2_exponent;\n      }\n      if (!bool_var2) {\n        exponent_result = exponent_result | 0x80000;\n      }\n      return CONCAT44(exponent_result,exponent1_shifted);\n    }\n    if (((operand1_exponent ^ operand2_exponent) & 0x7fffffff) != 0 || operand1_mantissa != operand2_mantissa) {\n      if ((exponent1_shifted | operand1_mantissa) == 0) {\n        operand1_mantissa = operand2_mantissa;\n        operand1_exponent = operand2_exponent;\n      }\n      return CONCAT44(operand1_exponent,operand1_mantissa);\n    }\n    if (operand1_exponent != operand2_exponent) {\n      return 0;\n    }\n    if (exponent1_shifted >> 0x15 == 0) {\n      bool_var2 = (operand1_mantissa & 0x80000000) != 0;\n      exponent_result = operand1_exponent * 2 + (uint)bool_var2;\n      if (CARRY4(operand1_exponent,operand1_exponent) || CARRY4(operand1_exponent * 2,(uint)bool_var2)) {\n        exponent_result = exponent_result | 0x80000000;\n      }\n      return CONCAT44(exponent_result,operand1_mantissa << 1);\n    }\n    if (exponent1_shifted < 0xffc00000) {\n      return CONCAT44(operand1_exponent + 0x100000,operand1_mantissa);\n    }\n    operand1_exponent = operand1_exponent & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(operand1_exponent | 0x7ff00000) << 0x20;\n  }\n  exponent1_shifted = exponent1_shifted >> 0x15;\n  exponent_result = exponent_result >> 0x15;\n  exponent_diff = exponent_result - exponent1_shifted;\n  bool_var2 = exponent_diff != 0;\n  if (exponent_result < exponent1_shifted) {\n    exponent_diff = -exponent_diff;\n  }\n  mantissa_result = operand1_mantissa;\n  mantissa1_shifted = operand1_exponent;\n  if (bool_var2 && exponent1_shifted <= exponent_result) {\n    exponent1_shifted = exponent1_shifted + exponent_diff;\n    mantissa_result = operand2_mantissa;\n    mantissa1_shifted = operand2_exponent;\n    operand2_mantissa = operand1_mantissa;\n    operand2_exponent = operand1_exponent;\n  }\n  if (0x36 < exponent_diff) {\n    return CONCAT44(mantissa1_shifted,mantissa_result);\n  }\n  exponent_result = mantissa1_shifted & 0xfffff | 0x100000;\n  if ((mantissa1_shifted & 0x80000000) != 0) {\n    bool_var2 = mantissa_result != 0;\n    mantissa_result = -mantissa_result;\n    exponent_result = -exponent_result - (uint)bool_var2;\n  }\n  mantissa1_shifted = operand2_exponent & 0xfffff | 0x100000;\n  if ((operand2_exponent & 0x80000000) != 0) {\n    bool_var2 = operand2_mantissa != 0;\n    operand2_mantissa = -operand2_mantissa;\n    mantissa1_shifted = -mantissa1_shifted - (uint)bool_var2;\n  }\n  if (exponent1_shifted == exponent_diff) {\n    mantissa1_shifted = mantissa1_shifted ^ 0x100000;\n    if (exponent1_shifted == 0) {\n      exponent_result = exponent_result ^ 0x100000;\n      exponent1_shifted = 1;\n    }\n    else {\n      exponent_diff = exponent_diff - 1;\n    }\n  }\n  mantissa_sum = -exponent_diff + 0x20;\n  if ((int)exponent_diff < 0x21) {\n    mantissa_aux = operand2_mantissa << (mantissa_sum & 0xff);\n    operand2_mantissa = operand2_mantissa >> (exponent_diff & 0xff);\n    temp_var3 = mantissa_result + operand2_mantissa;\n    temp_var4 = mantissa1_shifted << (mantissa_sum & 0xff);\n    mantissa_sum = temp_var3 + temp_var4;\n    exponent_result = exponent_result + CARRY4(mantissa_result,operand2_mantissa) + ((int)mantissa1_shifted >> (exponent_diff & 0xff)) +\n            (uint)CARRY4(temp_var3,temp_var4);\n  }\n  else {\n    mantissa_aux = mantissa1_shifted << (-exponent_diff + 0x40 & 0xff);\n    if (operand2_mantissa != 0) {\n      mantissa_aux = mantissa_aux | 2;\n    }\n    mantissa1_shifted = (int)mantissa1_shifted >> (exponent_diff - 0x20 & 0xff);\n    mantissa_sum = mantissa_result + mantissa1_shifted;\n    exponent_result = exponent_result + ((int)mantissa1_shifted >> 0x1f) + (uint)CARRY4(mantissa_result,mantissa1_shifted);\n  }\n  operand1_exponent = exponent_result & 0x80000000;\n  exponent_diff = exponent_result;\n  if ((int)exponent_result < 0) {\n    bool_var2 = mantissa_aux == 0;\n    mantissa_aux = -mantissa_aux;\n    exponent_diff = -mantissa_sum;\n    mantissa_sum = -(uint)!bool_var2 - mantissa_sum;\n    exponent_diff = -(uint)(bool_var2 <= exponent_diff) - exponent_result;\n  }\n  if (0xfffff < exponent_diff) {\n    mantissa_result = exponent1_shifted - 1;\n    if (0x1fffff < exponent_diff) {\n      exponent_result = exponent_diff & 1;\n      exponent_diff = exponent_diff >> 1;\n      temp_byte = (byte)mantissa_sum;\n      mantissa_sum = (uint)(exponent_result != 0) << 0x1f | mantissa_sum >> 1;\n      mantissa_aux = (uint)(temp_byte & 1) << 0x1f | mantissa_aux >> 1;\n      mantissa_result = exponent1_shifted;\n      if (0xffbfffff < exponent1_shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bool_var2 = 0x7fffffff < mantissa_aux;\n    if (mantissa_aux == 0x80000000) {\n      bool_var2 = (mantissa_sum & 1) != 0;\n    }\n    return CONCAT44(exponent_diff + mantissa_result * 0x100000 + (uint)CARRY4(mantissa_sum,(uint)bool_var2) | operand1_exponent,\n                    mantissa_sum + bool_var2);\n  }\n  bool_var1 = (mantissa_aux & 0x80000000) != 0;\n  mantissa_aux = mantissa_aux << 1;\n  mantissa_result = mantissa_sum * 2;\n  bool_var2 = CARRY4(mantissa_sum,mantissa_sum);\n  mantissa_sum = mantissa_sum * 2 + (uint)bool_var1;\n  exponent_diff = exponent_diff * 2 + (uint)(bool_var2 || CARRY4(mantissa_result,(uint)bool_var1));\n  mantissa_result = exponent1_shifted - 2;\n  if ((exponent_diff & 0x100000) != 0) goto LAB_08000278;\n  mantissa1_shifted = mantissa_sum;\n  exponent1_shifted = exponent_diff;\n  if (exponent_diff == 0) {\n    mantissa1_shifted = 0;\n    exponent1_shifted = mantissa_sum;\n  }\n  iVar6 = count_leading_zeroes(exponent1_shifted);\n  if (exponent_diff == 0) {\n    iVar6 = iVar6 + 0x20;\n  }\n  mantissa_sum = iVar6 - 0xb;\n  bool_var3 = SBORROW4(mantissa_sum,0x20);\n  exponent_diff = iVar6 - 0x2b;\n  bool_var2 = (int)exponent_diff < 0;\n  bool_var1 = exponent_diff == 0;\n  if ((int)mantissa_sum < 0x20) {\n    bool_var3 = SCARRY4(exponent_diff,0xc);\n    iVar6 = iVar6 + -0x1f;\n    bool_var2 = iVar6 < 0;\n    bool_var1 = iVar6 == 0;\n    exponent_diff = mantissa_sum;\n    if (!bool_var1 && bool_var2 == bool_var3) {\n      mantissa1_shifted = exponent1_shifted << (mantissa_sum & 0xff);\n      exponent1_shifted = exponent1_shifted >> (0xcU - iVar6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    mantissa_aux = 0x20 - exponent_diff;\n  }\n  exponent1_shifted = exponent1_shifted << (exponent_diff & 0xff);\n  if (bool_var1 || bool_var2 != bool_var3) {\n    exponent1_shifted = exponent1_shifted | mantissa1_shifted >> (mantissa_aux & 0xff);\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    mantissa1_shifted = mantissa1_shifted << (exponent_diff & 0xff);\n  }\nLAB_080002f0:\n  if ((int)mantissa_sum <= (int)mantissa_result) {\n    return CONCAT44(exponent1_shifted + (mantissa_result - mantissa_sum) * 0x100000 | operand1_exponent,mantissa1_shifted);\n  }\n  exponent_diff = ~(mantissa_result - mantissa_sum);\n  if ((int)exponent_diff < 0x1f) {\n    iVar6 = exponent_diff - 0x13;\n    if (iVar6 != 0 && iVar6 < 0 == SCARRY4(exponent_diff - 0x1f,0xc)) {\n      return CONCAT44(exponent_result,mantissa1_shifted >> (0x20 - (0xcU - iVar6) & 0xff) | exponent1_shifted << (0xcU - iVar6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    exponent_diff = exponent_diff + 1;\n    return CONCAT44(operand1_exponent | exponent1_shifted >> (exponent_diff & 0xff),\n                    mantissa1_shifted >> (exponent_diff & 0xff) | exponent1_shifted << (0x20 - exponent_diff & 0xff));\n  }\n  return CONCAT44(exponent_result,exponent1_shifted >> (exponent_diff - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800016c",
            "calling": [
                "FUN_08005c70",
                "FUN_08006070",
                "FUN_08006228",
                "FUN_080071c0",
                "FUN_08006c0c",
                "FUN_08006d68",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "floating_point_addition_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "process_parameters_08001b58",
                "param_1": "input_params",
                "puVar1": "register_ptr",
                "puVar2": "secondary_register_ptr",
                "iVar3": "current_time",
                "iVar4": "previous_time",
                "uVar5": "shift_value"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nundefined4 process_parameters_08001b58(int *input_params)\n\n{\n  uint *register_ptr;\n  uint *secondary_register_ptr;\n  int current_time;\n  int previous_time;\n  uint shift_value;\n  \n  register_ptr = DAT_08001e70;\n  if (*input_params << 0x1f < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      shift_value = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (shift_value & 0x1f)) << 0x1f) < 0) && (input_params[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      previous_time = input_params[1];\n      if (previous_time == 0x10000) {\nLAB_08001c1e:\n        shift_value = *register_ptr | 0x10000;\n      }\n      else {\n        if (previous_time == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *register_ptr = *register_ptr & 0xfffbffff;\n          previous_time = get_undefined4_value_0800115c();\n          while (shift_value = count_leading_zeroes(0x4000),\n                (int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f) < 0) {\n            current_time = get_undefined4_value_0800115c();\n            if (100 < (uint)(current_time - previous_time)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (previous_time == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        shift_value = *register_ptr & 0xfffbffff;\n      }\n      *register_ptr = shift_value;\n      previous_time = get_undefined4_value_0800115c();\n      while (shift_value = count_leading_zeroes(0x4000), -1 < (int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f))\n      {\n        current_time = get_undefined4_value_0800115c();\n        if (100 < (uint)(current_time - previous_time)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  register_ptr = DAT_08001e70;\n  if (*input_params << 0x1e < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      shift_value = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (shift_value & 0x1f)) << 0x1f) < 0) && (input_params[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      if (input_params[4] == 0) {\n        previous_time = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(previous_time * 4 + 0x42420000) = 0;\n        previous_time = get_undefined4_value_0800115c();\n        while (shift_value = count_leading_zeroes(0x40000000),\n              (int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f) < 0) {\n          current_time = get_undefined4_value_0800115c();\n          if (2 < (uint)(current_time - previous_time)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      previous_time = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(previous_time * 4 + 0x42420000) = 1;\n      previous_time = get_undefined4_value_0800115c();\n      while (shift_value = count_leading_zeroes(0x40000000),\n            -1 < (int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f)) {\n        current_time = get_undefined4_value_0800115c();\n        if (2 < (uint)(current_time - previous_time)) {\n          return 3;\n        }\n      }\n    }\n    shift_value = count_leading_zeroes(0x1f000000);\n    *register_ptr = input_params[5] << (shift_value & 0xff) | *register_ptr & 0xffffff07;\n  }\nLAB_08001b6c:\n  register_ptr = DAT_08001e70;\n  if (*input_params << 0x1c < 0) {\n    if (input_params[6] == 0) {\n      previous_time = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + previous_time * 4) = 0;\n      previous_time = get_undefined4_value_0800115c();\n      while (shift_value = count_leading_zeroes(0x40000000),\n            (int)((register_ptr[9] >> (shift_value & 0x1f)) << 0x1f) < 0) {\n        current_time = get_undefined4_value_0800115c();\n        if (2 < (uint)(current_time - previous_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      previous_time = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + previous_time * 4) = 1;\n      previous_time = get_undefined4_value_0800115c();\n      while (shift_value = count_leading_zeroes(0x40000000),\n            -1 < (int)((register_ptr[9] >> (shift_value & 0x1f)) << 0x1f)) {\n        current_time = get_undefined4_value_0800115c();\n        if (2 < (uint)(current_time - previous_time)) {\n          return 3;\n        }\n      }\n      do_nothing_08001168(1);\n    }\n  }\n  secondary_register_ptr = DAT_08001e78;\n  register_ptr = DAT_08001e70;\n  if (-1 < *input_params << 0x1d) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *secondary_register_ptr = *secondary_register_ptr | 0x100;\n  previous_time = get_undefined4_value_0800115c();\n  while (-1 < (int)(*secondary_register_ptr << 0x17)) {\n    current_time = get_undefined4_value_0800115c();\n    if (100 < (uint)(current_time - previous_time)) {\n      return 3;\n    }\n  }\n  previous_time = input_params[3];\n  if (previous_time == 1) {\nLAB_08001e1a:\n    shift_value = register_ptr[8] | 1;\n  }\n  else {\n    if (previous_time == 0) {\n      register_ptr[8] = register_ptr[8] & 0xfffffffe;\n      register_ptr[8] = register_ptr[8] & 0xfffffffb;\n      previous_time = get_undefined4_value_0800115c();\n      while (shift_value = count_leading_zeroes(0x40000000),\n            (int)((register_ptr[8] >> (shift_value & 0x1f)) << 0x1f) < 0) {\n        current_time = get_undefined4_value_0800115c();\n        if (5000 < (uint)(current_time - previous_time)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (previous_time == 5) {\n      register_ptr[8] = register_ptr[8] | 4;\n      goto LAB_08001e1a;\n    }\n    register_ptr[8] = register_ptr[8] & 0xfffffffe;\n    shift_value = register_ptr[8] & 0xfffffffb;\n  }\n  register_ptr[8] = shift_value;\n  previous_time = get_undefined4_value_0800115c();\n  while (shift_value = count_leading_zeroes(0x40000000), -1 < (int)((register_ptr[8] >> (shift_value & 0x1f)) << 0x1f)\n        ) {\n    current_time = get_undefined4_value_0800115c();\n    if (5000 < (uint)(current_time - previous_time)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  register_ptr = DAT_08002004;\n  if (input_params[7] == 0) {\n    return 0;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (input_params[7] != 2) {\n      previous_time = count_leading_zeroes(0x80);\n      *(undefined4 *)(previous_time * 4 + 0x42420000) = 0;\n      previous_time = get_undefined4_value_0800115c();\n      do {\n        shift_value = count_leading_zeroes(0x40);\n        if (-1 < (int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f)) {\n          return 0;\n        }\n        current_time = get_undefined4_value_0800115c();\n      } while ((uint)(current_time - previous_time) < 3);\n      return 3;\n    }\n    previous_time = count_leading_zeroes(0x80);\n    *(undefined4 *)(previous_time * 4 + 0x42420000) = 0;\n    previous_time = get_undefined4_value_0800115c();\n    do {\n      shift_value = count_leading_zeroes(0x40);\n      if (-1 < (int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f)) {\n        shift_value = input_params[8];\n        if (shift_value == 0x10000) {\n          register_ptr[1] = register_ptr[1] & 0xfffdffff | input_params[2];\n        }\n        register_ptr[1] = shift_value | input_params[9] | register_ptr[1] & 0xffc2ffff;\n        previous_time = count_leading_zeroes(0x80);\n        *(undefined4 *)(previous_time * 4 + 0x42420000) = 1;\n        previous_time = get_undefined4_value_0800115c();\n        do {\n          shift_value = count_leading_zeroes(0x40);\n          if ((int)((*register_ptr >> (shift_value & 0x1f)) << 0x1f) < 0) {\n            return 0;\n          }\n          current_time = get_undefined4_value_0800115c();\n        } while ((uint)(current_time - previous_time) < 3);\n        return 3;\n      }\n      current_time = get_undefined4_value_0800115c();\n    } while ((uint)(current_time - previous_time) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b58",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "process_parameters_08001b58"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "calculate_bitwise_operation_08007092",
                "param_1": "inputValue",
                "param_2": "bitMask"
            },
            "code": "\nuint calculateBitwiseOperation_08007092(undefined4 inputValue,uint bitMask)\n\n{\n  return (bitMask | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_operation_08007092"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "iVar2": "tempVar",
                "uVar3": "tempUint",
                "uVar4": "tempUndef",
                "sVar5": "tempShort",
                "puVar6": "dataPointer",
                "puVar7": "newDataPointer",
                "bVar1": "tempByte",
                "bVar8": "tempBool"
            },
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte tempByte;\n  int tempVar;\n  uint tempUint;\n  undefined4 tempUndef;\n  short tempShort;\n  ushort *dataPointer;\n  ushort *newDataPointer;\n  bool tempBool;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  tempVar = *data;\n  dataPointer = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      newDataPointer = dataPointer + 1;\n      *dataPointer = (ushort)((uint)(*(int *)(tempVar + 4) << 0x17) >> 0x17);\n    }\n    else {\n      newDataPointer = (ushort *)((int)dataPointer + 1);\n      *dataPointer = (ushort)*(int *)(tempVar + 4) & 0xff;\n    }\n    data[10] = (int)newDataPointer;\n  }\n  else {\n    if (data[4] == 0) {\n      tempByte = (byte)*(undefined4 *)(tempVar + 4);\n      data[10] = (int)dataPointer + 1;\n    }\n    else {\n      tempUndef = *(undefined4 *)(tempVar + 4);\n      data[10] = (int)dataPointer + 1;\n      tempByte = (byte)tempUndef & 0x7f;\n    }\n    *(byte *)dataPointer = tempByte;\n  }\n  tempShort = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = tempShort;\n  if (tempShort == 0) {\n    tempVar = *data;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) & 0xffffffdf;\n    tempUint = (uint)*(byte *)((int)data + 0x39);\n    tempBool = tempUint != 0x32;\n    if (tempBool) {\n      tempUint = *(uint *)(tempVar + 0xc) & 0xfffffeff;\n    }\n    else {\n      tempVar = 0x12;\n    }\n    if (tempBool) {\n      *(uint *)(tempVar + 0xc) = tempUint;\n      tempUint = *(uint *)(tempVar + 0x14) & 0xfffffffe;\n    }\n    if (tempBool) {\n      *(uint *)(tempVar + 0x14) = tempUint;\n      tempVar = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)tempVar;\n    process_buffer_08004c30();\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004c30"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "process_data_0800290c"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "process_and_update_sensor_data_08002f28",
                "sVar1": "shortVar1",
                "puVar2": "ptrVar2",
                "puVar3": "ptrVar3",
                "puVar4": "ptrVar4",
                "uVar5": "undefinedVar5",
                "iVar6": "intVar6",
                "uVar7": "undefinedVar7",
                "iVar8": "intVar8"
            },
            "code": "\nvoid process_and_update_sensor_data_08002f28(void)\n\n{\n  short shortVar1;\n  undefined *ptrVar2;\n  undefined *ptrVar3;\n  undefined *ptrVar4;\n  undefined2 undefinedVar5;\n  int intVar6;\n  undefined4 undefinedVar7;\n  int intVar8;\n  \n  process_sensor_data_08002b48();\n  process_sensor_data_08002bf0();\n  process_sensor_data_08002d88();\n  intVar6 = thunk_get_undefined4_value_0800115c();\n  ptrVar3 = PTR_DAT_08003004;\n  ptrVar2 = PTR_DAT_08003000;\n  intVar8 = *(int *)PTR_DAT_08003000;\n  *(int *)PTR_DAT_08003004 = intVar6;\n  undefinedVar7 = calculate_transformed_value_08000c3c(intVar6 - intVar8);\n  floating_point_division_08000e54(undefinedVar7,DAT_08003008);\n  update_global_variable_08003320();\n  ptrVar4 = PTR_DAT_0800300c;\n  *(undefined4 *)ptrVar2 = *(undefined4 *)ptrVar3;\n  FUNC_08003330(*(int *)(ptrVar4 + 4) + -0x80000000,*(int *)ptrVar4 + -0x80000000,\n               *(undefined4 *)(ptrVar4 + 8),*(undefined4 *)(PTR_DAT_08003018 + 4),\n               *(undefined4 *)PTR_DAT_08003018,*(int *)(PTR_DAT_08003018 + 8) + -0x80000000,\n               *(undefined4 *)PTR_DAT_08003014,*(undefined4 *)(PTR_DAT_08003014 + 4),\n               *(undefined4 *)(PTR_DAT_08003014 + 8),PTR_DAT_08003010);\n  ptrVar4 = PTR_DAT_08003024;\n  ptrVar3 = PTR_DAT_08003020;\n  ptrVar2 = PTR_DAT_0800301c;\n  *(short *)PTR_DAT_08003020 = (short)((uint)(int)*(short *)PTR_DAT_0800301c / 100);\n  shortVar1 = *(short *)(ptrVar2 + 2);\n  *(short *)(ptrVar3 + 4) = (short)((uint)(int)*(short *)(ptrVar2 + 4) / 100);\n  ptrVar2 = PTR_DAT_08003028;\n  *(short *)(ptrVar3 + 2) = (short)((uint)(int)shortVar1 / 100);\n  *(undefined2 *)(ptrVar3 + 6) = *(undefined2 *)ptrVar2;\n  undefinedVar5 = *(undefined2 *)(ptrVar2 + 4);\n  *(undefined2 *)(ptrVar3 + 8) = *(undefined2 *)(ptrVar2 + 2);\n  *(undefined2 *)(ptrVar3 + 10) = undefinedVar5;\n  ptrVar2 = PTR_DAT_0800302c;\n  *(undefined2 *)(ptrVar3 + 0xc) = *(undefined2 *)PTR_DAT_0800302c;\n  undefinedVar5 = *(undefined2 *)(ptrVar2 + 4);\n  *(undefined2 *)(ptrVar3 + 0xe) = *(undefined2 *)(ptrVar2 + 2);\n  *(undefined2 *)(ptrVar3 + 0x10) = undefinedVar5;\n  undefinedVar7 = process_data_08002ed4();\n  float_multiplication_08000cec(undefinedVar7,DAT_08003030);\n  undefinedVar5 = calculate_transformed_value_08001078();\n  *(undefined2 *)ptrVar4 = undefinedVar5;\n  undefinedVar7 = calculate_updated_value_08002ec0();\n  float_multiplication_08000cec(undefinedVar7,DAT_08003030);\n  undefinedVar5 = calculate_transformed_value_08001078();\n  *(undefined2 *)(ptrVar4 + 2) = undefinedVar5;\n  process_data_08002ee8();\n  undefinedVar5 = calculate_transformed_value_08001078();\n  *(undefined2 *)(ptrVar4 + 4) = undefinedVar5;\n  return;\n}\n\n",
            "called": [
                "FUN_08003320",
                "FUN_08003330",
                "FUN_08002b48",
                "FUN_08002ed4",
                "FUN_08002bf0",
                "FUN_08002d88",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08001078",
                "thunk_FUN_0800115c",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08002ec0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_and_update_sensor_data_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "process_data_08004384",
                "param_1": "input_data",
                "param_2": "input_size",
                "param_3": "output_buffer",
                "param_4": "flags",
                "puVar1": "data_ptr",
                "local_14": "data_value_1",
                "uStack_10": "data_value_2",
                "local_c": "masked_flags"
            },
            "code": "\nvoid process_data_08004384(undefined4 input_data,undefined4 input_size,undefined4 output_buffer,uint flags)\n\n{\n  undefined *data_ptr;\n  undefined4 data_value_1;\n  undefined4 data_value_2;\n  uint masked_flags;\n  \n  data_ptr = PTR_DAT_080043b8;\n  PTR_DAT_080043b8[4] = 7;\n  data_ptr[5] = 0;\n  data_ptr[6] = 0x2a;\n  data_ptr[7] = 0;\n  data_value_1 = *(undefined4 *)data_ptr;\n  data_value_2 = *(undefined4 *)(data_ptr + 4);\n  data_ptr[8] = 0;\n  data_ptr[9] = 0;\n  data_ptr[10] = 0;\n  masked_flags = flags & 0xff000000 | (uint)*(ushort *)(data_ptr + 8);\n  process_encrypted_data_08004300(0x65,&data_value_1,0xb,*(ushort *)(data_ptr + 8),input_data);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "is_not_zero_080009a0",
                "in_ZR": "inputChar"
            },
            "code": "\nbool isNotZero_080009a0(void)\n\n{\n  char inputChar;\n  \n  compare_and_return_08000990();\n  return inputChar != '\\0';\n}\n\n",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "is_not_zero_080009a0"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "FUN_0800299a"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "process_data_and_update_buffers_08003298",
                "puVar1": "srcData",
                "puVar2": "dataBuffer",
                "puVar3": "resetBuffer",
                "iVar4": "index",
                "local_1c": "highByte",
                "local_1b": "lowByte"
            },
            "code": "\nvoid processDataAndUpdateBuffers_08003298(void)\n\n{\n  undefined *srcData;\n  undefined *dataBuffer;\n  undefined *resetBuffer;\n  int index;\n  undefined highByte;\n  undefined lowByte;\n  \n  index = 0;\n  process_request_0800403c(0xee,0x1e,1);\n  thunk_do_nothing_08001168(10);\n  dataBuffer = PTR_DAT_0800330c;\n  srcData = PTR_s____Src_MS5611_c_08003308;\n  *PTR_DAT_08003304 = 8;\n  do {\n    highByte = 0;\n    lowByte = 0;\n    process_data_sequence_080040e8(0xee,index + 0xa0U & 0xffff,&highByte,2,srcData,0x7c);\n    *(ushort *)(dataBuffer + index) = CONCAT11(highByte,lowByte);\n    resetBuffer = PTR_DAT_08003310;\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    *(undefined4 *)(resetBuffer + index * 4) = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "called": [
                "FUN_080040e8",
                "FUN_0800403c",
                "thunk_FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "process_data_and_update_buffers_08003298"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "process_encrypted_data_08004300",
                "param_1": "encryption_key",
                "param_2": "encrypted_data",
                "param_3": "data_length",
                "uVar1": "xor_result",
                "pbVar2": "current_byte"
            },
            "code": "\nvoid process_encrypted_data_08004300(uint encryption_key,byte *encrypted_data,uint data_length)\n\n{\n  uint xor_result;\n  byte *current_byte;\n  \n  process_string_08004c8c(PTR_DAT_08004344);\n  process_data_08004c18(data_length & 0xff);\n  xor_result = data_length & 0xff ^ encryption_key;\n  process_data_08004c18(encryption_key);\n  for (current_byte = encrypted_data; (int)current_byte - (int)encrypted_data < (int)data_length; current_byte = current_byte + 1) {\n    process_data_08004c18(*current_byte);\n    xor_result = xor_result ^ *current_byte;\n  }\n  process_data_08004c18(xor_result);\n  return;\n}\n\n",
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "FUN_080043bc",
                "FUN_08004458",
                "FUN_08004348",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_08004384",
                "FUN_08004434"
            ],
            "imported": false,
            "current_name": "process_encrypted_data_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "copy_array_08005630",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "sourceEnd",
                "puVar2": "destinationPtr"
            },
            "code": "\nvoid copyArray_08005630(int destination,undefined *source,int length)\n\n{\n  undefined *sourceEnd;\n  undefined *destinationPtr;\n  \n  destinationPtr = (undefined *)(destination + -1);\n  sourceEnd = source + length;\n  for (; source != sourceEnd; source = source + 1) {\n    destinationPtr = destinationPtr + 1;\n    *destinationPtr = *source;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "copy_array_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined4 param_9,undefined4 *param_10)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  \n  uVar28 = *(undefined4 *)PTR_DAT_080035d8;\n  iVar29 = *(int *)(PTR_DAT_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_DAT_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_DAT_080035d8 + 0xc);\n  uVar2 = float_multiplication_08000cec(param_1,param_1);\n  uVar3 = float_multiplication_08000cec(param_2);\n  uVar2 = process_floating_point_08000adc(uVar2,uVar3);\n  uVar3 = float_multiplication_08000cec(param_3);\n  process_floating_point_08000adc(uVar2,uVar3);\n  calculate_result_08000428();\n  process_calculation_08005bc8();\n  uVar2 = calculate_result_08000a30();\n  iVar4 = check_combination_validity_08001014(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = float_multiplication_08000cec(param_7);\n    uVar5 = float_multiplication_08000cec(param_8);\n    uVar3 = process_floating_point_08000adc(uVar3,uVar5);\n    uVar5 = float_multiplication_08000cec(param_9);\n    process_floating_point_08000adc(uVar3,uVar5);\n    calculate_result_08000428();\n    process_calculation_08005bc8();\n    uVar3 = calculate_result_08000a30();\n    iVar4 = check_combination_validity_08001014(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = calculate_result_08000428(param_4);\n      calculate_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = calculate_result_08000a30();\n      uVar32 = calculate_result_08000428(param_5);\n      calculate_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = calculate_result_08000a30();\n      uVar32 = calculate_result_08000428(param_6);\n      calculate_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = calculate_result_08000a30();\n      iVar4 = process_floating_point_08000adc(uVar28);\n      uVar8 = process_floating_point_08000adc(iVar29);\n      iVar9 = process_floating_point_08000adc(uVar31,uVar31);\n      uVar10 = process_floating_point_08000adc(uVar30,uVar30);\n      uVar11 = float_multiplication_08000cec(uVar28);\n      uVar12 = float_multiplication_08000cec(uVar28,iVar29);\n      uVar13 = float_multiplication_08000cec(uVar28,uVar31);\n      uVar14 = float_multiplication_08000cec(iVar29);\n      uVar15 = float_multiplication_08000cec(iVar29,uVar30);\n      uVar16 = float_multiplication_08000cec(uVar31,uVar31);\n      uVar17 = float_multiplication_08000cec(uVar30,uVar30);\n      uVar2 = floating_point_division_08000e54(0x3f800000,uVar2);\n      uVar3 = floating_point_division_08000e54(0x3f800000,uVar3);\n      uVar18 = float_multiplication_08000cec(param_7,uVar3);\n      uVar19 = float_multiplication_08000cec(param_8,uVar3);\n      uVar3 = float_multiplication_08000cec(param_9,uVar3);\n      iVar20 = float_multiplication_08000cec(iVar4,uVar18);\n      uVar21 = float_multiplication_08000cec(iVar4,uVar19);\n      uVar22 = float_multiplication_08000cec(iVar4,uVar3);\n      uVar23 = float_multiplication_08000cec(uVar8,uVar18);\n      uVar24 = float_multiplication_08000cec(uVar11,uVar18);\n      uVar25 = float_multiplication_08000cec(uVar30,uVar21);\n      uVar24 = calculate_result_08000ad8(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar31,uVar22);\n      uVar24 = process_floating_point_08000adc(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar14,uVar18);\n      uVar24 = process_floating_point_08000adc(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar8,uVar19);\n      uVar25 = float_multiplication_08000cec(uVar25,uVar31);\n      uVar24 = process_floating_point_08000adc(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar8,uVar3);\n      uVar25 = float_multiplication_08000cec(uVar25,uVar30);\n      uVar24 = process_floating_point_08000adc(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar16,uVar18);\n      uVar24 = calculate_result_08000ad8(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar17,uVar18);\n      uVar24 = calculate_result_08000ad8(uVar24,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar30,iVar20);\n      uVar26 = float_multiplication_08000cec(uVar11,uVar19);\n      uVar25 = process_floating_point_08000adc(uVar25,uVar26);\n      uVar22 = float_multiplication_08000cec(iVar29,uVar22);\n      uVar22 = calculate_result_08000ad8(uVar25,uVar22);\n      uVar25 = float_multiplication_08000cec(uVar31,uVar23);\n      uVar22 = process_floating_point_08000adc(uVar22,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar14,uVar19);\n      uVar22 = calculate_result_08000ad8(uVar22,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar16,uVar19);\n      uVar22 = process_floating_point_08000adc(uVar22,uVar25);\n      uVar25 = float_multiplication_08000cec(iVar9,uVar3);\n      uVar25 = float_multiplication_08000cec(uVar25,uVar30);\n      uVar22 = process_floating_point_08000adc(uVar22,uVar25);\n      uVar25 = float_multiplication_08000cec(uVar17,uVar19);\n      uVar22 = calculate_result_08000ad8(uVar22,uVar25);\n      uVar24 = float_multiplication_08000cec(uVar24,uVar24);\n      uVar22 = float_multiplication_08000cec(uVar22,uVar22);\n      process_floating_point_08000adc(uVar24,uVar22);\n      calculate_result_08000428();\n      process_calculation_08005bc8();\n      iVar27 = calculate_result_08000a30();\n      uVar22 = float_multiplication_08000cec(iVar20 + -0x80000000,uVar31);\n      uVar21 = float_multiplication_08000cec(iVar29,uVar21);\n      uVar21 = process_floating_point_08000adc(uVar22,uVar21);\n      uVar11 = float_multiplication_08000cec(uVar11,uVar3);\n      uVar11 = process_floating_point_08000adc(uVar21,uVar11);\n      uVar21 = float_multiplication_08000cec(uVar30,uVar23);\n      uVar11 = process_floating_point_08000adc(uVar11,uVar21);\n      uVar21 = float_multiplication_08000cec(uVar14,uVar3);\n      uVar11 = calculate_result_08000ad8(uVar11,uVar21);\n      uVar21 = float_multiplication_08000cec(iVar9,uVar19);\n      uVar21 = float_multiplication_08000cec(uVar21,uVar30);\n      uVar11 = process_floating_point_08000adc(uVar11,uVar21);\n      uVar21 = float_multiplication_08000cec(uVar16,uVar3);\n      uVar11 = calculate_result_08000ad8(uVar11,uVar21);\n      uVar21 = float_multiplication_08000cec(uVar17,uVar3);\n      uVar11 = process_floating_point_08000adc(uVar11,uVar21);\n      uVar21 = process_floating_point_08000adc(uVar11,uVar11);\n      uVar22 = process_floating_point_08000adc(uVar15);\n      uVar23 = float_multiplication_08000cec(uVar31,iVar4);\n      uVar22 = calculate_result_08000ad8(uVar22,uVar23);\n      uVar23 = float_multiplication_08000cec(param_1,uVar2);\n      uVar22 = calculate_result_08000ad8(uVar22,uVar23);\n      uVar23 = float_multiplication_08000cec(uVar30,iVar9);\n      uVar24 = process_floating_point_08000adc(uVar12);\n      uVar23 = process_floating_point_08000adc(uVar23,uVar24);\n      uVar24 = float_multiplication_08000cec(param_2,uVar2);\n      uVar23 = calculate_result_08000ad8(uVar23,uVar24);\n      uVar24 = float_multiplication_08000cec(uVar31,uVar11);\n      uVar25 = calculate_result_08000ad8(0x3f000000,uVar16);\n      uVar17 = calculate_result_08000ad8(uVar25,uVar17);\n      uVar17 = float_multiplication_08000cec(uVar17,iVar27);\n      uVar25 = calculate_result_08000ad8(uVar15,uVar13);\n      uVar25 = float_multiplication_08000cec(uVar25,uVar11);\n      uVar17 = process_floating_point_08000adc(uVar17,uVar25);\n      uVar17 = calculate_result_08000ad8(uVar17,uVar18);\n      uVar18 = float_multiplication_08000cec(iVar29,uVar11);\n      uVar25 = float_multiplication_08000cec(iVar29,uVar31);\n      uVar26 = float_multiplication_08000cec(uVar28,uVar30);\n      uVar25 = calculate_result_08000ad8(uVar25,uVar26);\n      uVar25 = float_multiplication_08000cec(uVar25,iVar27);\n      uVar26 = float_multiplication_08000cec(uVar31,uVar30);\n      uVar12 = process_floating_point_08000adc(uVar26,uVar12);\n      uVar12 = float_multiplication_08000cec(uVar12,uVar11);\n      uVar12 = process_floating_point_08000adc(uVar25,uVar12);\n      uVar12 = calculate_result_08000ad8(uVar12,uVar19);\n      uVar19 = float_multiplication_08000cec(uVar31,iVar27);\n      uVar25 = calculate_result_08000ad8(0x3f000000,uVar14);\n      uVar25 = calculate_result_08000ad8(uVar25,uVar16);\n      uVar25 = float_multiplication_08000cec(uVar25,uVar11);\n      uVar13 = process_floating_point_08000adc(uVar13,uVar15);\n      uVar13 = float_multiplication_08000cec(uVar13,iVar27);\n      uVar13 = process_floating_point_08000adc(uVar25,uVar13);\n      uVar3 = calculate_result_08000ad8(uVar13,uVar3);\n      uVar13 = float_multiplication_08000cec(iVar9 + -0x80000000,uVar22);\n      uVar15 = float_multiplication_08000cec(uVar8,uVar23);\n      uVar13 = process_floating_point_08000adc(uVar13,uVar15);\n      uVar15 = float_multiplication_08000cec(uVar24,uVar17);\n      uVar13 = calculate_result_08000ad8(uVar13,uVar15);\n      uVar15 = float_multiplication_08000cec(uVar30,iVar27 + -0x80000000);\n      uVar15 = process_floating_point_08000adc(uVar15,uVar18);\n      uVar15 = float_multiplication_08000cec(uVar15,uVar12);\n      uVar13 = process_floating_point_08000adc(uVar13,uVar15);\n      uVar15 = float_multiplication_08000cec(uVar19,uVar3);\n      uVar13 = process_floating_point_08000adc(uVar13,uVar15);\n      uVar14 = process_floating_point_08000adc(uVar14);\n      uVar14 = calculate_result_08000ad8(0x3f800000,uVar14);\n      uVar15 = process_floating_point_08000adc(uVar16);\n      uVar14 = calculate_result_08000ad8(uVar14,uVar15);\n      uVar2 = float_multiplication_08000cec(param_3,uVar2);\n      uVar2 = calculate_result_08000ad8(uVar14,uVar2);\n      uVar14 = float_multiplication_08000cec(uVar30,uVar11);\n      uVar11 = float_multiplication_08000cec(uVar28,uVar11);\n      uVar15 = float_multiplication_08000cec(uVar10,uVar22);\n      uVar16 = float_multiplication_08000cec(iVar4,uVar23);\n      uVar15 = process_floating_point_08000adc(uVar15,uVar16);\n      uVar16 = float_multiplication_08000cec(iVar29,0x40800000);\n      uVar16 = float_multiplication_08000cec(uVar16,uVar2);\n      uVar15 = calculate_result_08000ad8(uVar15,uVar16);\n      uVar16 = float_multiplication_08000cec(uVar17,uVar14);\n      uVar15 = process_floating_point_08000adc(uVar15,uVar16);\n      uVar16 = process_floating_point_08000adc(uVar19,uVar11);\n      uVar16 = float_multiplication_08000cec(uVar16,uVar12);\n      uVar15 = process_floating_point_08000adc(uVar15,uVar16);\n      uVar16 = float_multiplication_08000cec(uVar30,iVar27);\n      uVar19 = float_multiplication_08000cec(iVar29,uVar21);\n      uVar16 = calculate_result_08000ad8(uVar16,uVar19);\n      uVar16 = float_multiplication_08000cec(uVar16,uVar3);\n      uVar15 = process_floating_point_08000adc(uVar15,uVar16);\n      iVar20 = process_floating_point_08000adc(iVar27,iVar27);\n      uVar16 = float_multiplication_08000cec(iVar29,iVar27);\n      uVar19 = float_multiplication_08000cec(iVar4 + -0x80000000,uVar22);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar23);\n      uVar10 = process_floating_point_08000adc(uVar19,uVar10);\n      uVar19 = float_multiplication_08000cec(uVar31,0x40800000);\n      uVar2 = float_multiplication_08000cec(uVar19,uVar2);\n      uVar2 = calculate_result_08000ad8(uVar10,uVar2);\n      uVar10 = float_multiplication_08000cec(uVar31,iVar20 + -0x80000000);\n      uVar10 = calculate_result_08000ad8(uVar10,uVar11);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar17);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar10);\n      uVar10 = process_floating_point_08000adc(uVar14,uVar16);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar12);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar10);\n      uVar10 = float_multiplication_08000cec(uVar28,iVar27);\n      uVar11 = float_multiplication_08000cec(uVar31,uVar21);\n      uVar10 = calculate_result_08000ad8(uVar10,uVar11);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar3);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar10);\n      uVar8 = float_multiplication_08000cec(uVar8,uVar22);\n      uVar10 = float_multiplication_08000cec(iVar9,uVar23);\n      uVar8 = process_floating_point_08000adc(uVar8,uVar10);\n      uVar10 = float_multiplication_08000cec(uVar30,iVar20 + -0x80000000);\n      uVar10 = process_floating_point_08000adc(uVar10,uVar18);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar17);\n      uVar8 = process_floating_point_08000adc(uVar8,uVar10);\n      uVar10 = float_multiplication_08000cec(uVar28,iVar27 + -0x80000000);\n      uVar10 = process_floating_point_08000adc(uVar10,uVar24);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar12);\n      uVar8 = process_floating_point_08000adc(uVar8,uVar10);\n      uVar3 = float_multiplication_08000cec(uVar3,uVar16);\n      uVar3 = process_floating_point_08000adc(uVar8,uVar3);\n      uVar8 = float_multiplication_08000cec(uVar13);\n      uVar10 = float_multiplication_08000cec(uVar15);\n      uVar8 = process_floating_point_08000adc(uVar8,uVar10);\n      uVar10 = float_multiplication_08000cec(uVar2,uVar2);\n      uVar8 = process_floating_point_08000adc(uVar8,uVar10);\n      uVar10 = float_multiplication_08000cec(uVar3,uVar3);\n      process_floating_point_08000adc(uVar8,uVar10);\n      calculate_result_08000428();\n      process_calculation_08005bc8();\n      uVar8 = calculate_result_08000a30();\n      uVar8 = floating_point_division_08000e54(0x3f800000,uVar8);\n      puVar1 = PTR_DAT_08003d84;\n      uVar12 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar14 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar16 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar17 = *(undefined4 *)PTR_DAT_08003d80;\n      uVar10 = float_multiplication_08000cec(iVar29 + -0x80000000,uVar5);\n      uVar11 = float_multiplication_08000cec(uVar31,uVar6);\n      uVar10 = calculate_result_08000ad8(uVar10,uVar11);\n      uVar11 = float_multiplication_08000cec(uVar30,uVar7);\n      uVar10 = calculate_result_08000ad8(uVar10,uVar11);\n      uVar10 = float_multiplication_08000cec(uVar10,0x3f000000);\n      uVar11 = float_multiplication_08000cec(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = float_multiplication_08000cec(uVar11,uVar12);\n      uVar10 = calculate_result_08000ad8(uVar10,uVar11);\n      uVar10 = float_multiplication_08000cec(uVar10,uVar13);\n      uVar10 = process_floating_point_08000adc(uVar10,uVar28);\n      uVar11 = float_multiplication_08000cec(uVar28,uVar5);\n      uVar12 = float_multiplication_08000cec(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = process_floating_point_08000adc(uVar11,uVar12);\n      uVar12 = float_multiplication_08000cec(uVar30,uVar6);\n      uVar11 = calculate_result_08000ad8(uVar11,uVar12);\n      uVar11 = float_multiplication_08000cec(uVar11,0x3f000000);\n      uVar12 = float_multiplication_08000cec(uVar15,uVar8);\n      uVar12 = float_multiplication_08000cec(uVar12,uVar14);\n      uVar11 = calculate_result_08000ad8(uVar11,uVar12);\n      uVar11 = float_multiplication_08000cec(uVar11,uVar13);\n      uVar11 = process_floating_point_08000adc(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = float_multiplication_08000cec(uVar28,uVar6);\n      uVar13 = float_multiplication_08000cec(iVar29,uVar7);\n      uVar12 = calculate_result_08000ad8(uVar12,uVar13);\n      uVar13 = float_multiplication_08000cec(uVar30,uVar5);\n      uVar12 = process_floating_point_08000adc(uVar12,uVar13);\n      uVar12 = float_multiplication_08000cec(uVar12,0x3f000000);\n      uVar2 = float_multiplication_08000cec(uVar2,uVar8);\n      uVar2 = float_multiplication_08000cec(uVar2,uVar16);\n      uVar2 = calculate_result_08000ad8(uVar12,uVar2);\n      uVar2 = float_multiplication_08000cec(uVar2,uVar14);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar31);\n      uVar28 = float_multiplication_08000cec(uVar28,uVar7);\n      uVar6 = float_multiplication_08000cec(iVar29,uVar6);\n      uVar28 = process_floating_point_08000adc(uVar28,uVar6);\n      uVar31 = float_multiplication_08000cec(uVar31,uVar5);\n      uVar28 = calculate_result_08000ad8(uVar28,uVar31);\n      uVar28 = float_multiplication_08000cec(uVar28,0x3f000000);\n      uVar3 = float_multiplication_08000cec(uVar3,uVar8);\n      uVar3 = float_multiplication_08000cec(uVar3,uVar17);\n      uVar31 = *(undefined4 *)puVar1;\n      uVar3 = calculate_result_08000ad8(uVar28,uVar3);\n      uVar3 = float_multiplication_08000cec(uVar3,uVar31);\n      uVar3 = process_floating_point_08000adc(uVar3,uVar30);\n      uVar28 = float_multiplication_08000cec(uVar10,uVar10);\n      uVar30 = float_multiplication_08000cec(uVar11,uVar11);\n      uVar28 = process_floating_point_08000adc(uVar28,uVar30);\n      uVar30 = float_multiplication_08000cec(uVar2,uVar2);\n      uVar28 = process_floating_point_08000adc(uVar28,uVar30);\n      uVar30 = float_multiplication_08000cec(uVar3,uVar3);\n      process_floating_point_08000adc(uVar28,uVar30);\n      calculate_result_08000428();\n      process_calculation_08005bc8();\n      uVar28 = calculate_result_08000a30();\n      uVar28 = floating_point_division_08000e54(0x3f800000,uVar28);\n      uVar30 = float_multiplication_08000cec(uVar10,uVar28);\n      puVar1 = PTR_DAT_08003d88;\n      *(undefined4 *)PTR_DAT_08003d88 = uVar30;\n      uVar31 = float_multiplication_08000cec(uVar11,uVar28);\n      *(undefined4 *)(puVar1 + 4) = uVar31;\n      uVar2 = float_multiplication_08000cec(uVar2,uVar28);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = float_multiplication_08000cec(uVar3,uVar28);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = float_multiplication_08000cec(uVar31,uVar3);\n      uVar2 = float_multiplication_08000cec(uVar30,uVar2);\n      uVar2 = calculate_result_08000ad8(uVar3,uVar2);\n      process_floating_point_08000adc(uVar2,uVar2);\n      calculate_result_08000428();\n      uVar32 = process_data_08005854();\n      uVar32 = calculate_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003d8c);\n      floating_point_operation_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = calculate_result_08000a30();\n      *param_10 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = float_multiplication_08000cec(uVar31,uVar31);\n      uVar3 = float_multiplication_08000cec(uVar5,uVar5);\n      uVar2 = calculate_result_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = float_multiplication_08000cec(uVar28,uVar28);\n      uVar2 = calculate_result_08000ad8(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = float_multiplication_08000cec(uVar30,uVar30);\n      process_floating_point_08000adc(uVar2,uVar3);\n      uVar32 = calculate_result_08000428();\n      uVar2 = float_multiplication_08000cec(uVar31,uVar5);\n      uVar3 = float_multiplication_08000cec(uVar28,uVar30);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar3);\n      process_floating_point_08000adc(uVar2,uVar2);\n      uVar33 = calculate_result_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = calculate_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      floating_point_operation_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_result_08000a30();\n      param_10[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = float_multiplication_08000cec(uVar30,uVar30);\n      uVar3 = float_multiplication_08000cec(uVar31,uVar31);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = float_multiplication_08000cec(uVar5,uVar5);\n      uVar2 = calculate_result_08000ad8(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = float_multiplication_08000cec(uVar28,uVar28);\n      calculate_result_08000ad8(uVar2,uVar3);\n      uVar32 = calculate_result_08000428();\n      uVar2 = float_multiplication_08000cec(uVar31,uVar5);\n      uVar3 = float_multiplication_08000cec(uVar30,uVar28);\n      uVar2 = process_floating_point_08000adc(uVar2,uVar3);\n      process_floating_point_08000adc(uVar2,uVar2);\n      uVar33 = calculate_result_08000428();\n      uVar32 = thunk_calculate_result_08006070((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                                  (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = calculate_result_080004d0((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      floating_point_operation_08000724((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = calculate_result_08000a30();\n      param_10[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000e54",
                "FUN_08000a30",
                "FUN_08001014",
                "FUN_08000cec",
                "thunk_FUN_08006070",
                "FUN_08000ad8",
                "FUN_08000428",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000adc",
                "FUN_080004d0",
                "FUN_08000724"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "compare_parameters_08000980",
                "param_1": "first_input",
                "param_2": "second_input",
                "param_3": "third_input",
                "param_4": "fourth_input"
            },
            "code": "\nvoid compare_parameters_08000980(undefined4 first_input,undefined4 second_input,undefined4 third_input,undefined4 fourth_input)\n\n{\n  compare_and_return_08000990(third_input,fourth_input,first_input,second_input);\n  return;\n}\n\n",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "FUN_080009f0"
            ],
            "imported": false,
            "current_name": "compare_parameters_08000980"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "process_system_updates_08004028",
                "iVar1": "iteration_count"
            },
            "code": "\nvoid process_system_updates_08004028(void)\n\n{\n  int iteration_count;\n  \n  initialize_and_update_system_0800458c();\n  update_multiple_status_flags_08003ff4();\n  iteration_count = 3;\n  do {\n    update_leading_zeroes_08003f3c(1,0);\n    thunk_do_nothing_08001168(100);\n    update_leading_zeroes_08003f3c(0,1);\n    thunk_do_nothing_08001168(100);\n    update_leading_zeroes_08003f3c(0,0,1);\n    thunk_do_nothing_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  update_leading_zeroes_08003f3c(1,1);\n  return;\n}\n\n",
            "called": [
                "FUN_0800458c",
                "FUN_08003f3c",
                "thunk_FUN_08001168",
                "FUN_08003ff4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "process_system_updates_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "do_nothing_0800708c"
            },
            "code": "\nvoid do_nothing_0800708c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "FUN_08005c70",
                "FUN_08006070",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "do_nothing_0800708c"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "update_parameters_08002368",
                "param_1": "inputParam",
                "param_2": "updateValues",
                "uVar1": "tempVar",
                "puVar2": "tempPointer"
            },
            "code": "\nvoid updateParameters_08002368(uint *inputParam,uint *updateValues)\n\n{\n  uint tempVar;\n  uint *tempPointer;\n  \n  tempVar = *inputParam;\n  if ((((inputParam == DAT_080023cc) || (inputParam == (uint *)0x40000000)) ||\n      (inputParam == DAT_080023cc + -0x4a00)) || (inputParam == DAT_080023cc + -0x4900)) {\n    tempVar = tempVar & 0xffffff8f | updateValues[1];\n    if (((inputParam == DAT_080023cc) || (inputParam == (uint *)0x40000000)) ||\n       ((inputParam == DAT_080023cc + -0x4a00 || (inputParam == DAT_080023cc + -0x4900)))) {\n      tempVar = tempVar & 0xfffffcff | updateValues[3];\n    }\n  }\n  *inputParam = tempVar;\n  inputParam[0xb] = updateValues[2];\n  inputParam[10] = *updateValues;\n  tempPointer = DAT_080023cc;\n  if (inputParam == DAT_080023cc) {\n    tempPointer = (uint *)updateValues[4];\n  }\n  if (inputParam == DAT_080023cc) {\n    inputParam[0xc] = (uint)tempPointer;\n  }\n  inputParam[5] = 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_parameters_08002368"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "update_bit_field_08002520",
                "param_1": "baseAddress",
                "param_2": "bitIndex",
                "param_3": "newValue"
            },
            "code": "\nvoid updateBitField_08002520(int baseAddress,uint bitIndex,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(baseAddress + 0x20) = newValue << (bitIndex & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "FUN_08002538"
            ],
            "imported": false,
            "current_name": "update_bit_field_08002520"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_result_08002008",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "condition_var",
                "uVar4": "leading_zeroes_count",
                "uVar5": "result",
                "puVar6": "source_ptr",
                "puVar7": "dest_ptr",
                "local_24": "multiplier_array",
                "local_20": "copied_data"
            },
            "code": "\nuint calculate_result_08002008(void)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  uint condition_var;\n  uint leading_zeroes_count;\n  uint result;\n  undefined4 *source_ptr;\n  undefined4 *dest_ptr;\n  byte multiplier_array [4];\n  undefined4 copied_data [5];\n  \n  dest_ptr = copied_data;\n  source_ptr = (undefined4 *)PTR_DAT_0800208c;\n  do {\n    temp_var1 = *source_ptr;\n    temp_var2 = source_ptr[1];\n    source_ptr = source_ptr + 2;\n    *dest_ptr = temp_var1;\n    dest_ptr[1] = temp_var2;\n    dest_ptr = dest_ptr + 2;\n  } while (source_ptr != (undefined4 *)(PTR_DAT_0800208c + 0x10));\n  multiplier_array[0] = 1;\n  multiplier_array[1] = 2;\n  condition_var = *(uint *)(DAT_08002090 + 4);\n  result = DAT_08002094;\n  if ((condition_var & 0xc) == 8) {\n    leading_zeroes_count = count_leading_zeroes(0x3c00);\n    result = DAT_08002098;\n    if ((int)(condition_var << 0xf) < 0) {\n      result = count_leading_zeroes(0x4000);\n      result = DAT_08002094 / multiplier_array[(*(uint *)(DAT_08002090 + 4) & 0x20000) >> (result & 0xff)];\n    }\n    result = result * *(byte *)((int)copied_data + ((condition_var & 0x3c0000) >> (leading_zeroes_count & 0xff)));\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "FUN_0800209c"
            ],
            "imported": false,
            "current_name": "calculate_result_08002008"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "update_registers_08002404",
                "param_1": "registerBase",
                "param_2": "inputValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "inputValue1"
            },
            "code": "\nvoid updateRegisters_08002404(int registerBase,int *inputValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int inputValue1;\n  \n  *(uint *)(registerBase + 0x20) = *(uint *)(registerBase + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(registerBase + 4);\n  inputValue1 = *inputValues;\n  updatedValue1 = *(uint *)(registerBase + 0x20) & 0xffffffdf | inputValues[2] << 4;\n  if (registerBase == DAT_08002458) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | inputValues[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (inputValues[5] | inputValues[6]) << 2;\n  }\n  *(uint *)(registerBase + 4) = updatedValue2;\n  *(uint *)(registerBase + 0x18) = *(uint *)(registerBase + 0x18) & 0xffff8cff | inputValue1 << 8;\n  *(int *)(registerBase + 0x38) = inputValues[1];\n  *(uint *)(registerBase + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002404",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_registers_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "process_calculation_08005bc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "char_flag",
                "iVar2": "comparison_result",
                "piVar3": "int_pointer",
                "puVar4": "uint_pointer",
                "uVar5": "initial_calculation",
                "local_50": "local_var1",
                "local_4c": "local_var2",
                "local_48": "local_var3",
                "uStack_44": "local_var4",
                "local_40": "local_var5",
                "uStack_3c": "local_var6",
                "local_38": "final_result",
                "local_30": "condition_check"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nundefined8 process_calculation_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char char_flag;\n  int comparison_result;\n  int *int_pointer;\n  undefined4 *uint_pointer;\n  undefined8 initial_calculation;\n  undefined4 local_var1;\n  undefined *local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined8 final_result;\n  int condition_check;\n  \n  initial_calculation = improved_calculation_08006c0c();\n  char_flag = *PTR_DAT_08005c68;\n  if (char_flag == -1) {\n    return initial_calculation;\n  }\n  condition_check = check_conditions_08000a04(input_1,input_2,input_1,input_2);\n  if (condition_check != 0) {\n    return initial_calculation;\n  }\n  comparison_result = is_comparison_equal_080009b4(input_1,input_2,0,0);\n  if (comparison_result == 0) {\n    return initial_calculation;\n  }\n  local_var1 = 1;\n  local_var2 = PTR_DAT_08005c6c;\n  local_var3 = input_1;\n  local_var4 = input_2;\n  local_var5 = input_1;\n  local_var6 = input_2;\n  if (char_flag == '\\0') {\n    final_result = 0;\nLAB_08005c26:\n    comparison_result = return_zero_0800709e(&local_var1);\n    if (comparison_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    final_result = floating_point_operation_08000724(0,0,0,0);\n    if (char_flag != '\\x02') goto LAB_08005c26;\n  }\n  uint_pointer = (undefined4 *)get_data_from_pointer_080072ac();\n  *uint_pointer = 0x21;\nLAB_08005c2e:\n  if (condition_check != 0) {\n    int_pointer = (int *)get_data_from_pointer_080072ac();\n    *int_pointer = condition_check;\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_080009b4",
                "FUN_08006c0c",
                "FUN_08000a04",
                "FUN_080072ac",
                "FUN_0800709e",
                "FUN_08000724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "process_calculation_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "update_flag_status_08001436",
                "param_1": "flagArray",
                "iVar1": "flagElement"
            },
            "code": "\nundefined4 updateFlagStatus_08001436(int *flagArray)\n\n{\n  int flagElement;\n  \n  flagElement = *flagArray;\n  if ((*(uint *)(flagElement + 0x14) & 0x400) != 0) {\n    *(uint *)(flagElement + 0x14) = *(uint *)(flagElement + 0x14) & 0xfffffbff;\n    flagArray[0xe] = 4;\n    *(undefined *)((int)flagArray + 0x35) = 0x20;\n    *(undefined *)(flagArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "FUN_080014e2"
            ],
            "imported": false,
            "current_name": "update_flag_status_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "update_data_values_08004a30",
                "puVar1": "dataPointer1",
                "puVar2": "dataPointer2",
                "puVar3": "dataPointer3",
                "uVar4": "tempResult"
            },
            "code": "\nvoid update_data_values_08004a30(void)\n\n{\n  undefined *dataPointer1;\n  undefined *dataPointer2;\n  undefined *dataPointer3;\n  undefined4 tempResult;\n  \n  dataPointer3 = PTR_DAT_08004a7c;\n  dataPointer2 = PTR_DAT_08004a78;\n  dataPointer1 = PTR_DAT_08004a74;\n  if (PTR_DAT_08004a74[1] != '\\0') {\n    if (*PTR_DAT_08004a78 == '\\0') {\n      tempResult = get_data_value_08003068();\n      tempResult = float_multiplication_08000cec(tempResult,DAT_08004a80);\n      *(undefined4 *)(dataPointer3 + 0x1c) = tempResult;\n      *dataPointer2 = 1;\n    }\n    else {\n      tempResult = get_data_value_08003068();\n      tempResult = float_multiplication_08000cec(tempResult,DAT_08004a80);\n      *(undefined4 *)(dataPointer3 + 0x30) = tempResult;\n    }\n  }\n  if (dataPointer1[1] == '\\0') {\n    if (*PTR_DAT_08004a78 != '\\0') {\n      *PTR_DAT_08004a78 = 0;\n    }\n    *(undefined4 *)(PTR_DAT_08004a7c + 0x48) = *(undefined4 *)(dataPointer1 + 4);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "update_data_values_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "update_memory_status_08004c70",
                "puVar1": "memory_pointer",
                "puVar2": "data_pointer",
                "uVar3": "updated_status",
                "uVar4": "current_flag",
                "iVar5": "temp_pointer"
            },
            "code": "\nundefined4 update_memory_status_08004c70(void)\n\n{\n  undefined *memory_pointer;\n  undefined *data_pointer;\n  undefined updated_status;\n  uint current_flag;\n  int temp_pointer;\n  \n  initialize_memory_08004c64();\n  data_pointer = PTR_DAT_08004c88;\n  memory_pointer = PTR_DAT_08004c84;\n  if ((PTR_DAT_08004c88[0x39] == '\\x01') || (PTR_DAT_08004c88[0x39] == '\\x12')) {\n    if (PTR_DAT_08004c84 == (undefined *)0x0) {\n      return 1;\n    }\n    if (PTR_DAT_08004c88[0x38] != '\\x01') {\n      PTR_DAT_08004c88[0x38] = 1;\n      *(undefined4 *)(data_pointer + 0x3c) = 0;\n      *(undefined2 *)(data_pointer + 0x2c) = 1;\n      *(undefined2 *)(data_pointer + 0x2e) = 1;\n      data_pointer[0x38] = 0;\n      if (data_pointer[0x39] == '\\x12') {\n        updated_status = 0x32;\n      }\n      else {\n        updated_status = 0x22;\n      }\n      temp_pointer = *(int *)data_pointer;\n      data_pointer[0x39] = updated_status;\n      current_flag = *(uint *)(temp_pointer + 0xc);\n      *(undefined **)(data_pointer + 0x28) = memory_pointer;\n      *(uint *)(temp_pointer + 0xc) = current_flag | 0x100;\n      *(uint *)(temp_pointer + 0x14) = *(uint *)(temp_pointer + 0x14) | 1;\n      *(uint *)(temp_pointer + 0xc) = *(uint *)(temp_pointer + 0xc) | 0x20;\n      return 0;\n    }\n  }\n  return 2;\n}\n\n",
            "called": [
                "FUN_08004c64"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "FUN_08004194"
            ],
            "imported": false,
            "current_name": "update_memory_status_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "compare_four_uints_08000904",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "xor_result",
                "bVar2": "comparison_flag",
                "bVar3": "conditional_flag"
            },
            "code": "\nuint compare_four_uints_08000904(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint xor_result;\n  bool comparison_flag;\n  bool conditional_flag;\n  \n  if (((int)(num2 << 1) >> 0x15 == -1 || (int)(num4 << 1) >> 0x15 == -1) &&\n     ((((int)(num2 << 1) >> 0x15 == -1 && ((num1 | num2 << 0xc) != 0)) ||\n      (((int)(num4 << 1) >> 0x15 == -1 && ((num3 | num4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  comparison_flag = (num1 | num2 << 1) == 0;\n  if (comparison_flag) {\n    comparison_flag = (num3 | num4 << 1) == 0;\n  }\n  if (!comparison_flag) {\n    comparison_flag = num2 == num4;\n  }\n  if (comparison_flag) {\n    comparison_flag = num1 == num3;\n  }\n  if (!comparison_flag) {\n    xor_result = num2 ^ num4;\n    comparison_flag = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      comparison_flag = num2 == num4;\n    }\n    conditional_flag = -1 < (int)xor_result && num4 <= num2;\n    if (comparison_flag) {\n      conditional_flag = num3 <= num1;\n    }\n    num4 = (int)num4 >> 0x1f;\n    if (!conditional_flag) {\n      num4 = ~num4;\n    }\n    return num4 | 1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "FUN_08000990"
            ],
            "imported": false,
            "current_name": "compare_four_uints_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "process_control_flags_0800299a",
                "param_1": "controlFlagArray",
                "uVar1": "flagValue1",
                "sVar2": "shortCounter",
                "uVar3": "flagValue2",
                "puVar4": "tempPointer1",
                "uVar5": "undefinedFlag",
                "puVar6": "tempPointer2",
                "uVar7": "flagMask",
                "bVar8": "boolFlag"
            },
            "code": "\nvoid processControlFlags_0800299a(uint **controlFlagArray)\n\n{\n  uint flagValue1;\n  short shortCounter;\n  uint flagValue2;\n  uint *tempPointer1;\n  undefined undefinedFlag;\n  uint *tempPointer2;\n  uint flagMask;\n  bool boolFlag;\n  \n  tempPointer2 = *controlFlagArray;\n  flagValue2 = *tempPointer2;\n  flagValue1 = tempPointer2[3];\n  if ((flagValue2 & 0xf) == 0) {\n    if (((int)(flagValue2 << 0x1a) < 0) && ((int)(flagValue1 << 0x1a) < 0)) {\n      process_data_0800290c();\n      return;\n    }\n  }\n  else {\n    flagMask = tempPointer2[5] & 1;\n    if ((flagMask != 0) || ((flagValue1 & 0x120) != 0)) {\n      tempPointer2 = (uint *)(flagValue2 << 0x1f);\n      if ((int)tempPointer2 < 0) {\n        boolFlag = (int)(flagValue1 << 0x17) < 0;\n        if (boolFlag) {\n          tempPointer2 = (uint *)((uint)controlFlagArray[0xf] | 1);\n        }\n        if (boolFlag) {\n          controlFlagArray[0xf] = tempPointer2;\n        }\n      }\n      if (((int)(flagValue2 << 0x1d) < 0) && (flagMask != 0)) {\n        controlFlagArray[0xf] = (uint *)((uint)controlFlagArray[0xf] | 2);\n      }\n      if (((int)(flagValue2 << 0x1e) < 0) && (flagMask != 0)) {\n        controlFlagArray[0xf] = (uint *)((uint)controlFlagArray[0xf] | 4);\n      }\n      if (((int)(flagValue2 << 0x1c) < 0) && (flagMask != 0)) {\n        controlFlagArray[0xf] = (uint *)((uint)controlFlagArray[0xf] | 8);\n      }\n      if (controlFlagArray[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(flagValue2 << 0x1a) < 0) && ((int)(flagValue1 << 0x1a) < 0)) {\n        process_data_0800290c(controlFlagArray);\n      }\n      tempPointer2 = *controlFlagArray;\n      if ((-1 < (int)controlFlagArray[0xf] << 0x1c) && ((tempPointer2[5] & 0x40) == 0)) {\n        do_nothing_08002998(controlFlagArray);\n        controlFlagArray[0xf] = (uint *)0x0;\n        return;\n      }\n      tempPointer2[3] = tempPointer2[3] & 0xfffffedf;\n      tempPointer2[5] = tempPointer2[5] & 0xfffffffe;\n      *(undefined *)((int)controlFlagArray + 0x39) = 1;\n      do_nothing_08002998(controlFlagArray);\n      return;\n    }\n  }\n  if (((int)(flagValue2 << 0x18) < 0) && ((int)(flagValue1 << 0x18) < 0)) {\n    if ((*(byte *)((int)controlFlagArray + 0x39) & 0xdf) == 0x12) {\n      tempPointer1 = controlFlagArray[8];\n      if (controlFlagArray[2] == (uint *)0x1000) {\n        tempPointer2[1] = *(ushort *)tempPointer1 & 0x1ff;\n        if (controlFlagArray[4] == (uint *)0x0) {\n          tempPointer1 = (uint *)((int)tempPointer1 + 2);\n        }\n        else {\n          tempPointer1 = (uint *)((int)tempPointer1 + 1);\n        }\n        controlFlagArray[8] = tempPointer1;\n      }\n      else {\n        controlFlagArray[8] = (uint *)((int)tempPointer1 + 1);\n        tempPointer2[1] = (uint)*(byte *)tempPointer1;\n      }\n      shortCounter = *(short *)((int)controlFlagArray + 0x26) + -1;\n      *(short *)((int)controlFlagArray + 0x26) = shortCounter;\n      if (shortCounter == 0) {\n        tempPointer2[3] = tempPointer2[3] & 0xffffff7f;\n        tempPointer2[3] = tempPointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(flagValue2 << 0x19) < 0) && ((int)(flagValue1 << 0x19) < 0)) {\n    tempPointer2[3] = tempPointer2[3] & 0xffffffbf;\n    if (*(char *)((int)controlFlagArray + 0x39) == '2') {\n      undefinedFlag = 0x22;\n    }\n    else {\n      undefinedFlag = 1;\n    }\n    *(undefined *)((int)controlFlagArray + 0x39) = undefinedFlag;\n    do_nothing_0800290a(controlFlagArray);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [],
            "imported": false,
            "current_name": "process_control_flags_0800299a"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  *(int *)PTR_DAT_08001158 = *(int *)PTR_DAT_08001158 + 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "increment_counter_0800114c"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input_data",
                "param_2": "data_array",
                "param_3": "result",
                "param_4": "additional_data",
                "param_5": "callback_function",
                "iVar1": "callback_result",
                "uVar2": "temp_value",
                "uVar3": "offset",
                "bVar4": "condition"
            },
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input_data,uint *data_array,uint *result,undefined4 additional_data,code *callback_function)\n\n{\n  int callback_result;\n  uint temp_value;\n  uint offset;\n  bool condition;\n  \n  temp_value = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    temp_value = data_array[2];\n  }\n  *result = temp_value;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *result = temp_value + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  temp_value = *data_array & 6;\n  if (temp_value == 0) {\n    for (; (int)temp_value < (int)(data_array[3] - *result); temp_value = temp_value + 1) {\n      callback_result = (*callback_function)(input_data,additional_data,(int)data_array + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  temp_value = (uint)*(byte *)((int)data_array + 0x43);\n  if (temp_value != 0) {\n    temp_value = 1;\n  }\n  offset = temp_value;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + temp_value + 0x43) = 0x30;\n    offset = temp_value + 2;\n    *(undefined *)((int)data_array + temp_value + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  callback_result = (*callback_function)(input_data,additional_data,(int)data_array + 0x43,offset);\n  if (callback_result != -1) {\n    temp_value = data_array[3];\n    condition = (*data_array & 6) != 4;\n    if (condition) {\n      temp_value = 0;\n    }\n    offset = 0;\n    if (!condition) {\n      temp_value = temp_value - *result;\n    }\n    if (!condition) {\n      temp_value = temp_value & ~((int)temp_value >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      temp_value = temp_value + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (temp_value == offset) {\n        return 0;\n      }\n      callback_result = (*callback_function)(input_data,additional_data,(int)data_array + 0x1a,1);\n      if (callback_result == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "process_data_080014e2",
                "param_1": "data_ptr",
                "param_2": "threshold",
                "iVar1": "initial_value",
                "iVar2": "flag_status"
            },
            "code": "\nundefined4 process_data_080014e2(int *data_ptr,uint threshold)\n\n{\n  int initial_value;\n  int flag_status;\n  \n  initial_value = get_undefined4_value_0800115c();\n  while( true ) {\n    if (*(int *)(*data_ptr + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_status = update_flag_status_08001436(data_ptr);\n    if (flag_status != 0) break;\n    if ((threshold != 0xffffffff) &&\n       ((threshold == 0 || (flag_status = get_undefined4_value_0800115c(), threshold < (uint)(flag_status - initial_value))))) {\n      data_ptr[0xe] = data_ptr[0xe] | 0x20;\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08001436",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "FUN_080015e8",
                "FUN_08001828",
                "FUN_08001530"
            ],
            "imported": false,
            "current_name": "process_data_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "xor_update_0800142e",
                "param_1": "baseAddress",
                "param_2": "inputValue"
            },
            "code": "\nvoid xorUpdate_0800142e(int baseAddress,uint inputValue)\n\n{\n  *(uint *)(baseAddress + 0xc) = inputValue ^ *(uint *)(baseAddress + 0xc);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "xor_update_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "update_register_flags_08004d8c",
                "param_1": "registerValuePtr",
                "iVar1": "registerValue"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid updateRegisterFlags_08004d8c(int *registerValuePtr)\n\n{\n  int registerValue;\n  \n  registerValue = *registerValuePtr;\n  if (registerValue == DAT_08004e04) {\n    *(uint *)(DAT_08004e08 + 0x18) = *(uint *)(DAT_08004e08 + 0x18) | 0x800;\n  }\n  else if (registerValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (registerValue == DAT_08004e0c) {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | 2;\n  }\n  else if (registerValue == DAT_08004e10) {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | 4;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "FUN_080023d0"
            ],
            "imported": false,
            "current_name": "update_register_flags_08004d8c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "calculate_shifted_value_08002250",
                "uVar1": "leadingZeroes"
            },
            "code": "\nuint calculate_shifted_value_08002250(void)\n\n{\n  uint leadingZeroes;\n  \n  leadingZeroes = count_leading_zeroes(0x1c0000);\n  return *(uint *)PTR_DAT_0800227c >>\n         PTR_DAT_08002278[(*(uint *)(DAT_08002274 + 4) & 0x3800) >> (leadingZeroes & 0xff)];\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08002250"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "is_comparison_equal_080009b4",
                "in_CY": "comparisonResult"
            },
            "code": "\nbool isComparisonEqual_080009b4(void)\n\n{\n  char comparisonResult;\n  \n  compare_and_return_08000990();\n  return comparisonResult == '\\0';\n}\n\n",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "is_comparison_equal_080009b4"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bitIndex"
            },
            "code": "\nvoid setBitInArray_080011fc(uint bitIndex)\n\n{\n  *(int *)(DAT_08001210 + (bitIndex >> 5) * 4) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "FUN_08004e7c"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080011fc"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "get_data_value_08003068",
                "undefined4": "uint32_t"
            },
            "code": "\nuint32_t get_data_value_08003068(void)\n\n{\n  return *(uint32_t *)PTR_DAT_08003070;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "FUN_08004a30"
            ],
            "imported": false,
            "current_name": "get_data_value_08003068"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "array_copy_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "source_end"
            },
            "code": "\nvoid array_copy_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *source_end;\n  \n  source_end = source + length;\n  if ((source < destination) && (destination < source_end)) {\n    destination = destination + length;\n    length = length - (int)source_end;\n    while (source_end + length != (undefined *)0x0) {\n      source_end = source_end + -1;\n      destination = destination + -1;\n      *destination = *source_end;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != source_end; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "array_copy_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "compare_and_return_08000990",
                "param_1": "input_value"
            },
            "code": "\nundefined4 compare_and_return_08000990(undefined4 input_value)\n\n{\n  compare_four_uints_08000904();\n  return input_value;\n}\n\n",
            "called": [
                "FUN_08000904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "FUN_080009c8",
                "FUN_080009b4",
                "FUN_08000980",
                "FUN_080009a0"
            ],
            "imported": false,
            "current_name": "compare_and_return_08000990"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "initialize_function_pointer_08000110",
                "param_1": "func_pointer"
            },
            "code": "\nundefined * initialize_function_pointer_08000110(undefined *func_pointer)\n\n{\n  if (*PTR_DAT_08000128 == '\\0') {\n    if (DAT_0800012c != 0) {\n      func_pointer = PTR_FUN_08000130;\n    }\n    *PTR_DAT_08000128 = 1;\n  }\n  return func_pointer;\n}\n\n",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "initialize_function_pointer_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "return_zero_0800709e"
            },
            "code": "\nundefined4 returnZero_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "return_zero_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "calculate_updated_value_08002ec0",
                "puVar1": "value_ptr",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "value2"
            },
            "code": "\nvoid calculate_updated_value_08002ec0(void)\n\n{\n  undefined *value_ptr;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 value2;\n  \n  value_ptr = PTR_DAT_08002ed0;\n  result2 = *(undefined4 *)(PTR_DAT_08002ecc + 4);\n  value2 = *(undefined4 *)(PTR_DAT_08002ed0 + 4);\n  result1 = calculate_result_08000ad8(0x3f800000,value2);\n  result1 = float_multiplication_08000cec(result1,result2);\n  result2 = float_multiplication_08000cec(value2,*(undefined4 *)value_ptr);\n  result1 = process_floating_point_08000adc(result2,result1);\n  *(undefined4 *)value_ptr = result1;\n  return;\n}\n\n",
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_updated_value_08002ec0"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "process_data_08004434",
                "param_1": "input_data",
                "param_2": "data_mask",
                "param_3": "extra_data",
                "local_10": "masked_data",
                "local_c": "combined_data",
                "uStack_8": "extra_data_copy"
            },
            "code": "\nvoid process_data_08004434(undefined4 input_data,uint data_mask,undefined4 extra_data)\n\n{\n  undefined4 masked_data;\n  uint combined_data;\n  undefined4 extra_data_copy;\n  \n  masked_data = *(undefined4 *)PTR_DAT_08004454;\n  combined_data = data_mask & 0xffff0000 | (uint)*(ushort *)(PTR_DAT_08004454 + 4);\n  extra_data_copy = extra_data;\n  process_encrypted_data_08004300(0x6d,&masked_data,6);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "improved_calculation_08006c0c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "iVar3": "shifted_input2",
                "uVar4": "iteration_var1",
                "uVar5": "iteration_var2",
                "uVar6": "temp_var3",
                "iVar7": "result",
                "uVar8": "iteration_var3",
                "uVar9": "iteration_var4",
                "iVar10": "temp_sum",
                "uVar11": "temp_sum2",
                "uVar12": "iteration_var5",
                "uVar13": "intermediate_result"
            },
            "code": "\nundefined8 improved_calculation_08006c0c(uint input_1,uint input_2)\n\n{\n  undefined4 temp_var1;\n  uint temp_var2;\n  int shifted_input2;\n  uint iteration_var1;\n  uint iteration_var2;\n  uint temp_var3;\n  int result;\n  uint iteration_var3;\n  uint iteration_var4;\n  int temp_sum;\n  uint temp_sum2;\n  uint iteration_var5;\n  undefined8 intermediate_result;\n  \n  if ((DAT_08006d60 & ~input_2) == 0) {\n    intermediate_result = calculate_result_080004d0(input_1,input_2,input_1,input_2);\n    intermediate_result = floating_point_addition_0800016c(input_1,input_2,(int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n    return intermediate_result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != 0) {\n      intermediate_result = floating_point_operation_08000168(input_1,input_2,input_1,input_2);\n      temp_var1 = (undefined4)((ulonglong)intermediate_result >> 0x20);\n      intermediate_result = floating_point_operation_08000724((int)intermediate_result,temp_var1,(int)intermediate_result,temp_var1);\n      return intermediate_result;\n    }\n  }\n  shifted_input2 = (int)input_2 >> 0x14;\n  if (shifted_input2 == 0) {\n    while (input_2 == 0) {\n      shifted_input2 = shifted_input2 + -0x15;\n      input_2 = input_1 >> 0xb;\n      input_1 = input_1 << 0x15;\n    }\n    temp_var2 = 0;\n    for (; -1 < (int)(input_2 << 0xb); input_2 = input_2 << 1) {\n      temp_var2 = temp_var2 + 1;\n    }\n    shifted_input2 = shifted_input2 - (temp_var2 - 1);\n    input_2 = input_2 | input_1 >> (0x20 - temp_var2 & 0xff);\n    input_1 = input_1 << (temp_var2 & 0xff);\n  }\n  result = 0;\n  temp_var2 = input_2 & 0xfffff | 0x100000;\n  if ((shifted_input2 + -0x3ff) * -0x80000000 < 0) {\n    temp_var2 = temp_var2 * 2 - ((int)input_1 >> 0x1f);\n    input_1 = input_1 << 1;\n  }\n  temp_var2 = temp_var2 * 2 - ((int)input_1 >> 0x1f);\n  iteration_var1 = 0x16;\n  iteration_var2 = 0;\n  iteration_var3 = 0x200000;\n  input_1 = input_1 << 1;\n  do {\n    temp_sum = iteration_var2 + iteration_var3;\n    if (temp_sum <= (int)temp_var2) {\n      temp_var2 = temp_var2 - temp_sum;\n      iteration_var2 = temp_sum + iteration_var3;\n      result = result + iteration_var3;\n    }\n    iteration_var1 = iteration_var1 - 1;\n    temp_var2 = temp_var2 * 2 - ((int)input_1 >> 0x1f);\n    iteration_var3 = iteration_var3 >> 1;\n    input_1 = input_1 << 1;\n  } while (iteration_var1 != 0);\n  iteration_var5 = 0x20;\n  iteration_var4 = 0x80000000;\n  iteration_var3 = iteration_var1;\n  do {\n    temp_sum2 = iteration_var4 + iteration_var3;\n    temp_var3 = iteration_var2;\n    if (((int)iteration_var2 < (int)temp_var2) || ((temp_var2 == iteration_var2 && (temp_sum2 <= input_1)))) {\n      iteration_var3 = temp_sum2 + iteration_var4;\n      if (((int)temp_sum2 < 0) && (-1 < (int)iteration_var3)) {\n        temp_var3 = iteration_var2 + 1;\n      }\n      temp_var2 = temp_var2 - iteration_var2;\n      if (input_1 < temp_sum2) {\n        temp_var2 = temp_var2 - 1;\n      }\n      input_1 = input_1 - temp_sum2;\n      iteration_var1 = iteration_var1 + iteration_var4;\n    }\n    temp_var2 = temp_var2 * 2 - ((int)input_1 >> 0x1f);\n    iteration_var5 = iteration_var5 - 1;\n    input_1 = input_1 << 1;\n    iteration_var4 = iteration_var4 >> 1;\n    iteration_var2 = temp_var3;\n  } while (iteration_var5 != 0);\n  if ((input_1 | temp_var2) != 0) {\n    if (iteration_var1 == 0xffffffff) {\n      result = result + 1;\n      iteration_var1 = iteration_var5;\n    }\n    else {\n      iteration_var1 = iteration_var1 + 1 & 0xfffffffe;\n    }\n  }\n  iteration_var1 = iteration_var1 >> 1;\n  if (result << 0x1f < 0) {\n    iteration_var1 = iteration_var1 | 0x80000000;\n  }\n  return CONCAT44((result >> 1) + 0x3fe00000 + (shifted_input2 + -0x3ff >> 1) * 0x100000,iteration_var1);\n}\n\n",
            "called": [
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_08000724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "improved_calculation_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "process_parameters_0800426c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2",
                "uVar3": "var_A",
                "uVar4": "var_B",
                "uVar5": "var_C",
                "uVar6": "transformed_value_1",
                "uVar7": "transformed_value_2",
                "uVar8": "transformed_value_3",
                "uVar9": "transformed_value_4"
            },
            "code": "\nvoid process_parameters_0800426c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined *data_ptr_1;\n  undefined *data_ptr_2;\n  undefined4 var_A;\n  undefined4 var_B;\n  undefined4 var_C;\n  uint transformed_value_1;\n  uint transformed_value_2;\n  uint transformed_value_3;\n  uint transformed_value_4;\n  \n  var_A = calculate_result_08000ad8();\n  var_B = process_floating_point_08000adc(input_1,input_2);\n  var_C = calculate_result_08000ad8(var_A,input_3);\n  var_C = process_floating_point_08000adc(var_C,input_4);\n  calculate_result_08000ad8(var_C,DAT_080042fc);\n  transformed_value_1 = calculate_transformed_value_08001078();\n  var_C = calculate_result_08000ad8(var_B,input_3);\n  var_C = calculate_result_08000ad8(var_C,input_4);\n  calculate_result_08000ad8(var_C,DAT_080042fc);\n  transformed_value_2 = calculate_transformed_value_08001078();\n  var_A = process_floating_point_08000adc(var_A,input_3);\n  var_A = calculate_result_08000ad8(var_A,input_4);\n  calculate_result_08000ad8(var_A,DAT_080042fc);\n  transformed_value_3 = calculate_transformed_value_08001078();\n  var_A = process_floating_point_08000adc(input_3,var_B);\n  var_A = process_floating_point_08000adc(var_A,input_4);\n  calculate_result_08000ad8(var_A,DAT_080042fc);\n  transformed_value_4 = calculate_transformed_value_08001078();\n  data_ptr_1 = PTR_DAT_08004264;\n  if (999 < (int)transformed_value_4) {\n    transformed_value_4 = 1000;\n  }\n  if (999 < (int)transformed_value_3) {\n    transformed_value_3 = 1000;\n  }\n  if (999 < (int)transformed_value_2) {\n    transformed_value_2 = 1000;\n  }\n  if (999 < (int)transformed_value_1) {\n    transformed_value_1 = 1000;\n  }\n  *(uint *)(PTR_DAT_08004264 + 8) = transformed_value_2 & ~((int)transformed_value_2 >> 0x1f);\n  *(uint *)(data_ptr_1 + 0xc) = transformed_value_1 & ~((int)transformed_value_1 >> 0x1f);\n  *(uint *)(data_ptr_1 + 4) = transformed_value_3 & ~((int)transformed_value_3 >> 0x1f);\n  *(uint *)data_ptr_1 = transformed_value_4 & ~((int)transformed_value_4 >> 0x1f);\n  update_data_08003fc4();\n  update_data_field_08003fd0(*(undefined4 *)(data_ptr_1 + 4));\n  update_data_08003fdc(*(undefined4 *)(data_ptr_1 + 8));\n  update_value_at_offset_08003fe8(*(undefined4 *)(data_ptr_1 + 0xc));\n  data_ptr_2 = PTR_DAT_08004268;\n  *(short *)PTR_DAT_08004268 = (short)*(undefined4 *)data_ptr_1 + 1000;\n  *(short *)(data_ptr_2 + 2) = (short)*(undefined4 *)(data_ptr_1 + 4) + 1000;\n  *(short *)(data_ptr_2 + 4) = (short)*(undefined4 *)(data_ptr_1 + 8) + 1000;\n  *(short *)(data_ptr_2 + 6) = (short)*(undefined4 *)(data_ptr_1 + 0xc) + 1000;\n  return;\n}\n\n",
            "called": [
                "FUN_08003fdc",
                "FUN_08000ad8",
                "FUN_08003fd0",
                "FUN_08001078",
                "FUN_08003fc4",
                "FUN_08003fe8",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_parameters_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "update_status_flag_08002538",
                "param_1": "status_ptr",
                "param_2": "flag_value",
                "puVar1": "temp_ptr",
                "puVar2": "current_ptr"
            },
            "code": "\nundefined4 update_status_flag_08002538(uint **status_ptr,undefined4 flag_value)\n\n{\n  uint *temp_ptr;\n  uint *current_ptr;\n  \n  update_bit_field_08002520(*status_ptr,flag_value,1);\n  current_ptr = *status_ptr;\n  temp_ptr = DAT_08002560;\n  if (current_ptr == DAT_08002560) {\n    temp_ptr = (uint *)(current_ptr[0x11] | 0x8000);\n  }\n  if (current_ptr == DAT_08002560) {\n    current_ptr[0x11] = (uint)temp_ptr;\n  }\n  *current_ptr = *current_ptr | 1;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08002520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "FUN_08003ff4"
            ],
            "imported": false,
            "current_name": "update_status_flag_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "process_data_sequence_080040e8",
                "param_1": "input_data",
                "param_2": "offset",
                "param_3": "output_buffer",
                "param_4": "sequence_length",
                "puVar1": "src_i2c_ptr",
                "uVar2": "status",
                "iVar3": "index",
                "puVar4": "output_ptr",
                "iVar5": "remaining_length"
            },
            "code": "\nvoid process_data_sequence_080040e8(undefined4 input_data,int offset,int output_buffer,int sequence_length)\n\n{\n  undefined *src_i2c_ptr;\n  undefined status;\n  int index;\n  undefined *output_ptr;\n  int remaining_length;\n  \n  src_i2c_ptr = PTR_s____Src_i2c_c_08004118;\n  output_ptr = (undefined *)(output_buffer + -1);\n  remaining_length = sequence_length;\n  for (index = 0; index < sequence_length; index = index + 1) {\n    status = process_and_return_status_0800407c(input_data,offset + index & 0xffff,src_i2c_ptr,0x4c,remaining_length);\n    output_ptr = output_ptr + 1;\n    *output_ptr = status;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "FUN_08002d88",
                "FUN_08003298",
                "FUN_08002b48",
                "FUN_08002bf0",
                "FUN_08002cb0"
            ],
            "imported": false,
            "current_name": "process_data_sequence_080040e8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "format_and_append_data_08004ffc",
                "param_1": "data_buffer",
                "param_2": "data_to_append",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "local_78": "buffer_ptr",
                "local_70": "max_int",
                "local_6c": "buffer_size",
                "local_6a": "max_short",
                "local_68": "current_ptr",
                "local_64": "max_int_2",
                "uStack_c": "data_to_append_2",
                "uStack_8": "unused_param_3_2",
                "uStack_4": "unused_param_4_2"
            },
            "code": "\nvoid format_and_append_data_08004ffc(undefined *data_buffer,undefined4 data_to_append,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  undefined *buffer_ptr [2];\n  undefined4 max_int;\n  undefined2 buffer_size;\n  undefined2 max_short;\n  undefined *current_ptr;\n  undefined4 max_int_2;\n  undefined4 data_to_append_2;\n  undefined4 unused_param_3_2;\n  undefined4 unused_param_4_2;\n  \n  buffer_size = 0x208;\n  max_int = 0x7fffffff;\n  max_int_2 = 0x7fffffff;\n  max_short = 0xffff;\n  buffer_ptr[0] = data_buffer;\n  current_ptr = data_buffer;\n  data_to_append_2 = data_to_append;\n  unused_param_3_2 = unused_param_3;\n  unused_param_4_2 = unused_param_4;\n  format_and_copy_data_080050fc(*(undefined4 *)PTR_PTR_DAT_08005040,buffer_ptr,data_to_append);\n  *buffer_ptr[0] = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_080050fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "FUN_08004cac"
            ],
            "imported": false,
            "current_name": "format_and_append_data_08004ffc"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_undefined4_value_0800115c"
            },
            "code": "\nundefined4 get_undefined4_value_0800115c(void)\n\n{\n  return *(undefined4 *)PTR_DAT_08001164;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_08001828",
                "FUN_08001530",
                "FUN_0800209c",
                "FUN_080014e2",
                "FUN_08001460",
                "thunk_FUN_0800115c",
                "FUN_08004c18",
                "thunk_FUN_0800115c"
            ],
            "imported": false,
            "current_name": "get_undefined4_value_0800115c"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "sVar1": "short_value_1",
                "sVar2": "short_value_2",
                "puVar3": "pointer_var_1",
                "puVar4": "pointer_var_2",
                "puVar5": "pointer_var_3",
                "puVar6": "pointer_var_4",
                "iVar7": "int_status",
                "uVar8": "float_result",
                "uVar9": "float_multiplier",
                "local_28": "local_short",
                "uStack_26": "short_high_byte",
                "uStack_25": "short_low_byte",
                "local_24": "local_byte_1",
                "local_23": "local_byte_2",
                "local_22": "status_byte",
                "uStack_21": "input_high_byte"
            },
            "code": "\nvoid process_sensor_data_08002d88(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  short short_value_1;\n  short short_value_2;\n  undefined *pointer_var_1;\n  undefined *pointer_var_2;\n  undefined *pointer_var_3;\n  undefined *pointer_var_4;\n  int int_status;\n  undefined4 float_result;\n  undefined4 float_multiplier;\n  undefined2 local_short;\n  undefined short_high_byte;\n  undefined short_low_byte;\n  undefined local_byte_1;\n  undefined local_byte_2;\n  byte status_byte;\n  undefined input_high_byte;\n  \n  pointer_var_1 = PTR_s____Src_MPU9250_c_08002e80;\n  input_high_byte = (undefined)((uint)input_4 >> 0x18);\n  local_short = 0;\n  short_high_byte = 0;\n  short_low_byte = 0;\n  local_byte_1 = 0;\n  local_byte_2 = 0;\n  status_byte = 0;\n  int_status = process_and_return_status_0800407c(0x18,2,PTR_s____Src_MPU9250_c_08002e80,0xd7,input_1,input_2);\n  if (int_status << 0x1f < 0) {\n    process_data_sequence_080040e8(0x18,3,&local_short,7,pointer_var_1,0xda);\n    pointer_var_1 = PTR_DAT_08002e84;\n    if ((int)((uint)status_byte << 0x1c) < 0) {\n      *(short *)(PTR_DAT_08002e94 + 2) = *(short *)(PTR_DAT_08002e94 + 2) + 1;\n    }\n    else {\n      short_value_1 = CONCAT11(short_low_byte,short_high_byte);\n      short_value_2 = CONCAT11(local_byte_2,local_byte_1);\n      *(undefined2 *)PTR_DAT_08002e84 = local_short;\n      *(short *)(pointer_var_1 + 2) = short_value_1;\n      *(short *)(pointer_var_1 + 4) = short_value_2;\n      pointer_var_4 = PTR_DAT_08002e9c;\n      pointer_var_3 = PTR_DAT_08002e98;\n      float_multiplier = *(undefined4 *)PTR_DAT_08002e88;\n      float_result = calculate_adjusted_value_08000c44();\n      float_result = float_multiplication_08000cec(float_result,float_multiplier);\n      pointer_var_1 = PTR_DAT_08002e8c;\n      float_result = float_multiplication_08000cec(float_result,*(undefined4 *)pointer_var_3);\n      float_result = calculate_result_08000ad8(float_result,*(undefined4 *)pointer_var_4);\n      float_result = float_multiplication_08000cec(float_result,*(undefined4 *)pointer_var_1);\n      pointer_var_2 = PTR_DAT_08002e90;\n      *(undefined4 *)PTR_DAT_08002e90 = float_result;\n      float_result = calculate_adjusted_value_08000c44((int)short_value_1);\n      float_result = float_multiplication_08000cec(float_result,float_multiplier);\n      float_result = float_multiplication_08000cec(float_result,*(undefined4 *)(pointer_var_3 + 4));\n      float_result = calculate_result_08000ad8(float_result,*(undefined4 *)(pointer_var_4 + 4));\n      float_result = float_multiplication_08000cec(float_result,*(undefined4 *)(pointer_var_1 + 4));\n      *(undefined4 *)(pointer_var_2 + 4) = float_result;\n      float_result = calculate_adjusted_value_08000c44((int)short_value_2);\n      float_result = float_multiplication_08000cec(float_result,float_multiplier);\n      float_result = float_multiplication_08000cec(float_result,*(undefined4 *)(pointer_var_3 + 8));\n      float_result = calculate_result_08000ad8(float_result,*(undefined4 *)(pointer_var_4 + 8));\n      float_result = float_multiplication_08000cec(float_result,*(undefined4 *)(pointer_var_1 + 8));\n      *(undefined4 *)(pointer_var_2 + 8) = float_result;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080040e8",
                "FUN_0800407c",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_08000ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002d88"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_adjusted_value_08000c44",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "uVar3": "adjusted_value",
                "iVar4": "base_value",
                "uVar5": "temp_value"
            },
            "code": "\nuint calculate_adjusted_value_08000c44(uint input_value)\n\n{\n  int leading_zeroes_count;\n  uint shift_amount;\n  uint adjusted_value;\n  int base_value;\n  uint temp_value;\n  \n  adjusted_value = input_value & 0x80000000;\n  if ((int)adjusted_value < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes_count - 8;\n  base_value = ((adjusted_value | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes_count) {\n    temp_value = 0 << (shift_amount & 0xff);\n    adjusted_value = base_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < temp_value);\n    if (temp_value == 0x80000000) {\n      adjusted_value = adjusted_value & 0xfffffffe;\n    }\n    return adjusted_value;\n  }\n  shift_amount = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  adjusted_value = base_value + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    adjusted_value = adjusted_value & ~(shift_amount >> 0x1f);\n  }\n  return adjusted_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "FUN_08002d88",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002b48",
                "FUN_08002bf0",
                "FUN_08002cb0"
            ],
            "imported": false,
            "current_name": "calculate_adjusted_value_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "check_conditions_08000a04",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "\nundefined4 check_conditions_08000a04(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "check_conditions_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "params",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "result1",
                "iVar5": "shifted_param",
                "iVar6": "base_value"
            },
            "code": "\nvoid update_values_080025e8(int *params)\n\n{\n  int temp1;\n  int temp2;\n  uint temp3;\n  int result1;\n  int shifted_param;\n  int base_value;\n  \n  base_value = *params;\n  temp3 = params[4];\n  *(uint *)(base_value + 0x10) = *(uint *)(base_value + 0x10) & 0xffffcfff | params[3];\n  *(uint *)(base_value + 0xc) = params[2] | temp3 | params[5] | *(uint *)(base_value + 0xc) & 0xffffe9f3;\n  *(uint *)(base_value + 0x14) = *(uint *)(base_value + 0x14) & 0xfffffcff | params[6];\n  if (base_value == DAT_08002720) {\n    temp1 = calculate_shifted_value_08002250();\n    result1 = (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(params[1] << 2)) / 100);\n    temp1 = calculate_shifted_value_08002250();\n    shifted_param = params[1];\n    temp2 = calculate_shifted_value_08002250();\n    temp2 = (uint)(temp1 * 0x19) / (uint)(shifted_param << 2) +\n            (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(params[1] << 2)) / 100) *\n            -100;\n    temp1 = calculate_shifted_value_08002250();\n    temp3 = (uint)(temp1 * 0x19) / (uint)(params[1] << 2);\n    temp1 = calculate_shifted_value_08002250();\n  }\n  else {\n    temp1 = calculate_shifted_value_08002220();\n    result1 = (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(params[1] << 2)) / 100);\n    temp1 = calculate_shifted_value_08002220();\n    shifted_param = params[1];\n    temp2 = calculate_shifted_value_08002220();\n    temp2 = (uint)(temp1 * 0x19) / (uint)(shifted_param << 2) +\n            (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(params[1] << 2)) / 100) *\n            -100;\n    temp1 = calculate_shifted_value_08002220();\n    temp3 = (uint)(temp1 * 0x19) / (uint)(params[1] << 2);\n    temp1 = calculate_shifted_value_08002220();\n  }\n  *(uint *)(base_value + 8) =\n       (((temp3 + (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(params[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (temp2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       result1 * 0x10;\n  return;\n}\n\n",
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "update_values_080025e8"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "process_sensor_data_08002b48",
                "in_r3": "input_data",
                "local_18": "data_sequence",
                "local_14": "masked_input",
                "puVar1": "data_ptr",
                "uVar2": "adjusted_value"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid process_sensor_data_08002b48(void)\n\n{\n  undefined *data_ptr;\n  undefined4 adjusted_value;\n  uint input_data;\n  undefined4 data_sequence;\n  undefined4 masked_input;\n  \n  data_sequence = 0;\n  masked_input = input_data & 0xffff0000;\n  process_data_sequence_080040e8(0xd0,0x3b,&data_sequence,6,PTR_s____Src_MPU9250_c_08002be4,0x58);\n  data_ptr = PTR_DAT_08002be8;\n  *(ushort *)PTR_DAT_08002be8 = CONCAT11((undefined)data_sequence,data_sequence._1_1_);\n  *(short *)(data_ptr + 2) = CONCAT11(data_sequence._2_1_,data_sequence._3_1_);\n  *(short *)(data_ptr + 4) = CONCAT11((undefined)masked_input,masked_input._1_1_);\n  adjusted_value = calculate_adjusted_value_08000c44();\n  adjusted_value = float_multiplication_08000cec(adjusted_value,0x40800000);\n  adjusted_value = float_multiplication_08000cec(adjusted_value,0x38000000);\n  data_ptr = PTR_DAT_08002bec;\n  *(undefined4 *)PTR_DAT_08002bec = adjusted_value;\n  adjusted_value = calculate_adjusted_value_08000c44((int)CONCAT11(data_sequence._2_1_,data_sequence._3_1_));\n  adjusted_value = float_multiplication_08000cec(adjusted_value,0x40800000);\n  adjusted_value = float_multiplication_08000cec(adjusted_value,0x38000000);\n  *(undefined4 *)(data_ptr + 4) = adjusted_value;\n  adjusted_value = calculate_adjusted_value_08000c44((int)CONCAT11((undefined)masked_input,masked_input._1_1_));\n  adjusted_value = float_multiplication_08000cec(adjusted_value,0x40800000);\n  adjusted_value = float_multiplication_08000cec(adjusted_value,0x38000000);\n  *(undefined4 *)(data_ptr + 8) = adjusted_value;\n  return;\n}\n\n",
            "called": [
                "FUN_080040e8",
                "FUN_08000cec",
                "FUN_08000c44"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "process_data_and_execute_08004f68",
                "iVar1": "index",
                "puVar2": "data_pointer",
                "UNRECOVERED_JUMPTABLE": "unrecovered_jumptable"
            },
            "code": "\nvoid process_data_and_execute_08004f68(void)\n\n{\n  int index;\n  undefined4 *data_pointer;\n  code *unrecovered_jumptable;\n  \n  for (index = 0; data_pointer = (undefined4 *)PTR_DAT_08004fa8,\n      PTR_DAT_08004fa0 + index < PTR_DAT_08004fa4; index = index + 4) {\n    *(undefined4 *)(PTR_DAT_08004fa0 + index) = *(undefined4 *)(DAT_08004f9c + index);\n  }\n  for (; data_pointer < PTR_DAT_08004fac; data_pointer = data_pointer + 1) {\n    *data_pointer = 0;\n  }\n  update_registers_08004f10();\n  execute_code_sequences_08004fb4();\n  unrecovered_jumptable = (code *)0x8004f9a;\n  initialize_and_process_sensors_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jumptable)();\n  return;\n}\n\n",
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "process_data_and_execute_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "update_register_08001170",
                "param_1": "inputValue"
            },
            "code": "\nvoid updateRegister_08001170(uint inputValue)\n\n{\n  *(uint *)(DAT_08001190 + 0xc) =\n       *(uint *)(DAT_08001190 + 0xc) & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "update_register_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "process_sensor_data_08002bf0",
                "puVar1": "sensor_data_ptr",
                "puVar2": "result_data_ptr",
                "uVar3": "temp_result",
                "local_20": "raw_data",
                "local_1c": "additional_data"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid process_sensor_data_08002bf0(void)\n\n{\n  undefined *sensor_data_ptr;\n  undefined *result_data_ptr;\n  undefined4 temp_result;\n  undefined4 raw_data;\n  undefined2 additional_data;\n  \n  raw_data = 0;\n  additional_data = 0;\n  process_data_sequence_080040e8(0xd0,0x43,&raw_data,6,PTR_s____Src_MPU9250_c_08002c9c,0x7b);\n  sensor_data_ptr = PTR_DAT_08002ca0;\n  *(ushort *)PTR_DAT_08002ca0 = CONCAT11((undefined)raw_data,raw_data._1_1_);\n  *(short *)(sensor_data_ptr + 2) = CONCAT11(raw_data._2_1_,raw_data._3_1_);\n  *(short *)(sensor_data_ptr + 4) = CONCAT11((undefined)additional_data,additional_data._1_1_);\n  temp_result = calculate_adjusted_value_08000c44();\n  sensor_data_ptr = PTR_DAT_08002ca4;\n  temp_result = float_multiplication_08000cec(temp_result,DAT_08002ca8);\n  temp_result = float_multiplication_08000cec(temp_result,0x38000000);\n  temp_result = calculate_result_08000ad8(temp_result,*(undefined4 *)sensor_data_ptr);\n  result_data_ptr = PTR_DAT_08002cac;\n  *(undefined4 *)PTR_DAT_08002cac = temp_result;\n  temp_result = calculate_adjusted_value_08000c44((int)CONCAT11(raw_data._2_1_,raw_data._3_1_));\n  temp_result = float_multiplication_08000cec(temp_result,DAT_08002ca8);\n  temp_result = float_multiplication_08000cec(temp_result,0x38000000);\n  temp_result = calculate_result_08000ad8(temp_result,*(undefined4 *)(sensor_data_ptr + 4));\n  *(undefined4 *)(result_data_ptr + 4) = temp_result;\n  temp_result = calculate_adjusted_value_08000c44((int)CONCAT11((undefined)additional_data,additional_data._1_1_));\n  temp_result = float_multiplication_08000cec(temp_result,DAT_08002ca8);\n  temp_result = float_multiplication_08000cec(temp_result,0x38000000);\n  temp_result = calculate_result_08000ad8(temp_result,*(undefined4 *)(sensor_data_ptr + 8));\n  *(undefined4 *)(result_data_ptr + 8) = temp_result;\n  return;\n}\n\n",
            "called": [
                "FUN_080040e8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_08000ad8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002bf0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_and_return_status_0800407c": "process_and_return_status",
                "process_request_0800403c": "process_request"
            },
            "code": "\nvoid initialize_MPU9250_08002ad0(void)\n\n{\n  process_and_return_status(0xd0,0x75,PTR_s____Src_MPU9250_c_08002b44,0x3b);\n  process_request(0xd0,0x6b,0x80,1);\n  process_request(0xd0,0x6b,1);\n  process_request(0xd0,0x6c,0,1);\n  process_request(0xd0,0x19,0,1);\n  process_request(0xd0,0x1d,3,1);\n  process_request(0xd0,0x1a,3,1);\n  process_request(0xd0,0x1b,0x10,1);\n  process_request(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "initialize_mpu9250_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "check_flags_after_swap_08001050",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkFlagsAfterSwap_08001050(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  swap_parameters_08000ffc();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "FUN_08002ee8"
            ],
            "imported": false,
            "current_name": "check_flags_after_swap_08001050"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "check_comparison_result_080009c8",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkComparisonResult_080009c8(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  compare_and_return_08000990();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_08000990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "check_comparison_result_080009c8"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "process_data_08002ed4",
                "puVar1": "dataPointer",
                "uVar2": "tempResult1",
                "uVar3": "tempResult2",
                "uVar4": "tempResult3"
            },
            "code": "\nvoid processData_08002ed4(void)\n\n{\n  undefined *dataPointer;\n  undefined4 tempResult1;\n  undefined4 tempResult2;\n  undefined4 tempResult3;\n  \n  dataPointer = PTR_DAT_08002ee4;\n  tempResult2 = *(undefined4 *)PTR_DAT_08002ee0;\n  tempResult3 = *(undefined4 *)(PTR_DAT_08002ee4 + 4);\n  tempResult1 = calculate_result_08000ad8(0x3f800000,tempResult3);\n  tempResult1 = float_multiplication_08000cec(tempResult1,tempResult2);\n  tempResult2 = float_multiplication_08000cec(tempResult3,*(undefined4 *)dataPointer);\n  tempResult1 = process_floating_point_08000adc(tempResult2,tempResult1);\n  *(undefined4 *)dataPointer = tempResult1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_data_08002ed4"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "doubleInput1",
                "uVar3": "doubleInput2",
                "uVar4": "tempVar",
                "bVar1": "condition1",
                "bVar5": "isZero"
            },
            "code": "\nuint calculateResult_08000f9c(uint input1,uint input2)\n\n{\n  bool condition1;\n  uint doubleInput1;\n  uint doubleInput2;\n  uint tempVar;\n  bool isZero;\n  \n  doubleInput1 = input1 * 2;\n  doubleInput2 = input2 * 2;\n  if (((int)doubleInput1 >> 0x18 == -1 || (int)doubleInput2 >> 0x18 == -1) &&\n     ((((int)doubleInput1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubleInput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  tempVar = doubleInput1 | input2 & 0x7fffffff;\n  isZero = tempVar == 0;\n  if (!isZero) {\n    tempVar = input1 ^ input2;\n    isZero = tempVar == 0;\n  }\n  condition1 = -1 < (int)tempVar;\n  if (condition1) {\n    input1 = doubleInput1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((condition1 && doubleInput2 <= doubleInput1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!condition1 || doubleInput2 > doubleInput1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "FUN_08001004"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nuint FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 extraout_r1_00;\n  undefined4 extraout_r1_01;\n  uint extraout_r1_02;\n  undefined4 extraout_r1_03;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  undefined4 uVar9;\n  uint uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  ulonglong uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  longlong lVar18;\n  ulonglong uVar19;\n  ulonglong uVar20;\n  undefined8 uVar21;\n  uint local_70;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar10 = param_4 & 0x7fffffff;\n  if ((uVar10 | param_3) == 0) {\n    return 0;\n  }\n  uVar8 = param_2 & 0x7fffffff;\n  if ((int)uVar8 <= (int)DAT_08006428) {\n    if (uVar8 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar8 < uVar10) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar10 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar10) {\n            local_70 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar10 == DAT_08006428) {\n                if ((uVar8 + 0xc0100000 | param_1) == 0) {\n                  return 0;\n                }\n                if (DAT_08006434 < (int)uVar8) {\n                  if ((int)param_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)param_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (uVar10 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return param_1;\n                }\n                uVar8 = 0;\n                uVar10 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              uVar19 = CONCAT44(param_2,param_1);\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                uVar10 = improved_calculation_08006c0c(param_1,param_2);\n                return uVar10;\n              }\n            }\n          }\n          else {\n            if ((int)uVar10 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              local_70 = 0;\n              goto LAB_080062ba;\n            }\n            iVar6 = ((int)uVar10 >> 0x14) + -0x3ff;\n            if (0x14 < iVar6) {\n              uVar2 = param_3 >> (0x34U - iVar6 & 0xff);\n              if (param_3 == uVar2 << (0x34U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar2 = (int)uVar10 >> (0x14U - iVar6 & 0xff);\n              local_70 = param_3;\n              if (uVar10 == uVar2 << (0x14U - iVar6 & 0xff)) {\n                local_70 = 2 - (uVar2 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            local_70 = 0;\n          }\n          uVar13 = do_nothing_0800708c(param_1,param_2);\n          uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n          uVar11 = (undefined4)(uVar13 >> 0x20);\n          uVar1 = (undefined4)uVar13;\n          uVar20 = uVar13 & 0xffffffff | ((ulonglong)param_2 & 0x7fffffff) << 0x20;\n          if ((param_1 == 0) && ((uVar8 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              uVar13 = floating_point_operation_08000724(0,DAT_08006438,uVar1,uVar11);\n            }\n            if (-1 < (int)param_2) {\n              return (uint)uVar13;\n            }\n            if ((local_70 | uVar8 + 0xc0100000) != 0) {\n              return (uint)uVar13;\n            }\n          }\n          else {\n            uVar2 = 0xffffffff - ((int)param_2 >> 0x1f);\n            uVar13 = CONCAT44(param_2,param_1);\n            if ((local_70 | uVar2) != 0) {\n              if (DAT_08006440 < (int)uVar10) {\n                param_1 = DAT_08006420;\n                param_2 = DAT_08006424;\n                if (DAT_08006440 + 0x2100000 < (int)uVar10) {\n                  if (DAT_08006434 < (int)uVar8) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return 0;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  uVar19 = CONCAT44(DAT_08006424,DAT_08006420);\n                  if (-1 < (int)param_4) {\n                    return 0;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar8 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar8) goto LAB_08006418;\n                uVar14 = floating_point_operation_08000168(uVar1,uVar11,0,DAT_080065d0);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar1 = (undefined4)uVar14;\n                uVar14 = calculate_result_080004d0(uVar1,uVar11,DAT_080065a8,DAT_080065ac);\n                uVar15 = calculate_result_080004d0(uVar1,uVar11,DAT_080065b0,DAT_080065b4);\n                uVar16 = calculate_result_080004d0(uVar1,uVar11,0,DAT_080065d4);\n                uVar16 = floating_point_operation_08000168(DAT_080065b8,DAT_080065bc,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = calculate_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar1,uVar11);\n                uVar16 = floating_point_operation_08000168(0,DAT_080065d8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar17 = calculate_result_080004d0(uVar1,uVar11,uVar1,uVar11);\n                uVar16 = calculate_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar17,\n                                      (int)((ulonglong)uVar17 >> 0x20));\n                uVar16 = calculate_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),DAT_080065c0,\n                                      DAT_080065c4);\n                uVar15 = floating_point_operation_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                floating_point_addition_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                             (int)((ulonglong)uVar15 >> 0x20));\n                lVar18 = (ulonglong)extraout_r1 << 0x20;\n                uVar10 = extraout_r1;\n              }\n              else {\n                local_54 = 0;\n                if (uVar8 < 0x100000) {\n                  uVar20 = calculate_result_080004d0();\n                  local_54 = -0x35;\n                }\n                uVar10 = (uint)(uVar20 >> 0x20);\n                uVar1 = (undefined4)uVar20;\n                local_54 = ((int)uVar10 >> 0x14) + -0x3ff + local_54;\n                uVar10 = uVar10 & 0xfffff;\n                uVar8 = uVar10 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar10) {\n                  if (DAT_08006920 < (int)uVar10) {\n                    uVar8 = uVar8 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar6 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar6 = 0;\n                }\n                uVar7 = *(undefined4 *)(PTR_DAT_08006924 + iVar6 * 8);\n                uVar9 = *(undefined4 *)((int)(PTR_DAT_08006924 + iVar6 * 8) + 4);\n                uVar14 = floating_point_operation_08000168(uVar1,uVar8,uVar7,uVar9);\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = floating_point_addition_0800016c(uVar1,uVar8,uVar7,uVar9);\n                uVar15 = floating_point_operation_08000724(0,DAT_08006928,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_result_080004d0((int)uVar14,uVar12,(int)uVar15,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = (undefined4)uVar16;\n                uVar16 = calculate_result_080004d0(0,uVar4);\n                uVar14 = floating_point_operation_08000168((int)uVar14,uVar12,(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = floating_point_operation_08000168(0,((int)uVar8 >> 1 | 0x20000000U) + 0x80000 + iVar6 * 0x40000,\n                                      uVar7,uVar9);\n                uVar16 = floating_point_operation_08000168(uVar1,uVar8,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = calculate_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),0,uVar4);\n                uVar14 = floating_point_operation_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar14 = calculate_result_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,uVar3\n                                     );\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = calculate_result_080004d0(uVar11,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar1 = (undefined4)uVar15;\n                uVar15 = calculate_result_080004d0(uVar1,uVar3,DAT_080068d0,DAT_080068d4);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar1,uVar3);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar16 = calculate_result_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar16 = floating_point_addition_0800016c(uVar11,uVar4,0,uVar4);\n                uVar16 = calculate_result_080004d0((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar15 = floating_point_addition_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_result_080004d0(0,uVar4,0,uVar4);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar17 = floating_point_addition_0800016c((int)uVar16,uVar3,0,DAT_0800692c);\n                floating_point_addition_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar15,uVar1);\n                uVar17 = calculate_result_080004d0(0,uVar4,0,extraout_r1_00);\n                uVar7 = (undefined4)((ulonglong)uVar17 >> 0x20);\n                uVar21 = floating_point_operation_08000168(0,extraout_r1_00,0,DAT_0800692c);\n                uVar16 = floating_point_operation_08000168((int)uVar21,(int)((ulonglong)uVar21 >> 0x20),(int)uVar16,uVar3\n                                     );\n                uVar15 = floating_point_operation_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar14 = calculate_result_080004d0((int)uVar14,uVar12,0,extraout_r1_00);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar1 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                floating_point_addition_0800016c((int)uVar17,uVar7,(int)uVar15,uVar1);\n                uVar14 = calculate_result_080004d0(0,extraout_r1_01,DAT_08006900,DAT_08006904);\n                uVar16 = floating_point_operation_08000168(0,extraout_r1_01,(int)uVar17,uVar7);\n                uVar15 = floating_point_operation_08000168((int)uVar15,uVar1,(int)uVar16,(int)((ulonglong)uVar16 >> 0x20)\n                                     );\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006908,\n                                      DAT_0800690c);\n                uVar16 = calculate_result_080004d0(0,extraout_r1_01,DAT_08006910,DAT_08006914);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),\n                                      *(undefined4 *)(PTR_DAT_08006930 + iVar6 * 8),\n                                      *(undefined4 *)((int)(PTR_DAT_08006930 + iVar6 * 8) + 4));\n                uVar16 = calculate_result_08000404(local_54);\n                uVar1 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar11 = *(undefined4 *)(PTR_DAT_08006934 + iVar6 * 8);\n                uVar12 = *(undefined4 *)((int)(PTR_DAT_08006934 + iVar6 * 8) + 4);\n                uVar17 = floating_point_addition_0800016c((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar17 = floating_point_addition_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),uVar11,uVar12);\n                floating_point_addition_0800016c((int)uVar17,(int)((ulonglong)uVar17 >> 0x20),(int)uVar16,uVar1);\n                uVar16 = floating_point_operation_08000168(0,extraout_r1_02,(int)uVar16,uVar1);\n                lVar18 = floating_point_operation_08000168((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),uVar11,uVar12);\n                uVar10 = extraout_r1_02;\n              }\n              uVar14 = floating_point_operation_08000168((int)lVar18,(int)((ulonglong)lVar18 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar14 = floating_point_operation_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              param_2 = DAT_080065dc;\n              if ((local_70 - 1 | uVar2) != 0) {\n                param_2 = DAT_080065d0;\n              }\n              uVar15 = floating_point_operation_08000168(param_3,param_4,0,param_4);\n              uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),0,uVar10);\n              uVar14 = calculate_result_080004d0((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),param_3,param_4);\n              uVar14 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                    (int)((ulonglong)uVar14 >> 0x20));\n              uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar1 = (undefined4)uVar14;\n              uVar14 = calculate_result_080004d0(0,uVar10,0,param_4);\n              uVar3 = (undefined4)((ulonglong)uVar14 >> 0x20);\n              uVar11 = (undefined4)uVar14;\n              lVar18 = floating_point_addition_0800016c(uVar1,uVar12,uVar11,uVar3);\n              uVar8 = (uint)((ulonglong)lVar18 >> 0x20);\n              uVar10 = (uint)lVar18;\n              if (DAT_080065e0 < (int)uVar8) {\n                if ((uVar8 + 0xbf700000 | uVar10) == 0) {\n                  uVar15 = floating_point_addition_0800016c(uVar1,uVar12,DAT_08006ba8,DAT_08006bac);\n                  uVar16 = floating_point_operation_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = is_comparison_equal_080009f0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                       (int)((ulonglong)uVar16 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = calculate_result_080004d0(0,param_2,DAT_080065c8,DAT_080065cc);\n                param_1 = DAT_080065c8;\n                param_2 = DAT_080065cc;\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar8 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar8 | uVar10) == 0) {\n                  uVar15 = floating_point_operation_08000168(uVar10,uVar8,uVar11,uVar3);\n                  iVar6 = check_comparison_result_080009c8(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                  if (iVar6 == 0) goto LAB_08006968;\n                }\n                uVar19 = calculate_result_080004d0(0,param_2,DAT_08006bf0,DAT_08006bf4);\n                param_1 = DAT_08006bf0;\n                param_2 = DAT_08006bf4;\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar8 & 0x7fffffff)) {\n                  uVar8 = (0x100000 >> (((int)(uVar8 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar8;\n                  uVar10 = (uVar8 * 2 >> 0x15) - 0x3ff;\n                  iVar6 = (int)(uVar8 & 0xfffff | 0x100000) >> (0x14 - uVar10 & 0xff);\n                  if (lVar18 < 0) {\n                    iVar6 = -iVar6;\n                  }\n                  uVar14 = floating_point_operation_08000168(uVar11,uVar3,0,uVar8 & ~(DAT_08006bfc >> (uVar10 & 0xff)));\n                }\n                else {\n                  iVar6 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                local_68 = (undefined4)uVar14;\n                floating_point_addition_0800016c(local_68,local_64,uVar1,uVar12);\n                uVar14 = calculate_result_080004d0(0,extraout_r1_03,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = floating_point_operation_08000168(0,extraout_r1_03,local_68,local_64);\n                uVar15 = floating_point_operation_08000168(uVar1,uVar12,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bb8,\n                                      DAT_08006bbc);\n                uVar16 = calculate_result_080004d0(0,extraout_r1_03,DAT_08006bc0,DAT_08006bc4);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar16,\n                                      (int)((ulonglong)uVar16 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = floating_point_addition_0800016c((int)uVar14,uVar11,(int)uVar15,uVar12);\n                uVar3 = (undefined4)((ulonglong)uVar16 >> 0x20);\n                uVar1 = (undefined4)uVar16;\n                uVar14 = floating_point_operation_08000168(uVar1,uVar3,(int)uVar14,uVar11);\n                uVar14 = floating_point_operation_08000168((int)uVar15,uVar12,(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = calculate_result_080004d0(uVar1,uVar3,uVar1,uVar3);\n                uVar4 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar11 = (undefined4)uVar15;\n                uVar15 = calculate_result_080004d0(uVar11,uVar4,DAT_08006bc8,DAT_08006bcc);\n                uVar15 = floating_point_operation_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd0,\n                                      DAT_08006bd4);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = floating_point_operation_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be0,\n                                      DAT_08006be4);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = floating_point_addition_0800016c((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar15 = calculate_result_080004d0((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar11,uVar4);\n                uVar15 = floating_point_operation_08000168(uVar1,uVar3,(int)uVar15,(int)((ulonglong)uVar15 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar16 = calculate_result_080004d0(uVar1,uVar3,(int)uVar15,uVar11);\n                uVar15 = floating_point_operation_08000168((int)uVar15,uVar11,0,0x40000000);\n                uVar15 = floating_point_operation_08000724((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar15,\n                                      (int)((ulonglong)uVar15 >> 0x20));\n                uVar16 = calculate_result_080004d0(uVar1,uVar3,(int)uVar14,uVar12);\n                uVar14 = floating_point_addition_0800016c((int)uVar16,(int)((ulonglong)uVar16 >> 0x20),(int)uVar14,\n                                      uVar12);\n                uVar14 = floating_point_operation_08000168((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = floating_point_operation_08000168((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar1,uVar3);\n                uVar13 = floating_point_operation_08000168(0,DAT_08006c00,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                iVar5 = (int)(uVar13 >> 0x20);\n                uVar10 = iVar5 + iVar6 * 0x100000;\n                uVar19 = uVar13 & 0xffffffff | (ulonglong)uVar10 << 0x20;\n                if ((int)uVar10 < 0x100000) {\n                  uVar19 = calculate_modified_result_080071c0((int)uVar13,iVar5,iVar6);\n                }\n                param_1 = 0;\n              }\nLAB_0800634a:\n              uVar10 = calculate_result_080004d0((int)uVar19,(int)(uVar19 >> 0x20),param_1,param_2);\n              return uVar10;\n            }\n          }\n          uVar1 = (undefined4)(uVar13 >> 0x20);\n          uVar14 = floating_point_operation_08000168((int)uVar13,uVar1,(int)uVar13,uVar1);\n          uVar10 = (uint)((ulonglong)uVar14 >> 0x20);\n          uVar8 = (uint)uVar14;\n          param_1 = uVar8;\n          param_2 = uVar10;\nLAB_08006320:\n          uVar10 = floating_point_operation_08000724(uVar8,uVar10,param_1,param_2);\n          return uVar10;\n        }\n      }\n    }\n    else if ((int)uVar10 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar8 + 0xc0100000 | param_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  uVar10 = shift_and_return_080070a4(PTR_DAT_0800642c);\n  return uVar10;\n}\n\n",
            "called": [
                "FUN_080009c8",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_08000404",
                "FUN_080009f0",
                "FUN_080070a4",
                "FUN_080004d0",
                "FUN_08000724",
                "FUN_0800708c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "FUN_08005900"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_transformed_value_08000c3c",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "iVar3": "base_value",
                "uVar4": "temp_value"
            },
            "code": "\nuint calculate_transformed_value_08000c3c(uint input_value)\n\n{\n  int leading_zeroes_count;\n  uint shift_amount;\n  int base_value;\n  uint temp_value;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes_count - 8;\n  base_value = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeroes_count) {\n    temp_value = 0 << (shift_amount & 0xff);\n    shift_amount = base_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < temp_value);\n    if (temp_value == 0x80000000) {\n      shift_amount = shift_amount & 0xfffffffe;\n    }\n    return shift_amount;\n  }\n  temp_value = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  shift_amount = base_value + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)temp_value >> 0x1f));\n  if ((temp_value & 0x7fffffff) == 0) {\n    shift_amount = shift_amount & ~(temp_value >> 0x1f);\n  }\n  return shift_amount;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "calculate_transformed_value_08000c3c"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "uVar1": "data1",
                "uVar2": "data2",
                "puVar3": "dest_ptr",
                "puVar4": "src_ptr",
                "local_24": "buffer",
                "local_1c": "unused_var"
            },
            "code": "\nvoid copy_and_process_data_080043bc(void)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 buffer [2];\n  undefined2 unused_var [6];\n  \n  dest_ptr = buffer;\n  src_ptr = (undefined4 *)PTR_DAT_080043ec;\n  do {\n    data1 = *src_ptr;\n    data2 = src_ptr[1];\n    src_ptr = src_ptr + 2;\n    *dest_ptr = data1;\n    dest_ptr[1] = data2;\n    dest_ptr = dest_ptr + 2;\n  } while (src_ptr != (undefined4 *)(PTR_DAT_080043ec + 0x10));\n  *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n  process_encrypted_data_08004300(0x66,buffer,0x12);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "copy_and_process_data_080043bc"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "update_data_array_08001214",
                "param_1": "inputValue",
                "puVar1": "dataPointer",
                "iVar2": "dataArrayIndex"
            },
            "code": "\nundefined4 updateDataArray_08001214(int inputValue)\n\n{\n  undefined4 *dataPointer;\n  int dataArrayIndex;\n  \n  dataArrayIndex = DAT_0800123c;\n  dataPointer = DAT_08001238;\n  if (inputValue - 1U < 0x1000000) {\n    DAT_08001238[1] = inputValue - 1U;\n    *(undefined *)(dataArrayIndex + 0x23) = 0xf0;\n    dataPointer[2] = 0;\n    *dataPointer = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "update_data_array_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "update_data_08003fc4",
                "param_1": "inputData"
            },
            "code": "\nvoid updateData_08003fc4(undefined4 inputData)\n\n{\n  *(undefined4 *)(*(int *)PTR_DAT_08003fcc + 0x40) = inputData;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "update_data_08003fc4"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "calculate_result_08000404",
                "param_1": "input_value",
                "uVar1": "lower_dword",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "adjusted_zeroes",
                "uVar6": "sign_bit",
                "in_r12": "inverse_shift",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag"
            },
            "code": "\nulonglong calculate_result_08000404(uint input_value)\n\n{\n  uint lower_dword;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeroes;\n  uint adjusted_zeroes;\n  uint sign_bit;\n  uint inverse_shift;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input = -input_value;\n  }\n  lower_dword = 0;\n  leading_zeroes = count_leading_zeroes(abs_input);\n  adjusted_zeroes = leading_zeroes + 0x15;\n  carry_flag = SBORROW4(adjusted_zeroes,0x20);\n  shift_amount = leading_zeroes - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if ((int)adjusted_zeroes < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    leading_zeroes = leading_zeroes + 1;\n    is_negative = leading_zeroes < 0;\n    is_zero = leading_zeroes == 0;\n    shift_amount = adjusted_zeroes;\n    if (!is_zero && is_negative == carry_flag) {\n      lower_dword = abs_input << (adjusted_zeroes & 0xff);\n      abs_input = abs_input >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    inverse_shift = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (inverse_shift & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    lower_dword = 0 << (shift_amount & 0xff);\n  }\nLAB_080002f0:\n  if ((int)adjusted_zeroes < 0x433) {\n    return CONCAT44(abs_input + (0x432 - adjusted_zeroes) * 0x100000 | sign_bit,lower_dword);\n  }\n  shift_amount = ~(0x432 - adjusted_zeroes);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeroes = shift_amount - 0x13;\n  if (leading_zeroes == 0 || leading_zeroes < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    lower_dword >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,lower_dword >> (0x20 - (0xcU - leading_zeroes) & 0xff) | abs_input << (0xcU - leading_zeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_result_08000404"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "process_input_0800209c",
                "param_1": "input_array",
                "param_2": "input_value",
                "cVar1": "bit1",
                "cVar2": "bit2",
                "puVar3": "global_data_ptr",
                "iVar4": "temp_var1",
                "iVar5": "temp_var2",
                "uVar6": "current_value",
                "uVar7": "shifted_value"
            },
            "code": "\nundefined4 process_input_0800209c(uint *input_array,uint input_value)\n\n{\n  char bit1;\n  char bit2;\n  uint *global_data_ptr;\n  int temp_var1;\n  int temp_var2;\n  uint current_value;\n  uint shifted_value;\n  \n  global_data_ptr = DAT_08002204;\n  if ((input_value <= (*DAT_08002204 & 7)) ||\n     (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_value, input_value == (*global_data_ptr & 7))) {\n    current_value = *input_array;\n    if ((int)(current_value << 0x1e) < 0) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xffffff0f | input_array[2];\n    }\n    global_data_ptr = DAT_08002208;\n    temp_var1 = current_value << 0x1f;\n    if (-1 < temp_var1) {\nLAB_080020ba:\n      global_data_ptr = DAT_08002204;\n      if ((input_value < (*DAT_08002204 & 7)) &&\n         (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | input_value, input_value != (*global_data_ptr & 7))) {\n        return 1;\n      }\n      global_data_ptr = DAT_08002208;\n      current_value = *input_array;\n      if ((current_value & 4) != 0) {\n        DAT_08002208[1] = DAT_08002208[1] & 0xfffff8ff | input_array[3];\n      }\n      if ((int)(current_value << 0x1c) < 0) {\n        global_data_ptr[1] = global_data_ptr[1] & 0xffffc7ff | input_array[4] << 3;\n      }\n      current_value = calculate_result_08002008();\n      shifted_value = count_leading_zeroes(0xf000000);\n      *(uint *)PTR_DAT_08002210 = current_value >> PTR_DAT_0800220c[(global_data_ptr[1] & 0xf0) >> (shifted_value & 0xff)];\n      process_data_08001104(0);\n      return 0;\n    }\n    current_value = input_array[1];\n    if (current_value == 1) {\n      bit2 = '\\x01';\n      bit1 = '\\0';\n    }\n    else {\n      if (current_value == 2) {\n        shifted_value = *DAT_08002208;\n        goto LAB_08002176;\n      }\n      bit2 = '\\0';\n      bit1 = '\\x01';\n    }\n    shifted_value = count_leading_zeroes((uint)(byte)(bit1 << 6) << 0x18 | (uint)(byte)(bit2 << 6) << 8);\n    shifted_value = (*DAT_08002208 >> (shifted_value & 0x1f)) << 0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      DAT_08002208[1] = DAT_08002208[1] & 0xfffffffc | current_value;\n      temp_var1 = get_undefined4_value_0800115c(temp_var1,shifted_value);\n      if (input_array[1] == 1) {\n        do {\n          if ((global_data_ptr[1] & 0xc) == 4) goto LAB_080020ba;\n          temp_var2 = get_undefined4_value_0800115c();\n        } while ((uint)(temp_var2 - temp_var1) < 0x1389);\n      }\n      else if (input_array[1] == 2) {\n        do {\n          if ((global_data_ptr[1] & 0xc) == 8) goto LAB_080020ba;\n          temp_var2 = get_undefined4_value_0800115c();\n        } while ((uint)(temp_var2 - temp_var1) < 0x1389);\n      }\n      else {\n        do {\n          if ((global_data_ptr[1] & 0xc) == 0) goto LAB_080020ba;\n          temp_var2 = get_undefined4_value_0800115c();\n        } while ((uint)(temp_var2 - temp_var1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "process_input_0800209c"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "process_request_0800403c",
                "param_1": "inputBuffer",
                "param_2": "outputBuffer",
                "param_3": "requestType",
                "param_4": "performExtraCheck",
                "iVar1": "processResult",
                "local_14": "requestTypeArray"
            },
            "code": "\nvoid processRequest_0800403c(undefined4 inputBuffer,undefined4 outputBuffer,undefined requestType,int performExtraCheck)\n\n{\n  int processResult;\n  undefined requestTypeArray [8];\n  \n  requestTypeArray[0] = requestType;\n  processResult = process_buffer_08001828(PTR_DAT_08004074,inputBuffer,outputBuffer,1,requestTypeArray,1,200);\n  if (processResult != 0) {\n    process_data_and_strings_08004490(PTR_s____Src_i2c_c_08004078,0x1b);\n  }\n  if (performExtraCheck != 0) {\n    thunk_do_nothing_08001168(0x32);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "FUN_0800411c",
                "FUN_08003298",
                "FUN_08002cb0",
                "FUN_08002ad0"
            ],
            "imported": false,
            "current_name": "process_request_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "float_multiplication_08000cec",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "unused_param",
                "param_4": "exp1",
                "lVar1": "long_product",
                "uVar2": "temp_result",
                "uVar3": "exp2",
                "iVar4": "exp_sum",
                "iVar5": "exp_diff",
                "uVar6": "mantissa_product",
                "iVar7": "exp_adjust",
                "uVar8": "result",
                "bVar9": "condition",
                "bVar10": "borrow"
            },
            "code": "\nuint float_multiplication_08000cec(uint float1,uint float2,undefined4 unused_param,uint exp1)\n\n{\n  longlong long_product;\n  uint temp_result;\n  uint exp2;\n  int exp_sum;\n  int exp_diff;\n  uint mantissa_product;\n  int exp_adjust;\n  uint result;\n  bool condition;\n  bool borrow;\n  \n  exp2 = float1 >> 0x17 & 0xff;\n  condition = exp2 == 0;\n  if (!condition) {\n    exp1 = float2 >> 0x17 & 0xff;\n    condition = exp1 == 0;\n  }\n  if (!condition) {\n    condition = exp2 == 0xff;\n  }\n  if (!condition) {\n    condition = exp1 == 0xff;\n  }\n  if (condition) {\n    exp1 = float2 >> 0x17 & 0xff;\n    if (exp2 == 0xff || exp1 == 0xff) {\n      condition = float1 == 0 || float1 == 0x80000000;\n      temp_result = float2;\n      if (float1 != 0 && float1 != 0x80000000) {\n        condition = float2 == 0;\n        temp_result = float1;\n      }\n      if (!condition) {\n        condition = float2 == 0x80000000;\n      }\n      result = temp_result;\n      if (((condition) || ((exp2 == 0xff && ((temp_result & 0x7fffff) != 0)))) ||\n         ((exp1 == 0xff && (result = float2, (float2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      temp_result = temp_result ^ float2;\n      goto LAB_08000e3c;\n    }\n    condition = (float1 & 0x7fffffff) == 0;\n    if (!condition) {\n      condition = (float2 & 0x7fffffff) == 0;\n    }\n    if (condition) {\n      return (float1 ^ float2) & 0x80000000;\n    }\n    condition = exp2 == 0;\n    temp_result = float1 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        float1 = float1 << 1;\n        condition = (float1 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exp2 = exp2 - 1;\n    }\n    float1 = float1 | temp_result;\n    condition = exp1 == 0;\n    temp_result = float2 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        float2 = float2 << 1;\n        condition = (float2 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exp1 = exp1 - 1;\n    }\n    float2 = float2 | temp_result;\n  }\n  exp_sum = exp2 + exp1;\n  result = float1 ^ float2;\n  exp2 = float1 << 9;\n  condition = exp2 == 0;\n  if (!condition) {\n    float2 = float2 << 9;\n    condition = float2 == 0;\n  }\n  if (condition) {\n    if (exp2 == 0) {\n      float2 = float2 << 9;\n    }\n    temp_result = result & 0x80000000 | float1 & 0x7fffff | float2 >> 9;\n    borrow = SBORROW4(exp_sum,0x7f);\n    exp_diff = exp_sum + -0x7f;\n    condition = exp_diff == 0;\n    exp_adjust = exp_diff;\n    if (!condition && 0x7e < exp_sum) {\n      borrow = SBORROW4(0xff,exp_diff);\n      exp_adjust = 0xff - exp_diff;\n      condition = exp_diff == 0xff;\n    }\n    if (!condition && exp_adjust < 0 == borrow) {\n      temp_result = temp_result | exp_diff * 0x800000;\n    }\n    if (!condition && exp_adjust < 0 == borrow) {\n      return temp_result;\n    }\n    temp_result = temp_result | 0x800000;\n    mantissa_product = 0;\n    borrow = SBORROW4(exp_diff,1);\n    result = exp_sum - 0x80;\n    condition = result == 0;\n    exp2 = result;\n  }\n  else {\n    long_product = (ulonglong)(exp2 >> 5 | 0x8000000) * (ulonglong)(float2 >> 5 | 0x8000000);\n    mantissa_product = (uint)long_product;\n    temp_result = (uint)((ulonglong)long_product >> 0x20);\n    condition = temp_result < 0x800000;\n    if (condition) {\n      temp_result = temp_result << 1;\n    }\n    if (condition) {\n      temp_result = temp_result | mantissa_product >> 0x1f;\n      mantissa_product = mantissa_product << 1;\n    }\n    temp_result = result & 0x80000000 | temp_result;\n    result = (exp_sum + -0x7f) - (uint)condition;\n    borrow = SBORROW4(result,0xfd);\n    condition = result == 0xfd;\n    exp2 = result - 0xfd;\n    if (result < 0xfe) {\n      temp_result = temp_result + result * 0x800000 + (uint)(0x7fffffff < mantissa_product);\n      if (mantissa_product == 0x80000000) {\n        temp_result = temp_result & 0xfffffffe;\n      }\n      return temp_result;\n    }\n  }\n  if (condition || (int)exp2 < 0 != borrow) {\n    condition = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || condition != SCARRY4(result,0x19)) {\n      temp_result = temp_result & 0x80000000;\n    }\n    if (result != 0xffffffe7 && condition == SCARRY4(result,0x19)) {\n      exp2 = (temp_result << 1) >> (-result & 0xff);\n      result = temp_result << (result + 0x20 & 0xff);\n      exp2 = ((uint)((temp_result & 0x80000000) != 0) << 0x1f | exp2 >> 1) + (uint)((byte)exp2 & 1);\n      if ((mantissa_product | result << 1) == 0) {\n        exp2 = exp2 & ~(result >> 0x1f);\n      }\n      return exp2;\n    }\n    return temp_result;\n  }\nLAB_08000e3c:\n  return temp_result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cec",
            "calling": [
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_08004a30"
            ],
            "imported": false,
            "current_name": "float_multiplication_08000cec"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1_low",
                "param_2": "input1_high",
                "param_3": "input2_low",
                "param_4": "input2_high",
                "uVar1": "combined_signs",
                "uVar2": "abs_input1_high",
                "iVar3": "difference",
                "uVar4": "abs_input2_high",
                "uVar5": "result",
                "uVar6": "intermediate_result",
                "uVar7": "temp_result1",
                "uVar8": "temp_result2"
            },
            "code": "\nulonglong calculate_result_08006070(uint input1_low,uint input1_high,uint input2_low,uint input2_high)\n\n{\n  uint combined_signs;\n  uint abs_input1_high;\n  int difference;\n  uint abs_input2_high;\n  ulonglong result;\n  ulonglong intermediate_result;\n  undefined8 temp_result1;\n  undefined8 temp_result2;\n  \n  intermediate_result = CONCAT44(DAT_08006214,DAT_08006210);\n  result = CONCAT44(DAT_08006204,DAT_08006200);\n  abs_input2_high = input2_high & 0x7fffffff;\n  if ((DAT_08006220 < (abs_input2_high | (-input2_low | input2_low) >> 0x1f)) ||\n     (abs_input1_high = input1_high & 0x7fffffff, DAT_08006220 < (abs_input1_high | (-input1_low | input1_low) >> 0x1f))) {\n    result = floating_point_addition_0800016c(input1_low,input1_high,input2_low,input2_high,input2_high);\n    return result;\n  }\n  if ((input2_high + 0xc0100000 | input2_low) == 0) {\n    result = calculate_complex_operation_08006d68();\n    return result;\n  }\n  combined_signs = (int)input2_high >> 0x1e & 2U | input1_high >> 0x1f;\n  if ((input1_low | abs_input1_high) == 0) {\n    if (combined_signs == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (combined_signs != 3) {\n      return CONCAT44(input1_high,input1_low);\n    }\n  }\n  else {\n    if ((input2_low | abs_input2_high) != 0) {\n      if (abs_input2_high == DAT_08006220) {\n        if (abs_input1_high == abs_input2_high) {\n          if (combined_signs == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (combined_signs == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (combined_signs != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (combined_signs == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (combined_signs == 3) {\n          return result;\n        }\n        if (combined_signs == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (abs_input1_high != DAT_08006220) {\n        difference = (int)(abs_input1_high - abs_input2_high) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input2_high < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            intermediate_result = 0;\n          }\n          else {\n            floating_point_operation_08000724(input1_low,input1_high);\n            do_nothing_0800708c();\n            intermediate_result = calculate_complex_operation_08006d68();\n          }\n        }\n        difference = (int)(intermediate_result >> 0x20);\n        if (combined_signs != 1) {\n          if (combined_signs == 2) {\n            temp_result2 = floating_point_operation_08000168((int)intermediate_result,difference,DAT_08006208,DAT_0800620c);\n            temp_result1 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (combined_signs == 0) {\n              return intermediate_result;\n            }\n            temp_result1 = floating_point_operation_08000168((int)intermediate_result,difference,DAT_08006208,DAT_0800620c);\n            temp_result2 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          result = floating_point_operation_08000168((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                               (int)((ulonglong)temp_result2 >> 0x20));\n          return result;\n        }\n        return intermediate_result & 0xffffffff | (ulonglong)(difference + 0x80000000) << 0x20;\n      }\n    }\n    result = intermediate_result;\n    if ((int)input1_high < 0) {\n      result = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_08006d68",
                "FUN_0800708c",
                "FUN_08000724"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "thunk_FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "thunk_FUN_08006070": {
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "iVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "result_1",
                "uVar6": "result_2",
                "uVar7": "temp_result_1",
                "uVar8": "temp_result_2"
            },
            "code": "\nulonglong calculate_result_thunk_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  int temp_var_3;\n  uint temp_var_4;\n  ulonglong result_1;\n  ulonglong result_2;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  \n  result_2 = CONCAT44(DAT_08006214,DAT_08006210);\n  result_1 = CONCAT44(DAT_08006204,DAT_08006200);\n  temp_var_4 = input_4 & 0x7fffffff;\n  if ((DAT_08006220 < (temp_var_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (temp_var_2 = input_2 & 0x7fffffff, DAT_08006220 < (temp_var_2 | (-input_1 | input_1) >> 0x1f))) {\n    result_1 = floating_point_addition_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return result_1;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    result_1 = calculate_complex_operation_08006d68();\n    return result_1;\n  }\n  temp_var_1 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | temp_var_2) == 0) {\n    if (temp_var_1 == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (temp_var_1 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\n  }\n  else {\n    if ((input_3 | temp_var_4) != 0) {\n      if (temp_var_4 == DAT_08006220) {\n        if (temp_var_2 == temp_var_4) {\n          if (temp_var_1 == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (temp_var_1 == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (temp_var_1 != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (temp_var_1 == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (temp_var_1 == 3) {\n          return result_1;\n        }\n        if (temp_var_1 == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (temp_var_2 != DAT_08006220) {\n        temp_var_3 = (int)(temp_var_2 - temp_var_4) >> 0x14;\n        if (temp_var_3 < 0x3d) {\n          if (((int)input_4 < 0) && (temp_var_3 + 0x3c < 0 != SCARRY4(temp_var_3,0x3c))) {\n            result_2 = 0;\n          }\n          else {\n            floating_point_operation_08000724(input_1,input_2);\n            do_nothing_0800708c();\n            result_2 = calculate_complex_operation_08006d68();\n          }\n        }\n        temp_var_3 = (int)(result_2 >> 0x20);\n        if (temp_var_1 != 1) {\n          if (temp_var_1 == 2) {\n            temp_result_2 = floating_point_operation_08000168((int)result_2,temp_var_3,DAT_08006208,DAT_0800620c);\n            temp_result_1 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (temp_var_1 == 0) {\n              return result_2;\n            }\n            temp_result_1 = floating_point_operation_08000168((int)result_2,temp_var_3,DAT_08006208,DAT_0800620c);\n            temp_result_2 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          result_1 = floating_point_operation_08000168((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                               (int)((ulonglong)temp_result_2 >> 0x20));\n          return result_1;\n        }\n        return result_2 & 0xffffffff | (ulonglong)(temp_var_3 + 0x80000000) << 0x20;\n      }\n    }\n    result_1 = result_2;\n    if ((int)input_2 < 0) {\n      result_1 = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result_1;\n}\n\n",
            "called": [
                "FUN_08006070"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_thunk_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "process_data_and_string_08004cac",
                "param_1": "input_data",
                "puVar1": "formatted_data_ptr"
            },
            "code": "\nvoid process_data_and_string_08004cac(undefined4 input_data)\n\n{\n  undefined *formatted_data_ptr;\n  \n  formatted_data_ptr = PTR_DAT_08004cc4;\n  format_and_append_data_08004ffc(PTR_DAT_08004cc4,PTR_DAT_08004cc8,input_data);\n  process_string_08004c8c(formatted_data_ptr);\n  return;\n}\n\n",
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "FUN_08004490"
            ],
            "imported": false,
            "current_name": "process_data_and_string_08004cac"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "inputData",
                "puVar1": "dataPtr",
                "iVar2": "timeValue1",
                "iVar3": "timeValue2",
                "uVar4": "tempVar",
                "puVar5": "ushortPtr"
            },
            "code": "\nundefined4 processData_08004c18(undefined inputData)\n\n{\n  undefined *dataPtr;\n  int timeValue1;\n  int timeValue2;\n  undefined tempVar;\n  ushort *ushortPtr;\n  \n  ushortPtr = (ushort *)PTR_DAT_08004c28;\n  *PTR_DAT_08004c28 = inputData;\n  dataPtr = PTR_DAT_08004c2c;\n  if ((PTR_DAT_08004c2c[0x39] == '\\x01') || (PTR_DAT_08004c2c[0x39] == '\\\"')) {\n    if (ushortPtr == (ushort *)0x0) {\n      return 1;\n    }\n    if (PTR_DAT_08004c2c[0x38] != '\\x01') {\n      PTR_DAT_08004c2c[0x38] = 1;\n      *(undefined4 *)(dataPtr + 0x3c) = 0;\n      *(undefined2 *)(dataPtr + 0x24) = 1;\n      if (dataPtr[0x39] == '\\\"') {\n        tempVar = 0x32;\n      }\n      else {\n        tempVar = 0x12;\n      }\n      *(undefined2 *)(dataPtr + 0x26) = 1;\n      dataPtr[0x39] = tempVar;\nLAB_080027c4:\n      do {\n        if (*(short *)(dataPtr + 0x26) == 0) {\n          timeValue1 = get_undefined4_value_0800115c();\n          do {\n            if (**(int **)dataPtr << 0x19 < 0) {\n              if (dataPtr[0x39] == '2') {\n                tempVar = 0x22;\n              }\n              else {\n                tempVar = 1;\n              }\n              dataPtr[0x39] = tempVar;\n              dataPtr[0x38] = 0;\n              return 0;\n            }\n            timeValue2 = get_undefined4_value_0800115c();\n          } while ((uint)(timeValue2 - timeValue1) < 6);\nLAB_0800281c:\n          timeValue1 = *(int *)dataPtr;\n          *(uint *)(timeValue1 + 0xc) = *(uint *)(timeValue1 + 0xc) & 0xffffff7f;\n          *(uint *)(timeValue1 + 0xc) = *(uint *)(timeValue1 + 0xc) & 0xffffffdf;\n          *(uint *)(timeValue1 + 0xc) = *(uint *)(timeValue1 + 0xc) & 0xfffffeff;\n          *(uint *)(timeValue1 + 0x14) = *(uint *)(timeValue1 + 0x14) & 0xfffffffe;\n          dataPtr[0x39] = 1;\n          dataPtr[0x38] = 0;\n          return 3;\n        }\n        *(short *)(dataPtr + 0x26) = *(short *)(dataPtr + 0x26) + -1;\n        if (*(int *)(dataPtr + 8) == 0x1000) {\n          timeValue1 = get_undefined4_value_0800115c();\n          while (-1 < **(int **)dataPtr << 0x18) {\n            timeValue2 = get_undefined4_value_0800115c();\n            if (5 < (uint)(timeValue2 - timeValue1)) goto LAB_0800281c;\n          }\n          (*(int **)dataPtr)[1] = *ushortPtr & 0x1ff;\n          if (*(int *)(dataPtr + 0x10) == 0) {\n            ushortPtr = ushortPtr + 1;\n            goto LAB_080027c4;\n          }\n        }\n        else {\n          timeValue1 = get_undefined4_value_0800115c();\n          while (-1 < **(int **)dataPtr << 0x18) {\n            timeValue2 = get_undefined4_value_0800115c();\n            if (5 < (uint)(timeValue2 - timeValue1)) goto LAB_0800281c;\n          }\n          (*(int **)dataPtr)[1] = (uint)*(byte *)ushortPtr;\n        }\n        ushortPtr = (ushort *)((int)ushortPtr + 1);\n      } while( true );\n    }\n  }\n  return 2;\n}\n\n",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "process_data_08004c18"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "process_data_0800483c",
                "param_1": "data_array",
                "uVar1": "float_result",
                "uVar2": "float_result_2",
                "iVar3": "check_result",
                "iVar4": "temp_result",
                "iVar5": "temp_result_2",
                "iVar6": "array_value_2"
            },
            "code": "\nvoid process_data_0800483c(int *data_array)\n\n{\n  undefined4 float_result;\n  undefined4 float_result_2;\n  int check_result;\n  int temp_result;\n  int temp_result_2;\n  int array_value_2;\n  \n  temp_result = data_array[0xc];\n  float_result = process_floating_point_08000adc(data_array[7],data_array[9]);\n  temp_result = calculate_result_08000ad8(float_result,temp_result);\n  data_array[10] = temp_result;\n  if (*data_array == 3) {\n    temp_result = check_swapped_parameters_08001064(data_array[10],0);\n    if (temp_result == 0) {\n      temp_result = check_combined_parameters_08001028(data_array[10],DAT_08004974);\n    }\n    else {\n      temp_result = check_swapped_parameters_08001064(data_array[10],DAT_08004964);\n    }\n    if (temp_result != 0) {\n      temp_result_2 = data_array[10];\n      float_result = float_multiplication_08000cec(data_array[10],DAT_08004968);\n      temp_result = check_swapped_parameters_08001064(data_array[10],0);\n      check_result = data_array[10];\n      if (temp_result == 0) {\n        check_result = check_result + -0x80000000;\n      }\n      float_result = floating_point_division_08000e54(float_result,check_result);\n      temp_result = calculate_result_08000ad8(temp_result_2,float_result);\n      data_array[10] = temp_result;\n    }\n  }\n  array_value_2 = data_array[2];\n  temp_result_2 = data_array[3];\n  temp_result = float_multiplication_08000cec(data_array[1],data_array[10]);\n  data_array[0xe] = temp_result;\n  temp_result = process_floating_point_08000adc(data_array[10],data_array[0xf]);\n  data_array[0xf] = temp_result;\n  check_result = check_combined_parameters_08001028(data_array[0xf],DAT_0800496c);\n  temp_result = DAT_0800496c;\n  if ((check_result == 0) &&\n     (check_result = check_swapped_parameters_08001064(data_array[0xf],DAT_08004970), temp_result = DAT_08004970, check_result == 0)) {\n    temp_result = data_array[0xf];\n  }\n  data_array[0xf] = temp_result;\n  temp_result = calculate_result_08000ad8(data_array[0xc],data_array[0xd]);\n  data_array[0x10] = temp_result;\n  temp_result = data_array[0xe];\n  float_result = float_multiplication_08000cec(array_value_2,data_array[0xf]);\n  float_result = process_floating_point_08000adc(float_result,temp_result);\n  float_result_2 = float_multiplication_08000cec(temp_result_2,data_array[0x10]);\n  temp_result = calculate_result_08000ad8(float_result,float_result_2);\n  data_array[0x12] = temp_result;\n  float_result = calculate_adjusted_value_08000c44(data_array[0x13]);\n  check_result = check_combined_parameters_08001028(data_array[0x12],DAT_0800496c);\n  temp_result = DAT_0800496c;\n  if ((check_result == 0) &&\n     (check_result = check_swapped_parameters_08001064(data_array[0x12],DAT_08004970), temp_result = DAT_08004970, check_result == 0)) {\n    temp_result = data_array[0x12];\n  }\n  temp_result = float_multiplication_08000cec(temp_result,float_result);\n  data_array[0x12] = temp_result;\n  data_array[0xd] = data_array[0xc];\n  data_array[0xb] = data_array[10];\n  data_array[0x15] = data_array[0x14];\n  return;\n}\n\n",
            "called": [
                "FUN_08000e54",
                "FUN_08001064",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "process_data_0800483c"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "process_string_08004c8c",
                "param_1": "input_string",
                "uVar1": "string_len",
                "puVar2": "current_char_ptr"
            },
            "code": "\nvoid process_string_08004c8c(undefined *input_string)\n\n{\n  uint string_len;\n  undefined *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  while( true ) {\n    string_len = string_length_08000150(input_string);\n    if (string_len <= (uint)((int)current_char_ptr - (int)input_string)) break;\n    process_data_08004c18(*current_char_ptr);\n    current_char_ptr = current_char_ptr + 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004c18",
                "FUN_08000150"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "imported": false,
            "current_name": "process_string_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "process_data_08001460",
                "param_1": "data_ptr",
                "param_2": "condition",
                "param_3": "timeout",
                "iVar1": "initial_time",
                "iVar2": "current_time",
                "uVar3": "selected_value",
                "puVar4": "data"
            },
            "code": "\nundefined4 processData_08001460(uint **data_ptr,uint condition,uint timeout)\n\n{\n  int initial_time;\n  int current_time;\n  uint selected_value;\n  uint *data;\n  \n  initial_time = get_undefined4_value_0800115c();\n  do {\n    data = *data_ptr;\n    if ((condition << 8) >> 0x18 == 1) {\n      selected_value = data[5];\n    }\n    else {\n      selected_value = data[6];\n    }\n    if ((condition & 0xffff & ~selected_value) == 0) {\n      return 0;\n    }\n    if ((int)(data[5] << 0x15) < 0) {\n      *data = *data | 0x200;\n      data[5] = data[5] & 0xfffffbff;\n      data_ptr[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = get_undefined4_value_0800115c(), (uint)(current_time - initial_time) <= timeout))));\n  *(undefined *)((int)data_ptr + 0x35) = 0x20;\n  *(undefined *)(data_ptr + 0xd) = 0;\n  return 3;\n}\n\n",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "imported": false,
            "current_name": "process_data_08001460"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "check_swapped_parameters_08001064",
                "in_CY": "swappedFlag"
            },
            "code": "\nbool checkSwappedParameters_08001064(void)\n\n{\n  char swappedFlag;\n  \n  swap_parameters_08000ffc();\n  return swappedFlag == '\\0';\n}\n\n",
            "called": [
                "FUN_08000ffc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "FUN_0800483c",
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "check_swapped_parameters_08001064"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "update_data_field_08003fd0",
                "param_1": "newData"
            },
            "code": "\nvoid updateDataField_08003fd0(undefined4 newData)\n\n{\n  *(undefined4 *)(*(int *)PTR_DAT_08003fd8 + 0x3c) = newData;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "update_data_field_08003fd0"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculate_result_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp_var1",
                "unaff_r4": "condition_var",
                "uVar2": "masked_input4",
                "uVar3": "updated_input2",
                "in_r12": "reference_value",
                "bVar4": "is_zero"
            },
            "code": "\nulonglong calculate_result_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp_var1;\n  uint condition_var;\n  uint masked_input4;\n  uint updated_input2;\n  uint reference_value;\n  bool is_zero;\n  \n  masked_input4 = reference_value & input4 >> 0x14;\n  updated_input2 = input2;\n  if (condition_var != reference_value || masked_input4 != reference_value) {\n    if (condition_var == reference_value) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, updated_input2 = input4, masked_input4 != reference_value)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (masked_input4 == reference_value) {\n      input1 = input3;\n      updated_input2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (condition_var == 0) {\n          updated_input2 = input2 & 0x80000000;\n          do {\n            temp_var1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp_var1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | updated_input2;\n          if (masked_input4 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          updated_input2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(updated_input2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(updated_input2,input1) | 0x7ff8000000000000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "FUN_08000724"
            ],
            "imported": false,
            "current_name": "calculate_result_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_and_process_encrypted_data_08004458",
                "puVar1": "destination_ptr",
                "uVar2": "temp_value",
                "puVar3": "current_dest_ptr",
                "puVar4": "current_src_ptr",
                "puVar5": "source_ptr",
                "local_30": "destination_buffer",
                "local_24": "unused_buffer"
            },
            "code": "\nvoid copy_and_process_encrypted_data_08004458(void)\n\n{\n  undefined4 *destination_ptr;\n  undefined4 temp_value;\n  undefined4 *current_dest_ptr;\n  undefined4 *current_src_ptr;\n  undefined4 *source_ptr;\n  undefined4 destination_buffer [3];\n  undefined2 unused_buffer [10];\n  \n  destination_ptr = destination_buffer;\n  source_ptr = (undefined4 *)PTR_DAT_0800448c;\n  do {\n    current_src_ptr = source_ptr;\n    current_dest_ptr = destination_ptr;\n    temp_value = current_src_ptr[1];\n    source_ptr = current_src_ptr + 2;\n    *current_dest_ptr = *current_src_ptr;\n    current_dest_ptr[1] = temp_value;\n    destination_ptr = current_dest_ptr + 2;\n  } while (source_ptr != (undefined4 *)(PTR_DAT_0800448c + 0x18));\n  current_dest_ptr[2] = *source_ptr;\n  *(undefined2 *)(current_dest_ptr + 3) = *(undefined2 *)(current_src_ptr + 3);\n  process_encrypted_data_08004300(0x70,destination_buffer,0x1e);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "copy_and_process_encrypted_data_08004458"
        },
        "thunk_FUN_08001168": {
            "renaming": {
                "thunk_FUN_08001168": "thunk_do_nothing_08001168"
            },
            "code": "\nvoid thunk_do_nothing_08001168(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "FUN_08001168"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_0800403c",
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "thunk_do_nothing_08001168"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "combine_parameters_08000134",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "code": "\nundefined8 combineParameters_08000134(undefined *firstParam,undefined *secondParam)\n\n{\n  if (DAT_08000144 != 0) {\n    firstParam = PTR_FUN_0800014c;\n    secondParam = PTR_DAT_08000148;\n  }\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "called": [
                "FUN_080072d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "combine_parameters_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "shift_or_interrupt_08003eb0",
                "param_1": "input_value"
            },
            "code": "\nlonglong shift_or_interrupt_08003eb0(uint input_value)\n\n{\n  if (*(int *)PTR_DAT_08003ec4 == 0) {\n    software_interrupt(0x3f);\n    return CONCAT44(input_value,1);\n  }\n  return (ulonglong)input_value << 0x20;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "shift_or_interrupt_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "complex_calculation_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "comparison_result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "uVar6": "temp_var5",
                "uVar7": "temp_var6",
                "uVar8": "masked_input_2",
                "uVar9": "result",
                "uVar10": "intermediate_result1",
                "uVar11": "intermediate_result2",
                "uVar12": "intermediate_result3"
            },
            "code": "\nulonglong complex_calculation_08005c70(uint input_1,uint input_2)\n\n{\n  int comparison_result;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  undefined4 temp_var6;\n  uint masked_input_2;\n  ulonglong result;\n  undefined8 intermediate_result1;\n  undefined8 intermediate_result2;\n  undefined8 intermediate_result3;\n  \n  result = CONCAT44(input_2,input_1);\n  masked_input_2 = input_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)masked_input_2) {\n    if ((masked_input_2 + 0xc0100000 | input_1) != 0) {\n      intermediate_result1 = floating_point_operation_08000168(input_1,input_2,input_1,input_2);\n      temp_var1 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n      result = floating_point_operation_08000724((int)intermediate_result1,temp_var1,(int)intermediate_result1,temp_var1);\n      return result;\n    }\n    result = calculate_result_080004d0(input_1,input_2,DAT_08005f28,DAT_08005f2c);\n    intermediate_result1 = calculate_result_080004d0(input_1,input_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    result = floating_point_addition_0800016c((int)result,(int)(result >> 0x20),(int)intermediate_result1,\n                         (int)((ulonglong)intermediate_result1 >> 0x20));\n  }\n  else {\n    if ((int)masked_input_2 <= DAT_08005f94) {\n      if (0x3e3fffff < masked_input_2) {\n        intermediate_result1 = calculate_result_080004d0(input_1,input_2,input_1,input_2);\n        temp_var6 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n        temp_var1 = (undefined4)intermediate_result1;\n        intermediate_result1 = calculate_result_080004d0(temp_var1,temp_var6,DAT_08005f40,DAT_08005f44);\n        intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var6);\n        intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f50,DAT_08005f54\n                             );\n        intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var6);\n        intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var6);\n        intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f60,DAT_08005f64\n                             );\n        intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var6);\n        intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var6);\n        intermediate_result2 = calculate_result_080004d0(temp_var1,temp_var6,DAT_08005f70,DAT_08005f74);\n        intermediate_result2 = floating_point_operation_08000168((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),DAT_08005f78,DAT_08005f7c\n                             );\n        intermediate_result2 = calculate_result_080004d0((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),temp_var1,temp_var6);\n        intermediate_result2 = floating_point_addition_0800016c((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        intermediate_result2 = calculate_result_080004d0((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),temp_var1,temp_var6);\n        intermediate_result2 = floating_point_operation_08000168((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),DAT_08005f88,DAT_08005f8c\n                             );\n        intermediate_result2 = calculate_result_080004d0((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),temp_var1,temp_var6);\n        intermediate_result2 = floating_point_addition_0800016c((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),0,DAT_08005f98);\n        intermediate_result1 = floating_point_operation_08000724((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result2,\n                              (int)((ulonglong)intermediate_result2 >> 0x20));\n        intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      intermediate_result1 = floating_point_addition_0800016c(input_1,input_2,DAT_08005f38,DAT_08005f3c);\n      comparison_result = is_comparison_equal_080009f0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),0,DAT_08005f98);\n      if (comparison_result != 0) {\n        return result;\n      }\n    }\n    intermediate_result1 = do_nothing_0800708c(input_1,input_2);\n    intermediate_result1 = floating_point_operation_08000168(0,DAT_08005f98,(int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20));\n    intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),0,DAT_08005f9c);\n    temp_var2 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    temp_var1 = (undefined4)intermediate_result1;\n    intermediate_result1 = calculate_result_080004d0(temp_var1,temp_var2,DAT_08005f40,DAT_08005f44);\n    intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var2);\n    intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f50,DAT_08005f54);\n    intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var2);\n    intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var2);\n    intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f60,DAT_08005f64);\n    intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var2);\n    intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var1,temp_var2);\n    temp_var3 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    intermediate_result2 = calculate_result_080004d0(temp_var1,temp_var2,DAT_08005f70,DAT_08005f74);\n    intermediate_result2 = floating_point_operation_08000168((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    intermediate_result2 = calculate_result_080004d0((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),temp_var1,temp_var2);\n    intermediate_result2 = floating_point_addition_0800016c((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),DAT_08005f80,DAT_08005f84);\n    intermediate_result2 = calculate_result_080004d0((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),temp_var1,temp_var2);\n    intermediate_result2 = floating_point_operation_08000168((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    intermediate_result2 = calculate_result_080004d0((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),temp_var1,temp_var2);\n    intermediate_result2 = floating_point_addition_0800016c((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),0,DAT_08005f98);\n    temp_var4 = (undefined4)((ulonglong)intermediate_result2 >> 0x20);\n    intermediate_result3 = improved_calculation_08006c0c(temp_var1,temp_var2);\n    temp_var5 = (undefined4)((ulonglong)intermediate_result3 >> 0x20);\n    temp_var6 = (undefined4)intermediate_result3;\n    if (DAT_08005fa0 < (int)masked_input_2) {\n      intermediate_result1 = floating_point_operation_08000724((int)intermediate_result1,temp_var3,(int)intermediate_result2,temp_var4);\n      intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var6,temp_var5);\n      intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),temp_var6,temp_var5);\n      temp_var1 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n      intermediate_result1 = floating_point_addition_0800016c((int)intermediate_result1,temp_var1,(int)intermediate_result1,temp_var1);\n      intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08005f30,DAT_08005f34);\n      temp_var1 = DAT_08005f28;\n      temp_var6 = DAT_08005f2c;\n    }\n    else {\n      intermediate_result1 = floating_point_operation_08000724((int)intermediate_result1,temp_var3,(int)intermediate_result2,temp_var4);\n      intermediate_result2 = floating_point_addition_0800016c(temp_var6,temp_var5,temp_var6,temp_var5);\n      intermediate_result1 = calculate_result_080004d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result2,\n                            (int)((ulonglong)intermediate_result2 >> 0x20));\n      intermediate_result2 = calculate_result_080004d0(0,temp_var5,0,temp_var5);\n      intermediate_result2 = floating_point_operation_08000168(temp_var1,temp_var2,(int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20));\n      intermediate_result3 = floating_point_addition_0800016c(temp_var6,temp_var5,0,temp_var5);\n      intermediate_result2 = floating_point_operation_08000724((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),(int)intermediate_result3,\n                            (int)((ulonglong)intermediate_result3 >> 0x20));\n      temp_var1 = (undefined4)((ulonglong)intermediate_result2 >> 0x20);\n      intermediate_result2 = floating_point_addition_0800016c((int)intermediate_result2,temp_var1,(int)intermediate_result2,temp_var1);\n      intermediate_result2 = floating_point_operation_08000168(DAT_08006060,DAT_08006064,(int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20));\n      intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result2,\n                            (int)((ulonglong)intermediate_result2 >> 0x20));\n      intermediate_result2 = floating_point_addition_0800016c(0,temp_var5,0,temp_var5);\n      intermediate_result2 = floating_point_operation_08000168(DAT_08006068,DAT_0800606c,(int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20));\n      intermediate_result1 = floating_point_operation_08000168((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result2,\n                            (int)((ulonglong)intermediate_result2 >> 0x20));\n      temp_var1 = DAT_08006068;\n      temp_var6 = DAT_0800606c;\n    }\n    result = floating_point_operation_08000168(temp_var1,temp_var6,(int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20));\n    if ((int)input_2 < 1) {\n      result = result & 0xffffffff | (ulonglong)((int)(result >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_080004d0",
                "FUN_08000724",
                "FUN_0800708c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c70",
            "calling": [
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "complex_calculation_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "process_data_08002ee8",
                "uVar2": "data",
                "iVar1": "result",
                "check_flags_after_swap_08001050": "checkFlagsAfterSwap",
                "check_combined_parameters_08001028": "checkCombinedParameters",
                "process_floating_point_08000adc": "processFloatingPoint",
                "calculate_result_08000ad8": "calculateResult"
            },
            "code": "\nvoid processData_08002ee8(void)\n\n{\n  int result;\n  undefined4 data;\n  \n  data = *(undefined4 *)(PTR_DAT_08002f18 + 8);\n  result = checkFlagsAfterSwap(data,DAT_08002f1c);\n  if ((result != 0) && (result = checkCombinedParameters(data,DAT_08002f20), result != 0)) {\n    process_floating_point_08000adc(data,DAT_08002f20);\n    return;\n  }\n  calculate_result_08000ad8(data,DAT_08002f24);\n  return;\n}\n\n",
            "called": [
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "process_data_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "process_data_08001104",
                "param_1": "inputParam",
                "uVar1": "dataValue"
            },
            "code": "\nundefined4 processData_08001104(undefined4 inputParam)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value_08002214();\n  update_data_array_08001214(dataValue / 1000);\n  bitwise_operation_08001194(0xffffffff,inputParam,0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "process_data_08001104"
        },
        "thunk_FUN_0800115c": {
            "renaming": {
                "thunk_get_undefined4_value_0800115c": "get_four_byte_value",
                "thunk_FUN_0800115c": "get_four_byte_value_thunk_0800115c"
            },
            "code": "\nundefined4 get_four_byte_value_thunk_0800115c(void)\n\n{\n  return *(undefined4 *)PTR_DAT_08001164;\n}\n\n",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "get_four_byte_value_thunk_0800115c"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "calculate_complex_operation_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_1",
                "param_4": "unused_2",
                "iVar1": "comparison_result",
                "uVar2": "temp_result_1",
                "uVar3": "temp_result_2",
                "uVar4": "temp_result_3",
                "uVar5": "temp_result_4",
                "uVar6": "temp_result_5",
                "uVar7": "temp_result_6",
                "uVar8": "masked_input_2",
                "puVar9": "temp_pointer",
                "uVar10": "final_result",
                "uVar11": "intermediate_result_1",
                "uVar12": "intermediate_result_2",
                "uVar13": "intermediate_result_3"
            },
            "code": "\nulonglong calculate_complex_operation_08006d68(int input_1,uint input_2,undefined4 unused_1,undefined4 unused_2)\n\n{\n  int comparison_result;\n  undefined4 temp_result_1;\n  undefined4 temp_result_2;\n  undefined4 temp_result_3;\n  undefined4 temp_result_4;\n  undefined4 temp_result_5;\n  undefined4 temp_result_6;\n  uint masked_input_2;\n  undefined4 *temp_pointer;\n  ulonglong final_result;\n  undefined8 intermediate_result_1;\n  ulonglong intermediate_result_2;\n  undefined8 intermediate_result_3;\n  \n  final_result = CONCAT44(DAT_08007088,DAT_08007060);\n  intermediate_result_2 = CONCAT44(input_2,input_1);\n  masked_input_2 = input_2 & 0x7fffffff;\n  if (DAT_08007058 < (int)masked_input_2) {\n    if (((int)DAT_0800705c < (int)masked_input_2) || ((masked_input_2 == DAT_0800705c && (input_1 != 0)))) {\n      final_result = floating_point_addition_0800016c(input_1,input_2,input_1,input_2,unused_2);\n    }\n    else if ((int)input_2 < 1) {\n      final_result = CONCAT44(DAT_08007064,DAT_08007060);\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)masked_input_2) {\n      intermediate_result_1 = do_nothing_0800708c();\n      temp_result_2 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n      temp_result_1 = (undefined4)intermediate_result_1;\n      if (DAT_08007070 < (int)masked_input_2) {\n        if (DAT_08007074 < (int)masked_input_2) {\n          intermediate_result_2 = floating_point_operation_08000724(0,DAT_0800707c,temp_result_1,temp_result_2);\n          comparison_result = 3;\n        }\n        else {\n          intermediate_result_1 = floating_point_operation_08000168(temp_result_1,temp_result_2,0,DAT_08007078);\n          intermediate_result_3 = calculate_result_080004d0(temp_result_1,temp_result_2,0,DAT_08007078);\n          intermediate_result_3 = floating_point_addition_0800016c((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),0,DAT_0800706c);\n          intermediate_result_2 = floating_point_operation_08000724((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),(int)intermediate_result_3,\n                                (int)((ulonglong)intermediate_result_3 >> 0x20));\n          comparison_result = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)masked_input_2) {\n        intermediate_result_1 = floating_point_operation_08000168(temp_result_1,temp_result_2,0,DAT_0800706c);\n        intermediate_result_3 = floating_point_addition_0800016c(temp_result_1,temp_result_2,0,DAT_0800706c);\n        intermediate_result_2 = floating_point_operation_08000724((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),(int)intermediate_result_3,\n                              (int)((ulonglong)intermediate_result_3 >> 0x20));\n        comparison_result = 1;\n      }\n      else {\n        intermediate_result_1 = floating_point_addition_0800016c(temp_result_1,temp_result_2,temp_result_1,temp_result_2);\n        intermediate_result_1 = floating_point_operation_08000168((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),0,DAT_0800706c);\n        intermediate_result_3 = floating_point_addition_0800016c(temp_result_1,temp_result_2,0,0x40000000);\n        intermediate_result_2 = floating_point_operation_08000724((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),(int)intermediate_result_3,\n                              (int)((ulonglong)intermediate_result_3 >> 0x20));\n        comparison_result = 0;\n      }\n    }\n    else {\n      if ((int)masked_input_2 <= DAT_08007068 + -0x1bc0000) {\n        intermediate_result_1 = floating_point_addition_0800016c(input_1,input_2,DAT_08006ff8,DAT_08006ffc,unused_2);\n        comparison_result = is_comparison_equal_080009f0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),0,DAT_0800706c);\n        if (comparison_result != 0) {\n          return intermediate_result_2;\n        }\n      }\n      comparison_result = -1;\n    }\n    temp_result_6 = (undefined4)(intermediate_result_2 >> 0x20);\n    temp_result_5 = (undefined4)intermediate_result_2;\n    intermediate_result_1 = calculate_result_080004d0(temp_result_5,temp_result_6,temp_result_5,temp_result_6);\n    temp_result_3 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n    temp_result_1 = (undefined4)intermediate_result_1;\n    intermediate_result_1 = calculate_result_080004d0(temp_result_1,temp_result_3,temp_result_1,temp_result_3);\n    temp_result_4 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n    temp_result_2 = (undefined4)intermediate_result_1;\n    intermediate_result_1 = calculate_result_080004d0(temp_result_2,temp_result_4,DAT_08007000,DAT_08007004);\n    intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),DAT_08007008,DAT_0800700c);\n    intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),DAT_08007010,DAT_08007014);\n    intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),DAT_08007018,DAT_0800701c);\n    intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),DAT_08007020,DAT_08007024);\n    intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),DAT_08007028,DAT_0800702c);\n    intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_1,temp_result_3);\n    temp_result_1 = (undefined4)((ulonglong)intermediate_result_1 >> 0x20);\n    intermediate_result_3 = calculate_result_080004d0(temp_result_2,temp_result_4,DAT_08007030,DAT_08007034);\n    intermediate_result_3 = floating_point_operation_08000168((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),DAT_08007038,DAT_0800703c);\n    intermediate_result_3 = calculate_result_080004d0((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_3 = floating_point_operation_08000168((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),DAT_08007040,DAT_08007044);\n    intermediate_result_3 = calculate_result_080004d0((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_3 = floating_point_operation_08000168((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),DAT_08007048,DAT_0800704c);\n    intermediate_result_3 = calculate_result_080004d0((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),temp_result_2,temp_result_4);\n    intermediate_result_3 = floating_point_operation_08000168((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),DAT_08007050,DAT_08007054);\n    intermediate_result_3 = calculate_result_080004d0((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20),temp_result_2,temp_result_4);\n    temp_result_2 = (undefined4)((ulonglong)intermediate_result_3 >> 0x20);\n    if (comparison_result == -1) {\n      intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,temp_result_1,(int)intermediate_result_3,temp_result_2);\n      intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_5,temp_result_6);\n      final_result = floating_point_operation_08000168(temp_result_5,temp_result_6,(int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20));\n    }\n    else {\n      intermediate_result_1 = floating_point_addition_0800016c((int)intermediate_result_1,temp_result_1,(int)intermediate_result_3,temp_result_2);\n      intermediate_result_1 = calculate_result_080004d0((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_5,temp_result_6);\n      temp_pointer = (undefined4 *)(PTR_DAT_08007080 + comparison_result * 8);\n      intermediate_result_1 = floating_point_operation_08000168((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),\n                            *(undefined4 *)(PTR_DAT_08007084 + comparison_result * 8),\n                            *(undefined4 *)((int)(PTR_DAT_08007084 + comparison_result * 8) + 4));\n      intermediate_result_1 = floating_point_operation_08000168((int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20),temp_result_5,temp_result_6);\n      final_result = floating_point_operation_08000168(*temp_pointer,temp_pointer[1],(int)intermediate_result_1,(int)((ulonglong)intermediate_result_1 >> 0x20));\n      if ((int)input_2 < 0) {\n        final_result = final_result & 0xffffffff | (ulonglong)((int)(final_result >> 0x20) + 0x80000000) << 0x20;\n      }\n    }\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_080004d0",
                "FUN_0800708c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d68",
            "calling": [
                "FUN_08006070"
            ],
            "imported": false,
            "current_name": "calculate_complex_operation_08006d68"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "increment_global_value_080072b8",
                "param_1": "value_to_add",
                "puVar1": "global_value_ptr"
            },
            "code": "\nvoid increment_global_value_080072b8(int value_to_add)\n\n{\n  undefined *global_value_ptr;\n  \n  global_value_ptr = PTR_DAT_080072cc;\n  if (*(int *)PTR_DAT_080072cc == 0) {\n    *(undefined **)PTR_DAT_080072cc = PTR_DAT_080072d0;\n  }\n  *(int *)global_value_ptr = value_to_add + *(int *)global_value_ptr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "FUN_0800581c"
            ],
            "imported": false,
            "current_name": "increment_global_value_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "update_pointer_value_0800581c",
                "param_1": "output_pointer",
                "param_2": "input_value",
                "puVar1": "temp_pointer",
                "iVar2": "increment_result"
            },
            "code": "\nvoid update_pointer_value_0800581c(int *output_pointer,undefined4 input_value)\n\n{\n  undefined *temp_pointer;\n  int increment_result;\n  \n  temp_pointer = PTR_DAT_08005838;\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  increment_result = increment_global_value_080072b8(input_value);\n  if ((increment_result == -1) && (*(int *)temp_pointer != 0)) {\n    *output_pointer = *(int *)temp_pointer;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080072b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "FUN_08005714"
            ],
            "imported": false,
            "current_name": "update_pointer_value_0800581c"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "configure_device_08004d48",
                "param_1": "device_ptr",
                "param_2": "extra_param",
                "local_18": "pin_value1",
                "local_14": "pin_value2"
            },
            "code": "\nvoid configure_device_08004d48(int *device_ptr,undefined4 extra_param)\n\n{\n  undefined4 pin_value1;\n  undefined4 pin_value2;\n  \n  if (*device_ptr == DAT_08004d80) {\n    pin_value1 = 0xc0;\n    pin_value2 = 0x12;\n    configure_pins_08001264(DAT_08004d84,&pin_value1,*device_ptr,3,device_ptr,extra_param);\n    *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "FUN_08001754"
            ],
            "imported": false,
            "current_name": "configure_device_08004d48"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_data_from_pointer_080072ac"
            },
            "code": "\nundefined4 get_data_from_pointer_080072ac(void)\n\n{\n  return *(undefined4 *)PTR_PTR_DAT_080072b4;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "imported": false,
            "current_name": "get_data_from_pointer_080072ac"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "update_registers_08002280",
                "param_1": "baseAddress",
                "param_2": "inputValues",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3"
            },
            "code": "\nvoid updateRegisters_08002280(int baseAddress,uint *inputValues)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffffe;\n  tempVar2 = *(uint *)(baseAddress + 4);\n  tempVar3 = *inputValues;\n  tempVar1 = *(uint *)(baseAddress + 0x20) & 0xfffffffd | inputValues[2];\n  if (baseAddress == DAT_080022cc) {\n    tempVar1 = (tempVar1 & 0xfffffff7 | inputValues[3]) & 0xfffffffb;\n    tempVar2 = tempVar2 & 0xfffffcff | inputValues[5] | inputValues[6];\n  }\n  *(uint *)(baseAddress + 4) = tempVar2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffffff8c | tempVar3;\n  *(uint *)(baseAddress + 0x34) = inputValues[1];\n  *(uint *)(baseAddress + 0x20) = tempVar1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_registers_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "bitwise_operation_08001194",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "result",
                "uVar2": "mask_1",
                "uVar3": "shift_amount",
                "uVar4": "temp_var"
            },
            "code": "\nvoid bitwiseOperation_08001194(uint input_1,uint input_2,uint input_3)\n\n{\n  undefined result;\n  uint mask_1;\n  uint shift_amount;\n  uint temp_var;\n  \n  shift_amount = (uint)(*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n  mask_1 = 7 - shift_amount;\n  temp_var = shift_amount + 4;\n  if (3 < mask_1) {\n    mask_1 = 4;\n  }\n  if (temp_var < 7) {\n    shift_amount = 0;\n  }\n  mask_1 = (1 << (mask_1 & 0xff)) - 1;\n  if (6 < temp_var) {\n    shift_amount = shift_amount - 3;\n  }\n  result = (undefined)\n          ((input_3 & (1 << (shift_amount & 0xff)) - 1U | (input_2 & mask_1) << (shift_amount & 0xff)) << 4);\n  if (-1 < (int)input_1) {\n    shift_amount = input_1 + 0xe000e100;\n  }\n  else {\n    shift_amount = input_1 & 0xf;\n    mask_1 = DAT_080011f8;\n  }\n  if (-1 < (int)input_1) {\n    *(undefined *)(shift_amount + 0x300) = result;\n  }\n  else {\n    *(undefined *)(mask_1 + shift_amount) = result;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "bitwise_operation_08001194"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "process_sensor_data_08002cb0",
                "param_1": "sensor_data_1",
                "param_2": "sensor_data_2",
                "param_3": "sensor_data_3",
                "param_4": "input_value",
                "puVar1": "data_ptr",
                "uVar2": "temp_result",
                "local_c": "processed_value"
            },
            "code": "\nvoid process_sensor_data_08002cb0(undefined4 sensor_data_1,undefined4 sensor_data_2,undefined4 sensor_data_3,uint input_value)\n\n{\n  undefined *data_ptr;\n  undefined4 temp_result;\n  uint processed_value;\n  \n  processed_value = input_value;\n  process_request_0800403c(0xd0,0x37,0x22,1,sensor_data_1,sensor_data_2,sensor_data_3);\n  data_ptr = PTR_s____Src_MPU9250_c_08002d80;\n  process_request_0800403c(0xd0,0x6a,1);\n  process_and_return_status_0800407c(0x18,0,data_ptr,0xad);\n  process_request_0800403c(0x18,0xb,1);\n  process_request_0800403c(0x18,10,0,1);\n  process_request_0800403c(0x18,10,0xf,1);\n  process_data_sequence_080040e8(0x18,0x10,&processed_value,3,data_ptr,0xb6);\n  data_ptr = PTR_DAT_08002d84;\n  temp_result = calculate_adjusted_value_08000c44((processed_value & 0xff) - 0x80);\n  temp_result = float_multiplication_08000cec(temp_result,0x3b800000);\n  temp_result = process_floating_point_08000adc(temp_result,0x3f800000);\n  *(undefined4 *)data_ptr = temp_result;\n  temp_result = calculate_adjusted_value_08000c44((processed_value >> 8 & 0xff) - 0x80);\n  temp_result = float_multiplication_08000cec(temp_result,0x3b800000);\n  temp_result = process_floating_point_08000adc(temp_result,0x3f800000);\n  *(undefined4 *)(data_ptr + 4) = temp_result;\n  temp_result = calculate_adjusted_value_08000c44((processed_value >> 0x10 & 0xff) - 0x80);\n  temp_result = float_multiplication_08000cec(temp_result,0x3b800000);\n  temp_result = process_floating_point_08000adc(temp_result,0x3f800000);\n  *(undefined4 *)(data_ptr + 8) = temp_result;\n  process_request_0800403c(0x18,10,0,1);\n  process_request_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "called": [
                "FUN_080040e8",
                "FUN_0800403c",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_08000adc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002cb0"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "process_data_08004348",
                "param_1": "input_data",
                "param_2": "data_length",
                "param_3": "output_data",
                "puVar1": "data_ptr",
                "local_10": "buffer",
                "local_c": "processed_length",
                "uStack_8": "output_buffer"
            },
            "code": "\nvoid process_data_08004348(undefined4 input_data,uint data_length,undefined4 output_data)\n\n{\n  undefined *data_ptr;\n  undefined4 buffer;\n  uint processed_length;\n  undefined4 output_buffer;\n  \n  data_ptr = PTR_DAT_08004380;\n  *PTR_DAT_08004380 = 0xe9;\n  data_ptr[1] = 3;\n  data_ptr[3] = 4;\n  data_ptr[2] = 0;\n  buffer = *(undefined4 *)data_ptr;\n  data_ptr[4] = 0;\n  data_ptr[5] = 0;\n  data_ptr[6] = 0;\n  processed_length = data_length & 0xff000000 | (uint)*(ushort *)(data_ptr + 4);\n  output_buffer = output_data;\n  process_encrypted_data_08004300(100,&buffer,7);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_data_08004348"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "update_registers_08002324",
                "param_1": "registerBase",
                "param_2": "inputArray",
                "uVar1": "tempRegister",
                "iVar2": "inputValue1",
                "iVar3": "inputValue2",
                "iVar4": "tempValue"
            },
            "code": "\nvoid updateRegisters_08002324(int registerBase,int *inputArray)\n\n{\n  uint tempRegister;\n  int inputValue1;\n  int inputValue2;\n  int tempValue;\n  \n  *(uint *)(registerBase + 0x20) = *(uint *)(registerBase + 0x20) & 0xffffefff;\n  tempRegister = *(uint *)(registerBase + 4);\n  inputValue1 = *inputArray;\n  inputValue2 = inputArray[2];\n  tempValue = DAT_08002364;\n  if (registerBase == DAT_08002364) {\n    tempValue = inputArray[5];\n    tempRegister = tempRegister & 0xffffbfff;\n  }\n  if (registerBase == DAT_08002364) {\n    tempRegister = tempRegister | tempValue << 6;\n  }\n  *(uint *)(registerBase + 4) = tempRegister;\n  *(uint *)(registerBase + 0x1c) = *(uint *)(registerBase + 0x1c) & 0xffff8cff | inputValue1 << 8;\n  *(int *)(registerBase + 0x40) = inputArray[1];\n  *(uint *)(registerBase + 0x20) = *(uint *)(registerBase + 0x20) & 0xffffdfff | inputValue2 << 0xc;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_registers_08002324"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "calculate_transformed_value_08001078",
                "param_1": "inputValue",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2"
            },
            "code": "\nuint calculateTransformedValue_08001078(uint inputValue)\n\n{\n  uint tempValue1;\n  uint tempValue2;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  tempValue1 = (inputValue << 1) >> 0x18;\n  tempValue2 = 0x9e - tempValue1;\n  if (tempValue1 < 0x9f && tempValue2 != 0) {\n    tempValue1 = (inputValue << 8 | 0x80000000) >> (tempValue2 & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      tempValue1 = -tempValue1;\n    }\n    return tempValue1;\n  }\n  if ((tempValue2 == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "FUN_0800411c",
                "FUN_08002f28",
                "FUN_0800426c"
            ],
            "imported": false,
            "current_name": "calculate_transformed_value_08001078"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "update_status_08002564",
                "param_1": "statusArray",
                "param_2": "inputArray",
                "uVar1": "result"
            },
            "code": "\nundefined4 updateStatus_08002564(int *statusArray,uint *inputArray)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(statusArray + 0xe) != '\\x01') {\n    *(undefined *)((int)statusArray + 0x39) = 2;\n    *(uint *)(*statusArray + 0x44) =\n         *inputArray | inputArray[1] | inputArray[2] | inputArray[3] | inputArray[4] | inputArray[5] | inputArray[6];\n    *(undefined *)((int)statusArray + 0x39) = 1;\n    result = 0;\n    *(undefined *)(statusArray + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002564",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_status_08002564"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "configure_parameters_08001754",
                "param_1": "params",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "puVar3": "ptr_var3",
                "puVar4": "ptr_var4",
                "puVar5": "ptr_var5",
                "uVar6": "temp_var6",
                "uVar7": "shifted_value"
            },
            "code": "\nundefined4 configure_parameters_08001754(uint **params)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint *ptr_var3;\n  uint *ptr_var4;\n  uint *ptr_var5;\n  uint temp_var6;\n  undefined8 shifted_value;\n  \n  if (params == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)params + 0x35) == '\\0') {\n    *(undefined *)(params + 0xd) = 0;\n    configure_device_08004d48();\n  }\n  *(undefined *)((int)params + 0x35) = 0x24;\n  ptr_var3 = DAT_08001820;\n  **params = **params & 0xfffffffe;\n  shifted_value = calculate_shifted_value_08002220();\n  temp_var2 = (uint)((ulonglong)shifted_value >> 0x20);\n  temp_var1 = (uint)shifted_value;\n  ptr_var5 = params[1];\n  temp_var6 = temp_var1 / DAT_08001824;\n  if (ptr_var3 < ptr_var5) {\n    temp_var2 = 300;\n  }\n  ptr_var4 = *params;\n  if (ptr_var3 < ptr_var5) {\n    temp_var2 = temp_var6 * temp_var2;\n  }\n  ptr_var4[1] = temp_var6;\n  if (ptr_var3 < ptr_var5) {\n    temp_var6 = temp_var2 / 1000;\n  }\n  ptr_var4[8] = temp_var6 + 1;\n  if (ptr_var3 < ptr_var5) {\n    if (params[2] == (uint *)0x0) {\n      temp_var1 = temp_var1 / (uint)((int)ptr_var5 * 3) | 0x8000;\n    }\n    else {\n      temp_var1 = temp_var1 / (uint)((int)ptr_var5 * 0x19) | 0xc000;\n    }\n    if ((temp_var1 & 0xfff) == 0) {\n      temp_var1 = 1;\n    }\n  }\n  else {\n    temp_var1 = temp_var1 / (uint)((int)ptr_var5 << 1);\n    if ((temp_var1 & 0xfff) < 4) {\n      temp_var1 = 4;\n    }\n  }\n  ptr_var3 = params[8];\n  ptr_var5 = params[7];\n  ptr_var4[7] = temp_var1;\n  *ptr_var4 = (uint)ptr_var5 | (uint)ptr_var3;\n  ptr_var4[2] = (uint)params[4] | (uint)params[3];\n  ptr_var4[3] = (uint)params[5] | (uint)params[6];\n  *ptr_var4 = *ptr_var4 | 1;\n  params[0xe] = (uint *)0x0;\n  *(undefined *)((int)params + 0x35) = 0x20;\n  *(undefined *)((int)params + 0x36) = 0;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "configure_parameters_08001754"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "calculate_result_08000ad8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "int_var1",
                "uVar2": "uint_var2",
                "uVar3": "uint_var3",
                "uVar4": "uint_var4",
                "uVar5": "uint_var5",
                "uVar6": "uint_var6",
                "iVar7": "int_var7",
                "bVar8": "bool_var8"
            },
            "code": "\nuint calculate_result_08000ad8(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  int int_var1;\n  uint uint_var2;\n  uint uint_var3;\n  uint uint_var4;\n  uint uint_var5;\n  uint uint_var6;\n  int int_var7;\n  bool bool_var8;\n  \n  uint_var2 = input_2 ^ 0x80000000;\n  uint_var4 = input_1 << 1;\n  bool_var8 = uint_var4 == 0;\n  if (!bool_var8) {\n    input_4 = input_2 << 1;\n    bool_var8 = input_4 == 0;\n  }\n  if (!bool_var8) {\n    bool_var8 = uint_var4 == input_4;\n  }\n  int_var7 = (int)uint_var4 >> 0x18;\n  if (!bool_var8) {\n    bool_var8 = int_var7 == -1;\n  }\n  if (!bool_var8) {\n    bool_var8 = (int)input_4 >> 0x18 == -1;\n  }\n  if (bool_var8) {\n    int_var1 = (int)(input_2 << 1) >> 0x18;\n    if (int_var7 == -1 || int_var1 == -1) {\n      uint_var4 = uint_var2;\n      if (int_var7 == -1) {\n        uint_var4 = input_1;\n      }\n      if (int_var7 != -1 || int_var1 != -1) {\n        uint_var2 = uint_var4;\n      }\n      bool_var8 = (uint_var4 & 0x7fffff) == 0;\n      if (bool_var8) {\n        bool_var8 = (uint_var2 & 0x7fffff) == 0;\n      }\n      if (bool_var8) {\n        bool_var8 = uint_var4 == uint_var2;\n      }\n      if (!bool_var8) {\n        uint_var4 = uint_var4 | 0x400000;\n      }\n      return uint_var4;\n    }\n    if (((input_1 ^ uint_var2) & 0x7fffffff) != 0) {\n      if (uint_var4 == 0) {\n        input_1 = uint_var2;\n      }\n      return input_1;\n    }\n    if (input_1 != uint_var2) {\n      return 0;\n    }\n    if ((uint_var4 & 0xff000000) == 0) {\n      uint_var2 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        uint_var2 = uint_var2 | 0x80000000;\n      }\n      return uint_var2;\n    }\n    if (uint_var4 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08000c12:\n    return input_1 | 0x7f800000;\n  }\n  uint_var4 = uint_var4 >> 0x18;\n  input_4 = input_4 >> 0x18;\n  uint_var6 = input_4 - uint_var4;\n  bool_var8 = uint_var6 != 0;\n  uint_var5 = uint_var4;\n  if (bool_var8 && uint_var4 <= input_4) {\n    uint_var5 = uint_var4 + uint_var6;\n  }\n  if (bool_var8 && uint_var4 <= input_4) {\n    uint_var2 = uint_var2 ^ input_1;\n  }\n  if (bool_var8 && uint_var4 <= input_4) {\n    input_1 = input_1 ^ uint_var2;\n  }\n  if (bool_var8 && uint_var4 <= input_4) {\n    uint_var2 = uint_var2 ^ input_1;\n  }\n  if (input_4 < uint_var4) {\n    uint_var6 = -uint_var6;\n  }\n  if (0x19 < uint_var6) {\n    return input_1;\n  }\n  uint_var4 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    uint_var4 = -uint_var4;\n  }\n  uint_var3 = uint_var2 & 0xffffff | 0x800000;\n  if ((uint_var2 & 0x80000000) != 0) {\n    uint_var3 = -uint_var3;\n  }\n  if (uint_var5 == uint_var6) {\n    uint_var3 = uint_var3 ^ 0x800000;\n    if (uint_var5 == 0) {\n      uint_var4 = uint_var4 ^ 0x800000;\n      uint_var5 = 1;\n    }\n    else {\n      uint_var6 = uint_var6 - 1;\n    }\n  }\n  uint_var4 = uint_var4 + ((int)uint_var3 >> (uint_var6 & 0xff));\n  uint_var3 = uint_var3 << (0x20 - uint_var6 & 0xff);\n  input_1 = uint_var4 & 0x80000000;\n  if ((int)uint_var4 < 0) {\n    bool_var8 = uint_var3 != 0;\n    uint_var3 = -uint_var3;\n    uint_var4 = -uint_var4 - (uint)bool_var8;\n  }\n  if (uint_var4 < 0x800000) {\n    uint_var2 = uint_var3 & 0x80000000;\n    uint_var3 = uint_var3 << 1;\n    uint_var4 = uint_var4 * 2 + (uint)(uint_var2 != 0);\n    uint_var2 = uint_var5 - 2;\n    if ((uint_var4 & 0x800000) == 0) {\n      int_var7 = count_leading_zeroes(uint_var4);\n      uint_var6 = int_var7 - 8;\n      uint_var4 = uint_var4 << (uint_var6 & 0xff);\n      if ((int)uint_var2 < (int)uint_var6) {\n        uint_var4 = uint_var4 >> (-(uint_var2 - uint_var6) & 0xff);\n      }\n      else {\n        uint_var4 = uint_var4 + (uint_var2 - uint_var6) * 0x800000;\n      }\n      return uint_var4 | input_1;\n    }\n  }\n  else {\n    uint_var2 = uint_var5 - 1;\n    if (0xffffff < uint_var4) {\n      uint_var2 = uint_var4 & 1;\n      uint_var4 = uint_var4 >> 1;\n      uint_var3 = (uint)(uint_var2 != 0) << 0x1f | uint_var3 >> 1;\n      uint_var2 = uint_var5;\n      if (0xfd < uint_var5) goto LAB_08000c12;\n    }\n  }\n  uint_var4 = uint_var4 + uint_var2 * 0x800000 + (uint)(0x7fffffff < uint_var3);\n  if (uint_var3 == 0x80000000) {\n    uint_var4 = uint_var4 & 0xfffffffe;\n  }\n  return uint_var4 | input_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ad8",
            "calling": [
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_0800426c",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0"
            ],
            "imported": false,
            "current_name": "calculate_result_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "update_buffer_08003ec8",
                "param_1": "bufferBase",
                "param_2": "valueToAdd"
            },
            "code": "\nundefined4 updateBuffer_08003ec8(int bufferBase,undefined valueToAdd)\n\n{\n  *(short *)(bufferBase + 0x804) = *(short *)(bufferBase + 0x804) + 1;\n  *(undefined *)(bufferBase + (uint)*(ushort *)(bufferBase + 0x802)) = valueToAdd;\n  *(ushort *)(bufferBase + 0x802) = *(short *)(bufferBase + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "FUN_08004c30"
            ],
            "imported": false,
            "current_name": "update_buffer_08003ec8"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "update_device_settings_08002724",
                "param_1": "device_ptr",
                "iVar1": "device_address"
            },
            "code": "\nundefined4 updateDeviceSettings_08002724(int *device_ptr)\n\n{\n  int device_address;\n  \n  if (device_ptr != (int *)0x0) {\n    if (*(char *)((int)device_ptr + 0x39) == '\\0') {\n      *(undefined *)(device_ptr + 0xe) = 0;\n      configure_device_08004e7c();\n    }\n    *(undefined *)((int)device_ptr + 0x39) = 2;\n    *(uint *)(*device_ptr + 0xc) = *(uint *)(*device_ptr + 0xc) & 0xffffdfff;\n    update_values_080025e8(device_ptr);\n    device_address = *device_ptr;\n    *(uint *)(device_address + 0x10) = *(uint *)(device_address + 0x10) & 0xffffb7ff;\n    *(uint *)(device_address + 0x14) = *(uint *)(device_address + 0x14) & 0xffffffd5;\n    *(uint *)(device_address + 0xc) = *(uint *)(device_address + 0xc) | 0x2000;\n    device_ptr[0xf] = 0;\n    *(undefined *)((int)device_ptr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_device_settings_08002724"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "update_value_at_offset_08003fe8",
                "param_1": "value"
            },
            "code": "\nvoid updateValueAtOffset_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)PTR_DAT_08003ff0 + 0x3c) = value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "update_value_at_offset_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "memory_ptr",
                "param_2": "requested_size",
                "puVar1": "temp_ptr",
                "uVar2": "updated_ptr_value",
                "puVar3": "current_block",
                "iVar4": "size_difference",
                "puVar5": "next_block",
                "uVar6": "block_size_difference",
                "puVar7": "previous_block",
                "uVar8": "aligned_size"
            },
            "code": "\nuint allocate_memory_08005714(undefined4 *memory_ptr,uint requested_size)\n\n{\n  undefined *temp_ptr;\n  undefined4 updated_ptr_value;\n  uint *current_block;\n  int size_difference;\n  uint *next_block;\n  uint block_size_difference;\n  uint *previous_block;\n  uint aligned_size;\n  \n  aligned_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < requested_size)) {\n    *memory_ptr = 0xc;\n  }\n  else {\n    do_nothing_0800583c();\n    temp_ptr = PTR_DAT_080057cc;\n    current_block = *(uint **)PTR_DAT_080057c8;\n    previous_block = *(uint **)PTR_DAT_080057c8;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      block_size_difference = *next_block - aligned_size;\n      if (-1 < (int)block_size_difference) {\n        if (block_size_difference < 0xc) {\n          if (previous_block == next_block) {\n            aligned_size = previous_block[1];\n            *(uint *)PTR_DAT_080057c8 = aligned_size;\n          }\n          else {\n            aligned_size = next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = aligned_size;\n            previous_block = next_block;\n          }\n        }\n        else {\n          *next_block = block_size_difference;\n          *(uint *)((int)next_block + block_size_difference) = aligned_size;\n          previous_block = (uint *)((int)next_block + block_size_difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (*(int *)PTR_DAT_080057cc == 0) {\n      updated_ptr_value = update_pointer_value_0800581c(memory_ptr);\n      *(undefined4 *)temp_ptr = updated_ptr_value;\n    }\n    current_block = (uint *)update_pointer_value_0800581c(memory_ptr,aligned_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (size_difference = update_pointer_value_0800581c(memory_ptr,(int)previous_block - (int)current_block), size_difference != -1)))) {\n      *previous_block = aligned_size;\nLAB_08005778:\n      do_nothing_0800583e(memory_ptr);\n      aligned_size = (int)previous_block + 0xbU & 0xfffffff8;\n      size_difference = aligned_size - (int)(previous_block + 1);\n      if (size_difference != 0) {\n        *(int *)((int)previous_block + size_difference) = -size_difference;\n        return aligned_size;\n      }\n      return aligned_size;\n    }\n    *memory_ptr = 0xc;\n    do_nothing_0800583e(memory_ptr);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0800583e",
                "FUN_0800583c",
                "FUN_0800581c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "execute_code_sequences_08004fb4",
                "puVar1": "code_ptr",
                "iVar2": "length",
                "iVar3": "index"
            },
            "code": "\nvoid execute_code_sequences_08004fb4(void)\n\n{\n  undefined *code_ptr;\n  int length;\n  int index;\n  \n  code_ptr = PTR_DAT_08004fec;\n  length = (int)PTR_DAT_08004ff0 - (int)PTR_DAT_08004fec;\n  for (index = 0; index != length >> 2; index = index + 1) {\n    (**(code **)(code_ptr + index * 4))();\n  }\n  do_nothing_080072d4();\n  code_ptr = PTR_DAT_08004ff4;\n  length = (int)PTR_DAT_08004ff8 - (int)PTR_DAT_08004ff4;\n  for (index = 0; index != length >> 2; index = index + 1) {\n    (**(code **)(code_ptr + index * 4))();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "execute_code_sequences_08004fb4"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "decrypt_data_080043f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "processed_data"
            },
            "code": "\nvoid decrypt_data_080043f0(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 processed_data [2];\n  \n  data1 = *(undefined4 *)PTR_DAT_0800440c;\n  data2 = *(undefined4 *)(PTR_DAT_0800440c + 4);\n  processed_data[0] = input3;\n  process_encrypted_data_08004300(0x68,&data1,8,processed_data);\n  return;\n}\n\n",
            "called": [
                "FUN_08004300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "decrypt_data_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "calculate_result_08000428",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "leading_zeroes",
                "uVar7": "shift_amount",
                "in_r12": "r12",
                "bVar8": "flag1",
                "bVar9": "flag2",
                "bVar10": "flag3"
            },
            "code": "\nulonglong calculate_result_08000428(uint input1,undefined4 input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int leading_zeroes;\n  uint shift_amount;\n  uint r12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp5 = input1 << 1;\n  flag2 = temp5 == 0;\n  temp1 = (uint)((input1 & 0x80000000) != 0) << 0x1f;\n  temp4 = (uint)((int)temp5 >> 3) >> 1;\n  temp3 = temp1 | temp4;\n  input1 = input1 << 0x1d;\n  if (!flag2) {\n    input4 = temp5 & 0xff000000;\n    flag2 = input4 == 0;\n  }\n  if (!flag2) {\n    flag2 = input4 == 0xff000000;\n  }\n  if (!flag2) {\n    return CONCAT44(temp3,input1) ^ 0x3800000000000000;\n  }\n  if (temp5 == 0 || input4 == 0xff000000) {\n    return CONCAT44(temp3,input1);\n  }\n  temp2 = input1;\n  temp5 = temp4;\n  if (temp4 == 0) {\n    temp2 = 0;\n    temp5 = input1;\n  }\n  leading_zeroes = count_leading_zeroes(temp5);\n  if (temp4 == 0) {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  shift_amount = leading_zeroes - 0xb;\n  flag3 = SBORROW4(shift_amount,0x20);\n  temp4 = leading_zeroes - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)shift_amount < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    leading_zeroes = leading_zeroes + -0x1f;\n    flag2 = leading_zeroes < 0;\n    flag1 = leading_zeroes == 0;\n    temp4 = shift_amount;\n    if (!flag1 && flag2 == flag3) {\n      temp2 = temp5 << (shift_amount & 0xff);\n      temp5 = temp5 >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    r12 = 0x20 - temp4;\n  }\n  temp5 = temp5 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 | temp2 >> (r12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp2 = temp2 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp5 + (0x380 - shift_amount) * 0x100000 | temp1,temp2);\n  }\n  temp4 = ~(0x380 - shift_amount);\n  if ((int)temp4 < 0x1f) {\n    leading_zeroes = temp4 - 0x13;\n    if (leading_zeroes != 0 && leading_zeroes < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp3,temp2 >> (0x20 - (0xcU - leading_zeroes) & 0xff) | temp5 << (0xcU - leading_zeroes & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(temp1 | temp5 >> (temp4 & 0xff),\n                    temp2 >> (temp4 & 0xff) | temp5 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp3,temp5 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "update_bitwise_operations_08004ccc",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "iVar1": "register_address",
                "uVar2": "modified_register",
                "uVar3": "register_bit"
            },
            "code": "\nvoid update_bitwise_operations_08004ccc(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3)\n\n{\n  int register_address;\n  uint modified_register;\n  uint register_bit;\n  \n  register_address = DAT_08004d44;\n  modified_register = *(uint *)(DAT_08004d44 + 0x18) | 1;\n  *(uint *)(DAT_08004d44 + 0x18) = modified_register;\n  register_bit = *(uint *)(register_address + 0x18) & 1;\n  update_register_08001170(3,input_param2,modified_register,register_bit,input_param1,register_bit,input_param3);\n  bitwise_operation_08001194(0xfffffff4,0);\n  bitwise_operation_08001194(0xfffffff5,0);\n  bitwise_operation_08001194(0xfffffff6,0);\n  bitwise_operation_08001194(0xfffffffb,0);\n  bitwise_operation_08001194(0xfffffffc,0);\n  bitwise_operation_08001194(0xfffffffe,0);\n  bitwise_operation_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "FUN_08001128"
            ],
            "imported": false,
            "current_name": "update_bitwise_operations_08004ccc"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_result_08000a30",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "result",
                "uVar2": "tempValue1",
                "uVar3": "tempValue2",
                "in_r12": "tempThreshold",
                "bVar4": "condition1",
                "bVar5": "condition2"
            },
            "code": "\nuint calculateResult_08000a30(uint inputValue1,uint inputValue2)\n\n{\n  uint result;\n  uint tempValue1;\n  uint tempValue2;\n  uint tempThreshold;\n  bool condition1;\n  bool condition2;\n  \n  tempValue1 = inputValue2 * 2;\n  condition2 = tempValue1 < 0x70000000;\n  tempValue2 = tempValue1 + 0x90000000;\n  result = tempValue2;\n  if (!condition2) {\n    tempThreshold = tempValue1 + 0x8fe00000;\n    result = tempThreshold;\n  }\n  condition1 = result == 0;\n  if (!condition2 && tempValue2 >= 0x200000) {\n    condition1 = tempThreshold == 0x1fc00000;\n  }\n  if (((condition2 || tempValue2 < 0x200000) || 0x1fc00000 < tempThreshold) || condition1) {\n    if ((inputValue2 & 0x40000000) != 0) {\n      if (((int)tempValue1 >> 0x15 == -1) && ((inputValue1 | inputValue2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputValue2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(tempValue1 + 0x92e00000) < 0 != SCARRY4(tempValue2,0x2e00000)) {\n      return inputValue2 & 0x80000000;\n    }\n    tempValue1 = 0x18 - (tempValue1 + 0x92e00000 >> 0x15);\n    result = inputValue1 >> (tempValue1 & 0xff);\n    if (inputValue1 << (0x20 - tempValue1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    tempValue2 = inputValue2 & 0x1fffff | 0x100000;\n    inputValue1 = result | tempValue2 << (0x20 - tempValue1 & 0xff);\n    tempValue2 = (tempValue2 >> (tempValue1 & 0xff)) << 1;\n  }\n  result = (inputValue2 & 0x80000000 | inputValue1 >> 0x1d) + tempValue2 * 4 + (uint)(0x7fffffff < inputValue1 * 8);\n  if (inputValue1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "calculate_result_08000a30"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "update_process_state_080023d0",
                "param_1": "processStatePtr",
                "undefined4": "uint32_t"
            },
            "code": "\nuint32_t updateProcessState_080023d0(uint32_t *processStatePtr)\n\n{\n  if (processStatePtr != (uint32_t *)0x0) {\n    if (*(char *)((int)processStatePtr + 0x39) == '\\0') {\n      *(undefined *)(processStatePtr + 0xe) = 0;\n      update_register_flags_08004d8c();\n    }\n    *(undefined *)((int)processStatePtr + 0x39) = 2;\n    update_parameters_08002368(*processStatePtr,processStatePtr + 1);\n    *(undefined *)((int)processStatePtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_process_state_080023d0"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "process_buffer_08004c30",
                "param_1": "buffer_ptr",
                "puVar1": "temp_ptr",
                "puVar2": "data_ptr",
                "uVar3": "data_value",
                "uVar4": "flags",
                "iVar5": "buffer_data"
            },
            "code": "\nint * process_buffer_08004c30(int *buffer_ptr)\n\n{\n  undefined *temp_ptr;\n  undefined *data_ptr;\n  undefined data_value;\n  uint flags;\n  int buffer_data;\n  \n  temp_ptr = PTR_DAT_08004c58;\n  if (*buffer_ptr != DAT_08004c54) {\n    return buffer_ptr;\n  }\n  update_buffer_08003ec8(PTR_DAT_08004c5c,*PTR_DAT_08004c58);\n  data_ptr = PTR_DAT_08004c60;\n  if ((PTR_DAT_08004c60[0x39] == '\\x01') || (PTR_DAT_08004c60[0x39] == '\\x12')) {\n    if (temp_ptr == (undefined *)0x0) {\n      return (int *)0x1;\n    }\n    if (PTR_DAT_08004c60[0x38] != '\\x01') {\n      PTR_DAT_08004c60[0x38] = 1;\n      *(undefined4 *)(data_ptr + 0x3c) = 0;\n      *(undefined2 *)(data_ptr + 0x2c) = 1;\n      *(undefined2 *)(data_ptr + 0x2e) = 1;\n      data_ptr[0x38] = 0;\n      if (data_ptr[0x39] == '\\x12') {\n        data_value = 0x32;\n      }\n      else {\n        data_value = 0x22;\n      }\n      buffer_data = *(int *)data_ptr;\n      data_ptr[0x39] = data_value;\n      flags = *(uint *)(buffer_data + 0xc);\n      *(undefined **)(data_ptr + 0x28) = temp_ptr;\n      *(uint *)(buffer_data + 0xc) = flags | 0x100;\n      *(uint *)(buffer_data + 0x14) = *(uint *)(buffer_data + 0x14) | 1;\n      *(uint *)(buffer_data + 0xc) = *(uint *)(buffer_data + 0xc) | 0x20;\n      return (int *)0x0;\n    }\n  }\n  return (int *)0x2;\n}\n\n",
            "called": [
                "FUN_08003ec8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "FUN_0800290c"
            ],
            "imported": false,
            "current_name": "process_buffer_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "input1_low",
                "param_2": "input1_high",
                "param_3": "input2_low",
                "param_4": "input2_high",
                "uVar1": "temp_result1",
                "lVar2": "temp_result2",
                "uVar3": "high_masked",
                "uVar4": "input1_exponent",
                "iVar5": "exponent_sum",
                "uVar6": "exponent_diff",
                "unaff_r5": "input2_exponent",
                "uVar7": "exponent_mask",
                "uVar8": "temp_result3",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "input1"
            },
            "code": "\nulonglong calculate_result_080004d0(undefined4 input1_low,uint input1_high,uint input2_low,uint input2_high)\n\n{\n  ulonglong temp_result1;\n  longlong temp_result2;\n  uint high_masked;\n  uint input1_exponent;\n  int exponent_sum;\n  uint exponent_diff;\n  uint input2_exponent;\n  uint exponent_mask;\n  uint temp_result3;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong input1;\n  \n  input1 = CONCAT44(input1_high,input1_low);\n  exponent_mask = 0x7ff;\n  input1_exponent = input1_high >> 0x14 & 0x7ff;\n  condition1 = input1_exponent == 0;\n  if (!condition1) {\n    input2_exponent = input2_high >> 0x14 & 0x7ff;\n    condition1 = input2_exponent == 0;\n  }\n  if (!condition1) {\n    condition1 = input1_exponent == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = input2_exponent == 0x7ff;\n  }\n  if (condition1) {\n    input1 = process_data_080006ac();\n  }\n  high_masked = (uint)(input1 >> 0x20);\n  exponent_sum = input1_exponent + input2_exponent;\n  input1_exponent = high_masked ^ input2_high;\n  high_masked = high_masked & ~(exponent_mask << 0x15);\n  input2_high = input2_high & ~(exponent_mask << 0x15);\n  condition1 = ((uint)input1 | high_masked << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input2_low | input2_high << 0xc) == 0;\n  }\n  high_masked = high_masked | 0x100000;\n  input2_high = input2_high | 0x100000;\n  if (condition1) {\n    input2_low = (uint)input1 | input2_low;\n    input2_high = (input1_exponent & 0x80000000 | high_masked) ^ input2_high;\n    input1_exponent = exponent_mask >> 1;\n    condition3 = SBORROW4(exponent_sum,input1_exponent);\n    exponent_diff = exponent_sum - input1_exponent;\n    condition1 = exponent_diff == 0;\n    high_masked = exponent_diff;\n    if (!condition1 && (int)input1_exponent <= exponent_sum) {\n      condition3 = SBORROW4(exponent_mask,exponent_diff);\n      high_masked = exponent_mask - exponent_diff;\n      condition1 = exponent_mask == exponent_diff;\n    }\n    if (!condition1 && (int)high_masked < 0 == condition3) {\n      input2_high = input2_high | exponent_diff * 0x100000;\n    }\n    if (!condition1 && (int)high_masked < 0 == condition3) {\n      return CONCAT44(input2_high,input2_low);\n    }\n    input2_high = input2_high | 0x100000;\n    exponent_mask = 0;\n    condition3 = SBORROW4(exponent_diff,1);\n    exponent_diff = exponent_diff - 1;\n    condition1 = exponent_diff == 0;\n    input1_exponent = exponent_diff;\n  }\n  else {\n    temp_result1 = (input1 & 0xffffffff) * (ulonglong)input2_low;\n    input1 = (input1 & 0xffffffff) * (ulonglong)input2_high +\n             (ulonglong)high_masked * (ulonglong)input2_low + (temp_result1 >> 0x20);\n    temp_result3 = (uint)input1;\n    temp_result2 = (ulonglong)high_masked * (ulonglong)input2_high + (input1 >> 0x20);\n    exponent_mask = (uint)temp_result2;\n    high_masked = (uint)((ulonglong)temp_result2 >> 0x20);\n    if ((int)temp_result1 != 0) {\n      temp_result3 = temp_result3 | 1;\n    }\n    exponent_diff = (exponent_sum + -0x3ff) - (uint)(high_masked < 0x200);\n    if (high_masked < 0x200) {\n      condition1 = (temp_result3 & 0x80000000) != 0;\n      temp_result3 = temp_result3 << 1;\n      temp_result2 = CONCAT44(high_masked * 2 + (uint)(CARRY4(exponent_mask,exponent_mask) || CARRY4(exponent_mask * 2,(uint)condition1)),\n                       exponent_mask * 2 + (uint)condition1);\n    }\n    input2_high = input1_exponent & 0x80000000 | (int)((ulonglong)temp_result2 >> 0x20) << 0xb | (uint)temp_result2 >> 0x15;\n    input2_low = (uint)temp_result2 << 0xb | temp_result3 >> 0x15;\n    exponent_mask = temp_result3 * 0x800;\n    condition2 = 0xfc < exponent_diff;\n    condition3 = SBORROW4(exponent_diff,0xfd);\n    high_masked = exponent_diff - 0xfd;\n    condition1 = high_masked == 0;\n    input1_exponent = high_masked;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < high_masked;\n      condition3 = SBORROW4(high_masked,0x700);\n      input1_exponent = exponent_diff - 0x7fd;\n      condition1 = high_masked == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < exponent_mask;\n      if (exponent_mask == 0x80000000) {\n        condition1 = (temp_result3 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input2_high + exponent_diff * 0x100000 + (uint)CARRY4(input2_low,(uint)condition1),input2_low + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)input1_exponent < 0 == condition3) {\n    return (ulonglong)(input2_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(exponent_diff,0x36);\n  condition1 = (int)(exponent_diff + 0x36) < 0;\n  condition3 = exponent_diff == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input2_low = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input2_high = input2_high & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input2_high,input2_low);\n  }\n  input1_exponent = -exponent_diff;\n  high_masked = input1_exponent - 0x20;\n  if (0x1f < (int)input1_exponent) {\n    exponent_diff = input2_low >> (high_masked & 0xff) | input2_high << (0x20 - high_masked & 0xff);\n    input1_exponent = (input2_high >> (high_masked & 0xff) & ~((input2_high & 0x80000000) >> (high_masked & 0xff))) -\n            ((int)exponent_diff >> 0x1f);\n    if ((exponent_mask | input2_low << (0x20 - high_masked & 0xff) | exponent_diff << 1) == 0) {\n      input1_exponent = input1_exponent & ~(exponent_diff >> 0x1f);\n    }\n    return CONCAT44(input2_high,input1_exponent) & 0x80000000ffffffff;\n  }\n  exponent_sum = input1_exponent - 0x14;\n  if (exponent_sum == 0 || exponent_sum < 0 != SCARRY4(high_masked,0xc)) {\n    temp_result3 = input2_low << (exponent_diff + 0x20 & 0xff);\n    high_masked = input2_low >> (input1_exponent & 0xff) | input2_high << (exponent_diff + 0x20 & 0xff);\n    exponent_diff = high_masked + -((int)temp_result3 >> 0x1f);\n    if ((exponent_mask | temp_result3 << 1) == 0) {\n      exponent_diff = exponent_diff & ~(temp_result3 >> 0x1f);\n    }\n    return CONCAT44((input2_high & 0x80000000) +\n                    ((input2_high & 0x7fffffff) >> (input1_exponent & 0xff)) +\n                    (uint)CARRY4(high_masked,-((int)temp_result3 >> 0x1f)),exponent_diff);\n  }\n  input1_exponent = 0xc - exponent_sum;\n  exponent_diff = input2_low << (input1_exponent & 0xff);\n  input1_exponent = input2_low >> (0x20 - input1_exponent & 0xff) | input2_high << (input1_exponent & 0xff);\n  high_masked = input1_exponent + -((int)exponent_diff >> 0x1f);\n  if ((exponent_mask | exponent_diff << 1) == 0) {\n    high_masked = high_masked & ~(exponent_diff >> 0x1f);\n  }\n  return CONCAT44((input2_high & 0x80000000) + (uint)CARRY4(input1_exponent,-((int)exponent_diff >> 0x1f)),high_masked);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d0",
            "calling": [
                "FUN_08005c70",
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_08006228",
                "FUN_080071c0",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "calculate_result_080004d0"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "update_data_08003fdc",
                "param_1": "new_value"
            },
            "code": "\nvoid update_data_08003fdc(undefined4 new_value)\n\n{\n  *(undefined4 *)(*(int *)PTR_DAT_08003fe4 + 0x38) = new_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "imported": false,
            "current_name": "update_data_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "is_comparison_equal_080009f0",
                "in_CY": "comparisonResult"
            },
            "code": "\nbool isComparisonEqual_080009f0(void)\n\n{\n  char comparisonResult;\n  \n  compare_parameters_08000980();\n  return comparisonResult == '\\0';\n}\n\n",
            "called": [
                "FUN_08000980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08005854",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "is_comparison_equal_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "update_registers_08004f10",
                "puVar1": "registerArray"
            },
            "code": "\nvoid updateRegisters_08004f10(void)\n\n{\n  uint *registerArray;\n  \n  registerArray = DAT_08004f50;\n  *DAT_08004f50 = *DAT_08004f50 | 1;\n  registerArray[1] = DAT_08004f54 & registerArray[1];\n  *registerArray = *registerArray & 0xfef6ffff;\n  *registerArray = *registerArray & 0xfffbffff;\n  registerArray[1] = registerArray[1] & 0xff80ffff;\n  registerArray[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "update_registers_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "resize_and_copy_buffer_08005044",
                "param_1": "error_code_ptr",
                "param_2": "buffer_info",
                "param_3": "source_buffer",
                "param_4": "copy_size",
                "iVar1": "memory_location",
                "uVar2": "temp_size",
                "uVar3": "available_size",
                "iVar4": "buffer_offset"
            },
            "code": "\nundefined4 resize_and_copy_buffer_08005044(undefined4 *error_code_ptr,int *buffer_info,undefined4 source_buffer,uint copy_size)\n\n{\n  int memory_location;\n  uint temp_size;\n  uint available_size;\n  int buffer_offset;\n  \n  available_size = buffer_info[2];\n  if ((available_size <= copy_size) && ((*(ushort *)(buffer_info + 3) & 0x480) != 0)) {\n    buffer_offset = *buffer_info - buffer_info[4];\n    available_size = (uint)(buffer_info[5] * 3) / 2;\n    temp_size = copy_size + 1 + buffer_offset;\n    if (available_size < temp_size) {\n      available_size = temp_size;\n    }\n    if ((int)((uint)*(ushort *)(buffer_info + 3) << 0x15) < 0) {\n      memory_location = allocate_memory_08005714(error_code_ptr,available_size);\n      if (memory_location == 0) {\nLAB_0800508a:\n        *error_code_ptr = 0xc;\n        *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_array_08005630(memory_location,buffer_info[4],buffer_offset);\n      *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      memory_location = memory_operations_080057d0(error_code_ptr,buffer_info[4],available_size);\n      if (memory_location == 0) {\n        merge_and_optimize_memory_0800567c(error_code_ptr,buffer_info[4]);\n        goto LAB_0800508a;\n      }\n    }\n    buffer_info[4] = memory_location;\n    *buffer_info = memory_location + buffer_offset;\n    buffer_info[5] = available_size;\n    buffer_info[2] = available_size - buffer_offset;\n    available_size = copy_size;\n  }\n  if (copy_size <= available_size) {\n    available_size = copy_size;\n  }\n  array_copy_08005646(*buffer_info,source_buffer,available_size);\n  buffer_info[2] = buffer_info[2] - available_size;\n  *buffer_info = available_size + *buffer_info;\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005646",
                "FUN_08005714",
                "FUN_08005630",
                "FUN_0800567c",
                "FUN_080057d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "resize_and_copy_buffer_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initialize_system_data_08004194",
                "puVar1": "systemData1",
                "puVar2": "systemData2",
                "puVar3": "systemData3",
                "puVar4": "systemData4",
                "uVar5": "tempVar1",
                "uVar6": "tempVar2",
                "uVar7": "tempVar3",
                "uVar8": "tempVar4"
            },
            "code": "\nvoid initializeSystemData_08004194(void)\n\n{\n  undefined *systemData1;\n  undefined *systemData2;\n  undefined *systemData3;\n  undefined *systemData4;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  process_system_updates_08004028();\n  update_memory_status_08004c70();\n  sensor_data_handler_08002ea0();\n  process_data_and_update_buffers_08003298();\n  systemData3 = PTR_DAT_080049f0;\n  systemData2 = PTR_DAT_080049ec;\n  systemData1 = PTR_DAT_080049e8;\n  *(undefined4 *)(PTR_DAT_080049ec + 0x4c) = 1;\n  *(undefined4 *)(systemData1 + 0x4c) = 1;\n  *(undefined4 *)(systemData3 + 0x4c) = 0xffffffff;\n  tempVar1 = DAT_080049f8;\n  systemData4 = PTR_DAT_080049f4;\n  *(undefined4 *)(PTR_DAT_080049f4 + 0x4c) = 1;\n  tempVar2 = DAT_08004a00;\n  *(undefined4 *)(systemData2 + 0x20) = DAT_080049fc;\n  tempVar3 = DAT_08004a08;\n  *(undefined4 *)(systemData1 + 0x20) = DAT_08004a04;\n  *(undefined4 *)(systemData3 + 0x20) = DAT_08004a0c;\n  *(undefined4 *)(systemData4 + 0x20) = 0;\n  *(undefined4 *)(systemData2 + 4) = tempVar1;\n  tempVar1 = DAT_08004a10;\n  *(undefined4 *)(systemData2 + 8) = DAT_08004a10;\n  *(undefined4 *)(systemData2 + 0xc) = tempVar2;\n  *(undefined4 *)(systemData2 + 0x10) = tempVar3;\n  tempVar3 = DAT_08004a14;\n  *(undefined4 *)(systemData2 + 0x14) = tempVar1;\n  *(undefined4 *)(systemData2 + 0x18) = tempVar3;\n  tempVar4 = DAT_08004a1c;\n  tempVar3 = DAT_08004a18;\n  *(undefined4 *)(systemData1 + 4) = DAT_08004a18;\n  *(undefined4 *)(systemData1 + 8) = tempVar1;\n  *(undefined4 *)(systemData1 + 0xc) = tempVar4;\n  *(undefined4 *)(systemData1 + 0x10) = tempVar3;\n  tempVar3 = DAT_08004a20;\n  *(undefined4 *)(systemData1 + 0x14) = tempVar1;\n  *(undefined4 *)(systemData1 + 0x18) = tempVar3;\n  *(undefined4 *)(systemData3 + 4) = DAT_08004a24;\n  *(undefined4 *)(systemData3 + 8) = DAT_08004a28;\n  *(undefined4 *)(systemData3 + 0xc) = tempVar2;\n  *(undefined4 *)(systemData3 + 0x10) = 0;\n  *(undefined4 *)(systemData3 + 0x14) = 0;\n  *(undefined4 *)(systemData3 + 0x18) = 0;\n  *(undefined4 *)(systemData4 + 4) = DAT_08004a2c;\n  *(undefined4 *)(systemData4 + 8) = 0;\n  *(undefined4 *)(systemData4 + 0xc) = 0;\n  *(undefined4 *)(systemData4 + 0x10) = 0;\n  *(undefined4 *)(systemData4 + 0x14) = 0;\n  *(undefined4 *)(systemData4 + 0x18) = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_08003298",
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "initialize_system_data_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "update_data_register_08001240",
                "param_1": "inputValue",
                "uVar1": "updatedRegisterValue"
            },
            "code": "\nvoid updateDataRegister_08001240(int inputValue)\n\n{\n  uint updatedRegisterValue;\n  \n  if (inputValue == 4) {\n    updatedRegisterValue = *DAT_08001254 | 4;\n  }\n  else {\n    updatedRegisterValue = *DAT_08001254 & 0xfffffffb;\n  }\n  *DAT_08001254 = updatedRegisterValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "update_data_register_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "calculate_offset_08005840",
                "param_1": "input_value",
                "param_2": "base_address",
                "iVar1": "offset"
            },
            "code": "\nint calculate_offset_08005840(undefined4 input_value,int base_address)\n\n{\n  int offset;\n  \n  offset = *(int *)(base_address + -4) + -4;\n  if (*(int *)(base_address + -4) < 0) {\n    offset = offset + *(int *)(base_address + offset);\n  }\n  return offset;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005840",
            "calling": [
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "calculate_offset_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "string_length_08000150",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "code": "\nchar * string_length_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "FUN_08004c8c"
            ],
            "imported": false,
            "current_name": "string_length_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "update_leading_zeroes_08003f3c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "prev_value",
                "uVar2": "leading_zeroes"
            },
            "code": "\nvoid update_leading_zeroes_08003f3c(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 prev_value;\n  uint leading_zeroes;\n  \n  prev_value = DAT_08003f78;\n  leading_zeroes = count_leading_zeroes(input1);\n  update_value_08001424(DAT_08003f78,0x8000,leading_zeroes >> 5);\n  leading_zeroes = count_leading_zeroes(input2);\n  update_value_08001424(prev_value,0x4000,leading_zeroes >> 5);\n  leading_zeroes = count_leading_zeroes(input3);\n  update_value_08001424(prev_value,0x2000,leading_zeroes >> 5);\n  return;\n}\n\n",
            "called": [
                "FUN_08001424"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "update_leading_zeroes_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return *(undefined4 *)PTR_DAT_0800221c;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "imported": false,
            "current_name": "get_data_value_08002214"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "do_nothing_0800729c"
            },
            "code": "\nvoid do_nothing_0800729c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "FUN_080071c0"
            ],
            "imported": false,
            "current_name": "do_nothing_0800729c"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "combine_parameters_08001004",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "\nundefined8 combine_parameters_08001004(undefined4 first_param,undefined4 second_param)\n\n{\n  calculate_result_08000f9c();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "called": [
                "FUN_08000f9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "imported": false,
            "current_name": "combine_parameters_08001004"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "update_multiple_status_flags_08003ff4",
                "puVar1": "status_flag_ptr"
            },
            "code": "\nvoid update_multiple_status_flags_08003ff4(void)\n\n{\n  undefined *status_flag_ptr;\n  \n  status_flag_ptr = PTR_DAT_0800401c;\n  update_status_flag_08002538(PTR_DAT_08004020,4);\n  update_status_flag_08002538(PTR_DAT_08004024,8);\n  update_status_flag_08002538(status_flag_ptr,8);\n  update_status_flag_08002538(status_flag_ptr,0xc);\n  return;\n}\n\n",
            "called": [
                "FUN_08002538"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "update_multiple_status_flags_08003ff4"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "initialize_and_process_sensors_080041ae",
                "shift_or_interrupt_08003eb0": "configure_interrupts",
                "initialize_system_data_08004194": "initialize_sensor_system",
                "increment_counter_0800114c": "increment_system_counter",
                "process_sensor_data_0800411c": "process_sensor_readings"
            },
            "code": "\nvoid initialize_and_process_sensors_080041ae(void)\n\n{\n  shift_or_interrupt_08003eb0(0);\n  initialize_sensor_system();\n  do {\n    increment_counter_0800114c();\n    process_sensor_readings();\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_0800114c",
                "FUN_08004194"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "FUN_08004f68"
            ],
            "imported": false,
            "current_name": "initialize_and_process_sensors_080041ae"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "undefined4": "uint32_t",
                "update_register_08001170": "update_register",
                "process_data_08001104": "process_data",
                "update_bitwise_operations_08004ccc": "update_bitwise_operations"
            },
            "code": "\nuint32_t initialize_system_08001128(void)\n\n{\n  *DAT_08001148 = *DAT_08001148 | 0x10;\n  update_register_08001170(3);\n  process_data(0);\n  update_bitwise_operations();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "initialize_system_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "process_and_update_data_08004514",
                "iVar1": "process_result",
                "uVar2": "data_value",
                "uVar3": "data_and_strings_param",
                "iVar4": "input_result",
                "local_44": "parameter_a",
                "local_40": "parameter_b",
                "local_3c": "parameter_c",
                "local_38": "parameter_d",
                "local_34": "parameter_e",
                "local_30": "parameter_array",
                "local_20": "parameter_array_0",
                "local_1c": "parameter_array_1",
                "local_14": "parameter_array_2",
                "local_10": "parameter_array_3",
                "local_c": "parameter_array_4"
            },
            "code": "\nvoid process_and_update_data_08004514(void)\n\n{\n  int process_result;\n  uint data_value;\n  undefined4 data_and_strings_param;\n  int input_result;\n  undefined4 parameter_a;\n  int parameter_b;\n  int parameter_c;\n  undefined4 parameter_d;\n  int parameter_e;\n  undefined4 parameter_array [4];\n  undefined4 parameter_array_0;\n  undefined4 parameter_array_1;\n  undefined4 parameter_array_2;\n  undefined4 parameter_array_3;\n  undefined4 parameter_array_4;\n  \n  parameter_array_0 = 1;\n  parameter_array_1 = 0x10;\n  input_result = 2;\n  parameter_array_3 = 0;\n  parameter_array[0] = 2;\n  parameter_array_2 = 2;\n  parameter_array_4 = 0x380000;\n  process_result = process_parameters_08001b58(parameter_array);\n  if (process_result == 0) goto LAB_08004540;\n  data_and_strings_param = 0x3c;\n  while( true ) {\n    process_result = process_data_and_strings_08004490(PTR_s____Src_peripherals_c_08004588,data_and_strings_param);\nLAB_08004540:\n    parameter_a = 0xf;\n    parameter_d = 0x400;\n    parameter_b = input_result;\n    parameter_c = process_result;\n    parameter_e = process_result;\n    input_result = process_input_0800209c(&parameter_a,input_result);\n    if (input_result == 0) break;\n    data_and_strings_param = 0x49;\n  }\n  data_value = get_data_value_08002214();\n  update_data_array_08001214(data_value / 1000);\n  update_data_register_08001240(4);\n  bitwise_operation_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_08001194",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_08002214",
                "FUN_08001214",
                "FUN_0800209c",
                "FUN_08001240"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "process_and_update_data_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "process_and_update_data_08004a84",
                "puVar1": "data_ptr1",
                "puVar2": "data_ptr2",
                "puVar3": "data_ptr3",
                "puVar4": "data_ptr4",
                "puVar5": "data_ptr5",
                "uVar6": "result",
                "uVar7": "temp_value",
                "iVar8": "check_result"
            },
            "code": "\nvoid process_and_update_data_08004a84(void)\n\n{\n  undefined *data_ptr1;\n  undefined *data_ptr2;\n  undefined *data_ptr3;\n  undefined *data_ptr4;\n  undefined *data_ptr5;\n  undefined result;\n  undefined4 temp_value;\n  int check_result;\n  \n  temp_value = calculate_updated_value_08002ec0();\n  data_ptr2 = PTR_DAT_08004bf4;\n  data_ptr1 = PTR_DAT_08004bf0;\n  *(undefined4 *)(PTR_DAT_08004bf0 + 0x30) = temp_value;\n  temp_value = process_data_08002ed4();\n  *(undefined4 *)(data_ptr2 + 0x30) = temp_value;\n  temp_value = process_data_08002ee8();\n  data_ptr3 = PTR_DAT_08004bf8;\n  *(undefined4 *)(PTR_DAT_08004bf8 + 0x30) = temp_value;\n  update_data_values_08004a30();\n  check_result = check_swapped_parameters_08001064(*(undefined4 *)(data_ptr1 + 0x30),0);\n  if (check_result == 0) {\n    check_result = check_combined_parameters_08001028(*(undefined4 *)(data_ptr1 + 0x30),DAT_08004c00);\n  }\n  else {\n    check_result = check_swapped_parameters_08001064(*(undefined4 *)(data_ptr1 + 0x30),DAT_08004bfc);\n  }\n  if (check_result == 0) {\n    check_result = check_swapped_parameters_08001064(*(undefined4 *)(data_ptr2 + 0x30),0);\n    if (check_result == 0) {\n      check_result = check_combined_parameters_08001028(*(undefined4 *)(data_ptr2 + 0x30),DAT_08004c00);\n    }\n    else {\n      check_result = check_swapped_parameters_08001064(*(undefined4 *)(data_ptr2 + 0x30),DAT_08004bfc);\n    }\n    if (check_result == 0) {\n      update_leading_zeroes_08003f3c(1,1);\n      process_data_0800483c(PTR_DAT_08004bf0);\n      data_ptr4 = PTR_DAT_08004c04;\n      process_data_0800483c(PTR_DAT_08004bf4);\n      process_data_0800483c(PTR_DAT_08004bf8);\n      data_ptr5 = PTR_DAT_08004c08;\n      if (data_ptr4[1] != '\\0') {\n        process_data_0800483c(PTR_DAT_08004c08);\n        temp_value = process_floating_point_08000adc(*(undefined4 *)(data_ptr5 + 0x48),DAT_08004c0c);\n        *(undefined4 *)(data_ptr5 + 0x48) = temp_value;\n      }\n      *(undefined4 *)(data_ptr5 + 0x48) = *(undefined4 *)(data_ptr4 + 4);\n      if (*data_ptr4 == '\\0') {\n        initialize_data_080041c4();\n      }\n      else {\n        process_parameters_0800426c(*(undefined4 *)(data_ptr5 + 0x48),*(undefined4 *)(data_ptr1 + 0x48),\n                     *(undefined4 *)(data_ptr2 + 0x48),*(undefined4 *)(data_ptr3 + 0x48));\n      }\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr1 + 4),DAT_08004c10);\n      result = calculate_result_080010c4();\n      data_ptr4 = PTR_DAT_08004c14;\n      temp_value = DAT_08004c10;\n      PTR_DAT_08004c14[3] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr1 + 8),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[4] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr2 + 4),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      *data_ptr4 = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr2 + 8),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[1] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr2 + 0xc),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[2] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr3 + 4),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[6] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr3 + 8),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[7] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr3 + 0xc),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[8] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr5 + 4),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[9] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr5 + 8),temp_value);\n      result = calculate_result_080010c4();\n      temp_value = DAT_08004c10;\n      data_ptr4[10] = result;\n      float_multiplication_08000cec(*(undefined4 *)(data_ptr5 + 0xc),temp_value);\n      result = calculate_result_080010c4();\n      data_ptr4[0xb] = result;\n      return;\n    }\n  }\n  initialize_data_080041c4();\n  update_leading_zeroes_08003f3c(0,1);\n  return;\n}\n\n",
            "called": [
                "FUN_080010c4",
                "FUN_0800483c",
                "FUN_08001064",
                "FUN_08002ed4",
                "FUN_08000adc",
                "FUN_08004a30",
                "FUN_08000cec",
                "FUN_0800426c",
                "FUN_080041c4",
                "FUN_08003f3c",
                "FUN_08002ee8",
                "FUN_08001028",
                "FUN_08002ec0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "process_and_update_data_08004a84"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "initialize_data_080041c4",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "extraout_r1": "result"
            },
            "code": "\nvoid initialize_data_080041c4(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4)\n\n{\n  undefined4 result;\n  \n  update_data_08003fc4(0);\n  update_data_field_08003fd0(0);\n  update_data_08003fdc(0);\n  update_value_at_offset_08003fe8(0,result,data3,data4);\n  return;\n}\n\n",
            "called": [
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08003fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "initialize_data_080041c4"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "format_and_process_data_080053d4",
                "param_1": "data_source",
                "param_2": "format_control",
                "param_3": "output_buffer",
                "param_4": "write_function",
                "param_5": "arg_list",
                "bVar1": "format_char",
                "iVar2": "index",
                "puVar3": "current_arg",
                "iVar4": "write_result",
                "puVar5": "digit_string",
                "uVar6": "base",
                "ppuVar7": "arg_pointer",
                "uVar8": "arg_value",
                "uVar9": "quotient",
                "puVar10": "buffer_pointer",
                "puVar11": "buffer_start",
                "local_24": "written_count"
            },
            "code": "\nuint format_and_process_data_080053d4(undefined4 data_source,uint *format_control,undefined4 output_buffer,code *write_function,uint **arg_list)\n\n{\n  byte format_char;\n  int index;\n  uint *current_arg;\n  int write_result;\n  undefined *digit_string;\n  uint base;\n  uint **arg_pointer;\n  uint arg_value;\n  uint quotient;\n  undefined *buffer_pointer;\n  undefined *buffer_start;\n  uint written_count [2];\n  \n  format_char = *(byte *)(format_control + 6);\n  buffer_start = (undefined *)((int)format_control + 0x43);\n  if (format_char != 0x6e) {\n    if (format_char < 0x6f) {\n      if (format_char != 99) {\n        if (format_char < 100) {\n          if (format_char == 0) goto LAB_0800558e;\n          if (format_char != 0x58) goto LAB_08005404;\n          *(undefined *)((int)format_control + 0x45) = 0x58;\n          digit_string = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          base = *format_control;\n          current_arg = *arg_list;\n          *arg_list = current_arg + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            arg_value = (uint)*(ushort *)current_arg;\n          }\n          else {\n            arg_value = *current_arg;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_control = base | 0x20;\n          }\n          if (arg_value == 0) {\n            *format_control = *format_control & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)format_control + 0x43) = 0;\n        }\n        else {\n          if ((format_char != 100) && (format_char != 0x69)) goto LAB_08005404;\n          arg_value = *format_control;\n          current_arg = *arg_list;\n          if ((arg_value & 0x80) == 0) {\n            *arg_list = current_arg + 1;\n            if ((arg_value & 0x40) == 0) goto LAB_08005424;\n            arg_value = (uint)(short)*(ushort *)current_arg;\n          }\n          else {\n            *arg_list = current_arg + 1;\nLAB_08005424:\n            arg_value = *current_arg;\n          }\n          if ((int)arg_value < 0) {\n            arg_value = -arg_value;\n            *(undefined *)((int)format_control + 0x43) = 0x2d;\n          }\n          base = 10;\n          digit_string = PTR_s_0123456789ABCDEF_08005610;\n        }\n        quotient = format_control[1];\n        format_control[2] = quotient;\n        buffer_pointer = buffer_start;\n        if ((int)quotient < 0) {\n          if (arg_value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)format_control + 0x42) = *digit_string;\n          buffer_pointer = (undefined *)((int)format_control + 0x42);\n        }\n        else {\n          *format_control = *format_control & 0xfffffffb;\n          if (arg_value == 0) {\n            if (quotient != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              quotient = arg_value / base;\n              buffer_pointer = buffer_pointer + -1;\n              *buffer_pointer = digit_string[arg_value - base * quotient];\n              arg_value = quotient;\n            } while (quotient != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_control << 0x1f) < 0)) && ((int)format_control[1] <= (int)format_control[4]))\n        {\n          buffer_pointer[-1] = 0x30;\n          buffer_pointer = buffer_pointer + -1;\n        }\n        format_control[4] = (int)buffer_start - (int)buffer_pointer;\n        buffer_start = buffer_pointer;\n        goto LAB_080054fa;\n      }\n      current_arg = *arg_list;\n      *arg_list = current_arg + 1;\n      *(char *)((int)format_control + 0x42) = (char)*current_arg;\nLAB_08005464:\n      buffer_start = (undefined *)((int)format_control + 0x42);\n      arg_value = 1;\n    }\n    else {\n      if (format_char != 0x73) {\n        if (format_char < 0x74) {\n          if (format_char == 0x6f) {\nLAB_0800548a:\n            arg_value = *format_control;\n            current_arg = *arg_list;\n            if ((arg_value & 0x80) == 0) {\n              *arg_list = current_arg + 1;\n              if ((arg_value & 0x40) == 0) goto LAB_08005498;\n              arg_value = (uint)*(ushort *)current_arg;\n            }\n            else {\n              *arg_list = current_arg + 1;\nLAB_08005498:\n              arg_value = *current_arg;\n            }\n            digit_string = PTR_s_0123456789ABCDEF_08005610;\n            if (format_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (format_char == 0x70) {\n            *format_control = *format_control | 0x20;\nLAB_0800544a:\n            digit_string = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)format_control + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (format_char == 0x75) goto LAB_0800548a;\n          if (format_char == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)format_control + 0x42) = format_char;\n        goto LAB_08005464;\n      }\n      current_arg = *arg_list;\n      *arg_list = current_arg + 1;\n      buffer_start = (undefined *)*current_arg;\n      index = find_char_in_range_08005614(buffer_start,0,format_control[1]);\n      if (index != 0) {\n        format_control[1] = index - (int)buffer_start;\n      }\n      arg_value = format_control[1];\n    }\n    format_control[4] = arg_value;\n    *(undefined *)((int)format_control + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  arg_value = *format_control;\n  arg_pointer = (uint **)*arg_list;\n  base = format_control[5];\n  if ((arg_value & 0x80) == 0) {\n    *arg_list = (uint *)(arg_pointer + 1);\n    current_arg = *arg_pointer;\n    if ((arg_value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)current_arg = (short)base;\n  }\n  else {\n    *arg_list = (uint *)(arg_pointer + 1);\n    current_arg = *arg_pointer;\nLAB_0800557a:\n    *current_arg = base;\n  }\nLAB_0800558e:\n  format_control[4] = 0;\nLAB_080054fa:\n  index = process_data_080052e4(data_source,format_control,written_count,output_buffer,write_function);\n  if ((index == -1) || (index = (*write_function)(data_source,output_buffer,buffer_start,format_control[4]), index == -1)) {\nLAB_0800550e:\n    arg_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_control << 0x1e) < 0) {\n      for (index = 0; index < (int)(format_control[3] - written_count[0]); index = index + 1) {\n        write_result = (*write_function)(data_source,output_buffer,(int)format_control + 0x19,1);\n        if (write_result == -1) goto LAB_0800550e;\n      }\n    }\n    arg_value = format_control[3];\n    if ((int)format_control[3] < (int)written_count[0]) {\n      arg_value = written_count[0];\n    }\n  }\n  return arg_value;\n}\n\n",
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "FUN_080050fc"
            ],
            "imported": false,
            "current_name": "format_and_process_data_080053d4"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "memory_operations_080057d0",
                "param_1": "memory_pool",
                "param_2": "source_memory",
                "param_3": "memory_size",
                "param_4": "additional_param",
                "uVar1": "result_memory",
                "uVar2": "offset"
            },
            "code": "\nuint memory_operations_080057d0(undefined4 memory_pool,uint source_memory,uint memory_size,undefined4 additional_param)\n\n{\n  uint result_memory;\n  uint offset;\n  \n  if (source_memory != 0) {\n    if (memory_size == 0) {\n      merge_and_optimize_memory_0800567c();\n      result_memory = memory_size;\n    }\n    else {\n      offset = calculate_offset_08005840();\n      result_memory = source_memory;\n      if ((offset < memory_size) && (result_memory = allocate_memory_08005714(memory_pool,memory_size), result_memory != 0)) {\n        copy_array_08005630(result_memory,source_memory,memory_size);\n        merge_and_optimize_memory_0800567c(memory_pool,source_memory);\n      }\n    }\n    return result_memory;\n  }\n  result_memory = allocate_memory_08005714(memory_pool,memory_size,memory_size,additional_param);\n  return result_memory;\n}\n\n",
            "called": [
                "FUN_08005714",
                "FUN_08005630",
                "FUN_0800567c",
                "FUN_08005840"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "FUN_08005044"
            ],
            "imported": false,
            "current_name": "memory_operations_080057d0"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "merge_and_optimize_memory_0800567c",
                "param_1": "error_code",
                "param_2": "memory_size",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "puVar1": "current_ptr",
                "extraout_r1": "unused_extraout_r1",
                "ppiVar2": "temp_ptr_a",
                "ppiVar3": "temp_ptr_b",
                "ppiVar5": "current_memory_block",
                "ppiVar6": "previous_memory_block",
                "ppiVar7": "new_memory_block",
                "piVar4": "temp_size"
            },
            "code": "\nvoid merge_and_optimize_memory_0800567c(undefined4 *error_code,int memory_size,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  undefined *current_ptr;\n  int **unused_extraout_r1;\n  int **temp_ptr_a;\n  int **temp_ptr_b;\n  int *temp_size;\n  int **current_memory_block;\n  int **previous_memory_block;\n  int **new_memory_block;\n  \n  if (memory_size == 0) {\n    return;\n  }\n  new_memory_block = (int **)(memory_size + -4);\n  if (*(int *)(memory_size + -4) < 0) {\n    new_memory_block = (int **)((int)new_memory_block + *(int *)(memory_size + -4));\n  }\n  do_nothing_0800583c();\n  current_ptr = PTR_DAT_08005710;\n  current_memory_block = *(int ***)PTR_DAT_08005710;\n  if (current_memory_block == (int **)0x0) {\n    new_memory_block[1] = (int *)0x0;\n    *(int ***)current_ptr = new_memory_block;\n    temp_ptr_a = unused_extraout_r1;\n    temp_ptr_b = (int **)current_ptr;\n  }\n  else if (new_memory_block < current_memory_block) {\n    temp_ptr_a = (int **)*new_memory_block;\n    temp_ptr_b = (int **)((int)new_memory_block + (int)temp_ptr_a);\n    if (current_memory_block == temp_ptr_b) {\n      temp_size = *current_memory_block;\n      current_memory_block = (int **)current_memory_block[1];\n      temp_ptr_b = (int **)((int)temp_size + (int)temp_ptr_a);\n      *new_memory_block = (int *)temp_ptr_b;\n    }\n    new_memory_block[1] = (int *)current_memory_block;\n    *(int ***)current_ptr = new_memory_block;\n  }\n  else {\n    do {\n      previous_memory_block = current_memory_block;\n      temp_ptr_b = (int **)previous_memory_block[1];\n      if (temp_ptr_b == (int **)0x0) break;\n      current_memory_block = temp_ptr_b;\n    } while (temp_ptr_b <= new_memory_block);\n    temp_ptr_a = (int **)*previous_memory_block;\n    if ((int **)((int)previous_memory_block + (int)temp_ptr_a) == new_memory_block) {\n      temp_ptr_a = (int **)((int)temp_ptr_a + (int)*new_memory_block);\n      *previous_memory_block = (int *)temp_ptr_a;\n      if (temp_ptr_b == (int **)((int)previous_memory_block + (int)temp_ptr_a)) {\n        temp_size = *temp_ptr_b;\n        temp_ptr_b = (int **)temp_ptr_b[1];\n        temp_ptr_a = (int **)((int)temp_ptr_a + (int)temp_size);\n        *previous_memory_block = (int *)temp_ptr_a;\n        previous_memory_block[1] = (int *)temp_ptr_b;\n      }\n    }\n    else if (new_memory_block < (int **)((int)previous_memory_block + (int)temp_ptr_a)) {\n      *error_code = 0xc;\n    }\n    else {\n      temp_ptr_a = (int **)((int)new_memory_block + (int)*new_memory_block);\n      if (temp_ptr_b == temp_ptr_a) {\n        temp_size = *temp_ptr_b;\n        temp_ptr_b = (int **)temp_ptr_b[1];\n        temp_ptr_a = (int **)((int)temp_size + (int)*new_memory_block);\n        *new_memory_block = (int *)temp_ptr_a;\n      }\n      new_memory_block[1] = (int *)temp_ptr_b;\n      previous_memory_block[1] = (int *)new_memory_block;\n    }\n  }\n  do_nothing_0800583e(error_code,temp_ptr_a,temp_ptr_b,unused_param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "imported": false,
            "current_name": "merge_and_optimize_memory_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_and_update_system_0800458c",
                "initialize_system_08001128": "initialize_system",
                "process_and_update_data_08004514": "process_and_update_data",
                "update_value_08001424": "update_value",
                "configure_pins_08001264": "configure_pins",
                "configure_parameters_08001754": "configure_parameters",
                "process_data_and_strings_08004490": "process_data_and_strings",
                "update_device_settings_08002724": "update_device_settings",
                "update_process_state_080023d0": "update_process_state",
                "update_registers_080025a4": "update_registers",
                "update_register_values_0800245c": "update_register_values",
                "update_status_08002564": "update_status",
                "configure_function_08004e14": "configure_function",
                "uVar1": "temp_var1",
                "puVar2": "temp_ptr",
                "iVar3": "result",
                "uVar4": "temp_var2",
                "iVar5": "counter",
                "local_58": "reg_val1",
                "local_54": "reg_val2",
                "local_50": "reg_val3",
                "local_4c": "reg_val4",
                "local_48": "reg_val5",
                "local_40": "reg_val6",
                "local_3c": "reg_val7",
                "local_38": "reg_val8",
                "local_34": "pin_val",
                "local_30": "pin_mode",
                "local_2c": "status_val1",
                "local_28": "status_val2",
                "local_24": "status_val3",
                "local_20": "status_val4",
                "local_1c": "status_val5"
            },
            "code": "\nvoid initialize_and_update_system_0800458c(void)\n\n{\n  undefined4 temp_var1;\n  undefined *temp_ptr;\n  int result;\n  undefined4 temp_var2;\n  int counter;\n  int reg_val1;\n  int reg_val2;\n  int reg_val3;\n  int reg_val4;\n  int reg_val5;\n  int reg_val6;\n  int reg_val7;\n  int reg_val8;\n  int pin_val;\n  int pin_mode;\n  int status_val1;\n  int status_val2;\n  int status_val3;\n  undefined4 status_val4;\n  int status_val5;\n  \n  initialize_system();\n  process_and_update_data();\n  temp_var2 = DAT_08004800;\n  result = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  counter = 2;\n  *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 4;\n  temp_var1 = DAT_08004804;\n  *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 8;\n  update_value_08001424(temp_var2,0xe000,0,*(uint *)(result + 0x18) & 8);\n  update_value_08001424(DAT_08004808,0x20,0);\n  pin_val = 0xe000;\n  pin_mode = 1;\n  status_val2 = 2;\n  configure_pins_08001264(DAT_08004800,&pin_val);\n  pin_val = 0x20;\n  pin_mode = 1;\n  status_val2 = 2;\n  configure_pins_08001264(DAT_08004808,&pin_val);\n  temp_ptr = PTR_DAT_0800480c;\n  *(undefined4 *)PTR_DAT_0800480c = DAT_08004810;\n  *(undefined4 *)(temp_ptr + 4) = temp_var1;\n  *(undefined4 *)(temp_ptr + 0x10) = 0x4000;\n  *(undefined4 *)(temp_ptr + 8) = 0;\n  *(undefined4 *)(temp_ptr + 0xc) = 0;\n  *(undefined4 *)(temp_ptr + 0x14) = 0;\n  *(undefined4 *)(temp_ptr + 0x18) = 0;\n  *(undefined4 *)(temp_ptr + 0x1c) = 0;\n  *(undefined4 *)(temp_ptr + 0x20) = 0;\n  result = configure_parameters();\n  if (result == 0) goto LAB_0800463a;\n  temp_var2 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = process_data_and_strings(PTR_s____Src_peripherals_c_08004814,temp_var2);\nLAB_0800463a:\n                                  temp_var2 = DAT_0800481c;\n                                  temp_ptr = PTR_DAT_08004818;\n                                  *(int *)(PTR_DAT_08004818 + 8) = result;\n                                  *(int *)(temp_ptr + 0xc) = result;\n                                  *(int *)(temp_ptr + 0x10) = result;\n                                  *(int *)(temp_ptr + 0x18) = result;\n                                  *(int *)(temp_ptr + 0x1c) = result;\n                                  *(undefined4 *)temp_ptr = temp_var2;\n                                  *(undefined4 *)(temp_ptr + 4) = 0x1c200;\n                                  *(undefined4 *)(temp_ptr + 0x14) = 0xc;\n                                  result = update_device_settings(temp_ptr);\n                                  temp_var2 = DAT_08004824;\n                                  temp_ptr = PTR_DAT_08004820;\n                                  if (result == 0) break;\n                                  temp_var2 = 0x151;\n                                }\n                                *(undefined4 *)(PTR_DAT_08004820 + 8) = 0;\n                                *(undefined4 *)(temp_ptr + 0x10) = 0;\n                                *(undefined4 *)(temp_ptr + 0x14) = 0;\n                                *(undefined4 *)temp_ptr = temp_var2;\n                                *(int *)(temp_ptr + 4) = counter;\n                                *(undefined4 *)(temp_ptr + 0xc) = 1000;\n                                result = update_process_state(temp_ptr);\n                                if (result == 0) break;\n                                temp_var2 = 0x88;\n                              }\n                              reg_val1 = result;\n                              reg_val2 = result;\n                              result = update_registers_080025a4(temp_ptr,&reg_val1);\n                              if (result == 0) break;\n                              temp_var2 = 0x8f;\n                            }\n                            reg_val3 = 0x60;\n                            reg_val4 = result;\n                            reg_val5 = result;\n                            reg_val6 = result;\n                            reg_val7 = result;\n                            reg_val8 = result;\n                            result = update_register_values(temp_ptr,&reg_val3,0xc);\n                            if (result == 0) break;\n                            temp_var2 = 0x9a;\n                          }\n                          status_val4 = 0x2000;\n                          pin_val = result;\n                          pin_mode = result;\n                          status_val1 = result;\n                          status_val2 = result;\n                          status_val3 = result;\n                          status_val5 = result;\n                          result = update_status_08002564(temp_ptr,&pin_val);\n                          if (result == 0) break;\n                          temp_var2 = 0xa6;\n                        }\n                        configure_function(temp_ptr);\n                        temp_ptr = PTR_DAT_08004828;\n                        *(undefined4 *)PTR_DAT_08004828 = 0x40000000;\n                        *(int *)(temp_ptr + 4) = counter;\n                        *(undefined4 *)(temp_ptr + 8) = 0;\n                        *(undefined4 *)(temp_ptr + 0xc) = 1000;\n                        *(undefined4 *)(temp_ptr + 0x10) = 0;\n                        result = update_process_state(temp_ptr);\n                        if (result == 0) break;\n                        temp_var2 = 0xc3;\n                      }\n                      reg_val3 = result;\n                      reg_val4 = result;\n                      result = update_registers_080025a4(temp_ptr,&reg_val3);\n                      if (result == 0) break;\n                      temp_var2 = 0xca;\n                    }\n                    pin_val = 0x60;\n                    pin_mode = result;\n                    status_val1 = result;\n                    status_val3 = result;\n                    result = update_register_values(temp_ptr,&pin_val,4);\n                    if (result == 0) break;\n                    temp_var2 = 0xd3;\n                  }\n                  configure_function(temp_ptr);\n                  temp_var2 = DAT_08004830;\n                  temp_ptr = PTR_DAT_0800482c;\n                  *(undefined4 *)(PTR_DAT_0800482c + 0xc) = 1000;\n                  *(undefined4 *)temp_ptr = temp_var2;\n                  *(int *)(temp_ptr + 4) = counter;\n                  *(undefined4 *)(temp_ptr + 8) = 0;\n                  *(undefined4 *)(temp_ptr + 0x10) = 0;\n                  result = update_process_state();\n                  if (result == 0) break;\n                  temp_var2 = 0xf0;\n                }\n                reg_val3 = 0;\n                reg_val4 = 0;\n                result = update_registers_080025a4(PTR_DAT_0800482c,&reg_val3);\n                if (result == 0) break;\n                temp_var2 = 0xf7;\n              }\n              pin_val = 0x60;\n              pin_mode = result;\n              status_val1 = result;\n              status_val3 = result;\n              result = update_register_values(PTR_DAT_0800482c,&pin_val,8);\n              if (result == 0) break;\n              temp_var2 = 0x100;\n            }\n            counter = update_register_values(PTR_DAT_0800482c,&pin_val,0xc);\n            if (counter == 0) break;\n            temp_var2 = 0x105;\n          }\n          configure_function(PTR_DAT_0800482c);\n          temp_ptr = PTR_DAT_08004834;\n          *(undefined4 *)PTR_DAT_08004834 = DAT_08004838;\n          *(undefined4 *)(temp_ptr + 4) = 2;\n          *(undefined4 *)(temp_ptr + 8) = 0;\n          *(undefined4 *)(temp_ptr + 0xc) = 1000;\n          *(undefined4 *)(temp_ptr + 0x10) = 0;\n          result = update_process_state(temp_ptr);\n          if (result == 0) break;\n          temp_var2 = 0x122;\n        }\n        reg_val3 = result;\n        reg_val4 = result;\n        result = update_registers_080025a4(temp_ptr,&reg_val3);\n        if (result == 0) break;\n        temp_var2 = 0x129;\n      }\n      pin_val = 0x60;\n      pin_mode = result;\n      status_val1 = result;\n      status_val3 = result;\n      result = update_register_values(temp_ptr,&pin_val,8);\n      if (result == 0) break;\n      temp_var2 = 0x132;\n    }\n    result = update_register_values(temp_ptr,&pin_val,0xc);\n    if (result == 0) break;\n    temp_var2 = 0x137;\n  }\n  configure_function(temp_ptr);\n  return;\n}\n\n",
            "called": [
                "FUN_080023d0",
                "FUN_08002724",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08004490",
                "FUN_08001754",
                "FUN_0800245c",
                "FUN_08002564",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_08001264",
                "FUN_08004514"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [
                "FUN_08004028"
            ],
            "imported": false,
            "current_name": "initialize_and_update_system_0800458c"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "do_nothing_080072d4"
            },
            "code": "\nvoid do_nothing_080072d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072d4",
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08004fb4"
            ],
            "imported": false,
            "current_name": "do_nothing_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "process_floating_point_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param",
                "param_4": "shiftedInput2",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "iVar6": "tempVar6",
                "bVar7": "condition"
            },
            "code": "\nuint processFloatingPoint_08000adc(uint input1,uint input2,undefined4 unused_param,uint shiftedInput2)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  int tempVar6;\n  bool condition;\n  \n  tempVar3 = input1 << 1;\n  condition = tempVar3 == 0;\n  if (!condition) {\n    shiftedInput2 = input2 << 1;\n    condition = shiftedInput2 == 0;\n  }\n  if (!condition) {\n    condition = tempVar3 == shiftedInput2;\n  }\n  tempVar6 = (int)tempVar3 >> 0x18;\n  if (!condition) {\n    condition = tempVar6 == -1;\n  }\n  if (!condition) {\n    condition = (int)shiftedInput2 >> 0x18 == -1;\n  }\n  if (condition) {\n    tempVar1 = (int)(input2 << 1) >> 0x18;\n    if (tempVar6 == -1 || tempVar1 == -1) {\n      tempVar3 = input2;\n      if (tempVar6 == -1) {\n        tempVar3 = input1;\n      }\n      if (tempVar6 != -1 || tempVar1 != -1) {\n        input2 = tempVar3;\n      }\n      condition = (tempVar3 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (input2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = tempVar3 == input2;\n      }\n      if (!condition) {\n        tempVar3 = tempVar3 | 0x400000;\n      }\n      return tempVar3;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (tempVar3 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((tempVar3 & 0xff000000) == 0) {\n      tempVar3 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        tempVar3 = tempVar3 | 0x80000000;\n      }\n      return tempVar3;\n    }\n    if (tempVar3 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  tempVar3 = tempVar3 >> 0x18;\n  shiftedInput2 = shiftedInput2 >> 0x18;\n  tempVar5 = shiftedInput2 - tempVar3;\n  condition = tempVar5 != 0;\n  tempVar4 = tempVar3;\n  if (condition && tempVar3 <= shiftedInput2) {\n    tempVar4 = tempVar3 + tempVar5;\n  }\n  if (condition && tempVar3 <= shiftedInput2) {\n    input2 = input2 ^ input1;\n  }\n  if (condition && tempVar3 <= shiftedInput2) {\n    input1 = input1 ^ input2;\n  }\n  if (condition && tempVar3 <= shiftedInput2) {\n    input2 = input2 ^ input1;\n  }\n  if (shiftedInput2 < tempVar3) {\n    tempVar5 = -tempVar5;\n  }\n  if (0x19 < tempVar5) {\n    return input1;\n  }\n  tempVar3 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    tempVar3 = -tempVar3;\n  }\n  tempVar2 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    tempVar2 = -tempVar2;\n  }\n  if (tempVar4 == tempVar5) {\n    tempVar2 = tempVar2 ^ 0x800000;\n    if (tempVar4 == 0) {\n      tempVar3 = tempVar3 ^ 0x800000;\n      tempVar4 = 1;\n    }\n    else {\n      tempVar5 = tempVar5 - 1;\n    }\n  }\n  tempVar3 = tempVar3 + ((int)tempVar2 >> (tempVar5 & 0xff));\n  tempVar2 = tempVar2 << (0x20 - tempVar5 & 0xff);\n  input1 = tempVar3 & 0x80000000;\n  if ((int)tempVar3 < 0) {\n    condition = tempVar2 != 0;\n    tempVar2 = -tempVar2;\n    tempVar3 = -tempVar3 - (uint)condition;\n  }\n  if (tempVar3 < 0x800000) {\n    tempVar5 = tempVar2 & 0x80000000;\n    tempVar2 = tempVar2 << 1;\n    tempVar3 = tempVar3 * 2 + (uint)(tempVar5 != 0);\n    tempVar5 = tempVar4 - 2;\n    if ((tempVar3 & 0x800000) == 0) {\n      tempVar6 = count_leading_zeroes(tempVar3);\n      tempVar4 = tempVar6 - 8;\n      tempVar3 = tempVar3 << (tempVar4 & 0xff);\n      if ((int)tempVar5 < (int)tempVar4) {\n        tempVar3 = tempVar3 >> (-(tempVar5 - tempVar4) & 0xff);\n      }\n      else {\n        tempVar3 = tempVar3 + (tempVar5 - tempVar4) * 0x800000;\n      }\n      return tempVar3 | input1;\n    }\n  }\n  else {\n    tempVar5 = tempVar4 - 1;\n    if (0xffffff < tempVar3) {\n      tempVar5 = tempVar3 & 1;\n      tempVar3 = tempVar3 >> 1;\n      tempVar2 = (uint)(tempVar5 != 0) << 0x1f | tempVar2 >> 1;\n      tempVar5 = tempVar4;\n      if (0xfd < tempVar4) goto LAB_08000c12;\n    }\n  }\n  tempVar3 = tempVar3 + tempVar5 * 0x800000 + (uint)(0x7fffffff < tempVar2);\n  if (tempVar2 == 0x80000000) {\n    tempVar3 = tempVar3 & 0xfffffffe;\n  }\n  return tempVar3 | input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000adc",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08004a84",
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0"
            ],
            "imported": false,
            "current_name": "process_floating_point_08000adc"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "swap_parameters_08000ffc",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "code": "\nvoid swap_parameters_08000ffc(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  combine_parameters_08001004(second_parameter,first_parameter);\n  return;\n}\n\n",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "imported": false,
            "current_name": "swap_parameters_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "process_data_080016f4",
                "param_1": "data_pointer",
                "param_2": "threshold",
                "iVar1": "initial_value",
                "iVar2": "current_value"
            },
            "code": "\nundefined4 process_data_080016f4(int *data_pointer,uint threshold)\n\n{\n  int initial_value;\n  int current_value;\n  \n  initial_value = get_undefined4_value_0800115c();\n  while( true ) {\n    current_value = *data_pointer;\n    if ((*(uint *)(current_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_value + 0x14) << 0x1b < 0) break;\n    if ((threshold == 0) || (current_value = get_undefined4_value_0800115c(), threshold < (uint)(current_value - initial_value))) {\n      data_pointer[0xe] = data_pointer[0xe] | 0x20;\n      *(undefined *)((int)data_pointer + 0x35) = 0x20;\n      *(undefined *)(data_pointer + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_value + 0x14) = *(uint *)(current_value + 0x14) & 0xffffffef;\n  data_pointer[0xe] = 0;\n  *(undefined *)(data_pointer + 0xd) = 0;\n  *(undefined *)((int)data_pointer + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "called": [
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "process_data_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "update_registers_080025a4",
                "param_1": "register_array",
                "param_2": "input_values",
                "uVar1": "new_value_1",
                "uVar2": "result",
                "iVar3": "register_base",
                "uVar4": "new_value_0"
            },
            "code": "\nundefined4 update_registers_080025a4(int *register_array,uint *input_values)\n\n{\n  uint new_value_1;\n  undefined4 result;\n  int register_base;\n  uint new_value_0;\n  \n  result = 2;\n  if (*(char *)(register_array + 0xe) != '\\x01') {\n    *(undefined *)((int)register_array + 0x39) = 2;\n    register_base = *register_array;\n    new_value_0 = *input_values;\n    new_value_1 = input_values[1];\n    *(uint *)(register_base + 4) = *(uint *)(register_base + 4) & 0xffffff8f;\n    *(uint *)(register_base + 4) = *(uint *)(register_base + 4) | new_value_0;\n    *(uint *)(register_base + 8) = *(uint *)(register_base + 8) & 0xffffff7f;\n    *(uint *)(register_base + 8) = *(uint *)(register_base + 8) | new_value_1;\n    *(undefined *)((int)register_array + 0x39) = 1;\n    result = 0;\n    *(undefined *)(register_array + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025a4",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_registers_080025a4"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "calculate_shifted_value_08002220",
                "uVar1": "leading_zero_count"
            },
            "code": "\nuint calculate_shifted_value_08002220(void)\n\n{\n  uint leading_zero_count;\n  \n  leading_zero_count = count_leading_zeroes(0xe00000);\n  return *(uint *)PTR_DAT_0800224c >>\n         PTR_DAT_08002248[(*(uint *)(DAT_08002244 + 4) & 0x700) >> (leading_zero_count & 0xff)];\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08002220"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "calculate_result_08003034",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_c": "processed_data"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nuint calculate_result_08003034(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 processed_data;\n  \n  processed_data = input4;\n  process_and_handle_data_080040b8(0xee,0,&processed_data,3,PTR_s____Src_MS5611_c_08003064,0x8c,input3);\n  return (uint)CONCAT12((undefined)processed_data,CONCAT11(processed_data._1_1_,processed_data._2_1_));\n}\n\n",
            "called": [
                "FUN_080040b8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003034",
            "calling": [
                "FUN_0800411c"
            ],
            "imported": false,
            "current_name": "calculate_result_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "configure_device_08004e7c",
                "param_1": "device_ptr",
                "local_18": "pin_mode",
                "local_14": "pin_state",
                "local_10": "unused_var",
                "local_c": "pin_type"
            },
            "code": "\nvoid configure_device_08004e7c(int *device_ptr)\n\n{\n  undefined4 pin_mode;\n  undefined4 pin_state;\n  undefined4 unused_var;\n  undefined4 pin_type;\n  \n  if (*device_ptr == DAT_08004edc) {\n    *(uint *)(DAT_08004edc + 0xd818) = *(uint *)(DAT_08004edc + 0xd818) | 0x4000;\n    pin_mode = 0x200;\n    pin_state = 2;\n    pin_type = 3;\n    configure_pins_08001264(DAT_08004ee0,&pin_mode);\n    pin_mode = 0x400;\n    pin_state = 0;\n    unused_var = 0;\n    configure_pins_08001264(DAT_08004ee0,&pin_mode);\n    bitwise_operation_08001194(0x25,0,0);\n    set_bit_in_array_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08001194",
                "FUN_080011fc",
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "FUN_08002724"
            ],
            "imported": false,
            "current_name": "configure_device_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "process_input_data_08001530",
                "param_1": "input_data_ptr",
                "param_2": "mask_value1",
                "param_3": "mask_value2",
                "param_4": "processing_mode",
                "param_5": "max_iterations",
                "iVar1": "result1",
                "iVar2": "temp_value",
                "puVar3": "current_ptr",
                "ppuVar4": "temp_ptr",
                "uVar5": "temp_mask1",
                "uVar6": "temp_mask2"
            },
            "code": "\nint process_input_data_08001530(uint **input_data_ptr,uint mask_value1,uint mask_value2,int processing_mode,uint max_iterations)\n\n{\n  int result1;\n  int temp_value;\n  uint *current_ptr;\n  uint **temp_ptr;\n  uint temp_mask1;\n  uint temp_mask2;\n  \n  **input_data_ptr = **input_data_ptr | 0x100;\n  temp_ptr = input_data_ptr;\n  temp_mask1 = mask_value1;\n  temp_mask2 = mask_value2;\n  result1 = get_undefined4_value_0800115c();\n  do {\n    current_ptr = *input_data_ptr;\n    do {\n      if ((int)(current_ptr[5] << 0x1f) < 0) {\n        current_ptr[4] = mask_value1 & 0xfe;\n        result1 = process_data_08001460(input_data_ptr,DAT_080015e4,max_iterations,current_ptr,temp_ptr,temp_mask1,temp_mask2);\n        if (result1 == 0) {\n          result1 = process_data_080014e2(input_data_ptr,max_iterations,(*input_data_ptr)[5],(*input_data_ptr)[6]);\n          if (result1 == 0) {\n            current_ptr = *input_data_ptr;\n            if (processing_mode == 1) {\nLAB_080015ca:\n              current_ptr[4] = mask_value2 & 0xff;\n              return result1;\n            }\n            current_ptr[4] = mask_value2 >> 8;\n            result1 = process_data_080014e2(input_data_ptr,max_iterations);\n            if (result1 == 0) {\n              current_ptr = *input_data_ptr;\n              goto LAB_080015ca;\n            }\n          }\n          if (input_data_ptr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **input_data_ptr = **input_data_ptr | 0x200;\n        }\n        else if (input_data_ptr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (max_iterations == 0xffffffff);\n    if ((max_iterations == 0) || (temp_value = get_undefined4_value_0800115c(), max_iterations < (uint)(temp_value - result1))) {\n      *(undefined *)((int)input_data_ptr + 0x35) = 0x20;\n      *(undefined *)(input_data_ptr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001530",
            "calling": [
                "FUN_08001828"
            ],
            "imported": false,
            "current_name": "process_input_data_08001530"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "set_global_variable_08003314",
                "param_1": "input_value"
            },
            "code": "\nvoid set_global_variable_08003314(undefined4 input_value)\n\n{\n  *(undefined4 *)PTR_DAT_0800331c = input_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "FUN_08002ea0"
            ],
            "imported": false,
            "current_name": "set_global_variable_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "process_data_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "puVar1": "data_pointer",
                "iVar2": "comparison_result",
                "puVar3": "output_data_pointer",
                "piVar4": "error_data_pointer",
                "uVar5": "initial_result",
                "uVar6": "temp_result",
                "local_48": "flag",
                "local_44": "data_ptr",
                "local_40": "input_1_copy",
                "uStack_3c": "input_2_copy",
                "local_38": "input_1_duplicate",
                "uStack_34": "input_2_duplicate",
                "local_30": "final_result",
                "local_28": "condition_result"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nundefined8 process_data_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  undefined *data_pointer;\n  int comparison_result;\n  undefined4 *output_data_pointer;\n  int *error_data_pointer;\n  undefined8 initial_result;\n  undefined8 temp_result;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_duplicate;\n  undefined4 input_2_duplicate;\n  undefined8 final_result;\n  int condition_result;\n  \n  initial_result = complex_calculation_08005c70();\n  data_pointer = PTR_DAT_080058f8;\n  if (*PTR_DAT_080058f8 == -1) {\n    return initial_result;\n  }\n  condition_result = check_conditions_08000a04(input_1,input_2,input_1,input_2);\n  if (condition_result != 0) {\n    return initial_result;\n  }\n  temp_result = do_nothing_0800708c(input_1,input_2);\n  comparison_result = is_comparison_equal_080009f0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,DAT_080058ec);\n  if (comparison_result == 0) {\n    return initial_result;\n  }\n  flag = 1;\n  data_ptr = PTR_DAT_080058f0;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_duplicate = input_1;\n  input_2_duplicate = input_2;\n  final_result = shift_and_return_080070a4(PTR_DAT_080058f4);\n  if (*data_pointer != '\\x02') {\n    comparison_result = return_zero_0800709e(&flag);\n    if (comparison_result != 0) goto LAB_080058d0;\n  }\n  output_data_pointer = (undefined4 *)get_data_from_pointer_080072ac();\n  *output_data_pointer = 0x21;\nLAB_080058d0:\n  if (condition_result != 0) {\n    error_data_pointer = (int *)get_data_from_pointer_080072ac();\n    *error_data_pointer = condition_result;\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_08000a04",
                "FUN_080072ac",
                "FUN_0800709e",
                "FUN_080070a4",
                "FUN_0800708c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "process_data_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "floating_point_operation_08000168",
                "param_1": "mantissa1",
                "param_2": "exponent1",
                "param_3": "mantissa2",
                "param_4": "exponent2",
                "iVar1": "tempVar1",
                "bVar2": "tempByte",
                "uVar3": "tempUint1",
                "uVar4": "tempUint2",
                "uVar5": "tempUint3",
                "uVar6": "exponentXor",
                "uVar7": "exponent1Masked",
                "iVar8": "tempVar2",
                "uVar9": "exponent1Shifted",
                "uVar10": "tempUint4",
                "uVar11": "exponentDiff",
                "uVar12": "mantissaShift",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "code": "\nulonglong floatingPointOperation_08000168(uint mantissa1,uint exponent1,uint mantissa2,uint exponent2)\n\n{\n  int tempVar1;\n  byte tempByte;\n  uint tempUint1;\n  uint tempUint2;\n  uint tempUint3;\n  uint exponentXor;\n  uint exponent1Masked;\n  int tempVar2;\n  uint exponent1Shifted;\n  uint tempUint4;\n  uint exponentDiff;\n  uint mantissaShift;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  exponentXor = exponent2 ^ 0x80000000;\n  exponent1Shifted = exponent1 << 1;\n  exponent2 = exponent2 << 1;\n  flag1 = ((exponent1 ^ exponentXor) & 0x7fffffff) == 0;\n  flag2 = flag1 && mantissa1 == mantissa2;\n  if (!flag1 || mantissa1 != mantissa2) {\n    flag2 = (exponent1Shifted | mantissa1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (exponent2 | mantissa2) == 0;\n  }\n  tempVar2 = (int)exponent1Shifted >> 0x15;\n  if (!flag2) {\n    flag2 = tempVar2 == -1;\n  }\n  tempVar1 = (int)exponent2 >> 0x15;\n  if (!flag2) {\n    flag2 = tempVar1 == -1;\n  }\n  if (flag2) {\n    if (tempVar2 == -1 || tempVar1 == -1) {\n      exponent1Shifted = exponentXor;\n      exponentDiff = mantissa2;\n      if (tempVar2 == -1) {\n        exponent1Shifted = exponent1;\n        exponentDiff = mantissa1;\n      }\n      if (tempVar2 != -1 || tempVar1 != -1) {\n        mantissa2 = exponentDiff;\n        exponentXor = exponent1Shifted;\n      }\n      flag2 = (exponentDiff | exponent1Shifted << 0xc) == 0;\n      if (flag2) {\n        flag2 = (mantissa2 | exponentXor << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = exponent1Shifted == exponentXor;\n      }\n      if (!flag2) {\n        exponent1Shifted = exponent1Shifted | 0x80000;\n      }\n      return CONCAT44(exponent1Shifted,exponentDiff);\n    }\n    if (((exponent1 ^ exponentXor) & 0x7fffffff) != 0 || mantissa1 != mantissa2) {\n      if ((exponent1Shifted | mantissa1) == 0) {\n        mantissa1 = mantissa2;\n        exponent1 = exponentXor;\n      }\n      return CONCAT44(exponent1,mantissa1);\n    }\n    if (exponent1 != exponentXor) {\n      return 0;\n    }\n    if (exponent1Shifted >> 0x15 == 0) {\n      flag2 = (mantissa1 & 0x80000000) != 0;\n      exponentXor = exponent1 * 2 + (uint)flag2;\n      if (CARRY4(exponent1,exponent1) || CARRY4(exponent1 * 2,(uint)flag2)) {\n        exponentXor = exponentXor | 0x80000000;\n      }\n      return CONCAT44(exponentXor,mantissa1 << 1);\n    }\n    if (exponent1Shifted < 0xffc00000) {\n      return CONCAT44(exponent1 + 0x100000,mantissa1);\n    }\n    exponent1 = exponent1 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(exponent1 | 0x7ff00000) << 0x20;\n  }\n  exponent1Shifted = exponent1Shifted >> 0x15;\n  exponent2 = exponent2 >> 0x15;\n  exponentDiff = exponent2 - exponent1Shifted;\n  flag2 = exponentDiff != 0;\n  if (exponent2 < exponent1Shifted) {\n    exponentDiff = -exponentDiff;\n  }\n  tempUint4 = mantissa1;\n  exponent1Masked = exponent1;\n  if (flag2 && exponent1Shifted <= exponent2) {\n    exponent1Shifted = exponent1Shifted + exponentDiff;\n    tempUint4 = mantissa2;\n    exponent1Masked = exponentXor;\n    mantissa2 = mantissa1;\n    exponentXor = exponent1;\n  }\n  if (0x36 < exponentDiff) {\n    return CONCAT44(exponent1Masked,tempUint4);\n  }\n  tempUint2 = exponent1Masked & 0xfffff | 0x100000;\n  if ((exponent1Masked & 0x80000000) != 0) {\n    flag2 = tempUint4 != 0;\n    tempUint4 = -tempUint4;\n    tempUint2 = -tempUint2 - (uint)flag2;\n  }\n  exponent1Masked = exponentXor & 0xfffff | 0x100000;\n  if ((exponentXor & 0x80000000) != 0) {\n    flag2 = mantissa2 != 0;\n    mantissa2 = -mantissa2;\n    exponent1Masked = -exponent1Masked - (uint)flag2;\n  }\n  if (exponent1Shifted == exponentDiff) {\n    exponent1Masked = exponent1Masked ^ 0x100000;\n    if (exponent1Shifted == 0) {\n      tempUint2 = tempUint2 ^ 0x100000;\n      exponent1Shifted = 1;\n    }\n    else {\n      exponentDiff = exponentDiff - 1;\n    }\n  }\n  exponentXor = -exponentDiff + 0x20;\n  if ((int)exponentDiff < 0x21) {\n    mantissaShift = mantissa2 << (exponentXor & 0xff);\n    mantissa2 = mantissa2 >> (exponentDiff & 0xff);\n    tempUint1 = tempUint4 + mantissa2;\n    tempUint3 = exponent1Masked << (exponentXor & 0xff);\n    exponentXor = tempUint1 + tempUint3;\n    tempUint2 = tempUint2 + CARRY4(tempUint4,mantissa2) + ((int)exponent1Masked >> (exponentDiff & 0xff)) +\n            (uint)CARRY4(tempUint1,tempUint3);\n  }\n  else {\n    mantissaShift = exponent1Masked << (-exponentDiff + 0x40 & 0xff);\n    if (mantissa2 != 0) {\n      mantissaShift = mantissaShift | 2;\n    }\n    exponent1Masked = (int)exponent1Masked >> (exponentDiff - 0x20 & 0xff);\n    exponentXor = tempUint4 + exponent1Masked;\n    tempUint2 = tempUint2 + ((int)exponent1Masked >> 0x1f) + (uint)CARRY4(tempUint4,exponent1Masked);\n  }\n  exponent1 = tempUint2 & 0x80000000;\n  exponentDiff = tempUint2;\n  if ((int)tempUint2 < 0) {\n    flag2 = mantissaShift == 0;\n    mantissaShift = -mantissaShift;\n    exponentDiff = -exponentXor;\n    exponentXor = -(uint)!flag2 - exponentXor;\n    exponentDiff = -(uint)(flag2 <= exponentDiff) - tempUint2;\n  }\n  if (0xfffff < exponentDiff) {\n    tempUint4 = exponent1Shifted - 1;\n    if (0x1fffff < exponentDiff) {\n      tempUint4 = exponentDiff & 1;\n      exponentDiff = exponentDiff >> 1;\n      tempByte = (byte)exponentXor;\n      exponentXor = (uint)(tempUint4 != 0) << 0x1f | exponentXor >> 1;\n      mantissaShift = (uint)(tempByte & 1) << 0x1f | mantissaShift >> 1;\n      tempUint4 = exponent1Shifted;\n      if (0xffbfffff < exponent1Shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < mantissaShift;\n    if (mantissaShift == 0x80000000) {\n      flag2 = (exponentXor & 1) != 0;\n    }\n    return CONCAT44(exponentDiff + tempUint4 * 0x100000 + (uint)CARRY4(exponentXor,(uint)flag2) | exponent1,\n                    exponentXor + flag2);\n  }\n  flag1 = (mantissaShift & 0x80000000) != 0;\n  mantissaShift = mantissaShift << 1;\n  tempUint4 = exponentXor * 2;\n  flag2 = CARRY4(exponentXor,exponentXor);\n  exponentXor = exponentXor * 2 + (uint)flag1;\n  exponentDiff = exponentDiff * 2 + (uint)(flag2 || CARRY4(tempUint4,(uint)flag1));\n  tempUint4 = exponent1Shifted - 2;\n  if ((exponentDiff & 0x100000) != 0) goto LAB_08000278;\n  exponent1Masked = exponentXor;\n  exponent1Shifted = exponentDiff;\n  if (exponentDiff == 0) {\n    exponent1Masked = 0;\n    exponent1Shifted = exponentXor;\n  }\n  tempVar2 = count_leading_zeroes(exponent1Shifted);\n  if (exponentDiff == 0) {\n    tempVar2 = tempVar2 + 0x20;\n  }\n  exponentDiff = tempVar2 - 0xb;\n  flag3 = SBORROW4(exponentDiff,0x20);\n  exponentXor = tempVar2 - 0x2b;\n  flag2 = (int)exponentXor < 0;\n  flag1 = exponentXor == 0;\n  if ((int)exponentDiff < 0x20) {\n    flag3 = SCARRY4(exponentXor,0xc);\n    tempVar2 = tempVar2 + -0x1f;\n    flag2 = tempVar2 < 0;\n    flag1 = tempVar2 == 0;\n    exponentXor = exponentDiff;\n    if (!flag1 && flag2 == flag3) {\n      exponent1Masked = exponent1Shifted << (exponentDiff & 0xff);\n      exponent1Shifted = exponent1Shifted >> (0xcU - tempVar2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    mantissaShift = 0x20 - exponentXor;\n  }\n  exponent1Shifted = exponent1Shifted << (exponentXor & 0xff);\n  if (flag1 || flag2 != flag3) {\n    exponent1Shifted = exponent1Shifted | exponent1Masked >> (mantissaShift & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    exponent1Masked = exponent1Masked << (exponentXor & 0xff);\n  }\nLAB_080002f0:\n  if ((int)exponentDiff <= (int)tempUint4) {\n    return CONCAT44(exponent1Shifted + (tempUint4 - exponentDiff) * 0x100000 | exponent1,exponent1Masked);\n  }\n  exponentXor = ~(tempUint4 - exponentDiff);\n  if ((int)exponentXor < 0x1f) {\n    tempVar2 = exponentXor - 0x13;\n    if (tempVar2 != 0 && tempVar2 < 0 == SCARRY4(exponentXor - 0x1f,0xc)) {\n      return CONCAT44(tempUint2,exponent1Masked >> (0x20 - (0xcU - tempVar2) & 0xff) | exponent1Shifted << (0xcU - tempVar2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    exponentXor = exponentXor + 1;\n    return CONCAT44(exponent1 | exponent1Shifted >> (exponentXor & 0xff),\n                    exponent1Masked >> (exponentXor & 0xff) | exponent1Shifted << (0x20 - exponentXor & 0xff));\n  }\n  return CONCAT44(tempUint2,exponent1Shifted >> (exponentXor - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000168",
            "calling": [
                "FUN_08005c70",
                "FUN_0800411c",
                "FUN_08006070",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08006d68",
                "FUN_080070b0"
            ],
            "imported": false,
            "current_name": "floating_point_operation_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "check_combination_validity_08001014",
                "in_ZR": "combination_status"
            },
            "code": "\nbool check_combination_validity_08001014(void)\n\n{\n  char combination_status;\n  \n  combine_parameters_08001004();\n  return combination_status != '\\0';\n}\n\n",
            "called": [
                "FUN_08001004"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "FUN_08003330"
            ],
            "imported": false,
            "current_name": "check_combination_validity_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_modified_result_080071c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "exponent",
                "param_4": "undefined_param",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "result"
            },
            "code": "\nulonglong calculate_modified_result_080071c0(uint input1,uint input2,int exponent,undefined4 undefined_param)\n\n{\n  uint tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  ulonglong result;\n  \n  result = CONCAT44(input2,input1);\n  tempVar1 = (input2 << 1) >> 0x15;\n  if (tempVar1 == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return result;\n    }\n    result = calculate_result_080004d0(input1,input2,0,DAT_08007290);\n    tempVar3 = DAT_08007280;\n    tempVar4 = DAT_08007284;\n    if (exponent < DAT_08007294) goto LAB_0800722e;\n    tempVar1 = ((uint)((int)(result >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (tempVar1 == 0x7ff) {\n    result = floating_point_addition_0800016c(input1,input2,input1,input2,undefined_param);\n    return result;\n  }\n  tempVar5 = (uint)(result >> 0x20);\n  tempVar2 = tempVar1 + exponent;\n  if (tempVar2 < 0x7ff) {\n    if (0 < tempVar2) {\n      return result & 0xffffffff | (ulonglong)(tempVar5 & 0x800fffff | tempVar2 * 0x100000) << 0x20;\n    }\n    if (tempVar2 + 0x35 < 0 == SCARRY4(tempVar2,0x35)) {\n      result = result & 0xffffffff |\n              (ulonglong)(tempVar5 & 0x800fffff | (tempVar2 + 0x36) * 0x100000) << 0x20;\n      tempVar3 = 0;\n      tempVar4 = DAT_08007298;\n      goto LAB_0800722e;\n    }\n    if (exponent < 0xc351) {\n      result = do_nothing_0800729c(DAT_08007280,DAT_08007284,(int)result,tempVar5);\n      tempVar3 = DAT_08007280;\n      tempVar4 = DAT_08007284;\n      goto LAB_0800722e;\n    }\n  }\n  result = do_nothing_0800729c(DAT_08007288,DAT_0800728c,(int)result,tempVar5);\n  tempVar3 = DAT_08007288;\n  tempVar4 = DAT_0800728c;\nLAB_0800722e:\n  result = calculate_result_080004d0((int)result,(int)(result >> 0x20),tempVar3,tempVar4);\n  return result;\n}\n\n",
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "FUN_08006228"
            ],
            "imported": false,
            "current_name": "calculate_modified_result_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_char_in_range_08005614",
                "param_1": "str",
                "param_2": "target_char",
                "param_3": "range_length",
                "pcVar1": "current_char_ptr",
                "pcVar2": "previous_char_ptr"
            },
            "code": "\nchar * find_char_in_range_08005614(char *str,char target_char,int range_length)\n\n{\n  char *current_char_ptr;\n  char *previous_char_ptr;\n  \n  current_char_ptr = str;\n  do {\n    previous_char_ptr = current_char_ptr;\n    if (previous_char_ptr == str + range_length) {\n      return (char *)0x0;\n    }\n    current_char_ptr = previous_char_ptr + 1;\n  } while (*previous_char_ptr != target_char);\n  return previous_char_ptr;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "FUN_080050fc",
                "FUN_080053d4"
            ],
            "imported": false,
            "current_name": "find_char_in_range_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "floating_point_operation_08000724",
                "param_1": "input_1_low",
                "param_2": "input_1_high",
                "param_3": "input_2_low",
                "param_4": "input_2_high",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "result_high",
                "uVar9": "result_high_temp",
                "uVar10": "intermediate_result1",
                "uVar11": "intermediate_result2",
                "uVar12": "intermediate_result3",
                "uVar13": "intermediate_result4",
                "iVar8": "exp_difference",
                "unaff_r5": "input_2_exp",
                "uVar17": "result",
                "bVar14": "comparison_flag1",
                "bVar15": "comparison_flag2",
                "bVar16": "comparison_flag3"
            },
            "code": "\nulonglong floating_point_operation_08000724(undefined4 input_1_low,uint input_1_high,uint input_2_low,uint input_2_high)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint result_high;\n  int exp_difference;\n  uint result_high_temp;\n  uint input_2_exp;\n  uint intermediate_result1;\n  uint intermediate_result2;\n  uint intermediate_result3;\n  uint intermediate_result4;\n  bool comparison_flag1;\n  bool comparison_flag2;\n  bool comparison_flag3;\n  ulonglong result;\n  \n  result = CONCAT44(input_1_high,input_1_low);\n  intermediate_result4 = 0x7ff;\n  result_high = input_1_high >> 0x14 & 0x7ff;\n  comparison_flag1 = result_high == 0;\n  if (!comparison_flag1) {\n    input_2_exp = input_2_high >> 0x14 & 0x7ff;\n    comparison_flag1 = input_2_exp == 0;\n  }\n  if (!comparison_flag1) {\n    comparison_flag1 = result_high == 0x7ff;\n  }\n  if (!comparison_flag1) {\n    comparison_flag1 = input_2_exp == 0x7ff;\n  }\n  if (comparison_flag1) {\n    result = calculate_result_08000892();\n  }\n  result_high_temp = (uint)(result >> 0x20);\n  intermediate_result2 = (uint)result;\n  exp_difference = result_high - input_2_exp;\n  if ((input_2_low | input_2_high << 0xc) == 0) {\n    result_high = (result_high_temp ^ input_2_high) & 0x80000000 | result_high_temp & 0xfffff;\n    comparison_flag3 = SCARRY4(exp_difference,intermediate_result4 >> 1);\n    result_high_temp = exp_difference + (intermediate_result4 >> 1);\n    comparison_flag1 = (int)result_high_temp < 0;\n    comparison_flag2 = result_high_temp == 0;\n    if (!comparison_flag2 && comparison_flag1 == comparison_flag3) {\n      comparison_flag3 = SBORROW4(intermediate_result4,result_high_temp);\n      comparison_flag1 = (int)(intermediate_result4 - result_high_temp) < 0;\n      comparison_flag2 = intermediate_result4 == result_high_temp;\n    }\n    if (!comparison_flag2 && comparison_flag1 == comparison_flag3) {\n      result_high = result_high | result_high_temp * 0x100000;\n    }\n    if (!comparison_flag2 && comparison_flag1 == comparison_flag3) {\n      return result & 0xffffffff | (ulonglong)result_high << 0x20;\n    }\n    result_high = result_high | 0x100000;\n    intermediate_result4 = 0;\n    comparison_flag2 = SBORROW4(result_high_temp,1);\n    result_high_temp = result_high_temp - 1;\n    comparison_flag1 = result_high_temp == 0;\n    temp_var3 = result_high_temp;\n  }\n  else {\n    temp_var3 = (input_2_high << 0xc) >> 4 | 0x10000000 | input_2_low >> 0x18;\n    intermediate_result4 = input_2_low << 8;\n    intermediate_result1 = (result_high_temp << 0xc) >> 4 | 0x10000000 | intermediate_result2 >> 0x18;\n    intermediate_result2 = intermediate_result2 * 0x100;\n    result_high = (result_high_temp ^ input_2_high) & 0x80000000;\n    comparison_flag1 = temp_var3 <= intermediate_result1;\n    if (intermediate_result1 == temp_var3) {\n      comparison_flag1 = intermediate_result4 <= intermediate_result2;\n    }\n    exp_difference = exp_difference + (uint)comparison_flag1;\n    result_high_temp = exp_difference + 0x3fd;\n    if (comparison_flag1 == false) {\n      temp_var3 = temp_var3 >> 1;\n      intermediate_result4 = (uint)((input_2_low >> 0x18 & 1) != 0) << 0x1f | intermediate_result4 >> 1;\n    }\n    intermediate_result3 = intermediate_result2 - intermediate_result4;\n    intermediate_result1 = (intermediate_result1 - temp_var3) - (uint)(intermediate_result2 < intermediate_result4);\n    temp_var4 = temp_var3 >> 1;\n    temp_var1 = (uint)((temp_var3 & 1) != 0) << 0x1f | intermediate_result4 >> 1;\n    intermediate_result2 = 0x100000;\n    temp_var3 = 0x80000;\n    while( true ) {\n      comparison_flag1 = temp_var1 <= intermediate_result3;\n      if (temp_var4 < intermediate_result1 || intermediate_result1 - temp_var4 < (uint)comparison_flag1) {\n        intermediate_result3 = intermediate_result3 - temp_var1;\n        intermediate_result2 = intermediate_result2 | temp_var3;\n        intermediate_result1 = (intermediate_result1 - temp_var4) - (uint)!comparison_flag1;\n      }\n      temp_var5 = temp_var4 >> 1;\n      temp_var1 = (uint)((temp_var4 & 1) != 0) << 0x1f | temp_var1 >> 1;\n      comparison_flag2 = temp_var1 <= intermediate_result3;\n      comparison_flag1 = intermediate_result1 - temp_var5 < (uint)comparison_flag2;\n      intermediate_result4 = intermediate_result1;\n      if (temp_var5 < intermediate_result1 || comparison_flag1) {\n        intermediate_result3 = intermediate_result3 - temp_var1;\n        intermediate_result4 = (intermediate_result1 - temp_var5) - (uint)!comparison_flag2;\n      }\n      if (temp_var5 < intermediate_result1 || comparison_flag1) {\n        intermediate_result2 = intermediate_result2 | temp_var3 >> 1;\n      }\n      intermediate_result1 = temp_var4 >> 2;\n      temp_var2 = (uint)((temp_var5 & 1) != 0) << 0x1f | temp_var1 >> 1;\n      comparison_flag2 = temp_var2 <= intermediate_result3;\n      comparison_flag1 = intermediate_result4 - intermediate_result1 < (uint)comparison_flag2;\n      temp_var5 = intermediate_result4;\n      if (intermediate_result1 < intermediate_result4 || comparison_flag1) {\n        intermediate_result3 = intermediate_result3 - temp_var2;\n        temp_var5 = (intermediate_result4 - intermediate_result1) - (uint)!comparison_flag2;\n      }\n      if (intermediate_result1 < intermediate_result4 || comparison_flag1) {\n        intermediate_result2 = intermediate_result2 | temp_var3 >> 2;\n      }\n      temp_var6 = temp_var4 >> 3;\n      temp_var1 = (uint)((intermediate_result1 & 1) != 0) << 0x1f | temp_var2 >> 1;\n      comparison_flag2 = temp_var1 <= intermediate_result3;\n      comparison_flag1 = temp_var5 - temp_var6 < (uint)comparison_flag2;\n      intermediate_result1 = temp_var5;\n      if (temp_var6 < temp_var5 || comparison_flag1) {\n        intermediate_result3 = intermediate_result3 - temp_var1;\n        intermediate_result1 = (temp_var5 - temp_var6) - (uint)!comparison_flag2;\n      }\n      if (temp_var6 < temp_var5 || comparison_flag1) {\n        intermediate_result2 = intermediate_result2 | temp_var3 >> 3;\n      }\n      intermediate_result4 = intermediate_result1 | intermediate_result3;\n      if (intermediate_result4 == 0) break;\n      intermediate_result1 = intermediate_result1 << 4 | intermediate_result3 >> 0x1c;\n      intermediate_result3 = intermediate_result3 << 4;\n      temp_var4 = temp_var4 & 0xfffffff8 | temp_var1 >> 0x1d;\n      temp_var1 = (temp_var2 >> 1) << 3;\n      temp_var3 = temp_var3 >> 4;\n      if (temp_var3 == 0) {\n        temp_var6 = temp_var4;\n        if ((result_high & 0x100000) != 0) goto LAB_08000842;\n        result_high = result_high | intermediate_result2;\n        intermediate_result2 = 0;\n        temp_var3 = 0x80000000;\n      }\n    }\n    if ((result_high & 0x100000) == 0) {\n      result_high = result_high | intermediate_result2;\n      intermediate_result2 = 0;\n    }\nLAB_08000842:\n    comparison_flag3 = 0xfc < result_high_temp;\n    comparison_flag2 = SBORROW4(result_high_temp,0xfd);\n    temp_var4 = exp_difference + 0x300;\n    comparison_flag1 = temp_var4 == 0;\n    temp_var3 = temp_var4;\n    if (comparison_flag3 && !comparison_flag1) {\n      comparison_flag3 = 0x6ff < temp_var4;\n      comparison_flag2 = SBORROW4(temp_var4,0x700);\n      temp_var3 = exp_difference - 0x400;\n      comparison_flag1 = temp_var4 == 0x700;\n    }\n    if (!comparison_flag3 || comparison_flag1) {\n      comparison_flag1 = temp_var6 <= intermediate_result1;\n      if (intermediate_result1 == temp_var6) {\n        comparison_flag1 = temp_var1 <= intermediate_result3;\n      }\n      if (intermediate_result1 == temp_var6 && intermediate_result3 == temp_var1) {\n        comparison_flag1 = (intermediate_result2 & 1) != 0;\n      }\n      return CONCAT44(result_high + result_high_temp * 0x100000 + (uint)CARRY4(intermediate_result2,(uint)comparison_flag1),intermediate_result2 + comparison_flag1);\n    }\n  }\n  if (!comparison_flag1 && (int)temp_var3 < 0 == comparison_flag2) {\n    return (ulonglong)(result_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  comparison_flag3 = SCARRY4(result_high_temp,0x36);\n  comparison_flag1 = (int)(result_high_temp + 0x36) < 0;\n  comparison_flag2 = result_high_temp == 0xffffffca;\n  if (comparison_flag2 || comparison_flag1 != comparison_flag3) {\n    intermediate_result2 = 0;\n  }\n  if (comparison_flag2 || comparison_flag1 != comparison_flag3) {\n    result_high = result_high & 0x80000000;\n  }\n  if (comparison_flag2 || comparison_flag1 != comparison_flag3) {\n    return CONCAT44(result_high,intermediate_result2);\n  }\n  temp_var3 = -result_high_temp;\n  intermediate_result1 = temp_var3 - 0x20;\n  if (0x1f < (int)temp_var3) {\n    temp_var3 = intermediate_result2 >> (intermediate_result1 & 0xff) | result_high << (0x20 - intermediate_result1 & 0xff);\n    result_high_temp = (result_high >> (intermediate_result1 & 0xff) & ~((result_high & 0x80000000) >> (intermediate_result1 & 0xff))) -\n            ((int)temp_var3 >> 0x1f);\n    if ((intermediate_result4 | intermediate_result2 << (0x20 - intermediate_result1 & 0xff) | temp_var3 << 1) == 0) {\n      result_high_temp = result_high_temp & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44(result_high,result_high_temp) & 0x80000000ffffffff;\n  }\n  exp_difference = temp_var3 - 0x14;\n  if (exp_difference != 0 && exp_difference < 0 == SCARRY4(intermediate_result1,0xc)) {\n    result_high_temp = 0xc - exp_difference;\n    temp_var3 = intermediate_result2 << (result_high_temp & 0xff);\n    intermediate_result2 = intermediate_result2 >> (0x20 - result_high_temp & 0xff) | result_high << (result_high_temp & 0xff);\n    result_high_temp = intermediate_result2 + -((int)temp_var3 >> 0x1f);\n    if ((intermediate_result4 | temp_var3 << 1) == 0) {\n      result_high_temp = result_high_temp & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44((result_high & 0x80000000) + (uint)CARRY4(intermediate_result2,-((int)temp_var3 >> 0x1f)),result_high_temp);\n  }\n  intermediate_result1 = intermediate_result2 << (result_high_temp + 0x20 & 0xff);\n  intermediate_result2 = intermediate_result2 >> (temp_var3 & 0xff) | result_high << (result_high_temp + 0x20 & 0xff);\n  result_high_temp = intermediate_result2 + -((int)intermediate_result1 >> 0x1f);\n  if ((intermediate_result4 | intermediate_result1 << 1) == 0) {\n    result_high_temp = result_high_temp & ~(intermediate_result1 >> 0x1f);\n  }\n  return CONCAT44((result_high & 0x80000000) +\n                  ((result_high & 0x7fffffff) >> (temp_var3 & 0xff)) +\n                  (uint)CARRY4(intermediate_result2,-((int)intermediate_result1 >> 0x1f)),result_high_temp);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000724",
            "calling": [
                "FUN_08005c70",
                "FUN_08006070",
                "FUN_08003330",
                "FUN_08006228",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006d68"
            ],
            "imported": false,
            "current_name": "floating_point_operation_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "shift_and_return_080070a4"
            },
            "code": "\nlonglong shift_and_return_080070a4(void)\n\n{\n  return (ulonglong)DAT_080070ac << 0x20;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "FUN_08006228",
                "FUN_08005854"
            ],
            "imported": false,
            "current_name": "shift_and_return_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "process_and_return_status_0800407c",
                "param_1": "input_data",
                "param_2": "data_length",
                "param_3": "string_data",
                "param_4": "string_length",
                "iVar1": "communication_result",
                "local_14": "status"
            },
            "code": "\nundefined process_and_return_status_0800407c(undefined4 input_data,undefined4 data_length,undefined4 string_data,undefined4 string_length)\n\n{\n  int communication_result;\n  undefined status [8];\n  \n  status[0] = 0;\n  communication_result = process_communication_08001938(PTR_DAT_080040b4,input_data,data_length,1,status,1,200);\n  if (communication_result != 0) {\n    process_data_and_strings_08004490(string_data,string_length);\n  }\n  return status[0];\n}\n\n",
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "FUN_08002d88",
                "FUN_080040e8",
                "FUN_08002cb0",
                "FUN_08002ad0"
            ],
            "imported": false,
            "current_name": "process_and_return_status_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "process_communication_08001938",
                "param_1": "commController",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "outputBuffer",
                "param_6": "dataLength",
                "param_7": "timeout",
                "puVar1": "tempPointer",
                "iVar2": "currentTime",
                "iVar3": "elapsedTime",
                "puVar4": "controllerRegister",
                "uVar5": "registerValue",
                "puVar6": "nextBufferPosition",
                "bVar7": "isDataPair"
            },
            "code": "\nundefined4\nprocessCommunication_08001938(uint **commController,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n            undefined *outputBuffer,ushort dataLength,uint timeout)\n\n{\n  undefined *tempPointer;\n  int currentTime;\n  int elapsedTime;\n  uint *controllerRegister;\n  uint registerValue;\n  undefined *nextBufferPosition;\n  bool isDataPair;\n  \n  if (*(char *)((int)commController + 0x35) != ' ') {\n    return 2;\n  }\n  if (outputBuffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (dataLength == 0) {\n    return 1;\n  }\n  currentTime = get_undefined4_value_0800115c();\n  while (controllerRegister = *commController, (~controllerRegister[6] & 2) == 0) {\n    elapsedTime = get_undefined4_value_0800115c();\n    if (10000 < (uint)(elapsedTime - currentTime)) {\n      *(undefined *)(commController + 0xd) = 0;\n      *(undefined *)((int)commController + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(commController + 0xd) == '\\x01') {\n    return 2;\n  }\n  registerValue = *controllerRegister;\n  *(undefined *)(commController + 0xd) = 1;\n  *controllerRegister = registerValue & 0xfffff7ff;\n  *(undefined *)((int)commController + 0x35) = 0x22;\n  *(undefined *)((int)commController + 0x36) = 0x40;\n  commController[0xe] = (uint *)0x0;\n  currentTime = process_parameters_080015e8(commController,arg2,arg3,arg4,timeout);\n  if (currentTime != 0) {\n    *(undefined *)(commController + 0xd) = 0;\n    if (commController[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  controllerRegister = *commController;\n  registerValue = *controllerRegister;\n  if (dataLength == 1) {\n    *controllerRegister = registerValue & 0xfffffbff;\n    disableIRQinterrupts();\n    **commController = **commController | 0x200;\n    enableIRQinterrupts();\n    currentTime = process_data_080016f4(commController,timeout);\n    if (currentTime == 0) {\n      *outputBuffer = (char)(*commController)[4];\nLAB_08001ab8:\n      *(undefined *)((int)commController + 0x35) = 0x20;\n      *(undefined *)((int)commController + 0x36) = 0;\n      *(undefined *)(commController + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (commController[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (dataLength == 2) {\n    *controllerRegister = registerValue | 0x800;\n    disableIRQinterrupts();\n    **commController = **commController & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *controllerRegister = registerValue | 0x400;\n    while (3 < dataLength) {\n      currentTime = process_data_080016f4(commController,timeout);\n      if (currentTime != 0) goto LAB_08001a18;\n      *outputBuffer = (char)(*commController)[4];\n      controllerRegister = *commController;\n      isDataPair = (int)(controllerRegister[5] << 0x1d) < 0;\n      if (isDataPair) {\n        controllerRegister = (uint *)controllerRegister[4];\n        nextBufferPosition = outputBuffer + 2;\n        dataLength = dataLength - 2;\n      }\n      else {\n        nextBufferPosition = outputBuffer + 1;\n        dataLength = dataLength - 1;\n      }\n      tempPointer = outputBuffer + 1;\n      outputBuffer = nextBufferPosition;\n      if (isDataPair) {\n        *tempPointer = (char)controllerRegister;\n      }\n    }\n    if (dataLength != 2) {\n      currentTime = get_undefined4_value_0800115c();\n      do {\n        controllerRegister = *commController;\n        do {\n          if ((int)(controllerRegister[5] << 0x1d) < 0) {\n            *controllerRegister = *controllerRegister & 0xfffffbff;\n            disableIRQinterrupts();\n            *outputBuffer = (char)(*commController)[4];\n            currentTime = get_undefined4_value_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (elapsedTime = get_undefined4_value_0800115c(), (uint)(elapsedTime - currentTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  currentTime = get_undefined4_value_0800115c();\n  do {\n    do {\n      if ((int)((*commController)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        controllerRegister = *commController;\n        *controllerRegister = *controllerRegister | 0x200;\n        *outputBuffer = (char)controllerRegister[4];\n        enableIRQinterrupts();\n        outputBuffer[1] = (char)(*commController)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (elapsedTime = get_undefined4_value_0800115c(), (uint)(elapsedTime - currentTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)commController + 0x35) = 0x20;\n  *(undefined *)(commController + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    controllerRegister = *commController;\n    do {\n      if ((int)(controllerRegister[5] << 0x1d) < 0) {\n        *controllerRegister = *controllerRegister | 0x200;\n        outputBuffer[1] = (char)controllerRegister[4];\n        enableIRQinterrupts();\n        outputBuffer[2] = (char)(*commController)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (elapsedTime = get_undefined4_value_0800115c(), (uint)(elapsedTime - currentTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_0800115c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001938",
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "imported": false,
            "current_name": "process_communication_08001938"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "tempVar1",
                "bVar2": "byteVar",
                "lVar3": "longVar",
                "uVar4": "uintVar4",
                "puVar5": "ptrVar5",
                "puVar6": "ptrVar6",
                "puVar7": "ptrVar7",
                "uVar8": "uintVar8",
                "uVar9": "uintVar9",
                "uVar10": "uintVar10",
                "uVar11": "uintVar11",
                "iVar12": "intVar12",
                "uVar13": "uintVar13",
                "uVar14": "uintVar14",
                "uVar15": "uintVar15",
                "uVar16": "uintVar16",
                "uVar17": "uintVar17",
                "puVar18": "ptrVar18",
                "unaff_r4": "unaffected_r4",
                "iVar19": "intVar19",
                "iVar20": "intVar20",
                "bVar21": "boolVar21",
                "uVar22": "uintVar22"
            },
            "code": "\nvoid process_sensor_data_0800411c(void)\n\n{\n  undefined4 *tempVar1;\n  byte byteVar;\n  longlong longVar;\n  uint uintVar4;\n  undefined *ptrVar5;\n  undefined *ptrVar6;\n  undefined *ptrVar7;\n  uint uintVar8;\n  uint uintVar9;\n  undefined4 uintVar10;\n  undefined4 uintVar11;\n  int intVar12;\n  undefined4 uintVar13;\n  uint uintVar14;\n  uint uintVar15;\n  uint uintVar16;\n  uint uintVar17;\n  undefined4 *ptrVar18;\n  undefined4 unaffected_r4;\n  int intVar19;\n  int intVar20;\n  bool boolVar21;\n  undefined8 uintVar22;\n  \n  intVar12 = thunk_get_undefined4_value_0800115c();\n  ptrVar5 = PTR_DAT_08004188;\n  if (1 < (uint)(intVar12 - *(int *)PTR_DAT_08004188)) {\n    uintVar13 = thunk_get_undefined4_value_0800115c();\n    *(undefined4 *)ptrVar5 = uintVar13;\n    process_and_update_sensor_data_08002f28();\n  }\n  intVar12 = thunk_get_undefined4_value_0800115c();\n  ptrVar5 = PTR_DAT_0800418c;\n  if (2 < (uint)(intVar12 - *(int *)PTR_DAT_0800418c)) {\n    uintVar13 = thunk_get_undefined4_value_0800115c();\n    *(undefined4 *)ptrVar5 = uintVar13;\n    process_and_update_data_08004a84();\n  }\n  intVar12 = thunk_get_undefined4_value_0800115c();\n  ptrVar5 = PTR_DAT_08004190;\n  if (3 < (uint)(intVar12 - *(int *)PTR_DAT_08004190)) {\n    uintVar13 = thunk_get_undefined4_value_0800115c();\n    *(undefined4 *)ptrVar5 = uintVar13;\n    process_data_08004348();\n    process_data_08004384();\n    decrypt_data_080043f0();\n    process_data_08004410();\n    process_data_08004434();\n    copy_and_process_data_080043bc();\n    copy_and_process_encrypted_data_08004458();\n  }\n  ptrVar6 = PTR_DAT_08003254;\n  ptrVar5 = PTR_DAT_08003250;\n  if ((*PTR_DAT_08003250 != '\\0') && (*PTR_DAT_08003254 != '\\0')) {\n    intVar20 = *(int *)PTR_DAT_0800325c + (uint)*(ushort *)(PTR_DAT_08003258 + 10) * -0x100;\n    uintVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) * (longlong)intVar20) >>\n             0x17 | (int)((ulonglong)\n                          ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 0xc) *\n                          (longlong)intVar20) >> 0x20) << 9;\n    uintVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) * (longlong)intVar20 >> 7);\n    uintVar16 = uintVar15 + (uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000;\n    uintVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)intVar20) >> 8)\n    ;\n    intVar12 = uintVar14 + 2000;\n    uintVar9 = uintVar8 + (uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000;\n    boolVar21 = (int)uintVar14 < 0;\n    if (1999 < intVar12) {\n      uintVar14 = 0;\n    }\n    uintVar4 = uintVar14;\n    if (boolVar21 != SBORROW4(intVar12,2000)) {\n      intVar19 = uintVar14 * uintVar14 * 5;\n      uintVar14 = intVar19 >> 2;\n      uintVar4 = intVar19 >> 1;\n    }\n    uintVar17 = uintVar16 - uintVar4;\n    longVar = (ulonglong)(uintVar9 - uintVar14) * (ulonglong)*(uint *)PTR_DAT_08003260;\n    intVar19 = *(uint *)PTR_DAT_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 6) * (longlong)intVar20 >>\n                     0x28) + (uint)CARRY4(uintVar8,(uint)*(ushort *)(PTR_DAT_08003258 + 2) * 0x8000)) -\n              ((int)uintVar14 >> 0x1f)) - (uint)(uintVar9 < uintVar14)) + (int)((ulonglong)longVar >> 0x20);\n    uintVar8 = (uint)longVar >> 0x15 | intVar19 * 0x800;\n    uintVar13 = calculate_adjusted_value_08000c44(uintVar8 - uintVar17 >> 0xf |\n                          (((intVar19 >> 0x15) -\n                           ((((int)((longlong)(int)(uint)*(ushort *)(PTR_DAT_08003258 + 8) *\n                                    (longlong)intVar20 >> 0x27) +\n                             (uint)CARRY4(uintVar15,(uint)*(ushort *)(PTR_DAT_08003258 + 4) * 0x10000))\n                            - ((int)uintVar4 >> 0x1f)) - (uint)(uintVar16 < uintVar4))) -\n                          (uint)(uintVar8 < uintVar17)) * 0x20000);\n    uintVar10 = floating_point_division_08000e54(uintVar13,DAT_08003264);\n    *(undefined4 *)PTR_DAT_08003268 = uintVar10;\n    uintVar13 = calculate_adjusted_value_08000c44(intVar12);\n    uintVar11 = floating_point_division_08000e54(uintVar13,DAT_08003264);\n    uintVar13 = DAT_08003270;\n    *(undefined4 *)PTR_DAT_0800326c = uintVar11;\n    floating_point_division_08000e54(uintVar10,uintVar13);\n    uintVar22 = calculate_result_08000428();\n    uintVar22 = improved_calculation_08005900((int)uintVar22,(int)((ulonglong)uintVar22 >> 0x20),DAT_08003240,DAT_08003244);\n    uintVar22 = floating_point_operation_08000168(0,DAT_08003274,(int)uintVar22,(int)((ulonglong)uintVar22 >> 0x20));\n    calculate_result_080004d0((int)uintVar22,(int)((ulonglong)uintVar22 >> 0x20),DAT_08003248,DAT_0800324c);\n    uintVar13 = calculate_result_08000a30();\n    ptrVar7 = PTR_DAT_08003278;\n    *(undefined4 *)PTR_DAT_0800327c = uintVar13;\n    uintVar10 = 0;\n    ptrVar18 = (undefined4 *)ptrVar7;\n    do {\n      tempVar1 = ptrVar18 + 1;\n      *ptrVar18 = *tempVar1;\n      uintVar10 = process_floating_point_08000adc(uintVar10);\n      ptrVar18 = tempVar1;\n    } while ((undefined4 *)(ptrVar7 + 0x4c) != tempVar1);\n    *(undefined4 *)(ptrVar7 + 0x4c) = uintVar13;\n    uintVar13 = process_floating_point_08000adc(uintVar10,uintVar13);\n    uintVar13 = floating_point_division_08000e54(uintVar13,DAT_08003280);\n    *(undefined4 *)PTR_DAT_08003284 = uintVar13;\n    intVar12 = calculate_transformed_value_08001078();\n    ptrVar7 = PTR_DAT_0800328c;\n    *(int *)PTR_DAT_08003288 = intVar12 * 100;\n    byteVar = *ptrVar7;\n    *ptrVar5 = 0;\n    *ptrVar6 = 0;\n    process_request_0800403c(0xee,byteVar + 0x50,1);\n    uintVar13 = thunk_get_undefined4_value_0800115c();\n    *(undefined4 *)PTR_DAT_08003290 = uintVar13;\n  }\n  intVar12 = thunk_get_undefined4_value_0800115c();\n  ptrVar6 = PTR_DAT_08003294;\n  if (((10 < (uint)(intVar12 - *(int *)PTR_DAT_08003290)) && (*ptrVar5 == '\\0')) &&\n     (*PTR_DAT_08003254 == '\\0')) {\n    uintVar13 = calculate_result_08003034();\n    ptrVar7 = PTR_DAT_0800325c;\n    *ptrVar5 = 1;\n    *(undefined4 *)ptrVar7 = uintVar13;\n    process_request_0800403c(0xee,(byte)*PTR_DAT_0800328c + 0x40,1,0,unaffected_r4);\n    uintVar13 = thunk_get_undefined4_value_0800115c();\n    *(undefined4 *)ptrVar6 = uintVar13;\n  }\n  intVar12 = thunk_get_undefined4_value_0800115c();\n  ptrVar7 = PTR_DAT_08003254;\n  if (((10 < (uint)(intVar12 - *(int *)ptrVar6)) && (*ptrVar5 != '\\0')) && (*PTR_DAT_08003254 == '\\0'))\n  {\n    uintVar13 = calculate_result_08003034();\n    *(undefined4 *)PTR_DAT_08003260 = uintVar13;\n    *ptrVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004a84",
                "FUN_08002f28",
                "FUN_080043f0",
                "FUN_08000adc",
                "FUN_080043bc",
                "FUN_08000e54",
                "FUN_08004348",
                "FUN_0800403c",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004384",
                "FUN_08003034",
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08004434"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "FUN_080041ae"
            ],
            "imported": false,
            "current_name": "process_sensor_data_0800411c"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "update_registers_080022d0",
                "param_1": "baseAddress",
                "param_2": "inputValues",
                "uVar1": "registerValue",
                "uVar2": "tempValue1",
                "uVar3": "tempValue2"
            },
            "code": "\nvoid updateRegisters_080022d0(int baseAddress,uint *inputValues)\n\n{\n  uint registerValue;\n  uint tempValue1;\n  uint tempValue2;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  tempValue1 = *(uint *)(baseAddress + 4);\n  tempValue2 = *inputValues;\n  registerValue = *(uint *)(baseAddress + 0x20) & 0xfffffdff | inputValues[2] << 8;\n  if (baseAddress == DAT_08002320) {\n    registerValue = (registerValue & 0xfffff7ff | inputValues[3] << 8) & 0xfffffbff;\n    tempValue1 = tempValue1 & 0xffffcfff | (inputValues[5] | inputValues[6]) << 4;\n  }\n  *(uint *)(baseAddress + 4) = tempValue1;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | tempValue2;\n  *(uint *)(baseAddress + 0x3c) = inputValues[1];\n  *(uint *)(baseAddress + 0x20) = registerValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "FUN_0800245c"
            ],
            "imported": false,
            "current_name": "update_registers_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "calculate_result_080010c4",
                "param_1": "inputValue",
                "uVar1": "shiftValue"
            },
            "code": "\nuint calculateResult_080010c4(uint inputValue)\n\n{\n  uint shiftValue;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftValue) {\n    return (inputValue << 8 | 0x80000000) >> (shiftValue & 0xff);\n  }\n  if ((shiftValue == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "FUN_08004a84"
            ],
            "imported": false,
            "current_name": "calculate_result_080010c4"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "process_and_handle_data_080040b8",
                "param_1": "input_data_1",
                "param_2": "input_data_2",
                "param_3": "communication_mode",
                "param_4": "timeout",
                "param_5": "processed_data",
                "param_6": "string_data",
                "iVar1": "communication_result"
            },
            "code": "\nvoid process_and_handle_data_080040b8(undefined4 input_data_1,undefined4 input_data_2,undefined4 communication_mode,undefined4 timeout,\n                 undefined4 processed_data,undefined4 string_data)\n\n{\n  int communication_result;\n  \n  communication_result = process_communication_08001938(PTR_DAT_080040e4,input_data_1,input_data_2,1,communication_mode,timeout,200,timeout);\n  if (communication_result != 0) {\n    process_data_and_strings_08004490(processed_data,string_data);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "FUN_08003034"
            ],
            "imported": false,
            "current_name": "process_and_handle_data_080040b8"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "update_register_values_0800245c",
                "param_1": "register_ptr",
                "param_2": "unused_param_2",
                "param_3": "operation_code",
                "extraout_r1": "register_value_1",
                "extraout_r1_00": "register_value_2",
                "extraout_r1_01": "register_value_3",
                "extraout_r1_02": "register_value_4",
                "iVar1": "temp_var_1",
                "uVar2": "updated_value",
                "iVar3": "register_base"
            },
            "code": "\nvoid update_register_values_0800245c(int *register_ptr,undefined4 unused_param_2,undefined4 operation_code)\n\n{\n  int register_value_1;\n  int register_value_2;\n  int register_value_3;\n  int register_value_4;\n  int temp_var_1;\n  uint updated_value;\n  int register_base;\n  \n  if (*(char *)(register_ptr + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)register_ptr + 0x39) = 2;\n  *(undefined *)(register_ptr + 0xe) = 1;\n  switch(operation_code) {\n  case 0:\n    update_registers_08002280(*register_ptr);\n    register_base = *register_ptr;\n    updated_value = *(uint *)(register_value_1 + 0x10);\n    *(uint *)(register_base + 0x18) = *(uint *)(register_base + 0x18) | 8;\n    *(uint *)(register_base + 0x18) = *(uint *)(register_base + 0x18) & 0xfffffffb;\n    updated_value = *(uint *)(register_base + 0x18) | updated_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_registers_08002404(*register_ptr);\n    register_base = *register_ptr;\n    temp_var_1 = *(int *)(register_value_2 + 0x10);\n    *(uint *)(register_base + 0x18) = *(uint *)(register_base + 0x18) | 0x800;\n    *(uint *)(register_base + 0x18) = *(uint *)(register_base + 0x18) & 0xfffffbff;\n    updated_value = *(uint *)(register_base + 0x18) | temp_var_1 << 8;\n    break;\n  case 8:\n    update_registers_080022d0(*register_ptr);\n    register_base = *register_ptr;\n    updated_value = *(uint *)(register_value_3 + 0x10);\n    *(uint *)(register_base + 0x1c) = *(uint *)(register_base + 0x1c) | 8;\n    *(uint *)(register_base + 0x1c) = *(uint *)(register_base + 0x1c) & 0xfffffffb;\n    updated_value = *(uint *)(register_base + 0x1c) | updated_value;\n    goto LAB_080024fa;\n  case 0xc:\n    update_registers_08002324(*register_ptr);\n    register_base = *register_ptr;\n    temp_var_1 = *(int *)(register_value_4 + 0x10);\n    *(uint *)(register_base + 0x1c) = *(uint *)(register_base + 0x1c) | 0x800;\n    *(uint *)(register_base + 0x1c) = *(uint *)(register_base + 0x1c) & 0xfffffbff;\n    updated_value = *(uint *)(register_base + 0x1c) | temp_var_1 << 8;\nLAB_080024fa:\n    *(uint *)(register_base + 0x1c) = updated_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(register_base + 0x18) = updated_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)register_ptr + 0x39) = 1;\n  *(undefined *)(register_ptr + 0xe) = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_08002324",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_080022d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "update_register_values_0800245c"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "process_data_and_strings_08004490",
                "param_1": "input_string1",
                "param_2": "input_data",
                "uVar1": "data_value",
                "puVar2": "error_string",
                "puVar3": "line_string"
            },
            "code": "\nvoid process_data_and_strings_08004490(undefined4 input_string1,undefined4 input_data)\n\n{\n  undefined4 data_value;\n  undefined *error_string;\n  undefined *line_string;\n  \n  update_value_08001424(DAT_08004508,0x4000,1);\n  update_value_08001424(DAT_08004508,0x8000,0);\n  update_value_08001424(DAT_08004508,0x2000,0);\n  line_string = PTR_s_Error_with_08004510;\n  error_string = PTR_s__at_line__0800450c;\n  data_value = DAT_08004508;\n  do {\n    xor_update_0800142e(data_value,0x4000);\n    xor_update_0800142e(data_value,0x8000);\n    xor_update_0800142e(data_value,0x2000);\n    process_string_08004c8c(line_string);\n    process_string_08004c8c(input_string1);\n    process_string_08004c8c(error_string);\n    process_data_and_string_08004cac(input_data);\n    process_data_08004c18(10);\n    thunk_do_nothing_08001168(500);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08001424",
                "FUN_0800142e",
                "FUN_08004c8c",
                "thunk_FUN_08001168",
                "FUN_08004c18",
                "FUN_08004cac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "FUN_0800403c",
                "FUN_0800407c",
                "FUN_0800458c",
                "FUN_08004514",
                "FUN_080040b8"
            ],
            "imported": false,
            "current_name": "process_data_and_strings_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "floating_point_division_08000e54",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "unused_param",
                "param_4": "numeratorExponent",
                "uVar1": "denominatorMantissa",
                "uVar2": "numeratorExponent",
                "iVar3": "exponentDiff",
                "uVar4": "tempVar",
                "iVar5": "adjustedExponent",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "code": "\nuint floatingPointDivision_08000e54(uint numerator,uint denominator,undefined4 unused_param,uint numeratorExponent)\n\n{\n  uint denominatorMantissa;\n  uint numeratorExponent;\n  int exponentDiff;\n  uint tempVar;\n  int adjustedExponent;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  numeratorExponent = numerator >> 0x17 & 0xff;\n  condition1 = numeratorExponent == 0;\n  if (!condition1) {\n    numeratorExponent = denominator >> 0x17 & 0xff;\n    condition1 = numeratorExponent == 0;\n  }\n  if (!condition1) {\n    condition1 = numeratorExponent == 0xff;\n  }\n  if (!condition1) {\n    condition1 = numeratorExponent == 0xff;\n  }\n  if (condition1) {\n    numeratorExponent = denominator >> 0x17 & 0xff;\n    result = numerator;\n    if (numeratorExponent == 0xff) {\n      if (((numerator & 0x7fffff) != 0) || (result = denominator, numeratorExponent == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (numeratorExponent == 0xff) {\n        result = denominator;\n        if ((denominator & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (numerator ^ denominator) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition1 = (numerator & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (denominator & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = numeratorExponent == 0;\n        result = numerator & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            numerator = numerator << 1;\n            condition1 = (numerator & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          numeratorExponent = numeratorExponent - 1;\n        }\n        numerator = numerator | result;\n        condition1 = numeratorExponent == 0;\n        result = denominator & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            denominator = denominator << 1;\n            condition1 = (denominator & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          numeratorExponent = numeratorExponent - 1;\n        }\n        denominator = denominator | result;\n        goto LAB_08000e6c;\n      }\n      if ((numerator & 0x7fffffff) == 0) {\n        if ((denominator & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    numerator = numerator ^ denominator;\n  }\n  else {\nLAB_08000e6c:\n    exponentDiff = numeratorExponent - numeratorExponent;\n    if (denominator << 9 == 0) {\n      numerator = (numerator ^ denominator) & 0x80000000 | numerator & 0x7fffff;\n      condition3 = SCARRY4(exponentDiff,0x7f);\n      adjustedExponent = exponentDiff + 0x7f;\n      condition1 = adjustedExponent < 0;\n      condition2 = adjustedExponent == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,adjustedExponent);\n        condition1 = 0xff - adjustedExponent < 0;\n        condition2 = adjustedExponent == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        numerator = numerator | adjustedExponent * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return numerator;\n      }\n      numerator = numerator | 0x800000;\n      numeratorExponent = 0;\n      condition2 = SBORROW4(adjustedExponent,1);\n      tempVar = exponentDiff + 0x7e;\n      condition1 = tempVar == 0;\n      result = tempVar;\n    }\n    else {\n      denominatorMantissa = (denominator << 9) >> 4 | 0x10000000;\n      numeratorExponent = (numerator << 9) >> 4 | 0x10000000;\n      numerator = (numerator ^ denominator) & 0x80000000;\n      condition1 = denominatorMantissa <= numeratorExponent;\n      if (!condition1) {\n        numeratorExponent = numeratorExponent << 1;\n      }\n      tempVar = exponentDiff + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (denominatorMantissa <= numeratorExponent) {\n          numeratorExponent = numeratorExponent - denominatorMantissa;\n          numerator = numerator | result;\n        }\n        condition1 = denominatorMantissa >> 1 <= numeratorExponent;\n        if (condition1) {\n          numeratorExponent = numeratorExponent - (denominatorMantissa >> 1);\n        }\n        if (condition1) {\n          numerator = numerator | result >> 1;\n        }\n        condition1 = denominatorMantissa >> 2 <= numeratorExponent;\n        if (condition1) {\n          numeratorExponent = numeratorExponent - (denominatorMantissa >> 2);\n        }\n        if (condition1) {\n          numerator = numerator | result >> 2;\n        }\n        condition1 = denominatorMantissa >> 3 <= numeratorExponent;\n        if (condition1) {\n          numeratorExponent = numeratorExponent - (denominatorMantissa >> 3);\n        }\n        if (condition1) {\n          numerator = numerator | result >> 3;\n        }\n        numeratorExponent = numeratorExponent * 0x10;\n        condition1 = numeratorExponent == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(tempVar,0xfd);\n      condition1 = tempVar == 0xfd;\n      result = tempVar - 0xfd;\n      if (tempVar < 0xfe) {\n        numerator = numerator + tempVar * 0x800000 + (uint)(denominatorMantissa <= numeratorExponent);\n        if (numeratorExponent - denominatorMantissa == 0) {\n          numerator = numerator & 0xfffffffe;\n        }\n        return numerator;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(tempVar + 0x19) < 0;\n      if (tempVar == 0xffffffe7 || condition1 != SCARRY4(tempVar,0x19)) {\n        numerator = numerator & 0x80000000;\n      }\n      if (tempVar == 0xffffffe7 || condition1 != SCARRY4(tempVar,0x19)) {\n        return numerator;\n      }\n      result = (numerator << 1) >> (-tempVar & 0xff);\n      tempVar = numerator << (tempVar + 0x20 & 0xff);\n      result = ((uint)((numerator & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((numeratorExponent | tempVar << 1) == 0) {\n        result = result & ~(tempVar >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return numerator & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e54",
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "imported": false,
            "current_name": "floating_point_division_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "process_parameters_080015e8",
                "param_1": "param_array",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "iVar1": "temp_var_1",
                "iVar2": "temp_var_2",
                "puVar3": "ptr_var_3",
                "ppuVar4": "ptr_param_array",
                "uVar5": "temp_uint_5",
                "uVar6": "temp_uint_6"
            },
            "code": "\nundefined4 process_parameters_080015e8(uint **param_array,uint input_param_2,uint input_param_3,int input_param_4,uint input_param_5)\n\n{\n  int temp_var_1;\n  int temp_var_2;\n  uint *ptr_var_3;\n  uint **ptr_param_array;\n  uint temp_uint_5;\n  uint temp_uint_6;\n  \n  ptr_var_3 = *param_array;\n  *ptr_var_3 = *ptr_var_3 | 0x400;\n  *ptr_var_3 = *ptr_var_3 | 0x100;\n  ptr_param_array = param_array;\n  temp_uint_5 = input_param_2;\n  temp_uint_6 = input_param_3;\n  temp_var_1 = get_undefined4_value_0800115c();\nLAB_0800160e:\n  ptr_var_3 = *param_array;\n  while (-1 < (int)(ptr_var_3[5] << 0x1f)) {\n    if (input_param_5 != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr_var_3[4] = input_param_2 & 0xfe;\n  temp_var_1 = process_data_08001460(param_array,DAT_080016f0,input_param_5,ptr_var_3,ptr_param_array,temp_uint_5,temp_uint_6);\n  if (temp_var_1 != 0) goto LAB_080016ba;\n  temp_var_1 = process_data_080014e2(param_array,input_param_5,(*param_array)[5],(*param_array)[6]);\n  if (temp_var_1 == 0) {\n    ptr_var_3 = *param_array;\n    if (input_param_4 != 1) {\n      ptr_var_3[4] = input_param_3 >> 8;\n      temp_var_1 = process_data_080014e2(param_array,input_param_5);\n      if (temp_var_1 != 0) goto LAB_08001642;\n      ptr_var_3 = *param_array;\n    }\n    ptr_var_3[4] = input_param_3 & 0xff;\n    temp_var_1 = process_data_080014e2(param_array,input_param_5);\n    if (temp_var_1 == 0) {\n      **param_array = **param_array | 0x100;\n      temp_var_1 = get_undefined4_value_0800115c();\n      do {\n        do {\n          if ((int)((*param_array)[5] << 0x1f) < 0) {\n            (*param_array)[4] = input_param_2 & 0xff | 1;\n            temp_var_1 = process_data_08001460(param_array,DAT_080016f0,input_param_5);\n            if (temp_var_1 == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (param_array[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (input_param_5 == 0xffffffff);\n      } while ((input_param_5 != 0) && (temp_var_2 = get_undefined4_value_0800115c(), (uint)(temp_var_2 - temp_var_1) <= input_param_5));\nLAB_0800165a:\n      *(undefined *)((int)param_array + 0x35) = 0x20;\n      *(undefined *)(param_array + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (param_array[0xe] == (uint *)0x4) {\n    **param_array = **param_array | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((input_param_5 == 0) || (temp_var_2 = get_undefined4_value_0800115c(), input_param_5 < (uint)(temp_var_2 - temp_var_1)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "FUN_08001938"
            ],
            "imported": false,
            "current_name": "process_parameters_080015e8"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "configure_function_08004e14",
                "param_1": "input_ptr",
                "param_2": "unused_param_2",
                "param_3": "config_value",
                "uVar1": "selected_DAT",
                "iVar2": "input_value",
                "local_18": "config_mode",
                "local_14": "constant_1",
                "uStack_10": "final_config_value",
                "local_c": "constant_2"
            },
            "code": "\nvoid configure_function_08004e14(int *input_ptr,undefined4 unused_param_2,undefined4 config_value)\n\n{\n  undefined4 selected_DAT;\n  int input_value;\n  undefined4 config_mode;\n  undefined4 constant_1;\n  undefined4 final_config_value;\n  undefined4 constant_2;\n  \n  input_value = *input_ptr;\n  selected_DAT = DAT_08004e6c;\n  if (input_value == DAT_08004e68) {\n    config_mode = 0x800;\n  }\n  else if (input_value == 0x40000000) {\n    config_mode = 2;\n  }\n  else {\n    selected_DAT = DAT_08004e74;\n    if (input_value == DAT_08004e70) {\n      config_mode = 3;\n    }\n    else {\n      if (input_value != DAT_08004e78) {\n        return;\n      }\n      config_mode = 0x300;\n    }\n  }\n  constant_2 = 2;\n  constant_1 = 2;\n  final_config_value = config_value;\n  configure_pins_08001264(selected_DAT,&config_mode);\n  return;\n}\n\n",
            "called": [
                "FUN_08001264"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "FUN_0800458c"
            ],
            "imported": false,
            "current_name": "configure_function_08004e14"
        }
    },
    "used_tokens": 140594,
    "layers": [
        [
            "FUN_08003320",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_080006ac",
            "FUN_08004c64",
            "FUN_0800016c",
            "FUN_08007092",
            "FUN_08005630",
            "FUN_08002368",
            "FUN_08002520",
            "FUN_08002008",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08000904",
            "FUN_0800114c",
            "FUN_080052e4",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003068",
            "FUN_08005646",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_0800115c",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_08001170",
            "FUN_08002ed4",
            "FUN_08000f9c",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_08000404",
            "FUN_08000cec",
            "FUN_08003fd0",
            "FUN_08000892",
            "FUN_08000134",
            "FUN_08003eb0",
            "thunk_FUN_0800115c",
            "FUN_080072b8",
            "FUN_080072ac",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08002324",
            "FUN_08001078",
            "FUN_08002564",
            "FUN_08000ad8",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08004fb4",
            "FUN_08000428",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_08004f10",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08002214",
            "FUN_0800567c",
            "FUN_08000adc",
            "FUN_080025a4",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_08000168",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_08000e54"
        ],
        [
            "FUN_080070b0",
            "FUN_08001b58",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_080014e2",
            "FUN_08000990",
            "FUN_08002ec0",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08004c18",
            "FUN_08001460",
            "FUN_08001104",
            "FUN_0800581c",
            "FUN_08004d48",
            "FUN_08004ccc",
            "FUN_080023d0",
            "FUN_08004c30",
            "FUN_080004d0",
            "FUN_08003f3c",
            "FUN_08001004",
            "FUN_080041c4",
            "FUN_080053d4",
            "FUN_080016f4",
            "FUN_08004e7c",
            "FUN_08000724",
            "FUN_0800245c",
            "FUN_08004e14"
        ],
        [
            "FUN_08001028",
            "FUN_0800290c",
            "FUN_080009a0",
            "FUN_08000980",
            "FUN_080009b4",
            "FUN_08006c0c",
            "FUN_080009c8",
            "FUN_0800209c",
            "FUN_08004c8c",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_08005714",
            "FUN_08003ff4",
            "FUN_08001128",
            "FUN_08000ffc",
            "FUN_08001530",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_080015e8"
        ],
        [
            "FUN_08005900",
            "FUN_08001828",
            "FUN_08004300",
            "FUN_08005bc8",
            "FUN_0800299a",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_080009f0",
            "FUN_080057d0",
            "FUN_08001938"
        ],
        [
            "FUN_08004410",
            "FUN_08004384",
            "FUN_08004434",
            "FUN_080043bc",
            "FUN_0800483c",
            "FUN_08004458",
            "FUN_08005c70",
            "FUN_08002ee8",
            "FUN_08006d68",
            "FUN_08004348",
            "FUN_080043f0",
            "FUN_08005044"
        ],
        [
            "FUN_080050fc",
            "FUN_08006070",
            "thunk_FUN_08006070",
            "FUN_08004a84",
            "FUN_08005854"
        ],
        [
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_08004514",
            "FUN_0800407c",
            "FUN_080040b8"
        ],
        [
            "FUN_080040e8",
            "FUN_08002ad0",
            "FUN_0800458c",
            "FUN_08003034"
        ],
        [
            "FUN_08003298",
            "FUN_08004028",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_08004194",
            "FUN_0800411c"
        ],
        [
            "FUN_080041ae"
        ],
        [
            "FUN_08004f68"
        ],
        [
            "thunk_FUN_0800115c"
        ]
    ],
    "locked_functions": []
}