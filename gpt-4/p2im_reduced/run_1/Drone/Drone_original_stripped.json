{
    "functions": {
        "FUN_080050fc": {
            "renaming": {
                "FUN_080050fc": "formatted_output_080050fc",
                "param_1": "context",
                "param_2": "output_buffer",
                "param_3": "format_string",
                "param_4": "arg_list",
                "iVar3": "temp_var",
                "iVar4": "chars_written",
                "pvVar5": "found_char",
                "puVar6": "result",
                "piVar7": "next_arg",
                "pbVar8": "current_char",
                "pbVar9": "next_char",
                "unaff_r9": "unused_var",
                "local_8c": "current_arg",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "unused_var2",
                "local_7c": "width",
                "local_74": "total_chars_written",
                "local_70": "specifier",
                "local_6f": "padding_char",
                "local_6e": "unused_var3",
                "local_45": "sign_char",
                "local_30": "unused_var4"
            },
            "code": "\nint formatted_output_080050fc(undefined4 *context,int *output_buffer,byte *format_string,int *arg_list)\n\n{\n  bool bVar1;\n  undefined *puVar2;\n  int temp_var;\n  int chars_written;\n  void *found_char;\n  undefined4 *result;\n  int *next_arg;\n  byte *current_char;\n  byte *next_char;\n  undefined4 *unused_var;\n  int *current_arg;\n  uint flags;\n  int precision;\n  undefined4 unused_var2;\n  int width;\n  int total_chars_written;\n  byte specifier;\n  undefined padding_char;\n  undefined unused_var3;\n  undefined sign_char;\n  undefined4 unused_var4;\n  \n  current_arg = arg_list;\n  if (((int)((uint)*(ushort *)(output_buffer + 3) << 0x18) < 0) && (output_buffer[4] == 0)) {\n    temp_var = _malloc_r(context,0x40);\n    *output_buffer = temp_var;\n    output_buffer[4] = temp_var;\n    if (temp_var == 0) {\n      *context = 0xc;\n      return -1;\n    }\n    output_buffer[5] = 0x40;\n  }\n  total_chars_written = 0;\n  padding_char = 0x20;\n  unused_var3 = 0x30;\n  current_char = format_string;\nLAB_08005146:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  temp_var = (int)next_char - (int)format_string;\n  if (temp_var != 0) {\n    chars_written = __ssputs_r(context,output_buffer,format_string,temp_var);\n    if (chars_written == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(output_buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars_written;\n    }\n    total_chars_written = total_chars_written + temp_var;\n  }\n  if (*next_char == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  unused_var2 = 0;\n  sign_char = 0;\n  unused_var4 = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    found_char = memchr(PTR_DAT_080052d0,(uint)*current_char,5);\n    puVar2 = PTR_DAT_080052d4;\n    format_string = current_char + 1;\n    if (found_char == (void *)0x0) break;\n    flags = 1 << ((int)found_char - (int)PTR_DAT_080052d0 & 0xffU) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    sign_char = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    sign_char = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    next_arg = current_arg + 1;\n    temp_var = *current_arg;\n    current_arg = next_arg;\n    if (-1 < temp_var) goto LAB_080051ee;\n    width = -temp_var;\n    flags = flags | 2;\n  }\n  else {\n    bVar1 = false;\n    temp_var = width;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      temp_var = temp_var * 10 + (*format_string - 0x30);\n      bVar1 = true;\n      format_string = format_string + 1;\n    }\n    if (bVar1) {\nLAB_080051ee:\n      width = temp_var;\n    }\n  }\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      next_arg = current_arg + 1;\n      precision = *current_arg;\n      current_arg = next_arg;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      bVar1 = false;\n      temp_var = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        temp_var = temp_var * 10 + (*format_string - 0x30);\n        bVar1 = true;\n      }\n      if (bVar1) {\n        precision = temp_var;\n      }\n    }\n  }\n  found_char = memchr(PTR_DAT_080052d4,(uint)*format_string,3);\n  if (found_char != (void *)0x0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << ((int)found_char - (int)puVar2 & 0xffU);\n  }\n  specifier = *format_string;\n  format_string = format_string + 1;\n  found_char = memchr(PTR_s_efgEFG_080052d8,(uint)specifier,6);\n  if (found_char == (void *)0x0) {\n    result = (undefined4 *)_printf_i(context,&flags,output_buffer,DAT_080052e0,&current_arg);\n  }\n  else {\n    result = context;\n    if (DAT_080052dc == 0) {\n      current_arg = (int *)(((int)current_arg + 7U & 0xfffffff8) + 8);\n      result = unused_var;\n      goto LAB_08005260;\n    }\n  }\n  if (result == (undefined4 *)0xffffffff) goto LAB_080052ac;\nLAB_08005260:\n  total_chars_written = total_chars_written + (int)result;\n  current_char = format_string;\n  unused_var = result;\n  goto LAB_08005146;\n}\n\n",
            "called": [
                "__ssputs_r",
                "memchr",
                "_printf_i",
                "_malloc_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080050fc",
            "calling": [
                "siprintf"
            ],
            "imported": false,
            "current_name": "formatted_output_080050fc"
        },
        "FUN_08003320": {
            "renaming": {
                "FUN_08003320": "update_delta_time_08003320",
                "_deltat": "delta_time",
                "in_r0": "input_value"
            },
            "code": "\nvoid updateDeltaTime_08003320(float delta_time)\n\n{\n  undefined4 input_value;\n  \n  *(undefined4 *)PTRdelta_time_08003328 = input_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003320",
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "update_delta_time_08003320"
        },
        "FUN_08004410": {
            "renaming": {
                "FUN_08004410": "send_attitude_frame_08004410",
                "in_r1": "inputValue",
                "local_10": "attitudeData",
                "local_c": "modifiedInput"
            },
            "code": "\nvoid sendAttitudeFrame_08004410(void)\n\n{\n  uint inputValue;\n  undefined4 attitudeData;\n  uint modifiedInput;\n  \n  attitudeData = *(undefined4 *)PTR_msp_txf_attitude_08004430;\n  modifiedInput = inputValue & 0xffff0000 | (uint)*(ushort *)(PTR_msp_txf_attitude_08004430 + 4);\n  MSP_SendFrame('l',(uint8_t *)&attitudeData,6);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004410",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_attitude_frame_08004410"
        },
        "FUN_08003ef2": {
            "renaming": {
                "FUN_08003ef2": "initialize_circular_buffer_08003ef2",
                "iVar1": "index"
            },
            "code": "\nvoid initialize_circular_buffer_08003ef2(CircularBuffer *cb)\n\n{\n  int index;\n  \n  index = 0;\n  cb->head = 0;\n  cb->tail = 0;\n  cb->size = 0;\n  do {\n    cb->buffer[index] = '\\0';\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ef2",
            "calling": [
                "serialFlush"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08003ef2"
        },
        "FUN_08001264": {
            "renaming": {
                "FUN_08001264": "gpio_init_08001264",
                "GPIOx": "GPIO_instance",
                "GPIO_Init": "GPIO_config",
                "puVar1": "config_register",
                "uVar2": "config_dat_14",
                "uVar3": "config_dat_18",
                "uVar4": "config_mode",
                "uVar5": "pin_mask",
                "uVar6": "mode_value",
                "iVar7": "port_index",
                "uVar8": "pin_index",
                "uVar9": "register_value",
                "uVar10": "config_dat_20",
                "unaff_r10": "GPIO_temp_instance",
                "iVar11": "pin_offset",
                "tmpreg": "temp_register"
            },
            "code": "\nvoid GPIO_init_08001264(GPIO_TypeDef *GPIO_instance,GPIO_configTypeDef *GPIO_config)\n\n{\n  uint *config_register;\n  uint config_dat_14;\n  uint config_dat_18;\n  uint32_t config_mode;\n  uint pin_mask;\n  uint mode_value;\n  int port_index;\n  uint pin_index;\n  uint register_value;\n  uint config_dat_20;\n  GPIO_TypeDef *GPIO_temp_instance;\n  int pin_offset;\n  uint32_t temp_register;\n  \n  config_dat_18 = DAT_08001418;\n  config_dat_14 = DAT_08001414;\n  config_register = DAT_08001404;\n  config_mode = 0;\n  pin_index = 0;\n  do {\n    register_value = 1 << (pin_index & 0xff);\n    pin_mask = register_value & GPIO_config->Pin;\n    if (register_value == pin_mask) {\n      mode_value = GPIO_config->Mode;\n      if (mode_value == 0x12) {\n        config_mode = GPIO_config->Speed + 0xc;\n      }\n      else if (mode_value < 0x13) {\n        if (mode_value == 2) {\n          config_mode = GPIO_config->Speed + 8;\n        }\n        else if (mode_value < 3) {\n          if (mode_value == 0) goto LAB_080013be;\n          if (mode_value == 1) {\n            config_mode = GPIO_config->Speed;\n          }\n        }\n        else if (mode_value == 3) {\n          config_mode = 0;\n        }\n        else if (mode_value == 0x11) {\n          config_mode = GPIO_config->Speed + 4;\n        }\n      }\n      else {\n        if (mode_value != DAT_08001410) {\n          if (DAT_08001410 < mode_value) {\n            if ((mode_value != config_dat_14) && (config_dat_20 = DAT_08001420, mode_value != config_dat_18)) goto LAB_080013b8;\n          }\n          else if (mode_value != DAT_0800141c) {\n            config_dat_20 = DAT_0800141c + 0x10000;\nLAB_080013b8:\n            if (mode_value != config_dat_20) goto LAB_080012a8;\n          }\n        }\nLAB_080013be:\n        config_mode = GPIO_config->Pull;\n        if (config_mode == 0) {\n          config_mode = 4;\n        }\n        else {\n          if (config_mode == 1) {\n            GPIO_instance->BSRR = register_value;\n          }\n          if (config_mode != 1) {\n            GPIO_instance->BRR = register_value;\n          }\n          config_mode = 8;\n        }\n      }\nLAB_080012a8:\n      if (pin_mask < 0x100) {\n        register_value = GPIO_instance->CRL;\n        mode_value = pin_index << 2;\n        GPIO_temp_instance = GPIO_instance;\n      }\n      else {\n        register_value = GPIO_instance->CRH;\n        mode_value = (pin_index + 0x3ffffff8) * 4;\n      }\n      if (0xff < pin_mask) {\n        GPIO_temp_instance = (GPIO_TypeDef *)&GPIO_instance->CRH;\n      }\n      GPIO_temp_instance->CRL = register_value & ~(0xf << (mode_value & 0xff)) | config_mode << (mode_value & 0xff);\n      GPIO_temp_instance = (GPIO_TypeDef *)GPIO_config->Mode;\n      if (((uint)GPIO_temp_instance & 0x10000000) != 0) {\n        *(uint *)(DAT_08001408 + 0x18) = *(uint *)(DAT_08001408 + 0x18) | 1;\n        pin_offset = (pin_index & 3) << 2;\n        if (GPIO_instance == DAT_0800140c) {\n          port_index = 0;\n        }\n        else if (GPIO_instance == (GPIO_TypeDef *)&DAT_0800140c[0x24].BSRR) {\n          port_index = 1;\n        }\n        else if (GPIO_instance == (GPIO_TypeDef *)&DAT_0800140c[0x49].CRH) {\n          port_index = 2;\n        }\n        else if (GPIO_instance == (GPIO_TypeDef *)&DAT_0800140c[0x6d].BRR) {\n          port_index = 3;\n        }\n        else {\n          port_index = 4;\n        }\n        *(uint *)(&DAT_40010008 + (pin_index & 0xfffffffc)) =\n             port_index << pin_offset | *(uint *)(&DAT_40010008 + (pin_index & 0xfffffffc)) & ~(0xf << pin_offset);\n        if (((uint)GPIO_temp_instance & 0x10000) == 0) {\n          register_value = *config_register & ~pin_mask;\n        }\n        else {\n          register_value = *config_register | pin_mask;\n        }\n        *config_register = register_value;\n        if (((uint)GPIO_temp_instance & 0x20000) == 0) {\n          register_value = config_register[1] & ~pin_mask;\n        }\n        else {\n          register_value = config_register[1] | pin_mask;\n        }\n        config_register[1] = register_value;\n        if (((uint)GPIO_temp_instance & 0x100000) == 0) {\n          register_value = config_register[2] & ~pin_mask;\n        }\n        else {\n          register_value = config_register[2] | pin_mask;\n        }\n        config_register[2] = register_value;\n        if (((uint)GPIO_temp_instance & 0x200000) == 0) {\n          pin_mask = config_register[3] & ~pin_mask;\n        }\n        else {\n          pin_mask = pin_mask | config_register[3];\n        }\n        config_register[3] = pin_mask;\n      }\n    }\n    pin_index = pin_index + 1;\n    if (pin_index == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001264",
            "calling": [
                "HAL_UART_MspInit",
                "Peripherals_Init",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "imported": false,
            "current_name": "gpio_init_08001264"
        },
        "FUN_080058fc": {
            "renaming": {
                "FUN_080058fc": "complex_arithmetic_080058fc",
                "param_1": "real_part1",
                "param_2": "imag_part1",
                "param_3": "real_part2",
                "param_4": "imag_part2",
                "param_5": "angle",
                "uVar1": "real_result",
                "extraout_r1": "intermediate_real",
                "extraout_r1_00": "intermediate_imag",
                "unaff_r4": "temp_var",
                "iVar2": "imag_result",
                "uVar3": "operation_code",
                "uVar4": "abs_imag_part1",
                "iVar5": "exponent_diff",
                "uVar6": "abs_imag_part2",
                "uVar7": "result",
                "uVar8": "intermediate_result"
            },
            "code": "\nundefined8 complex_arithmetic_080058fc(uint real_part1,uint imag_part1,uint real_part2,uint imag_part2,double angle)\n\n{\n  undefined4 real_result;\n  undefined4 intermediate_real;\n  int intermediate_imag;\n  undefined4 temp_var;\n  int imag_result;\n  uint operation_code;\n  uint abs_imag_part1;\n  int exponent_diff;\n  uint abs_imag_part2;\n  undefined8 result;\n  undefined8 intermediate_result;\n  \n  result = CONCAT44(DAT_08006204,DAT_08006200);\n  abs_imag_part2 = imag_part2 & 0x7fffffff;\n  if ((DAT_08006220 < (abs_imag_part2 | (-real_part2 | real_part2) >> 0x1f)) ||\n     (abs_imag_part1 = imag_part1 & 0x7fffffff, DAT_08006220 < (abs_imag_part1 | (-real_part1 | real_part1) >> 0x1f))) {\n    result = __aeabi_dadd(real_part1,imag_part1);\n    return result;\n  }\n  if ((imag_part2 + 0xc0100000 | real_part2) == 0) {\n    atan(angle);\n    return CONCAT44(intermediate_real,real_part1);\n  }\n  operation_code = (int)imag_part2 >> 0x1e & 2U | imag_part1 >> 0x1f;\n  if ((real_part1 | abs_imag_part1) == 0) {\n    if (operation_code == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (operation_code != 3) {\n      return CONCAT44(imag_part1,real_part1);\n    }\n  }\n  else {\n    if ((real_part2 | abs_imag_part2) != 0) {\n      if (abs_imag_part2 == DAT_08006220) {\n        if (abs_imag_part1 == abs_imag_part2) {\n          if (operation_code == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (operation_code == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (operation_code != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (operation_code == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (operation_code == 3) {\n          return result;\n        }\n        if (operation_code == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (abs_imag_part1 != DAT_08006220) {\n        exponent_diff = (int)(abs_imag_part1 - abs_imag_part2) >> 0x14;\n        real_result = DAT_08006210;\n        imag_result = DAT_08006214;\n        if (exponent_diff < 0x3d) {\n          if (((int)imag_part2 < 0) && (exponent_diff + 0x3c < 0 != SCARRY4(exponent_diff,0x3c))) {\n            real_result = 0;\n            imag_result = 0;\n          }\n          else {\n            real_result = __divdf3(real_part1,imag_part1);\n            fabs((double)CONCAT44(temp_var,imag_part2));\n            atan((double)CONCAT44(temp_var,imag_part2));\n            imag_result = intermediate_imag;\n          }\n        }\n        if (operation_code != 1) {\n          if (operation_code == 2) {\n            intermediate_result = __subdf3(real_result,imag_result,DAT_08006208,DAT_0800620c);\n            result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (operation_code == 0) {\n              return CONCAT44(imag_result,real_result);\n            }\n            result = __subdf3(real_result,imag_result,DAT_08006208,DAT_0800620c);\n            intermediate_result = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)intermediate_result,\n                           (int)((ulonglong)intermediate_result >> 0x20));\n          return result;\n        }\n        return CONCAT44(imag_result + -0x80000000,real_result);\n      }\n    }\n    result = CONCAT44(DAT_08006214,DAT_08006210);\n    if ((int)imag_part1 < 0) {\n      result = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "__ieee754_atan2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058fc",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "complex_arithmetic_080058fc"
        },
        "FUN_080070b0": {
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "__x": "input_value",
                "iVar1": "sign",
                "in_r0": "input_low",
                "in_r1": "input_high",
                "uVar2": "two52_low",
                "uVar3": "two52_high",
                "uVar4": "shifted_value",
                "uVar5": "temp_value",
                "in_d0": "input_double",
                "dVar6": "result",
                "uVar7": "temp_double"
            },
            "code": "\ndouble calculate_result_080070b0(double input_value)\n\n{\n  int sign;\n  uint input_low;\n  uint input_high;\n  undefined4 two52_low;\n  undefined4 two52_high;\n  uint shifted_value;\n  uint temp_value;\n  double input_double;\n  double result;\n  undefined8 temp_double;\n  \n  temp_value = (input_high << 1) >> 0x15;\n  shifted_value = temp_value - 0x3ff;\n  sign = (int)input_high >> 0x1f;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      if ((input_high & 0x7fffffff | input_low) == 0) {\n        return input_double;\n      }\n      shifted_value = input_high & 0xfffff | input_low;\n      two52_low = *(undefined4 *)(PTR_TWO52_080071b8 + sign * -8);\n      two52_high = *(undefined4 *)((int)(PTR_TWO52_080071b8 + sign * -8) + 4);\n      temp_double = __aeabi_dadd(input_low,(-shifted_value | shifted_value) >> 0xc & 0x80000 | input_high & 0xfffe0000,two52_low,two52_high)\n      ;\n      result = (double)__subdf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),two52_low,two52_high);\n      return result;\n    }\n    temp_value = DAT_080071bc >> (shifted_value & 0xff);\n    if ((input_high & temp_value | input_low) == 0) {\n      return input_double;\n    }\n    temp_value = temp_value >> 1;\n    input_low = input_high & temp_value | input_low;\n    if (input_low != 0) {\n      if (shifted_value == 0x13) {\n        input_low = 0x80000000;\n      }\n      else {\n        input_low = 0;\n      }\n      input_high = 0x40000 >> (shifted_value & 0xff) | input_high & ~temp_value;\n    }\n  }\n  else {\n    if (0x33 < (int)shifted_value) {\n      if (shifted_value != 0x400) {\n        return input_double;\n      }\n      result = (double)__aeabi_dadd();\n      return result;\n    }\n    temp_value = temp_value - 0x413;\n    shifted_value = 0xffffffff >> (temp_value & 0xff);\n    if ((input_low & shifted_value) == 0) {\n      return input_double;\n    }\n    shifted_value = shifted_value >> 1;\n    if ((input_low & shifted_value) != 0) {\n      input_low = 0x40000000 >> (temp_value & 0xff) | input_low & ~shifted_value;\n    }\n  }\n  two52_low = *(undefined4 *)(PTR_TWO52_080071b8 + sign * -8);\n  two52_high = *(undefined4 *)((int)(PTR_TWO52_080071b8 + sign * -8) + 4);\n  temp_double = __aeabi_dadd(input_low,input_high,two52_low,two52_high);\n  result = (double)__subdf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),two52_low,two52_high);\n  return result;\n}\n\n",
            "called": [
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070b0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_result_080070b0"
        },
        "FUN_08001028": {
            "renaming": {
                "FUN_08001028": "compare_floats_08001028",
                "in_CY": "comparison_result"
            },
            "code": "\nbool compare_floats_08001028(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cfcmpeq();\n  return comparison_result == '\\0';\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001028",
            "calling": [
                "PID_Update",
                "AHRS_GetYaw",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "compare_floats_08001028"
        },
        "FUN_080006ac": {
            "renaming": {
                "FUN_080006ac": "calculate_result_080006ac",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "temp_var1",
                "unaff_r4": "unchanged_val",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "in_r12": "input_mask",
                "bVar4": "is_zero"
            },
            "code": "\nulonglong calculate_result_080006ac(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint temp_var1;\n  uint unchanged_val;\n  uint temp_var2;\n  uint temp_var3;\n  uint input_mask;\n  bool is_zero;\n  \n  temp_var2 = input_mask & input_d >> 0x14;\n  if (unchanged_val != input_mask && temp_var2 != input_mask) {\n    is_zero = (input_a | input_b << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_c | input_d << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_b ^ input_d) & 0x80000000) << 0x20;\n    }\n    if (unchanged_val == 0) {\n      temp_var3 = input_b & 0x80000000;\n      do {\n        temp_var1 = input_a & 0x80000000;\n        input_a = input_a << 1;\n        input_b = input_b * 2 + (uint)(temp_var1 != 0);\n      } while ((input_b & 0x100000) == 0);\n      input_b = input_b | temp_var3;\n      if (temp_var2 != 0) {\n        return CONCAT44(input_b,input_a);\n      }\n    }\n    do {\n      temp_var2 = input_c & 0x80000000;\n      input_c = input_c << 1;\n      input_d = input_d * 2 + (uint)(temp_var2 != 0);\n    } while ((input_d & 0x100000) == 0);\n    return CONCAT44(input_b,input_a);\n  }\n  is_zero = (input_a | input_b << 1) == 0;\n  if (is_zero) {\n    input_b = input_d;\n    input_a = input_c;\n  }\n  if (!is_zero) {\n    is_zero = (input_c | input_d << 1) == 0;\n  }\n  temp_var3 = input_b;\n  if (((!is_zero) && ((unchanged_val != input_mask || ((input_a | input_b << 0xc) == 0)))) &&\n     ((temp_var2 != input_mask || (input_a = input_c, temp_var3 = input_d, (input_c | input_d << 0xc) == 0)))) {\n    return (ulonglong)((input_b ^ input_d) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_var3,input_a) | 0x7ff8000000000000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080006ac",
            "calling": [
                "__muldf3"
            ],
            "imported": false,
            "current_name": "calculate_result_080006ac"
        },
        "FUN_0800125a": {
            "renaming": {
                "FUN_0800125a": "systick_callback_handler_0800125a"
            },
            "code": "\nvoid systick_callback_handler_0800125a(void)\n\n{\n  HAL_SYSTICK_Callback();\n  return;\n}\n\n",
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800125a",
            "calling": [
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "systick_callback_handler_0800125a"
        },
        "FUN_08001828": {
            "renaming": {
                "FUN_08001828": "i2_c_memory_write_08001828",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "pData": "data_buffer",
                "Size": "data_size",
                "Timeout": "timeout",
                "HVar1": "hal_status",
                "uVar2": "start_tick",
                "uVar3": "current_tick",
                "pIVar4": "i2c_instance",
                "uVar5": "cr1_value"
            },
            "code": "\nHAL_StatusTypeDef\nI2C_Memory_Write_08001828(I2C_HandleTypeDef *i2c_handle,uint16_t device_address,uint16_t memory_address,\n                 uint16_t memory_address_size,uint8_t *data_buffer,uint16_t data_size,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef hal_status;\n  uint32_t start_tick;\n  uint32_t current_tick;\n  I2C_TypeDef *i2c_instance;\n  uint cr1_value;\n  \n  if (i2c_handle->State == HAL_I2C_STATE_READY) {\n    if (data_buffer == (uint8_t *)0x0) {\n      return HAL_ERROR;\n    }\n    if (data_size == 0) {\n      return HAL_ERROR;\n    }\n    start_tick = HAL_GetTick();\n    do {\n      i2c_instance = i2c_handle->Instance;\n      if ((~i2c_instance->SR2 & 2) != 0) {\n        if (i2c_handle->Lock == HAL_LOCKED) {\n          return HAL_BUSY;\n        }\n        cr1_value = i2c_instance->CR1;\n        i2c_handle->Lock = HAL_LOCKED;\n        i2c_instance->CR1 = cr1_value & 0xfffff7ff;\n        i2c_handle->State = HAL_I2C_STATE_BUSY_TX;\n        i2c_handle->Mode = HAL_I2C_MODE_MEM;\n        i2c_handle->ErrorCode = 0;\n        hal_status = I2C_RequestMemoryWrite(i2c_handle,device_address,memory_address,memory_address_size,timeout);\n        if (hal_status != HAL_OK) {\n          i2c_handle->Lock = HAL_UNLOCKED;\n          if (i2c_handle->ErrorCode == 4) {\n            return HAL_ERROR;\n          }\n          return HAL_TIMEOUT;\n        }\n        goto LAB_080018e2;\n      }\n      current_tick = HAL_GetTick();\n    } while (current_tick - start_tick < 0x2711);\n    i2c_handle->Lock = HAL_UNLOCKED;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n  }\n  return HAL_BUSY;\n  while (data_size != 0) {\nLAB_080018e2:\n    hal_status = I2C_WaitOnTXEFlagUntiltimeout(i2c_handle,timeout);\n    if (hal_status != HAL_OK) goto LAB_080018ee;\n    i2c_instance = i2c_handle->Instance;\n    i2c_instance->DR = (uint)*data_buffer;\n    if ((int)(i2c_instance->SR1 << 0x1d) < 0) {\n      if ((uint16_t)(data_size - 1) == 0) break;\n      data_size = data_size - 2;\n      i2c_instance->DR = (uint)data_buffer[1];\n      data_buffer = data_buffer + 2;\n    }\n    else {\n      data_buffer = data_buffer + 1;\n      data_size = data_size - 1;\n    }\n  }\n  hal_status = I2C_WaitOnTXEFlagUntiltimeout(i2c_handle,timeout);\n  if (hal_status == HAL_OK) {\n    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Mode = HAL_I2C_MODE_NONE;\n    return HAL_OK;\n  }\nLAB_080018ee:\n  if (i2c_handle->ErrorCode == 4) {\n    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    return HAL_ERROR;\n  }\n  return HAL_TIMEOUT;\n}\n\n",
            "called": [
                "I2C_RequestMemoryWrite",
                "HAL_GetTick",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001828",
            "calling": [
                "I2C_WriteByte"
            ],
            "imported": false,
            "current_name": "i2_c_memory_write_08001828"
        },
        "FUN_0800016c": {
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_var_1",
                "bVar2": "temp_byte",
                "uVar3": "temp_uint_1",
                "uVar4": "temp_uint_2",
                "uVar5": "result_1",
                "uVar7": "result_2",
                "uVar8": "result_3",
                "uVar9": "result_4",
                "uVar10": "result_5",
                "uVar11": "result_6",
                "uVar12": "result_7",
                "iVar6": "shift_count",
                "bVar13": "bool_1",
                "bVar14": "bool_2",
                "bVar15": "bool_3"
            },
            "code": "\nulonglong calculate_result_0800016c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var_1;\n  byte temp_byte;\n  uint temp_uint_1;\n  uint temp_uint_2;\n  uint result_1;\n  int shift_count;\n  uint result_2;\n  uint result_3;\n  uint result_4;\n  uint result_5;\n  uint result_6;\n  uint result_7;\n  bool bool_1;\n  bool bool_2;\n  bool bool_3;\n  \n  result_2 = input_2 << 1;\n  result_4 = input_4 << 1;\n  bool_1 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  bool_2 = bool_1 && input_1 == input_3;\n  if (!bool_1 || input_1 != input_3) {\n    bool_2 = (result_2 | input_1) == 0;\n  }\n  if (!bool_2) {\n    bool_2 = (result_4 | input_3) == 0;\n  }\n  shift_count = (int)result_2 >> 0x15;\n  if (!bool_2) {\n    bool_2 = shift_count == -1;\n  }\n  temp_var_1 = (int)result_4 >> 0x15;\n  if (!bool_2) {\n    bool_2 = temp_var_1 == -1;\n  }\n  if (bool_2) {\n    if (shift_count == -1 || temp_var_1 == -1) {\n      result_4 = input_4;\n      result_2 = input_3;\n      if (shift_count == -1) {\n        result_4 = input_2;\n        result_2 = input_1;\n      }\n      if (shift_count != -1 || temp_var_1 != -1) {\n        input_3 = result_2;\n        input_4 = result_4;\n      }\n      bool_2 = (result_2 | result_4 << 0xc) == 0;\n      if (bool_2) {\n        bool_2 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (bool_2) {\n        bool_2 = result_4 == input_4;\n      }\n      if (!bool_2) {\n        result_4 = result_4 | 0x80000;\n      }\n      return CONCAT44(result_4,result_2);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((result_2 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (result_2 >> 0x15 == 0) {\n      bool_2 = (input_1 & 0x80000000) != 0;\n      result_4 = input_2 * 2 + (uint)bool_2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)bool_2)) {\n        result_4 = result_4 | 0x80000000;\n      }\n      return CONCAT44(result_4,input_1 << 1);\n    }\n    if (result_2 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  result_2 = result_2 >> 0x15;\n  result_4 = result_4 >> 0x15;\n  result_5 = result_4 - result_2;\n  bool_2 = result_5 != 0;\n  if (result_4 < result_2) {\n    result_5 = -result_5;\n  }\n  result_3 = input_1;\n  result_1 = input_2;\n  if (bool_2 && result_2 <= result_4) {\n    result_2 = result_2 + result_5;\n    result_3 = input_3;\n    result_1 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < result_5) {\n    return CONCAT44(result_1,result_3);\n  }\n  result_4 = result_1 & 0xfffff | 0x100000;\n  if ((result_1 & 0x80000000) != 0) {\n    bool_2 = result_3 != 0;\n    result_3 = -result_3;\n    result_4 = -result_4 - (uint)bool_2;\n  }\n  result_1 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    bool_2 = input_3 != 0;\n    input_3 = -input_3;\n    result_1 = -result_1 - (uint)bool_2;\n  }\n  if (result_2 == result_5) {\n    result_1 = result_1 ^ 0x100000;\n    if (result_2 == 0) {\n      result_4 = result_4 ^ 0x100000;\n      result_2 = 1;\n    }\n    else {\n      result_5 = result_5 - 1;\n    }\n  }\n  result_7 = -result_5 + 0x20;\n  if ((int)result_5 < 0x21) {\n    result_6 = input_3 << (result_7 & 0xff);\n    input_3 = input_3 >> (result_5 & 0xff);\n    temp_uint_1 = result_3 + input_3;\n    temp_uint_2 = result_1 << (result_7 & 0xff);\n    result_7 = temp_uint_1 + temp_uint_2;\n    result_4 = result_4 + CARRY4(result_3,input_3) + ((int)result_1 >> (result_5 & 0xff)) +\n            (uint)CARRY4(temp_uint_1,temp_uint_2);\n  }\n  else {\n    result_6 = result_1 << (-result_5 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      result_6 = result_6 | 2;\n    }\n    result_1 = (int)result_1 >> (result_5 - 0x20 & 0xff);\n    result_7 = result_3 + result_1;\n    result_4 = result_4 + ((int)result_1 >> 0x1f) + (uint)CARRY4(result_3,result_1);\n  }\n  input_2 = result_4 & 0x80000000;\n  result_5 = result_4;\n  if ((int)result_4 < 0) {\n    bool_2 = result_6 == 0;\n    result_6 = -result_6;\n    result_5 = -result_7;\n    result_7 = -(uint)!bool_2 - result_7;\n    result_5 = -(uint)(bool_2 <= result_5) - result_4;\n  }\n  if (0xfffff < result_5) {\n    result_3 = result_2 - 1;\n    if (0x1fffff < result_5) {\n      result_4 = result_5 & 1;\n      result_5 = result_5 >> 1;\n      temp_byte = (byte)result_7;\n      result_7 = (uint)(result_4 != 0) << 0x1f | result_7 >> 1;\n      result_6 = (uint)(temp_byte & 1) << 0x1f | result_6 >> 1;\n      result_3 = result_2;\n      if (0xffbfffff < result_2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bool_2 = 0x7fffffff < result_6;\n    if (result_6 == 0x80000000) {\n      bool_2 = (result_7 & 1) != 0;\n    }\n    return CONCAT44(result_5 + result_3 * 0x100000 + (uint)CARRY4(result_7,(uint)bool_2) | input_2,\n                    result_7 + bool_2);\n  }\n  bool_1 = (result_6 & 0x80000000) != 0;\n  result_6 = result_6 << 1;\n  result_3 = result_7 * 2;\n  bool_2 = CARRY4(result_7,result_7);\n  result_7 = result_7 * 2 + (uint)bool_1;\n  result_5 = result_5 * 2 + (uint)(bool_2 || CARRY4(result_3,(uint)bool_1));\n  result_3 = result_2 - 2;\n  if ((result_5 & 0x100000) != 0) goto LAB_08000278;\n  result_1 = result_7;\n  result_2 = result_5;\n  if (result_5 == 0) {\n    result_1 = 0;\n    result_2 = result_7;\n  }\n  shift_count = count_leading_zeroes(result_2);\n  if (result_5 == 0) {\n    shift_count = shift_count + 0x20;\n  }\n  result_7 = shift_count - 0xb;\n  bool_3 = SBORROW4(result_7,0x20);\n  result_5 = shift_count - 0x2b;\n  bool_2 = (int)result_5 < 0;\n  bool_1 = result_5 == 0;\n  if ((int)result_7 < 0x20) {\n    bool_3 = SCARRY4(result_5,0xc);\n    shift_count = shift_count + -0x1f;\n    bool_2 = shift_count < 0;\n    bool_1 = shift_count == 0;\n    result_5 = result_7;\n    if (!bool_1 && bool_2 == bool_3) {\n      result_1 = result_2 << (result_7 & 0xff);\n      result_2 = result_2 >> (0xcU - shift_count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bool_1 || bool_2 != bool_3) {\n    result_6 = 0x20 - result_5;\n  }\n  result_2 = result_2 << (result_5 & 0xff);\n  if (bool_1 || bool_2 != bool_3) {\n    result_2 = result_2 | result_1 >> (result_6 & 0xff);\n  }\n  if (bool_1 || bool_2 != bool_3) {\n    result_1 = result_1 << (result_5 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result_7 <= (int)result_3) {\n    return CONCAT44(result_2 + (result_3 - result_7) * 0x100000 | input_2,result_1);\n  }\n  result_5 = ~(result_3 - result_7);\n  if ((int)result_5 < 0x1f) {\n    shift_count = result_5 - 0x13;\n    if (shift_count != 0 && shift_count < 0 == SCARRY4(result_5 - 0x1f,0xc)) {\n      return CONCAT44(result_4,result_1 >> (0x20 - (0xcU - shift_count) & 0xff) | result_2 << (0xcU - shift_count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_5 = result_5 + 1;\n    return CONCAT44(input_2 | result_2 >> (result_5 & 0xff),\n                    result_1 >> (result_5 & 0xff) | result_2 << (0x20 - result_5 & 0xff));\n  }\n  return CONCAT44(result_4,result_2 >> (result_5 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800016c",
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "__ieee754_sqrt",
                "__aeabi_drsub",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_result_0800016c"
        },
        "FUN_08001b58": {
            "renaming": {
                "FUN_08001b58": "configure_oscillators_08001b58",
                "RCC_OscInitStruct": "osc_config",
                "puVar1": "reg_ptr1",
                "puVar2": "reg_ptr2",
                "uVar3": "current_tick",
                "uVar4": "elapsed_tick",
                "iVar5": "leading_zeroes",
                "uVar6": "temp_var",
                "tmpreg": "temp_reg"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\nHAL_StatusTypeDef Configure_Oscillators_08001b58(RCC_OscInitTypeDef *osc_config)\n\n{\n  uint *reg_ptr1;\n  uint *reg_ptr2;\n  uint32_t current_tick;\n  uint32_t elapsed_tick;\n  int leading_zeroes;\n  uint temp_var;\n  uint32_t temp_reg;\n  \n  reg_ptr1 = DAT_08001e70;\n  if ((int)(osc_config->OscillatorType << 0x1f) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 4) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && ((int)(DAT_08001e70[1] << 0xf) < 0)))) {\n      temp_var = count_leading_zeroes(0x4000);\n      if (((int)((*DAT_08001e70 >> (temp_var & 0x1f)) << 0x1f) < 0) &&\n         (osc_config->HSEState == 0)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      current_tick = osc_config->HSEState;\n      if (current_tick == 0x10000) {\nLAB_08001c1e:\n        temp_var = *reg_ptr1 | 0x10000;\n      }\n      else {\n        if (current_tick == 0) {\n          *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n          *reg_ptr1 = *reg_ptr1 & 0xfffbffff;\n          current_tick = HAL_GetTick();\n          while (temp_var = count_leading_zeroes(0x4000),\n                (int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f) < 0) {\n            elapsed_tick = HAL_GetTick();\n            if (100 < elapsed_tick - current_tick) {\n              return HAL_TIMEOUT;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (current_tick == 0x50000) {\n          *DAT_08001e70 = *DAT_08001e70 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        *DAT_08001e70 = *DAT_08001e70 & 0xfffeffff;\n        temp_var = *reg_ptr1 & 0xfffbffff;\n      }\n      *reg_ptr1 = temp_var;\n      current_tick = HAL_GetTick();\n      while (temp_var = count_leading_zeroes(0x4000), -1 < (int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f))\n      {\n        elapsed_tick = HAL_GetTick();\n        if (100 < elapsed_tick - current_tick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  reg_ptr1 = DAT_08001e70;\n  if ((int)(osc_config->OscillatorType << 0x1e) < 0) {\n    if (((DAT_08001e70[1] & 0xc) == 0) ||\n       (((DAT_08001e70[1] & 0xc) == 8 && (-1 < (int)(DAT_08001e70[1] << 0xf))))) {\n      temp_var = count_leading_zeroes(0x40000000);\n      if (((int)((*DAT_08001e70 >> (temp_var & 0x1f)) << 0x1f) < 0) &&\n         (osc_config->HSIState != 1)) {\n        return HAL_ERROR;\n      }\n    }\n    else {\n      if (osc_config->HSIState == 0) {\n        leading_zeroes = count_leading_zeroes(0x80000000);\n        *(undefined4 *)(leading_zeroes * 4 + 0x42420000) = 0;\n        current_tick = HAL_GetTick();\n        while (temp_var = count_leading_zeroes(0x40000000),\n              (int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f) < 0) {\n          elapsed_tick = HAL_GetTick();\n          if (2 < elapsed_tick - current_tick) {\n            return HAL_TIMEOUT;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      leading_zeroes = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(leading_zeroes * 4 + 0x42420000) = 1;\n      current_tick = HAL_GetTick();\n      while (temp_var = count_leading_zeroes(0x40000000),\n            -1 < (int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f)) {\n        elapsed_tick = HAL_GetTick();\n        if (2 < elapsed_tick - current_tick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    temp_var = count_leading_zeroes(0x1f000000);\n    *reg_ptr1 = osc_config->HSICalibrationValue << (temp_var & 0xff) | *reg_ptr1 & 0xffffff07;\n  }\nLAB_08001b6c:\n  reg_ptr1 = DAT_08001e70;\n  if ((int)(osc_config->OscillatorType << 0x1c) < 0) {\n    if (osc_config->LSIState == 0) {\n      leading_zeroes = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + leading_zeroes * 4) = 0;\n      current_tick = HAL_GetTick();\n      while (temp_var = count_leading_zeroes(0x40000000),\n            (int)((reg_ptr1[9] >> (temp_var & 0x1f)) << 0x1f) < 0) {\n        elapsed_tick = HAL_GetTick();\n        if (2 < elapsed_tick - current_tick) {\n          return HAL_TIMEOUT;\n        }\n      }\n    }\n    else {\n      leading_zeroes = count_leading_zeroes(0x80000000);\n      *(undefined4 *)(DAT_08001e74 + leading_zeroes * 4) = 1;\n      current_tick = HAL_GetTick();\n      while (temp_var = count_leading_zeroes(0x40000000),\n            -1 < (int)((reg_ptr1[9] >> (temp_var & 0x1f)) << 0x1f)) {\n        elapsed_tick = HAL_GetTick();\n        if (2 < elapsed_tick - current_tick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  reg_ptr2 = DAT_08001e78;\n  reg_ptr1 = DAT_08001e70;\n  if (-1 < (int)(osc_config->OscillatorType << 0x1d)) goto LAB_08001bc2;\n  DAT_08001e70[7] = DAT_08001e70[7] | 0x10000000;\n  *reg_ptr2 = *reg_ptr2 | 0x100;\n  current_tick = HAL_GetTick();\n  while (-1 < (int)(*reg_ptr2 << 0x17)) {\n    elapsed_tick = HAL_GetTick();\n    if (100 < elapsed_tick - current_tick) {\n      return HAL_TIMEOUT;\n    }\n  }\n  current_tick = osc_config->LSEState;\n  if (current_tick == 1) {\nLAB_08001e1a:\n    temp_var = reg_ptr1[8] | 1;\n  }\n  else {\n    if (current_tick == 0) {\n      reg_ptr1[8] = reg_ptr1[8] & 0xfffffffe;\n      reg_ptr1[8] = reg_ptr1[8] & 0xfffffffb;\n      current_tick = HAL_GetTick();\n      while (temp_var = count_leading_zeroes(0x40000000),\n            (int)((reg_ptr1[8] >> (temp_var & 0x1f)) << 0x1f) < 0) {\n        elapsed_tick = HAL_GetTick();\n        if (5000 < elapsed_tick - current_tick) {\n          return HAL_TIMEOUT;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (current_tick == 5) {\n      reg_ptr1[8] = reg_ptr1[8] | 4;\n      goto LAB_08001e1a;\n    }\n    reg_ptr1[8] = reg_ptr1[8] & 0xfffffffe;\n    temp_var = reg_ptr1[8] & 0xfffffffb;\n  }\n  reg_ptr1[8] = temp_var;\n  current_tick = HAL_GetTick();\n  while (temp_var = count_leading_zeroes(0x40000000), -1 < (int)((reg_ptr1[8] >> (temp_var & 0x1f)) << 0x1f)\n        ) {\n    elapsed_tick = HAL_GetTick();\n    if (5000 < elapsed_tick - current_tick) {\n      return HAL_TIMEOUT;\n    }\n  }\nLAB_08001bc2:\n  reg_ptr1 = DAT_08002004;\n  current_tick = (osc_config->PLL).PLLState;\n  if (current_tick == 0) {\n    return HAL_OK;\n  }\n  if ((DAT_08002004[1] & 0xc) != 8) {\n    if (current_tick != 2) {\n      leading_zeroes = count_leading_zeroes(0x80);\n      *(undefined4 *)(leading_zeroes * 4 + 0x42420000) = 0;\n      current_tick = HAL_GetTick();\n      do {\n        temp_var = count_leading_zeroes(0x40);\n        if (-1 < (int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f)) {\n          return HAL_OK;\n        }\n        elapsed_tick = HAL_GetTick();\n      } while (elapsed_tick - current_tick < 3);\n      return HAL_TIMEOUT;\n    }\n    leading_zeroes = count_leading_zeroes(0x80);\n    *(undefined4 *)(leading_zeroes * 4 + 0x42420000) = 0;\n    current_tick = HAL_GetTick();\n    do {\n      temp_var = count_leading_zeroes(0x40);\n      if (-1 < (int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f)) {\n        temp_var = (osc_config->PLL).PLLSource;\n        if (temp_var == 0x10000) {\n          reg_ptr1[1] = reg_ptr1[1] & 0xfffdffff | osc_config->HSEPredivValue;\n        }\n        reg_ptr1[1] = temp_var | (osc_config->PLL).PLLMUL | reg_ptr1[1] & 0xffc2ffff;\n        leading_zeroes = count_leading_zeroes(0x80);\n        *(undefined4 *)(leading_zeroes * 4 + 0x42420000) = 1;\n        current_tick = HAL_GetTick();\n        do {\n          temp_var = count_leading_zeroes(0x40);\n          if ((int)((*reg_ptr1 >> (temp_var & 0x1f)) << 0x1f) < 0) {\n            return HAL_OK;\n          }\n          elapsed_tick = HAL_GetTick();\n        } while (elapsed_tick - current_tick < 3);\n        return HAL_TIMEOUT;\n      }\n      elapsed_tick = HAL_GetTick();\n    } while (elapsed_tick - current_tick < 3);\n    return HAL_TIMEOUT;\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_Delay",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001b58",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_oscillators_08001b58"
        },
        "FUN_0800290c": {
            "renaming": {
                "FUN_0800290c": "uart_receive_0800290c",
                "huart": "uart_handle",
                "uVar1": "temp_var1",
                "bVar2": "byte_data",
                "pUVar3": "uart_instance",
                "uVar4": "remaining_count",
                "puVar5": "rx_buffer_ptr",
                "puVar6": "next_buffer_ptr",
                "bVar7": "state_check"
            },
            "code": "\nHAL_StatusTypeDef UART_Receive_0800290c(UART_HandleTypeDef *uart_handle)\n\n{\n  uint32_t temp_var1;\n  byte byte_data;\n  USART_TypeDef *uart_instance;\n  uint16_t remaining_count;\n  ushort *rx_buffer_ptr;\n  ushort *next_buffer_ptr;\n  bool state_check;\n  \n  if ((uart_handle->State & 0xef) != 0x22) {\n    return HAL_BUSY;\n  }\n  temp_var1 = (uart_handle->Init).Parity;\n  uart_instance = uart_handle->Instance;\n  rx_buffer_ptr = (ushort *)uart_handle->pRxBuffPtr;\n  if ((uart_handle->Init).WordLength == 0x1000) {\n    if (temp_var1 == 0) {\n      next_buffer_ptr = rx_buffer_ptr + 1;\n      *rx_buffer_ptr = (ushort)((uart_instance->DR << 0x17) >> 0x17);\n    }\n    else {\n      next_buffer_ptr = (ushort *)((int)rx_buffer_ptr + 1);\n      *rx_buffer_ptr = (ushort)uart_instance->DR & 0xff;\n    }\n    uart_handle->pRxBuffPtr = (uint8_t *)next_buffer_ptr;\n  }\n  else {\n    if (temp_var1 == 0) {\n      byte_data = (byte)uart_instance->DR;\n      uart_handle->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n    }\n    else {\n      temp_var1 = uart_instance->DR;\n      uart_handle->pRxBuffPtr = (uint8_t *)((int)rx_buffer_ptr + 1);\n      byte_data = (byte)temp_var1 & 0x7f;\n    }\n    *(byte *)rx_buffer_ptr = byte_data;\n  }\n  remaining_count = uart_handle->RxXferCount - 1;\n  uart_handle->RxXferCount = remaining_count;\n  if (remaining_count == 0) {\n    uart_instance = uart_handle->Instance;\n    uart_instance->CR1 = uart_instance->CR1 & 0xffffffdf;\n    temp_var1 = (uint32_t)uart_handle->State;\n    state_check = temp_var1 != 0x32;\n    if (state_check) {\n      temp_var1 = uart_instance->CR1 & 0xfffffeff;\n    }\n    else {\n      uart_instance = (USART_TypeDef *)0x12;\n    }\n    if (state_check) {\n      uart_instance->CR1 = temp_var1;\n      temp_var1 = uart_instance->CR3 & 0xfffffffe;\n    }\n    if (state_check) {\n      uart_instance->CR3 = temp_var1;\n      uart_instance = (USART_TypeDef *)0x1;\n    }\n    uart_handle->State = (HAL_UART_StateTypeDef)uart_instance;\n    HAL_UART_RxCpltCallback(uart_handle);\n  }\n  return HAL_OK;\n}\n\n",
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290c",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "uart_receive_0800290c"
        },
        "FUN_080028a6": {
            "renaming": {
                "FUN_080028a6": "uart_receive_data_080028a6",
                "huart": "uart_handle",
                "pData": "data_buffer",
                "Size": "buffer_size",
                "HVar1": "uart_state",
                "uVar2": "control_register1",
                "pUVar3": "usart_instance"
            },
            "code": "\nHAL_StatusTypeDef UART_ReceiveData_080028a6(UART_HandleTypeDef *uart_handle,uint8_t *data_buffer,uint16_t buffer_size)\n\n{\n  HAL_UART_StateTypeDef uart_state;\n  uint control_register1;\n  USART_TypeDef *usart_instance;\n  \n  if ((uart_handle->State == HAL_UART_STATE_READY) || (uart_handle->State == HAL_UART_STATE_BUSY_TX)) {\n    if ((data_buffer == (uint8_t *)0x0) || (buffer_size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n      uart_handle->Lock = HAL_LOCKED;\n      uart_handle->ErrorCode = 0;\n      uart_handle->RxXferbuffer_size = buffer_size;\n      uart_handle->RxXferCount = buffer_size;\n      uart_handle->Lock = HAL_UNLOCKED;\n      if (uart_handle->State == HAL_UART_STATE_BUSY_TX) {\n        uart_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        uart_state = HAL_UART_STATE_BUSY_RX;\n      }\n      usart_instance = uart_handle->Instance;\n      uart_handle->State = uart_state;\n      control_register1 = usart_instance->CR1;\n      uart_handle->pRxBuffPtr = data_buffer;\n      usart_instance->CR1 = control_register1 | 0x100;\n      usart_instance->CR3 = usart_instance->CR3 | 1;\n      usart_instance->CR1 = usart_instance->CR1 | 0x20;\n      return HAL_OK;\n    }\n  }\n  return HAL_BUSY;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028a6",
            "calling": [
                "HAL_UART_RxCpltCallback",
                "serialBegin"
            ],
            "imported": false,
            "current_name": "uart_receive_data_080028a6"
        },
        "FUN_0800290a": {
            "renaming": {
                "FUN_0800290a": "do_nothing_0800290a"
            },
            "code": "\nvoid do_nothing_0800290a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800290a",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_0800290a"
        },
        "FUN_08004300": {
            "renaming": {
                "FUN_08004300": "transmit_encoded_data_08004300",
                "code": "key",
                "data": "inputData",
                "data_length": "inputDataLength",
                "ch": "checksum",
                "pbVar1": "currentBytePtr"
            },
            "code": "\nvoid transmitEncodedData_08004300(uint8_t key,uint8_t *inputData,uint16_t inputDataLength)\n\n{\n  byte checksum;\n  byte *currentBytePtr;\n  \n  serialPrint(PTR_DAT_08004344);\n  serialWrite((byte)inputDataLength);\n  checksum = (byte)inputDataLength ^ key;\n  serialWrite(key);\n  for (currentBytePtr = inputData; (int)currentBytePtr - (int)inputData < (int)(uint)inputDataLength; currentBytePtr = currentBytePtr + 1) {\n    serialWrite(*currentBytePtr);\n    checksum = checksum ^ *currentBytePtr;\n  }\n  serialWrite(checksum);\n  return;\n}\n\n",
            "called": [
                "serialPrint",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004300",
            "calling": [
                "MSP_SendStatus",
                "MSP_SendPID",
                "MSP_SendAltitude",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "imported": false,
            "current_name": "transmit_encoded_data_08004300"
        },
        "FUN_08005630": {
            "renaming": {
                "FUN_08005630": "memcpy_custom_08005630",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "src_end",
                "puVar2": "dest_iter"
            },
            "code": "\nvoid * memcpy_custom_08005630(void *dest,void *src,size_t n)\n\n{\n  undefined *src_end;\n  undefined *dest_iter;\n  \n  dest_iter = (undefined *)((int)dest + -1);\n  src_end = (undefined *)(n + (int)src);\n  for (; (undefined *)src != src_end; src = (void *)((int)src + 1)) {\n    dest_iter = dest_iter + 1;\n    *dest_iter = *src;\n                    /* WARNING: Load size is inaccurate */\n  }\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005630",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "memcpy_custom_08005630"
        },
        "FUN_08003330": {
            "renaming": {
                "FUN_08003330": "FUNC_08003330"
            },
            "code": "\nvoid FUNC_08003330\n               (float ax,float ay,float az,float gx,float gy,float gz,float mx,float my,float mz,\n               float *angle)\n\n{\n  undefined *puVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  int iVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined4 uVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  undefined4 uVar15;\n  undefined4 uVar16;\n  undefined4 uVar17;\n  undefined4 uVar18;\n  undefined4 uVar19;\n  int iVar20;\n  undefined4 uVar21;\n  undefined4 uVar22;\n  undefined4 uVar23;\n  undefined4 uVar24;\n  undefined4 uVar25;\n  undefined4 uVar26;\n  int iVar27;\n  undefined4 in_r2;\n  undefined4 uVar28;\n  int iVar29;\n  undefined4 uVar30;\n  undefined4 uVar31;\n  undefined8 uVar32;\n  undefined8 uVar33;\n  undefined4 in_stack_00000000;\n  undefined4 in_stack_00000004;\n  undefined4 in_stack_00000008;\n  undefined4 in_stack_0000000c;\n  undefined4 in_stack_00000010;\n  undefined4 *in_stack_00000014;\n  undefined4 in_stack_ffffff78;\n  float hy;\n  float hx;\n  \n  uVar28 = *(undefined4 *)PTR_q_080035d8;\n  iVar29 = *(int *)(PTR_q_080035d8 + 4);\n  uVar31 = *(undefined4 *)(PTR_q_080035d8 + 8);\n  uVar30 = *(undefined4 *)(PTR_q_080035d8 + 0xc);\n  uVar2 = __aeabi_fmul(ax,mz,mz);\n  uVar3 = __aeabi_fmul(angle);\n  uVar2 = __addsf3(uVar2,uVar3);\n  uVar3 = __aeabi_fmul(in_r2);\n  __addsf3(uVar2,uVar3);\n  __aeabi_f2d();\n  sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n  uVar2 = __truncdfsf2();\n  iVar4 = __aeabi_fcmpeq(uVar2,0);\n  if (iVar4 == 0) {\n    uVar3 = __aeabi_fmul(in_stack_00000008);\n    uVar5 = __aeabi_fmul(in_stack_0000000c);\n    uVar3 = __addsf3(uVar3,uVar5);\n    uVar5 = __aeabi_fmul(in_stack_00000010);\n    __addsf3(uVar3,uVar5);\n    __aeabi_f2d();\n    sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n    uVar3 = __truncdfsf2();\n    iVar4 = __aeabi_fcmpeq(uVar3,0);\n    if (iVar4 == 0) {\n      uVar32 = __aeabi_f2d();\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar5 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000000);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar6 = __truncdfsf2();\n      uVar32 = __aeabi_f2d(in_stack_00000004);\n      __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_080035d0,DAT_080035d4);\n      uVar7 = __truncdfsf2();\n      iVar4 = __addsf3(uVar28);\n      uVar8 = __addsf3(iVar29);\n      iVar9 = __addsf3(uVar31,uVar31);\n      uVar10 = __addsf3(uVar30,uVar30);\n      uVar11 = __aeabi_fmul(uVar28);\n      uVar12 = __aeabi_fmul(uVar28,iVar29);\n      uVar13 = __aeabi_fmul(uVar28,uVar31);\n      uVar14 = __aeabi_fmul(iVar29);\n      uVar15 = __aeabi_fmul(iVar29,uVar30);\n      uVar16 = __aeabi_fmul(uVar31,uVar31);\n      uVar17 = __aeabi_fmul(uVar30,uVar30);\n      uVar2 = __aeabi_fdiv(0x3f800000,uVar2);\n      uVar3 = __aeabi_fdiv(0x3f800000,uVar3);\n      uVar18 = __aeabi_fmul(in_stack_00000008,uVar3);\n      uVar19 = __aeabi_fmul(in_stack_0000000c,uVar3);\n      uVar3 = __aeabi_fmul(in_stack_00000010,uVar3);\n      iVar20 = __aeabi_fmul(iVar4,uVar18);\n      uVar21 = __aeabi_fmul(iVar4,uVar19);\n      uVar22 = __aeabi_fmul(iVar4,uVar3);\n      uVar23 = __aeabi_fmul(uVar8,uVar18);\n      uVar24 = __aeabi_fmul(uVar11,uVar18);\n      uVar25 = __aeabi_fmul(uVar30,uVar21);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar31,uVar22);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar18);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar19);\n      uVar25 = __aeabi_fmul(uVar25,uVar31);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar8,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar24 = __addsf3(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar18);\n      uVar24 = __aeabi_fsub(uVar24,uVar25);\n      uVar25 = __aeabi_fmul(uVar30,iVar20);\n      uVar26 = __aeabi_fmul(uVar11,uVar19);\n      uVar25 = __addsf3(uVar25,uVar26);\n      uVar22 = __aeabi_fmul(iVar29,uVar22);\n      uVar22 = __aeabi_fsub(uVar25,uVar22);\n      uVar25 = __aeabi_fmul(uVar31,uVar23);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar14,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar16,uVar19);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(iVar9,uVar3);\n      uVar25 = __aeabi_fmul(uVar25,uVar30);\n      uVar22 = __addsf3(uVar22,uVar25);\n      uVar25 = __aeabi_fmul(uVar17,uVar19);\n      uVar22 = __aeabi_fsub(uVar22,uVar25);\n      uVar24 = __aeabi_fmul(uVar24,uVar24);\n      uVar22 = __aeabi_fmul(uVar22,uVar22);\n      __addsf3(uVar24,uVar22);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      iVar27 = __truncdfsf2();\n      uVar22 = __aeabi_fmul(iVar20 + -0x80000000,uVar31);\n      uVar21 = __aeabi_fmul(iVar29,uVar21);\n      uVar21 = __addsf3(uVar22,uVar21);\n      uVar11 = __aeabi_fmul(uVar11,uVar3);\n      uVar11 = __addsf3(uVar21,uVar11);\n      uVar21 = __aeabi_fmul(uVar30,uVar23);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar14,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(iVar9,uVar19);\n      uVar21 = __aeabi_fmul(uVar21,uVar30);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar16,uVar3);\n      uVar11 = __aeabi_fsub(uVar11,uVar21);\n      uVar21 = __aeabi_fmul(uVar17,uVar3);\n      uVar11 = __addsf3(uVar11,uVar21);\n      uVar21 = __addsf3(uVar11,uVar11);\n      uVar22 = __addsf3(uVar15);\n      uVar23 = __aeabi_fmul(uVar31,iVar4);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(mz,uVar2);\n      uVar22 = __aeabi_fsub(uVar22,uVar23);\n      uVar23 = __aeabi_fmul(uVar30,iVar9);\n      uVar24 = __addsf3(uVar12);\n      uVar23 = __addsf3(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(angle,uVar2);\n      uVar23 = __aeabi_fsub(uVar23,uVar24);\n      uVar24 = __aeabi_fmul(uVar31,uVar11);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar16);\n      uVar17 = __aeabi_fsub(uVar25,uVar17);\n      uVar17 = __aeabi_fmul(uVar17,iVar27);\n      uVar25 = __aeabi_fsub(uVar15,uVar13);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar17 = __addsf3(uVar17,uVar25);\n      uVar17 = __aeabi_fsub(uVar17,uVar18);\n      uVar18 = __aeabi_fmul(iVar29,uVar11);\n      uVar25 = __aeabi_fmul(iVar29,uVar31);\n      uVar26 = __aeabi_fmul(uVar28,uVar30);\n      uVar25 = __aeabi_fsub(uVar25,uVar26);\n      uVar25 = __aeabi_fmul(uVar25,iVar27);\n      uVar26 = __aeabi_fmul(uVar31,uVar30);\n      uVar12 = __addsf3(uVar26,uVar12);\n      uVar12 = __aeabi_fmul(uVar12,uVar11);\n      uVar12 = __addsf3(uVar25,uVar12);\n      uVar12 = __aeabi_fsub(uVar12,uVar19);\n      uVar19 = __aeabi_fmul(uVar31,iVar27);\n      uVar25 = __aeabi_fsub(0x3f000000,uVar14);\n      uVar25 = __aeabi_fsub(uVar25,uVar16);\n      uVar25 = __aeabi_fmul(uVar25,uVar11);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar13 = __aeabi_fmul(uVar13,iVar27);\n      uVar13 = __addsf3(uVar25,uVar13);\n      uVar3 = __aeabi_fsub(uVar13,uVar3);\n      uVar13 = __aeabi_fmul(iVar9 + -0x80000000,uVar22);\n      uVar15 = __aeabi_fmul(uVar8,uVar23);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar24,uVar17);\n      uVar13 = __aeabi_fsub(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar30,iVar27 + -0x80000000);\n      uVar15 = __addsf3(uVar15,uVar18);\n      uVar15 = __aeabi_fmul(uVar15,uVar12);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar15 = __aeabi_fmul(uVar19,uVar3);\n      uVar13 = __addsf3(uVar13,uVar15);\n      uVar14 = __addsf3(uVar14);\n      uVar14 = __aeabi_fsub(0x3f800000,uVar14);\n      uVar15 = __addsf3(uVar16);\n      uVar14 = __aeabi_fsub(uVar14,uVar15);\n      uVar2 = __aeabi_fmul(in_r2,uVar2);\n      uVar2 = __aeabi_fsub(uVar14,uVar2);\n      uVar14 = __aeabi_fmul(uVar30,uVar11);\n      uVar11 = __aeabi_fmul(uVar28,uVar11);\n      uVar15 = __aeabi_fmul(uVar10,uVar22);\n      uVar16 = __aeabi_fmul(iVar4,uVar23);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(iVar29,0x40800000);\n      uVar16 = __aeabi_fmul(uVar16,uVar2);\n      uVar15 = __aeabi_fsub(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar17,uVar14);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __addsf3(uVar19,uVar11);\n      uVar16 = __aeabi_fmul(uVar16,uVar12);\n      uVar15 = __addsf3(uVar15,uVar16);\n      uVar16 = __aeabi_fmul(uVar30,iVar27);\n      uVar19 = __aeabi_fmul(iVar29,uVar21);\n      uVar16 = __aeabi_fsub(uVar16,uVar19);\n      uVar16 = __aeabi_fmul(uVar16,uVar3);\n      uVar15 = __addsf3(uVar15,uVar16);\n      iVar20 = __addsf3(iVar27,iVar27);\n      uVar16 = __aeabi_fmul(iVar29,iVar27);\n      uVar19 = __aeabi_fmul(iVar4 + -0x80000000,uVar22);\n      uVar10 = __aeabi_fmul(uVar10,uVar23);\n      uVar10 = __addsf3(uVar19,uVar10);\n      uVar19 = __aeabi_fmul(uVar31,0x40800000);\n      uVar2 = __aeabi_fmul(uVar19,uVar2);\n      uVar2 = __aeabi_fsub(uVar10,uVar2);\n      uVar10 = __aeabi_fmul(uVar31,iVar20 + -0x80000000);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __addsf3(uVar14,uVar16);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27);\n      uVar11 = __aeabi_fmul(uVar31,uVar21);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar3);\n      uVar2 = __addsf3(uVar2,uVar10);\n      uVar8 = __aeabi_fmul(uVar8,uVar22);\n      uVar10 = __aeabi_fmul(iVar9,uVar23);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar30,iVar20 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar18);\n      uVar10 = __aeabi_fmul(uVar10,uVar17);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar28,iVar27 + -0x80000000);\n      uVar10 = __addsf3(uVar10,uVar24);\n      uVar10 = __aeabi_fmul(uVar10,uVar12);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar3 = __aeabi_fmul(uVar3,uVar16);\n      uVar3 = __addsf3(uVar8,uVar3);\n      uVar8 = __aeabi_fmul(uVar13);\n      uVar10 = __aeabi_fmul(uVar15);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar2,uVar2);\n      uVar8 = __addsf3(uVar8,uVar10);\n      uVar10 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar8,uVar10);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(iVar29,in_stack_ffffff78));\n      uVar8 = __truncdfsf2();\n      uVar8 = __aeabi_fdiv(0x3f800000,uVar8);\n      puVar1 = PTR_deltat_08003d84;\n      uVar12 = *(undefined4 *)PTR_beta_08003d80;\n      uVar14 = *(undefined4 *)PTR_beta_08003d80;\n      uVar16 = *(undefined4 *)PTR_beta_08003d80;\n      uVar17 = *(undefined4 *)PTR_beta_08003d80;\n      uVar10 = __aeabi_fmul(iVar29 + -0x80000000,uVar5);\n      uVar11 = __aeabi_fmul(uVar31,uVar6);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar11 = __aeabi_fmul(uVar30,uVar7);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,0x3f000000);\n      uVar11 = __aeabi_fmul(uVar13,uVar8);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __aeabi_fmul(uVar11,uVar12);\n      uVar10 = __aeabi_fsub(uVar10,uVar11);\n      uVar10 = __aeabi_fmul(uVar10,uVar13);\n      uVar10 = __addsf3(uVar10,uVar28);\n      uVar11 = __aeabi_fmul(uVar28,uVar5);\n      uVar12 = __aeabi_fmul(uVar31,uVar7);\n      uVar13 = *(undefined4 *)puVar1;\n      uVar11 = __addsf3(uVar11,uVar12);\n      uVar12 = __aeabi_fmul(uVar30,uVar6);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,0x3f000000);\n      uVar12 = __aeabi_fmul(uVar15,uVar8);\n      uVar12 = __aeabi_fmul(uVar12,uVar14);\n      uVar11 = __aeabi_fsub(uVar11,uVar12);\n      uVar11 = __aeabi_fmul(uVar11,uVar13);\n      uVar11 = __addsf3(uVar11,iVar29);\n      uVar14 = *(undefined4 *)puVar1;\n      uVar12 = __aeabi_fmul(uVar28,uVar6);\n      uVar13 = __aeabi_fmul(iVar29,uVar7);\n      uVar12 = __aeabi_fsub(uVar12,uVar13);\n      uVar13 = __aeabi_fmul(uVar30,uVar5);\n      uVar12 = __addsf3(uVar12,uVar13);\n      uVar12 = __aeabi_fmul(uVar12,0x3f000000);\n      uVar2 = __aeabi_fmul(uVar2,uVar8);\n      uVar2 = __aeabi_fmul(uVar2,uVar16);\n      uVar2 = __aeabi_fsub(uVar12,uVar2);\n      uVar2 = __aeabi_fmul(uVar2,uVar14);\n      uVar2 = __addsf3(uVar2,uVar31);\n      uVar28 = __aeabi_fmul(uVar28,uVar7);\n      uVar6 = __aeabi_fmul(iVar29,uVar6);\n      uVar28 = __addsf3(uVar28,uVar6);\n      uVar31 = __aeabi_fmul(uVar31,uVar5);\n      uVar31 = __aeabi_fsub(uVar28,uVar31);\n      uVar31 = __aeabi_fmul(uVar31,0x3f000000);\n      uVar3 = __aeabi_fmul(uVar3,uVar8);\n      uVar3 = __aeabi_fmul(uVar3,uVar17);\n      uVar5 = *(undefined4 *)puVar1;\n      uVar3 = __aeabi_fsub(uVar31,uVar3);\n      uVar3 = __aeabi_fmul(uVar3,uVar5);\n      uVar3 = __addsf3(uVar3,uVar30);\n      uVar30 = __aeabi_fmul(uVar10,uVar10);\n      uVar31 = __aeabi_fmul(uVar11,uVar11);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar2,uVar2);\n      uVar30 = __addsf3(uVar30,uVar31);\n      uVar31 = __aeabi_fmul(uVar3,uVar3);\n      __addsf3(uVar30,uVar31);\n      __aeabi_f2d();\n      sqrt((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar30 = __truncdfsf2();\n      uVar30 = __aeabi_fdiv(0x3f800000,uVar30);\n      uVar31 = __aeabi_fmul(uVar10,uVar30);\n      puVar1 = PTR_q_08003d88;\n      *(undefined4 *)PTR_q_08003d88 = uVar31;\n      uVar5 = __aeabi_fmul(uVar11,uVar30);\n      *(undefined4 *)(puVar1 + 4) = uVar5;\n      uVar2 = __aeabi_fmul(uVar2,uVar30);\n      *(undefined4 *)(puVar1 + 8) = uVar2;\n      uVar3 = __aeabi_fmul(uVar3,uVar30);\n      *(undefined4 *)(puVar1 + 0xc) = uVar3;\n      uVar3 = __aeabi_fmul(uVar5,uVar3);\n      uVar2 = __aeabi_fmul(uVar31,uVar2);\n      uVar2 = __aeabi_fsub(uVar3,uVar2);\n      __addsf3(uVar2,uVar2);\n      __aeabi_f2d();\n      asin((double)CONCAT44(uVar28,in_stack_ffffff78));\n      uVar32 = __muldf3();\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003d78,DAT_08003d7c);\n      uVar2 = __truncdfsf2();\n      *in_stack_00000014 = uVar2;\n      uVar31 = *(undefined4 *)puVar1;\n      uVar5 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar31,uVar31);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar30 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar30,uVar30);\n      __addsf3(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar28,uVar30);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[1] = uVar2;\n      uVar30 = *(undefined4 *)puVar1;\n      uVar31 = *(undefined4 *)(puVar1 + 4);\n      uVar2 = __aeabi_fmul(uVar30,uVar30);\n      uVar3 = __aeabi_fmul(uVar31,uVar31);\n      uVar2 = __addsf3(uVar2,uVar3);\n      uVar5 = *(undefined4 *)(puVar1 + 8);\n      uVar3 = __aeabi_fmul(uVar5,uVar5);\n      uVar2 = __aeabi_fsub(uVar2,uVar3);\n      uVar28 = *(undefined4 *)(puVar1 + 0xc);\n      uVar3 = __aeabi_fmul(uVar28,uVar28);\n      __aeabi_fsub(uVar2,uVar3);\n      uVar32 = __aeabi_f2d();\n      uVar2 = __aeabi_fmul(uVar31,uVar5);\n      uVar3 = __aeabi_fmul(uVar30,uVar28);\n      uVar2 = __addsf3(uVar2,uVar3);\n      __addsf3(uVar2,uVar2);\n      uVar33 = __aeabi_f2d();\n      uVar32 = atan2((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar32,\n                     (int)((ulonglong)uVar32 >> 0x20));\n      uVar32 = __muldf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),0,DAT_08003ea8);\n      __divdf3((int)uVar32,(int)((ulonglong)uVar32 >> 0x20),DAT_08003ea0,DAT_08003ea4);\n      uVar2 = __truncdfsf2();\n      in_stack_00000014[2] = uVar2;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "asin",
                "__aeabi_fmul",
                "__divdf3",
                "__addsf3",
                "__muldf3",
                "sqrt",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "atan2",
                "__aeabi_fcmpeq"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003330",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "FUNC_08003330"
        },
        "FUN_08000980": {
            "renaming": {
                "FUN_08000980": "compare_doubles_08000980",
                "param_1": "double1_part1",
                "param_2": "double1_part2",
                "param_3": "double2_part1",
                "param_4": "double2_part2"
            },
            "code": "\nvoid compareDoubles_08000980(undefined4 double1_part1,undefined4 double1_part2,undefined4 double2_part1,undefined4 double2_part2)\n\n{\n  __aeabi_cdcmpeq(double2_part1,double2_part2,double1_part1,double1_part2);\n  return;\n}\n\n",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000980",
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "imported": false,
            "current_name": "compare_doubles_08000980"
        },
        "FUN_08002368": {
            "renaming": {
                "FUN_08002368": "init_timer_config_08002368",
                "TIMx": "timer",
                "Structure": "initConfig",
                "uVar1": "tempCR1",
                "pTVar2": "tempRCR"
            },
            "code": "\nvoid InitTimerConfig_08002368(TIM_TypeDef *timer,TIM_Base_InitTypeDef *initConfig)\n\n{\n  uint32_t tempCR1;\n  TIM_TypeDef *tempRCR;\n  \n  tempCR1 = timer->CR1;\n  if ((((timer == DAT_080023cc) || (timer == (TIM_TypeDef *)0x40000000)) ||\n      (timer == (TIM_TypeDef *)&DAT_080023cc[-0x387].DMAR)) ||\n     (timer == (TIM_TypeDef *)&DAT_080023cc[-0x37a].SMCR)) {\n    tempCR1 = tempCR1 & 0xffffff8f | initConfig->CounterMode;\n    if (((timer == DAT_080023cc) || (timer == (TIM_TypeDef *)0x40000000)) ||\n       ((timer == (TIM_TypeDef *)&DAT_080023cc[-0x387].DMAR ||\n        (timer == (TIM_TypeDef *)&DAT_080023cc[-0x37a].SMCR)))) {\n      tempCR1 = tempCR1 & 0xfffffcff | initConfig->ClockDivision;\n    }\n  }\n  timer->CR1 = tempCR1;\n  timer->ARR = initConfig->Period;\n  timer->PSC = initConfig->Prescaler;\n  tempRCR = DAT_080023cc;\n  if (timer == DAT_080023cc) {\n    tempRCR = (TIM_TypeDef *)initConfig->RepetitionCounter;\n  }\n  if (timer == DAT_080023cc) {\n    timer->RCR = (uint32_t)tempRCR;\n  }\n  timer->EGR = 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002368",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "init_timer_config_08002368"
        },
        "FUN_08002008": {
            "renaming": {
                "FUN_08002008": "calculate_clock_frequency_08002008",
                "uVar1": "tempVar1",
                "uVar2": "resultFrequency",
                "uVar3": "tempVar2",
                "uVar4": "clockConfig",
                "uVar5": "leadingZeroes1",
                "uVar6": "intermediateFrequency",
                "puVar7": "sourcePointer",
                "puVar8": "destinationPointer",
                "aPredivFactorTable": "predivFactorTable",
                "aPLLMULFactorTable": "pllMulFactorTable"
            },
            "code": "\nuint32_t calculateClockFrequency_08002008(void)\n\n{\n  undefined4 tempVar1;\n  uint32_t resultFrequency;\n  undefined4 tempVar2;\n  uint clockConfig;\n  uint leadingZeroes1;\n  uint intermediateFrequency;\n  undefined4 *sourcePointer;\n  undefined4 *destinationPointer;\n  uint8_t predivFactorTable [2];\n  uint8_t pllMulFactorTable [16];\n  \n  destinationPointer = (undefined4 *)pllMulFactorTable;\n  sourcePointer = (undefined4 *)PTR_DAT_0800208c;\n  do {\n    tempVar1 = *sourcePointer;\n    tempVar2 = sourcePointer[1];\n    sourcePointer = sourcePointer + 2;\n    *destinationPointer = tempVar1;\n    destinationPointer[1] = tempVar2;\n    destinationPointer = destinationPointer + 2;\n  } while (sourcePointer != (undefined4 *)(PTR_DAT_0800208c + 0x10));\n  predivFactorTable[0] = '\\x01';\n  predivFactorTable[1] = '\\x02';\n  clockConfig = *(uint *)(DAT_08002090 + 4);\n  resultFrequency = DAT_08002094;\n  if ((clockConfig & 0xc) == 8) {\n    leadingZeroes1 = count_leading_zeroes(0x3c00);\n    intermediateFrequency = DAT_08002098;\n    if ((int)(clockConfig << 0xf) < 0) {\n      intermediateFrequency = count_leading_zeroes(0x4000);\n      intermediateFrequency = DAT_08002094 /\n              predivFactorTable[(*(uint *)(DAT_08002090 + 4) & 0x20000) >> (intermediateFrequency & 0xff)];\n    }\n    resultFrequency = intermediateFrequency * pllMulFactorTable[(clockConfig & 0x3c0000) >> (leadingZeroes1 & 0xff)];\n  }\n  return resultFrequency;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002008",
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "imported": false,
            "current_name": "calculate_clock_frequency_08002008"
        },
        "FUN_080008fc": {
            "renaming": {
                "FUN_080008fc": "compare_and_combine_080008fc",
                "uVar1": "xor_result",
                "bVar2": "comparison_flag",
                "bVar3": "conditional_flag"
            },
            "code": "\nuint compare_and_combine_080008fc(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint xor_result;\n  bool comparison_flag;\n  bool conditional_flag;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  comparison_flag = (param_1 | param_2 << 1) == 0;\n  if (comparison_flag) {\n    comparison_flag = (param_3 | param_4 << 1) == 0;\n  }\n  if (!comparison_flag) {\n    comparison_flag = param_2 == param_4;\n  }\n  if (comparison_flag) {\n    comparison_flag = param_1 == param_3;\n  }\n  if (!comparison_flag) {\n    xor_result = param_2 ^ param_4;\n    comparison_flag = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      comparison_flag = param_2 == param_4;\n    }\n    conditional_flag = -1 < (int)xor_result && param_4 <= param_2;\n    if (comparison_flag) {\n      conditional_flag = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!conditional_flag) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008fc",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_combine_080008fc"
        },
        "FUN_0800114c": {
            "renaming": {
                "FUN_0800114c": "increment_tick_counter_0800114c"
            },
            "code": "\nvoid increment_tick_counter_0800114c(void)\n\n{\n  *(int *)PTR_uwTick_08001158 = *(int *)PTR_uwTick_08001158 + 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800114c",
            "calling": [
                "main",
                "SysTick_Handler"
            ],
            "imported": false,
            "current_name": "increment_tick_counter_0800114c"
        },
        "FUN_08002250": {
            "renaming": {
                "FUN_08002250": "get_adjusted_system_core_clock_08002250",
                "uVar1": "leadingZeroesCount"
            },
            "code": "\nuint32_t getAdjustedSystemCoreClock_08002250(void)\n\n{\n  uint leadingZeroesCount;\n  \n  leadingZeroesCount = count_leading_zeroes(0x1c0000);\n  return *(uint *)PTR_SystemCoreClock_0800227c >>\n         PTR_APBPrescTable_08002278[(*(uint *)(DAT_08002274 + 4) & 0x3800) >> (leadingZeroesCount & 0xff)];\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002250",
            "calling": [
                "UART_SetConfig"
            ],
            "imported": false,
            "current_name": "get_adjusted_system_core_clock_08002250"
        },
        "FUN_080011fc": {
            "renaming": {
                "FUN_080011fc": "set_interrupt_flag_080011fc",
                "IRQn": "interruptNumber"
            },
            "code": "\nvoid setInterruptFlag_080011fc(interruptNumber_Type interruptNumber)\n\n{\n  *(int *)(DAT_08001210 + ((uint)(int)interruptNumber >> 5) * 4) = 1 << ((int)interruptNumber & 0x1fU);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080011fc",
            "calling": [
                "HAL_UART_MspInit"
            ],
            "imported": false,
            "current_name": "set_interrupt_flag_080011fc"
        },
        "FUN_08003f7c": {
            "renaming": {
                "FUN_08003f7c": "cycle_led_colors_08003f7c",
                "iVar1": "counter"
            },
            "code": "\nvoid cycleLEDColors_08003f7c(void)\n\n{\n  int counter;\n  \n  counter = 3;\n  do {\n    toggleLED(1,0,0);\n    delay_ms(100);\n    toggleLED(0,1,0);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    counter = counter + -1;\n  } while (counter != 0);\n  toggleLED(1,1,1);\n  return;\n}\n\n",
            "called": [
                "toggleLED",
                "delay_ms"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f7c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "cycle_led_colors_08003f7c"
        },
        "FUN_08005646": {
            "renaming": {
                "FUN_08005646": "memmove_custom_08005646",
                "__dest": "dest",
                "__src": "src",
                "__n": "n",
                "puVar1": "dest_ptr",
                "iVar2": "remaining_bytes",
                "puVar3": "src_end_ptr"
            },
            "code": "\nvoid * memmove_custom_08005646(void *dest,void *src,size_t n)\n\n{\n  undefined *dest_ptr;\n  int remaining_bytes;\n  undefined *src_end_ptr;\n  \n  src_end_ptr = (undefined *)((int)src + n);\n  if ((src < dest) && (dest < src_end_ptr)) {\n    dest_ptr = (undefined *)((int)dest + n);\n    remaining_bytes = n - (int)src_end_ptr;\n    while (src_end_ptr + remaining_bytes != (undefined *)0x0) {\n      src_end_ptr = src_end_ptr + -1;\n      dest_ptr = dest_ptr + -1;\n      *dest_ptr = *src_end_ptr;\n    }\n    return dest;\n  }\n  dest_ptr = (undefined *)((int)dest + -1);\n  for (; (undefined *)src != src_end_ptr; src = (void *)((int)src + 1)) {\n    dest_ptr = dest_ptr + 1;\n    *dest_ptr = *src;\n                    /* WARNING: Load size is inaccurate */\n  }\n  return dest;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005646",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "memmove_custom_08005646"
        },
        "FUN_08000990": {
            "renaming": {
                "FUN_08000990": "simple_return_08000990",
                "param_1": "input_value"
            },
            "code": "\nundefined4 simple_return_08000990(undefined4 input_value)\n\n{\n  __nedf2();\n  return input_value;\n}\n\n",
            "called": [
                "__nedf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000990",
            "calling": [
                "__aeabi_dcmple",
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmpeq"
            ],
            "imported": false,
            "current_name": "simple_return_08000990"
        },
        "FUN_08004ee6": {
            "renaming": {
                "FUN_08004ee6": "infinite_loop_08004ee6"
            },
            "code": "\nvoid infiniteLoop_08004ee6(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "HardFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee6",
            "calling": [
                "HardFault_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004ee6"
        },
        "FUN_08004434": {
            "renaming": {
                "FUN_08004434": "send_altitude_data_08004434",
                "in_r1": "inputData",
                "local_10": "altitudeData",
                "local_c": "combinedData"
            },
            "code": "\nvoid sendAltitudeData_08004434(void)\n\n{\n  uint inputData;\n  undefined4 altitudeData;\n  uint combinedData;\n  \n  altitudeData = *(undefined4 *)PTR_msp_txf_altitude_08004454;\n  combinedData = inputData & 0xffff0000 | (uint)*(ushort *)(PTR_msp_txf_altitude_08004454 + 4);\n  MSP_SendFrame('m',(uint8_t *)&altitudeData,6);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004434",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_altitude_data_08004434"
        },
        "FUN_08001168": {
            "renaming": {
                "FUN_08001168": "do_nothing_08001168"
            },
            "code": "\nvoid do_nothing_08001168(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001168",
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "imported": false,
            "current_name": "do_nothing_08001168"
        },
        "FUN_08004ee4": {
            "renaming": {
                "FUN_08004ee4": "do_nothing_08004ee4"
            },
            "code": "\nvoid do_nothing_08004ee4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee4",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ee4"
        },
        "FUN_08004ee8": {
            "renaming": {
                "FUN_08004ee8": "infinite_loop_08004ee8"
            },
            "code": "\nvoid infiniteLoop_08004ee8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "MemManage_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ee8",
            "calling": [
                "MemManage_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004ee8"
        },
        "FUN_08004ffc": {
            "renaming": {
                "FUN_08004ffc": "formatted_string_copy_08004ffc",
                "__s": "destination",
                "__format": "format",
                "iVar1": "result",
                "in_r2": "arg2",
                "in_r3": "arg3",
                "local_78": "destination_ptr",
                "local_70": "max_int",
                "local_6c": "buffer_size",
                "local_6a": "max_short",
                "local_68": "destination_copy",
                "local_64": "max_int_copy",
                "pcStack_c": "format_copy",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "code": "\nint formatted_string_copy_08004ffc(char *destination,char *format,...)\n\n{\n  int result;\n  undefined4 arg2;\n  undefined4 arg3;\n  char *destination_ptr [2];\n  undefined4 max_int;\n  undefined2 buffer_size;\n  undefined2 max_short;\n  char *destination_copy;\n  undefined4 max_int_copy;\n  char *format_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  buffer_size = 0x208;\n  max_int = 0x7fffffff;\n  max_int_copy = 0x7fffffff;\n  max_short = 0xffff;\n  destination_ptr[0] = destination;\n  destination_copy = destination;\n  format_copy = format;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  result = _svfiprintf_r(*(undefined4 *)PTR__impure_ptr_08005040,destination_ptr,format);\n  *destination_ptr[0] = '\\0';\n  return result;\n}\n\n",
            "called": [
                "_svfiprintf_r"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ffc",
            "calling": [
                "serialInt"
            ],
            "imported": false,
            "current_name": "formatted_string_copy_08004ffc"
        },
        "FUN_0800103c": {
            "renaming": {
                "FUN_0800103c": "compare_floats_as_equal_0800103c",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool compareFloatsAsEqual_0800103c(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800103c",
            "calling": [],
            "imported": false,
            "current_name": "compare_floats_as_equal_0800103c"
        },
        "FUN_0800115c": {
            "renaming": {
                "FUN_0800115c": "get_uw_tick_value_0800115c"
            },
            "code": "\nuint32_t get_uwTick_value_0800115c(void)\n\n{\n  return *(uint32_t *)PTR_uwTick_08001164;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800115c",
            "calling": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_I2C_Mem_Write",
                "HAL_RCC_OscConfig",
                "HAL_I2C_Mem_Read",
                "millis",
                "I2C_RequestMemoryWrite",
                "HAL_RCC_ClockConfig",
                "HAL_UART_Transmit",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_RequestMemoryRead",
                "micros",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "get_uw_tick_value_0800115c"
        },
        "FUN_08004f60": {
            "renaming": {
                "FUN_08004f60": "get_uw_tick_value_08004f60"
            },
            "code": "\nuint32_t get_uwTick_value_08004f60(void)\n\n{\n  return *(uint32_t *)PTR_uwTick_08001164;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f60",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "get_uw_tick_value_08004f60"
        },
        "FUN_08002d88": {
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "sVar1": "rawX",
                "sVar2": "rawY",
                "puVar3": "tempPtr",
                "puVar4": "tempPtr2",
                "puVar5": "calibrationPtr",
                "puVar6": "biasPtr",
                "bVar7": "readStatus",
                "uVar8": "tempFloat1",
                "uVar9": "tempFloat2",
                "raw_data": "rawData"
            },
            "code": "\nvoid processSensorData_08002d88(void)\n\n{\n  short rawX;\n  short rawY;\n  undefined *tempPtr;\n  undefined *tempPtr2;\n  undefined *calibrationPtr;\n  undefined *biasPtr;\n  byte readStatus;\n  undefined4 tempFloat1;\n  undefined4 tempFloat2;\n  uint8_t rawData [7];\n  \n  tempPtr = PTR_s____Src_MPU9250_c_08002e80;\n  rawData._0_2_ = 0;\n  rawData[2] = '\\0';\n  rawData[3] = '\\0';\n  rawData[4] = '\\0';\n  rawData[5] = '\\0';\n  rawData[6] = '\\0';\n  readStatus = I2C_ReadByte(0x18,2,PTR_s____Src_MPU9250_c_08002e80,0xd7);\n  if ((int)((uint)readStatus << 0x1f) < 0) {\n    I2C_ReadByteArray(0x18,3,rawData,7,tempPtr,0xda);\n    tempPtr = PTR_magRaw_08002e84;\n    if ((int)((uint)rawData[6] << 0x1c) < 0) {\n      *(short *)(PTR_msp_txf_status_08002e94 + 2) = *(short *)(PTR_msp_txf_status_08002e94 + 2) + 1;\n    }\n    else {\n      rawX = CONCAT11(rawData[3],rawData[2]);\n      rawY = CONCAT11(rawData[5],rawData[4]);\n      *(undefined2 *)PTR_magRaw_08002e84 = rawData._0_2_;\n      *(short *)(tempPtr + 2) = rawX;\n      *(short *)(tempPtr + 4) = rawY;\n      biasPtr = PTR_magBias_08002e9c;\n      calibrationPtr = PTR_magCalib_08002e98;\n      tempFloat2 = *(undefined4 *)PTR_mRes_08002e88;\n      tempFloat1 = __floatsisf();\n      tempFloat1 = __aeabi_fmul(tempFloat1,tempFloat2);\n      tempPtr = PTR_magScale_08002e8c;\n      tempFloat1 = __aeabi_fmul(tempFloat1,*(undefined4 *)calibrationPtr);\n      tempFloat1 = __aeabi_fsub(tempFloat1,*(undefined4 *)biasPtr);\n      tempFloat1 = __aeabi_fmul(tempFloat1,*(undefined4 *)tempPtr);\n      tempPtr2 = PTR_magData_08002e90;\n      *(undefined4 *)PTR_magData_08002e90 = tempFloat1;\n      tempFloat1 = __floatsisf((int)rawX);\n      tempFloat1 = __aeabi_fmul(tempFloat1,tempFloat2);\n      tempFloat1 = __aeabi_fmul(tempFloat1,*(undefined4 *)(calibrationPtr + 4));\n      tempFloat1 = __aeabi_fsub(tempFloat1,*(undefined4 *)(biasPtr + 4));\n      tempFloat1 = __aeabi_fmul(tempFloat1,*(undefined4 *)(tempPtr + 4));\n      *(undefined4 *)(tempPtr2 + 4) = tempFloat1;\n      tempFloat1 = __floatsisf((int)rawY);\n      tempFloat1 = __aeabi_fmul(tempFloat1,tempFloat2);\n      tempFloat1 = __aeabi_fmul(tempFloat1,*(undefined4 *)(calibrationPtr + 8));\n      tempFloat1 = __aeabi_fsub(tempFloat1,*(undefined4 *)(biasPtr + 8));\n      tempFloat1 = __aeabi_fmul(tempFloat1,*(undefined4 *)(tempPtr + 8));\n      *(undefined4 *)(tempPtr2 + 8) = tempFloat1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002d88",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08002d88"
        },
        "FUN_08004f64": {
            "renaming": {
                "FUN_08004f64": "do_nothing_08004f64"
            },
            "code": "\nvoid do_nothing_08004f64(uint32_t Delay)\n\n{\n  return;\n}\n\n",
            "called": [
                "HAL_Delay"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f64",
            "calling": [
                "LED_StartupSequence",
                "I2C_WriteByte",
                "_Error_Handler",
                "MS5611_Init"
            ],
            "imported": false,
            "current_name": "do_nothing_08004f64"
        },
        "FUN_08002b48": {
            "renaming": {
                "FUN_08002b48": "read_and_process_accel_data_08002b48",
                "in_r3": "input_r3",
                "puVar1": "temp_pointer",
                "uVar2": "temp_float",
                "raw_data": "accel_raw_data"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid readAndProcessAccelData_08002b48(void)\n\n{\n  undefined *temp_pointer;\n  undefined4 temp_float;\n  uint input_r3;\n  uint8_t accel_raw_data [6];\n  \n  accel_raw_data._0_4_ = 0;\n  stack0xffffffec = input_r3 & 0xffff0000;\n  I2C_ReadByteArray(0xd0,0x3b,accel_raw_data,6,PTR_s____Src_MPU9250_c_08002be4,0x58);\n  temp_pointer = PTR_accelRaw_08002be8;\n  *(ushort *)PTR_accelRaw_08002be8 = CONCAT11(accel_raw_data[0],accel_raw_data[1]);\n  *(short *)(temp_pointer + 2) = CONCAT11(accel_raw_data[2],accel_raw_data[3]);\n  *(short *)(temp_pointer + 4) = CONCAT11(accel_raw_data[4],accel_raw_data[5]);\n  temp_float = __floatsisf();\n  temp_float = __aeabi_fmul(temp_float,0x40800000);\n  temp_float = __aeabi_fmul(temp_float,0x38000000);\n  temp_pointer = PTR_accelData_08002bec;\n  *(undefined4 *)PTR_accelData_08002bec = temp_float;\n  temp_float = __floatsisf((int)CONCAT11(accel_raw_data[2],accel_raw_data[3]));\n  temp_float = __aeabi_fmul(temp_float,0x40800000);\n  temp_float = __aeabi_fmul(temp_float,0x38000000);\n  *(undefined4 *)(temp_pointer + 4) = temp_float;\n  temp_float = __floatsisf((int)CONCAT11(accel_raw_data[4],accel_raw_data[5]));\n  temp_float = __aeabi_fmul(temp_float,0x40800000);\n  temp_float = __aeabi_fmul(temp_float,0x38000000);\n  *(undefined4 *)(temp_pointer + 8) = temp_float;\n  return;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002b48",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "read_and_process_accel_data_08002b48"
        },
        "FUN_08004f68": {
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "iVar1": "index",
                "puVar2": "memoryPointer",
                "UNRECOVERED_JUMPTABLE": "unrecoveredJump"
            },
            "code": "\nvoid initializeSystem_08004f68(void)\n\n{\n  int index;\n  undefined4 *memoryPointer;\n  code *unrecoveredJump;\n  \n  for (index = 0; memoryPointer = (undefined4 *)PTR_completed_8672_08004fa8,\n      PTR_gyroBias_08004fa0 + index < PTR_completed_8672_08004fa4; index = index + 4) {\n    *(undefined4 *)(PTR_gyroBias_08004fa0 + index) = *(undefined4 *)(PTR__sidata_08004f9c + index);\n  }\n  for (; memoryPointer < PTR__ebss_08004fac; memoryPointer = memoryPointer + 1) {\n    *memoryPointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  unrecoveredJump = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJump)();\n  return;\n}\n\n",
            "called": [
                "SystemInit",
                "main",
                "__libc_init_array"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f68",
            "calling": [],
            "imported": false,
            "current_name": "initialize_system_08004f68"
        },
        "FUN_08001170": {
            "renaming": {
                "FUN_08001170": "update_priority_group_08001170",
                "PriorityGroup": "priorityGroup"
            },
            "code": "\nvoid updatePriorityGroup_08001170(uint32_t priorityGroup)\n\n{\n  *(uint *)(DAT_08001190 + 0xc) =\n       *(uint *)(DAT_08001190 + 0xc) & 0xf8ff | 0x5fa0000 | (priorityGroup & 7) << 8;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001170",
            "calling": [
                "HAL_Init",
                "HAL_MspInit"
            ],
            "imported": false,
            "current_name": "update_priority_group_08001170"
        },
        "FUN_08002bf0": {
            "renaming": {
                "FUN_08002bf0": "process_gyro_data_08002bf0",
                "puVar1": "gyroRawPtr",
                "puVar2": "gyroDataPtr",
                "uVar3": "tempFloat",
                "raw_data": "rawGyroData",
                "raw_data._0_4_": "rawGyroData_0_4",
                "raw_data._4_2_": "rawGyroData_4_2"
            },
            "code": "\nvoid processGyroData_08002bf0(void)\n\n{\n  undefined *gyroRawPtr;\n  undefined *gyroDataPtr;\n  undefined4 tempFloat;\n  uint8_t rawGyroData [6];\n  \n  rawGyroData_0_4 = 0;\n  rawGyroData_4_2 = 0;\n  I2C_ReadByteArray(0xd0,0x43,rawGyroData,6,PTR_s____Src_MPU9250_c_08002c9c,0x7b);\n  gyroRawPtr = PTR_gyroRaw_08002ca0;\n  *(ushort *)PTR_gyroRaw_08002ca0 = CONCAT11(rawGyroData[0],rawGyroData[1]);\n  *(short *)(gyroRawPtr + 2) = CONCAT11(rawGyroData[2],rawGyroData[3]);\n  *(short *)(gyroRawPtr + 4) = CONCAT11(rawGyroData[4],rawGyroData[5]);\n  tempFloat = __floatsisf();\n  gyroRawPtr = PTR_gyroBias_08002ca4;\n  tempFloat = __aeabi_fmul(tempFloat,DAT_08002ca8);\n  tempFloat = __aeabi_fmul(tempFloat,0x38000000);\n  tempFloat = __aeabi_fsub(tempFloat,*(undefined4 *)gyroRawPtr);\n  gyroDataPtr = PTR_gyroData_08002cac;\n  *(undefined4 *)PTR_gyroData_08002cac = tempFloat;\n  tempFloat = __floatsisf((int)CONCAT11(rawGyroData[2],rawGyroData[3]));\n  tempFloat = __aeabi_fmul(tempFloat,DAT_08002ca8);\n  tempFloat = __aeabi_fmul(tempFloat,0x38000000);\n  tempFloat = __aeabi_fsub(tempFloat,*(undefined4 *)(gyroRawPtr + 4));\n  *(undefined4 *)(gyroDataPtr + 4) = tempFloat;\n  tempFloat = __floatsisf((int)CONCAT11(rawGyroData[4],rawGyroData[5]));\n  tempFloat = __aeabi_fmul(tempFloat,DAT_08002ca8);\n  tempFloat = __aeabi_fmul(tempFloat,0x38000000);\n  tempFloat = __aeabi_fsub(tempFloat,*(undefined4 *)(gyroRawPtr + 8));\n  *(undefined4 *)(gyroDataPtr + 8) = tempFloat;\n  return;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002bf0",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "process_gyro_data_08002bf0"
        },
        "FUN_08004ef0": {
            "renaming": {
                "FUN_08004ef0": "do_nothing_08004ef0"
            },
            "code": "\nvoid do_nothing_08004ef0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef0"
        },
        "FUN_08002ad0": {
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0"
            },
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  I2C_ReadByte(0xd0,0x75,PTR_s____Src_MPU9250_c_08002b44,0x3b);\n  I2C_WriteByte(0xd0,0x6b,0x80,'\\x01');\n  I2C_WriteByte(0xd0,0x6b,'\\x01','\\x01');\n  I2C_WriteByte(0xd0,0x6c,'\\0','\\x01');\n  I2C_WriteByte(0xd0,0x19,'\\0','\\x01');\n  I2C_WriteByte(0xd0,0x1d,'\\x03','\\x01');\n  I2C_WriteByte(0xd0,0x1a,'\\x03','\\x01');\n  I2C_WriteByte(0xd0,0x1b,'\\x10','\\x01');\n  I2C_WriteByte(0xd0,0x1c,'\\b','\\x01');\n  return;\n}\n\n",
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ad0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "initialize_mpu9250_08002ad0"
        },
        "FUN_08001050": {
            "renaming": {
                "FUN_08001050": "check_condition_08001050",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "code": "\nbool check_condition_08001050(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001050",
            "calling": [
                "AHRS_GetYaw"
            ],
            "imported": false,
            "current_name": "check_condition_08001050"
        },
        "FUN_08004ef4": {
            "renaming": {
                "FUN_08004ef4": "handle_system_tick_08004ef4"
            },
            "code": "\nvoid HandleSystemTick_08004ef4(void)\n\n{\n  HAL_IncTick();\n  HAL_SYSTICK_IRQHandler();\n  return;\n}\n\n",
            "called": [
                "HAL_IncTick",
                "HAL_SYSTICK_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef4",
            "calling": [],
            "imported": false,
            "current_name": "handle_system_tick_08004ef4"
        },
        "FUN_08004ef2": {
            "renaming": {
                "FUN_08004ef2": "do_nothing_08004ef2"
            },
            "code": "\nvoid do_nothing_08004ef2(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ef2",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004ef2"
        },
        "FUN_080043bc": {
            "renaming": {
                "FUN_080043bc": "copy_and_send_data_080043bc",
                "uVar1": "data1",
                "uVar2": "data2",
                "puVar3": "destPtr",
                "puVar4": "srcPtr",
                "local_24": "localBuffer",
                "local_1c": "unusedBuffer"
            },
            "code": "\nvoid copyAndSendData_080043bc(void)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 localBuffer [2];\n  undefined2 unusedBuffer [6];\n  \n  destPtr = localBuffer;\n  srcPtr = (undefined4 *)PTR_msp_txf_raw_imu_080043ec;\n  do {\n    data1 = *srcPtr;\n    data2 = srcPtr[1];\n    srcPtr = srcPtr + 2;\n    *destPtr = data1;\n    destPtr[1] = data2;\n    destPtr = destPtr + 2;\n  } while (srcPtr != (undefined4 *)(PTR_msp_txf_raw_imu_080043ec + 0x10));\n  *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n  MSP_SendFrame('f',(uint8_t *)localBuffer,0x12);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043bc",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_and_send_data_080043bc"
        },
        "FUN_08004f5c": {
            "renaming": {
                "FUN_08004f5c": "get_uw_tick_value_08004f5c"
            },
            "code": "\nuint32_t get_uwTick_value_08004f5c(void)\n\n{\n  return *(uint32_t *)PTR_uwTick_08001164;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f5c",
            "calling": [
                "MS5611_Update",
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "get_uw_tick_value_08004f5c"
        },
        "FUN_08000404": {
            "renaming": {
                "FUN_08000404": "calculate_float_representation_08000404",
                "param_1": "input_value",
                "uVar1": "lower_bits",
                "uVar2": "abs_input_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "adjusted_zeroes",
                "uVar6": "sign_bit",
                "in_r12": "complementary_shift",
                "bVar7": "shift_negative",
                "bVar8": "shift_zero",
                "bVar9": "shift_overflow"
            },
            "code": "\nulonglong calculate_float_representation_08000404(uint input_value)\n\n{\n  uint lower_bits;\n  uint abs_input_value;\n  uint shift_amount;\n  int leading_zeroes;\n  uint adjusted_zeroes;\n  uint sign_bit;\n  uint complementary_shift;\n  bool shift_negative;\n  bool shift_zero;\n  bool shift_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input_value = -input_value;\n  }\n  lower_bits = 0;\n  leading_zeroes = count_leading_zeroes(abs_input_value);\n  adjusted_zeroes = leading_zeroes + 0x15;\n  shift_overflow = SBORROW4(adjusted_zeroes,0x20);\n  shift_amount = leading_zeroes - 0xb;\n  shift_negative = (int)shift_amount < 0;\n  shift_zero = shift_amount == 0;\n  if ((int)adjusted_zeroes < 0x20) {\n    shift_overflow = SCARRY4(shift_amount,0xc);\n    leading_zeroes = leading_zeroes + 1;\n    shift_negative = leading_zeroes < 0;\n    shift_zero = leading_zeroes == 0;\n    shift_amount = adjusted_zeroes;\n    if (!shift_zero && shift_negative == shift_overflow) {\n      lower_bits = abs_input_value << (adjusted_zeroes & 0xff);\n      abs_input_value = abs_input_value >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (shift_zero || shift_negative != shift_overflow) {\n    complementary_shift = 0x20 - shift_amount;\n  }\n  abs_input_value = abs_input_value << (shift_amount & 0xff);\n  if (shift_zero || shift_negative != shift_overflow) {\n    abs_input_value = abs_input_value | 0U >> (complementary_shift & 0xff);\n  }\n  if (shift_zero || shift_negative != shift_overflow) {\n    lower_bits = 0 << (shift_amount & 0xff);\n  }\nLAB_080002f0:\n  if ((int)adjusted_zeroes < 0x433) {\n    return CONCAT44(abs_input_value + (0x432 - adjusted_zeroes) * 0x100000 | sign_bit,lower_bits);\n  }\n  shift_amount = ~(0x432 - adjusted_zeroes);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_input_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeroes = shift_amount - 0x13;\n  if (leading_zeroes == 0 || leading_zeroes < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input_value >> (shift_amount & 0xff),\n                    lower_bits >> (shift_amount & 0xff) | abs_input_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,lower_bits >> (0x20 - (0xcU - leading_zeroes) & 0xff) | abs_input_value << (0xcU - leading_zeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000404",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_float_representation_08000404"
        },
        "FUN_08004eec": {
            "renaming": {
                "FUN_08004eec": "infinite_loop_08004eec"
            },
            "code": "\nvoid infiniteLoop_08004eec(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "UsageFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eec",
            "calling": [
                "UsageFault_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004eec"
        },
        "FUN_08004eea": {
            "renaming": {
                "FUN_08004eea": "infinite_loop_08004eea"
            },
            "code": "\nvoid infiniteLoop_08004eea(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "BusFault_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eea",
            "calling": [
                "BusFault_Handler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004eea"
        },
        "FUN_08006070": {
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "param_5": "input_angle",
                "uVar1": "result_temp1",
                "extraout_r1": "result_temp2",
                "extraout_r1_00": "result_temp3",
                "unaff_r4": "unused_var",
                "iVar2": "temp_var1",
                "uVar3": "combined_sign",
                "uVar4": "masked_input_b",
                "iVar5": "difference",
                "uVar6": "masked_input_d",
                "uVar7": "result1",
                "uVar8": "result2"
            },
            "code": "\nundefined8 calculate_result_08006070(uint input_a,uint input_b,uint input_c,uint input_d,double input_angle)\n\n{\n  undefined4 result_temp1;\n  undefined4 result_temp2;\n  int result_temp3;\n  undefined4 unused_var;\n  int temp_var1;\n  uint combined_sign;\n  uint masked_input_b;\n  int difference;\n  uint masked_input_d;\n  undefined8 result1;\n  undefined8 result2;\n  \n  result1 = CONCAT44(DAT_08006204,DAT_08006200);\n  masked_input_d = input_d & 0x7fffffff;\n  if ((DAT_08006220 < (masked_input_d | (-input_c | input_c) >> 0x1f)) ||\n     (masked_input_b = input_b & 0x7fffffff, DAT_08006220 < (masked_input_b | (-input_a | input_a) >> 0x1f))) {\n    result1 = __aeabi_dadd(input_a,input_b);\n    return result1;\n  }\n  if ((input_d + 0xc0100000 | input_c) == 0) {\n    atan(input_angle);\n    return CONCAT44(result_temp2,input_a);\n  }\n  combined_sign = (int)input_d >> 0x1e & 2U | input_b >> 0x1f;\n  if ((input_a | masked_input_b) == 0) {\n    if (combined_sign == 2) {\n      return CONCAT44(DAT_080061fc,DAT_080061f8);\n    }\n    if (combined_sign != 3) {\n      return CONCAT44(input_b,input_a);\n    }\n  }\n  else {\n    if ((input_c | masked_input_d) != 0) {\n      if (masked_input_d == DAT_08006220) {\n        if (masked_input_b == masked_input_d) {\n          if (combined_sign == 2) {\n            return CONCAT44(DAT_080061ec,DAT_080061e8);\n          }\n          if (combined_sign == 3) {\n            return CONCAT44(DAT_080061f4,DAT_080061f0);\n          }\n          if (combined_sign != 1) {\n            return CONCAT44(DAT_0800621c,DAT_08006218);\n          }\n          return CONCAT44(DAT_080061e4,DAT_080061e0);\n        }\n        if (combined_sign == 2) {\n          return CONCAT44(DAT_080061fc,DAT_080061f8);\n        }\n        if (combined_sign == 3) {\n          return result1;\n        }\n        if (combined_sign == 1) {\n          return 0x8000000000000000;\n        }\n        return 0;\n      }\n      if (masked_input_b != DAT_08006220) {\n        difference = (int)(masked_input_b - masked_input_d) >> 0x14;\n        result_temp1 = DAT_08006210;\n        temp_var1 = DAT_08006214;\n        if (difference < 0x3d) {\n          if (((int)input_d < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result_temp1 = 0;\n            temp_var1 = 0;\n          }\n          else {\n            result_temp1 = __divdf3(input_a,input_b);\n            fabs((double)CONCAT44(unused_var,input_d));\n            atan((double)CONCAT44(unused_var,input_d));\n            temp_var1 = result_temp3;\n          }\n        }\n        if (combined_sign != 1) {\n          if (combined_sign == 2) {\n            result2 = __subdf3(result_temp1,temp_var1,DAT_08006208,DAT_0800620c);\n            result1 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          else {\n            if (combined_sign == 0) {\n              return CONCAT44(temp_var1,result_temp1);\n            }\n            result1 = __subdf3(result_temp1,temp_var1,DAT_08006208,DAT_0800620c);\n            result2 = CONCAT44(DAT_080061fc,DAT_080061f8);\n          }\n          result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                           (int)((ulonglong)result2 >> 0x20));\n          return result1;\n        }\n        return CONCAT44(temp_var1 + -0x80000000,result_temp1);\n      }\n    }\n    result1 = CONCAT44(DAT_08006214,DAT_08006210);\n    if ((int)input_b < 0) {\n      result1 = CONCAT44(DAT_080061dc,DAT_080061d8);\n    }\n  }\n  return result1;\n}\n\n",
            "called": [
                "__divdf3",
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006070",
            "calling": [
                "atan2"
            ],
            "imported": false,
            "current_name": "calculate_result_08006070"
        },
        "FUN_08004cac": {
            "renaming": {
                "FUN_08004cac": "print_formatted_value_08004cac",
                "val": "inputValue",
                "data": "formattedData"
            },
            "code": "\nvoid printFormattedValue_08004cac(int inputValue)\n\n{\n  undefined *formattedData;\n  \n  formattedData = PTR_tx_buffer_08004cc4;\n  siprintf(PTR_tx_buffer_08004cc4,PTR_DAT_08004cc8,inputValue);\n  serialPrint(formattedData);\n  return;\n}\n\n",
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004cac",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "print_formatted_value_08004cac"
        },
        "FUN_08004eee": {
            "renaming": {
                "FUN_08004eee": "do_nothing_08004eee"
            },
            "code": "\nvoid do_nothing_08004eee(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004eee",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_08004eee"
        },
        "FUN_08004c18": {
            "renaming": {
                "FUN_08004c18": "transmit_character_08004c18",
                "ch": "character",
                "pData": "dataPointer"
            },
            "code": "\nvoid transmitCharacter_08004c18(ucharacterar character)\n\n{\n  undefined *dataPointer;\n  \n  dataPointer = PTR_tx_buffer_08004c28;\n  *PTR_tx_buffer_08004c28 = character;\n  HAL_UART_Transmit((UART_HandleTypeDef *)PTR_huart1_08004c2c,dataPointer,1,5);\n  return;\n}\n\n",
            "called": [
                "HAL_UART_Transmit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c18",
            "calling": [
                "MSP_SendFrame",
                "_Error_Handler",
                "serialPrint"
            ],
            "imported": false,
            "current_name": "transmit_character_08004c18"
        },
        "FUN_08004c8c": {
            "renaming": {
                "FUN_08004c8c": "serial_write_data_08004c8c",
                "data": "inputData",
                "sVar1": "dataLength",
                "puVar2": "currentChar"
            },
            "code": "\nvoid serialWriteData_08004c8c(char *inputData)\n\n{\n  size_t dataLength;\n  uchar *currentChar;\n  \n  for (currentChar = (uchar *)inputData; dataLength = strlen(inputData), (uint)((int)currentChar - (int)inputData) < dataLength;\n      currentChar = currentChar + 1) {\n    serialWrite(*currentChar);\n  }\n  return;\n}\n\n",
            "called": [
                "strlen",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c8c",
            "calling": [
                "MSP_SendFrame",
                "serialInt",
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "serial_write_data_08004c8c"
        },
        "FUN_08001460": {
            "renaming": {
                "FUN_08001460": "check_i2_c_flag_with_timeout_08001460",
                "hi2c": "i2c_handle",
                "Flag": "flag",
                "Timeout": "timeout",
                "uVar1": "start_tick",
                "uVar2": "current_tick",
                "uVar3": "status_register",
                "pIVar4": "i2c_instance"
            },
            "code": "\nHAL_StatusTypeDef\nCheckI2CFlagWithTimeout_08001460(I2C_HandleTypeDef *i2c_handle,uint32_t flag,uint32_t timeout)\n\n{\n  uint32_t start_tick;\n  uint32_t current_tick;\n  uint status_register;\n  I2C_TypeDef *i2c_instance;\n  \n  start_tick = HAL_GetTick();\n  do {\n    i2c_instance = i2c_handle->Instance;\n    if ((flag << 8) >> 0x18 == 1) {\n      status_register = i2c_instance->SR1;\n    }\n    else {\n      status_register = i2c_instance->SR2;\n    }\n    if ((flag & 0xffff & ~status_register) == 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x15) < 0) {\n      i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n      i2c_instance->SR1 = i2c_instance->SR1 & 0xfffffbff;\n      i2c_handle->ErrorCode = 4;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_ERROR;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout))));\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001460",
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_i2_c_flag_with_timeout_08001460"
        },
        "FUN_08003fd0": {
            "renaming": {
                "FUN_08003fd0": "set_pwm_value_08003fd0",
                "pwm": "pwm_value"
            },
            "code": "\nvoid set_pwm_value_08003fd0(int pwm_value)\n\n{\n  *(int *)(*(int *)PTR_htim4_08003fd8 + 0x3c) = pwm_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fd0",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fd0"
        },
        "FUN_08000134": {
            "renaming": {
                "FUN_08000134": "update_parameters_08000134",
                "param_1": "paramA",
                "param_2": "paramB"
            },
            "code": "\nundefined8 updateParameters_08000134(undefined *paramA,undefined *paramB)\n\n{\n  if (DAT_08000144 != 0) {\n    paramA = PTR__init_0800014c;\n    paramB = PTR_object_8677_08000148;\n  }\n  return CONCAT44(paramB,paramA);\n}\n\n",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000134",
            "calling": [
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "update_parameters_08000134"
        },
        "FUN_08003eb0": {
            "renaming": {
                "FUN_08003eb0": "process_ticks_08003eb0",
                "ticks": "time_ticks",
                "uVar1": "call_result"
            },
            "code": "\nint process_ticks_08003eb0(int time_ticks)\n\n{\n  uint32_t call_result;\n  \n  if (*(int *)PTR_noHyperCall_08003ec4 == 0) {\n    call_result = aflCall(1,time_ticks,0);\n    return call_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "aflCall"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eb0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_ticks_08003eb0"
        },
        "FUN_08005c70": {
            "renaming": {
                "FUN_08005c70": "FUNC_08005c70"
            },
            "code": "\nulonglong FUNC_08005c70(uint param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined4 extraout_r1;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  uint uVar8;\n  ulonglong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  undefined4 in_stack_ffffffc8;\n  \n  uVar9 = CONCAT44(param_2,param_1);\n  uVar8 = param_2 & 0x7fffffff;\n  if (DAT_08005f90 < (int)uVar8) {\n    if ((uVar8 + 0xc0100000 | param_1) != 0) {\n      uVar10 = __subdf3(param_1,param_2,param_1,param_2);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar9 = __divdf3((int)uVar10,uVar2,(int)uVar10,uVar2);\n      return uVar9;\n    }\n    uVar9 = __muldf3(param_1,param_2,DAT_08005f28,DAT_08005f2c);\n    uVar10 = __muldf3(param_1,param_2,DAT_08005f30,DAT_08005f34);\nLAB_08005cba:\n    uVar9 = __aeabi_dadd((int)uVar9,(int)(uVar9 >> 0x20),(int)uVar10,\n                         (int)((ulonglong)uVar10 >> 0x20));\n  }\n  else {\n    if ((int)uVar8 <= DAT_08005f94) {\n      if (0x3e3fffff < uVar8) {\n        uVar10 = __muldf3(param_1,param_2,param_1,param_2);\n        uVar7 = (undefined4)((ulonglong)uVar10 >> 0x20);\n        uVar2 = (undefined4)uVar10;\n        uVar10 = __muldf3(uVar2,uVar7,DAT_08005f40,DAT_08005f44);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c\n                             );\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar7);\n        uVar11 = __muldf3(uVar2,uVar7,DAT_08005f70,DAT_08005f74);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84\n                             );\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n        uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar7);\n        uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n        uVar10 = __divdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                          (int)((ulonglong)uVar11 >> 0x20));\n        uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),param_1,param_2);\n        goto LAB_08005cba;\n      }\n      uVar10 = __aeabi_dadd(param_1,param_2,DAT_08005f38,DAT_08005f3c);\n      iVar1 = __aeabi_dcmpgt((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f98);\n      if (iVar1 != 0) {\n        return uVar9;\n      }\n    }\n    fabs((double)CONCAT44(param_2,in_stack_ffffffc8));\n    uVar10 = __subdf3(0,DAT_08005f98,param_1,extraout_r1);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),0,DAT_08005f9c);\n    uVar3 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar2 = (undefined4)uVar10;\n    uVar10 = __muldf3(uVar2,uVar3,DAT_08005f40,DAT_08005f44);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f48,DAT_08005f4c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f50,DAT_08005f54);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f58,DAT_08005f5c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f60,DAT_08005f64);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f68,DAT_08005f6c);\n    uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar2,uVar3);\n    uVar4 = (undefined4)((ulonglong)uVar10 >> 0x20);\n    uVar11 = __muldf3(uVar2,uVar3,DAT_08005f70,DAT_08005f74);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f78,DAT_08005f7c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f80,DAT_08005f84);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __subdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),DAT_08005f88,DAT_08005f8c);\n    uVar11 = __muldf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),uVar2,uVar3);\n    uVar11 = __aeabi_dadd((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),0,DAT_08005f98);\n    uVar5 = (undefined4)((ulonglong)uVar11 >> 0x20);\n    uVar12 = __ieee754_sqrt(uVar2,uVar3);\n    uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n    uVar7 = (undefined4)uVar12;\n    if (DAT_08005fa0 < (int)uVar8) {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar10 = __aeabi_dadd((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),uVar7,uVar6);\n      uVar2 = (undefined4)((ulonglong)uVar10 >> 0x20);\n      uVar10 = __aeabi_dadd((int)uVar10,uVar2,(int)uVar10,uVar2);\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),DAT_08005f30,DAT_08005f34);\n      uVar2 = DAT_08005f28;\n      uVar7 = DAT_08005f2c;\n    }\n    else {\n      uVar10 = __divdf3((int)uVar10,uVar4,(int)uVar11,uVar5);\n      uVar11 = __aeabi_dadd(uVar7,uVar6,uVar7,uVar6);\n      uVar10 = __muldf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __muldf3(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(uVar2,uVar3,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar12 = __aeabi_dadd(uVar7,uVar6,0,uVar6);\n      uVar11 = __divdf3((int)uVar11,(int)((ulonglong)uVar11 >> 0x20),(int)uVar12,\n                        (int)((ulonglong)uVar12 >> 0x20));\n      uVar2 = (undefined4)((ulonglong)uVar11 >> 0x20);\n      uVar11 = __aeabi_dadd((int)uVar11,uVar2,(int)uVar11,uVar2);\n      uVar11 = __subdf3(DAT_08006060,DAT_08006064,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar11 = __aeabi_dadd(0,uVar6,0,uVar6);\n      uVar11 = __subdf3(DAT_08006068,DAT_0800606c,(int)uVar11,(int)((ulonglong)uVar11 >> 0x20));\n      uVar10 = __subdf3((int)uVar10,(int)((ulonglong)uVar10 >> 0x20),(int)uVar11,\n                        (int)((ulonglong)uVar11 >> 0x20));\n      uVar2 = DAT_08006068;\n      uVar7 = DAT_0800606c;\n    }\n    uVar9 = __subdf3(uVar2,uVar7,(int)uVar10,(int)((ulonglong)uVar10 >> 0x20));\n    if ((int)param_2 < 1) {\n      uVar9 = uVar9 & 0xffffffff | (ulonglong)((int)(uVar9 >> 0x20) + 0x80000000) << 0x20;\n    }\n  }\n  return uVar9;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005c70",
            "calling": [
                "asin"
            ],
            "imported": false,
            "current_name": "FUNC_08005c70"
        },
        "FUN_08002ee8": {
            "renaming": {
                "FUN_08002ee8": "calculate_angle_08002ee8",
                "iVar1": "compare_result",
                "uVar2": "angle",
                "fVar3": "final_angle"
            },
            "code": "\nfloat calculate_angle_08002ee8(void)\n\n{\n  int compare_result;\n  undefined4 angle;\n  float final_angle;\n  \n  angle = *(undefined4 *)(PTR_AHRS_Angle_08002f18 + 8);\n  compare_result = __aeabi_fcmpge(angle,DAT_08002f1c);\n  if ((compare_result != 0) && (compare_result = __aeabi_fcmplt(angle,DAT_08002f20), compare_result != 0)) {\n    final_angle = (float)__addsf3(angle,DAT_08002f20);\n    return final_angle;\n  }\n  final_angle = (float)__aeabi_fsub(angle,DAT_08002f24);\n  return final_angle;\n}\n\n",
            "called": [
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fcmpge",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ee8",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_angle_08002ee8"
        },
        "FUN_08001104": {
            "renaming": {
                "FUN_08001104": "configure_sys_tick_08001104",
                "TickPriority": "tick_priority",
                "uVar1": "hclk_frequency"
            },
            "code": "\nHAL_StatusTypeDef ConfigureSysTick_08001104(uint32_t tick_priority)\n\n{\n  uint32_t hclk_frequency;\n  \n  hclk_frequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclk_frequency / 1000);\n  HAL_NVIC_SetPriority(SysTick_IRQn,tick_priority,0);\n  return HAL_OK;\n}\n\n",
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001104",
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configure_sys_tick_08001104"
        },
        "FUN_08004978": {
            "renaming": {
                "FUN_08004978": "initialize_pid_controllers_08004978",
                "puVar1": "roll_pid",
                "puVar2": "pitch_pid",
                "puVar3": "yaw_pid",
                "puVar4": "altitude_pid",
                "uVar5": "temp_var1",
                "uVar6": "temp_var2",
                "uVar7": "temp_var3",
                "uVar8": "temp_var4"
            },
            "code": "\nvoid initialize_pid_controllers_08004978(void)\n\n{\n  undefined *roll_pid;\n  undefined *pitch_pid;\n  undefined *yaw_pid;\n  undefined *altitude_pid;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  yaw_pid = PTR_pid_yaw_080049f0;\n  pitch_pid = PTR_pid_pitch_080049ec;\n  roll_pid = PTR_pid_roll_080049e8;\n  *(undefined4 *)(PTR_pid_pitch_080049ec + 0x4c) = 1;\n  *(undefined4 *)(roll_pid + 0x4c) = 1;\n  *(undefined4 *)(yaw_pid + 0x4c) = 0xffffffff;\n  temp_var1 = DAT_080049f8;\n  altitude_pid = PTR_pid_altitude_080049f4;\n  *(undefined4 *)(PTR_pid_altitude_080049f4 + 0x4c) = 1;\n  temp_var2 = DAT_08004a00;\n  *(undefined4 *)(pitch_pid + 0x20) = DAT_080049fc;\n  temp_var3 = DAT_08004a08;\n  *(undefined4 *)(roll_pid + 0x20) = DAT_08004a04;\n  *(undefined4 *)(yaw_pid + 0x20) = DAT_08004a0c;\n  *(undefined4 *)(altitude_pid + 0x20) = 0;\n  *(undefined4 *)(pitch_pid + 4) = temp_var1;\n  temp_var1 = DAT_08004a10;\n  *(undefined4 *)(pitch_pid + 8) = DAT_08004a10;\n  *(undefined4 *)(pitch_pid + 0xc) = temp_var2;\n  *(undefined4 *)(pitch_pid + 0x10) = temp_var3;\n  temp_var3 = DAT_08004a14;\n  *(undefined4 *)(pitch_pid + 0x14) = temp_var1;\n  *(undefined4 *)(pitch_pid + 0x18) = temp_var3;\n  temp_var4 = DAT_08004a1c;\n  temp_var3 = DAT_08004a18;\n  *(undefined4 *)(roll_pid + 4) = DAT_08004a18;\n  *(undefined4 *)(roll_pid + 8) = temp_var1;\n  *(undefined4 *)(roll_pid + 0xc) = temp_var4;\n  *(undefined4 *)(roll_pid + 0x10) = temp_var3;\n  temp_var3 = DAT_08004a20;\n  *(undefined4 *)(roll_pid + 0x14) = temp_var1;\n  *(undefined4 *)(roll_pid + 0x18) = temp_var3;\n  *(undefined4 *)(yaw_pid + 4) = DAT_08004a24;\n  *(undefined4 *)(yaw_pid + 8) = DAT_08004a28;\n  *(undefined4 *)(yaw_pid + 0xc) = temp_var2;\n  *(undefined4 *)(yaw_pid + 0x10) = 0;\n  *(undefined4 *)(yaw_pid + 0x14) = 0;\n  *(undefined4 *)(yaw_pid + 0x18) = 0;\n  *(undefined4 *)(altitude_pid + 4) = DAT_08004a2c;\n  *(undefined4 *)(altitude_pid + 8) = 0;\n  *(undefined4 *)(altitude_pid + 0xc) = 0;\n  *(undefined4 *)(altitude_pid + 0x10) = 0;\n  *(undefined4 *)(altitude_pid + 0x14) = 0;\n  *(undefined4 *)(altitude_pid + 0x18) = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004978",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_pid_controllers_08004978"
        },
        "FUN_08000c60": {
            "renaming": {
                "FUN_08000c60": "calculate_result_08000c60",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_input_1",
                "uVar2": "temp_input_2",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "iVar5": "initial_value",
                "uVar6": "shifted_input_1"
            },
            "code": "\nuint calculate_result_08000c60(uint input_1,uint input_2)\n\n{\n  uint temp_input_1;\n  uint temp_input_2;\n  int leading_zeroes_count;\n  uint shift_amount;\n  int initial_value;\n  uint shifted_input_1;\n  \n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  temp_input_1 = input_1;\n  temp_input_2 = input_2;\n  if (input_2 == 0) {\n    temp_input_1 = 0;\n    temp_input_2 = input_1;\n  }\n  initial_value = 0x5b000000;\n  if (input_2 == 0) {\n    initial_value = 0x4b000000;\n  }\n  leading_zeroes_count = count_leading_zeroes(temp_input_2);\n  shift_amount = leading_zeroes_count - 8;\n  initial_value = initial_value + -0x800000 + shift_amount * -0x800000;\n  if (leading_zeroes_count < 8) {\n    shift_amount = temp_input_2 << (leading_zeroes_count + 0x18U & 0xff);\n    temp_input_2 = initial_value + ((temp_input_2 >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n    if ((temp_input_1 | shift_amount << 1) == 0) {\n      temp_input_2 = temp_input_2 & ~(shift_amount >> 0x1f);\n    }\n    return temp_input_2;\n  }\n  shifted_input_1 = temp_input_1 << (shift_amount & 0xff);\n  temp_input_2 = initial_value + (temp_input_2 << (shift_amount & 0xff)) +\n          (temp_input_1 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_input_1);\n  if (shifted_input_1 == 0x80000000) {\n    temp_input_2 = temp_input_2 & 0xfffffffe;\n  }\n  return temp_input_2;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c60",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000c60"
        },
        "FUN_08006d68": {
            "renaming": {
                "FUN_08006d68": "calculate_complex_expression_08006d68",
                "__x": "input_value",
                "in_r0": "input_low",
                "in_r1": "input_high",
                "iVar1": "calculation_case",
                "uVar2": "mul_result_low",
                "uVar3": "mul_result_high",
                "uVar4": "square_result_low",
                "uVar5": "square_result_high",
                "uVar6": "mul_result2_low",
                "uVar7": "mul_result2_high",
                "uVar8": "input_high_masked",
                "uVar10": "intermediate_result",
                "uVar11": "final_result",
                "in_d0": "initial_result",
                "extraout_d0": "extra_output_d0",
                "extraout_r1": "extra_output_r1",
                "in_r3": "input_r3",
                "unaff_r4": "input_r4",
                "puVar9": "lookup_ptr"
            },
            "code": "\ndouble calculate_complex_expression_08006d68(double input_value)\n\n{\n  int input_low;\n  int calculation_case;\n  undefined4 mul_result_low;\n  undefined4 mul_result_high;\n  uint input_high;\n  undefined4 extra_output_r1;\n  undefined4 square_result_low;\n  undefined4 square_result_high;\n  undefined4 input_r3;\n  undefined4 input_r4;\n  undefined4 mul_result2_low;\n  undefined4 mul_result2_high;\n  uint input_high_masked;\n  undefined4 *lookup_ptr;\n  double initial_result;\n  double extra_output_d0;\n  undefined8 intermediate_result;\n  undefined8 final_result;\n  \n  final_result = CONCAT44(input_high,input_low);\n  input_high_masked = input_high & 0x7fffffff;\n  if (DAT_08007058 < (int)input_high_masked) {\n    if (((int)DAT_0800705c < (int)input_high_masked) || ((input_high_masked == DAT_0800705c && (input_low != 0)))) {\n      initial_result = (double)__aeabi_dadd();\n    }\n  }\n  else {\n    if (DAT_08007068 < (int)input_high_masked) {\n      fabs((double)CONCAT44(input_r4,input_r3));\n      if (DAT_08007070 < (int)input_high_masked) {\n        if (DAT_08007074 < (int)input_high_masked) {\n          final_result = __divdf3(0,DAT_0800707c,input_low,extra_output_r1);\n          calculation_case = 3;\n        }\n        else {\n          final_result = __subdf3();\n          intermediate_result = __muldf3(input_low,extra_output_r1,0,DAT_08007078);\n          intermediate_result = __aeabi_dadd((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0,DAT_0800706c);\n          final_result = __divdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)intermediate_result,\n                            (int)((ulonglong)intermediate_result >> 0x20));\n          calculation_case = 2;\n        }\n      }\n      else if (DAT_08007070 + -0xd0000 < (int)input_high_masked) {\n        final_result = __subdf3();\n        intermediate_result = __aeabi_dadd(input_low,extra_output_r1,0,DAT_0800706c);\n        final_result = __divdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)intermediate_result,\n                          (int)((ulonglong)intermediate_result >> 0x20));\n        calculation_case = 1;\n      }\n      else {\n        final_result = __aeabi_dadd();\n        final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),0,DAT_0800706c);\n        intermediate_result = __aeabi_dadd(input_low,extra_output_r1,0,0x40000000);\n        final_result = __divdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)intermediate_result,\n                          (int)((ulonglong)intermediate_result >> 0x20));\n        calculation_case = 0;\n      }\n    }\n    else {\n      if ((int)input_high_masked <= DAT_08007068 + -0x1bc0000) {\n        intermediate_result = __aeabi_dadd(input_low,input_high,DAT_08006ff8,DAT_08006ffc);\n        calculation_case = __aeabi_dcmpgt((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0,DAT_0800706c);\n        if (calculation_case != 0) {\n          return extra_output_d0;\n        }\n      }\n      calculation_case = -1;\n    }\n    mul_result2_high = (undefined4)((ulonglong)final_result >> 0x20);\n    mul_result2_low = (undefined4)final_result;\n    final_result = __muldf3(mul_result2_low,mul_result2_high,mul_result2_low,mul_result2_high);\n    square_result_low = (undefined4)((ulonglong)final_result >> 0x20);\n    mul_result_low = (undefined4)final_result;\n    final_result = __muldf3(mul_result_low,square_result_low,mul_result_low,square_result_low);\n    square_result_high = (undefined4)((ulonglong)final_result >> 0x20);\n    mul_result_high = (undefined4)final_result;\n    final_result = __muldf3(mul_result_high,square_result_high,DAT_08007000,DAT_08007004);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),DAT_08007008,DAT_0800700c);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result_high,square_result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),DAT_08007010,DAT_08007014);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result_high,square_result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),DAT_08007018,DAT_0800701c);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result_high,square_result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),DAT_08007020,DAT_08007024);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result_high,square_result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),DAT_08007028,DAT_0800702c);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result_low,square_result_low);\n    mul_result_low = (undefined4)((ulonglong)final_result >> 0x20);\n    intermediate_result = __muldf3(mul_result_high,square_result_high,DAT_08007030,DAT_08007034);\n    intermediate_result = __subdf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_08007038,DAT_0800703c);\n    intermediate_result = __muldf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),mul_result_high,square_result_high);\n    intermediate_result = __subdf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_08007040,DAT_08007044);\n    intermediate_result = __muldf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),mul_result_high,square_result_high);\n    intermediate_result = __subdf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_08007048,DAT_0800704c);\n    intermediate_result = __muldf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),mul_result_high,square_result_high);\n    intermediate_result = __subdf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_08007050,DAT_08007054);\n    intermediate_result = __muldf3((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),mul_result_high,square_result_high);\n    mul_result_high = (undefined4)((ulonglong)intermediate_result >> 0x20);\n    if (calculation_case == -1) {\n      final_result = __aeabi_dadd((int)final_result,mul_result_low,(int)intermediate_result,mul_result_high);\n      final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result2_low,mul_result2_high);\n      initial_result = (double)__subdf3(mul_result2_low,mul_result2_high,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    }\n    else {\n      final_result = __aeabi_dadd((int)final_result,mul_result_low,(int)intermediate_result,mul_result_high);\n      final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result2_low,mul_result2_high);\n      lookup_ptr = (undefined4 *)(PTR_calculate_complex_expression_08006d68hi_08007080 + calculation_case * 8);\n      final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),\n                        *(undefined4 *)(PTR_calculate_complex_expression_08006d68lo_08007084 + calculation_case * 8),\n                        *(undefined4 *)((int)(PTR_calculate_complex_expression_08006d68lo_08007084 + calculation_case * 8) + 4));\n      final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),mul_result2_low,mul_result2_high);\n      initial_result = (double)__subdf3(*lookup_ptr,lookup_ptr[1],(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    }\n  }\n  return initial_result;\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d68",
            "calling": [
                "__ieee754_atan2"
            ],
            "imported": false,
            "current_name": "calculate_complex_expression_08006d68"
        },
        "FUN_08004f04": {
            "renaming": {
                "FUN_08004f04": "handle_uart_interrupt_08004f04"
            },
            "code": "\nvoid handleUARTInterrupt_08004f04(void)\n\n{\n  HAL_UART_IRQHandler((UART_HandleTypeDef *)PTR_huart1_08004f0c);\n  return;\n}\n\n",
            "called": [
                "HAL_UART_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f04",
            "calling": [],
            "imported": false,
            "current_name": "handle_uart_interrupt_08004f04"
        },
        "FUN_080072b8": {
            "renaming": {
                "FUN_080072b8": "allocate_memory_080072b8",
                "__delta": "size",
                "puVar1": "heap_end_ptr",
                "pvVar2": "allocated_memory"
            },
            "code": "\nvoid * allocate_memory_080072b8(intptr_t size)\n\n{\n  undefined *heap_end_ptr;\n  void *allocated_memory;\n  \n  heap_end_ptr = PTR_heap_end_4116_080072cc;\n  if (*(int *)PTR_heap_end_4116_080072cc == 0) {\n    *(undefined **)PTR_heap_end_4116_080072cc = PTR__ebss_080072d0;\n  }\n  allocated_memory = *(void **)heap_end_ptr;\n  *(intptr_t *)heap_end_ptr = size + (int)allocated_memory;\n  return allocated_memory;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072b8",
            "calling": [
                "_sbrk_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_080072b8"
        },
        "FUN_0800581c": {
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "error_code",
                "param_2": "memory_size",
                "puVar1": "errno_ptr",
                "pvVar2": "allocated_memory"
            },
            "code": "\nvoid allocate_memory_0800581c(int *error_code,intptr_t memory_size)\n\n{\n  undefined *errno_ptr;\n  void *allocated_memory;\n  \n  errno_ptr = PTR_errno_08005838;\n  *(undefined4 *)PTR_errno_08005838 = 0;\n  allocated_memory = _sbrk(memory_size);\n  if ((allocated_memory == (void *)0xffffffff) && (*(int *)errno_ptr != 0)) {\n    *error_code = *(int *)errno_ptr;\n  }\n  return;\n}\n\n",
            "called": [
                "_sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800581c",
            "calling": [
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_0800581c"
        },
        "FUN_08003eac": {
            "renaming": {
                "FUN_08003eac": "trigger_software_interrupt_08003eac"
            },
            "code": "\nuint32_t trigger_software_interrupt_08003eac(uint32_t a0,uint32_t a1,int32_t a2)\n\n{\n  software_interrupt(0x3f);\n  return a0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003eac",
            "calling": [
                "startForkserver"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_08003eac"
        },
        "FUN_080072ac": {
            "renaming": {
                "FUN_080072ac": "get_impure_ptr_value_080072ac",
                "undefined4": "uint32_t"
            },
            "code": "\nuint32_t get_impure_ptr_value_080072ac(void)\n\n{\n  return *(uint32_t *)PTR__impure_ptr_080072b4;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072ac",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "get_impure_ptr_value_080072ac"
        },
        "FUN_08000ad0": {
            "renaming": {
                "FUN_08000ad0": "floating_point_operation_08000ad0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "shiftedInput1",
                "iVar1": "intVar1",
                "uVar2": "unsignedVar2",
                "uVar3": "unsignedVar3",
                "uVar4": "unsignedVar4",
                "uVar5": "unsignedVar5",
                "uVar6": "unsignedVar6",
                "iVar7": "intVar7",
                "bVar8": "boolVar8"
            },
            "code": "\nuint floatingPointOperation_08000ad0(uint input1,uint input2,undefined4 unusedParam,uint shiftedInput1)\n\n{\n  int intVar1;\n  uint unsignedVar2;\n  uint unsignedVar3;\n  uint unsignedVar4;\n  uint unsignedVar5;\n  uint unsignedVar6;\n  int intVar7;\n  bool boolVar8;\n  \n  unsignedVar2 = input1 ^ 0x80000000;\n  unsignedVar4 = input1 << 1;\n  boolVar8 = unsignedVar4 == 0;\n  if (!boolVar8) {\n    shiftedInput1 = input2 << 1;\n    boolVar8 = shiftedInput1 == 0;\n  }\n  if (!boolVar8) {\n    boolVar8 = unsignedVar4 == shiftedInput1;\n  }\n  intVar7 = (int)unsignedVar4 >> 0x18;\n  if (!boolVar8) {\n    boolVar8 = intVar7 == -1;\n  }\n  if (!boolVar8) {\n    boolVar8 = (int)shiftedInput1 >> 0x18 == -1;\n  }\n  if (boolVar8) {\n    intVar1 = (int)(input2 << 1) >> 0x18;\n    if (intVar7 == -1 || intVar1 == -1) {\n      unsignedVar4 = input2;\n      if (intVar7 == -1) {\n        unsignedVar4 = unsignedVar2;\n      }\n      if (intVar7 != -1 || intVar1 != -1) {\n        input2 = unsignedVar4;\n      }\n      boolVar8 = (unsignedVar4 & 0x7fffff) == 0;\n      if (boolVar8) {\n        boolVar8 = (input2 & 0x7fffff) == 0;\n      }\n      if (boolVar8) {\n        boolVar8 = unsignedVar4 == input2;\n      }\n      if (!boolVar8) {\n        unsignedVar4 = unsignedVar4 | 0x400000;\n      }\n      return unsignedVar4;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (unsignedVar4 == 0) {\n        unsignedVar2 = input2;\n      }\n      return unsignedVar2;\n    }\n    if (unsignedVar2 != input2) {\n      return 0;\n    }\n    if ((unsignedVar4 & 0xff000000) == 0) {\n      input1 = input1 << 1;\n      if ((unsignedVar2 & 0x80000000) != 0) {\n        input1 = input1 | 0x80000000;\n      }\n      return input1;\n    }\n    if (unsignedVar4 < 0xfe000000) {\n      return unsignedVar2 + 0x800000;\n    }\n    unsignedVar2 = unsignedVar2 & 0x80000000;\nLAB_08000c12:\n    return unsignedVar2 | 0x7f800000;\n  }\n  unsignedVar4 = unsignedVar4 >> 0x18;\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  unsignedVar6 = shiftedInput1 - unsignedVar4;\n  boolVar8 = unsignedVar6 != 0;\n  unsignedVar5 = unsignedVar4;\n  if (boolVar8 && unsignedVar4 <= shiftedInput1) {\n    unsignedVar5 = unsignedVar4 + unsignedVar6;\n  }\n  if (boolVar8 && unsignedVar4 <= shiftedInput1) {\n    input2 = input2 ^ unsignedVar2;\n  }\n  if (boolVar8 && unsignedVar4 <= shiftedInput1) {\n    unsignedVar2 = unsignedVar2 ^ input2;\n  }\n  if (boolVar8 && unsignedVar4 <= shiftedInput1) {\n    input2 = input2 ^ unsignedVar2;\n  }\n  if (shiftedInput1 < unsignedVar4) {\n    unsignedVar6 = -unsignedVar6;\n  }\n  if (0x19 < unsignedVar6) {\n    return unsignedVar2;\n  }\n  unsignedVar4 = unsignedVar2 & 0xffffff | 0x800000;\n  if ((unsignedVar2 & 0x80000000) != 0) {\n    unsignedVar4 = -unsignedVar4;\n  }\n  unsignedVar3 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    unsignedVar3 = -unsignedVar3;\n  }\n  if (unsignedVar5 == unsignedVar6) {\n    unsignedVar3 = unsignedVar3 ^ 0x800000;\n    if (unsignedVar5 == 0) {\n      unsignedVar4 = unsignedVar4 ^ 0x800000;\n      unsignedVar5 = 1;\n    }\n    else {\n      unsignedVar6 = unsignedVar6 - 1;\n    }\n  }\n  unsignedVar4 = unsignedVar4 + ((int)unsignedVar3 >> (unsignedVar6 & 0xff));\n  unsignedVar3 = unsignedVar3 << (0x20 - unsignedVar6 & 0xff);\n  unsignedVar2 = unsignedVar4 & 0x80000000;\n  if ((int)unsignedVar4 < 0) {\n    boolVar8 = unsignedVar3 != 0;\n    unsignedVar3 = -unsignedVar3;\n    unsignedVar4 = -unsignedVar4 - (uint)boolVar8;\n  }\n  if (unsignedVar4 < 0x800000) {\n    unsignedVar6 = unsignedVar3 & 0x80000000;\n    unsignedVar3 = unsignedVar3 << 1;\n    unsignedVar4 = unsignedVar4 * 2 + (uint)(unsignedVar6 != 0);\n    unsignedVar6 = unsignedVar5 - 2;\n    if ((unsignedVar4 & 0x800000) == 0) {\n      intVar7 = count_leading_zeroes(unsignedVar4);\n      unsignedVar5 = intVar7 - 8;\n      unsignedVar4 = unsignedVar4 << (unsignedVar5 & 0xff);\n      if ((int)unsignedVar6 < (int)unsignedVar5) {\n        unsignedVar4 = unsignedVar4 >> (-(unsignedVar6 - unsignedVar5) & 0xff);\n      }\n      else {\n        unsignedVar4 = unsignedVar4 + (unsignedVar6 - unsignedVar5) * 0x800000;\n      }\n      return unsignedVar4 | unsignedVar2;\n    }\n  }\n  else {\n    unsignedVar6 = unsignedVar5 - 1;\n    if (0xffffff < unsignedVar4) {\n      unsignedVar6 = unsignedVar4 & 1;\n      unsignedVar4 = unsignedVar4 >> 1;\n      unsignedVar3 = (uint)(unsignedVar6 != 0) << 0x1f | unsignedVar3 >> 1;\n      unsignedVar6 = unsignedVar5;\n      if (0xfd < unsignedVar5) goto LAB_08000c12;\n    }\n  }\n  unsignedVar4 = unsignedVar4 + unsignedVar6 * 0x800000 + (uint)(0x7fffffff < unsignedVar3);\n  if (unsignedVar3 == 0x80000000) {\n    unsignedVar4 = unsignedVar4 & 0xfffffffe;\n  }\n  return unsignedVar4 | unsignedVar2;\n}\n\n",
            "called": [
                "__addsf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ad0",
            "calling": [],
            "imported": false,
            "current_name": "floating_point_operation_08000ad0"
        },
        "FUN_08002cb0": {
            "renaming": {
                "FUN_08002cb0": "initialize_magnetometer_08002cb0",
                "in_r3": "inputRawData",
                "puVar1": "tempPointer",
                "uVar2": "tempVar",
                "rawData": "readData",
                "_rawData": "rawDataValue"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid initializeMagnetometer_08002cb0(void)\n\n{\n  undefined *tempPointer;\n  undefined4 tempVar;\n  uint inputRawData;\n  uint8_t readData [3];\n  \n  rawDataValue = inputRawData;\n  I2C_WriteByte(0xd0,0x37,'\\\"','\\x01');\n  tempPointer = PTR_s____Src_MPU9250_c_08002d80;\n  I2C_WriteByte(0xd0,0x6a,'\\x01','\\x01');\n  I2C_ReadByte(0x18,0,tempPointer,0xad);\n  I2C_WriteByte(0x18,0xb,'\\x01','\\x01');\n  I2C_WriteByte(0x18,10,'\\0','\\x01');\n  I2C_WriteByte(0x18,10,'\\x0f','\\x01');\n  I2C_ReadByteArray(0x18,0x10,readData,3,tempPointer,0xb6);\n  tempPointer = PTR_magCalib_08002d84;\n  tempVar = __floatsisf((rawDataValue & 0xff) - 0x80);\n  tempVar = __aeabi_fmul(tempVar,0x3b800000);\n  tempVar = __addsf3(tempVar,0x3f800000);\n  *(undefined4 *)tempPointer = tempVar;\n  tempVar = __floatsisf((rawDataValue >> 8 & 0xff) - 0x80);\n  tempVar = __aeabi_fmul(tempVar,0x3b800000);\n  tempVar = __addsf3(tempVar,0x3f800000);\n  *(undefined4 *)(tempPointer + 4) = tempVar;\n  tempVar = __floatsisf(readData[2] - 0x80);\n  tempVar = __aeabi_fmul(tempVar,0x3b800000);\n  tempVar = __addsf3(tempVar,0x3f800000);\n  *(undefined4 *)(tempPointer + 8) = tempVar;\n  I2C_WriteByte(0x18,10,'\\0','\\x01');\n  I2C_WriteByte(0x18,10,'\\x16','\\x01');\n  return;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "__floatsisf",
                "__addsf3",
                "I2C_ReadByteArray",
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002cb0",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "initialize_magnetometer_08002cb0"
        },
        "FUN_08002324": {
            "renaming": {
                "FUN_08002324": "configure_timer_output_08002324",
                "TIMx": "timer",
                "OC_Config": "outputConfig",
                "uVar1": "tmpCR2",
                "uVar2": "ocMode",
                "uVar3": "ocPolarity",
                "pTVar4": "tmpIdleState"
            },
            "code": "\nvoid ConfigureTimerOutput_08002324(TIM_TypeDef *timer,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint32_t tmpCR2;\n  uint32_t ocMode;\n  uint32_t ocPolarity;\n  TIM_TypeDef *tmpIdleState;\n  \n  timer->CCER = timer->CCER & 0xffffefff;\n  tmpCR2 = timer->CR2;\n  ocMode = outputConfig->OCMode;\n  ocPolarity = outputConfig->OCPolarity;\n  tmpIdleState = DAT_08002364;\n  if (timer == DAT_08002364) {\n    tmpIdleState = (TIM_TypeDef *)outputConfig->OCIdleState;\n    tmpCR2 = tmpCR2 & 0xffffbfff;\n  }\n  if (timer == DAT_08002364) {\n    tmpCR2 = tmpCR2 | (int)tmpIdleState << 6;\n  }\n  timer->CR2 = tmpCR2;\n  timer->CCMR2 = timer->CCMR2 & 0xffff8cff | ocMode << 8;\n  timer->CCR4 = outputConfig->Pulse;\n  timer->CCER = timer->CCER & 0xffffdfff | ocPolarity << 0xc;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002324",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_output_08002324"
        },
        "FUN_08002564": {
            "renaming": {
                "FUN_08002564": "FUNC_08002564"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08002564\n          (TIM_HandleTypeDef *htim,TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)\n\n{\n  HAL_StatusTypeDef HVar1;\n  \n  HVar1 = HAL_BUSY;\n  if (htim->Lock != HAL_LOCKED) {\n    htim->State = HAL_TIM_STATE_BUSY;\n    htim->Instance->BDTR =\n         sBreakDeadTimeConfig->OffStateRunMode | sBreakDeadTimeConfig->OffStateIDLEMode |\n         sBreakDeadTimeConfig->LockLevel | sBreakDeadTimeConfig->DeadTime |\n         sBreakDeadTimeConfig->BreakState | sBreakDeadTimeConfig->BreakPolarity |\n         sBreakDeadTimeConfig->AutomaticOutput;\n    htim->State = HAL_TIM_STATE_READY;\n    HVar1 = HAL_OK;\n    htim->Lock = HAL_UNLOCKED;\n  }\n  return HVar1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002564",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "FUNC_08002564"
        },
        "FUN_08004fb0": {
            "renaming": {
                "FUN_08004fb0": "infinite_loop_08004fb0"
            },
            "code": "\nvoid infinite_loop_08004fb0(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "USBWakeUp_IRQHandler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb0",
            "calling": [
                "USBWakeUp_IRQHandler"
            ],
            "imported": false,
            "current_name": "infinite_loop_08004fb0"
        },
        "FUN_08000ad8": {
            "renaming": {
                "FUN_08000ad8": "perform_calculation_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "tempVar",
                "iVar1": "intVar1",
                "uVar2": "uintVar2",
                "uVar3": "uintVar3",
                "uVar4": "uintVar4",
                "uVar5": "uintVar5",
                "uVar6": "uintVar6",
                "iVar7": "intVar2",
                "bVar8": "boolVar"
            },
            "code": "\nuint performCalculation_08000ad8(uint input1,uint input2,undefined4 unusedParam,uint tempVar)\n\n{\n  int intVar1;\n  uint uintVar2;\n  uint uintVar3;\n  uint uintVar4;\n  uint uintVar5;\n  uint uintVar6;\n  int intVar2;\n  bool boolVar;\n  \n  uintVar2 = input2 ^ 0x80000000;\n  uintVar4 = input1 << 1;\n  boolVar = uintVar4 == 0;\n  if (!boolVar) {\n    tempVar = input2 << 1;\n    boolVar = tempVar == 0;\n  }\n  if (!boolVar) {\n    boolVar = uintVar4 == tempVar;\n  }\n  intVar2 = (int)uintVar4 >> 0x18;\n  if (!boolVar) {\n    boolVar = intVar2 == -1;\n  }\n  if (!boolVar) {\n    boolVar = (int)tempVar >> 0x18 == -1;\n  }\n  if (boolVar) {\n    intVar1 = (int)(input2 << 1) >> 0x18;\n    if (intVar2 == -1 || intVar1 == -1) {\n      uintVar4 = uintVar2;\n      if (intVar2 == -1) {\n        uintVar4 = input1;\n      }\n      if (intVar2 != -1 || intVar1 != -1) {\n        uintVar2 = uintVar4;\n      }\n      boolVar = (uintVar4 & 0x7fffff) == 0;\n      if (boolVar) {\n        boolVar = (uintVar2 & 0x7fffff) == 0;\n      }\n      if (boolVar) {\n        boolVar = uintVar4 == uintVar2;\n      }\n      if (!boolVar) {\n        uintVar4 = uintVar4 | 0x400000;\n      }\n      return uintVar4;\n    }\n    if (((input1 ^ uintVar2) & 0x7fffffff) != 0) {\n      if (uintVar4 == 0) {\n        input1 = uintVar2;\n      }\n      return input1;\n    }\n    if (input1 != uintVar2) {\n      return 0;\n    }\n    if ((uintVar4 & 0xff000000) == 0) {\n      uintVar2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        uintVar2 = uintVar2 | 0x80000000;\n      }\n      return uintVar2;\n    }\n    if (uintVar4 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  uintVar4 = uintVar4 >> 0x18;\n  tempVar = tempVar >> 0x18;\n  uintVar6 = tempVar - uintVar4;\n  boolVar = uintVar6 != 0;\n  uintVar5 = uintVar4;\n  if (boolVar && uintVar4 <= tempVar) {\n    uintVar5 = uintVar4 + uintVar6;\n  }\n  if (boolVar && uintVar4 <= tempVar) {\n    uintVar2 = uintVar2 ^ input1;\n  }\n  if (boolVar && uintVar4 <= tempVar) {\n    input1 = input1 ^ uintVar2;\n  }\n  if (boolVar && uintVar4 <= tempVar) {\n    uintVar2 = uintVar2 ^ input1;\n  }\n  if (tempVar < uintVar4) {\n    uintVar6 = -uintVar6;\n  }\n  if (0x19 < uintVar6) {\n    return input1;\n  }\n  uintVar4 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    uintVar4 = -uintVar4;\n  }\n  uintVar3 = uintVar2 & 0xffffff | 0x800000;\n  if ((uintVar2 & 0x80000000) != 0) {\n    uintVar3 = -uintVar3;\n  }\n  if (uintVar5 == uintVar6) {\n    uintVar3 = uintVar3 ^ 0x800000;\n    if (uintVar5 == 0) {\n      uintVar4 = uintVar4 ^ 0x800000;\n      uintVar5 = 1;\n    }\n    else {\n      uintVar6 = uintVar6 - 1;\n    }\n  }\n  uintVar4 = uintVar4 + ((int)uintVar3 >> (uintVar6 & 0xff));\n  uintVar3 = uintVar3 << (0x20 - uintVar6 & 0xff);\n  input1 = uintVar4 & 0x80000000;\n  if ((int)uintVar4 < 0) {\n    boolVar = uintVar3 != 0;\n    uintVar3 = -uintVar3;\n    uintVar4 = -uintVar4 - (uint)boolVar;\n  }\n  if (uintVar4 < 0x800000) {\n    uintVar2 = uintVar3 & 0x80000000;\n    uintVar3 = uintVar3 << 1;\n    uintVar4 = uintVar4 * 2 + (uint)(uintVar2 != 0);\n    uintVar2 = uintVar5 - 2;\n    if ((uintVar4 & 0x800000) == 0) {\n      intVar2 = count_leading_zeroes(uintVar4);\n      uintVar6 = intVar2 - 8;\n      uintVar4 = uintVar4 << (uintVar6 & 0xff);\n      if ((int)uintVar2 < (int)uintVar6) {\n        uintVar4 = uintVar4 >> (-(uintVar2 - uintVar6) & 0xff);\n      }\n      else {\n        uintVar4 = uintVar4 + (uintVar2 - uintVar6) * 0x800000;\n      }\n      return uintVar4 | input1;\n    }\n  }\n  else {\n    uintVar2 = uintVar5 - 1;\n    if (0xffffff < uintVar4) {\n      uintVar2 = uintVar4 & 1;\n      uintVar4 = uintVar4 >> 1;\n      uintVar3 = (uint)(uintVar2 != 0) << 0x1f | uintVar3 >> 1;\n      uintVar2 = uintVar5;\n      if (0xfd < uintVar5) goto LAB_08000c12;\n    }\n  }\n  uintVar4 = uintVar4 + uintVar2 * 0x800000 + (uint)(0x7fffffff < uintVar3);\n  if (uintVar3 == 0x80000000) {\n    uintVar4 = uintVar4 & 0xfffffffe;\n  }\n  return uintVar4 | input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ad8",
            "calling": [
                "AK8963_ReadData",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "AHRS_GetYaw",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "perform_calculation_08000ad8"
        },
        "FUN_08003ec8": {
            "renaming": {
                "FUN_08003ec8": "add_to_circular_buffer_08003ec8",
                "data": "inputData"
            },
            "code": "\nint addToCircularBuffer_08003ec8(CircularBuffer *cb,uint8_t inputData)\n\n{\n  cb->size = cb->size + 1;\n  cb->buffer[cb->tail] = inputData;\n  cb->tail = cb->tail + 1 & 0x7ff;\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ec8",
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "imported": false,
            "current_name": "add_to_circular_buffer_08003ec8"
        },
        "FUN_08003fe8": {
            "renaming": {
                "FUN_08003fe8": "set_pwm_value_08003fe8",
                "pwm": "pwm_value"
            },
            "code": "\nvoid set_pwm_value_08003fe8(int pwm_value)\n\n{\n  *(int *)(*(int *)PTR_htim3_08003ff0 + 0x3c) = pwm_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fe8",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fe8"
        },
        "FUN_08005714": {
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "reent_ptr",
                "param_2": "requested_size",
                "puVar1": "sbrk_start",
                "uVar2": "sbrk_result",
                "puVar3": "current_block",
                "iVar4": "sbrk_adjustment",
                "puVar5": "next_block",
                "uVar6": "size_difference",
                "puVar7": "previous_block",
                "uVar8": "adjusted_size"
            },
            "code": "\nuint allocate_memory_08005714(undefined4 *reent_ptr,uint requested_size)\n\n{\n  undefined *sbrk_start;\n  undefined4 sbrk_result;\n  uint *current_block;\n  int sbrk_adjustment;\n  uint *next_block;\n  uint size_difference;\n  uint *previous_block;\n  uint adjusted_size;\n  \n  adjusted_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < requested_size)) {\n    *reent_ptr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    sbrk_start = PTR___malloc_sbrk_start_080057cc;\n    current_block = *(uint **)PTR___malloc_free_list_080057c8;\n    previous_block = *(uint **)PTR___malloc_free_list_080057c8;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      size_difference = *next_block - adjusted_size;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (previous_block == next_block) {\n            adjusted_size = previous_block[1];\n            *(uint *)PTR___malloc_free_list_080057c8 = adjusted_size;\n          }\n          else {\n            adjusted_size = next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = adjusted_size;\n            previous_block = next_block;\n          }\n        }\n        else {\n          *next_block = size_difference;\n          *(uint *)((int)next_block + size_difference) = adjusted_size;\n          previous_block = (uint *)((int)next_block + size_difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (*(int *)PTR___malloc_sbrk_start_080057cc == 0) {\n      sbrk_result = _sbrk_r(reent_ptr);\n      *(undefined4 *)sbrk_start = sbrk_result;\n    }\n    current_block = (uint *)_sbrk_r(reent_ptr,adjusted_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (sbrk_adjustment = _sbrk_r(reent_ptr,(int)previous_block - (int)current_block), sbrk_adjustment != -1)))) {\n      *previous_block = adjusted_size;\nLAB_08005778:\n      __malloc_unlock(reent_ptr);\n      adjusted_size = (int)previous_block + 0xbU & 0xfffffff8;\n      sbrk_adjustment = adjusted_size - (int)(previous_block + 1);\n      if (sbrk_adjustment != 0) {\n        *(int *)((int)previous_block + sbrk_adjustment) = -sbrk_adjustment;\n        return adjusted_size;\n      }\n      return adjusted_size;\n    }\n    *reent_ptr = 0xc;\n    __malloc_unlock(reent_ptr);\n  }\n  return 0;\n}\n\n",
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005714",
            "calling": [
                "__ssputs_r",
                "_svfiprintf_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "allocate_memory_08005714"
        },
        "FUN_08004fb4": {
            "renaming": {
                "FUN_08004fb4": "initialize_context_08004fb4",
                "param_1": "ctx",
                "puVar1": "func_ptr",
                "iVar2": "range",
                "iVar3": "index"
            },
            "code": "\nvoid initialize_context_08004fb4(EVP_PKEY_CTX *ctx)\n\n{\n  undefined *func_ptr;\n  int range;\n  int index;\n  \n  func_ptr = PTR___frame_dummy_init_array_entry_08004fec;\n  range = (int)PTR___frame_dummy_init_array_entry_08004ff0 -\n          (int)PTR___frame_dummy_init_array_entry_08004fec;\n  for (index = 0; index != range >> 2; index = index + 1) {\n    ctx = (EVP_PKEY_CTX *)(**(code **)(func_ptr + index * 4))();\n  }\n  _init(ctx);\n  func_ptr = PTR___frame_dummy_init_array_entry_08004ff4;\n  range = (int)PTR___do_global_dtors_aux_fini_array_entry_08004ff8 -\n          (int)PTR___frame_dummy_init_array_entry_08004ff4;\n  for (index = 0; index != range >> 2; index = index + 1) {\n    (**(code **)(func_ptr + index * 4))();\n  }\n  return;\n}\n\n",
            "called": [
                "frame_dummy",
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004fb4",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "initialize_context_08004fb4"
        },
        "FUN_080009dc": {
            "renaming": {
                "FUN_080009dc": "compare_floats_080009dc",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool compareFloats_080009dc(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cdrcmple();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009dc",
            "calling": [],
            "imported": false,
            "current_name": "compare_floats_080009dc"
        },
        "FUN_08000c70": {
            "renaming": {
                "FUN_08000c70": "calculate_result_08000c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "leading_zeroes_count",
                "uVar4": "shift_amount",
                "uVar5": "result",
                "iVar6": "intermediate_result",
                "uVar7": "shifted_value",
                "bVar8": "is_input1_nonzero"
            },
            "code": "\nuint calculate_result_08000c70(uint input_1,uint input_2)\n\n{\n  uint temp_1;\n  uint temp_2;\n  int leading_zeroes_count;\n  uint shift_amount;\n  uint result;\n  int intermediate_result;\n  uint shifted_value;\n  bool is_input1_nonzero;\n  \n  if ((input_1 | input_2) == 0) {\n    return input_1;\n  }\n  result = input_2 & 0x80000000;\n  if ((int)result < 0) {\n    is_input1_nonzero = input_1 != 0;\n    input_1 = -input_1;\n    input_2 = -input_2 - (uint)is_input1_nonzero;\n  }\n  temp_2 = input_1;\n  temp_1 = input_2;\n  if (input_2 == 0) {\n    temp_2 = 0;\n    temp_1 = input_1;\n  }\n  result = result | 0x5b000000;\n  if (input_2 == 0) {\n    result = result + 0xf0000000;\n  }\n  leading_zeroes_count = count_leading_zeroes(temp_1);\n  shift_amount = leading_zeroes_count - 8;\n  intermediate_result = (result - 0x800000) + shift_amount * -0x800000;\n  if (leading_zeroes_count < 8) {\n    shift_amount = temp_1 << (leading_zeroes_count + 0x18U & 0xff);\n    result = intermediate_result + ((temp_1 >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n    if ((temp_2 | shift_amount << 1) == 0) {\n      result = result & ~(shift_amount >> 0x1f);\n    }\n    return result;\n  }\n  shifted_value = temp_2 << (shift_amount & 0xff);\n  result = intermediate_result + (temp_1 << (shift_amount & 0xff)) +\n          (temp_2 >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < shifted_value);\n  if (shifted_value == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c70",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000c70"
        },
        "FUN_080023d0": {
            "renaming": {
                "FUN_080023d0": "initialize_tim_pwm_080023d0",
                "htim": "tim_handle",
                "HAL_TIM_STATE_RESET": "TIM_STATE_RESET",
                "HAL_UNLOCKED": "TIM_UNLOCKED",
                "HAL_TIM_PWM_MspInit": "TIM_PWM_MspInit",
                "HAL_TIM_STATE_BUSY": "TIM_STATE_BUSY",
                "TIM_Base_SetConfig": "TIM_Base_Config",
                "HAL_TIM_STATE_READY": "TIM_STATE_READY",
                "HAL_OK": "TIM_OK",
                "HAL_ERROR": "TIM_ERROR"
            },
            "code": "\nHAL_StatusTypeDef Initialize_TIM_PWM_080023d0(TIM_HandleTypeDef *tim_handle)\n\n{\n  if (tim_handle != (TIM_HandleTypeDef *)0x0) {\n    if (tim_handle->State == TIM_STATE_RESET) {\n      tim_handle->Lock = TIM_UNLOCKED;\n      TIM_PWM_MspInit(tim_handle);\n    }\n    tim_handle->State = TIM_STATE_BUSY;\n    TIM_Base_Config(tim_handle->Instance,&tim_handle->Init);\n    tim_handle->State = TIM_STATE_READY;\n    return TIM_OK;\n  }\n  return TIM_ERROR;\n}\n\n",
            "called": [
                "HAL_TIM_PWM_MspInit",
                "TIM_Base_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080023d0",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_tim_pwm_080023d0"
        },
        "FUN_08000a30": {
            "renaming": {
                "FUN_08000a30": "calculate_result_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "in_r12": "intermediateValue",
                "bVar4": "condition1",
                "bVar5": "condition2"
            },
            "code": "\nuint calculateResult_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint tempVar1;\n  uint tempVar2;\n  uint intermediateValue;\n  bool condition1;\n  bool condition2;\n  \n  tempVar1 = input2 * 2;\n  condition2 = tempVar1 < 0x70000000;\n  tempVar2 = tempVar1 + 0x90000000;\n  result = tempVar2;\n  if (!condition2) {\n    intermediateValue = tempVar1 + 0x8fe00000;\n    result = intermediateValue;\n  }\n  condition1 = result == 0;\n  if (!condition2 && tempVar2 >= 0x200000) {\n    condition1 = intermediateValue == 0x1fc00000;\n  }\n  if (((condition2 || tempVar2 < 0x200000) || 0x1fc00000 < intermediateValue) || condition1) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)tempVar1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(tempVar1 + 0x92e00000) < 0 != SCARRY4(tempVar2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    tempVar1 = 0x18 - (tempVar1 + 0x92e00000 >> 0x15);\n    result = input1 >> (tempVar1 & 0xff);\n    if (input1 << (0x20 - tempVar1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    tempVar2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | tempVar2 << (0x20 - tempVar1 & 0xff);\n    tempVar2 = (tempVar2 >> (tempVar1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + tempVar2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a30",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_08000a30"
        },
        "FUN_08003fdc": {
            "renaming": {
                "FUN_08003fdc": "set_pwm_value_08003fdc",
                "pwm": "pwm_value"
            },
            "code": "\nvoid set_pwm_value_08003fdc(int pwm_value)\n\n{\n  *(int *)(*(int *)PTR_htim2_08003fe4 + 0x38) = pwm_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fdc",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fdc"
        },
        "FUN_080009f0": {
            "renaming": {
                "FUN_080009f0": "compare_values_080009f0",
                "in_CY": "comparisonResult"
            },
            "code": "\nbool compareValues_080009f0(void)\n\n{\n  char comparisonResult;\n  \n  __aeabi_cdrcmple();\n  return comparisonResult == '\\0';\n}\n\n",
            "called": [
                "__aeabi_cdrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009f0",
            "calling": [
                "asin",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "compare_values_080009f0"
        },
        "FUN_08004f10": {
            "renaming": {
                "FUN_08004f10": "configure_memory_registers_08004f10",
                "puVar1": "memoryRegister"
            },
            "code": "\nvoid configureMemoryRegisters_08004f10(void)\n\n{\n  uint *memoryRegister;\n  \n  memoryRegister = DAT_08004f50;\n  *DAT_08004f50 = *DAT_08004f50 | 1;\n  memoryRegister[1] = DAT_08004f54 & memoryRegister[1];\n  *memoryRegister = *memoryRegister & 0xfef6ffff;\n  *memoryRegister = *memoryRegister & 0xfffbffff;\n  memoryRegister[1] = memoryRegister[1] & 0xff80ffff;\n  memoryRegister[2] = 0x9f0000;\n  *(undefined4 *)(DAT_08004f58 + 8) = 0x8000000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004f10",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "configure_memory_registers_08004f10"
        },
        "FUN_08005044": {
            "renaming": {
                "FUN_08005044": "resize_and_update_buffer_08005044",
                "param_1": "allocator_ptr",
                "param_2": "buffer_info",
                "param_3": "source_data",
                "param_4": "source_data_size",
                "pvVar1": "new_buffer",
                "pvVar2": "available_space",
                "__n": "current_buffer_size"
            },
            "code": "\nundefined4 resize_and_update_buffer_08005044(undefined4 *allocator_ptr,void **buffer_info,void *source_data,void *source_data_size)\n\n{\n  void *new_buffer;\n  void *available_space;\n  size_t current_buffer_size;\n  \n  available_space = buffer_info[2];\n  if ((available_space <= source_data_size) && ((*(ushort *)(buffer_info + 3) & 0x480) != 0)) {\n    current_buffer_size = (int)*buffer_info - (int)buffer_info[4];\n    available_space = (void *)((uint)((int)buffer_info[5] * 3) / 2);\n    new_buffer = (void *)((int)source_data_size + current_buffer_size + 1);\n    if (available_space < new_buffer) {\n      available_space = new_buffer;\n    }\n    if ((int)((uint)*(ushort *)(buffer_info + 3) << 0x15) < 0) {\n      new_buffer = (void *)_malloc_r(allocator_ptr,available_space);\n      if (new_buffer == (void *)0x0) {\nLAB_0800508a:\n        *allocator_ptr = 0xc;\n        *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      memcpy(new_buffer,buffer_info[4],current_buffer_size);\n      *(ushort *)(buffer_info + 3) = *(ushort *)(buffer_info + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      new_buffer = (void *)_realloc_r(allocator_ptr,buffer_info[4],available_space);\n      if (new_buffer == (void *)0x0) {\n        _free_r(allocator_ptr,buffer_info[4]);\n        goto LAB_0800508a;\n      }\n    }\n    buffer_info[4] = new_buffer;\n    *buffer_info = (void *)((int)new_buffer + current_buffer_size);\n    buffer_info[5] = available_space;\n    buffer_info[2] = (void *)((int)available_space - current_buffer_size);\n    available_space = source_data_size;\n  }\n  if (source_data_size <= available_space) {\n    available_space = source_data_size;\n  }\n  memmove(*buffer_info,source_data,(size_t)available_space);\n  buffer_info[2] = (void *)((int)buffer_info[2] - (int)available_space);\n  *buffer_info = (void *)((int)available_space + (int)*buffer_info);\n  return 0;\n}\n\n",
            "called": [
                "_free_r",
                "memmove",
                "_malloc_r",
                "_realloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005044",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "resize_and_update_buffer_08005044"
        },
        "FUN_08004194": {
            "renaming": {
                "FUN_08004194": "initialize_system_08004194"
            },
            "code": "\nvoid initializeSystem_08004194(void)\n\n{\n  Devices_Init();\n  serialBegin();\n  IMU_Init();\n  MS5611_Init();\n  PID_Init();\n  return;\n}\n\n",
            "called": [
                "Devices_Init",
                "PID_Init",
                "MS5611_Init",
                "IMU_Init",
                "serialBegin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004194",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_system_08004194"
        },
        "FUN_08001240": {
            "renaming": {
                "FUN_08001240": "configure_clock_source_08001240",
                "CLKSource": "clockSource",
                "uVar1": "updatedValue"
            },
            "code": "\nvoid configureClockSource_08001240(uint32_t clockSource)\n\n{\n  uint updatedValue;\n  \n  if (clockSource == 4) {\n    updatedValue = *DAT_08001254 | 4;\n  }\n  else {\n    updatedValue = *DAT_08001254 & 0xfffffffb;\n  }\n  *DAT_08001254 = updatedValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001240",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_clock_source_08001240"
        },
        "FUN_08005840": {
            "renaming": {
                "FUN_08005840": "FUNC_08005840"
            },
            "code": "\nint FUNC_08005840(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = *(int *)(param_2 + -4) + -4;\n  if (*(int *)(param_2 + -4) < 0) {\n    iVar1 = iVar1 + *(int *)(param_2 + iVar1);\n  }\n  return iVar1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08005840",
            "calling": [
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "FUNC_08005840"
        },
        "FUN_08000150": {
            "renaming": {
                "FUN_08000150": "string_length_08000150",
                "__s": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "code": "\nsize_t string_length_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return (size_t)(next_char_ptr + (-1 - (int)input_string));\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000150",
            "calling": [
                "serialPrint"
            ],
            "imported": false,
            "current_name": "string_length_08000150"
        },
        "FUN_08003f3c": {
            "renaming": {
                "FUN_08003f3c": "control_led_colors_08003f3c",
                "led_white": "whiteIntensity",
                "led_red": "redIntensity",
                "led_blue": "blueIntensity",
                "GPIOx": "gpioPort",
                "uVar1": "shiftedIntensity"
            },
            "code": "\nvoid controlLEDColors_08003f3c(int whiteIntensity,int redIntensity,int blueIntensity)\n\n{\n  GPIO_TypeDef *gpioPort;\n  uint shiftedIntensity;\n  \n  gpioPort = DAT_08003f78;\n  shiftedIntensity = count_leading_zeroes(whiteIntensity);\n  HAL_GPIO_WritePin(DAT_08003f78,0x8000,(GPIO_PinState)(shiftedIntensity >> 5));\n  shiftedIntensity = count_leading_zeroes(redIntensity);\n  HAL_GPIO_WritePin(gpioPort,0x4000,(GPIO_PinState)(shiftedIntensity >> 5));\n  shiftedIntensity = count_leading_zeroes(blueIntensity);\n  HAL_GPIO_WritePin(gpioPort,0x2000,(GPIO_PinState)(shiftedIntensity >> 5));\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f3c",
            "calling": [
                "PID_Update",
                "LED_StartupSequence"
            ],
            "imported": false,
            "current_name": "control_led_colors_08003f3c"
        },
        "FUN_08002214": {
            "renaming": {
                "FUN_08002214": "get_system_core_clock_08002214"
            },
            "code": "\nuint32_t getSystemCoreClock_08002214(void)\n\n{\n  return *(uint32_t *)PTR_SystemCoreClock_0800221c;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "get_system_core_clock_08002214"
        },
        "FUN_08003ff4": {
            "renaming": {
                "FUN_08003ff4": "start_pwm_timers_08003ff4",
                "htim": "timer_handler"
            },
            "code": "\nvoid start_PWM_timers_08003ff4(void)\n\n{\n  undefined *timer_handler;\n  \n  timer_handler = PTR_timer_handler4_0800401c;\n  HAL_TIM_PWM_Start((TIM_HandleTypeDef *)PTR_timer_handler2_08004020,4);\n  HAL_TIM_PWM_Start((TIM_HandleTypeDef *)PTR_timer_handler3_08004024,8);\n  HAL_TIM_PWM_Start((TIM_HandleTypeDef *)timer_handler,8);\n  HAL_TIM_PWM_Start((TIM_HandleTypeDef *)timer_handler,0xc);\n  return;\n}\n\n",
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003ff4",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "start_pwm_timers_08003ff4"
        },
        "FUN_08001004": {
            "renaming": {
                "FUN_08001004": "combine_two_params_08001004",
                "param_1": "low_bits",
                "param_2": "high_bits"
            },
            "code": "\nundefined8 combine_two_params_08001004(undefined4 low_bits,undefined4 high_bits)\n\n{\n  __cmpsf2();\n  return CONCAT44(high_bits,low_bits);\n}\n\n",
            "called": [
                "__cmpsf2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001004",
            "calling": [
                "__aeabi_fcmple",
                "__aeabi_cfrcmple",
                "__aeabi_fcmpeq",
                "__aeabi_fcmplt"
            ],
            "imported": false,
            "current_name": "combine_two_params_08001004"
        },
        "FUN_08001128": {
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "HAL_StatusTypeDef": "SystemStatus",
                "HAL_NVIC_SetPriorityGrouping": "SetPriorityGroup",
                "HAL_MspInit": "HardwareInit",
                "HAL_OK": "System_OK"
            },
            "code": "\nSystemStatus InitializeSystem_08001128(void)\n\n{\n  *DAT_08001148 = *DAT_08001148 | 0x10;\n  SetPriorityGroup(3);\n  InitializeSystem_08001128Tick(0);\n  HardwareInit();\n  return System_OK;\n}\n\n",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_InitTick",
                "HAL_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001128",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_system_08001128"
        },
        "FUN_08004514": {
            "renaming": {
                "FUN_08004514": "initialize_system_clock_08004514",
                "HVar1": "halStatus",
                "uVar3": "hclkFreq",
                "line": "errorLine",
                "FLatency": "flashLatency",
                "RCC_ClkInitStruct": "rccClkInit",
                "RCC_OscInitStruct": "rccOscInit",
                "puVar2": "undefinedVar"
            },
            "code": "\nvoid InitializeSystemClock_08004514(void)\n\n{\n  HAL_StatusTypeDef halStatus;\n  uint32_t hclkFreq;\n  int errorLine;\n  uint flashLatency;\n  RCC_ClkInitTypeDef rccClkInit;\n  RCC_OscInitTypeDef rccOscInit;\n  undefined *undefinedVar;\n  \n  rccOscInit.HSIState = 1;\n  rccOscInit.HSICalibrationValue = 0x10;\n  flashLatency = 2;\n  rccOscInit.PLL.PLLSource = 0;\n  rccOscInit.OscillatorType = 2;\n  rccOscInit.PLL.PLLState = 2;\n  rccOscInit.PLL.PLLMUL = 0x380000;\n  halStatus = HAL_RCC_OscConfig(&rccOscInit);\n  undefinedVar = (undefined *)(uint)halStatus;\n  if (undefinedVar == (undefined *)0x0) goto LAB_08004540;\n  errorLine = 0x3c;\n  while( true ) {\n    undefinedVar = PTR_s____Src_peripherals_c_08004588;\n    _Error_Handler(PTR_s____Src_peripherals_c_08004588,errorLine);\nLAB_08004540:\n    rccClkInit.ClockType = 0xf;\n    rccClkInit.APB1CLKDivider = 0x400;\n    rccClkInit.SYSCLKSource = flashLatency;\n    rccClkInit.AHBCLKDivider = (uint32_t)undefinedVar;\n    rccClkInit.APB2CLKDivider = (uint32_t)undefinedVar;\n    halStatus = HAL_RCC_ClockConfig(&rccClkInit,flashLatency);\n    flashLatency = (uint)halStatus;\n    if (flashLatency == 0) break;\n    errorLine = 0x49;\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}\n\n",
            "called": [
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004514",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_system_clock_08004514"
        },
        "FUN_08004a84": {
            "renaming": {
                "FUN_08004a84": "update_flight_control_08004a84",
                "puVar1": "pidPitch",
                "puVar2": "pidRoll",
                "puVar3": "pidYaw",
                "puVar4": "joystick",
                "puVar5": "pidAltitude",
                "in_r0": "inputFloat",
                "iVar7": "comparisonResult",
                "uVar8": "tempFloat",
                "uVar6": "tempUint",
                "extraout_s0": "throttleOutput1",
                "extraout_s0_00": "throttleOutput2",
                "extraout_s1": "pitchOutput1",
                "extraout_s1_00": "pitchOutput2",
                "extraout_s2": "rollOutput1",
                "extraout_s2_00": "rollOutput2",
                "extraout_s3": "yawOutput1",
                "extraout_s3_00": "yawOutput2"
            },
            "code": "\nvoid updateFlightControl_08004a84(void)\n\n{\n  undefined *pidPitch;\n  undefined *pidRoll;\n  undefined *pidYaw;\n  undefined *joystick;\n  undefined *pidAltitude;\n  undefined tempUint;\n  undefined4 inputFloat;\n  int comparisonResult;\n  undefined4 tempFloat;\n  float throttleOutput1;\n  float throttleOutput2;\n  float throttle;\n  float pitchOutput1;\n  float pitchOutput2;\n  float pitch;\n  float rollOutput1;\n  float rollOutput2;\n  float roll;\n  float yawOutput1;\n  float yawOutput2;\n  float yaw;\n  \n  AHRS_GetPitch();\n  pidRoll = PTR_pid_roll_08004bf4;\n  pidPitch = PTR_pid_pitch_08004bf0;\n  *(undefined4 *)(PTR_pid_pitch_08004bf0 + 0x30) = inputFloat;\n  AHRS_GetRoll();\n  *(undefined4 *)(pidRoll + 0x30) = inputFloat;\n  AHRS_GetYaw();\n  pidYaw = PTR_pid_yaw_08004bf8;\n  *(undefined4 *)(PTR_pid_yaw_08004bf8 + 0x30) = inputFloat;\n  updateFlightControl_08004a84Altitude();\n  comparisonResult = __aeabi_fcmpgt(*(undefined4 *)(pidPitch + 0x30),0);\n  if (comparisonResult == 0) {\n    comparisonResult = __aeabi_fcmplt(*(undefined4 *)(pidPitch + 0x30),DAT_08004c00);\n  }\n  else {\n    comparisonResult = __aeabi_fcmpgt(*(undefined4 *)(pidPitch + 0x30),DAT_08004bfc);\n  }\n  if (comparisonResult == 0) {\n    comparisonResult = __aeabi_fcmpgt(*(undefined4 *)(pidRoll + 0x30),0);\n    if (comparisonResult == 0) {\n      comparisonResult = __aeabi_fcmplt(*(undefined4 *)(pidRoll + 0x30),DAT_08004c00);\n    }\n    else {\n      comparisonResult = __aeabi_fcmpgt(*(undefined4 *)(pidRoll + 0x30),DAT_08004bfc);\n    }\n    if (comparisonResult == 0) {\n      toggleLED(1,1,1);\n      PID_Compute((PID_TypeDef *)PTR_pid_pitch_08004bf0);\n      joystick = PTR_joystick_08004c04;\n      PID_Compute((PID_TypeDef *)PTR_pid_roll_08004bf4);\n      PID_Compute((PID_TypeDef *)PTR_pid_yaw_08004bf8);\n      pidAltitude = PTR_pid_altitude_08004c08;\n      throttle = throttleOutput1;\n      pitch = pitchOutput1;\n      roll = rollOutput1;\n      yaw = yawOutput1;\n      if (joystick[1] != '\\0') {\n        PID_Compute((PID_TypeDef *)PTR_pid_altitude_08004c08);\n        tempFloat = __addsf3(*(undefined4 *)(pidAltitude + 0x48),DAT_08004c0c);\n        *(undefined4 *)(pidAltitude + 0x48) = tempFloat;\n        throttle = throttleOutput2;\n        pitch = pitchOutput2;\n        roll = rollOutput2;\n        yaw = yawOutput2;\n      }\n      *(undefined4 *)(pidAltitude + 0x48) = *(undefined4 *)(joystick + 4);\n      if (*joystick == '\\0') {\n        Motor_StopAll();\n      }\n      else {\n        Motor_DistributeSpeed(throttle,pitch,roll,yaw);\n      }\n      __aeabi_fmul(*(undefined4 *)(pidPitch + 4),DAT_08004c10);\n      tempUint = __fixunssfsi();\n      joystick = PTR_msp_txf_pid_08004c14;\n      tempFloat = DAT_08004c10;\n      PTR_msp_txf_pid_08004c14[3] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidPitch + 8),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[4] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidRoll + 4),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      *joystick = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidRoll + 8),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[1] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidRoll + 0xc),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[2] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidYaw + 4),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[6] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidYaw + 8),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[7] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidYaw + 0xc),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[8] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidAltitude + 4),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[9] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidAltitude + 8),tempFloat);\n      tempUint = __fixunssfsi();\n      tempFloat = DAT_08004c10;\n      joystick[10] = tempUint;\n      __aeabi_fmul(*(undefined4 *)(pidAltitude + 0xc),tempFloat);\n      tempUint = __fixunssfsi();\n      joystick[0xb] = tempUint;\n      return;\n    }\n  }\n  Motor_StopAll();\n  toggleLED(0,1,0);\n  return;\n}\n\n",
            "called": [
                "__aeabi_fcmpgt",
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "AHRS_GetRoll",
                "AHRS_GetYaw",
                "PID_Compute",
                "Motor_StopAll",
                "__aeabi_fcmplt",
                "PID_UpdateAltitude",
                "__aeabi_fmul",
                "toggleLED",
                "__addsf3",
                "__fixunssfsi"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a84",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "update_flight_control_08004a84"
        },
        "FUN_080057d0": {
            "renaming": {
                "FUN_080057d0": "reallocate_memory_080057d0",
                "param_1": "allocator_context",
                "param_2": "src_ptr",
                "param_3": "new_size",
                "param_4": "unused_param",
                "pvVar1": "result_ptr",
                "pvVar2": "usable_size"
            },
            "code": "\nvoid * reallocate_memory_080057d0(undefined4 allocator_context,void *src_ptr,void *new_size,undefined4 unused_param)\n\n{\n  void *result_ptr;\n  void *usable_size;\n  \n  if (src_ptr != (void *)0x0) {\n    if (new_size == (void *)0x0) {\n      _free_r();\n      result_ptr = new_size;\n    }\n    else {\n      usable_size = (void *)_malloc_usable_size_r();\n      result_ptr = src_ptr;\n      if ((usable_size < new_size) && (result_ptr = (void *)_malloc_r(allocator_context,new_size), result_ptr != (void *)0x0)\n         ) {\n        memcpy(result_ptr,src_ptr,(size_t)new_size);\n        _free_r(allocator_context,src_ptr);\n      }\n    }\n    return result_ptr;\n  }\n  result_ptr = (void *)_malloc_r(allocator_context,new_size,new_size,unused_param);\n  return result_ptr;\n}\n\n",
            "called": [
                "_free_r",
                "_malloc_usable_size_r",
                "_malloc_r",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057d0",
            "calling": [
                "__ssputs_r"
            ],
            "imported": false,
            "current_name": "reallocate_memory_080057d0"
        },
        "FUN_080072d4": {
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "code": "\nint FUNC_080072d4(EVP_PKEY_CTX *ctx)\n\n{\n  return (int)ctx;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080072d4",
            "calling": [
                "__do_global_dtors_aux",
                "frame_dummy",
                "__libc_init_array"
            ],
            "imported": false,
            "current_name": "FUNC_080072d4"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "do_nothing_0800583c"
            },
            "code": "\nvoid do_nothing_0800583c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583c"
        },
        "FUN_08000adc": {
            "renaming": {
                "FUN_08000adc": "calculate_floating_sum_08000adc",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "unusedParam",
                "param_4": "tempFloat",
                "iVar1": "intVar1",
                "uVar2": "uintVar2",
                "uVar3": "uintVar3",
                "uVar4": "uintVar4",
                "uVar5": "uintVar5",
                "iVar6": "intVar6",
                "bVar7": "boolVar7"
            },
            "code": "\nuint calculateFloatingSum_08000adc(uint float1,uint float2,undefined4 unusedParam,uint tempFloat)\n\n{\n  int intVar1;\n  uint uintVar2;\n  uint uintVar3;\n  uint uintVar4;\n  uint uintVar5;\n  int intVar6;\n  bool boolVar7;\n  \n  uintVar3 = float1 << 1;\n  boolVar7 = uintVar3 == 0;\n  if (!boolVar7) {\n    tempFloat = float2 << 1;\n    boolVar7 = tempFloat == 0;\n  }\n  if (!boolVar7) {\n    boolVar7 = uintVar3 == tempFloat;\n  }\n  intVar6 = (int)uintVar3 >> 0x18;\n  if (!boolVar7) {\n    boolVar7 = intVar6 == -1;\n  }\n  if (!boolVar7) {\n    boolVar7 = (int)tempFloat >> 0x18 == -1;\n  }\n  if (boolVar7) {\n    intVar1 = (int)(float2 << 1) >> 0x18;\n    if (intVar6 == -1 || intVar1 == -1) {\n      uintVar3 = float2;\n      if (intVar6 == -1) {\n        uintVar3 = float1;\n      }\n      if (intVar6 != -1 || intVar1 != -1) {\n        float2 = uintVar3;\n      }\n      boolVar7 = (uintVar3 & 0x7fffff) == 0;\n      if (boolVar7) {\n        boolVar7 = (float2 & 0x7fffff) == 0;\n      }\n      if (boolVar7) {\n        boolVar7 = uintVar3 == float2;\n      }\n      if (!boolVar7) {\n        uintVar3 = uintVar3 | 0x400000;\n      }\n      return uintVar3;\n    }\n    if (((float1 ^ float2) & 0x7fffffff) != 0) {\n      if (uintVar3 == 0) {\n        float1 = float2;\n      }\n      return float1;\n    }\n    if (float1 != float2) {\n      return 0;\n    }\n    if ((uintVar3 & 0xff000000) == 0) {\n      uintVar3 = float1 << 1;\n      if ((float1 & 0x80000000) != 0) {\n        uintVar3 = uintVar3 | 0x80000000;\n      }\n      return uintVar3;\n    }\n    if (uintVar3 < 0xfe000000) {\n      return float1 + 0x800000;\n    }\n    float1 = float1 & 0x80000000;\nLAB_08000c12:\n    return float1 | 0x7f800000;\n  }\n  uintVar3 = uintVar3 >> 0x18;\n  tempFloat = tempFloat >> 0x18;\n  uintVar5 = tempFloat - uintVar3;\n  boolVar7 = uintVar5 != 0;\n  uintVar4 = uintVar3;\n  if (boolVar7 && uintVar3 <= tempFloat) {\n    uintVar4 = uintVar3 + uintVar5;\n  }\n  if (boolVar7 && uintVar3 <= tempFloat) {\n    float2 = float2 ^ float1;\n  }\n  if (boolVar7 && uintVar3 <= tempFloat) {\n    float1 = float1 ^ float2;\n  }\n  if (boolVar7 && uintVar3 <= tempFloat) {\n    float2 = float2 ^ float1;\n  }\n  if (tempFloat < uintVar3) {\n    uintVar5 = -uintVar5;\n  }\n  if (0x19 < uintVar5) {\n    return float1;\n  }\n  uintVar3 = float1 & 0xffffff | 0x800000;\n  if ((float1 & 0x80000000) != 0) {\n    uintVar3 = -uintVar3;\n  }\n  uintVar2 = float2 & 0xffffff | 0x800000;\n  if ((float2 & 0x80000000) != 0) {\n    uintVar2 = -uintVar2;\n  }\n  if (uintVar4 == uintVar5) {\n    uintVar2 = uintVar2 ^ 0x800000;\n    if (uintVar4 == 0) {\n      uintVar3 = uintVar3 ^ 0x800000;\n      uintVar4 = 1;\n    }\n    else {\n      uintVar5 = uintVar5 - 1;\n    }\n  }\n  uintVar3 = uintVar3 + ((int)uintVar2 >> (uintVar5 & 0xff));\n  uintVar2 = uintVar2 << (0x20 - uintVar5 & 0xff);\n  float1 = uintVar3 & 0x80000000;\n  if ((int)uintVar3 < 0) {\n    boolVar7 = uintVar2 != 0;\n    uintVar2 = -uintVar2;\n    uintVar3 = -uintVar3 - (uint)boolVar7;\n  }\n  if (uintVar3 < 0x800000) {\n    uintVar5 = uintVar2 & 0x80000000;\n    uintVar2 = uintVar2 << 1;\n    uintVar3 = uintVar3 * 2 + (uint)(uintVar5 != 0);\n    uintVar5 = uintVar4 - 2;\n    if ((uintVar3 & 0x800000) == 0) {\n      intVar6 = count_leading_zeroes(uintVar3);\n      uintVar4 = intVar6 - 8;\n      uintVar3 = uintVar3 << (uintVar4 & 0xff);\n      if ((int)uintVar5 < (int)uintVar4) {\n        uintVar3 = uintVar3 >> (-(uintVar5 - uintVar4) & 0xff);\n      }\n      else {\n        uintVar3 = uintVar3 + (uintVar5 - uintVar4) * 0x800000;\n      }\n      return uintVar3 | float1;\n    }\n  }\n  else {\n    uintVar5 = uintVar4 - 1;\n    if (0xffffff < uintVar3) {\n      uintVar5 = uintVar3 & 1;\n      uintVar3 = uintVar3 >> 1;\n      uintVar2 = (uint)(uintVar5 != 0) << 0x1f | uintVar2 >> 1;\n      uintVar5 = uintVar4;\n      if (0xfd < uintVar4) goto LAB_08000c12;\n    }\n  }\n  uintVar3 = uintVar3 + uintVar5 * 0x800000 + (uint)(0x7fffffff < uintVar2);\n  if (uintVar2 == 0x80000000) {\n    uintVar3 = uintVar3 & 0xfffffffe;\n  }\n  return uintVar3 | float1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000adc",
            "calling": [
                "__aeabi_frsub",
                "MS5611_Update",
                "MadgwickQuaternionUpdate",
                "Motor_DistributeSpeed",
                "PID_Update",
                "AHRS_GetYaw",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "calculate_floating_sum_08000adc"
        },
        "FUN_0800583e": {
            "renaming": {
                "FUN_0800583e": "do_nothing_0800583e"
            },
            "code": "\nvoid do_nothing_0800583e(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583e",
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "imported": false,
            "current_name": "do_nothing_0800583e"
        },
        "FUN_08000160": {
            "renaming": {
                "FUN_08000160": "calculate_result_08000160",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "temp_var1",
                "bVar2": "temp_byte",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "uVar7": "temp_var6",
                "uVar8": "temp_var7",
                "uVar9": "temp_var8",
                "uVar10": "temp_var9",
                "uVar11": "temp_var10",
                "uVar12": "temp_var11",
                "bVar13": "bool_var1",
                "bVar14": "bool_var2",
                "bVar15": "bool_var3"
            },
            "code": "\nulonglong calculate_result_08000160(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  int temp_var1;\n  byte temp_byte;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint temp_var9;\n  uint temp_var10;\n  uint temp_var11;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  \n  temp_var3 = input_b ^ 0x80000000;\n  temp_var6 = input_b << 1;\n  temp_var8 = input_d << 1;\n  bool_var1 = ((temp_var3 ^ input_d) & 0x7fffffff) == 0;\n  bool_var2 = bool_var1 && input_a == input_c;\n  if (!bool_var1 || input_a != input_c) {\n    bool_var2 = (temp_var6 | input_a) == 0;\n  }\n  if (!bool_var2) {\n    bool_var2 = (temp_var8 | input_c) == 0;\n  }\n  temp_var5 = (int)temp_var6 >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = temp_var5 == -1;\n  }\n  temp_var1 = (int)temp_var8 >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = temp_var1 == -1;\n  }\n  if (bool_var2) {\n    if (temp_var5 == -1 || temp_var1 == -1) {\n      temp_var8 = input_d;\n      temp_var6 = input_c;\n      if (temp_var5 == -1) {\n        temp_var8 = temp_var3;\n        temp_var6 = input_a;\n      }\n      if (temp_var5 != -1 || temp_var1 != -1) {\n        input_c = temp_var6;\n        input_d = temp_var8;\n      }\n      bool_var2 = (temp_var6 | temp_var8 << 0xc) == 0;\n      if (bool_var2) {\n        bool_var2 = (input_c | input_d << 0xc) == 0;\n      }\n      if (bool_var2) {\n        bool_var2 = temp_var8 == input_d;\n      }\n      if (!bool_var2) {\n        temp_var8 = temp_var8 | 0x80000;\n      }\n      return CONCAT44(temp_var8,temp_var6);\n    }\n    if (((temp_var3 ^ input_d) & 0x7fffffff) != 0 || input_a != input_c) {\n      if ((temp_var6 | input_a) == 0) {\n        input_a = input_c;\n        temp_var3 = input_d;\n      }\n      return CONCAT44(temp_var3,input_a);\n    }\n    if (temp_var3 != input_d) {\n      return 0;\n    }\n    if (temp_var6 >> 0x15 == 0) {\n      bool_var2 = (input_a & 0x80000000) != 0;\n      temp_var8 = input_b * 2 + (uint)bool_var2;\n      if (CARRY4(temp_var3,temp_var3) || CARRY4(input_b * 2,(uint)bool_var2)) {\n        temp_var8 = temp_var8 | 0x80000000;\n      }\n      return CONCAT44(temp_var8,input_a << 1);\n    }\n    if (temp_var6 < 0xffc00000) {\n      return CONCAT44(temp_var3 + 0x100000,input_a);\n    }\n    temp_var3 = temp_var3 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(temp_var3 | 0x7ff00000) << 0x20;\n  }\n  temp_var6 = temp_var6 >> 0x15;\n  temp_var8 = temp_var8 >> 0x15;\n  temp_var9 = temp_var8 - temp_var6;\n  bool_var2 = temp_var9 != 0;\n  if (temp_var8 < temp_var6) {\n    temp_var9 = -temp_var9;\n  }\n  temp_var7 = input_a;\n  temp_var11 = temp_var3;\n  if (bool_var2 && temp_var6 <= temp_var8) {\n    temp_var6 = temp_var6 + temp_var9;\n    temp_var7 = input_c;\n    temp_var11 = input_d;\n    input_c = input_a;\n    input_d = temp_var3;\n  }\n  if (0x36 < temp_var9) {\n    return CONCAT44(temp_var11,temp_var7);\n  }\n  temp_var8 = temp_var11 & 0xfffff | 0x100000;\n  if ((temp_var11 & 0x80000000) != 0) {\n    bool_var2 = temp_var7 != 0;\n    temp_var7 = -temp_var7;\n    temp_var8 = -temp_var8 - (uint)bool_var2;\n  }\n  temp_var3 = input_d & 0xfffff | 0x100000;\n  if ((input_d & 0x80000000) != 0) {\n    bool_var2 = input_c != 0;\n    input_c = -input_c;\n    temp_var3 = -temp_var3 - (uint)bool_var2;\n  }\n  if (temp_var6 == temp_var9) {\n    temp_var3 = temp_var3 ^ 0x100000;\n    if (temp_var6 == 0) {\n      temp_var8 = temp_var8 ^ 0x100000;\n      temp_var6 = 1;\n    }\n    else {\n      temp_var9 = temp_var9 - 1;\n    }\n  }\n  temp_var11 = -temp_var9 + 0x20;\n  if ((int)temp_var9 < 0x21) {\n    temp_var10 = input_c << (temp_var11 & 0xff);\n    input_c = input_c >> (temp_var9 & 0xff);\n    temp_var2 = temp_var7 + input_c;\n    temp_var4 = temp_var3 << (temp_var11 & 0xff);\n    temp_var11 = temp_var2 + temp_var4;\n    temp_var8 = temp_var8 + CARRY4(temp_var7,input_c) + ((int)temp_var3 >> (temp_var9 & 0xff)) +\n            (uint)CARRY4(temp_var2,temp_var4);\n  }\n  else {\n    temp_var10 = temp_var3 << (-temp_var9 + 0x40 & 0xff);\n    if (input_c != 0) {\n      temp_var10 = temp_var10 | 2;\n    }\n    temp_var3 = (int)temp_var3 >> (temp_var9 - 0x20 & 0xff);\n    temp_var11 = temp_var7 + temp_var3;\n    temp_var8 = temp_var8 + ((int)temp_var3 >> 0x1f) + (uint)CARRY4(temp_var7,temp_var3);\n  }\n  temp_var3 = temp_var8 & 0x80000000;\n  temp_var9 = temp_var8;\n  if ((int)temp_var8 < 0) {\n    bool_var2 = temp_var10 == 0;\n    temp_var10 = -temp_var10;\n    temp_var9 = -temp_var11;\n    temp_var11 = -(uint)!bool_var2 - temp_var11;\n    temp_var9 = -(uint)(bool_var2 <= temp_var9) - temp_var8;\n  }\n  if (0xfffff < temp_var9) {\n    temp_var7 = temp_var6 - 1;\n    if (0x1fffff < temp_var9) {\n      temp_var8 = temp_var9 & 1;\n      temp_var9 = temp_var9 >> 1;\n      temp_byte = (byte)temp_var11;\n      temp_var11 = (uint)(temp_var8 != 0) << 0x1f | temp_var11 >> 1;\n      temp_var10 = (uint)(temp_byte & 1) << 0x1f | temp_var10 >> 1;\n      temp_var7 = temp_var6;\n      if (0xffbfffff < temp_var6 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    bool_var2 = 0x7fffffff < temp_var10;\n    if (temp_var10 == 0x80000000) {\n      bool_var2 = (temp_var11 & 1) != 0;\n    }\n    return CONCAT44(temp_var9 + temp_var7 * 0x100000 + (uint)CARRY4(temp_var11,(uint)bool_var2) | temp_var3,\n                    temp_var11 + bool_var2);\n  }\n  bool_var1 = (temp_var10 & 0x80000000) != 0;\n  temp_var10 = temp_var10 << 1;\n  temp_var7 = temp_var11 * 2;\n  bool_var2 = CARRY4(temp_var11,temp_var11);\n  temp_var11 = temp_var11 * 2 + (uint)bool_var1;\n  temp_var9 = temp_var9 * 2 + (uint)(bool_var2 || CARRY4(temp_var7,(uint)bool_var1));\n  temp_var7 = temp_var6 - 2;\n  if ((temp_var9 & 0x100000) != 0) goto LAB_08000278;\n  temp_var2 = temp_var11;\n  temp_var6 = temp_var9;\n  if (temp_var9 == 0) {\n    temp_var2 = 0;\n    temp_var6 = temp_var11;\n  }\n  temp_var5 = count_leading_zeroes(temp_var6);\n  if (temp_var9 == 0) {\n    temp_var5 = temp_var5 + 0x20;\n  }\n  temp_var11 = temp_var5 - 0xb;\n  bool_var3 = SBORROW4(temp_var11,0x20);\n  temp_var9 = temp_var5 - 0x2b;\n  bool_var2 = (int)temp_var9 < 0;\n  bool_var1 = temp_var9 == 0;\n  if ((int)temp_var11 < 0x20) {\n    bool_var3 = SCARRY4(temp_var9,0xc);\n    temp_var5 = temp_var5 + -0x1f;\n    bool_var2 = temp_var5 < 0;\n    bool_var1 = temp_var5 == 0;\n    temp_var9 = temp_var11;\n    if (!bool_var1 && bool_var2 == bool_var3) {\n      temp_var2 = temp_var6 << (temp_var11 & 0xff);\n      temp_var6 = temp_var6 >> (0xcU - temp_var5 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    temp_var10 = 0x20 - temp_var9;\n  }\n  temp_var6 = temp_var6 << (temp_var9 & 0xff);\n  if (bool_var1 || bool_var2 != bool_var3) {\n    temp_var6 = temp_var6 | temp_var2 >> (temp_var10 & 0xff);\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    temp_var2 = temp_var2 << (temp_var9 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_var11 <= (int)temp_var7) {\n    return CONCAT44(temp_var6 + (temp_var7 - temp_var11) * 0x100000 | temp_var3,temp_var2);\n  }\n  temp_var9 = ~(temp_var7 - temp_var11);\n  if ((int)temp_var9 < 0x1f) {\n    temp_var5 = temp_var9 - 0x13;\n    if (temp_var5 != 0 && temp_var5 < 0 == SCARRY4(temp_var9 - 0x1f,0xc)) {\n      return CONCAT44(temp_var8,temp_var2 >> (0x20 - (0xcU - temp_var5) & 0xff) | temp_var6 << (0xcU - temp_var5 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_var9 = temp_var9 + 1;\n    return CONCAT44(temp_var3 | temp_var6 >> (temp_var9 & 0xff),\n                    temp_var2 >> (temp_var9 & 0xff) | temp_var6 << (0x20 - temp_var9 & 0xff));\n  }\n  return CONCAT44(temp_var8,temp_var6 >> (temp_var9 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [
                "__aeabi_dadd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000160",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000160"
        },
        "FUN_08002220": {
            "renaming": {
                "FUN_08002220": "calculate_clock_frequency_08002220",
                "uVar1": "leading_zeroes_count"
            },
            "code": "\nuint32_t calculate_clock_frequency_08002220(void)\n\n{\n  uint leading_zeroes_count;\n  \n  leading_zeroes_count = count_leading_zeroes(0xe00000);\n  return *(uint *)PTR_SystemCoreClock_0800224c >>\n         PTR_APBPrescTable_08002248[(*(uint *)(DAT_08002244 + 4) & 0x700) >> (leading_zeroes_count & 0xff)];\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002220",
            "calling": [
                "UART_SetConfig",
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "calculate_clock_frequency_08002220"
        },
        "FUN_08003314": {
            "renaming": {
                "FUN_08003314": "set_beta_value_08003314",
                "_beta": "beta",
                "in_r0": "inputValue"
            },
            "code": "\nvoid setBetaValue_08003314(float beta)\n\n{\n  undefined4 inputValue;\n  \n  *(undefined4 *)PTRbeta_0800331c = inputValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003314",
            "calling": [
                "IMU_Init"
            ],
            "imported": false,
            "current_name": "set_beta_value_08003314"
        },
        "FUN_08005854": {
            "renaming": {
                "FUN_08005854": "calculate_result_08005854",
                "__x": "inputValue",
                "puVar1": "libVersionPtr",
                "iVar2": "comparisonResult",
                "puVar3": "errnoPtr",
                "dVar4": "result",
                "extraout_d0": "intermediateResult1",
                "extraout_d0_00": "intermediateResult2",
                "extraout_d0_01": "intermediateResult3",
                "extraout_d0_02": "intermediateResult4",
                "in_stack_ffffffb8": "stackVar1",
                "in_stack_ffffffbc": "stackVar2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080058d4) */\n\ndouble calculateResult_08005854(double inputValue)\n\n{\n  undefined *libVersionPtr;\n  int comparisonResult;\n  undefined4 *errnoPtr;\n  double result;\n  double intermediateResult1;\n  double intermediateResult2;\n  double intermediateResult3;\n  double intermediateResult4;\n  int stackVar1;\n  char *stackVar2;\n  \n  result = (double)__ieee754_calculateResult_08005854();\n  libVersionPtr = PTR___fdlib_version_080058f8;\n  if ((*PTR___fdlib_version_080058f8 != -1) &&\n     (comparisonResult = __unorddf2(), result = intermediateResult1, comparisonResult == 0)) {\n    fabs((double)CONCAT44(stackVar2,stackVar1));\n    comparisonResult = __aeabi_dcmpgt();\n    result = intermediateResult2;\n    if ((comparisonResult != 0) &&\n       ((nan(PTR_DAT_080058f4), *libVersionPtr == '\\x02' ||\n        (comparisonResult = matherr((exception *)&stack0xffffffb8), result = intermediateResult4, comparisonResult == 0)))) {\n      errnoPtr = (undefined4 *)__errno();\n      *errnoPtr = 0x21;\n      result = intermediateResult3;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "__unorddf2",
                "__aeabi_dcmpgt",
                "fabs",
                "matherr",
                "__errno",
                "nan",
                "__ieee754_asin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005854",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_08005854"
        },
        "FUN_08000168": {
            "renaming": {
                "FUN_08000168": "multiply_floats_08000168",
                "param_1": "float1_low",
                "param_2": "float1_high",
                "param_3": "float2_low",
                "param_4": "float2_high",
                "iVar1": "tempVar1",
                "bVar2": "carryByte",
                "uVar3": "tempVar3",
                "uVar4": "resultLow",
                "uVar5": "tempVar5",
                "uVar6": "float2_high_xor",
                "uVar7": "float2_high_shifted",
                "uVar9": "float1_high_shifted",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "bVar13": "boolVar13",
                "bVar14": "boolVar14",
                "bVar15": "boolVar15"
            },
            "code": "\nulonglong multiply_floats_08000168(uint float1_low,uint float1_high,uint float2_low,uint float2_high)\n\n{\n  int tempVar1;\n  byte carryByte;\n  uint tempVar3;\n  uint resultLow;\n  uint tempVar5;\n  uint float2_high_xor;\n  uint float2_high_shifted;\n  int iVar8;\n  uint float1_high_shifted;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  bool boolVar13;\n  bool boolVar14;\n  bool boolVar15;\n  \n  float2_high_xor = float2_high ^ 0x80000000;\n  float1_high_shifted = float1_high << 1;\n  float2_high = float2_high << 1;\n  boolVar13 = ((float1_high ^ float2_high_xor) & 0x7fffffff) == 0;\n  boolVar14 = boolVar13 && float1_low == float2_low;\n  if (!boolVar13 || float1_low != float2_low) {\n    boolVar14 = (float1_high_shifted | float1_low) == 0;\n  }\n  if (!boolVar14) {\n    boolVar14 = (float2_high | float2_low) == 0;\n  }\n  iVar8 = (int)float1_high_shifted >> 0x15;\n  if (!boolVar14) {\n    boolVar14 = iVar8 == -1;\n  }\n  tempVar1 = (int)float2_high >> 0x15;\n  if (!boolVar14) {\n    boolVar14 = tempVar1 == -1;\n  }\n  if (boolVar14) {\n    if (iVar8 == -1 || tempVar1 == -1) {\n      float1_high_shifted = float2_high_xor;\n      tempVar11 = float2_low;\n      if (iVar8 == -1) {\n        float1_high_shifted = float1_high;\n        tempVar11 = float1_low;\n      }\n      if (iVar8 != -1 || tempVar1 != -1) {\n        float2_low = tempVar11;\n        float2_high_xor = float1_high_shifted;\n      }\n      boolVar14 = (tempVar11 | float1_high_shifted << 0xc) == 0;\n      if (boolVar14) {\n        boolVar14 = (float2_low | float2_high_xor << 0xc) == 0;\n      }\n      if (boolVar14) {\n        boolVar14 = float1_high_shifted == float2_high_xor;\n      }\n      if (!boolVar14) {\n        float1_high_shifted = float1_high_shifted | 0x80000;\n      }\n      return CONCAT44(float1_high_shifted,tempVar11);\n    }\n    if (((float1_high ^ float2_high_xor) & 0x7fffffff) != 0 || float1_low != float2_low) {\n      if ((float1_high_shifted | float1_low) == 0) {\n        float1_low = float2_low;\n        float1_high = float2_high_xor;\n      }\n      return CONCAT44(float1_high,float1_low);\n    }\n    if (float1_high != float2_high_xor) {\n      return 0;\n    }\n    if (float1_high_shifted >> 0x15 == 0) {\n      boolVar14 = (float1_low & 0x80000000) != 0;\n      float2_high_xor = float1_high * 2 + (uint)boolVar14;\n      if (CARRY4(float1_high,float1_high) || CARRY4(float1_high * 2,(uint)boolVar14)) {\n        float2_high_xor = float2_high_xor | 0x80000000;\n      }\n      return CONCAT44(float2_high_xor,float1_low << 1);\n    }\n    if (float1_high_shifted < 0xffc00000) {\n      return CONCAT44(float1_high + 0x100000,float1_low);\n    }\n    float1_high = float1_high & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(float1_high | 0x7ff00000) << 0x20;\n  }\n  float1_high_shifted = float1_high_shifted >> 0x15;\n  float2_high = float2_high >> 0x15;\n  tempVar11 = float2_high - float1_high_shifted;\n  boolVar14 = tempVar11 != 0;\n  if (float2_high < float1_high_shifted) {\n    tempVar11 = -tempVar11;\n  }\n  tempVar10 = float1_low;\n  float2_high_shifted = float1_high;\n  if (boolVar14 && float1_high_shifted <= float2_high) {\n    float1_high_shifted = float1_high_shifted + tempVar11;\n    tempVar10 = float2_low;\n    float2_high_shifted = float2_high_xor;\n    float2_low = float1_low;\n    float2_high_xor = float1_high;\n  }\n  if (0x36 < tempVar11) {\n    return CONCAT44(float2_high_shifted,tempVar10);\n  }\n  resultLow = float2_high_shifted & 0xfffff | 0x100000;\n  if ((float2_high_shifted & 0x80000000) != 0) {\n    boolVar14 = tempVar10 != 0;\n    tempVar10 = -tempVar10;\n    resultLow = -resultLow - (uint)boolVar14;\n  }\n  float2_high_shifted = float2_high_xor & 0xfffff | 0x100000;\n  if ((float2_high_xor & 0x80000000) != 0) {\n    boolVar14 = float2_low != 0;\n    float2_low = -float2_low;\n    float2_high_shifted = -float2_high_shifted - (uint)boolVar14;\n  }\n  if (float1_high_shifted == tempVar11) {\n    float2_high_shifted = float2_high_shifted ^ 0x100000;\n    if (float1_high_shifted == 0) {\n      resultLow = resultLow ^ 0x100000;\n      float1_high_shifted = 1;\n    }\n    else {\n      tempVar11 = tempVar11 - 1;\n    }\n  }\n  float2_high_xor = -tempVar11 + 0x20;\n  if ((int)tempVar11 < 0x21) {\n    tempVar12 = float2_low << (float2_high_xor & 0xff);\n    float2_low = float2_low >> (tempVar11 & 0xff);\n    tempVar3 = tempVar10 + float2_low;\n    tempVar5 = float2_high_shifted << (float2_high_xor & 0xff);\n    float2_high_xor = tempVar3 + tempVar5;\n    resultLow = resultLow + CARRY4(tempVar10,float2_low) + ((int)float2_high_shifted >> (tempVar11 & 0xff)) +\n            (uint)CARRY4(tempVar3,tempVar5);\n  }\n  else {\n    tempVar12 = float2_high_shifted << (-tempVar11 + 0x40 & 0xff);\n    if (float2_low != 0) {\n      tempVar12 = tempVar12 | 2;\n    }\n    float2_high_shifted = (int)float2_high_shifted >> (tempVar11 - 0x20 & 0xff);\n    float2_high_xor = tempVar10 + float2_high_shifted;\n    resultLow = resultLow + ((int)float2_high_shifted >> 0x1f) + (uint)CARRY4(tempVar10,float2_high_shifted);\n  }\n  float1_high = resultLow & 0x80000000;\n  tempVar11 = resultLow;\n  if ((int)resultLow < 0) {\n    boolVar14 = tempVar12 == 0;\n    tempVar12 = -tempVar12;\n    tempVar11 = -float2_high_xor;\n    float2_high_xor = -(uint)!boolVar14 - float2_high_xor;\n    tempVar11 = -(uint)(boolVar14 <= tempVar11) - resultLow;\n  }\n  if (0xfffff < tempVar11) {\n    tempVar10 = float1_high_shifted - 1;\n    if (0x1fffff < tempVar11) {\n      tempVar10 = tempVar11 & 1;\n      tempVar11 = tempVar11 >> 1;\n      carryByte = (byte)float2_high_xor;\n      float2_high_xor = (uint)(tempVar10 != 0) << 0x1f | float2_high_xor >> 1;\n      tempVar12 = (uint)(carryByte & 1) << 0x1f | tempVar12 >> 1;\n      tempVar10 = float1_high_shifted;\n      if (0xffbfffff < float1_high_shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    boolVar14 = 0x7fffffff < tempVar12;\n    if (tempVar12 == 0x80000000) {\n      boolVar14 = (float2_high_xor & 1) != 0;\n    }\n    return CONCAT44(tempVar11 + tempVar10 * 0x100000 + (uint)CARRY4(float2_high_xor,(uint)boolVar14) | float1_high,\n                    float2_high_xor + boolVar14);\n  }\n  boolVar13 = (tempVar12 & 0x80000000) != 0;\n  tempVar12 = tempVar12 << 1;\n  tempVar10 = float2_high_xor * 2;\n  boolVar14 = CARRY4(float2_high_xor,float2_high_xor);\n  float2_high_xor = float2_high_xor * 2 + (uint)boolVar13;\n  tempVar11 = tempVar11 * 2 + (uint)(boolVar14 || CARRY4(tempVar10,(uint)boolVar13));\n  tempVar10 = float1_high_shifted - 2;\n  if ((tempVar11 & 0x100000) != 0) goto LAB_08000278;\n  float2_high_shifted = float2_high_xor;\n  float1_high_shifted = tempVar11;\n  if (tempVar11 == 0) {\n    float2_high_shifted = 0;\n    float1_high_shifted = float2_high_xor;\n  }\n  iVar8 = count_leading_zeroes(float1_high_shifted);\n  if (tempVar11 == 0) {\n    iVar8 = iVar8 + 0x20;\n  }\n  tempVar11 = iVar8 - 0xb;\n  boolVar15 = SBORROW4(tempVar11,0x20);\n  float2_high_xor = iVar8 - 0x2b;\n  boolVar14 = (int)float2_high_xor < 0;\n  boolVar13 = float2_high_xor == 0;\n  if ((int)tempVar11 < 0x20) {\n    boolVar15 = SCARRY4(float2_high_xor,0xc);\n    iVar8 = iVar8 + -0x1f;\n    boolVar14 = iVar8 < 0;\n    boolVar13 = iVar8 == 0;\n    float2_high_xor = tempVar11;\n    if (!boolVar13 && boolVar14 == boolVar15) {\n      float2_high_shifted = float1_high_shifted << (tempVar11 & 0xff);\n      float1_high_shifted = float1_high_shifted >> (0xcU - iVar8 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (boolVar13 || boolVar14 != boolVar15) {\n    tempVar12 = 0x20 - float2_high_xor;\n  }\n  float1_high_shifted = float1_high_shifted << (float2_high_xor & 0xff);\n  if (boolVar13 || boolVar14 != boolVar15) {\n    float1_high_shifted = float1_high_shifted | float2_high_shifted >> (tempVar12 & 0xff);\n  }\n  if (boolVar13 || boolVar14 != boolVar15) {\n    float2_high_shifted = float2_high_shifted << (float2_high_xor & 0xff);\n  }\nLAB_080002f0:\n  if ((int)tempVar11 <= (int)tempVar10) {\n    return CONCAT44(float1_high_shifted + (tempVar10 - tempVar11) * 0x100000 | float1_high,float2_high_shifted);\n  }\n  float2_high_xor = ~(tempVar10 - tempVar11);\n  if ((int)float2_high_xor < 0x1f) {\n    iVar8 = float2_high_xor - 0x13;\n    if (iVar8 != 0 && iVar8 < 0 == SCARRY4(float2_high_xor - 0x1f,0xc)) {\n      return CONCAT44(resultLow,float2_high_shifted >> (0x20 - (0xcU - iVar8) & 0xff) | float1_high_shifted << (0xcU - iVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    float2_high_xor = float2_high_xor + 1;\n    return CONCAT44(float1_high | float1_high_shifted >> (float2_high_xor & 0xff),\n                    float2_high_shifted >> (float2_high_xor & 0xff) | float1_high_shifted << (0x20 - float2_high_xor & 0xff));\n  }\n  return CONCAT44(resultLow,float1_high_shifted >> (float2_high_xor - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000168",
            "calling": [
                "MS5611_Update",
                "__ieee754_atan2",
                "__ieee754_sqrt",
                "atan",
                "rint",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "multiply_floats_08000168"
        },
        "FUN_080072e0": {
            "renaming": {
                "FUN_080072e0": "do_nothing_080072e0"
            },
            "code": "\nvoid do_nothing_080072e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080072e0",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_080072e0"
        },
        "FUN_08001014": {
            "renaming": {
                "FUN_08001014": "compare_floats_equal_08001014",
                "in_ZR": "comparison_result"
            },
            "code": "\nbool compare_floats_equal_08001014(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cfcmpeq();\n  return comparison_result != '\\0';\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001014",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "compare_floats_equal_08001014"
        },
        "FUN_080071c0": {
            "renaming": {
                "FUN_080071c0": "calculate_result_080071c0",
                "__x": "x",
                "__n": "n",
                "in_r1": "input_r1",
                "extraout_r1": "extra_output_r1",
                "in_r2": "input_r2",
                "uVar1": "unsigned_var1",
                "iVar2": "int_var2",
                "in_r3": "input_r3",
                "unaff_r4": "unaffected_r4",
                "unaff_r5": "unaffected_r5",
                "unaff_r6": "unaffected_r6",
                "in_d0": "input_d0",
                "dVar3": "double_var3"
            },
            "code": "\ndouble calculate_result_080071c0(double x,int n)\n\n{\n  uint input_r1;\n  int extra_output_r1;\n  int input_r2;\n  uint unsigned_var1;\n  int int_var2;\n  undefined4 input_r3;\n  undefined4 unaffected_r4;\n  undefined4 unaffected_r5;\n  undefined4 unaffected_r6;\n  double input_d0;\n  double double_var3;\n  \n  unsigned_var1 = (input_r1 << 1) >> 0x15;\n  if (unsigned_var1 == 0) {\n    if ((input_r1 & 0x7fffffff | n) == 0) {\n      return input_d0;\n    }\n    input_d0 = (double)__muldf3(n,input_r1,0,DAT_08007290);\n    if (input_r2 < DAT_08007294) goto LAB_0800722e;\n    unsigned_var1 = ((uint)(extra_output_r1 << 1) >> 0x15) - 0x36;\n  }\n  else if (unsigned_var1 == 0x7ff) {\n    double_var3 = (double)__aeabi_dadd(n,input_r1,n);\n    return double_var3;\n  }\n  int_var2 = unsigned_var1 + input_r2;\n  if (int_var2 < 0x7ff) {\n    if (0 < int_var2) {\n      return input_d0;\n    }\n    if (int_var2 + 0x35 < 0 == SCARRY4(int_var2,0x35)) goto LAB_0800722e;\n    if (input_r2 < 0xc351) {\n      copysign((double)CONCAT44(unaffected_r4,input_r3),(double)CONCAT44(unaffected_r6,unaffected_r5));\n      goto LAB_0800722e;\n    }\n  }\n  copysign((double)CONCAT44(unaffected_r4,input_r3),(double)CONCAT44(unaffected_r6,unaffected_r5));\nLAB_0800722e:\n  double_var3 = (double)__muldf3();\n  return double_var3;\n}\n\n",
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "copysign"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080071c0",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_result_080071c0"
        },
        "FUN_08001258": {
            "renaming": {
                "FUN_08001258": "do_nothing_08001258"
            },
            "code": "\nvoid do_nothing_08001258(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001258",
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08001258"
        },
        "FUN_08005614": {
            "renaming": {
                "FUN_08005614": "find_char_in_buffer_08005614",
                "__s": "buffer",
                "__c": "search_char",
                "__n": "buffer_size",
                "pbVar1": "current_byte_ptr",
                "pbVar2": "previous_byte_ptr"
            },
            "code": "\nvoid * find_char_in_buffer_08005614(void *buffer,int search_char,size_t buffer_size)\n\n{\n  byte *current_byte_ptr;\n  byte *previous_byte_ptr;\n  \n  current_byte_ptr = (byte *)buffer;\n  do {\n    previous_byte_ptr = current_byte_ptr;\n    if (previous_byte_ptr == (byte *)(buffer_size + (int)buffer)) {\n      return (void *)0x0;\n    }\n    current_byte_ptr = previous_byte_ptr + 1;\n  } while ((uint)*previous_byte_ptr != (search_char & 0xffU));\n  return previous_byte_ptr;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005614",
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "imported": false,
            "current_name": "find_char_in_buffer_08005614"
        },
        "FUN_08000724": {
            "renaming": {
                "FUN_08000724": "floating_point_multiplication_08000724",
                "param_1": "operand1_low",
                "param_2": "operand1_high",
                "param_3": "operand2_low",
                "param_4": "operand2_high",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "result_high",
                "uVar9": "result_exponent",
                "uVar10": "operand2_exponent",
                "uVar11": "result_low",
                "uVar12": "temp_diff_low",
                "uVar13": "temp_diff_high",
                "uVar17": "intermediate_result",
                "iVar8": "exponent_diff",
                "unaff_r5": "operand2_exponent_raw",
                "bVar14": "cond1",
                "bVar15": "cond2",
                "bVar16": "cond3"
            },
            "code": "\nulonglong floating_point_multiplication_08000724(undefined4 operand1_low,uint operand1_high,uint operand2_low,uint operand2_high)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint result_high;\n  int exponent_diff;\n  uint result_exponent;\n  uint operand2_exponent_raw;\n  uint operand2_exponent;\n  uint result_low;\n  uint temp_diff_low;\n  uint temp_diff_high;\n  bool cond1;\n  bool cond2;\n  bool cond3;\n  ulonglong intermediate_result;\n  \n  intermediate_result = CONCAT44(operand1_high,operand1_low);\n  temp_diff_high = 0x7ff;\n  result_high = operand1_high >> 0x14 & 0x7ff;\n  cond1 = result_high == 0;\n  if (!cond1) {\n    operand2_exponent_raw = operand2_high >> 0x14 & 0x7ff;\n    cond1 = operand2_exponent_raw == 0;\n  }\n  if (!cond1) {\n    cond1 = result_high == 0x7ff;\n  }\n  if (!cond1) {\n    cond1 = operand2_exponent_raw == 0x7ff;\n  }\n  if (cond1) {\n    intermediate_result = calculate_result_08000892();\n  }\n  result_exponent = (uint)(intermediate_result >> 0x20);\n  result_low = (uint)intermediate_result;\n  exponent_diff = result_high - operand2_exponent_raw;\n  if ((operand2_low | operand2_high << 0xc) == 0) {\n    result_high = (result_exponent ^ operand2_high) & 0x80000000 | result_exponent & 0xfffff;\n    cond3 = SCARRY4(exponent_diff,temp_diff_high >> 1);\n    result_exponent = exponent_diff + (temp_diff_high >> 1);\n    cond1 = (int)result_exponent < 0;\n    cond2 = result_exponent == 0;\n    if (!cond2 && cond1 == cond3) {\n      cond3 = SBORROW4(temp_diff_high,result_exponent);\n      cond1 = (int)(temp_diff_high - result_exponent) < 0;\n      cond2 = temp_diff_high == result_exponent;\n    }\n    if (!cond2 && cond1 == cond3) {\n      result_high = result_high | result_exponent * 0x100000;\n    }\n    if (!cond2 && cond1 == cond3) {\n      return intermediate_result & 0xffffffff | (ulonglong)result_high << 0x20;\n    }\n    result_high = result_high | 0x100000;\n    temp_diff_high = 0;\n    cond2 = SBORROW4(result_exponent,1);\n    result_exponent = result_exponent - 1;\n    cond1 = result_exponent == 0;\n    temp_var3 = result_exponent;\n  }\n  else {\n    temp_var3 = (operand2_high << 0xc) >> 4 | 0x10000000 | operand2_low >> 0x18;\n    temp_diff_high = operand2_low << 8;\n    operand2_exponent = (result_exponent << 0xc) >> 4 | 0x10000000 | result_low >> 0x18;\n    result_low = result_low * 0x100;\n    result_high = (result_exponent ^ operand2_high) & 0x80000000;\n    cond1 = temp_var3 <= operand2_exponent;\n    if (operand2_exponent == temp_var3) {\n      cond1 = temp_diff_high <= result_low;\n    }\n    exponent_diff = exponent_diff + (uint)cond1;\n    result_exponent = exponent_diff + 0x3fd;\n    if (cond1 == false) {\n      temp_var3 = temp_var3 >> 1;\n      temp_diff_high = (uint)((operand2_low >> 0x18 & 1) != 0) << 0x1f | temp_diff_high >> 1;\n    }\n    temp_diff_low = result_low - temp_diff_high;\n    operand2_exponent = (operand2_exponent - temp_var3) - (uint)(result_low < temp_diff_high);\n    temp_var4 = temp_var3 >> 1;\n    temp_var1 = (uint)((temp_var3 & 1) != 0) << 0x1f | temp_diff_high >> 1;\n    result_low = 0x100000;\n    temp_var3 = 0x80000;\n    while( true ) {\n      cond1 = temp_var1 <= temp_diff_low;\n      if (temp_var4 < operand2_exponent || operand2_exponent - temp_var4 < (uint)cond1) {\n        temp_diff_low = temp_diff_low - temp_var1;\n        result_low = result_low | temp_var3;\n        operand2_exponent = (operand2_exponent - temp_var4) - (uint)!cond1;\n      }\n      temp_var5 = temp_var4 >> 1;\n      temp_var1 = (uint)((temp_var4 & 1) != 0) << 0x1f | temp_var1 >> 1;\n      cond2 = temp_var1 <= temp_diff_low;\n      cond1 = operand2_exponent - temp_var5 < (uint)cond2;\n      temp_diff_high = operand2_exponent;\n      if (temp_var5 < operand2_exponent || cond1) {\n        temp_diff_low = temp_diff_low - temp_var1;\n        temp_diff_high = (operand2_exponent - temp_var5) - (uint)!cond2;\n      }\n      if (temp_var5 < operand2_exponent || cond1) {\n        result_low = result_low | temp_var3 >> 1;\n      }\n      operand2_exponent = temp_var4 >> 2;\n      temp_var2 = (uint)((temp_var5 & 1) != 0) << 0x1f | temp_var1 >> 1;\n      cond2 = temp_var2 <= temp_diff_low;\n      cond1 = temp_diff_high - operand2_exponent < (uint)cond2;\n      temp_var5 = temp_diff_high;\n      if (operand2_exponent < temp_diff_high || cond1) {\n        temp_diff_low = temp_diff_low - temp_var2;\n        temp_var5 = (temp_diff_high - operand2_exponent) - (uint)!cond2;\n      }\n      if (operand2_exponent < temp_diff_high || cond1) {\n        result_low = result_low | temp_var3 >> 2;\n      }\n      temp_var6 = temp_var4 >> 3;\n      temp_var1 = (uint)((operand2_exponent & 1) != 0) << 0x1f | temp_var2 >> 1;\n      cond2 = temp_var1 <= temp_diff_low;\n      cond1 = temp_var5 - temp_var6 < (uint)cond2;\n      operand2_exponent = temp_var5;\n      if (temp_var6 < temp_var5 || cond1) {\n        temp_diff_low = temp_diff_low - temp_var1;\n        operand2_exponent = (temp_var5 - temp_var6) - (uint)!cond2;\n      }\n      if (temp_var6 < temp_var5 || cond1) {\n        result_low = result_low | temp_var3 >> 3;\n      }\n      temp_diff_high = operand2_exponent | temp_diff_low;\n      if (temp_diff_high == 0) break;\n      operand2_exponent = operand2_exponent << 4 | temp_diff_low >> 0x1c;\n      temp_diff_low = temp_diff_low << 4;\n      temp_var4 = temp_var4 & 0xfffffff8 | temp_var1 >> 0x1d;\n      temp_var1 = (temp_var2 >> 1) << 3;\n      temp_var3 = temp_var3 >> 4;\n      if (temp_var3 == 0) {\n        temp_var6 = temp_var4;\n        if ((result_high & 0x100000) != 0) goto LAB_08000842;\n        result_high = result_high | result_low;\n        result_low = 0;\n        temp_var3 = 0x80000000;\n      }\n    }\n    if ((result_high & 0x100000) == 0) {\n      result_high = result_high | result_low;\n      result_low = 0;\n    }\nLAB_08000842:\n    cond3 = 0xfc < result_exponent;\n    cond2 = SBORROW4(result_exponent,0xfd);\n    temp_var4 = exponent_diff + 0x300;\n    cond1 = temp_var4 == 0;\n    temp_var3 = temp_var4;\n    if (cond3 && !cond1) {\n      cond3 = 0x6ff < temp_var4;\n      cond2 = SBORROW4(temp_var4,0x700);\n      temp_var3 = exponent_diff - 0x400;\n      cond1 = temp_var4 == 0x700;\n    }\n    if (!cond3 || cond1) {\n      cond1 = temp_var6 <= operand2_exponent;\n      if (operand2_exponent == temp_var6) {\n        cond1 = temp_var1 <= temp_diff_low;\n      }\n      if (operand2_exponent == temp_var6 && temp_diff_low == temp_var1) {\n        cond1 = (result_low & 1) != 0;\n      }\n      return CONCAT44(result_high + result_exponent * 0x100000 + (uint)CARRY4(result_low,(uint)cond1),result_low + cond1);\n    }\n  }\n  if (!cond1 && (int)temp_var3 < 0 == cond2) {\n    return (ulonglong)(result_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  cond3 = SCARRY4(result_exponent,0x36);\n  cond1 = (int)(result_exponent + 0x36) < 0;\n  cond2 = result_exponent == 0xffffffca;\n  if (cond2 || cond1 != cond3) {\n    result_low = 0;\n  }\n  if (cond2 || cond1 != cond3) {\n    result_high = result_high & 0x80000000;\n  }\n  if (cond2 || cond1 != cond3) {\n    return CONCAT44(result_high,result_low);\n  }\n  temp_var3 = -result_exponent;\n  operand2_exponent = temp_var3 - 0x20;\n  if (0x1f < (int)temp_var3) {\n    temp_var3 = result_low >> (operand2_exponent & 0xff) | result_high << (0x20 - operand2_exponent & 0xff);\n    result_exponent = (result_high >> (operand2_exponent & 0xff) & ~((result_high & 0x80000000) >> (operand2_exponent & 0xff))) -\n            ((int)temp_var3 >> 0x1f);\n    if ((temp_diff_high | result_low << (0x20 - operand2_exponent & 0xff) | temp_var3 << 1) == 0) {\n      result_exponent = result_exponent & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44(result_high,result_exponent) & 0x80000000ffffffff;\n  }\n  exponent_diff = temp_var3 - 0x14;\n  if (exponent_diff != 0 && exponent_diff < 0 == SCARRY4(operand2_exponent,0xc)) {\n    result_exponent = 0xc - exponent_diff;\n    temp_var3 = result_low << (result_exponent & 0xff);\n    result_low = result_low >> (0x20 - result_exponent & 0xff) | result_high << (result_exponent & 0xff);\n    result_exponent = result_low + -((int)temp_var3 >> 0x1f);\n    if ((temp_diff_high | temp_var3 << 1) == 0) {\n      result_exponent = result_exponent & ~(temp_var3 >> 0x1f);\n    }\n    return CONCAT44((result_high & 0x80000000) + (uint)CARRY4(result_low,-((int)temp_var3 >> 0x1f)),result_exponent);\n  }\n  operand2_exponent = result_low << (result_exponent + 0x20 & 0xff);\n  result_low = result_low >> (temp_var3 & 0xff) | result_high << (result_exponent + 0x20 & 0xff);\n  result_exponent = result_low + -((int)operand2_exponent >> 0x1f);\n  if ((temp_diff_high | operand2_exponent << 1) == 0) {\n    result_exponent = result_exponent & ~(operand2_exponent >> 0x1f);\n  }\n  return CONCAT44((result_high & 0x80000000) +\n                  ((result_high & 0x7fffffff) >> (temp_var3 & 0xff)) +\n                  (uint)CARRY4(result_low,-((int)operand2_exponent >> 0x1f)),result_exponent);\n}\n\n",
            "called": [
                "FUN_08000892"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000724",
            "calling": [
                "__ieee754_atan2",
                "MadgwickQuaternionUpdate",
                "sqrt",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "floating_point_multiplication_08000724"
        },
        "FUN_080070a4": {
            "renaming": {
                "FUN_080070a4": "calculate_result_080070a4",
                "__tagb": "input_string",
                "in_d0": "result"
            },
            "code": "\ndouble calculate_result_080070a4(char *input_string)\n\n{\n  double result;\n  \n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080070a4",
            "calling": [
                "asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_result_080070a4"
        },
        "FUN_0800407c": {
            "renaming": {
                "FUN_0800407c": "read_i2_c_register_0800407c",
                "device_add": "device_address",
                "register_add": "register_address",
                "file": "error_file",
                "line": "error_line",
                "HVar1": "status",
                "byte": "read_byte"
            },
            "code": "\nuint8_t ReadI2CRegister_0800407c(uint16_t device_address,uint16_t register_address,char *error_file,int error_line)\n\n{\n  HAL_StatusTypeDef status;\n  uint8_t read_byte [1];\n  \n  read_byte[0] = '\\0';\n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040b4,device_address,register_address,1,read_byte,1,\n                           200);\n  if (status != HAL_OK) {\n    _Error_Handler(error_file,error_line);\n  }\n  return read_byte[0];\n}\n\n",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800407c",
            "calling": [
                "MPU9250_Init",
                "AK8963_ReadData",
                "I2C_ReadByteArray",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "read_i2_c_register_0800407c"
        },
        "FUN_08001938": {
            "renaming": {
                "FUN_08001938": "i2_c_read_memory_08001938",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "pData": "data_buffer",
                "Size": "data_size",
                "Timeout": "timeout",
                "puVar1": "next_data_ptr",
                "HVar2": "status",
                "uVar3": "start_tick",
                "uVar4": "current_tick",
                "pIVar5": "i2c_instance",
                "uVar6": "cr1_value",
                "puVar7": "temp_data_ptr",
                "bVar8": "rxne_flag"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nHAL_StatusTypeDef\nI2C_ReadMemory_08001938(I2C_HandleTypeDef *i2c_handle,uint16_t device_address,uint16_t memory_address,uint16_t memory_address_size\n                ,uint8_t *data_buffer,uint16_t data_size,uint32_t timeout)\n\n{\n  uint8_t *next_data_ptr;\n  HAL_StatusTypeDef status;\n  uint32_t start_tick;\n  uint32_t current_tick;\n  I2C_TypeDef *i2c_instance;\n  uint cr1_value;\n  uint8_t *temp_data_ptr;\n  bool rxne_flag;\n  uint32_t tmpreg;\n  uint32_t tmpreg_1;\n  uint32_t tmpreg_2;\n  \n  if (i2c_handle->State != HAL_I2C_STATE_READY) {\n    return HAL_BUSY;\n  }\n  if (data_buffer == (uint8_t *)0x0) {\n    return HAL_ERROR;\n  }\n  if (data_size == 0) {\n    return HAL_ERROR;\n  }\n  start_tick = HAL_GetTick();\n  while (i2c_instance = i2c_handle->Instance, (~i2c_instance->SR2 & 2) == 0) {\n    current_tick = HAL_GetTick();\n    if (10000 < current_tick - start_tick) {\n      i2c_handle->Lock = HAL_UNLOCKED;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      return HAL_BUSY;\n    }\n  }\n  if (i2c_handle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  cr1_value = i2c_instance->CR1;\n  i2c_handle->Lock = HAL_LOCKED;\n  i2c_instance->CR1 = cr1_value & 0xfffff7ff;\n  i2c_handle->State = HAL_I2C_STATE_BUSY_RX;\n  i2c_handle->Mode = HAL_I2C_MODE_MEM;\n  i2c_handle->ErrorCode = 0;\n  status = I2C_RequestMemoryRead(i2c_handle,device_address,memory_address,memory_address_size,timeout);\n  if (status != HAL_OK) {\n    i2c_handle->Lock = HAL_UNLOCKED;\n    if (i2c_handle->ErrorCode == 4) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  i2c_instance = i2c_handle->Instance;\n  cr1_value = i2c_instance->CR1;\n  if (data_size == 1) {\n    i2c_instance->CR1 = cr1_value & 0xfffffbff;\n    disableIRQinterrupts();\n    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    enableIRQinterrupts();\n    status = I2C_WaitOnRXNEFlagUntiltimeout(i2c_handle,timeout);\n    if (status == HAL_OK) {\n      *data_buffer = (uint8_t)i2c_handle->Instance->DR;\nLAB_08001ab8:\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Mode = HAL_I2C_MODE_NONE;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_OK;\n    }\nLAB_08001a18:\n    if (i2c_handle->ErrorCode != 0x20) {\n      return HAL_ERROR;\n    }\n    return HAL_TIMEOUT;\n  }\n  if (data_size == 2) {\n    i2c_instance->CR1 = cr1_value | 0x800;\n    disableIRQinterrupts();\n    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    i2c_instance->CR1 = cr1_value | 0x400;\n    while (3 < data_size) {\n      status = I2C_WaitOnRXNEFlagUntiltimeout(i2c_handle,timeout);\n      if (status != HAL_OK) goto LAB_08001a18;\n      *data_buffer = (uint8_t)i2c_handle->Instance->DR;\n      i2c_instance = i2c_handle->Instance;\n      rxne_flag = (int)(i2c_instance->SR1 << 0x1d) < 0;\n      if (rxne_flag) {\n        i2c_instance = (I2C_TypeDef *)i2c_instance->DR;\n        temp_data_ptr = data_buffer + 2;\n        data_size = data_size - 2;\n      }\n      else {\n        temp_data_ptr = data_buffer + 1;\n        data_size = data_size - 1;\n      }\n      next_data_ptr = data_buffer + 1;\n      data_buffer = temp_data_ptr;\n      if (rxne_flag) {\n        *next_data_ptr = (uint8_t)i2c_instance;\n      }\n    }\n    if (data_size != 2) {\n      start_tick = HAL_GetTick();\n      do {\n        i2c_instance = i2c_handle->Instance;\n        do {\n          if ((int)(i2c_instance->SR1 << 0x1d) < 0) {\n            i2c_instance->CR1 = i2c_instance->CR1 & 0xfffffbff;\n            disableIRQinterrupts();\n            *data_buffer = (uint8_t)i2c_handle->Instance->DR;\n            start_tick = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  start_tick = HAL_GetTick();\n  do {\n    do {\n      if ((int)(i2c_handle->Instance->SR1 << 0x1d) < 0) {\n        disableIRQinterrupts();\n        i2c_instance = i2c_handle->Instance;\n        i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n        *data_buffer = (uint8_t)i2c_instance->DR;\n        enableIRQinterrupts();\n        data_buffer[1] = (uint8_t)i2c_handle->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout));\nLAB_08001afa:\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  return HAL_TIMEOUT;\nLAB_08001b3a:\n  do {\n    i2c_instance = i2c_handle->Instance;\n    do {\n      if ((int)(i2c_instance->SR1 << 0x1d) < 0) {\n        i2c_instance->CR1 = i2c_instance->CR1 | 0x200;\n        data_buffer[1] = (uint8_t)i2c_instance->DR;\n        enableIRQinterrupts();\n        data_buffer[2] = (uint8_t)i2c_handle->Instance->DR;\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "called": [
                "I2C_WaitOnRXNEFlagUntilTimeout",
                "HAL_GetTick",
                "I2C_RequestMemoryRead"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001938",
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "imported": false,
            "current_name": "i2_c_read_memory_08001938"
        },
        "FUN_080022d0": {
            "renaming": {
                "FUN_080022d0": "configure_timer_channel_080022d0",
                "TIMx": "timerInstance",
                "OC_Config": "outputConfig",
                "uVar1": "ccerConfig",
                "uVar2": "cr2Config",
                "uVar3": "ocMode"
            },
            "code": "\nvoid configureTimerChannel_080022d0(TIM_TypeDef *timerInstance,TIM_OC_InitTypeDef *outputConfig)\n\n{\n  uint32_t ccerConfig;\n  uint32_t cr2Config;\n  uint ocMode;\n  \n  timerInstance->CCER = timerInstance->CCER & 0xfffffeff;\n  cr2Config = timerInstance->CR2;\n  ocMode = outputConfig->OCMode;\n  ccerConfig = timerInstance->CCER & 0xfffffdff | outputConfig->OCPolarity << 8;\n  if (timerInstance == DAT_08002320) {\n    ccerConfig = (ccerConfig & 0xfffff7ff | outputConfig->OCNPolarity << 8) & 0xfffffbff;\n    cr2Config = cr2Config & 0xffffcfff | (outputConfig->OCIdleState | outputConfig->OCNIdleState) << 4;\n  }\n  timerInstance->CR2 = cr2Config;\n  timerInstance->CCMR2 = timerInstance->CCMR2 & 0xffffff8c | ocMode;\n  timerInstance->CCR3 = outputConfig->Pulse;\n  timerInstance->CCER = ccerConfig;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080022d0",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_channel_080022d0"
        },
        "FUN_080010c4": {
            "renaming": {
                "FUN_080010c4": "calculate_result_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "code": "\nuint calculate_result_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080010c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "calculate_result_080010c4"
        },
        "FUN_0800245c": {
            "renaming": {
                "FUN_0800245c": "configure_tim_channel_0800245c",
                "htim": "timerHandle",
                "sConfig": "config",
                "Channel": "channel",
                "extraout_r1": "configOutput1",
                "extraout_r1_00": "configOutput2",
                "extraout_r1_01": "configOutput3",
                "extraout_r1_02": "configOutput4",
                "uVar1": "outputValue1",
                "iVar2": "outputValue2",
                "uVar3": "combinedOutputValue",
                "pTVar4": "timerInstance"
            },
            "code": "\nHAL_StatusTypeDef\nConfigureTIMChannel_0800245c(TIM_HandleTypeDef *timerHandle,TIM_OC_InitTypeDef *config,uint32_t channel)\n\n{\n  int configOutput1;\n  int configOutput2;\n  int configOutput3;\n  uint outputValue1;\n  int configOutput4;\n  int outputValue2;\n  uint32_t combinedOutputValue;\n  TIM_TypeDef *timerInstance;\n  \n  if (timerHandle->Lock == HAL_LOCKED) {\n    return HAL_BUSY;\n  }\n  timerHandle->State = HAL_TIM_STATE_BUSY;\n  timerHandle->Lock = HAL_LOCKED;\n  switch(channel) {\n  case 0:\n    TIM_OC1_SetConfig(timerHandle->Instance,config);\n    timerInstance = timerHandle->Instance;\n    outputValue1 = *(uint *)(configOutput1 + 0x10);\n    timerInstance->CCMR1 = timerInstance->CCMR1 | 8;\n    timerInstance->CCMR1 = timerInstance->CCMR1 & 0xfffffffb;\n    combinedOutputValue = timerInstance->CCMR1 | outputValue1;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(timerHandle->Instance,config);\n    timerInstance = timerHandle->Instance;\n    outputValue2 = *(int *)(configOutput2 + 0x10);\n    timerInstance->CCMR1 = timerInstance->CCMR1 | 0x800;\n    timerInstance->CCMR1 = timerInstance->CCMR1 & 0xfffffbff;\n    combinedOutputValue = timerInstance->CCMR1 | outputValue2 << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(timerHandle->Instance,config);\n    timerInstance = timerHandle->Instance;\n    outputValue1 = *(uint *)(configOutput3 + 0x10);\n    timerInstance->CCMR2 = timerInstance->CCMR2 | 8;\n    timerInstance->CCMR2 = timerInstance->CCMR2 & 0xfffffffb;\n    combinedOutputValue = timerInstance->CCMR2 | outputValue1;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(timerHandle->Instance,config);\n    timerInstance = timerHandle->Instance;\n    outputValue2 = *(int *)(configOutput4 + 0x10);\n    timerInstance->CCMR2 = timerInstance->CCMR2 | 0x800;\n    timerInstance->CCMR2 = timerInstance->CCMR2 & 0xfffffbff;\n    combinedOutputValue = timerInstance->CCMR2 | outputValue2 << 8;\nLAB_080024fa:\n    timerInstance->CCMR2 = combinedOutputValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  timerInstance->CCMR1 = combinedOutputValue;\nswitchD_0800247a_caseD_1:\n  timerHandle->State = HAL_TIM_STATE_READY;\n  timerHandle->Lock = HAL_UNLOCKED;\n  return HAL_OK;\n}\n\n",
            "called": [
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC2_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800245c",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "configure_tim_channel_0800245c"
        },
        "FUN_080008f4": {
            "renaming": {
                "FUN_080008f4": "compare_and_combine_080008f4",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "xor_result",
                "bVar2": "comparison_flag",
                "bVar3": "conditional_flag"
            },
            "code": "\nuint compare_and_combine_080008f4(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint xor_result;\n  bool comparison_flag;\n  bool conditional_flag;\n  \n  if (((int)(input_b << 1) >> 0x15 == -1 || (int)(input_d << 1) >> 0x15 == -1) &&\n     ((((int)(input_b << 1) >> 0x15 == -1 && ((input_a | input_b << 0xc) != 0)) ||\n      (((int)(input_d << 1) >> 0x15 == -1 && ((input_c | input_d << 0xc) != 0)))))) {\n    return 0xffffffff;\n  }\n  comparison_flag = (input_a | input_b << 1) == 0;\n  if (comparison_flag) {\n    comparison_flag = (input_c | input_d << 1) == 0;\n  }\n  if (!comparison_flag) {\n    comparison_flag = input_b == input_d;\n  }\n  if (comparison_flag) {\n    comparison_flag = input_a == input_c;\n  }\n  if (!comparison_flag) {\n    xor_result = input_b ^ input_d;\n    comparison_flag = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      comparison_flag = input_b == input_d;\n    }\n    conditional_flag = -1 < (int)xor_result && input_d <= input_b;\n    if (comparison_flag) {\n      conditional_flag = input_c <= input_a;\n    }\n    input_d = (int)input_d >> 0x1f;\n    if (!conditional_flag) {\n      input_d = ~input_d;\n    }\n    return input_d | 1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080008f4",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_combine_080008f4"
        },
        "FUN_08004e14": {
            "renaming": {
                "FUN_08004e14": "initialize_timer_gpio_08004e14",
                "htim": "timerHandle",
                "pGVar1": "gpioPort",
                "pTVar2": "timerInstance",
                "GPIO_InitStruct": "gpioConfig"
            },
            "code": "\nvoid InitializeTimerGPIO_08004e14(TIM_HandleTypeDef *timerHandle)\n\n{\n  GPIO_TypeDef *gpioPort;\n  TIM_TypeDef *timerInstance;\n  GPIO_InitTypeDef gpioConfig;\n  \n  timerInstance = timerHandle->Instance;\n  gpioPort = DAT_08004e6c;\n  if (timerInstance == DAT_08004e68) {\n    gpioConfig.Pin = 0x800;\n  }\n  else if (timerInstance == (TIM_TypeDef *)0x40000000) {\n    gpioConfig.Pin = 2;\n  }\n  else {\n    gpioPort = DAT_08004e74;\n    if (timerInstance == DAT_08004e70) {\n      gpioConfig.Pin = 3;\n    }\n    else {\n      if (timerInstance != DAT_08004e78) {\n        return;\n      }\n      gpioConfig.Pin = 0x300;\n    }\n  }\n  gpioConfig.Speed = 2;\n  gpioConfig.Mode = 2;\n  HAL_GPIO_Init(gpioPort,&gpioConfig);\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e14",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_timer_gpio_08004e14"
        },
        "FUN_08002ea0": {
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "_beta": "beta",
                "_deltat": "deltaTime"
            },
            "code": "\nvoid initializeSensors_08002ea0(void)\n\n{\n  float beta;\n  float deltaTime;\n  \n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(beta);\n  MadgwickSetDelta(deltaTime);\n  return;\n}\n\n",
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ea0",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_sensors_08002ea0"
        },
        "FUN_08001424": {
            "renaming": {
                "FUN_08001424": "set_gpio_pin_state_08001424",
                "GPIOx": "gpioPort",
                "GPIO_Pin": "gpioPin",
                "PinState": "pinState",
                "uVar1": "tempVar"
            },
            "code": "\nvoid setGPIOPinState_08001424(GPIO_TypeDef *gpioPort,uint16_t gpioPin,gpioPinState pinState)\n\n{\n  uint32_t tempVar;\n  \n  tempVar = (uint32_t)gpioPin;\n  if (pinState == GPIO_PIN_RESET) {\n    tempVar = tempVar << 0x10;\n  }\n  gpioPort->BSRR = tempVar;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001424",
            "calling": [
                "toggleLED",
                "_Error_Handler",
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "set_gpio_pin_state_08001424"
        },
        "FUN_08002998": {
            "renaming": {
                "FUN_08002998": "do_nothing_08002998"
            },
            "code": "\nvoid do_nothing_08002998(UART_HandleTypeDef *huart)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002998",
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "imported": false,
            "current_name": "do_nothing_08002998"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "__x": "input_x",
                "__y": "input_y",
                "cVar1": "char_var",
                "puVar2": "ptr_var",
                "iVar3": "int_var1",
                "iVar4": "int_var2",
                "piVar5": "int_ptr_var",
                "puVar6": "undef_ptr_var",
                "extraout_r1": "extra_output1",
                "extraout_r1_00": "extra_output2",
                "uVar7": "undef_var",
                "extraout_d0": "double_output1",
                "extraout_d0_00": "double_output2",
                "extraout_d0_01": "double_output3",
                "extraout_d0_02": "double_output4",
                "extraout_d0_03": "double_output5",
                "extraout_d0_04": "double_output6",
                "extraout_d0_05": "double_output7",
                "extraout_d0_06": "double_output8",
                "extraout_d0_07": "double_output9",
                "extraout_d0_08": "double_output10",
                "extraout_d0_09": "double_output11",
                "extraout_d0_10": "double_output12",
                "extraout_d0_11": "double_output13",
                "extraout_d0_12": "double_output14",
                "dVar8": "double_var",
                "uVar9": "undef_longlong_var",
                "local_50": "local_array",
                "local_38": "local_double",
                "local_30": "local_int"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\ndouble calculate_result_08005900(double input_x,double input_y)\n\n{\n  char char_var;\n  undefined *ptr_var;\n  int int_var1;\n  int int_var2;\n  int *int_ptr_var;\n  undefined4 *undef_ptr_var;\n  undefined4 extra_output1;\n  undefined4 extra_output2;\n  undefined4 undef_var;\n  double double_output1;\n  double double_output2;\n  double double_output3;\n  double double_output4;\n  double double_output5;\n  double double_output6;\n  double double_output7;\n  double double_output8;\n  double double_output9;\n  double double_output10;\n  double double_output11;\n  double double_output12;\n  double double_output13;\n  double double_output14;\n  double double_var;\n  undefined8 undef_longlong_var;\n  undefined local_array [24];\n  undefined8 local_double;\n  int local_int;\n  \n  double_var = (double)__ieee754_calculate_result_08005900();\n  ptr_var = PTR___fdlib_version_08005ba8;\n  char_var = *PTR___fdlib_version_08005ba8;\n  if (char_var == -1) {\n    return double_output1;\n  }\n  local_int = __unorddf2();\n  if (local_int != 0) {\n    return double_output2;\n  }\n  int_var1 = __unorddf2();\n  if (int_var1 != 0) {\n    int_var1 = __aeabi_dcmpeq();\n    if (int_var1 == 0) {\n      return double_output3;\n    }\n    local_array._0_4_ = 1;\n    local_array._4_4_ = PTR_DAT_08005bac;\n    local_double = (double)((ulonglong)DAT_08005bb0 << 0x20);\n    if (char_var == '\\x02') {\n      return double_output3;\n    }\n    goto LAB_08005978;\n  }\n  int_var2 = __aeabi_dcmpeq();\n  if (int_var2 == 0) {\n    int_var1 = finite(double_var);\n    if ((int_var1 == 0) && (int_var2 = finite(double_var), int_var2 != 0)) {\n      int_var2 = finite(double_var);\n      if (int_var2 == 0) goto LAB_08005b4c;\n      local_int = __unorddf2(SUB84(double_var,0),(int)((ulonglong)double_var >> 0x20));\n      char_var = *ptr_var;\n      if (local_int != 0) {\n        local_array._4_4_ = PTR_DAT_08005bac;\n        local_array._0_4_ = 1;\n        local_int = int_var1;\n        if (char_var == '\\0') goto LAB_08005a22;\n        local_double = (double)__divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\n      local_array._4_4_ = PTR_DAT_08005bac;\n      local_array._0_4_ = 3;\n      if (char_var != '\\0') {\n        local_double._0_4_ = 0;\n        local_double._4_4_ = DAT_08005bc4;\n        int_var1 = __aeabi_dcmplt();\n        if (int_var1 != 0) {\n          undef_longlong_var = __muldf3();\n          undef_var = (int)undef_longlong_var;\n          rint(double_var);\n          int_var1 = __aeabi_dcmpeq((int)undef_longlong_var,(int)((ulonglong)undef_longlong_var >> 0x20),undef_var,extra_output2);\n          if (int_var1 == 0) {\n            local_double._0_4_ = 0;\n            local_double._4_4_ = DAT_08005bb4;\n          }\n        }\n        goto LAB_08005afa;\n      }\n      local_double._0_4_ = 0xe0000000;\n      local_double._4_4_ = DAT_08005bb8;\n      int_var1 = __aeabi_dcmplt();\n      if (int_var1 != 0) {\n        undef_longlong_var = __muldf3();\n        undef_var = (int)undef_longlong_var;\n        rint(double_var);\n        int_var1 = __aeabi_dcmpeq((int)undef_longlong_var,(int)((ulonglong)undef_longlong_var >> 0x20),undef_var,extra_output1);\n        if (int_var1 == 0) {\n          local_double._0_4_ = 0xe0000000;\n          local_double._4_4_ = DAT_08005bc0;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      int_var1 = matherr((exception *)local_array);\n      double_var = double_output14;\n      if (int_var1 != 0) goto LAB_080059d0;\n    }\n    else {\nLAB_08005b4c:\n      int_var1 = __aeabi_dcmpeq(SUB84(double_var,0),(int)((ulonglong)double_var >> 0x20),0,0);\n      if (int_var1 == 0) {\n        return double_output11;\n      }\n      int_var1 = finite(double_var);\n      if (int_var1 == 0) {\n        return double_output12;\n      }\n      int_var1 = finite(double_var);\n      if (int_var1 == 0) {\n        return double_output13;\n      }\n      local_array._0_4_ = 4;\n      local_array._4_4_ = PTR_DAT_08005bac;\n      local_int = 0;\n      local_double._0_4_ = 0;\n      local_double._4_4_ = 0;\nLAB_08005afa:\n      if (*ptr_var != '\\x02') goto LAB_08005b98;\n    }\n    undef_ptr_var = (undefined4 *)__errno();\n    undef_var = 0x22;\n    double_var = double_output10;\n  }\n  else {\n    local_int = __aeabi_dcmpeq();\n    if (local_int == 0) {\n      int_var1 = finite(double_var);\n      if (int_var1 == 0) {\n        return double_output7;\n      }\n      int_var1 = __aeabi_dcmplt();\n      if (int_var1 == 0) {\n        return double_output8;\n      }\n      local_array._0_4_ = 1;\n      local_array._4_4_ = PTR_DAT_08005bac;\n      char_var = *ptr_var;\n      if (char_var == '\\0') {\nLAB_08005a22:\n        local_array._0_4_ = 1;\n        local_double = 0.0;\n        local_array._4_4_ = PTR_DAT_08005bac;\n        goto LAB_08005978;\n      }\n      local_double = (double)((ulonglong)DAT_08005bb4 << 0x20);\nLAB_08005a32:\n      if (char_var != '\\x02') goto LAB_08005978;\n    }\n    else {\n      local_array._0_4_ = 1;\n      local_array._4_4_ = PTR_DAT_08005bac;\n      local_double = 0.0;\n      local_int = int_var1;\n      if (char_var != '\\0') {\n        local_double = (double)((ulonglong)DAT_08005bb0 << 0x20);\n        double_var = double_output5;\n        goto LAB_080059d0;\n      }\nLAB_08005978:\n      int_var1 = matherr((exception *)local_array);\n      double_var = double_output4;\n      if (int_var1 != 0) goto LAB_080059d0;\n    }\n    undef_ptr_var = (undefined4 *)__errno();\n    undef_var = 0x21;\n    double_var = double_output9;\n  }\n  *undef_ptr_var = undef_var;\nLAB_080059d0:\n  if (local_int != 0) {\n    int_ptr_var = (int *)__errno();\n    *int_ptr_var = local_int;\n    double_var = double_output6;\n  }\n  return double_var;\n}\n\n",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__aeabi_dcmpeq",
                "__muldf3",
                "finite",
                "matherr",
                "rint",
                "__errno",
                "__ieee754_pow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "calculate_result_08005900"
        },
        "FUN_08004c64": {
            "renaming": {
                "FUN_08004c64": "initialize_circular_buffer_08004c64",
                "CB_Init": "CircularBuffer_Init"
            },
            "code": "\nvoid InitializeCircularBuffer_08004c64(void)\n\n{\n  CircularBuffer_Init((CircularBuffer *)PTR_rxc_08004c6c);\n  return;\n}\n\n",
            "called": [
                "CB_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c64",
            "calling": [
                "serialBegin"
            ],
            "imported": false,
            "current_name": "initialize_circular_buffer_08004c64"
        },
        "FUN_080041e4": {
            "renaming": {
                "FUN_080041e4": "set_motor_pwm_080041e4",
                "m1": "motor1_pwm",
                "m2": "motor2_pwm",
                "m3": "motor3_pwm",
                "m4": "motor4_pwm",
                "puVar1": "motor_pwm_ptr",
                "puVar2": "msp_txf_motor_ptr",
                "pwm": "clamped_motor1_pwm"
            },
            "code": "\nvoid setMotorPWM_080041e4(int motor1_pwm,int motor2_pwm,int motor3_pwm,int motor4_pwm)\n\n{\n  undefined *motor_pwm_ptr;\n  undefined *msp_txf_motor_ptr;\n  uint clamped_motor1_pwm;\n  \n  motor_pwm_ptr = PTR_motor_clamped_motor1_pwm_08004264;\n  if (999 < motor1_pwm) {\n    motor1_pwm = 1000;\n  }\n  if (999 < motor2_pwm) {\n    motor2_pwm = 1000;\n  }\n  if (999 < motor3_pwm) {\n    motor3_pwm = 1000;\n  }\n  if (999 < motor4_pwm) {\n    motor4_pwm = 1000;\n  }\n  clamped_motor1_pwm = motor1_pwm & ~(motor1_pwm >> 0x1f);\n  *(int *)(PTR_motor_clamped_motor1_pwm_08004264 + 8) = motor3_pwm & ~(motor3_pwm >> 0x1f);\n  *(int *)(motor_pwm_ptr + 0xc) = motor4_pwm & ~(motor4_pwm >> 0x1f);\n  *(int *)(motor_pwm_ptr + 4) = motor2_pwm & ~(motor2_pwm >> 0x1f);\n  *(uint *)motor_pwm_ptr = clamped_motor1_pwm;\n  Motor1_SetPWM(clamped_motor1_pwm);\n  Motor2_SetPWM(*(int *)(motor_pwm_ptr + 4));\n  Motor3_SetPWM(*(int *)(motor_pwm_ptr + 8));\n  Motor4_SetPWM(*(int *)(motor_pwm_ptr + 0xc));\n  msp_txf_motor_ptr = PTR_msp_txf_motor_08004268;\n  *(short *)PTR_msp_txf_motor_08004268 = (short)*(undefined4 *)motor_pwm_ptr + 1000;\n  *(short *)(msp_txf_motor_ptr + 2) = (short)*(undefined4 *)(motor_pwm_ptr + 4) + 1000;\n  *(short *)(msp_txf_motor_ptr + 4) = (short)*(undefined4 *)(motor_pwm_ptr + 8) + 1000;\n  *(short *)(msp_txf_motor_ptr + 6) = (short)*(undefined4 *)(motor_pwm_ptr + 0xc) + 1000;\n  return;\n}\n\n",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041e4",
            "calling": [
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "set_motor_pwm_080041e4"
        },
        "FUN_080003e4": {
            "renaming": {
                "FUN_080003e4": "calculate_shifted_value_080003e4",
                "param_1": "input_value",
                "uVar1": "shifted_high",
                "uVar2": "shift_amount",
                "iVar3": "leading_zeroes",
                "uVar4": "temp_shift_amount",
                "in_r12": "shift_right_amount",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "carry_flag"
            },
            "code": "\nulonglong calculate_shifted_value_080003e4(uint input_value)\n\n{\n  uint shifted_high;\n  uint shift_amount;\n  int leading_zeroes;\n  uint temp_shift_amount;\n  uint shift_right_amount;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  shifted_high = 0;\n  leading_zeroes = count_leading_zeroes(input_value);\n  temp_shift_amount = leading_zeroes + 0x15;\n  carry_flag = SBORROW4(temp_shift_amount,0x20);\n  shift_amount = leading_zeroes - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if ((int)temp_shift_amount < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    leading_zeroes = leading_zeroes + 1;\n    is_negative = leading_zeroes < 0;\n    is_zero = leading_zeroes == 0;\n    shift_amount = temp_shift_amount;\n    if (!is_zero && is_negative == carry_flag) {\n      shifted_high = input_value << (temp_shift_amount & 0xff);\n      input_value = input_value >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shift_right_amount = 0x20 - shift_amount;\n  }\n  input_value = input_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    input_value = input_value | 0U >> (shift_right_amount & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shifted_high = 0 << (shift_amount & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_shift_amount < 0x433) {\n    return CONCAT44(input_value + (0x432 - temp_shift_amount) * 0x100000,shifted_high);\n  }\n  shift_amount = ~(0x432 - temp_shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input_value >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeroes = shift_amount - 0x13;\n  if (leading_zeroes == 0 || leading_zeroes < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input_value >> (shift_amount & 0xff),\n                    shifted_high >> (shift_amount & 0xff) | input_value << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(shifted_high >> (0x20 - (0xcU - leading_zeroes) & 0xff) | input_value << (0xcU - leading_zeroes & 0xff));\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003e4",
            "calling": [],
            "imported": false,
            "current_name": "calculate_shifted_value_080003e4"
        },
        "FUN_08007092": {
            "renaming": {
                "FUN_08007092": "calculate_bitwise_operation_08007092",
                "__value": "inputValue",
                "in_r1": "bitwiseVariable"
            },
            "code": "\nint calculateBitwiseOperation_08007092(double inputValue)\n\n{\n  uint bitwiseVariable;\n  \n  return (bitwiseVariable | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007092",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_operation_08007092"
        },
        "FUN_08002f28": {
            "renaming": {
                "FUN_08002f28": "update_sensor_data_08002f28",
                "sVar1": "tempValue",
                "puVar2": "tempPtr1",
                "puVar3": "tempPtr2",
                "puVar4": "tempPtr3",
                "uVar5": "tempResult",
                "uVar6": "currentMicros",
                "uVar7": "deltaMicros",
                "iVar8": "lastUpdate",
                "_deltat": "deltaTime",
                "ax": "accelX",
                "ay": "accelY",
                "az": "accelZ",
                "gx": "gyroX",
                "gy": "gyroY",
                "gz": "gyroZ",
                "mx": "magX",
                "my": "magY"
            },
            "code": "\nvoid updateSensorData_08002f28(void)\n\n{\n  short tempValue;\n  undefined *tempPtr1;\n  undefined *tempPtr2;\n  undefined *tempPtr3;\n  undefined2 tempResult;\n  uint32_t currentMicros;\n  undefined4 deltaMicros;\n  int lastUpdate;\n  float deltaTime;\n  float accelX;\n  float accelY;\n  float accelZ;\n  float gyroX;\n  float gyroY;\n  float gyroZ;\n  float magX;\n  float magY;\n  \n  MPU9250_ReadAccelData();\n  MPU9250_ReadGyroData();\n  AK8963_ReadData();\n  currentMicros = micros();\n  tempPtr2 = PTR_AHRS_timeNow_08003004;\n  tempPtr1 = PTR_AHRS_lastUpdate_08003000;\n  lastUpdate = *(int *)PTR_AHRS_lastUpdate_08003000;\n  *(uint32_t *)PTR_AHRS_timeNow_08003004 = currentMicros;\n  deltaMicros = __floatunsisf(currentMicros - lastUpdate);\n  deltaTime = (float)__aeabi_fdiv(deltaMicros,DAT_08003008);\n  MadgwickSetDelta(deltaTime);\n  tempPtr3 = PTR_accelData_0800300c;\n  *(undefined4 *)tempPtr1 = *(undefined4 *)tempPtr2;\n  MadgwickQuaternionUpdate\n            (accelX,accelY,accelZ,gyroX,gyroY,gyroZ,magX,magY,(float)(*(int *)(tempPtr3 + 4) + -0x80000000),\n             (float *)(*(int *)tempPtr3 + -0x80000000));\n  tempPtr3 = PTR_msp_txf_attitude_08003024;\n  tempPtr2 = PTR_msp_txf_raw_imu_08003020;\n  tempPtr1 = PTR_accelRaw_0800301c;\n  *(short *)PTR_msp_txf_raw_imu_08003020 = (short)((uint)(int)*(short *)PTR_accelRaw_0800301c / 100)\n  ;\n  tempValue = *(short *)(tempPtr1 + 2);\n  *(short *)(tempPtr2 + 4) = (short)((uint)(int)*(short *)(tempPtr1 + 4) / 100);\n  tempPtr1 = PTR_gyroYroRaw_08003028;\n  *(short *)(tempPtr2 + 2) = (short)((uint)(int)tempValue / 100);\n  *(undefined2 *)(tempPtr2 + 6) = *(undefined2 *)tempPtr1;\n  tempResult = *(undefined2 *)(tempPtr1 + 4);\n  *(undefined2 *)(tempPtr2 + 8) = *(undefined2 *)(tempPtr1 + 2);\n  *(undefined2 *)(tempPtr2 + 10) = tempResult;\n  tempPtr1 = PTR_magRaw_0800302c;\n  *(undefined2 *)(tempPtr2 + 0xc) = *(undefined2 *)PTR_magRaw_0800302c;\n  tempResult = *(undefined2 *)(tempPtr1 + 4);\n  *(undefined2 *)(tempPtr2 + 0xe) = *(undefined2 *)(tempPtr1 + 2);\n  *(undefined2 *)(tempPtr2 + 0x10) = tempResult;\n  AHRS_GetRoll();\n  __aeabi_fmul();\n  tempResult = __aeabi_f2iz();\n  *(undefined2 *)tempPtr3 = tempResult;\n  AHRS_GetPitch();\n  __aeabi_fmul();\n  tempResult = __aeabi_f2iz();\n  *(undefined2 *)(tempPtr3 + 2) = tempResult;\n  AHRS_GetYaw();\n  tempResult = __aeabi_f2iz();\n  *(undefined2 *)(tempPtr3 + 4) = tempResult;\n  return;\n}\n\n",
            "called": [
                "AK8963_ReadData",
                "AHRS_GetPitch",
                "MadgwickQuaternionUpdate",
                "AHRS_GetRoll",
                "__aeabi_fdiv",
                "AHRS_GetYaw",
                "micros",
                "__aeabi_f2iz",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "__floatunsisf",
                "MadgwickSetDelta",
                "MPU9250_ReadGyroData"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f28",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "update_sensor_data_08002f28"
        },
        "FUN_08004384": {
            "renaming": {
                "FUN_08004384": "initialize_and_send_frame_08004384",
                "in_r3": "inputValue",
                "puVar1": "frameBuffer",
                "local_14": "frameHeader",
                "uStack_10": "frameData",
                "local_c": "modifiedInputValue"
            },
            "code": "\nvoid initializeAndSendFrame_08004384(void)\n\n{\n  undefined *frameBuffer;\n  uint inputValue;\n  undefined4 frameHeader;\n  undefined4 frameData;\n  uint modifiedInputValue;\n  \n  frameBuffer = PTR_msp_txf_status_080043b8;\n  PTR_msp_txf_status_080043b8[4] = 7;\n  frameBuffer[5] = 0;\n  frameBuffer[6] = 0x2a;\n  frameBuffer[7] = 0;\n  frameHeader = *(undefined4 *)frameBuffer;\n  frameData = *(undefined4 *)(frameBuffer + 4);\n  frameBuffer[8] = 0;\n  frameBuffer[9] = 0;\n  frameBuffer[10] = 0;\n  modifiedInputValue = inputValue & 0xff000000 | (uint)*(ushort *)(frameBuffer + 8);\n  MSP_SendFrame('e',(uint8_t *)&frameHeader,0xb);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004384",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "initialize_and_send_frame_08004384"
        },
        "FUN_080009a0": {
            "renaming": {
                "FUN_080009a0": "compare_floats_080009a0",
                "in_ZR": "comparison_result"
            },
            "code": "\nbool compare_floats_080009a0(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cdcmpeq();\n  return comparison_result != '\\0';\n}\n\n",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009a0",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "compare_floats_080009a0"
        },
        "FUN_08003298": {
            "renaming": {
                "FUN_08003298": "initialize_ms5611_08003298",
                "file": "logFile",
                "puVar1": "coefficientsPtr",
                "puVar2": "altFilterPtr",
                "iVar3": "index",
                "rxbuf": "readBuffer"
            },
            "code": "\nvoid initializeMS5611_08003298(void)\n\n{\n  undefined *logFile;\n  undefined *coefficientsPtr;\n  undefined *altFilterPtr;\n  int index;\n  uint8_t readBuffer [2];\n  \n  index = 0;\n  I2C_WriteByte(0xee,0x1e,'\\x01','\\x01');\n  delay_ms(10);\n  coefficientsPtr = PTR_MS5611_Coefficients_0800330c;\n  logFile = PTR_s____Src_MS5611_c_08003308;\n  *PTR_MS5611_OSR_08003304 = 8;\n  do {\n    readBuffer[0] = '\\0';\n    readBuffer[1] = '\\0';\n    I2C_ReadByteArray(0xee,(short)index + 0xa0,readBuffer,2,logFile,0x7c);\n    *(ushort *)(coefficientsPtr + index) = CONCAT11(readBuffer[0],readBuffer[1]);\n    altFilterPtr = PTR_alt_filter_08003310;\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    *(undefined4 *)(altFilterPtr + index * 4) = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "called": [
                "I2C_ReadByteArray",
                "delay_ms",
                "I2C_WriteByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003298",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_ms5611_08003298"
        },
        "FUN_08004028": {
            "renaming": {
                "FUN_08004028": "initialize_system_08004028"
            },
            "code": "\nvoid InitializeSystem_08004028(void)\n\n{\n  Peripherals_Init();\n  PWM_Init();\n  LED_StartupSequence();\n  return;\n}\n\n",
            "called": [
                "LED_StartupSequence",
                "PWM_Init",
                "Peripherals_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004028",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "initialize_system_08004028"
        },
        "FUN_0800708c": {
            "renaming": {
                "FUN_0800708c": "calculate_result_0800708c",
                "__x": "input_value",
                "in_d0": "result"
            },
            "code": "\ndouble calculate_result_0800708c(double input_value)\n\n{\n  double result;\n  \n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800708c",
            "calling": [
                "asin",
                "__ieee754_atan2",
                "atan",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_result_0800708c"
        },
        "FUN_08002520": {
            "renaming": {
                "FUN_08002520": "configure_timer_channel_08002520",
                "TIMx": "timer",
                "Channel": "channel",
                "ChannelState": "channelState"
            },
            "code": "\nvoid configureTimerChannel_08002520(TIM_TypeDef *timer,uint32_t channel,uint32_t channelState)\n\n{\n  timer->CCER = timer->CCER & ~(1 << (channel & 0xff));\n  timer->CCER = channelState << (channel & 0xff) | timer->CCER;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002520",
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "imported": false,
            "current_name": "configure_timer_channel_08002520"
        },
        "FUN_08000464": {
            "renaming": {
                "FUN_08000464": "calculate_result_08000464",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "byte_var",
                "uVar2": "uint_var1",
                "uVar3": "uint_var2",
                "uVar4": "uint_var3",
                "uVar6": "uint_var4",
                "uVar8": "uint_var5",
                "iVar5": "int_var1",
                "iVar7": "int_var2",
                "bVar9": "bool_var1",
                "bVar10": "bool_var2",
                "bVar11": "bool_var3"
            },
            "code": "\nulonglong calculate_result_08000464(uint input_1,uint input_2)\n\n{\n  byte byte_var;\n  uint uint_var1;\n  uint uint_var2;\n  uint uint_var3;\n  int int_var1;\n  uint uint_var4;\n  int int_var2;\n  uint uint_var5;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  \n  if ((input_1 | input_2) == 0) {\n    return CONCAT44(input_2,input_1);\n  }\n  int_var2 = 0x432;\n  uint_var5 = input_2 >> 0x16;\n  if (uint_var5 != 0) {\n    int_var2 = 3;\n    if (input_2 >> 0x19 != 0) {\n      int_var2 = 6;\n    }\n    if (input_2 >> 0x1c != 0) {\n      int_var2 = int_var2 + 3;\n    }\n    uint_var3 = int_var2 - ((int)input_2 >> 0x1f);\n    uint_var5 = input_1 << (0x20 - uint_var3 & 0xff);\n    input_1 = input_1 >> (uint_var3 & 0xff) | input_2 << (0x20 - uint_var3 & 0xff);\n    input_2 = input_2 >> (uint_var3 & 0xff);\n    int_var2 = uint_var3 + 0x432;\n  }\n  if (0xfffff < input_2) {\n    if (0x1fffff < input_2) {\n      uint_var3 = input_2 & 1;\n      input_2 = input_2 >> 1;\n      byte_var = (byte)input_1;\n      input_1 = (uint)(uint_var3 != 0) << 0x1f | input_1 >> 1;\n      uint_var5 = (uint)(byte_var & 1) << 0x1f | uint_var5 >> 1;\n      int_var2 = int_var2 + 1;\n      if (0xffbfffff < (uint)(int_var2 * 0x200000)) {\n        return 0x7ff0000000000000;\n      }\n    }\nLAB_08000278:\n    bool_var2 = 0x7fffffff < uint_var5;\n    if (uint_var5 == 0x80000000) {\n      bool_var2 = (input_1 & 1) != 0;\n    }\n    return CONCAT44(input_2 + int_var2 * 0x100000 + (uint)CARRY4(input_1,(uint)bool_var2),input_1 + bool_var2\n                   );\n  }\n  bool_var1 = (uint_var5 & 0x80000000) != 0;\n  uint_var5 = uint_var5 << 1;\n  uint_var3 = input_1 * 2;\n  bool_var2 = CARRY4(input_1,input_1);\n  input_1 = input_1 * 2 + (uint)bool_var1;\n  input_2 = input_2 * 2 + (uint)(bool_var2 || CARRY4(uint_var3,(uint)bool_var1));\n  int_var2 = int_var2 + -1;\n  if ((input_2 & 0x100000) != 0) goto LAB_08000278;\n  uint_var1 = input_1;\n  uint_var3 = input_2;\n  if (input_2 == 0) {\n    uint_var1 = 0;\n    uint_var3 = input_1;\n  }\n  int_var1 = count_leading_zeroes(uint_var3);\n  if (input_2 == 0) {\n    int_var1 = int_var1 + 0x20;\n  }\n  uint_var4 = int_var1 - 0xb;\n  bool_var3 = SBORROW4(uint_var4,0x20);\n  uint_var2 = int_var1 - 0x2b;\n  bool_var2 = (int)uint_var2 < 0;\n  bool_var1 = uint_var2 == 0;\n  if ((int)uint_var4 < 0x20) {\n    bool_var3 = SCARRY4(uint_var2,0xc);\n    int_var1 = int_var1 + -0x1f;\n    bool_var2 = int_var1 < 0;\n    bool_var1 = int_var1 == 0;\n    uint_var2 = uint_var4;\n    if (!bool_var1 && bool_var2 == bool_var3) {\n      uint_var1 = uint_var3 << (uint_var4 & 0xff);\n      uint_var3 = uint_var3 >> (0xcU - int_var1 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    uint_var5 = 0x20 - uint_var2;\n  }\n  uint_var3 = uint_var3 << (uint_var2 & 0xff);\n  if (bool_var1 || bool_var2 != bool_var3) {\n    uint_var3 = uint_var3 | uint_var1 >> (uint_var5 & 0xff);\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    uint_var1 = uint_var1 << (uint_var2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uint_var4 <= int_var2) {\n    return CONCAT44(uint_var3 + (int_var2 - uint_var4) * 0x100000,uint_var1);\n  }\n  uint_var5 = ~(int_var2 - uint_var4);\n  if (0x1e < (int)uint_var5) {\n    return (ulonglong)(uint_var3 >> (uint_var5 - 0x1f & 0xff));\n  }\n  int_var2 = uint_var5 - 0x13;\n  if (int_var2 == 0 || int_var2 < 0 != SCARRY4(uint_var5 - 0x1f,0xc)) {\n    uint_var5 = uint_var5 + 1;\n    return CONCAT44(uint_var3 >> (uint_var5 & 0xff),uint_var1 >> (uint_var5 & 0xff) | uint_var3 << (0x20 - uint_var5 & 0xff)\n                   );\n  }\n  return (ulonglong)(uint_var1 >> (0x20 - (0xcU - int_var2) & 0xff) | uint_var3 << (0xcU - int_var2 & 0xff));\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000464",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000464"
        },
        "FUN_08002404": {
            "renaming": {
                "FUN_08002404": "FUNC_08002404"
            },
            "code": "\nvoid FUNC_08002404(TIM_TypeDef *TIMx,TIM_OC_InitTypeDef *OC_Config)\n\n{\n  uint32_t uVar1;\n  uint32_t uVar2;\n  uint32_t uVar3;\n  \n  TIMx->CCER = TIMx->CCER & 0xffffffef;\n  uVar2 = TIMx->CR2;\n  uVar3 = OC_Config->OCMode;\n  uVar1 = TIMx->CCER & 0xffffffdf | OC_Config->OCPolarity << 4;\n  if (TIMx == DAT_08002458) {\n    uVar1 = (uVar1 & 0xffffff7f | OC_Config->OCNPolarity << 4) & 0xffffffbf;\n    uVar2 = uVar2 & 0xfffff3ff | (OC_Config->OCIdleState | OC_Config->OCNIdleState) << 2;\n  }\n  TIMx->CR2 = uVar2;\n  TIMx->CCMR1 = TIMx->CCMR1 & 0xffff8cff | uVar3 << 8;\n  TIMx->CCR2 = OC_Config->Pulse;\n  TIMx->CCER = uVar1;\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08002404",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "FUNC_08002404"
        },
        "FUN_08005bc8": {
            "renaming": {
                "FUN_08005bc8": "calculate_math_function_08005bc8",
                "__x": "input_value",
                "cVar1": "fdlib_version",
                "iVar2": "comparison_result",
                "piVar3": "error_pointer",
                "puVar4": "errno_pointer",
                "dVar5": "result_value",
                "extraout_d0": "output_d0",
                "extraout_d0_00": "output_d0_00",
                "extraout_d0_01": "output_d0_01",
                "extraout_d0_02": "output_d0_02",
                "extraout_d0_03": "output_d0_03",
                "local_50": "local_exception",
                "local_38": "local_division_result",
                "local_30": "comparison_flag"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\ndouble calculate_math_function_08005bc8(double input_value)\n\n{\n  char fdlib_version;\n  int comparison_result;\n  int *error_pointer;\n  undefined4 *errno_pointer;\n  double result_value;\n  double output_d0;\n  double output_d0_00;\n  double output_d0_01;\n  double output_d0_02;\n  double output_d0_03;\n  undefined local_exception [24];\n  undefined8 local_division_result;\n  int comparison_flag;\n  \n  result_value = (double)__ieee754_calculate_math_function_08005bc8();\n  fdlib_version = *PTR___fdlib_version_08005c68;\n  if (fdlib_version == -1) {\n    return result_value;\n  }\n  comparison_flag = __unorddf2();\n  if (comparison_flag != 0) {\n    return output_d0;\n  }\n  comparison_result = __aeabi_dcmplt();\n  if (comparison_result == 0) {\n    return output_d0_00;\n  }\n  local_exception._0_4_ = 1;\n  local_exception._4_4_ = PTR_DAT_08005c6c;\n  if (fdlib_version == '\\0') {\n    local_division_result = 0.0;\nLAB_08005c26:\n    comparison_result = matherr((exception *)local_exception);\n    result_value = output_d0_01;\n    if (comparison_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    local_division_result = (double)__divdf3(0,0,0,0);\n    if (fdlib_version != '\\x02') goto LAB_08005c26;\n  }\n  errno_pointer = (undefined4 *)__errno();\n  *errno_pointer = 0x21;\n  result_value = output_d0_03;\nLAB_08005c2e:\n  if (comparison_flag != 0) {\n    error_pointer = (int *)__errno();\n    *error_pointer = comparison_flag;\n    result_value = output_d0_02;\n  }\n  return result_value;\n}\n\n",
            "called": [
                "__divdf3",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "matherr",
                "__errno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bc8",
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_math_function_08005bc8"
        },
        "FUN_08001436": {
            "renaming": {
                "FUN_08001436": "check_i2_c_error_status_08001436",
                "hi2c": "i2c_handle",
                "pIVar1": "i2c_instance"
            },
            "code": "\nHAL_StatusTypeDef CheckI2CErrorStatus_08001436(I2C_HandleTypeDef *i2c_handle)\n\n{\n  I2C_TypeDef *i2c_instance;\n  \n  i2c_instance = i2c_handle->Instance;\n  if ((i2c_instance->SR1 & 0x400) != 0) {\n    i2c_instance->SR1 = i2c_instance->SR1 & 0xfffffbff;\n    i2c_handle->ErrorCode = 4;\n    i2c_handle->State = HAL_I2C_STATE_READY;\n    i2c_handle->Lock = HAL_UNLOCKED;\n    return HAL_ERROR;\n  }\n  return HAL_OK;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001436",
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "imported": false,
            "current_name": "check_i2_c_error_status_08001436"
        },
        "FUN_08004a30": {
            "renaming": {
                "FUN_08004a30": "update_altitude_data_08004a30",
                "puVar1": "joystickPtr",
                "puVar2": "altFlagPtr",
                "puVar3": "pidAltitudePtr",
                "uVar4": "filteredAltitude"
            },
            "code": "\nvoid updateAltitudeData_08004a30(void)\n\n{\n  undefined *joystickPtr;\n  undefined *altFlagPtr;\n  undefined *pidAltitudePtr;\n  undefined4 filteredAltitude;\n  \n  pidAltitudePtr = PTR_pid_altitude_08004a7c;\n  altFlagPtr = PTR_ALT_FLAG_08004a78;\n  joystickPtr = PTR_joystick_08004a74;\n  if (PTR_joystick_08004a74[1] != '\\0') {\n    if (*PTR_ALT_FLAG_08004a78 == '\\0') {\n      MS5611_GetFilteredAltitude();\n      filteredAltitude = __aeabi_fmul();\n      *(undefined4 *)(pidAltitudePtr + 0x1c) = filteredAltitude;\n      *altFlagPtr = 1;\n    }\n    else {\n      MS5611_GetFilteredAltitude();\n      filteredAltitude = __aeabi_fmul();\n      *(undefined4 *)(pidAltitudePtr + 0x30) = filteredAltitude;\n    }\n  }\n  if (joystickPtr[1] == '\\0') {\n    if (*PTR_ALT_FLAG_08004a78 != '\\0') {\n      *PTR_ALT_FLAG_08004a78 = 0;\n    }\n    *(undefined4 *)(PTR_pid_altitude_08004a7c + 0x48) = *(undefined4 *)(joystickPtr + 4);\n  }\n  return;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "MS5611_GetFilteredAltitude"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004a30",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "update_altitude_data_08004a30"
        },
        "FUN_08004c70": {
            "renaming": {
                "FUN_08004c70": "uart_receive_interrupt_08004c70"
            },
            "code": "\nvoid uartReceiveInterrupt_08004c70(void)\n\n{\n  serialFlush();\n  HAL_UART_Receive_IT((UART_HandleTypeDef *)PTR_huart1_08004c88,PTR_rx_buffer_08004c84,1);\n  return;\n}\n\n",
            "called": [
                "serialFlush",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c70",
            "calling": [
                "setup"
            ],
            "imported": false,
            "current_name": "uart_receive_interrupt_08004c70"
        },
        "FUN_08000904": {
            "renaming": {
                "FUN_08000904": "compare_four_parameters_08000904",
                "param_1": "valueA1",
                "param_2": "valueA2",
                "param_3": "valueB1",
                "param_4": "valueB2",
                "uVar1": "xor_result",
                "bVar2": "comparison_flag",
                "bVar3": "conditional_flag"
            },
            "code": "\nuint compare_four_parameters_08000904(uint valueA1,uint valueA2,uint valueB1,uint valueB2)\n\n{\n  uint xor_result;\n  bool comparison_flag;\n  bool conditional_flag;\n  \n  if (((int)(valueA2 << 1) >> 0x15 == -1 || (int)(valueB2 << 1) >> 0x15 == -1) &&\n     ((((int)(valueA2 << 1) >> 0x15 == -1 && ((valueA1 | valueA2 << 0xc) != 0)) ||\n      (((int)(valueB2 << 1) >> 0x15 == -1 && ((valueB1 | valueB2 << 0xc) != 0)))))) {\n    return 1;\n  }\n  comparison_flag = (valueA1 | valueA2 << 1) == 0;\n  if (comparison_flag) {\n    comparison_flag = (valueB1 | valueB2 << 1) == 0;\n  }\n  if (!comparison_flag) {\n    comparison_flag = valueA2 == valueB2;\n  }\n  if (comparison_flag) {\n    comparison_flag = valueA1 == valueB1;\n  }\n  if (!comparison_flag) {\n    xor_result = valueA2 ^ valueB2;\n    comparison_flag = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      comparison_flag = valueA2 == valueB2;\n    }\n    conditional_flag = -1 < (int)xor_result && valueB2 <= valueA2;\n    if (comparison_flag) {\n      conditional_flag = valueB1 <= valueA1;\n    }\n    valueB2 = (int)valueB2 >> 0x1f;\n    if (!conditional_flag) {\n      valueB2 = ~valueB2;\n    }\n    return valueB2 | 1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000904",
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "imported": false,
            "current_name": "compare_four_parameters_08000904"
        },
        "FUN_0800299a": {
            "renaming": {
                "FUN_0800299a": "uart_process_interrupt_0800299a",
                "huart": "uart_handle",
                "uVar1": "cr1",
                "uVar2": "tx_xfer_count",
                "uVar3": "status_register",
                "puVar4": "tx_buffer_ptr",
                "HVar5": "uart_state",
                "pUVar6": "usart_instance",
                "uVar7": "error_code",
                "uVar8": "cr3_and_1",
                "bVar9": "parity_error"
            },
            "code": "\nvoid UART_ProcessInterrupt_0800299a(UART_HandleTypeDef *uart_handle)\n\n{\n  uint cr1;\n  uint16_t tx_xfer_count;\n  uint status_register;\n  ushort *tx_buffer_ptr;\n  HAL_UART_StateTypeDef uart_state;\n  USART_TypeDef *usart_instance;\n  uint32_t error_code;\n  uint cr3_and_1;\n  bool parity_error;\n  \n  usart_instance = uart_handle->Instance;\n  status_register = usart_instance->SR;\n  cr1 = usart_instance->CR1;\n  if ((status_register & 0xf) == 0) {\n    if (((int)(status_register << 0x1a) < 0) && ((int)(cr1 << 0x1a) < 0)) {\n      UART_Receive_IT(uart_handle);\n      return;\n    }\n  }\n  else {\n    cr3_and_1 = usart_instance->CR3 & 1;\n    if ((cr3_and_1 != 0) || ((cr1 & 0x120) != 0)) {\n      error_code = status_register << 0x1f;\n      if ((int)error_code < 0) {\n        parity_error = (int)(cr1 << 0x17) < 0;\n        if (parity_error) {\n          error_code = uart_handle->ErrorCode | 1;\n        }\n        if (parity_error) {\n          uart_handle->ErrorCode = error_code;\n        }\n      }\n      if (((int)(status_register << 0x1d) < 0) && (cr3_and_1 != 0)) {\n        uart_handle->ErrorCode = uart_handle->ErrorCode | 2;\n      }\n      if (((int)(status_register << 0x1e) < 0) && (cr3_and_1 != 0)) {\n        uart_handle->ErrorCode = uart_handle->ErrorCode | 4;\n      }\n      if (((int)(status_register << 0x1c) < 0) && (cr3_and_1 != 0)) {\n        uart_handle->ErrorCode = uart_handle->ErrorCode | 8;\n      }\n      if (uart_handle->ErrorCode == 0) {\n        return;\n      }\n      if (((int)(status_register << 0x1a) < 0) && ((int)(cr1 << 0x1a) < 0)) {\n        UART_Receive_IT(uart_handle);\n      }\n      usart_instance = uart_handle->Instance;\n      if ((-1 < (int)(uart_handle->ErrorCode << 0x1c)) && ((usart_instance->CR3 & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(uart_handle);\n        uart_handle->ErrorCode = 0;\n        return;\n      }\n      usart_instance->CR1 = usart_instance->CR1 & 0xfffffedf;\n      usart_instance->CR3 = usart_instance->CR3 & 0xfffffffe;\n      uart_handle->State = HAL_UART_STATE_READY;\n      HAL_UART_ErrorCallback(uart_handle);\n      return;\n    }\n  }\n  if (((int)(status_register << 0x18) < 0) && ((int)(cr1 << 0x18) < 0)) {\n    if ((uart_handle->State & 0xdf) == 0x12) {\n      tx_buffer_ptr = (ushort *)uart_handle->pTxBuffPtr;\n      if ((uart_handle->Init).WordLength == 0x1000) {\n        usart_instance->DR = *tx_buffer_ptr & 0x1ff;\n        if ((uart_handle->Init).Parity == 0) {\n          tx_buffer_ptr = tx_buffer_ptr + 1;\n        }\n        else {\n          tx_buffer_ptr = (ushort *)((int)tx_buffer_ptr + 1);\n        }\n        uart_handle->pTxBuffPtr = (uint8_t *)tx_buffer_ptr;\n      }\n      else {\n        uart_handle->pTxBuffPtr = (byte *)((int)tx_buffer_ptr + 1);\n        usart_instance->DR = (uint)*(byte *)tx_buffer_ptr;\n      }\n      tx_xfer_count = uart_handle->TxXferCount - 1;\n      uart_handle->TxXferCount = tx_xfer_count;\n      if (tx_xfer_count == 0) {\n        usart_instance->CR1 = usart_instance->CR1 & 0xffffff7f;\n        usart_instance->CR1 = usart_instance->CR1 | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(status_register << 0x19) < 0) && ((int)(cr1 << 0x19) < 0)) {\n    usart_instance->CR1 = usart_instance->CR1 & 0xffffffbf;\n    if (uart_handle->State == HAL_UART_STATE_BUSY_TX_RX) {\n      uart_state = HAL_UART_STATE_BUSY_RX;\n    }\n    else {\n      uart_state = HAL_UART_STATE_READY;\n    }\n    uart_handle->State = uart_state;\n    HAL_UART_TxCpltCallback(uart_handle);\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_UART_ErrorCallback",
                "HAL_UART_TxCpltCallback",
                "UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800299a",
            "calling": [
                "USART1_IRQHandler"
            ],
            "imported": false,
            "current_name": "uart_process_interrupt_0800299a"
        },
        "FUN_080052e4": {
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input_data",
                "param_2": "data_array",
                "param_3": "output_data",
                "param_4": "additional_data",
                "param_5": "callback_function",
                "iVar1": "callback_result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "bVar4": "condition"
            },
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input_data,uint *data_array,uint *output_data,undefined4 additional_data,code *callback_function)\n\n{\n  int callback_result;\n  uint temp_var1;\n  uint temp_var2;\n  bool condition;\n  \n  temp_var1 = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    temp_var1 = data_array[2];\n  }\n  *output_data = temp_var1;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_data = temp_var1 + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_data = *output_data + 2;\n  }\n  temp_var1 = *data_array & 6;\n  if (temp_var1 == 0) {\n    for (; (int)temp_var1 < (int)(data_array[3] - *output_data); temp_var1 = temp_var1 + 1) {\n      callback_result = (*callback_function)(input_data,additional_data,(int)data_array + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  temp_var1 = (uint)*(byte *)((int)data_array + 0x43);\n  if (temp_var1 != 0) {\n    temp_var1 = 1;\n  }\n  temp_var2 = temp_var1;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + temp_var1 + 0x43) = 0x30;\n    temp_var2 = temp_var1 + 2;\n    *(undefined *)((int)data_array + temp_var1 + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  callback_result = (*callback_function)(input_data,additional_data,(int)data_array + 0x43,temp_var2);\n  if (callback_result != -1) {\n    temp_var1 = data_array[3];\n    condition = (*data_array & 6) != 4;\n    if (condition) {\n      temp_var1 = 0;\n    }\n    temp_var2 = 0;\n    if (!condition) {\n      temp_var1 = temp_var1 - *output_data;\n    }\n    if (!condition) {\n      temp_var1 = temp_var1 & ~((int)temp_var1 >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      temp_var1 = temp_var1 + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (temp_var1 == temp_var2) {\n        return 0;\n      }\n      callback_result = (*callback_function)(input_data,additional_data,(int)data_array + 0x1a,1);\n      if (callback_result == -1) break;\n      temp_var2 = temp_var2 + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052e4",
            "calling": [
                "_printf_i"
            ],
            "imported": false,
            "current_name": "process_data_080052e4"
        },
        "FUN_08000f94": {
            "renaming": {
                "FUN_08000f94": "calculate_result_08000f94",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "comparison_result",
                "bVar5": "is_zero"
            },
            "code": "\nuint calculate_result_08000f94(uint input_1,uint input_2)\n\n{\n  bool comparison_result;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  comparison_result = -1 < (int)combined_inputs;\n  if (comparison_result) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((comparison_result && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!comparison_result || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f94",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f94"
        },
        "FUN_080014e2": {
            "renaming": {
                "FUN_080014e2": "check_i2_c_status_080014e2",
                "hi2c": "i2c_handle",
                "Timeout": "timeout",
                "HVar1": "ack_status",
                "uVar2": "start_tick",
                "uVar3": "current_tick"
            },
            "code": "\nHAL_StatusTypeDef CheckI2CStatus_080014e2(I2C_HandleTypeDef *i2c_handle,uint32_t timeout)\n\n{\n  HAL_StatusTypeDef ack_status;\n  uint32_t start_tick;\n  uint32_t current_tick;\n  \n  start_tick = HAL_GetTick();\n  while( true ) {\n    if ((int)(i2c_handle->Instance->SR1 << 0x18) < 0) {\n      return HAL_OK;\n    }\n    ack_status = I2C_IsAcknowledgeFailed(i2c_handle);\n    if (ack_status != HAL_OK) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)))) {\n      i2c_handle->ErrorCode = i2c_handle->ErrorCode | 0x20;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080014e2",
            "calling": [
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "imported": false,
            "current_name": "check_i2_c_status_080014e2"
        },
        "FUN_0800142e": {
            "renaming": {
                "FUN_0800142e": "toggle_gpio_pin_0800142e",
                "GPIOx": "GPIO_port",
                "GPIO_Pin": "GPIO_pin"
            },
            "code": "\nvoid toggle_GPIO_pin_0800142e(GPIO_TypeDef *GPIO_port,uint16_t GPIO_pin)\n\n{\n  GPIO_port->ODR = (uint)GPIO_pin ^ GPIO_port->ODR;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800142e",
            "calling": [
                "_Error_Handler"
            ],
            "imported": false,
            "current_name": "toggle_gpio_pin_0800142e"
        },
        "FUN_08004d8c": {
            "renaming": {
                "FUN_08004d8c": "enable_pwm_timer_08004d8c",
                "htim_pwm": "pwm_timer_handle",
                "pTVar1": "timer_instance",
                "tmpreg": "unused_tmpreg",
                "tmpreg_1": "unused_tmpreg_1",
                "tmpreg_2": "unused_tmpreg_2",
                "tmpreg_3": "unused_tmpreg_3"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid EnablePwmTimer_08004d8c(TIM_HandleTypeDef *pwm_timer_handle)\n\n{\n  TIM_TypeDef *timer_instance;\n  uint32_t unused_tmpreg;\n  uint32_t unused_tmpreg_1;\n  uint32_t unused_tmpreg_2;\n  uint32_t unused_tmpreg_3;\n  \n  timer_instance = pwm_timer_handle->Instance;\n  if (timer_instance == DAT_08004e04) {\n    *(uint *)(DAT_08004e08 + 0x18) = *(uint *)(DAT_08004e08 + 0x18) | 0x800;\n  }\n  else if (timer_instance == (TIM_TypeDef *)0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (timer_instance == DAT_08004e0c) {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | 2;\n  }\n  else if (timer_instance == DAT_08004e10) {\n    *(uint *)(DAT_08004e08 + 0x1c) = *(uint *)(DAT_08004e08 + 0x1c) | 4;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d8c",
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "imported": false,
            "current_name": "enable_pwm_timer_08004d8c"
        },
        "FUN_080009b4": {
            "renaming": {
                "FUN_080009b4": "compare_doubles_080009b4",
                "in_CY": "comparisonResult"
            },
            "code": "\nbool compareDoubles_080009b4(void)\n\n{\n  char comparisonResult;\n  \n  __aeabi_cdcmpeq();\n  return comparisonResult == '\\0';\n}\n\n",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009b4",
            "calling": [
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "compare_doubles_080009b4"
        },
        "FUN_08003068": {
            "renaming": {
                "FUN_08003068": "return_float_value_08003068",
                "in_s0": "input_float"
            },
            "code": "\nfloat return_float_value_08003068(void)\n\n{\n  float input_float;\n  \n  return input_float;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003068",
            "calling": [
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "return_float_value_08003068"
        },
        "FUN_08000f8c": {
            "renaming": {
                "FUN_08000f8c": "calculate_result_08000f8c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "temp_result",
                "bVar1": "is_greater",
                "bVar5": "is_zero"
            },
            "code": "\nuint calculate_result_08000f8c(uint input1,uint input2)\n\n{\n  bool is_greater;\n  uint double_input1;\n  uint double_input2;\n  uint temp_result;\n  bool is_zero;\n  \n  double_input1 = input1 * 2;\n  double_input2 = input2 * 2;\n  if (((int)double_input1 >> 0x18 == -1 || (int)double_input2 >> 0x18 == -1) &&\n     ((((int)double_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)double_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 0xffffffff;\n  }\n  temp_result = double_input1 | input2 & 0x7fffffff;\n  is_zero = temp_result == 0;\n  if (!is_zero) {\n    temp_result = input1 ^ input2;\n    is_zero = temp_result == 0;\n  }\n  is_greater = -1 < (int)temp_result;\n  if (is_greater) {\n    input1 = double_input1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_greater && double_input2 <= double_input1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_greater || double_input2 > double_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f8c",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_08000f8c"
        },
        "FUN_08000474": {
            "renaming": {
                "FUN_08000474": "calculate_double_representation_08000474",
                "param_1": "input1",
                "param_2": "input2",
                "uVar8": "input2_sign",
                "uVar3": "adjusted_input2",
                "iVar7": "exp_offset",
                "uVar9": "adjusted_input1",
                "uVar4": "shift_amount",
                "bVar11": "carry",
                "bVar1": "input1_lowest_bit",
                "bVar10": "input1_sign",
                "uVar2": "temp_input1",
                "uVar6": "leading_zeroes_diff",
                "bVar12": "borrow",
                "iVar5": "leading_zeroes_count"
            },
            "code": "\nulonglong calculate_double_representation_08000474(uint input1,uint input2)\n\n{\n  byte input1_lowest_bit;\n  uint temp_input1;\n  uint adjusted_input2;\n  uint shift_amount;\n  int leading_zeroes_count;\n  uint leading_zeroes_diff;\n  int exp_offset;\n  uint input2_sign;\n  uint adjusted_input1;\n  bool input1_sign;\n  bool carry;\n  bool borrow;\n  \n  if ((input1 | input2) == 0) {\n    return CONCAT44(input2,input1);\n  }\n  input2_sign = input2 & 0x80000000;\n  adjusted_input2 = input2;\n  if ((int)input2_sign < 0) {\n    carry = input1 != 0;\n    input1 = -input1;\n    adjusted_input2 = -input2 - (uint)carry;\n  }\n  exp_offset = 0x432;\n  adjusted_input1 = adjusted_input2 >> 0x16;\n  if (adjusted_input1 != 0) {\n    exp_offset = 3;\n    if (adjusted_input2 >> 0x19 != 0) {\n      exp_offset = 6;\n    }\n    if (adjusted_input2 >> 0x1c != 0) {\n      exp_offset = exp_offset + 3;\n    }\n    shift_amount = exp_offset - ((int)adjusted_input2 >> 0x1f);\n    adjusted_input1 = input1 << (0x20 - shift_amount & 0xff);\n    input1 = input1 >> (shift_amount & 0xff) | adjusted_input2 << (0x20 - shift_amount & 0xff);\n    adjusted_input2 = adjusted_input2 >> (shift_amount & 0xff);\n    exp_offset = shift_amount + 0x432;\n  }\n  if (0xfffff < adjusted_input2) {\n    if (0x1fffff < adjusted_input2) {\n      shift_amount = adjusted_input2 & 1;\n      adjusted_input2 = adjusted_input2 >> 1;\n      input1_lowest_bit = (byte)input1;\n      input1 = (uint)(shift_amount != 0) << 0x1f | input1 >> 1;\n      adjusted_input1 = (uint)(input1_lowest_bit & 1) << 0x1f | adjusted_input1 >> 1;\n      exp_offset = exp_offset + 1;\n      if (0xffbfffff < (uint)(exp_offset * 0x200000)) {\n        return (ulonglong)(input2_sign | 0x7ff00000) << 0x20;\n      }\n    }\nLAB_08000278:\n    carry = 0x7fffffff < adjusted_input1;\n    if (adjusted_input1 == 0x80000000) {\n      carry = (input1 & 1) != 0;\n    }\n    return CONCAT44(adjusted_input2 + exp_offset * 0x100000 + (uint)CARRY4(input1,(uint)carry) | input2_sign,\n                    input1 + carry);\n  }\n  input1_sign = (adjusted_input1 & 0x80000000) != 0;\n  adjusted_input1 = adjusted_input1 << 1;\n  shift_amount = input1 * 2;\n  carry = CARRY4(input1,input1);\n  input1 = input1 * 2 + (uint)input1_sign;\n  adjusted_input2 = adjusted_input2 * 2 + (uint)(carry || CARRY4(shift_amount,(uint)input1_sign));\n  exp_offset = exp_offset + -1;\n  if ((adjusted_input2 & 0x100000) != 0) goto LAB_08000278;\n  temp_input1 = input1;\n  shift_amount = adjusted_input2;\n  if (adjusted_input2 == 0) {\n    temp_input1 = 0;\n    shift_amount = input1;\n  }\n  leading_zeroes_count = count_leading_zeroes(shift_amount);\n  if (adjusted_input2 == 0) {\n    leading_zeroes_count = leading_zeroes_count + 0x20;\n  }\n  leading_zeroes_diff = leading_zeroes_count - 0xb;\n  borrow = SBORROW4(leading_zeroes_diff,0x20);\n  adjusted_input2 = leading_zeroes_count - 0x2b;\n  carry = (int)adjusted_input2 < 0;\n  input1_sign = adjusted_input2 == 0;\n  if ((int)leading_zeroes_diff < 0x20) {\n    borrow = SCARRY4(adjusted_input2,0xc);\n    leading_zeroes_count = leading_zeroes_count + -0x1f;\n    carry = leading_zeroes_count < 0;\n    input1_sign = leading_zeroes_count == 0;\n    adjusted_input2 = leading_zeroes_diff;\n    if (!input1_sign && carry == borrow) {\n      temp_input1 = shift_amount << (leading_zeroes_diff & 0xff);\n      shift_amount = shift_amount >> (0xcU - leading_zeroes_count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (input1_sign || carry != borrow) {\n    adjusted_input1 = 0x20 - adjusted_input2;\n  }\n  shift_amount = shift_amount << (adjusted_input2 & 0xff);\n  if (input1_sign || carry != borrow) {\n    shift_amount = shift_amount | temp_input1 >> (adjusted_input1 & 0xff);\n  }\n  if (input1_sign || carry != borrow) {\n    temp_input1 = temp_input1 << (adjusted_input2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)leading_zeroes_diff <= exp_offset) {\n    return CONCAT44(shift_amount + (exp_offset - leading_zeroes_diff) * 0x100000 | input2_sign,temp_input1);\n  }\n  adjusted_input2 = ~(exp_offset - leading_zeroes_diff);\n  if (0x1e < (int)adjusted_input2) {\n    return CONCAT44(input2,shift_amount >> (adjusted_input2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  exp_offset = adjusted_input2 - 0x13;\n  if (exp_offset == 0 || exp_offset < 0 != SCARRY4(adjusted_input2 - 0x1f,0xc)) {\n    adjusted_input2 = adjusted_input2 + 1;\n    return CONCAT44(input2_sign | shift_amount >> (adjusted_input2 & 0xff),\n                    temp_input1 >> (adjusted_input2 & 0xff) | shift_amount << (0x20 - adjusted_input2 & 0xff));\n  }\n  return CONCAT44(input2,temp_input1 >> (0x20 - (0xcU - exp_offset) & 0xff) | shift_amount << (0xcU - exp_offset & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000474",
            "calling": [],
            "imported": false,
            "current_name": "calculate_double_representation_08000474"
        },
        "FUN_08000110": {
            "renaming": {
                "FUN_08000110": "initialize_if_needed_08000110",
                "param_1": "inputPointer"
            },
            "code": "\nundefined * initializeIfNeeded_08000110(undefined *inputPointer)\n\n{\n  if (*PTR_completed_8672_08000128 == '\\0') {\n    if (DAT_0800012c != 0) {\n      inputPointer = PTR__init_08000130;\n    }\n    *PTR_completed_8672_08000128 = 1;\n  }\n  return inputPointer;\n}\n\n",
            "called": [
                "_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000110",
            "calling": [],
            "imported": false,
            "current_name": "initialize_if_needed_08000110"
        },
        "FUN_0800709e": {
            "renaming": {
                "FUN_0800709e": "handle_exception_0800709e",
                "__exc": "exceptionPtr"
            },
            "code": "\nint handleException_0800709e(exception *exceptionPtr)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800709e",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "handle_exception_0800709e"
        },
        "FUN_08002ec0": {
            "renaming": {
                "FUN_08002ec0": "apply_low_pass_filter_08002ec0",
                "in_s0": "inputSignal",
                "fVar1": "filteredSignal"
            },
            "code": "\nfloat applyLowPassFilter_08002ec0(void)\n\n{\n  float inputSignal;\n  float filteredSignal;\n  \n  filteredSignal = lowPassFilter((LPF *)PTR_lpf_pitch_08002ed0,inputSignal);\n  return filteredSignal;\n}\n\n",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ec0",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "apply_low_pass_filter_08002ec0"
        },
        "FUN_08006c0c": {
            "renaming": {
                "FUN_08006c0c": "calculate_double_precision_result_08006c0c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "iVar3": "int_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "iVar7": "int_var_7",
                "uVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "iVar10": "int_var_10",
                "uVar11": "temp_var_11",
                "uVar12": "temp_var_12",
                "uVar13": "temp_var_13"
            },
            "code": "\nundefined8 calculate_double_precision_result_08006c0c(uint input_1,uint input_2)\n\n{\n  undefined4 temp_var_1;\n  uint temp_var_2;\n  int int_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  int int_var_7;\n  uint temp_var_8;\n  uint temp_var_9;\n  int int_var_10;\n  uint temp_var_11;\n  uint temp_var_12;\n  undefined8 temp_var_13;\n  \n  if ((DAT_08006d60 & ~input_2) == 0) {\n    temp_var_13 = __muldf3(input_1,input_2,input_1,input_2);\n    temp_var_13 = __aeabi_dadd(input_1,input_2,(int)temp_var_13,(int)((ulonglong)temp_var_13 >> 0x20));\n    return temp_var_13;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != 0) {\n      temp_var_13 = __subdf3(input_1,input_2,input_1,input_2);\n      temp_var_1 = (undefined4)((ulonglong)temp_var_13 >> 0x20);\n      temp_var_13 = __divdf3((int)temp_var_13,temp_var_1,(int)temp_var_13,temp_var_1);\n      return temp_var_13;\n    }\n  }\n  int_var_3 = (int)input_2 >> 0x14;\n  if (int_var_3 == 0) {\n    while (input_2 == 0) {\n      int_var_3 = int_var_3 + -0x15;\n      input_2 = input_1 >> 0xb;\n      input_1 = input_1 << 0x15;\n    }\n    temp_var_2 = 0;\n    for (; -1 < (int)(input_2 << 0xb); input_2 = input_2 << 1) {\n      temp_var_2 = temp_var_2 + 1;\n    }\n    int_var_3 = int_var_3 - (temp_var_2 - 1);\n    input_2 = input_2 | input_1 >> (0x20 - temp_var_2 & 0xff);\n    input_1 = input_1 << (temp_var_2 & 0xff);\n  }\n  int_var_7 = 0;\n  temp_var_2 = input_2 & 0xfffff | 0x100000;\n  if ((int_var_3 + -0x3ff) * -0x80000000 < 0) {\n    temp_var_2 = temp_var_2 * 2 - ((int)input_1 >> 0x1f);\n    input_1 = input_1 << 1;\n  }\n  temp_var_2 = temp_var_2 * 2 - ((int)input_1 >> 0x1f);\n  temp_var_4 = 0x16;\n  temp_var_5 = 0;\n  temp_var_8 = 0x200000;\n  input_1 = input_1 << 1;\n  do {\n    int_var_10 = temp_var_5 + temp_var_8;\n    if (int_var_10 <= (int)temp_var_2) {\n      temp_var_2 = temp_var_2 - int_var_10;\n      temp_var_5 = int_var_10 + temp_var_8;\n      int_var_7 = int_var_7 + temp_var_8;\n    }\n    temp_var_4 = temp_var_4 - 1;\n    temp_var_2 = temp_var_2 * 2 - ((int)input_1 >> 0x1f);\n    temp_var_8 = temp_var_8 >> 1;\n    input_1 = input_1 << 1;\n  } while (temp_var_4 != 0);\n  temp_var_12 = 0x20;\n  temp_var_9 = 0x80000000;\n  temp_var_8 = temp_var_4;\n  do {\n    temp_var_11 = temp_var_9 + temp_var_8;\n    temp_var_6 = temp_var_5;\n    if (((int)temp_var_5 < (int)temp_var_2) || ((temp_var_2 == temp_var_5 && (temp_var_11 <= input_1)))) {\n      temp_var_8 = temp_var_11 + temp_var_9;\n      if (((int)temp_var_11 < 0) && (-1 < (int)temp_var_8)) {\n        temp_var_6 = temp_var_5 + 1;\n      }\n      temp_var_2 = temp_var_2 - temp_var_5;\n      if (input_1 < temp_var_11) {\n        temp_var_2 = temp_var_2 - 1;\n      }\n      input_1 = input_1 - temp_var_11;\n      temp_var_4 = temp_var_4 + temp_var_9;\n    }\n    temp_var_2 = temp_var_2 * 2 - ((int)input_1 >> 0x1f);\n    temp_var_12 = temp_var_12 - 1;\n    input_1 = input_1 << 1;\n    temp_var_9 = temp_var_9 >> 1;\n    temp_var_5 = temp_var_6;\n  } while (temp_var_12 != 0);\n  if ((input_1 | temp_var_2) != 0) {\n    if (temp_var_4 == 0xffffffff) {\n      int_var_7 = int_var_7 + 1;\n      temp_var_4 = temp_var_12;\n    }\n    else {\n      temp_var_4 = temp_var_4 + 1 & 0xfffffffe;\n    }\n  }\n  temp_var_4 = temp_var_4 >> 1;\n  if (int_var_7 << 0x1f < 0) {\n    temp_var_4 = temp_var_4 | 0x80000000;\n  }\n  return CONCAT44((int_var_7 >> 1) + 0x3fe00000 + (int_var_3 + -0x3ff >> 1) * 0x100000,temp_var_4);\n}\n\n",
            "called": [
                "__divdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c0c",
            "calling": [
                "sqrt",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_double_precision_result_08006c0c"
        },
        "FUN_0800426c": {
            "renaming": {
                "FUN_0800426c": "update_motor_speed_0800426c",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "m4": "motor4Speed",
                "m3": "motor3Speed",
                "m2": "motor2Speed",
                "m1": "motor1Speed"
            },
            "code": "\nvoid UpdateMotorSpeed_0800426c(float throttle,float pitch,float roll,float yaw)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  int motor4Speed;\n  int motor3Speed;\n  int motor2Speed;\n  int motor1Speed;\n  \n  tempVar1 = __aeabi_fsub();\n  tempVar2 = __addsf3();\n  __aeabi_fsub(tempVar1);\n  tempVar3 = __addsf3();\n  __aeabi_fsub(tempVar3,DAT_080042fc);\n  motor4Speed = __aeabi_f2iz();\n  __aeabi_fsub(tempVar2);\n  tempVar2 = __aeabi_fsub();\n  __aeabi_fsub(tempVar2,DAT_080042fc);\n  motor3Speed = __aeabi_f2iz();\n  __addsf3(tempVar1);\n  tempVar1 = __aeabi_fsub();\n  __aeabi_fsub(tempVar1,DAT_080042fc);\n  motor2Speed = __aeabi_f2iz();\n  __addsf3();\n  tempVar1 = __addsf3();\n  __aeabi_fsub(tempVar1,DAT_080042fc);\n  motor1Speed = __aeabi_f2iz();\n  Motor_SetSpeed(motor1Speed,motor2Speed,motor3Speed,motor4Speed);\n  return;\n}\n\n",
            "called": [
                "Motor_SetSpeed",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_f2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800426c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "update_motor_speed_0800426c"
        },
        "FUN_08002538": {
            "renaming": {
                "FUN_08002538": "enable_timer_channel_08002538",
                "htim": "timerHandle",
                "Channel": "channel",
                "pTVar1": "timerRegister",
                "pTVar2": "timerInstance"
            },
            "code": "\nHAL_StatusTypeDef EnableTimerChannel_08002538(TIM_HandleTypeDef *timerHandle,uint32_t channel)\n\n{\n  TIM_TypeDef *timerRegister;\n  TIM_TypeDef *timerInstance;\n  \n  TIM_CCxchannelCmd(timerHandle->Instance,channel,1);\n  timerInstance = timerHandle->Instance;\n  timerRegister = DAT_08002560;\n  if (timerInstance == DAT_08002560) {\n    timerRegister = (TIM_TypeDef *)(timerInstance->BDTR | 0x8000);\n  }\n  if (timerInstance == DAT_08002560) {\n    timerInstance->BDTR = (uint32_t)timerRegister;\n  }\n  timerInstance->CR1 = timerInstance->CR1 | 1;\n  return HAL_OK;\n}\n\n",
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002538",
            "calling": [
                "PWM_Init"
            ],
            "imported": false,
            "current_name": "enable_timer_channel_08002538"
        },
        "FUN_080040e8": {
            "renaming": {
                "FUN_080040e8": "read_i2c_data_080040e8",
                "device_add": "device_address",
                "register_add": "register_address",
                "byte_array": "buffer",
                "size": "buffer_size",
                "file": "source_file",
                "line": "line_number",
                "file_00": "file_ptr",
                "uVar1": "read_byte",
                "iVar2": "index",
                "puVar3": "buffer_ptr"
            },
            "code": "\nvoid read_i2c_data_080040e8(uint16_t device_address,uint16_t register_address,uint8_t *buffer,uint16_t buffer_size,\n                      char *source_file,int line_number)\n\n{\n  undefined *file_ptr;\n  uint8_t read_byte;\n  int index;\n  uint8_t *buffer_ptr;\n  \n  file_ptr = PTR_s____Src_i2c_c_08004118;\n  buffer_ptr = buffer + -1;\n  for (index = 0; index < (int)(uint)buffer_size; index = index + 1) {\n    read_byte = I2C_ReadByte(device_address,register_address + (short)index,file_ptr,0x4c);\n    buffer_ptr = buffer_ptr + 1;\n    *buffer_ptr = read_byte;\n  }\n  return;\n}\n\n",
            "called": [
                "I2C_ReadByte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040e8",
            "calling": [
                "AK8963_ReadData",
                "MS5611_Init",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "read_i2c_data_080040e8"
        },
        "FUN_08000c44": {
            "renaming": {
                "FUN_08000c44": "calculate_packed_value_08000c44",
                "param_1": "inputValue",
                "iVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "uVar3": "result",
                "iVar4": "baseValue",
                "uVar5": "tempValue"
            },
            "code": "\nuint calculatePackedValue_08000c44(uint inputValue)\n\n{\n  int leadingZeroes;\n  uint shiftAmount;\n  uint result;\n  int baseValue;\n  uint tempValue;\n  \n  result = inputValue & 0x80000000;\n  if ((int)result < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = count_leading_zeroes(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  baseValue = ((result | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroes) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    result = baseValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shiftAmount = inputValue << (leadingZeroes + 0x18U & 0xff);\n  result = baseValue + ((inputValue >> (0x20 - (leadingZeroes + 0x18U) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    result = result & ~(shiftAmount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c44",
            "calling": [
                "MS5611_Update",
                "AK8963_ReadData",
                "MPU9250_ReadGyroData",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData"
            ],
            "imported": false,
            "current_name": "calculate_packed_value_08000c44"
        },
        "FUN_08000a04": {
            "renaming": {
                "FUN_08000a04": "check_conditions_08000a04",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "\nundefined4 check_conditions_08000a04(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000a04",
            "calling": [
                "asin",
                "sqrt",
                "pow"
            ],
            "imported": false,
            "current_name": "check_conditions_08000a04"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "configure_uart_080025e8",
                "huart": "uart_handle",
                "uVar1": "pclk_freq",
                "uVar2": "temp_pclk_freq",
                "uVar3": "div_mantissa",
                "iVar4": "fractional_div",
                "uVar5": "baud_rate",
                "iVar6": "mantissa_correction",
                "pUVar7": "uart_instance"
            },
            "code": "\nvoid ConfigureUART_080025e8(UART_HandleTypeDef *uart_handle)\n\n{\n  uint32_t pclk_freq;\n  uint32_t temp_pclk_freq;\n  uint div_mantissa;\n  int fractional_div;\n  uint32_t baud_rate;\n  int mantissa_correction;\n  USART_TypeDef *uart_instance;\n  \n  uart_instance = uart_handle->Instance;\n  div_mantissa = (uart_handle->Init).Parity;\n  uart_instance->CR2 = uart_instance->CR2 & 0xffffcfff | (uart_handle->Init).StopBits;\n  uart_instance->CR1 = (uart_handle->Init).WordLength | div_mantissa | (uart_handle->Init).Mode | uart_instance->CR1 & 0xffffe9f3;\n  uart_instance->CR3 = uart_instance->CR3 & 0xfffffcff | (uart_handle->Init).HwFlowCtl;\n  if (uart_instance == DAT_08002720) {\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n    fractional_div = (int)(((ulonglong)(pclk_freq * 0x19) / (ulonglong)((uart_handle->Init).BaudRate << 2)) / 100);\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n    baud_rate = (uart_handle->Init).BaudRate;\n    temp_pclk_freq = HAL_RCC_GetPCLK2Freq();\n    mantissa_correction = (pclk_freq * 0x19) / (baud_rate << 2) +\n            (int)(((ulonglong)(temp_pclk_freq * 0x19) / (ulonglong)((uart_handle->Init).BaudRate << 2)) / 100) *\n            -100;\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n    div_mantissa = (pclk_freq * 0x19) / ((uart_handle->Init).BaudRate << 2);\n    pclk_freq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n    fractional_div = (int)(((ulonglong)(pclk_freq * 0x19) / (ulonglong)((uart_handle->Init).BaudRate << 2)) / 100);\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n    baud_rate = (uart_handle->Init).BaudRate;\n    temp_pclk_freq = HAL_RCC_GetPCLK1Freq();\n    mantissa_correction = (pclk_freq * 0x19) / (baud_rate << 2) +\n            (int)(((ulonglong)(temp_pclk_freq * 0x19) / (ulonglong)((uart_handle->Init).BaudRate << 2)) / 100) *\n            -100;\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n    div_mantissa = (pclk_freq * 0x19) / ((uart_handle->Init).BaudRate << 2);\n    pclk_freq = HAL_RCC_GetPCLK1Freq();\n  }\n  uart_instance->BRR = (((div_mantissa + (int)(((ulonglong)(pclk_freq * 0x19) /\n                                 (ulonglong)((uart_handle->Init).BaudRate << 2)) / 100) * -100) * 0x10 +\n                 0x32) / 100 & 0xf | (mantissa_correction * 0x10 + 0x32U) / 100 & 0xf0) + fractional_div * 0x10;\n  return;\n}\n\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "configure_uart_080025e8"
        },
        "FUN_08003078": {
            "renaming": {
                "FUN_08003078": "update_sensor_data_08003078",
                "puVar1": "tempVar1",
                "bVar2": "tempByte",
                "lVar3": "longTempVar",
                "uVar4": "tempVar4",
                "puVar5": "tempReadyPtr",
                "puVar6": "pressureReadyPtr",
                "puVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "floatVar10",
                "uVar11": "floatVar11",
                "uVar12": "floatVar12",
                "uVar13": "currentTime",
                "extraout_r1": "extraOutput1",
                "uVar14": "tempVar14",
                "unaff_r4": "unaffectedVar4",
                "uVar15": "tempVar15",
                "uVar16": "tempVar16",
                "uVar17": "tempVar17",
                "puVar18": "tempVar18",
                "unaff_r5": "unaffectedVar5",
                "unaff_r6": "unaffectedVar6",
                "unaff_r7": "unaffectedVar7",
                "iVar19": "intVar19",
                "iVar20": "intVar20",
                "iVar21": "intVar21",
                "bVar22": "boolVar22",
                "uVar23": "doubleVar23"
            },
            "code": "\nvoid updateSensorData_08003078(void)\n\n{\n  undefined4 *tempVar1;\n  byte tempByte;\n  longlong longTempVar;\n  uint tempVar4;\n  undefined *tempReadyPtr;\n  undefined *pressureReadyPtr;\n  undefined *tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  undefined4 floatVar10;\n  undefined4 floatVar11;\n  undefined4 floatVar12;\n  uint32_t currentTime;\n  undefined4 extraOutput1;\n  uint tempVar14;\n  undefined4 unaffectedVar4;\n  uint tempVar15;\n  uint tempVar16;\n  uint tempVar17;\n  undefined4 *tempVar18;\n  undefined4 unaffectedVar5;\n  undefined4 unaffectedVar6;\n  undefined4 unaffectedVar7;\n  int intVar19;\n  int intVar20;\n  int intVar21;\n  bool boolVar22;\n  undefined8 doubleVar23;\n  \n  pressureReadyPtr = PTR_PRESSURE_READY_08003254;\n  tempReadyPtr = PTR_TEMP_READY_08003250;\n  if ((*PTR_TEMP_READY_08003250 != '\\0') && (*PTR_PRESSURE_READY_08003254 != '\\0')) {\n    intVar21 = *(int *)PTR_MS5611_RawTemperature_0800325c +\n             (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 10) * -0x100;\n    tempVar14 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)intVar21) >> 0x17 |\n             (int)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 0xc) *\n                   (longlong)intVar21) >> 0x20) << 9;\n    tempVar15 = (uint)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                    (longlong)intVar21 >> 7);\n    tempVar16 = tempVar15 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 4) * 0x10000;\n    tempVar8 = (uint)((ulonglong)\n                   ((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                   (longlong)intVar21) >> 8);\n    intVar19 = tempVar14 + 2000;\n    tempVar9 = tempVar8 + (uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000;\n    boolVar22 = (int)tempVar14 < 0;\n    if (1999 < intVar19) {\n      tempVar14 = 0;\n    }\n    tempVar4 = tempVar14;\n    if (boolVar22 != SBORROW4(intVar19,2000)) {\n      intVar20 = tempVar14 * tempVar14 * 5;\n      tempVar14 = intVar20 >> 2;\n      tempVar4 = intVar20 >> 1;\n    }\n    tempVar17 = tempVar16 - tempVar4;\n    longTempVar = (ulonglong)(tempVar9 - tempVar14) * (ulonglong)*(uint *)PTR_MS5611_RawPressure_08003260;\n    intVar20 = *(uint *)PTR_MS5611_RawPressure_08003260 *\n             ((((int)((longlong)(int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 6) *\n                      (longlong)intVar21 >> 0x28) +\n               (uint)CARRY4(tempVar8,(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 2) * 0x8000))\n              - ((int)tempVar14 >> 0x1f)) - (uint)(tempVar9 < tempVar14)) + (int)((ulonglong)longTempVar >> 0x20);\n    tempVar8 = (uint)longTempVar >> 0x15 | intVar20 * 0x800;\n    floatVar10 = __floatsisf(tempVar8 - tempVar17 >> 0xf |\n                         (((intVar20 >> 0x15) -\n                          ((((int)((longlong)\n                                   (int)(uint)*(ushort *)(PTR_MS5611_Coefficients_08003258 + 8) *\n                                   (longlong)intVar21 >> 0x27) +\n                            (uint)CARRY4(tempVar15,(uint)*(ushort *)\n                                                       (PTR_MS5611_Coefficients_08003258 + 4) *\n                                                0x10000)) - ((int)tempVar4 >> 0x1f)) -\n                          (uint)(tempVar16 < tempVar4))) - (uint)(tempVar8 < tempVar17)) * 0x20000);\n    floatVar11 = __aeabi_fdiv(floatVar10,DAT_08003264);\n    *(undefined4 *)PTR_MS5611_CompensatedPressure_08003268 = floatVar11;\n    floatVar10 = __floatsisf(intVar19);\n    floatVar12 = __aeabi_fdiv(floatVar10,DAT_08003264);\n    floatVar10 = DAT_08003270;\n    *(undefined4 *)PTR_MS5611_CompensatedTemperature_0800326c = floatVar12;\n    __aeabi_fdiv(floatVar11,floatVar10);\n    floatVar10 = __aeabi_f2d();\n    pow((double)CONCAT44(unaffectedVar5,unaffectedVar4),(double)CONCAT44(unaffectedVar7,unaffectedVar6));\n    doubleVar23 = __subdf3(0,DAT_08003274,floatVar10,extraOutput1);\n    __muldf3((int)doubleVar23,(int)((ulonglong)doubleVar23 >> 0x20),DAT_08003248,DAT_0800324c);\n    floatVar10 = __truncdfsf2();\n    tempVar7 = PTR_alt_filter_08003278;\n    *(undefined4 *)PTR_MS5611_Altitude_0800327c = floatVar10;\n    floatVar11 = 0;\n    tempVar18 = (undefined4 *)tempVar7;\n    do {\n      tempVar1 = tempVar18 + 1;\n      *tempVar18 = *tempVar1;\n      floatVar11 = __addsf3(floatVar11);\n      tempVar18 = tempVar1;\n    } while ((undefined4 *)(tempVar7 + 0x4c) != tempVar1);\n    *(undefined4 *)(tempVar7 + 0x4c) = floatVar10;\n    floatVar10 = __addsf3(floatVar11,floatVar10);\n    floatVar10 = __aeabi_fdiv(floatVar10,DAT_08003280);\n    *(undefined4 *)PTR_MS5611_FilteredAltitude_08003284 = floatVar10;\n    intVar19 = __aeabi_f2iz();\n    tempVar7 = PTR_MS5611_OSR_0800328c;\n    *(int *)PTR_msp_txf_altitude_08003288 = intVar19 * 100;\n    tempByte = *tempVar7;\n    *tempReadyPtr = 0;\n    *pressureReadyPtr = 0;\n    I2C_WriteByte(0xee,tempByte + 0x50,'\\x01','\\0');\n    currentTime = millis();\n    *(uint32_t *)PTR_temp_time_08003290 = currentTime;\n  }\n  currentTime = millis();\n  pressureReadyPtr = PTR_pressure_time_08003294;\n  if (((10 < currentTime - *(int *)PTR_temp_time_08003290) && (*tempReadyPtr == '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    currentTime = MS5611_ReadADC();\n    tempVar7 = PTR_MS5611_RawTemperature_0800325c;\n    *tempReadyPtr = 1;\n    *(uint32_t *)tempVar7 = currentTime;\n    I2C_WriteByte(0xee,(byte)*PTR_MS5611_OSR_0800328c + 0x40,'\\x01','\\0');\n    currentTime = millis();\n    *(uint32_t *)pressureReadyPtr = currentTime;\n  }\n  currentTime = millis();\n  tempVar7 = PTR_PRESSURE_READY_08003254;\n  if (((10 < currentTime - *(int *)pressureReadyPtr) && (*tempReadyPtr != '\\0')) &&\n     (*PTR_PRESSURE_READY_08003254 == '\\0')) {\n    currentTime = MS5611_ReadADC();\n    *(uint32_t *)PTR_MS5611_RawPressure_08003260 = currentTime;\n    *tempVar7 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "__floatsisf",
                "__muldf3",
                "__addsf3",
                "millis",
                "__aeabi_fdiv",
                "__aeabi_f2d",
                "__truncdfsf2",
                "I2C_WriteByte",
                "__subdf3",
                "MS5611_ReadADC",
                "pow",
                "__aeabi_f2iz"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003078",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "update_sensor_data_08003078"
        },
        "FUN_080009c8": {
            "renaming": {
                "FUN_080009c8": "compare_and_return_bool_080009c8",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "code": "\nbool compare_and_return_bool_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080009c8",
            "calling": [
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "compare_and_return_bool_080009c8"
        },
        "FUN_08000f9c": {
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "value1",
                "param_2": "value2",
                "uVar2": "doubleValue1",
                "uVar3": "doubleValue2",
                "uVar4": "combinedValue",
                "bVar1": "condition1",
                "bVar5": "isZero"
            },
            "code": "\nuint calculateResult_08000f9c(uint value1,uint value2)\n\n{\n  bool condition1;\n  uint doubleValue1;\n  uint doubleValue2;\n  uint combinedValue;\n  bool isZero;\n  \n  doubleValue1 = value1 * 2;\n  doubleValue2 = value2 * 2;\n  if (((int)doubleValue1 >> 0x18 == -1 || (int)doubleValue2 >> 0x18 == -1) &&\n     ((((int)doubleValue1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) ||\n      (((int)doubleValue2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedValue = doubleValue1 | value2 & 0x7fffffff;\n  isZero = combinedValue == 0;\n  if (!isZero) {\n    combinedValue = value1 ^ value2;\n    isZero = combinedValue == 0;\n  }\n  condition1 = -1 < (int)combinedValue;\n  if (condition1) {\n    value1 = doubleValue1 + value2 * -2;\n    isZero = value1 == 0;\n  }\n  if ((condition1 && doubleValue2 <= doubleValue1) && !isZero) {\n    value1 = (int)value2 >> 0x1f;\n  }\n  if (!condition1 || doubleValue2 > doubleValue1) {\n    value1 = ~((int)value2 >> 0x1f);\n  }\n  if (!isZero) {\n    value1 = value1 | 1;\n  }\n  return value1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000f9c",
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "imported": false,
            "current_name": "calculate_result_08000f9c"
        },
        "FUN_08002ed4": {
            "renaming": {
                "FUN_08002ed4": "filter_roll_input_08002ed4",
                "in_s0": "inputSignal",
                "fVar1": "filteredSignal"
            },
            "code": "\nfloat filterRollInput_08002ed4(void)\n\n{\n  float inputSignal;\n  float filteredSignal;\n  \n  filteredSignal = lowPassFilter((LPF *)PTR_lpf_roll_08002ee4,inputSignal);\n  return filteredSignal;\n}\n\n",
            "called": [
                "lowPassFilter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ed4",
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "imported": false,
            "current_name": "filter_roll_input_08002ed4"
        },
        "FUN_08006228": {
            "renaming": {
                "FUN_08006228": "FUNC_08006228"
            },
            "code": "\nvoid FUNC_08006228(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint uVar1;\n  undefined4 extraout_r1;\n  uint extraout_r1_00;\n  undefined4 uVar2;\n  undefined4 extraout_r1_01;\n  undefined4 extraout_r1_02;\n  uint extraout_r1_03;\n  undefined4 extraout_r1_04;\n  undefined4 uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined4 uVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  uint uVar9;\n  undefined4 uVar10;\n  undefined4 uVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  longlong lVar16;\n  ulonglong uVar17;\n  undefined8 uVar18;\n  undefined4 uVar19;\n  undefined4 in_stack_ffffff94;\n  undefined4 local_68;\n  undefined4 local_64;\n  int local_54;\n  \n  uVar9 = param_4 & 0x7fffffff;\n  if ((uVar9 | param_3) == 0) {\n    return;\n  }\n  uVar7 = param_2 & 0x7fffffff;\n  if ((int)uVar7 <= (int)DAT_08006428) {\n    if (uVar7 == DAT_08006428) {\n      if (param_1 == 0) {\n        if (uVar7 < uVar9) goto LAB_08006278;\nLAB_08006262:\n        if ((uVar9 != DAT_08006428) || (param_3 == 0)) {\n          if (-1 < (int)param_2) goto LAB_0800632a;\n          if (DAT_08006430 < (int)uVar9) {\n            uVar1 = 2;\nLAB_080062ba:\n            if (param_3 == 0) {\n              if (uVar9 == DAT_08006428) {\n                return;\n              }\nLAB_0800630c:\n              if (uVar9 == DAT_08006438) {\n                if (-1 < (int)param_4) {\n                  return;\n                }\n                uVar7 = 0;\n                uVar9 = DAT_08006438;\n                goto LAB_08006320;\n              }\n              if (param_4 == 0x40000000) goto LAB_0800634a;\n              if ((param_4 == DAT_0800643c) && (-1 < (int)param_2)) {\n                __ieee754_sqrt(param_1,param_2);\n                return;\n              }\n            }\n          }\n          else {\n            if ((int)uVar9 <= DAT_08006430 + -0x3500000) {\nLAB_0800632a:\n              uVar1 = 0;\n              goto LAB_080062ba;\n            }\n            iVar4 = ((int)uVar9 >> 0x14) + -0x3ff;\n            if (0x14 < iVar4) {\n              uVar1 = param_3 >> (0x34U - iVar4 & 0xff);\n              if (param_3 == uVar1 << (0x34U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (param_3 == 0) {\n              uVar5 = (int)uVar9 >> (0x14U - iVar4 & 0xff);\n              uVar1 = param_3;\n              if (uVar9 == uVar5 << (0x14U - iVar4 & 0xff)) {\n                uVar1 = 2 - (uVar5 & 1);\n              }\n              goto LAB_0800630c;\n            }\n            uVar1 = 0;\n          }\n          uVar5 = param_1;\n          fabs((double)CONCAT44(in_stack_ffffff94,uVar1));\n          uVar17 = CONCAT44(param_2,uVar5) & 0x7fffffffffffffff;\n          if ((param_1 == 0) && ((uVar7 == 0 || ((param_2 & 0x3fffffff) == DAT_08006438)))) {\n            if ((int)param_4 < 0) {\n              __divdf3(0,DAT_08006438,uVar5,extraout_r1);\n            }\n            if (-1 < (int)param_2) {\n              return;\n            }\n            if ((uVar1 | uVar7 + 0xc0100000) != 0) {\n              return;\n            }\n          }\n          else {\n            uVar5 = 0xffffffff - ((int)param_2 >> 0x1f);\n            if ((uVar1 | uVar5) != 0) {\n              if (DAT_08006440 < (int)uVar9) {\n                if (DAT_08006440 + 0x2100000 < (int)uVar9) {\n                  if (DAT_08006434 < (int)uVar7) {\nLAB_08006418:\n                    if ((int)param_4 < 1) {\n                      return;\n                    }\n                    goto LAB_0800634a;\n                  }\nLAB_080063fa:\n                  if (-1 < (int)param_4) {\n                    return;\n                  }\n                  goto LAB_0800634a;\n                }\n                if ((int)uVar7 <= DAT_08006444) goto LAB_080063fa;\n                if ((int)DAT_08006438 < (int)uVar7) goto LAB_08006418;\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar8 = (undefined4)uVar12;\n                uVar12 = __muldf3(uVar8,uVar10,DAT_080065a8,DAT_080065ac);\n                uVar13 = __muldf3(uVar8,uVar10,DAT_080065b0,DAT_080065b4);\n                uVar14 = __muldf3(uVar8,uVar10,0,DAT_080065d4);\n                uVar14 = __subdf3(DAT_080065b8,DAT_080065bc,(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar8,uVar10);\n                uVar14 = __subdf3(0,DAT_080065d8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar15 = __muldf3(uVar8,uVar10,uVar8,uVar10);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar15,\n                                  (int)((ulonglong)uVar15 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),DAT_080065c0,\n                                  DAT_080065c4);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                             (int)((ulonglong)uVar13 >> 0x20));\n                lVar16 = (ulonglong)extraout_r1_00 << 0x20;\n                uVar9 = extraout_r1_00;\n              }\n              else {\n                local_54 = 0;\n                if (uVar7 < 0x100000) {\n                  uVar17 = __muldf3();\n                  local_54 = -0x35;\n                }\n                uVar9 = (uint)(uVar17 >> 0x20);\n                local_54 = ((int)uVar9 >> 0x14) + -0x3ff + local_54;\n                uVar9 = uVar9 & 0xfffff;\n                uVar7 = uVar9 | 0x3ff00000;\n                if (DAT_0800691c < (int)uVar9) {\n                  if (DAT_08006920 < (int)uVar9) {\n                    uVar7 = uVar7 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar4 = 1;\n                }\n                else {\nLAB_08006628:\n                  iVar4 = 0;\n                }\n                uVar6 = *(undefined4 *)(PTR_bp_08006924 + iVar4 * 8);\n                uVar19 = *(undefined4 *)((int)(PTR_bp_08006924 + iVar4 * 8) + 4);\n                uVar12 = __subdf3();\n                uVar10 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __aeabi_dadd((int)uVar17,uVar7,uVar6,uVar19);\n                uVar13 = __divdf3(0,DAT_08006928,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3((int)uVar12,uVar10,(int)uVar13,uVar11);\n                uVar2 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar8 = (undefined4)uVar14;\n                uVar14 = __muldf3(0,uVar2);\n                uVar12 = __subdf3((int)uVar12,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __subdf3(0,((int)uVar7 >> 1 | 0x20000000U) + 0x80000 + iVar4 * 0x40000,\n                                  uVar6,uVar19);\n                uVar14 = __subdf3((int)uVar17,uVar7,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),0,uVar2);\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,uVar11);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar8,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar10 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar10,uVar6,DAT_080068d0,DAT_080068d4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068d8,\n                                      DAT_080068dc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e0,\n                                      DAT_080068e4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068e8,\n                                      DAT_080068ec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f0,\n                                      DAT_080068f4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar10,uVar6);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_080068f8,\n                                      DAT_080068fc);\n                uVar14 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                  (int)((ulonglong)uVar14 >> 0x20));\n                uVar14 = __aeabi_dadd(uVar8,uVar2,0,uVar2);\n                uVar14 = __muldf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar11);\n                uVar13 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar10 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(0,uVar2,0,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar15 = __aeabi_dadd((int)uVar14,uVar6,0,DAT_0800692c);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar13,uVar10);\n                uVar15 = __muldf3(0,uVar2,0,extraout_r1_01);\n                uVar19 = (undefined4)((ulonglong)uVar15 >> 0x20);\n                uVar18 = __subdf3(0,extraout_r1_01,0,DAT_0800692c);\n                uVar14 = __subdf3((int)uVar18,(int)((ulonglong)uVar18 >> 0x20),(int)uVar14,uVar6);\n                uVar13 = __subdf3((int)uVar13,uVar10,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar8,uVar2);\n                uVar12 = __muldf3((int)uVar12,uVar11,0,extraout_r1_01);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                      (int)((ulonglong)uVar12 >> 0x20));\n                uVar8 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                __aeabi_dadd((int)uVar15,uVar19,(int)uVar13,uVar8);\n                uVar12 = __muldf3(0,extraout_r1_02,DAT_08006900,DAT_08006904);\n                uVar14 = __subdf3(0,extraout_r1_02,(int)uVar15,uVar19);\n                uVar13 = __subdf3((int)uVar13,uVar8,(int)uVar14,(int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006908,\n                                  DAT_0800690c);\n                uVar14 = __muldf3(0,extraout_r1_02,DAT_08006910,DAT_08006914);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),\n                                      *(undefined4 *)(PTR_dp_l_08006930 + iVar4 * 8),\n                                      *(undefined4 *)((int)(PTR_dp_l_08006930 + iVar4 * 8) + 4));\n                uVar14 = __aeabi_i2d(local_54);\n                uVar8 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = *(undefined4 *)(PTR_dp_h_08006934 + iVar4 * 8);\n                uVar11 = *(undefined4 *)((int)(PTR_dp_h_08006934 + iVar4 * 8) + 4);\n                uVar15 = __aeabi_dadd((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),(int)uVar13,\n                                      (int)((ulonglong)uVar13 >> 0x20));\n                uVar15 = __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),uVar10,uVar11);\n                __aeabi_dadd((int)uVar15,(int)((ulonglong)uVar15 >> 0x20),(int)uVar14,uVar8);\n                uVar14 = __subdf3(0,extraout_r1_03,(int)uVar14,uVar8);\n                lVar16 = __subdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),uVar10,uVar11);\n                uVar9 = extraout_r1_03;\n              }\n              uVar12 = __subdf3((int)lVar16,(int)((ulonglong)lVar16 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                (int)((ulonglong)uVar12 >> 0x20));\n              uVar8 = DAT_080065dc;\n              if ((uVar1 - 1 | uVar5) != 0) {\n                uVar8 = DAT_080065d0;\n              }\n              uVar19 = 0;\n              uVar13 = __subdf3(param_3,param_4,0,param_4);\n              uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),0,uVar9);\n              uVar12 = __muldf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),param_3,param_4);\n              uVar12 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                    (int)((ulonglong)uVar12 >> 0x20));\n              uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar10 = (undefined4)uVar12;\n              uVar12 = __muldf3(0,uVar9,0,param_4);\n              uVar6 = (undefined4)((ulonglong)uVar12 >> 0x20);\n              uVar11 = (undefined4)uVar12;\n              lVar16 = __aeabi_dadd(uVar10,uVar2,uVar11,uVar6);\n              uVar7 = (uint)((ulonglong)lVar16 >> 0x20);\n              uVar9 = (uint)lVar16;\n              if (DAT_080065e0 < (int)uVar7) {\n                if ((uVar7 + 0xbf700000 | uVar9) == 0) {\n                  uVar13 = __aeabi_dadd(uVar10,uVar2,DAT_08006ba8,DAT_08006bac);\n                  uVar14 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmpgt((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                         (int)((ulonglong)uVar14 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_080065c8,DAT_080065cc);\n                goto LAB_0800634a;\n              }\n              if (DAT_08006c04 < (int)(uVar7 & 0x7fffffff)) {\n                if ((DAT_08006c08 + uVar7 | uVar9) == 0) {\n                  uVar13 = __subdf3(uVar9,uVar7,uVar11,uVar6);\n                  iVar4 = __aeabi_dcmple(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                  if (iVar4 == 0) goto LAB_08006968;\n                }\n                __muldf3(uVar19,uVar8,DAT_08006bf0,DAT_08006bf4);\n              }\n              else {\nLAB_08006968:\n                if (DAT_08006bf8 < (int)(uVar7 & 0x7fffffff)) {\n                  uVar7 = (0x100000 >> (((int)(uVar7 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          uVar7;\n                  uVar9 = (uVar7 * 2 >> 0x15) - 0x3ff;\n                  iVar4 = (int)(uVar7 & 0xfffff | 0x100000) >> (0x14 - uVar9 & 0xff);\n                  if (lVar16 < 0) {\n                    iVar4 = -iVar4;\n                  }\n                  uVar12 = __subdf3(uVar11,uVar6,0,uVar7 & ~(DAT_08006bfc >> (uVar9 & 0xff)));\n                }\n                else {\n                  iVar4 = 0;\n                }\n                local_64 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                local_68 = (undefined4)uVar12;\n                __aeabi_dadd(local_68,local_64,uVar10,uVar2);\n                uVar12 = __muldf3(0,extraout_r1_04,DAT_08006bb0,DAT_08006bb4);\n                uVar11 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __subdf3(0,extraout_r1_04,local_68,local_64);\n                uVar13 = __subdf3(uVar10,uVar2,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bb8,\n                                  DAT_08006bbc);\n                uVar14 = __muldf3(0,extraout_r1_04,DAT_08006bc0,DAT_08006bc4);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar14,\n                                      (int)((ulonglong)uVar14 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __aeabi_dadd((int)uVar12,uVar11,(int)uVar13,uVar2);\n                uVar6 = (undefined4)((ulonglong)uVar14 >> 0x20);\n                uVar10 = (undefined4)uVar14;\n                uVar12 = __subdf3(uVar10,uVar6,(int)uVar12,uVar11);\n                uVar12 = __subdf3((int)uVar13,uVar2,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                uVar2 = (undefined4)((ulonglong)uVar12 >> 0x20);\n                uVar13 = __muldf3(uVar10,uVar6,uVar10,uVar6);\n                uVar3 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar11 = (undefined4)uVar13;\n                uVar13 = __muldf3(uVar11,uVar3,DAT_08006bc8,DAT_08006bcc);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd0,\n                                  DAT_08006bd4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006bd8,\n                                      DAT_08006bdc);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be0,\n                                  DAT_08006be4);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __aeabi_dadd((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),DAT_08006be8,\n                                      DAT_08006bec);\n                uVar13 = __muldf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),uVar11,uVar3);\n                uVar13 = __subdf3(uVar10,uVar6,(int)uVar13,(int)((ulonglong)uVar13 >> 0x20));\n                uVar11 = (undefined4)((ulonglong)uVar13 >> 0x20);\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar13,uVar11);\n                uVar13 = __subdf3((int)uVar13,uVar11,0,0x40000000);\n                uVar13 = __divdf3((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar13,\n                                  (int)((ulonglong)uVar13 >> 0x20));\n                uVar14 = __muldf3(uVar10,uVar6,(int)uVar12,uVar2);\n                uVar12 = __aeabi_dadd((int)uVar14,(int)((ulonglong)uVar14 >> 0x20),(int)uVar12,uVar2\n                                     );\n                uVar12 = __subdf3((int)uVar13,(int)((ulonglong)uVar13 >> 0x20),(int)uVar12,\n                                  (int)((ulonglong)uVar12 >> 0x20));\n                uVar12 = __subdf3((int)uVar12,(int)((ulonglong)uVar12 >> 0x20),uVar10,uVar6);\n                uVar12 = __subdf3(0,DAT_08006c00,(int)uVar12,(int)((ulonglong)uVar12 >> 0x20));\n                if ((int)((ulonglong)uVar12 >> 0x20) + iVar4 * 0x100000 < 0x100000) {\n                  scalbn((double)CONCAT44(uVar8,uVar19),(int)uVar12);\n                }\n              }\nLAB_0800634a:\n              __muldf3();\n              return;\n            }\n          }\n          uVar12 = __subdf3();\n          uVar9 = (uint)((ulonglong)uVar12 >> 0x20);\n          uVar7 = (uint)uVar12;\n          param_1 = uVar7;\n          param_2 = uVar9;\nLAB_08006320:\n          __divdf3(uVar7,uVar9,param_1,param_2);\n          return;\n        }\n      }\n    }\n    else if ((int)uVar9 <= (int)DAT_08006428) goto LAB_08006262;\n  }\n  if ((uVar7 + 0xc0100000 | param_1) == 0) {\n    return;\n  }\nLAB_08006278:\n  nan(PTR_DAT_0800642c);\n  return;\n}\n\n",
            "called": [
                "scalbn",
                "__aeabi_dcmple",
                "__divdf3",
                "__muldf3",
                "__ieee754_sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08006228",
            "calling": [
                "pow"
            ],
            "imported": false,
            "current_name": "FUNC_08006228"
        },
        "FUN_08000c3c": {
            "renaming": {
                "FUN_08000c3c": "calculate_transformed_value_08000c3c",
                "param_1": "input_value",
                "iVar1": "leading_zero_count",
                "uVar2": "shift_amount",
                "iVar3": "base_value",
                "uVar4": "temp_value"
            },
            "code": "\nuint calculate_transformed_value_08000c3c(uint input_value)\n\n{\n  int leading_zero_count;\n  uint shift_amount;\n  int base_value;\n  uint temp_value;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zero_count = count_leading_zeroes(input_value);\n  shift_amount = leading_zero_count - 8;\n  base_value = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zero_count) {\n    temp_value = 0 << (shift_amount & 0xff);\n    shift_amount = base_value + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < temp_value);\n    if (temp_value == 0x80000000) {\n      shift_amount = shift_amount & 0xfffffffe;\n    }\n    return shift_amount;\n  }\n  temp_value = input_value << (leading_zero_count + 0x18U & 0xff);\n  shift_amount = base_value + ((input_value >> (0x20 - (leading_zero_count + 0x18U) & 0xff)) - ((int)temp_value >> 0x1f));\n  if ((temp_value & 0x7fffffff) == 0) {\n    shift_amount = shift_amount & ~(temp_value >> 0x1f);\n  }\n  return shift_amount;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000c3c",
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "imported": false,
            "current_name": "calculate_transformed_value_08000c3c"
        },
        "FUN_08001214": {
            "renaming": {
                "FUN_08001214": "update_tick_counter_08001214",
                "TicksNumb": "tickCount",
                "puVar1": "tickCounter",
                "iVar2": "dataOffset"
            },
            "code": "\nuint32_t updateTickCounter_08001214(uint32_t tickCount)\n\n{\n  undefined4 *tickCounter;\n  int dataOffset;\n  \n  dataOffset = DAT_0800123c;\n  tickCounter = DAT_08001238;\n  if (tickCount - 1 < 0x1000000) {\n    DAT_08001238[1] = tickCount - 1;\n    *(undefined *)(dataOffset + 0x23) = 0xf0;\n    tickCounter[2] = 0;\n    *tickCounter = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001214",
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "update_tick_counter_08001214"
        },
        "FUN_08003fc4": {
            "renaming": {
                "FUN_08003fc4": "set_pwm_value_08003fc4",
                "pwm": "pwm_value"
            },
            "code": "\nvoid set_pwm_value_08003fc4(int pwm_value)\n\n{\n  *(int *)(*(int *)PTR_htim4_08003fcc + 0x40) = pwm_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003fc4",
            "calling": [
                "Motor_SetSpeed",
                "Motor_StopAll"
            ],
            "imported": false,
            "current_name": "set_pwm_value_08003fc4"
        },
        "FUN_0800209c": {
            "renaming": {
                "FUN_0800209c": "configure_clock_0800209c",
                "RCC_ClkInitStruct": "clockInitStruct",
                "FLatency": "flashLatency",
                "cVar1": "sysClockSource1",
                "cVar2": "sysClockSource2",
                "puVar3": "registerPtr",
                "uVar4": "currentTick",
                "uVar5": "clockType",
                "uVar6": "sysClockSource",
                "uVar7": "leadingZeroesCount"
            },
            "code": "\nHAL_StatusTypeDef ConfigureClock_0800209c(RCC_ClkInitTypeDef *clockInitStruct,uint32_t flashLatency)\n\n{\n  char sysClockSource1;\n  char sysClockSource2;\n  uint *registerPtr;\n  uint32_t currentTick;\n  uint32_t clockType;\n  uint sysClockSource;\n  uint leadingZeroesCount;\n  \n  registerPtr = DAT_08002204;\n  if ((flashLatency <= (*DAT_08002204 & 7)) ||\n     (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | flashLatency, flashLatency == (*registerPtr & 7))) {\n    clockType = clockInitStruct->ClockType;\n    if ((int)(clockType << 0x1e) < 0) {\n      DAT_08002208[1] = DAT_08002208[1] & 0xffffff0f | clockInitStruct->AHBCLKDivider;\n    }\n    registerPtr = DAT_08002208;\n    if (-1 < (int)(clockType << 0x1f)) {\nLAB_080020ba:\n      registerPtr = DAT_08002204;\n      if ((flashLatency < (*DAT_08002204 & 7)) &&\n         (*DAT_08002204 = *DAT_08002204 & 0xfffffff8 | flashLatency, flashLatency != (*registerPtr & 7))) {\n        return HAL_ERROR;\n      }\n      registerPtr = DAT_08002208;\n      sysClockSource = clockInitStruct->ClockType;\n      if ((sysClockSource & 4) != 0) {\n        DAT_08002208[1] = DAT_08002208[1] & 0xfffff8ff | clockInitStruct->APB1CLKDivider;\n      }\n      if ((int)(sysClockSource << 0x1c) < 0) {\n        registerPtr[1] = registerPtr[1] & 0xffffc7ff | clockInitStruct->APB2CLKDivider << 3;\n      }\n      clockType = HAL_RCC_GetSysClockFreq();\n      sysClockSource = count_leading_zeroes(0xf000000);\n      *(uint32_t *)PTR_SystemCoreClock_08002210 =\n           clockType >> PTR_AHBPrescTable_0800220c[(registerPtr[1] & 0xf0) >> (sysClockSource & 0xff)];\n      HAL_InitTick(0);\n      return HAL_OK;\n    }\n    sysClockSource = clockInitStruct->SYSCLKSource;\n    if (sysClockSource == 1) {\n      sysClockSource2 = '\\x01';\n      sysClockSource1 = '\\0';\n    }\n    else {\n      if (sysClockSource == 2) goto LAB_08002176;\n      sysClockSource2 = '\\0';\n      sysClockSource1 = '\\x01';\n    }\n    leadingZeroesCount = count_leading_zeroes((uint)(byte)(sysClockSource1 << 6) << 0x18 | (uint)(byte)(sysClockSource2 << 6) << 8);\n    if ((int)((*DAT_08002208 >> (leadingZeroesCount & 0x1f)) << 0x1f) < 0) {\nLAB_08002176:\n      DAT_08002208[1] = DAT_08002208[1] & 0xfffffffc | sysClockSource;\n      clockType = HAL_GetTick();\n      if (clockInitStruct->SYSCLKSource == 1) {\n        do {\n          if ((registerPtr[1] & 0xc) == 4) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while (currentTick - clockType < 0x1389);\n      }\n      else if (clockInitStruct->SYSCLKSource == 2) {\n        do {\n          if ((registerPtr[1] & 0xc) == 8) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while (currentTick - clockType < 0x1389);\n      }\n      else {\n        do {\n          if ((registerPtr[1] & 0xc) == 0) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while (currentTick - clockType < 0x1389);\n      }\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800209c",
            "calling": [
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "configure_clock_0800209c"
        },
        "FUN_08003f0e": {
            "renaming": {
                "FUN_08003f0e": "calculate_moving_average_08003f0e",
                "LPF": "lpf_struct",
                "var": "lpf_instance",
                "current": "current_value",
                "uVar1": "one_minus_beta_mul_current",
                "uVar2": "beta_mul_last",
                "fVar3": "moving_average",
                "extraout_s0": "updated_moving_average"
            },
            "code": "\nfloat calculate_moving_average_08003f0e(lpf_struct *lpf_instance,float current_value)\n\n{\n  undefined4 one_minus_beta_mul_current;\n  undefined4 beta_mul_last;\n  float moving_average;\n  float updated_moving_average;\n  \n  moving_average = lpf_instance->beta;\n  __aeabi_fsub(0x3f800000,moving_average);\n  one_minus_beta_mul_current = __aeabi_fmul();\n  beta_mul_last = __aeabi_fmul(moving_average,lpf_instance->last);\n  moving_average = (float)__addsf3(beta_mul_last,one_minus_beta_mul_current);\n  lpf_instance->last = moving_average;\n  return updated_moving_average;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fsub"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f0e",
            "calling": [
                "AHRS_GetPitch",
                "AHRS_GetRoll"
            ],
            "imported": false,
            "current_name": "calculate_moving_average_08003f0e"
        },
        "FUN_0800403c": {
            "renaming": {
                "FUN_0800403c": "write_register_with_delay_0800403c",
                "device_add": "device_address",
                "register_add": "register_address",
                "register_val": "register_value",
                "delay_mode": "delay_enabled",
                "HVar1": "halStatus",
                "byte": "register_data"
            },
            "code": "\nvoid writeRegisterWithDelay_0800403c(uint16_t device_address,uint16_t register_address,uint8_t register_value,uint8_t delay_enabled\n                  )\n\n{\n  HAL_StatusTypeDef halStatus;\n  uint8_t register_data [1];\n  \n  register_data[0] = register_value;\n  halStatus = HAL_I2C_Mem_Write((I2C_HandleTypeDef *)PTR_hi2c1_08004074,device_address,register_address,1,register_data,1\n                            ,200);\n  if (halStatus != HAL_OK) {\n    _Error_Handler(PTR_s____Src_i2c_c_08004078,0x1b);\n  }\n  if (delay_enabled != '\\0') {\n    delay_ms(0x32);\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800403c",
            "calling": [
                "MPU9250_Init",
                "MS5611_Update",
                "MS5611_Init",
                "AK8963_Init"
            ],
            "imported": false,
            "current_name": "write_register_with_delay_0800403c"
        },
        "FUN_08000cec": {
            "renaming": {
                "FUN_08000cec": "floating_point_addition_08000cec",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "unusedParam",
                "param_4": "exponent1",
                "lVar1": "longProduct",
                "uVar2": "tempVar",
                "uVar3": "exponent2",
                "iVar4": "sumExponents",
                "iVar5": "tempExponent",
                "uVar6": "productLow",
                "iVar7": "shiftExponent",
                "uVar8": "result",
                "bVar9": "condition",
                "bVar10": "borrowFlag"
            },
            "code": "\nuint floatingPointAddition_08000cec(uint operand1,uint operand2,undefined4 unusedParam,uint exponent1)\n\n{\n  longlong longProduct;\n  uint tempVar;\n  uint exponent2;\n  int sumExponents;\n  int tempExponent;\n  uint productLow;\n  int shiftExponent;\n  uint result;\n  bool condition;\n  bool borrowFlag;\n  \n  exponent2 = operand1 >> 0x17 & 0xff;\n  condition = exponent2 == 0;\n  if (!condition) {\n    exponent1 = operand2 >> 0x17 & 0xff;\n    condition = exponent1 == 0;\n  }\n  if (!condition) {\n    condition = exponent2 == 0xff;\n  }\n  if (!condition) {\n    condition = exponent1 == 0xff;\n  }\n  if (condition) {\n    exponent1 = operand2 >> 0x17 & 0xff;\n    if (exponent2 == 0xff || exponent1 == 0xff) {\n      condition = operand1 == 0 || operand1 == 0x80000000;\n      tempVar = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        condition = operand2 == 0;\n        tempVar = operand1;\n      }\n      if (!condition) {\n        condition = operand2 == 0x80000000;\n      }\n      result = tempVar;\n      if (((condition) || ((exponent2 == 0xff && ((tempVar & 0x7fffff) != 0)))) ||\n         ((exponent1 == 0xff && (result = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      tempVar = tempVar ^ operand2;\n      goto LAB_08000e3c;\n    }\n    condition = (operand1 & 0x7fffffff) == 0;\n    if (!condition) {\n      condition = (operand2 & 0x7fffffff) == 0;\n    }\n    if (condition) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    condition = exponent2 == 0;\n    tempVar = operand1 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        operand1 = operand1 << 1;\n        condition = (operand1 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exponent2 = exponent2 - 1;\n    }\n    operand1 = operand1 | tempVar;\n    condition = exponent1 == 0;\n    tempVar = operand2 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        operand2 = operand2 << 1;\n        condition = (operand2 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      exponent1 = exponent1 - 1;\n    }\n    operand2 = operand2 | tempVar;\n  }\n  sumExponents = exponent2 + exponent1;\n  result = operand1 ^ operand2;\n  exponent2 = operand1 << 9;\n  condition = exponent2 == 0;\n  if (!condition) {\n    operand2 = operand2 << 9;\n    condition = operand2 == 0;\n  }\n  if (condition) {\n    if (exponent2 == 0) {\n      operand2 = operand2 << 9;\n    }\n    tempVar = result & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    borrowFlag = SBORROW4(sumExponents,0x7f);\n    tempExponent = sumExponents + -0x7f;\n    condition = tempExponent == 0;\n    shiftExponent = tempExponent;\n    if (!condition && 0x7e < sumExponents) {\n      borrowFlag = SBORROW4(0xff,tempExponent);\n      shiftExponent = 0xff - tempExponent;\n      condition = tempExponent == 0xff;\n    }\n    if (!condition && shiftExponent < 0 == borrowFlag) {\n      tempVar = tempVar | tempExponent * 0x800000;\n    }\n    if (!condition && shiftExponent < 0 == borrowFlag) {\n      return tempVar;\n    }\n    tempVar = tempVar | 0x800000;\n    productLow = 0;\n    borrowFlag = SBORROW4(tempExponent,1);\n    result = sumExponents - 0x80;\n    condition = result == 0;\n    exponent2 = result;\n  }\n  else {\n    longProduct = (ulonglong)(exponent2 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    productLow = (uint)longProduct;\n    tempVar = (uint)((ulonglong)longProduct >> 0x20);\n    condition = tempVar < 0x800000;\n    if (condition) {\n      tempVar = tempVar << 1;\n    }\n    if (condition) {\n      tempVar = tempVar | productLow >> 0x1f;\n      productLow = productLow << 1;\n    }\n    tempVar = result & 0x80000000 | tempVar;\n    result = (sumExponents + -0x7f) - (uint)condition;\n    borrowFlag = SBORROW4(result,0xfd);\n    condition = result == 0xfd;\n    exponent2 = result - 0xfd;\n    if (result < 0xfe) {\n      tempVar = tempVar + result * 0x800000 + (uint)(0x7fffffff < productLow);\n      if (productLow == 0x80000000) {\n        tempVar = tempVar & 0xfffffffe;\n      }\n      return tempVar;\n    }\n  }\n  if (condition || (int)exponent2 < 0 != borrowFlag) {\n    condition = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || condition != SCARRY4(result,0x19)) {\n      tempVar = tempVar & 0x80000000;\n    }\n    if (result != 0xffffffe7 && condition == SCARRY4(result,0x19)) {\n      exponent2 = (tempVar << 1) >> (-result & 0xff);\n      result = tempVar << (result + 0x20 & 0xff);\n      exponent2 = ((uint)((tempVar & 0x80000000) != 0) << 0x1f | exponent2 >> 1) + (uint)((byte)exponent2 & 1);\n      if ((productLow | result << 1) == 0) {\n        exponent2 = exponent2 & ~(result >> 0x1f);\n      }\n      return exponent2;\n    }\n    return tempVar;\n  }\nLAB_08000e3c:\n  return tempVar & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000cec",
            "calling": [
                "AK8963_ReadData",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadGyroData",
                "lowPassFilter",
                "AK8963_Init",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "PID_UpdateAltitude"
            ],
            "imported": false,
            "current_name": "floating_point_addition_08000cec"
        },
        "FUN_0800277c": {
            "renaming": {
                "FUN_0800277c": "uart_transmit_0800277c",
                "huart": "uart_handle",
                "pData": "data_buffer",
                "Size": "buffer_size",
                "Timeout": "timeout",
                "uVar1": "tick_start",
                "uVar2": "tick_current",
                "HVar3": "new_state",
                "pUVar4": "usart_instance"
            },
            "code": "\nHAL_StatusTypeDef\nUART_Transmit_0800277c(UART_HandleTypeDef *uart_handle,uint8_t *data_buffer,uint16_t buffer_size,uint32_t timeout)\n\n{\n  uint32_t tick_start;\n  uint32_t tick_current;\n  HAL_UART_StateTypeDef new_state;\n  USART_TypeDef *usart_instance;\n  \n  if ((uart_handle->State == HAL_UART_STATE_READY) || (uart_handle->State == HAL_UART_STATE_BUSY_RX)) {\n    if ((data_buffer == (uint8_t *)0x0) || (buffer_size == 0)) {\n      return HAL_ERROR;\n    }\n    if (uart_handle->Lock != HAL_LOCKED) {\n      uart_handle->Lock = HAL_LOCKED;\n      uart_handle->ErrorCode = 0;\n      uart_handle->TxXferbuffer_size = buffer_size;\n      if (uart_handle->State == HAL_UART_STATE_BUSY_RX) {\n        new_state = HAL_UART_STATE_BUSY_TX_RX;\n      }\n      else {\n        new_state = HAL_UART_STATE_BUSY_TX;\n      }\n      uart_handle->TxXferCount = buffer_size;\n      uart_handle->State = new_state;\nLAB_080027c4:\n      if (uart_handle->TxXferCount == 0) {\n        tick_start = HAL_GetTick();\n        do {\n          do {\n            if ((int)(uart_handle->Instance->SR << 0x19) < 0) {\n              if (uart_handle->State == HAL_UART_STATE_BUSY_TX_RX) {\n                new_state = HAL_UART_STATE_BUSY_RX;\n              }\n              else {\n                new_state = HAL_UART_STATE_READY;\n              }\n              uart_handle->State = new_state;\n              uart_handle->Lock = HAL_UNLOCKED;\n              return HAL_OK;\n            }\n          } while (timeout == 0xffffffff);\n        } while ((timeout != 0) && (tick_current = HAL_GetTick(), tick_current - tick_start <= timeout));\n      }\n      else {\n        uart_handle->TxXferCount = uart_handle->TxXferCount - 1;\n        if ((uart_handle->Init).WordLength == 0x1000) {\n          tick_start = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uart_handle->Instance->SR << 0x18) < 0) {\n                uart_handle->Instance->DR = *(ushort *)data_buffer & 0x1ff;\n                if ((uart_handle->Init).Parity == 0) {\n                  data_buffer = (uint8_t *)((int)data_buffer + 2);\n                }\n                else {\nLAB_08002812:\n                  data_buffer = (uint8_t *)((int)data_buffer + 1);\n                }\n                goto LAB_080027c4;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (tick_current = HAL_GetTick(), tick_current - tick_start <= timeout));\n        }\n        else {\n          tick_start = HAL_GetTick();\n          do {\n            do {\n              if ((int)(uart_handle->Instance->SR << 0x18) < 0) {\n                uart_handle->Instance->DR = (uint)*data_buffer;\n                goto LAB_08002812;\n              }\n            } while (timeout == 0xffffffff);\n          } while ((timeout != 0) && (tick_current = HAL_GetTick(), tick_current - tick_start <= timeout));\n        }\n      }\n      usart_instance = uart_handle->Instance;\n      usart_instance->CR1 = usart_instance->CR1 & 0xffffff7f;\n      usart_instance->CR1 = usart_instance->CR1 & 0xffffffdf;\n      usart_instance->CR1 = usart_instance->CR1 & 0xfffffeff;\n      usart_instance->CR3 = usart_instance->CR3 & 0xfffffffe;\n      uart_handle->State = HAL_UART_STATE_READY;\n      uart_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  return HAL_BUSY;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800277c",
            "calling": [
                "serialWrite"
            ],
            "imported": false,
            "current_name": "uart_transmit_0800277c"
        },
        "FUN_0800483c": {
            "renaming": {
                "FUN_0800483c": "update_pid_0800483c",
                "pid": "pidData",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "fVar4": "tempVar4",
                "fVar5": "tempVar5",
                "fVar6": "tempVar6"
            },
            "code": "\nvoid updatePID_0800483c(PID_TypeDef *pidData)\n\n{\n  undefined4 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  float tempVar4;\n  float tempVar5;\n  float tempVar6;\n  \n  tempVar4 = pidData->input;\n  tempVar1 = __addsf3(pidData->set_point,pidData->offset);\n  tempVar4 = (float)__aeabi_fsub(tempVar1,tempVar4);\n  pidData->error = tempVar4;\n  if (pidData->instance == 3) {\n    tempVar2 = __aeabi_fcmpgt(pidData->error,0);\n    if (tempVar2 == 0) {\n      tempVar2 = __aeabi_fcmplt(pidData->error,DAT_08004974);\n    }\n    else {\n      tempVar2 = __aeabi_fcmpgt(pidData->error,DAT_08004964);\n    }\n    if (tempVar2 != 0) {\n      tempVar5 = pidData->error;\n      tempVar1 = __aeabi_fmul(pidData->error,DAT_08004968);\n      tempVar2 = __aeabi_fcmpgt(pidData->error,0);\n      tempVar4 = pidData->error;\n      if (tempVar2 == 0) {\n        tempVar4 = (float)((int)tempVar4 + -0x80000000);\n      }\n      tempVar1 = __aeabi_fdiv(tempVar1,tempVar4);\n      tempVar4 = (float)__aeabi_fsub(tempVar5,tempVar1);\n      pidData->error = tempVar4;\n    }\n  }\n  tempVar6 = pidData->con_KI;\n  tempVar5 = pidData->con_KD;\n  tempVar4 = (float)__aeabi_fmul(pidData->con_KP,pidData->error);\n  pidData->proportional = tempVar4;\n  tempVar4 = (float)__addsf3(pidData->error,pidData->integral);\n  pidData->integral = tempVar4;\n  tempVar2 = __aeabi_fcmplt(pidData->integral,DAT_0800496c);\n  tempVar4 = DAT_0800496c;\n  if ((tempVar2 == 0) &&\n     (tempVar2 = __aeabi_fcmpgt(pidData->integral,DAT_08004970), tempVar4 = DAT_08004970, tempVar2 == 0)) {\n    tempVar4 = pidData->integral;\n  }\n  pidData->integral = tempVar4;\n  tempVar4 = (float)__aeabi_fsub(pidData->input,pidData->last_input);\n  pidData->derivative = tempVar4;\n  tempVar4 = pidData->proportional;\n  tempVar1 = __aeabi_fmul(tempVar6,pidData->integral);\n  tempVar1 = __addsf3(tempVar1,tempVar4);\n  tempVar3 = __aeabi_fmul(tempVar5,pidData->derivative);\n  tempVar4 = (float)__aeabi_fsub(tempVar1,tempVar3);\n  pidData->output = tempVar4;\n  tempVar1 = __floatsisf(pidData->direction);\n  tempVar2 = __aeabi_fcmplt(pidData->output,DAT_0800496c);\n  tempVar4 = DAT_0800496c;\n  if ((tempVar2 == 0) &&\n     (tempVar2 = __aeabi_fcmpgt(pidData->output,DAT_08004970), tempVar4 = DAT_08004970, tempVar2 == 0)) {\n    tempVar4 = pidData->output;\n  }\n  tempVar4 = (float)__aeabi_fmul(tempVar4,tempVar1);\n  pidData->output = tempVar4;\n  pidData->last_input = pidData->input;\n  pidData->last_error = pidData->error;\n  pidData->last_time = pidData->time;\n  return;\n}\n\n",
            "called": [
                "__aeabi_fmul",
                "__aeabi_fcmpgt",
                "__floatsisf",
                "__addsf3",
                "__aeabi_fsub",
                "__aeabi_fdiv",
                "__aeabi_fcmplt"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800483c",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "update_pid_0800483c"
        },
        "FUN_08001064": {
            "renaming": {
                "FUN_08001064": "check_floating_comparison_08001064",
                "in_CY": "comparisonResult"
            },
            "code": "\nbool checkFloatingComparison_08001064(void)\n\n{\n  char comparisonResult;\n  \n  __aeabi_cfrcmple();\n  return comparisonResult == '\\0';\n}\n\n",
            "called": [
                "__aeabi_cfrcmple"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001064",
            "calling": [
                "PID_Update",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "check_floating_comparison_08001064"
        },
        "FUN_08000892": {
            "renaming": {
                "FUN_08000892": "calculate_result_08000892",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "temp_var1",
                "unaff_r4": "unaffected_r4",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "in_r12": "input_r12",
                "bVar4": "bool_var"
            },
            "code": "\nulonglong calculate_result_08000892(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint temp_var1;\n  uint unaffected_r4;\n  uint temp_var2;\n  uint temp_var3;\n  uint input_r12;\n  bool bool_var;\n  \n  temp_var2 = input_r12 & input_d >> 0x14;\n  temp_var3 = input_b;\n  if (unaffected_r4 != input_r12 || temp_var2 != input_r12) {\n    if (unaffected_r4 == input_r12) {\n      if (((input_a | input_b << 0xc) == 0) && (input_a = input_c, temp_var3 = input_d, temp_var2 != input_r12)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input_b ^ input_d) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp_var2 == input_r12) {\n      input_a = input_c;\n      temp_var3 = input_d;\n      if ((input_c | input_d << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input_b ^ input_d) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      bool_var = (input_a | input_b << 1) == 0;\n      if (!bool_var) {\n        bool_var = (input_c | input_d << 1) == 0;\n      }\n      if (!bool_var) {\n        if (unaffected_r4 == 0) {\n          temp_var3 = input_b & 0x80000000;\n          do {\n            temp_var1 = input_a & 0x80000000;\n            input_a = input_a << 1;\n            input_b = input_b * 2 + (uint)(temp_var1 != 0);\n          } while ((input_b & 0x100000) == 0);\n          input_b = input_b | temp_var3;\n          if (temp_var2 != 0) {\n            return CONCAT44(input_b,input_a);\n          }\n        }\n        do {\n          temp_var3 = input_c & 0x80000000;\n          input_c = input_c << 1;\n          input_d = input_d * 2 + (uint)(temp_var3 != 0);\n        } while ((input_d & 0x100000) == 0);\n        return CONCAT44(input_b,input_a);\n      }\n      if ((input_a | input_b << 1) != 0) goto LAB_08000704;\n      if ((input_c | input_d << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp_var3,input_a) | 0x7ff8000000000000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000892",
            "calling": [
                "__divdf3"
            ],
            "imported": false,
            "current_name": "calculate_result_08000892"
        },
        "FUN_08004458": {
            "renaming": {
                "FUN_08004458": "copy_and_send_data_08004458",
                "puVar1": "destinationPtr",
                "uVar2": "tempData",
                "puVar3": "destinationTempPtr",
                "puVar4": "sourceTempPtr",
                "puVar5": "sourcePtr",
                "local_30": "destinationBuffer",
                "local_24": "unusedBuffer"
            },
            "code": "\nvoid copyAndSendData_08004458(void)\n\n{\n  undefined4 *destinationPtr;\n  undefined4 tempData;\n  undefined4 *destinationTempPtr;\n  undefined4 *sourceTempPtr;\n  undefined4 *sourcePtr;\n  undefined4 destinationBuffer [3];\n  undefined2 unusedBuffer [10];\n  \n  destinationPtr = destinationBuffer;\n  sourcePtr = (undefined4 *)PTR_msp_txf_pid_0800448c;\n  do {\n    sourceTempPtr = sourcePtr;\n    destinationTempPtr = destinationPtr;\n    tempData = sourceTempPtr[1];\n    sourcePtr = sourceTempPtr + 2;\n    *destinationTempPtr = *sourceTempPtr;\n    destinationTempPtr[1] = tempData;\n    destinationPtr = destinationTempPtr + 2;\n  } while (sourcePtr != (undefined4 *)(PTR_msp_txf_pid_0800448c + 0x18));\n  destinationTempPtr[2] = *sourcePtr;\n  *(undefined2 *)(destinationTempPtr + 3) = *(undefined2 *)(sourceTempPtr + 3);\n  MSP_SendFrame('p',(uint8_t *)destinationBuffer,0x1e);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004458",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "copy_and_send_data_08004458"
        },
        "FUN_08004d48": {
            "renaming": {
                "FUN_08004d48": "i2_c_gpio_init_08004d48",
                "hi2c": "i2c_handle",
                "tmpreg": "temp_register",
                "GPIO_InitStruct": "gpio_init_structure"
            },
            "code": "\n/* WARNING: Variable defined which should be unmapped: gpio_init_structure */\n\nvoid I2C_GPIO_Init_08004d48(I2C_HandleTypeDef *i2c_handle)\n\n{\n  uint32_t temp_register;\n  GPIO_InitTypeDef gpio_init_structure;\n  \n  if (i2c_handle->Instance == DAT_08004d80) {\n    gpio_init_structure.Pin = 0xc0;\n    gpio_init_structure.Mode = 0x12;\n    gpio_init_structure.Speed = 3;\n    HAL_GPIO_Init(DAT_08004d84,&gpio_init_structure);\n    *(uint *)(DAT_08004d88 + 0x1c) = *(uint *)(DAT_08004d88 + 0x1c) | 0x200000;\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_GPIO_Init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d48",
            "calling": [
                "HAL_I2C_Init"
            ],
            "imported": false,
            "current_name": "i2_c_gpio_init_08004d48"
        },
        "FUN_08002280": {
            "renaming": {
                "FUN_08002280": "configure_timer_08002280",
                "TIMx": "timer",
                "OC_Config": "config",
                "uVar1": "combinedCCER",
                "uVar2": "updatedCR2",
                "uVar3": "ocMode"
            },
            "code": "\nvoid ConfigureTimer_08002280(TIM_TypeDef *timer,TIM_OC_InitTypeDef *config)\n\n{\n  uint32_t combinedCCER;\n  uint32_t updatedCR2;\n  uint ocMode;\n  \n  timer->CCER = timer->CCER & 0xfffffffe;\n  updatedCR2 = timer->CR2;\n  ocMode = config->OCMode;\n  combinedCCER = timer->CCER & 0xfffffffd | config->OCPolarity;\n  if (timer == DAT_080022cc) {\n    combinedCCER = (combinedCCER & 0xfffffff7 | config->OCNPolarity) & 0xfffffffb;\n    updatedCR2 = updatedCR2 & 0xfffffcff | config->OCIdleState | config->OCNIdleState;\n  }\n  timer->CR2 = updatedCR2;\n  timer->CCMR1 = timer->CCMR1 & 0xffffff8c | ocMode;\n  timer->CCR1 = config->Pulse;\n  timer->CCER = combinedCCER;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002280",
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "imported": false,
            "current_name": "configure_timer_08002280"
        },
        "FUN_08001194": {
            "renaming": {
                "FUN_08001194": "set_interrupt_priority_08001194",
                "IRQn": "interrupt_number",
                "PreemptPriority": "preempt_priority",
                "SubPriority": "sub_priority",
                "uVar1": "interrupt_index",
                "uVar2": "priority_value",
                "uVar3": "preempt_priority_limit",
                "uVar4": "sub_priority_shift",
                "uVar5": "priority_group"
            },
            "code": "\nvoid SetInterruptPriority_08001194(interrupt_number_Type interrupt_number,uint32_t preempt_priority,uint32_t sub_priority)\n\n{\n  uint interrupt_index;\n  undefined priority_value;\n  uint preempt_priority_limit;\n  uint sub_priority_shift;\n  uint priority_group;\n  \n  interrupt_index = (uint)interrupt_number;\n  sub_priority_shift = (uint)(*(int *)(DAT_080011f4 + 0xc) << 0x15) >> 0x1d;\n  preempt_priority_limit = 7 - sub_priority_shift;\n  priority_group = sub_priority_shift + 4;\n  if (3 < preempt_priority_limit) {\n    preempt_priority_limit = 4;\n  }\n  if (priority_group < 7) {\n    sub_priority_shift = 0;\n  }\n  preempt_priority_limit = (1 << (preempt_priority_limit & 0xff)) - 1;\n  if (6 < priority_group) {\n    sub_priority_shift = sub_priority_shift - 3;\n  }\n  priority_value = (undefined)\n          ((sub_priority & (1 << (sub_priority_shift & 0xff)) - 1U | (preempt_priority & preempt_priority_limit) << (sub_priority_shift & 0xff))\n          << 4);\n  if (-1 < (int)interrupt_index) {\n    sub_priority_shift = interrupt_index + 0xe000e100;\n  }\n  else {\n    sub_priority_shift = interrupt_index & 0xf;\n    preempt_priority_limit = DAT_080011f8;\n  }\n  if (-1 < (int)interrupt_index) {\n    *(undefined *)(sub_priority_shift + 0x300) = priority_value;\n  }\n  else {\n    *(undefined *)(preempt_priority_limit + sub_priority_shift) = priority_value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001194",
            "calling": [
                "HAL_InitTick",
                "HAL_UART_MspInit",
                "HAL_MspInit",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "set_interrupt_priority_08001194"
        },
        "FUN_08004348": {
            "renaming": {
                "FUN_08004348": "send_msp_frame_08004348",
                "puVar1": "mspBuffer",
                "in_r1": "inputData",
                "local_10": "frameHeader",
                "local_c": "frameData"
            },
            "code": "\nvoid sendMSPFrame_08004348(void)\n\n{\n  undefined *mspBuffer;\n  uint inputData;\n  undefined4 frameHeader;\n  uint frameData;\n  \n  mspBuffer = PTR_msp_txf_ident_08004380;\n  *PTR_msp_txf_ident_08004380 = 0xe9;\n  mspBuffer[1] = 3;\n  mspBuffer[3] = 4;\n  mspBuffer[2] = 0;\n  frameHeader = *(undefined4 *)mspBuffer;\n  mspBuffer[4] = 0;\n  mspBuffer[5] = 0;\n  mspBuffer[6] = 0;\n  frameData = inputData & 0xff000000 | (uint)*(ushort *)(mspBuffer + 4);\n  MSP_SendFrame('d',(uint8_t *)&frameHeader,7);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004348",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_msp_frame_08004348"
        },
        "FUN_08001078": {
            "renaming": {
                "FUN_08001078": "calculate_result_08001078",
                "param_1": "input_value",
                "uVar1": "temp_result",
                "uVar2": "shift_amount"
            },
            "code": "\nuint calculate_result_08001078(uint input_value)\n\n{\n  uint temp_result;\n  uint shift_amount;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  temp_result = (input_value << 1) >> 0x18;\n  shift_amount = 0x9e - temp_result;\n  if (temp_result < 0x9f && shift_amount != 0) {\n    temp_result = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      temp_result = -temp_result;\n    }\n    return temp_result;\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001078",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "Motor_DistributeSpeed"
            ],
            "imported": false,
            "current_name": "calculate_result_08001078"
        },
        "FUN_08001754": {
            "renaming": {
                "FUN_08001754": "i2_c_configuration_08001754",
                "hi2c": "i2c_handle",
                "uVar1": "temp_var1",
                "extraout_r1": "clock_factor",
                "uVar2": "temp_var2",
                "pIVar3": "i2c_instance",
                "uVar4": "clock_speed",
                "uVar5": "speed_threshold",
                "uVar6": "temp_var3"
            },
            "code": "\nHAL_StatusTypeDef I2C_Configuration_08001754(I2C_HandleTypeDef *i2c_handle)\n\n{\n  uint32_t temp_var1;\n  uint clock_factor;\n  uint temp_var2;\n  I2C_TypeDef *i2c_instance;\n  uint clock_speed;\n  uint speed_threshold;\n  uint temp_var3;\n  \n  if (i2c_handle == (I2C_HandleTypeDef *)0x0) {\n    return HAL_ERROR;\n  }\n  if (i2c_handle->State == HAL_I2C_STATE_RESET) {\n    i2c_handle->Lock = HAL_UNLOCKED;\n    HAL_I2C_MspInit(i2c_handle);\n  }\n  i2c_handle->State = HAL_I2C_STATE_BUSY;\n  speed_threshold = DAT_08001820;\n  i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 & 0xfffffffe;\n  temp_var1 = HAL_RCC_GetPCLK1Freq();\n  clock_speed = (i2c_handle->Init).ClockSpeed;\n  temp_var3 = temp_var1 / DAT_08001824;\n  temp_var2 = clock_factor;\n  if (speed_threshold < clock_speed) {\n    temp_var2 = 300;\n  }\n  i2c_instance = i2c_handle->Instance;\n  if (speed_threshold < clock_speed) {\n    temp_var2 = temp_var3 * temp_var2;\n  }\n  i2c_instance->CR2 = temp_var3;\n  if (speed_threshold < clock_speed) {\n    temp_var3 = temp_var2 / 1000;\n  }\n  i2c_instance->TRISE = temp_var3 + 1;\n  if (speed_threshold < clock_speed) {\n    if ((i2c_handle->Init).DutyCycle == 0) {\n      temp_var1 = temp_var1 / (clock_speed * 3) | 0x8000;\n    }\n    else {\n      temp_var1 = temp_var1 / (clock_speed * 0x19) | 0xc000;\n    }\n    if ((temp_var1 & 0xfff) == 0) {\n      temp_var1 = 1;\n    }\n  }\n  else {\n    temp_var1 = temp_var1 / (clock_speed << 1);\n    if ((temp_var1 & 0xfff) < 4) {\n      temp_var1 = 4;\n    }\n  }\n  temp_var3 = (i2c_handle->Init).NoStretchMode;\n  speed_threshold = (i2c_handle->Init).GeneralCallMode;\n  i2c_instance->CCR = temp_var1;\n  i2c_instance->CR1 = speed_threshold | temp_var3;\n  i2c_instance->OAR1 = (i2c_handle->Init).AddressingMode | (i2c_handle->Init).OwnAddress1;\n  i2c_instance->OAR2 = (i2c_handle->Init).DualAddressMode | (i2c_handle->Init).OwnAddress2;\n  i2c_instance->CR1 = i2c_instance->CR1 | 1;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  i2c_handle->Mode = HAL_I2C_MODE_NONE;\n  return HAL_OK;\n}\n\n",
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001754",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "i2_c_configuration_08001754"
        },
        "FUN_08002724": {
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "huart": "uart_handle",
                "pUVar1": "usart_reg"
            },
            "code": "\nHAL_StatusTypeDef initialize_uart_08002724(UART_HandleTypeDef *uart_handle)\n\n{\n  USART_TypeDef *usart_reg;\n  \n  if (uart_handle != (UART_HandleTypeDef *)0x0) {\n    if (uart_handle->State == HAL_UART_STATE_RESET) {\n      uart_handle->Lock = HAL_UNLOCKED;\n      HAL_UART_MspInit(uart_handle);\n    }\n    uart_handle->State = HAL_UART_STATE_BUSY;\n    uart_handle->Instance->CR1 = uart_handle->Instance->CR1 & 0xffffdfff;\n    UART_SetConfig(uart_handle);\n    usart_reg = uart_handle->Instance;\n    usart_reg->CR2 = usart_reg->CR2 & 0xffffb7ff;\n    usart_reg->CR3 = usart_reg->CR3 & 0xffffffd5;\n    usart_reg->CR1 = usart_reg->CR1 | 0x2000;\n    uart_handle->ErrorCode = 0;\n    uart_handle->State = HAL_UART_STATE_READY;\n    return HAL_OK;\n  }\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002724",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "initialize_uart_08002724"
        },
        "FUN_080043f0": {
            "renaming": {
                "FUN_080043f0": "send_motor_data_080043f0",
                "local_10": "motorData1",
                "uStack_c": "motorData2"
            },
            "code": "\nvoid sendMotorData_080043f0(void)\n\n{\n  undefined4 motorData1;\n  undefined4 motorData2;\n  \n  motorData1 = *(undefined4 *)PTR_msp_txf_motor_0800440c;\n  motorData2 = *(undefined4 *)(PTR_msp_txf_motor_0800440c + 4);\n  MSP_SendFrame('h',(uint8_t *)&motorData1,8);\n  return;\n}\n\n",
            "called": [
                "MSP_SendFrame"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080043f0",
            "calling": [
                "taskScheduler"
            ],
            "imported": false,
            "current_name": "send_motor_data_080043f0"
        },
        "FUN_08000428": {
            "renaming": {
                "FUN_08000428": "calculate_result_08000428",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "iVar6": "leading_zeroes",
                "uVar7": "shift_amount",
                "in_r12": "shift_diff",
                "bVar8": "is_equal",
                "bVar9": "is_zero",
                "bVar10": "carry_flag"
            },
            "code": "\nulonglong calculate_result_08000428(uint input_1,undefined4 input_2,undefined4 input_3,uint input_4)\n\n{\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  int leading_zeroes;\n  uint shift_amount;\n  uint shift_diff;\n  bool is_equal;\n  bool is_zero;\n  bool carry_flag;\n  \n  temp_var5 = input_1 << 1;\n  is_zero = temp_var5 == 0;\n  temp_var1 = (uint)((input_1 & 0x80000000) != 0) << 0x1f;\n  temp_var4 = (uint)((int)temp_var5 >> 3) >> 1;\n  temp_var3 = temp_var1 | temp_var4;\n  input_1 = input_1 << 0x1d;\n  if (!is_zero) {\n    input_4 = temp_var5 & 0xff000000;\n    is_zero = input_4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = input_4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(temp_var3,input_1) ^ 0x3800000000000000;\n  }\n  if (temp_var5 == 0 || input_4 == 0xff000000) {\n    return CONCAT44(temp_var3,input_1);\n  }\n  temp_var2 = input_1;\n  temp_var5 = temp_var4;\n  if (temp_var4 == 0) {\n    temp_var2 = 0;\n    temp_var5 = input_1;\n  }\n  leading_zeroes = count_leading_zeroes(temp_var5);\n  if (temp_var4 == 0) {\n    leading_zeroes = leading_zeroes + 0x20;\n  }\n  shift_amount = leading_zeroes - 0xb;\n  carry_flag = SBORROW4(shift_amount,0x20);\n  temp_var4 = leading_zeroes - 0x2b;\n  is_zero = (int)temp_var4 < 0;\n  is_equal = temp_var4 == 0;\n  if ((int)shift_amount < 0x20) {\n    carry_flag = SCARRY4(temp_var4,0xc);\n    leading_zeroes = leading_zeroes + -0x1f;\n    is_zero = leading_zeroes < 0;\n    is_equal = leading_zeroes == 0;\n    temp_var4 = shift_amount;\n    if (!is_equal && is_zero == carry_flag) {\n      temp_var2 = temp_var5 << (shift_amount & 0xff);\n      temp_var5 = temp_var5 >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != carry_flag) {\n    shift_diff = 0x20 - temp_var4;\n  }\n  temp_var5 = temp_var5 << (temp_var4 & 0xff);\n  if (is_equal || is_zero != carry_flag) {\n    temp_var5 = temp_var5 | temp_var2 >> (shift_diff & 0xff);\n  }\n  if (is_equal || is_zero != carry_flag) {\n    temp_var2 = temp_var2 << (temp_var4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp_var5 + (0x380 - shift_amount) * 0x100000 | temp_var1,temp_var2);\n  }\n  temp_var4 = ~(0x380 - shift_amount);\n  if ((int)temp_var4 < 0x1f) {\n    leading_zeroes = temp_var4 - 0x13;\n    if (leading_zeroes != 0 && leading_zeroes < 0 == SCARRY4(temp_var4 - 0x1f,0xc)) {\n      return CONCAT44(temp_var3,temp_var2 >> (0x20 - (0xcU - leading_zeroes) & 0xff) | temp_var5 << (0xcU - leading_zeroes & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_var4 = temp_var4 + 1;\n    return CONCAT44(temp_var1 | temp_var5 >> (temp_var4 & 0xff),\n                    temp_var2 >> (temp_var4 & 0xff) | temp_var5 << (0x20 - temp_var4 & 0xff));\n  }\n  return CONCAT44(temp_var3,temp_var5 >> (temp_var4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000428",
            "calling": [
                "MS5611_Update",
                "MadgwickQuaternionUpdate"
            ],
            "imported": false,
            "current_name": "calculate_result_08000428"
        },
        "FUN_08004ccc": {
            "renaming": {
                "FUN_08004ccc": "configure_interrupt_priorities_08004ccc",
                "tmpreg": "tempRegister"
            },
            "code": "\nvoid configureInterruptPriorities_08004ccc(void)\n\n{\n  uint32_t tempRegister;\n  \n  *(uint *)(DAT_08004d44 + 0x18) = *(uint *)(DAT_08004d44 + 0x18) | 1;\n  HAL_NVIC_SetPriorityGrouping(3);\n  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);\n  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);\n  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);\n  HAL_NVIC_SetPriority(SVCall_IRQn,0,0);\n  HAL_NVIC_SetPriority(DebugMonitor_IRQn,0,0);\n  HAL_NVIC_SetPriority(PendSV_IRQn,0,0);\n  HAL_NVIC_SetPriority(SysTick_IRQn,0,0);\n  return;\n}\n\n",
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004ccc",
            "calling": [
                "HAL_Init"
            ],
            "imported": false,
            "current_name": "configure_interrupt_priorities_08004ccc"
        },
        "FUN_08004c30": {
            "renaming": {
                "FUN_08004c30": "handle_uart_receive_08004c30",
                "huart": "uart_handle",
                "pData": "data_ptr"
            },
            "code": "\nvoid HandleUARTReceive_08004c30(UART_HandleTypeDef *uart_handle)\n\n{\n  undefined *data_ptr;\n  \n  data_ptr = PTR_rx_buffer_08004c58;\n  if (uart_handle->Instance == DAT_08004c54) {\n    CB_Write((CircularBuffer *)PTR_rxc_08004c5c,*PTR_rx_buffer_08004c58);\n    HAL_UART_Receive_IT((UART_HandleTypeDef *)PTR_uart_handle1_08004c60,data_ptr,1);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "CB_Write",
                "HAL_UART_Receive_IT"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c30",
            "calling": [
                "UART_Receive_IT"
            ],
            "imported": false,
            "current_name": "handle_uart_receive_08004c30"
        },
        "FUN_080004d0": {
            "renaming": {
                "FUN_080004d0": "calculate_double_multiplication_080004d0",
                "param_1": "frac_a",
                "param_2": "exp_a",
                "param_3": "frac_b",
                "param_4": "exp_b",
                "uVar1": "temp_product",
                "lVar2": "long_result",
                "uVar3": "exp_result",
                "uVar4": "exp_temp",
                "iVar5": "exp_sum",
                "uVar6": "exp_diff",
                "unaff_r5": "exp_b_masked",
                "uVar7": "exp_mask",
                "uVar8": "result_fraction",
                "bVar9": "is_special_case",
                "bVar10": "is_underflow",
                "bVar11": "is_overflow",
                "uVar12": "double_result"
            },
            "code": "\nulonglong calculate_double_multiplication_080004d0(undefined4 frac_a,uint exp_a,uint frac_b,uint exp_b)\n\n{\n  ulonglong temp_product;\n  longlong long_result;\n  uint exp_result;\n  uint exp_temp;\n  int exp_sum;\n  uint exp_diff;\n  uint exp_b_masked;\n  uint exp_mask;\n  uint result_fraction;\n  bool is_special_case;\n  bool is_underflow;\n  bool is_overflow;\n  ulonglong double_result;\n  \n  double_result = CONCAT44(exp_a,frac_a);\n  exp_mask = 0x7ff;\n  exp_temp = exp_a >> 0x14 & 0x7ff;\n  is_special_case = exp_temp == 0;\n  if (!is_special_case) {\n    exp_b_masked = exp_b >> 0x14 & 0x7ff;\n    is_special_case = exp_b_masked == 0;\n  }\n  if (!is_special_case) {\n    is_special_case = exp_temp == 0x7ff;\n  }\n  if (!is_special_case) {\n    is_special_case = exp_b_masked == 0x7ff;\n  }\n  if (is_special_case) {\n    double_result = calculate_result_080006ac();\n  }\n  exp_result = (uint)(double_result >> 0x20);\n  exp_sum = exp_temp + exp_b_masked;\n  exp_temp = exp_result ^ exp_b;\n  exp_result = exp_result & ~(exp_mask << 0x15);\n  exp_b = exp_b & ~(exp_mask << 0x15);\n  is_special_case = ((uint)double_result | exp_result << 0xc) == 0;\n  if (!is_special_case) {\n    is_special_case = (frac_b | exp_b << 0xc) == 0;\n  }\n  exp_result = exp_result | 0x100000;\n  exp_b = exp_b | 0x100000;\n  if (is_special_case) {\n    frac_b = (uint)double_result | frac_b;\n    exp_b = (exp_temp & 0x80000000 | exp_result) ^ exp_b;\n    exp_temp = exp_mask >> 1;\n    is_overflow = SBORROW4(exp_sum,exp_temp);\n    exp_diff = exp_sum - exp_temp;\n    is_special_case = exp_diff == 0;\n    exp_result = exp_diff;\n    if (!is_special_case && (int)exp_temp <= exp_sum) {\n      is_overflow = SBORROW4(exp_mask,exp_diff);\n      exp_result = exp_mask - exp_diff;\n      is_special_case = exp_mask == exp_diff;\n    }\n    if (!is_special_case && (int)exp_result < 0 == is_overflow) {\n      exp_b = exp_b | exp_diff * 0x100000;\n    }\n    if (!is_special_case && (int)exp_result < 0 == is_overflow) {\n      return CONCAT44(exp_b,frac_b);\n    }\n    exp_b = exp_b | 0x100000;\n    exp_mask = 0;\n    is_overflow = SBORROW4(exp_diff,1);\n    exp_diff = exp_diff - 1;\n    is_special_case = exp_diff == 0;\n    exp_temp = exp_diff;\n  }\n  else {\n    temp_product = (double_result & 0xffffffff) * (ulonglong)frac_b;\n    double_result = (double_result & 0xffffffff) * (ulonglong)exp_b +\n             (ulonglong)exp_result * (ulonglong)frac_b + (temp_product >> 0x20);\n    result_fraction = (uint)double_result;\n    long_result = (ulonglong)exp_result * (ulonglong)exp_b + (double_result >> 0x20);\n    exp_mask = (uint)long_result;\n    exp_result = (uint)((ulonglong)long_result >> 0x20);\n    if ((int)temp_product != 0) {\n      result_fraction = result_fraction | 1;\n    }\n    exp_diff = (exp_sum + -0x3ff) - (uint)(exp_result < 0x200);\n    if (exp_result < 0x200) {\n      is_special_case = (result_fraction & 0x80000000) != 0;\n      result_fraction = result_fraction << 1;\n      long_result = CONCAT44(exp_result * 2 + (uint)(CARRY4(exp_mask,exp_mask) || CARRY4(exp_mask * 2,(uint)is_special_case)),\n                       exp_mask * 2 + (uint)is_special_case);\n    }\n    exp_b = exp_temp & 0x80000000 | (int)((ulonglong)long_result >> 0x20) << 0xb | (uint)long_result >> 0x15;\n    frac_b = (uint)long_result << 0xb | result_fraction >> 0x15;\n    exp_mask = result_fraction * 0x800;\n    is_underflow = 0xfc < exp_diff;\n    is_overflow = SBORROW4(exp_diff,0xfd);\n    exp_result = exp_diff - 0xfd;\n    is_special_case = exp_result == 0;\n    exp_temp = exp_result;\n    if (is_underflow && !is_special_case) {\n      is_underflow = 0x6ff < exp_result;\n      is_overflow = SBORROW4(exp_result,0x700);\n      exp_temp = exp_diff - 0x7fd;\n      is_special_case = exp_result == 0x700;\n    }\n    if (!is_underflow || is_special_case) {\n      is_special_case = 0x7fffffff < exp_mask;\n      if (exp_mask == 0x80000000) {\n        is_special_case = (result_fraction >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(exp_b + exp_diff * 0x100000 + (uint)CARRY4(frac_b,(uint)is_special_case),frac_b + is_special_case\n                     );\n    }\n  }\n  if (!is_special_case && (int)exp_temp < 0 == is_overflow) {\n    return (ulonglong)(exp_b & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_underflow = SCARRY4(exp_diff,0x36);\n  is_special_case = (int)(exp_diff + 0x36) < 0;\n  is_overflow = exp_diff == 0xffffffca;\n  if (is_overflow || is_special_case != is_underflow) {\n    frac_b = 0;\n  }\n  if (is_overflow || is_special_case != is_underflow) {\n    exp_b = exp_b & 0x80000000;\n  }\n  if (is_overflow || is_special_case != is_underflow) {\n    return CONCAT44(exp_b,frac_b);\n  }\n  exp_temp = -exp_diff;\n  exp_result = exp_temp - 0x20;\n  if (0x1f < (int)exp_temp) {\n    exp_diff = frac_b >> (exp_result & 0xff) | exp_b << (0x20 - exp_result & 0xff);\n    exp_temp = (exp_b >> (exp_result & 0xff) & ~((exp_b & 0x80000000) >> (exp_result & 0xff))) -\n            ((int)exp_diff >> 0x1f);\n    if ((exp_mask | frac_b << (0x20 - exp_result & 0xff) | exp_diff << 1) == 0) {\n      exp_temp = exp_temp & ~(exp_diff >> 0x1f);\n    }\n    return CONCAT44(exp_b,exp_temp) & 0x80000000ffffffff;\n  }\n  exp_sum = exp_temp - 0x14;\n  if (exp_sum == 0 || exp_sum < 0 != SCARRY4(exp_result,0xc)) {\n    result_fraction = frac_b << (exp_diff + 0x20 & 0xff);\n    exp_result = frac_b >> (exp_temp & 0xff) | exp_b << (exp_diff + 0x20 & 0xff);\n    exp_diff = exp_result + -((int)result_fraction >> 0x1f);\n    if ((exp_mask | result_fraction << 1) == 0) {\n      exp_diff = exp_diff & ~(result_fraction >> 0x1f);\n    }\n    return CONCAT44((exp_b & 0x80000000) +\n                    ((exp_b & 0x7fffffff) >> (exp_temp & 0xff)) +\n                    (uint)CARRY4(exp_result,-((int)result_fraction >> 0x1f)),exp_diff);\n  }\n  exp_temp = 0xc - exp_sum;\n  exp_diff = frac_b << (exp_temp & 0xff);\n  exp_temp = frac_b >> (0x20 - exp_temp & 0xff) | exp_b << (exp_temp & 0xff);\n  exp_result = exp_temp + -((int)exp_diff >> 0x1f);\n  if ((exp_mask | exp_diff << 1) == 0) {\n    exp_result = exp_result & ~(exp_diff >> 0x1f);\n  }\n  return CONCAT44((exp_b & 0x80000000) + (uint)CARRY4(exp_temp,-((int)exp_diff >> 0x1f)),exp_result);\n}\n\n",
            "called": [
                "FUN_080006ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004d0",
            "calling": [
                "MS5611_Update",
                "scalbn",
                "MadgwickQuaternionUpdate",
                "__ieee754_sqrt",
                "atan",
                "pow",
                "__ieee754_asin",
                "__ieee754_pow"
            ],
            "imported": false,
            "current_name": "calculate_double_multiplication_080004d0"
        },
        "FUN_0800729c": {
            "renaming": {
                "FUN_0800729c": "calculate_result_0800729c",
                "__x": "input_x",
                "__y": "input_y",
                "in_d0": "result"
            },
            "code": "\ndouble calculate_result_0800729c(double input_x,double input_y)\n\n{\n  double result;\n  \n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800729c",
            "calling": [
                "scalbn"
            ],
            "imported": false,
            "current_name": "calculate_result_0800729c"
        },
        "FUN_080041ae": {
            "renaming": {
                "FUN_080041ae": "main_loop_080041ae"
            },
            "code": "\nint mainLoop_080041ae(void)\n\n{\n  startForkserver(0);\n  setup();\n  do {\n    HAL_IncTick();\n    taskScheduler();\n  } while( true );\n}\n\n",
            "called": [
                "HAL_IncTick",
                "setup",
                "taskScheduler",
                "startForkserver"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041ae",
            "calling": [
                "Reset_Handler"
            ],
            "imported": false,
            "current_name": "main_loop_080041ae"
        },
        "FUN_080053d4": {
            "renaming": {
                "FUN_080053d4": "custom_printf_080053d4",
                "param_1": "output_stream",
                "param_2": "format_options",
                "param_3": "args",
                "param_4": "write_func",
                "param_5": "arg_ptr",
                "bVar1": "format_char",
                "iVar2": "write_result",
                "puVar3": "current_arg",
                "pvVar4": "null_ptr",
                "iVar5": "write_count",
                "puVar6": "digit_set",
                "uVar7": "base",
                "ppuVar8": "arg_ptr_copy",
                "uVar9": "value",
                "uVar10": "temp_value",
                "puVar11": "buffer_ptr",
                "__s": "buffer_start",
                "local_24": "written_count"
            },
            "code": "\nuint custom_printf_080053d4(undefined4 output_stream,uint *format_options,undefined4 args,code *write_func,uint **arg_ptr)\n\n{\n  byte format_char;\n  int write_result;\n  uint *current_arg;\n  void *null_ptr;\n  int write_count;\n  undefined *digit_set;\n  uint base;\n  uint **arg_ptr_copy;\n  uint value;\n  uint temp_value;\n  undefined *buffer_ptr;\n  undefined *buffer_start;\n  uint written_count [2];\n  \n  format_char = *(byte *)(format_options + 6);\n  buffer_start = (undefined *)((int)format_options + 0x43);\n  if (format_char != 0x6e) {\n    if (format_char < 0x6f) {\n      if (format_char != 99) {\n        if (format_char < 100) {\n          if (format_char == 0) goto LAB_0800558e;\n          if (format_char != 0x58) goto LAB_08005404;\n          *(undefined *)((int)format_options + 0x45) = 0x58;\n          digit_set = PTR_s_0123456789ABCDEF_08005610;\nLAB_0800551e:\n          base = *format_options;\n          current_arg = *arg_ptr;\n          *arg_ptr = current_arg + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)current_arg;\n          }\n          else {\n            value = *current_arg;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_options = base | 0x20;\n          }\n          if (value == 0) {\n            *format_options = *format_options & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)format_options + 0x43) = 0;\n        }\n        else {\n          if ((format_char != 100) && (format_char != 0x69)) goto LAB_08005404;\n          value = *format_options;\n          current_arg = *arg_ptr;\n          if ((value & 0x80) == 0) {\n            *arg_ptr = current_arg + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)current_arg;\n          }\n          else {\n            *arg_ptr = current_arg + 1;\nLAB_08005424:\n            value = *current_arg;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)format_options + 0x43) = 0x2d;\n          }\n          base = 10;\n          digit_set = PTR_s_0123456789ABCDEF_08005610;\n        }\n        temp_value = format_options[1];\n        format_options[2] = temp_value;\n        buffer_ptr = buffer_start;\n        if ((int)temp_value < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(undefined *)((int)format_options + 0x42) = *digit_set;\n          buffer_ptr = (undefined *)((int)format_options + 0x42);\n        }\n        else {\n          *format_options = *format_options & 0xfffffffb;\n          if (value == 0) {\n            if (temp_value != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              temp_value = value / base;\n              buffer_ptr = buffer_ptr + -1;\n              *buffer_ptr = digit_set[value - base * temp_value];\n              value = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_options << 0x1f) < 0)) && ((int)format_options[1] <= (int)format_options[4]))\n        {\n          buffer_ptr[-1] = 0x30;\n          buffer_ptr = buffer_ptr + -1;\n        }\n        format_options[4] = (int)buffer_start - (int)buffer_ptr;\n        buffer_start = buffer_ptr;\n        goto LAB_080054fa;\n      }\n      current_arg = *arg_ptr;\n      *arg_ptr = current_arg + 1;\n      *(char *)((int)format_options + 0x42) = (char)*current_arg;\nLAB_08005464:\n      buffer_start = (undefined *)((int)format_options + 0x42);\n      value = 1;\n    }\n    else {\n      if (format_char != 0x73) {\n        if (format_char < 0x74) {\n          if (format_char == 0x6f) {\nLAB_0800548a:\n            value = *format_options;\n            current_arg = *arg_ptr;\n            if ((value & 0x80) == 0) {\n              *arg_ptr = current_arg + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)current_arg;\n            }\n            else {\n              *arg_ptr = current_arg + 1;\nLAB_08005498:\n              value = *current_arg;\n            }\n            digit_set = PTR_s_0123456789ABCDEF_08005610;\n            if (format_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_080054b4;\n          }\n          if (format_char == 0x70) {\n            *format_options = *format_options | 0x20;\nLAB_0800544a:\n            digit_set = PTR_s_0123456789abcdef_0800560c;\n            *(undefined *)((int)format_options + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (format_char == 0x75) goto LAB_0800548a;\n          if (format_char == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)format_options + 0x42) = format_char;\n        goto LAB_08005464;\n      }\n      current_arg = *arg_ptr;\n      *arg_ptr = current_arg + 1;\n      buffer_start = (undefined *)*current_arg;\n      null_ptr = memchr(buffer_start,0,format_options[1]);\n      if (null_ptr != (void *)0x0) {\n        format_options[1] = (int)null_ptr - (int)buffer_start;\n      }\n      value = format_options[1];\n    }\n    format_options[4] = value;\n    *(undefined *)((int)format_options + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *format_options;\n  arg_ptr_copy = (uint **)*arg_ptr;\n  base = format_options[5];\n  if ((value & 0x80) == 0) {\n    *arg_ptr = (uint *)(arg_ptr_copy + 1);\n    current_arg = *arg_ptr_copy;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)current_arg = (short)base;\n  }\n  else {\n    *arg_ptr = (uint *)(arg_ptr_copy + 1);\n    current_arg = *arg_ptr_copy;\nLAB_0800557a:\n    *current_arg = base;\n  }\nLAB_0800558e:\n  format_options[4] = 0;\nLAB_080054fa:\n  write_result = _printf_common(output_stream,format_options,written_count,args,write_func);\n  if ((write_result == -1) || (write_result = (*write_func)(output_stream,args,buffer_start,format_options[4]), write_result == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_options << 0x1e) < 0) {\n      for (write_result = 0; write_result < (int)(format_options[3] - written_count[0]); write_result = write_result + 1) {\n        write_count = (*write_func)(output_stream,args,(int)format_options + 0x19,1);\n        if (write_count == -1) goto LAB_0800550e;\n      }\n    }\n    value = format_options[3];\n    if ((int)format_options[3] < (int)written_count[0]) {\n      value = written_count[0];\n    }\n  }\n  return value;\n}\n\n",
            "called": [
                "_printf_common",
                "memchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053d4",
            "calling": [
                "_svfiprintf_r"
            ],
            "imported": false,
            "current_name": "custom_printf_080053d4"
        },
        "FUN_080041c4": {
            "renaming": {
                "FUN_080041c4": "stop_all_motors_080041c4"
            },
            "code": "\nvoid stopAllMotors_080041c4(void)\n\n{\n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0);\n  return;\n}\n\n",
            "called": [
                "Motor2_SetPWM",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041c4",
            "calling": [
                "PID_Update"
            ],
            "imported": false,
            "current_name": "stop_all_motors_080041c4"
        },
        "FUN_0800567c": {
            "renaming": {
                "FUN_0800567c": "merge_free_blocks_0800567c",
                "param_1": "error_code_ptr",
                "param_2": "block_ptr",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "puVar1": "malloc_list_ptr",
                "extraout_r1": "extra_output_r1",
                "ppiVar2": "prev_block",
                "ppiVar3": "next_block",
                "ppiVar5": "current_block",
                "ppiVar6": "last_block",
                "ppiVar7": "new_block",
                "piVar4": "block_size"
            },
            "code": "\nvoid merge_free_blocks_0800567c(undefined4 *error_code_ptr,int block_ptr,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  undefined *malloc_list_ptr;\n  int **extra_output_r1;\n  int **prev_block;\n  int **next_block;\n  int *block_size;\n  int **current_block;\n  int **last_block;\n  int **new_block;\n  \n  if (block_ptr == 0) {\n    return;\n  }\n  new_block = (int **)(block_ptr + -4);\n  if (*(int *)(block_ptr + -4) < 0) {\n    new_block = (int **)((int)new_block + *(int *)(block_ptr + -4));\n  }\n  __malloc_lock();\n  malloc_list_ptr = PTR___malloc_free_list_08005710;\n  current_block = *(int ***)PTR___malloc_free_list_08005710;\n  if (current_block == (int **)0x0) {\n    new_block[1] = (int *)0x0;\n    *(int ***)malloc_list_ptr = new_block;\n    prev_block = extra_output_r1;\n    next_block = (int **)malloc_list_ptr;\n  }\n  else if (new_block < current_block) {\n    prev_block = (int **)*new_block;\n    next_block = (int **)((int)new_block + (int)prev_block);\n    if (current_block == next_block) {\n      block_size = *current_block;\n      current_block = (int **)current_block[1];\n      next_block = (int **)((int)block_size + (int)prev_block);\n      *new_block = (int *)next_block;\n    }\n    new_block[1] = (int *)current_block;\n    *(int ***)malloc_list_ptr = new_block;\n  }\n  else {\n    do {\n      last_block = current_block;\n      next_block = (int **)last_block[1];\n      if (next_block == (int **)0x0) break;\n      current_block = next_block;\n    } while (next_block <= new_block);\n    prev_block = (int **)*last_block;\n    if ((int **)((int)last_block + (int)prev_block) == new_block) {\n      prev_block = (int **)((int)prev_block + (int)*new_block);\n      *last_block = (int *)prev_block;\n      if (next_block == (int **)((int)last_block + (int)prev_block)) {\n        block_size = *next_block;\n        next_block = (int **)next_block[1];\n        prev_block = (int **)((int)prev_block + (int)block_size);\n        *last_block = (int *)prev_block;\n        last_block[1] = (int *)next_block;\n      }\n    }\n    else if (new_block < (int **)((int)last_block + (int)prev_block)) {\n      *error_code_ptr = 0xc;\n    }\n    else {\n      prev_block = (int **)((int)new_block + (int)*new_block);\n      if (next_block == prev_block) {\n        block_size = *next_block;\n        next_block = (int **)next_block[1];\n        prev_block = (int **)((int)block_size + (int)*new_block);\n        *new_block = (int *)prev_block;\n      }\n      new_block[1] = (int *)next_block;\n      last_block[1] = (int *)new_block;\n    }\n  }\n  __malloc_unlock(error_code_ptr,prev_block,next_block,unused_param_4);\n  return;\n}\n\n",
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800567c",
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "imported": false,
            "current_name": "merge_free_blocks_0800567c"
        },
        "FUN_0800458c": {
            "renaming": {
                "FUN_0800458c": "initialize_hardware_0800458c",
                "GPIOx": "gpioPort",
                "uVar1": "tempVar1",
                "huart": "uartHandle",
                "HVar2": "halStatus",
                "uVar4": "tempVar4",
                "iVar5": "errorLine",
                "uVar6": "prescaler",
                "tmpreg": "tempReg",
                "tmpreg_1": "tempReg1",
                "tmpreg_2": "tempReg2",
                "sMasterConfig": "masterConfig",
                "sConfigOC": "configOC",
                "GPIO_InitStruct": "gpioInitStruct",
                "puVar3": "tempPtr3"
            },
            "code": "\nvoid InitializeHardware_0800458c(void)\n\n{\n  GPIO_TypeDef *gpioPort;\n  undefined4 tempVar1;\n  undefined *uartHandle;\n  HAL_StatusTypeDef halStatus;\n  uint tempVar4;\n  int errorLine;\n  uint prescaler;\n  uint32_t tempReg;\n  uint32_t tempReg1;\n  uint32_t tempReg2;\n  TIM_MasterConfigTypeDef masterConfig;\n  TIM_OC_InitTypeDef configOC;\n  GPIO_InitTypeDef gpioInitStruct;\n  undefined *tempPtr3;\n  \n  HAL_Init();\n  SystemClock_Config();\n  gpioPort = DAT_08004800;\n  errorLine = DAT_080047fc;\n  *(uint *)(DAT_080047fc + 0x18) = *(uint *)(DAT_080047fc + 0x18) | 0x10;\n  prescaler = 2;\n  *(uint *)(errorLine + 0x18) = *(uint *)(errorLine + 0x18) | 4;\n  tempVar1 = DAT_08004804;\n  *(uint *)(errorLine + 0x18) = *(uint *)(errorLine + 0x18) | 8;\n  HAL_GPIO_WritePin(gpioPort,0xe000,GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004808,0x20,GPIO_PIN_RESET);\n  gpioInitStruct.Pin = 0xe000;\n  gpioInitStruct.Mode = 1;\n  gpioInitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004800,&gpioInitStruct);\n  gpioInitStruct.Pin = 0x20;\n  gpioInitStruct.Mode = 1;\n  gpioInitStruct.Speed = 2;\n  HAL_GPIO_Init(DAT_08004808,&gpioInitStruct);\n  tempPtr3 = PTR_hi2c1_0800480c;\n  *(undefined4 *)PTR_hi2c1_0800480c = DAT_08004810;\n  *(undefined4 *)(tempPtr3 + 4) = tempVar1;\n  *(undefined4 *)(tempPtr3 + 0x10) = 0x4000;\n  *(undefined4 *)(tempPtr3 + 8) = 0;\n  *(undefined4 *)(tempPtr3 + 0xc) = 0;\n  *(undefined4 *)(tempPtr3 + 0x14) = 0;\n  *(undefined4 *)(tempPtr3 + 0x18) = 0;\n  *(undefined4 *)(tempPtr3 + 0x1c) = 0;\n  *(undefined4 *)(tempPtr3 + 0x20) = 0;\n  halStatus = HAL_I2C_Init((I2C_HandleTypeDef *)tempPtr3);\n  tempPtr3 = (undefined *)(uint)halStatus;\n  if (tempPtr3 == (undefined *)0x0) goto LAB_0800463a;\n  errorLine = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  tempPtr3 = PTR_s____Src_peripherals_c_08004814;\n                                  _Error_Handler(PTR_s____Src_peripherals_c_08004814,errorLine);\nLAB_0800463a:\n                                  tempVar1 = DAT_0800481c;\n                                  uartHandle = PTR_uartHandle1_08004818;\n                                  *(undefined **)(PTR_uartHandle1_08004818 + 8) = tempPtr3;\n                                  *(undefined **)(uartHandle + 0xc) = tempPtr3;\n                                  *(undefined **)(uartHandle + 0x10) = tempPtr3;\n                                  *(undefined **)(uartHandle + 0x18) = tempPtr3;\n                                  *(undefined **)(uartHandle + 0x1c) = tempPtr3;\n                                  *(undefined4 *)uartHandle = tempVar1;\n                                  *(undefined4 *)(uartHandle + 4) = 0x1c200;\n                                  *(undefined4 *)(uartHandle + 0x14) = 0xc;\n                                  halStatus = HAL_UART_Init((UART_HandleTypeDef *)uartHandle);\n                                  tempVar1 = DAT_08004824;\n                                  tempPtr3 = PTR_htim1_08004820;\n                                  if (halStatus == HAL_OK) break;\n                                  errorLine = 0x151;\n                                }\n                                *(undefined4 *)(PTR_htim1_08004820 + 8) = 0;\n                                *(undefined4 *)(tempPtr3 + 0x10) = 0;\n                                *(undefined4 *)(tempPtr3 + 0x14) = 0;\n                                *(undefined4 *)tempPtr3 = tempVar1;\n                                *(uint *)(tempPtr3 + 4) = prescaler;\n                                *(undefined4 *)(tempPtr3 + 0xc) = 1000;\n                                halStatus = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)tempPtr3);\n                                tempVar4 = (uint)halStatus;\n                                if (tempVar4 == 0) break;\n                                errorLine = 0x88;\n                              }\n                              masterConfig.MasterOutputTrigger = tempVar4;\n                              masterConfig.MasterSlaveMode = tempVar4;\n                              halStatus = HAL_TIMEx_MasterConfigSynchronization\n                                                ((TIM_HandleTypeDef *)tempPtr3,&masterConfig);\n                              tempVar4 = (uint)halStatus;\n                              if (tempVar4 == 0) break;\n                              errorLine = 0x8f;\n                            }\n                            configOC.OCMode = 0x60;\n                            configOC.Pulse = tempVar4;\n                            configOC.OCPolarity = tempVar4;\n                            configOC.OCFastMode = tempVar4;\n                            configOC.OCIdleState = tempVar4;\n                            configOC.OCNIdleState = tempVar4;\n                            halStatus = HAL_TIM_PWM_ConfigChannel\n                                              ((TIM_HandleTypeDef *)tempPtr3,&configOC,0xc);\n                            tempVar4 = (uint)halStatus;\n                            if (tempVar4 == 0) break;\n                            errorLine = 0x9a;\n                          }\n                          gpioInitStruct.Pin = tempVar4;\n                          gpioInitStruct.Mode = tempVar4;\n                          gpioInitStruct.Pull = tempVar4;\n                          gpioInitStruct.Speed = tempVar4;\n                          halStatus = HAL_TIMEx_ConfigBreakDeadTime\n                                            ((TIM_HandleTypeDef *)tempPtr3,\n                                             (TIM_BreakDeadTimeConfigTypeDef *)&gpioInitStruct);\n                          if (halStatus == HAL_OK) break;\n                          errorLine = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit((TIM_HandleTypeDef *)tempPtr3);\n                        tempPtr3 = PTR_htim2_08004828;\n                        *(undefined4 *)PTR_htim2_08004828 = 0x40000000;\n                        *(uint *)(tempPtr3 + 4) = prescaler;\n                        *(undefined4 *)(tempPtr3 + 8) = 0;\n                        *(undefined4 *)(tempPtr3 + 0xc) = 1000;\n                        *(undefined4 *)(tempPtr3 + 0x10) = 0;\n                        halStatus = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)tempPtr3);\n                        tempVar4 = (uint)halStatus;\n                        if (tempVar4 == 0) break;\n                        errorLine = 0xc3;\n                      }\n                      configOC.OCMode = tempVar4;\n                      configOC.Pulse = tempVar4;\n                      halStatus = HAL_TIMEx_MasterConfigSynchronization\n                                        ((TIM_HandleTypeDef *)tempPtr3,\n                                         (TIM_MasterConfigTypeDef *)&configOC);\n                      tempVar4 = (uint)halStatus;\n                      if (tempVar4 == 0) break;\n                      errorLine = 0xca;\n                    }\n                    gpioInitStruct.Pin = 0x60;\n                    gpioInitStruct.Mode = tempVar4;\n                    gpioInitStruct.Pull = tempVar4;\n                    halStatus = HAL_TIM_PWM_ConfigChannel\n                                      ((TIM_HandleTypeDef *)tempPtr3,\n                                       (TIM_OC_InitTypeDef *)&gpioInitStruct,4);\n                    if (halStatus == HAL_OK) break;\n                    errorLine = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)tempPtr3);\n                  tempVar1 = DAT_08004830;\n                  tempPtr3 = PTR_htim3_0800482c;\n                  *(undefined4 *)(PTR_htim3_0800482c + 0xc) = 1000;\n                  *(undefined4 *)tempPtr3 = tempVar1;\n                  *(uint *)(tempPtr3 + 4) = prescaler;\n                  *(undefined4 *)(tempPtr3 + 8) = 0;\n                  *(undefined4 *)(tempPtr3 + 0x10) = 0;\n                  halStatus = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)tempPtr3);\n                  if (halStatus == HAL_OK) break;\n                  errorLine = 0xf0;\n                }\n                configOC.OCMode = 0;\n                configOC.Pulse = 0;\n                halStatus = HAL_TIMEx_MasterConfigSynchronization\n                                  ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                   (TIM_MasterConfigTypeDef *)&configOC);\n                tempVar4 = (uint)halStatus;\n                if (tempVar4 == 0) break;\n                errorLine = 0xf7;\n              }\n              gpioInitStruct.Pin = 0x60;\n              gpioInitStruct.Mode = tempVar4;\n              gpioInitStruct.Pull = tempVar4;\n              halStatus = HAL_TIM_PWM_ConfigChannel\n                                ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                                 (TIM_OC_InitTypeDef *)&gpioInitStruct,8);\n              if (halStatus == HAL_OK) break;\n              errorLine = 0x100;\n            }\n            halStatus = HAL_TIM_PWM_ConfigChannel\n                              ((TIM_HandleTypeDef *)PTR_htim3_0800482c,\n                               (TIM_OC_InitTypeDef *)&gpioInitStruct,0xc);\n            prescaler = (uint)halStatus;\n            if (prescaler == 0) break;\n            errorLine = 0x105;\n          }\n          HAL_TIM_MspPostInit((TIM_HandleTypeDef *)PTR_htim3_0800482c);\n          tempPtr3 = PTR_htim4_08004834;\n          *(undefined4 *)PTR_htim4_08004834 = DAT_08004838;\n          *(undefined4 *)(tempPtr3 + 4) = 2;\n          *(undefined4 *)(tempPtr3 + 8) = 0;\n          *(undefined4 *)(tempPtr3 + 0xc) = 1000;\n          *(undefined4 *)(tempPtr3 + 0x10) = 0;\n          halStatus = HAL_TIM_PWM_Init((TIM_HandleTypeDef *)tempPtr3);\n          tempVar4 = (uint)halStatus;\n          if (tempVar4 == 0) break;\n          errorLine = 0x122;\n        }\n        configOC.OCMode = tempVar4;\n        configOC.Pulse = tempVar4;\n        halStatus = HAL_TIMEx_MasterConfigSynchronization\n                          ((TIM_HandleTypeDef *)tempPtr3,(TIM_MasterConfigTypeDef *)&configOC);\n        tempVar4 = (uint)halStatus;\n        if (tempVar4 == 0) break;\n        errorLine = 0x129;\n      }\n      gpioInitStruct.Pin = 0x60;\n      gpioInitStruct.Mode = tempVar4;\n      gpioInitStruct.Pull = tempVar4;\n      halStatus = HAL_TIM_PWM_ConfigChannel\n                        ((TIM_HandleTypeDef *)tempPtr3,(TIM_OC_InitTypeDef *)&gpioInitStruct,8);\n      if (halStatus == HAL_OK) break;\n      errorLine = 0x132;\n    }\n    halStatus = HAL_TIM_PWM_ConfigChannel\n                      ((TIM_HandleTypeDef *)tempPtr3,(TIM_OC_InitTypeDef *)&gpioInitStruct,0xc);\n    if (halStatus == HAL_OK) break;\n    errorLine = 0x137;\n  }\n  HAL_TIM_MspPostInit((TIM_HandleTypeDef *)tempPtr3);\n  return;\n}\n\n",
            "called": [
                "HAL_TIMEx_ConfigBreakDeadTime",
                "HAL_TIMEx_MasterConfigSynchronization",
                "HAL_I2C_Init",
                "_Error_Handler",
                "HAL_GPIO_Init",
                "HAL_Init",
                "HAL_TIM_MspPostInit",
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "SystemClock_Config",
                "HAL_UART_Init",
                "HAL_GPIO_WritePin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800458c",
            "calling": [
                "Devices_Init"
            ],
            "imported": false,
            "current_name": "initialize_hardware_0800458c"
        },
        "FUN_08000ffc": {
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "float_a",
                "param_2": "float_b"
            },
            "code": "\nvoid compare_floats_08000ffc(undefined4 float_a,undefined4 float_b)\n\n{\n  __aeabi_cfcmpeq(float_b,float_a);\n  return;\n}\n\n",
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000ffc",
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "imported": false,
            "current_name": "compare_floats_08000ffc"
        },
        "FUN_080016f4": {
            "renaming": {
                "FUN_080016f4": "check_i2_c_status_080016f4",
                "hi2c": "i2c_handle",
                "Timeout": "timeout",
                "uVar1": "start_tick",
                "uVar2": "current_tick",
                "pIVar3": "i2c_instance"
            },
            "code": "\nHAL_StatusTypeDef CheckI2CStatus_080016f4(I2C_HandleTypeDef *i2c_handle,uint32_t timeout)\n\n{\n  uint32_t start_tick;\n  uint32_t current_tick;\n  I2C_TypeDef *i2c_instance;\n  \n  start_tick = HAL_GetTick();\n  while( true ) {\n    i2c_instance = i2c_handle->Instance;\n    if ((i2c_instance->SR1 & 0x40) != 0) {\n      return HAL_OK;\n    }\n    if ((int)(i2c_instance->SR1 << 0x1b) < 0) break;\n    if ((timeout == 0) || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)) {\n      i2c_handle->ErrorCode = i2c_handle->ErrorCode | 0x20;\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\n  i2c_instance->SR1 = i2c_instance->SR1 & 0xffffffef;\n  i2c_handle->ErrorCode = 0;\n  i2c_handle->Lock = HAL_UNLOCKED;\n  i2c_handle->State = HAL_I2C_STATE_READY;\n  return HAL_ERROR;\n}\n\n",
            "called": [
                "HAL_GetTick"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080016f4",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "check_i2_c_status_080016f4"
        },
        "FUN_080025a4": {
            "renaming": {
                "FUN_080025a4": "FUNC_080025a4"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_080025a4\n          (TIM_HandleTypeDef *htim,TIM_MasterConfigTypeDef *sMasterConfig)\n\n{\n  uint uVar1;\n  HAL_StatusTypeDef HVar2;\n  TIM_TypeDef *pTVar3;\n  uint uVar4;\n  \n  HVar2 = HAL_BUSY;\n  if (htim->Lock != HAL_LOCKED) {\n    htim->State = HAL_TIM_STATE_BUSY;\n    pTVar3 = htim->Instance;\n    uVar4 = sMasterConfig->MasterOutputTrigger;\n    uVar1 = sMasterConfig->MasterSlaveMode;\n    pTVar3->CR2 = pTVar3->CR2 & 0xffffff8f;\n    pTVar3->CR2 = pTVar3->CR2 | uVar4;\n    pTVar3->SMCR = pTVar3->SMCR & 0xffffff7f;\n    pTVar3->SMCR = pTVar3->SMCR | uVar1;\n    htim->State = HAL_TIM_STATE_READY;\n    HVar2 = HAL_OK;\n    htim->Lock = HAL_UNLOCKED;\n  }\n  return HVar2;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x080025a4",
            "calling": [
                "Peripherals_Init"
            ],
            "imported": false,
            "current_name": "FUNC_080025a4"
        },
        "FUN_08003034": {
            "renaming": {
                "FUN_08003034": "FUNC_08003034"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nuint32_t FUNC_08003034(void)\n\n{\n  undefined4 in_r3;\n  uint8_t rxbuf [3];\n  \n  _rxbuf = in_r3;\n  I2C_ReadBytes(0xee,0,rxbuf,3,PTR_s____Src_MS5611_c_08003064,0x8c);\n  return (uint)CONCAT12(rxbuf[0],CONCAT11(rxbuf[1],rxbuf[2]));\n}\n\n",
            "called": [
                "I2C_ReadBytes"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08003034",
            "calling": [
                "MS5611_Update"
            ],
            "imported": false,
            "current_name": "FUNC_08003034"
        },
        "FUN_08004e7c": {
            "renaming": {
                "FUN_08004e7c": "uart_gpio_config_08004e7c",
                "huart": "uart_handle",
                "tmpreg": "temp_register",
                "GPIO_InitStruct": "gpio_init_struct"
            },
            "code": "\nvoid UART_GPIO_Config_08004e7c(UART_HandleTypeDef *uart_handle)\n\n{\n  uint32_t temp_register;\n  GPIO_InitTypeDef gpio_init_struct;\n  \n  if (uart_handle->Instance == DAT_08004edc) {\n    DAT_08004edc[0x7b7].CR3 = DAT_08004edc[0x7b7].CR3 | 0x4000;\n    gpio_init_struct.Pin = 0x200;\n    gpio_init_struct.Mode = 2;\n    gpio_init_struct.Speed = 3;\n    HAL_GPIO_Init(DAT_08004ee0,&gpio_init_struct);\n    gpio_init_struct.Pin = 0x400;\n    gpio_init_struct.Mode = 0;\n    gpio_init_struct.Pull = 0;\n    HAL_GPIO_Init(DAT_08004ee0,&gpio_init_struct);\n    HAL_NVIC_SetPriority(USART1_IRQn,0,0);\n    HAL_NVIC_EnableIRQ(USART1_IRQn);\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_GPIO_Init",
                "HAL_NVIC_EnableIRQ"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e7c",
            "calling": [
                "HAL_UART_Init"
            ],
            "imported": false,
            "current_name": "uart_gpio_config_08004e7c"
        },
        "FUN_08001530": {
            "renaming": {
                "FUN_08001530": "FUNC_08001530"
            },
            "code": "\nHAL_StatusTypeDef\nFUNC_08001530\n          (I2C_HandleTypeDef *hi2c,uint16_t DevAddress,uint16_t MemAddress,uint16_t MemAddSize,\n          uint32_t Timeout)\n\n{\n  HAL_StatusTypeDef HVar1;\n  uint32_t uVar2;\n  uint32_t uVar3;\n  I2C_TypeDef *pIVar4;\n  uint32_t tmpreg;\n  \n  hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x100;\n  uVar2 = HAL_GetTick();\n  do {\n    do {\n      if ((int)(hi2c->Instance->SR1 << 0x1f) < 0) {\n        hi2c->Instance->DR = DevAddress & 0xfe;\n        HVar1 = I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c,DAT_080015e4,Timeout);\n        if (HVar1 == HAL_OK) {\n          HVar1 = I2C_WaitOnTXEFlagUntilTimeout(hi2c,Timeout);\n          if (HVar1 == HAL_OK) {\n            pIVar4 = hi2c->Instance;\n            if (MemAddSize == 1) {\nLAB_080015ca:\n              pIVar4->DR = (uint)(byte)MemAddress;\n              return HVar1;\n            }\n            pIVar4->DR = (uint)(MemAddress >> 8);\n            HVar1 = I2C_WaitOnTXEFlagUntilTimeout(hi2c,Timeout);\n            if (HVar1 == HAL_OK) {\n              pIVar4 = hi2c->Instance;\n              goto LAB_080015ca;\n            }\n          }\n          if (hi2c->ErrorCode != 4) {\n            return HAL_TIMEOUT;\n          }\n          hi2c->Instance->CR1 = hi2c->Instance->CR1 | 0x200;\n        }\n        else if (hi2c->ErrorCode != 4) {\n          return HAL_TIMEOUT;\n        }\n        return HAL_ERROR;\n      }\n    } while (Timeout == 0xffffffff);\n    if ((Timeout == 0) || (uVar3 = HAL_GetTick(), Timeout < uVar3 - uVar2)) {\n      hi2c->State = HAL_I2C_STATE_READY;\n      hi2c->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x08001530",
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "imported": false,
            "current_name": "FUNC_08001530"
        },
        "FUN_0800411c": {
            "renaming": {
                "FUN_0800411c": "update_system_0800411c",
                "puVar1": "lastTickPtr",
                "uVar2": "currentMillis"
            },
            "code": "\nvoid updateSystem_0800411c(void)\n\n{\n  undefined *lastTickPtr;\n  uint32_t currentMillis;\n  \n  currentMillis = millis();\n  lastTickPtr = PTR_last_tick1_08004188;\n  if (1 < currentMillis - *(int *)PTR_last_tick1_08004188) {\n    currentMillis = millis();\n    *(uint32_t *)lastTickPtr = currentMillis;\n    AHRS_ComputeAngles();\n  }\n  currentMillis = millis();\n  lastTickPtr = PTR_last_tick3_0800418c;\n  if (2 < currentMillis - *(int *)PTR_last_tick3_0800418c) {\n    currentMillis = millis();\n    *(uint32_t *)lastTickPtr = currentMillis;\n    PID_Update();\n  }\n  currentMillis = millis();\n  lastTickPtr = PTR_last_tick2_08004190;\n  if (3 < currentMillis - *(int *)PTR_last_tick2_08004190) {\n    currentMillis = millis();\n    *(uint32_t *)lastTickPtr = currentMillis;\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  MS5611_Update();\n  return;\n}\n\n",
            "called": [
                "MS5611_Update",
                "MSP_SendPID",
                "MSP_SendStatus",
                "AHRS_ComputeAngles",
                "MSP_SendAltitude",
                "millis",
                "PID_Update",
                "MSP_SendAttitude",
                "MSP_SendRawIMU",
                "MSP_SendMotor",
                "MSP_SendIdent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800411c",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "update_system_0800411c"
        },
        "FUN_080040b8": {
            "renaming": {
                "FUN_080040b8": "read_from_i2_c_device_080040b8",
                "device_add": "device_address",
                "register_add": "register_address",
                "bytes": "data_buffer",
                "size": "buffer_size",
                "file": "error_file",
                "line": "error_line",
                "HVar1": "status"
            },
            "code": "\nvoid read_from_I2C_device_080040b8(uint16_t device_address,uint16_t register_address,uint8_t *data_buffer,uint16_t buffer_size,char *error_file\n                  ,int error_line)\n\n{\n  HAL_StatusTypeDef status;\n  \n  status = HAL_I2C_Mem_Read((I2C_HandleTypeDef *)PTR_hi2c1_080040e4,device_address,register_address,1,data_buffer,\n                           buffer_size,200);\n  if (status != HAL_OK) {\n    _Error_Handler(error_file,error_line);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080040b8",
            "calling": [
                "MS5611_ReadADC"
            ],
            "imported": false,
            "current_name": "read_from_i2_c_device_080040b8"
        },
        "FUN_08004490": {
            "renaming": {
                "FUN_08004490": "display_error_with_blinking_le_ds_08004490",
                "file": "errorFile",
                "line": "errorLine",
                "GPIOx": "gpioPort",
                "data": "linePrefix",
                "data_00": "errorPrefix"
            },
            "code": "\nvoid displayErrorWithBlinkingLEDs_08004490(char *errorFile,int errorLine)\n\n{\n  GPIO_TypeDef *gpioPort;\n  undefined *linePrefix;\n  undefined *errorPrefix;\n  \n  HAL_GPIO_WritePin(DAT_08004508,0x4000,GPIO_PIN_SET);\n  HAL_GPIO_WritePin(DAT_08004508,0x8000,GPIO_PIN_RESET);\n  HAL_GPIO_WritePin(DAT_08004508,0x2000,GPIO_PIN_RESET);\n  errorPrefix = PTR_s_Error_with_08004510;\n  linePrefix = PTR_s__at_errorLine__0800450c;\n  gpioPort = DAT_08004508;\n  do {\n    HAL_GPIO_TogglePin(gpioPort,0x4000);\n    HAL_GPIO_TogglePin(gpioPort,0x8000);\n    HAL_GPIO_TogglePin(gpioPort,0x2000);\n    serialPrint(errorPrefix);\n    serialPrint(errorFile);\n    serialPrint(linePrefix);\n    serialInt(errorLine);\n    serialWrite('\\n');\n    delay_ms(500);\n  } while( true );\n}\n\n",
            "called": [
                "serialInt",
                "HAL_GPIO_TogglePin",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "serialWrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004490",
            "calling": [
                "I2C_WriteByte",
                "I2C_ReadByte",
                "Peripherals_Init",
                "I2C_ReadBytes",
                "SystemClock_Config"
            ],
            "imported": false,
            "current_name": "display_error_with_blinking_le_ds_08004490"
        },
        "FUN_08000e54": {
            "renaming": {
                "FUN_08000e54": "floating_point_division_08000e54",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "unused_param",
                "param_4": "numerator_exp",
                "uVar1": "denominator_mantissa",
                "uVar2": "numerator_exp",
                "iVar3": "exp_difference",
                "uVar4": "shifted_numerator",
                "iVar5": "adjusted_exp",
                "uVar6": "result",
                "bVar7": "condition",
                "bVar8": "zero_condition",
                "bVar9": "carry_flag"
            },
            "code": "\nuint floating_point_division_08000e54(uint numerator,uint denominator,undefined4 unused_param,uint numerator_exp)\n\n{\n  uint denominator_mantissa;\n  uint numerator_exp;\n  int exp_difference;\n  uint shifted_numerator;\n  int adjusted_exp;\n  uint result;\n  bool condition;\n  bool zero_condition;\n  bool carry_flag;\n  \n  numerator_exp = numerator >> 0x17 & 0xff;\n  condition = numerator_exp == 0;\n  if (!condition) {\n    numerator_exp = denominator >> 0x17 & 0xff;\n    condition = numerator_exp == 0;\n  }\n  if (!condition) {\n    condition = numerator_exp == 0xff;\n  }\n  if (!condition) {\n    condition = numerator_exp == 0xff;\n  }\n  if (condition) {\n    numerator_exp = denominator >> 0x17 & 0xff;\n    result = numerator;\n    if (numerator_exp == 0xff) {\n      if (((numerator & 0x7fffff) != 0) || (result = denominator, numerator_exp == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (numerator_exp == 0xff) {\n        result = denominator;\n        if ((denominator & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (numerator ^ denominator) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition = (numerator & 0x7fffffff) == 0;\n      if (!condition) {\n        condition = (denominator & 0x7fffffff) == 0;\n      }\n      if (!condition) {\n        condition = numerator_exp == 0;\n        result = numerator & 0x80000000;\n        while( true ) {\n          if (condition) {\n            numerator = numerator << 1;\n            condition = (numerator & 0x800000) == 0;\n          }\n          if (!condition) break;\n          numerator_exp = numerator_exp - 1;\n        }\n        numerator = numerator | result;\n        condition = numerator_exp == 0;\n        result = denominator & 0x80000000;\n        while( true ) {\n          if (condition) {\n            denominator = denominator << 1;\n            condition = (denominator & 0x800000) == 0;\n          }\n          if (!condition) break;\n          numerator_exp = numerator_exp - 1;\n        }\n        denominator = denominator | result;\n        goto LAB_08000e6c;\n      }\n      if ((numerator & 0x7fffffff) == 0) {\n        if ((denominator & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    numerator = numerator ^ denominator;\n  }\n  else {\nLAB_08000e6c:\n    exp_difference = numerator_exp - numerator_exp;\n    if (denominator << 9 == 0) {\n      numerator = (numerator ^ denominator) & 0x80000000 | numerator & 0x7fffff;\n      carry_flag = SCARRY4(exp_difference,0x7f);\n      adjusted_exp = exp_difference + 0x7f;\n      condition = adjusted_exp < 0;\n      zero_condition = adjusted_exp == 0;\n      if (!zero_condition && condition == carry_flag) {\n        carry_flag = SBORROW4(0xff,adjusted_exp);\n        condition = 0xff - adjusted_exp < 0;\n        zero_condition = adjusted_exp == 0xff;\n      }\n      if (!zero_condition && condition == carry_flag) {\n        numerator = numerator | adjusted_exp * 0x800000;\n      }\n      if (!zero_condition && condition == carry_flag) {\n        return numerator;\n      }\n      numerator = numerator | 0x800000;\n      numerator_exp = 0;\n      zero_condition = SBORROW4(adjusted_exp,1);\n      shifted_numerator = exp_difference + 0x7e;\n      condition = shifted_numerator == 0;\n      result = shifted_numerator;\n    }\n    else {\n      denominator_mantissa = (denominator << 9) >> 4 | 0x10000000;\n      numerator_exp = (numerator << 9) >> 4 | 0x10000000;\n      numerator = (numerator ^ denominator) & 0x80000000;\n      condition = denominator_mantissa <= numerator_exp;\n      if (!condition) {\n        numerator_exp = numerator_exp << 1;\n      }\n      shifted_numerator = exp_difference + 0x7d + (uint)condition;\n      result = 0x800000;\n      do {\n        if (denominator_mantissa <= numerator_exp) {\n          numerator_exp = numerator_exp - denominator_mantissa;\n          numerator = numerator | result;\n        }\n        condition = denominator_mantissa >> 1 <= numerator_exp;\n        if (condition) {\n          numerator_exp = numerator_exp - (denominator_mantissa >> 1);\n        }\n        if (condition) {\n          numerator = numerator | result >> 1;\n        }\n        condition = denominator_mantissa >> 2 <= numerator_exp;\n        if (condition) {\n          numerator_exp = numerator_exp - (denominator_mantissa >> 2);\n        }\n        if (condition) {\n          numerator = numerator | result >> 2;\n        }\n        condition = denominator_mantissa >> 3 <= numerator_exp;\n        if (condition) {\n          numerator_exp = numerator_exp - (denominator_mantissa >> 3);\n        }\n        if (condition) {\n          numerator = numerator | result >> 3;\n        }\n        numerator_exp = numerator_exp * 0x10;\n        condition = numerator_exp == 0;\n        if (!condition) {\n          result = result >> 4;\n          condition = result == 0;\n        }\n      } while (!condition);\n      zero_condition = SBORROW4(shifted_numerator,0xfd);\n      condition = shifted_numerator == 0xfd;\n      result = shifted_numerator - 0xfd;\n      if (shifted_numerator < 0xfe) {\n        numerator = numerator + shifted_numerator * 0x800000 + (uint)(denominator_mantissa <= numerator_exp);\n        if (numerator_exp - denominator_mantissa == 0) {\n          numerator = numerator & 0xfffffffe;\n        }\n        return numerator;\n      }\n    }\n    if (condition || (int)result < 0 != zero_condition) {\n      condition = (int)(shifted_numerator + 0x19) < 0;\n      if (shifted_numerator == 0xffffffe7 || condition != SCARRY4(shifted_numerator,0x19)) {\n        numerator = numerator & 0x80000000;\n      }\n      if (shifted_numerator == 0xffffffe7 || condition != SCARRY4(shifted_numerator,0x19)) {\n        return numerator;\n      }\n      result = (numerator << 1) >> (-shifted_numerator & 0xff);\n      shifted_numerator = numerator << (shifted_numerator + 0x20 & 0xff);\n      result = ((uint)((numerator & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((numerator_exp | shifted_numerator << 1) == 0) {\n        result = result & ~(shifted_numerator >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return numerator & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000e54",
            "calling": [
                "MS5611_Update",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Compute"
            ],
            "imported": false,
            "current_name": "floating_point_division_08000e54"
        },
        "FUN_080015e8": {
            "renaming": {
                "FUN_080015e8": "i2_c_read_080015e8",
                "hi2c": "i2c_handle",
                "DevAddress": "device_address",
                "MemAddress": "memory_address",
                "MemAddSize": "memory_address_size",
                "Timeout": "timeout",
                "HVar1": "status",
                "uVar2": "start_tick",
                "uVar3": "current_tick",
                "pIVar4": "i2c_instance",
                "tmpreg": "temp_register"
            },
            "code": "\nHAL_StatusTypeDef\nI2C_Read_080015e8(I2C_HandleTypeDef *i2c_handle,uint16_t device_address,uint16_t memory_address,uint16_t memory_address_size,\n          uint32_t timeout)\n\n{\n  HAL_StatusTypeDef status;\n  uint32_t start_tick;\n  uint32_t current_tick;\n  I2C_TypeDef *i2c_instance;\n  uint32_t temp_register;\n  \n  i2c_instance = i2c_handle->Instance;\n  i2c_instance->CR1 = i2c_instance->CR1 | 0x400;\n  i2c_instance->CR1 = i2c_instance->CR1 | 0x100;\n  start_tick = HAL_GetTick();\nLAB_0800160e:\n  while (-1 < (int)(i2c_handle->Instance->SR1 << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  i2c_handle->Instance->DR = (byte)device_address & 0xfe;\n  status = I2C_WaitOnMasterAddressFlagUntiltimeout(i2c_handle,DAT_080016f0,timeout);\n  if (status != HAL_OK) goto LAB_080016ba;\n  status = I2C_WaitOnTXEFlagUntiltimeout(i2c_handle,timeout);\n  if (status == HAL_OK) {\n    i2c_instance = i2c_handle->Instance;\n    if (memory_address_size != 1) {\n      i2c_instance->DR = (uint)(memory_address >> 8);\n      status = I2C_WaitOnTXEFlagUntiltimeout(i2c_handle,timeout);\n      if (status != HAL_OK) goto LAB_08001642;\n      i2c_instance = i2c_handle->Instance;\n    }\n    i2c_instance->DR = (uint)(byte)memory_address;\n    status = I2C_WaitOnTXEFlagUntiltimeout(i2c_handle,timeout);\n    if (status == HAL_OK) {\n      i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x100;\n      start_tick = HAL_GetTick();\n      do {\n        do {\n          if ((int)(i2c_handle->Instance->SR1 << 0x1f) < 0) {\n            i2c_handle->Instance->DR = (byte)device_address | 1;\n            status = I2C_WaitOnMasterAddressFlagUntiltimeout(i2c_handle,DAT_080016f0,timeout);\n            if (status == HAL_OK) {\n              return HAL_OK;\n            }\nLAB_080016ba:\n            if (i2c_handle->ErrorCode != 4) {\n              return HAL_TIMEOUT;\n            }\n            return HAL_ERROR;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_tick = HAL_GetTick(), current_tick - start_tick <= timeout));\nLAB_0800165a:\n      i2c_handle->State = HAL_I2C_STATE_READY;\n      i2c_handle->Lock = HAL_UNLOCKED;\n      return HAL_TIMEOUT;\n    }\n  }\nLAB_08001642:\n  if (i2c_handle->ErrorCode == 4) {\n    i2c_handle->Instance->CR1 = i2c_handle->Instance->CR1 | 0x200;\n    return HAL_ERROR;\n  }\n  return HAL_TIMEOUT;\ncode_r0x08001658:\n  if ((timeout == 0) || (current_tick = HAL_GetTick(), timeout < current_tick - start_tick)) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "called": [
                "HAL_GetTick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080015e8",
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "imported": false,
            "current_name": "i2_c_read_080015e8"
        }
    },
    "used_tokens": 143198,
    "layers": [
        [
            "FUN_080050fc",
            "FUN_08003320",
            "FUN_08004410",
            "FUN_08003ef2",
            "FUN_08001264",
            "FUN_080058fc",
            "FUN_080070b0",
            "FUN_08001028",
            "FUN_080006ac",
            "FUN_0800125a",
            "FUN_08001828",
            "FUN_0800016c",
            "FUN_08001b58",
            "FUN_0800290c",
            "FUN_080028a6",
            "FUN_08004300",
            "FUN_08005630",
            "FUN_08003330",
            "FUN_08000980",
            "FUN_08002368",
            "FUN_08002008",
            "FUN_080008fc",
            "FUN_0800114c",
            "FUN_08002250",
            "FUN_080011fc",
            "FUN_08003f7c",
            "FUN_08005646",
            "FUN_08000990",
            "FUN_08004ee6",
            "FUN_08004434",
            "FUN_08004ee8",
            "FUN_08004ffc",
            "FUN_0800103c",
            "FUN_0800115c",
            "FUN_08004f60",
            "FUN_08002d88",
            "FUN_08002b48",
            "FUN_08004f68",
            "FUN_08001170",
            "FUN_08002bf0",
            "FUN_08002ad0",
            "FUN_08001050",
            "FUN_08004ef4",
            "FUN_080043bc",
            "FUN_08004f5c",
            "FUN_08000404",
            "FUN_08004eec",
            "FUN_08004eea",
            "FUN_08006070",
            "FUN_08004cac",
            "FUN_08004c18",
            "FUN_08004c8c",
            "FUN_08001460",
            "FUN_08003fd0",
            "FUN_08000134",
            "FUN_08003eb0",
            "FUN_08005c70",
            "FUN_08002ee8",
            "FUN_08001104",
            "FUN_08004978",
            "FUN_08000c60",
            "FUN_08006d68",
            "FUN_08004f04",
            "FUN_080072b8",
            "FUN_0800581c",
            "FUN_08003eac",
            "FUN_080072ac",
            "FUN_08000ad0",
            "FUN_08002cb0",
            "FUN_08002324",
            "FUN_08002564",
            "FUN_08004fb0",
            "FUN_08000ad8",
            "FUN_08003ec8",
            "FUN_08003fe8",
            "FUN_08005714",
            "FUN_08004fb4",
            "FUN_080009dc",
            "FUN_08000c70",
            "FUN_080023d0",
            "FUN_08000a30",
            "FUN_08003fdc",
            "FUN_080009f0",
            "FUN_08004f10",
            "FUN_08005044",
            "FUN_08004194",
            "FUN_08001240",
            "FUN_08005840",
            "FUN_08000150",
            "FUN_08003f3c",
            "FUN_08002214",
            "FUN_08003ff4",
            "FUN_08001004",
            "FUN_08004514",
            "FUN_080057d0",
            "FUN_080072d4",
            "FUN_08000adc",
            "FUN_08000160",
            "FUN_08002220",
            "FUN_08003314",
            "FUN_08000168",
            "FUN_08001014",
            "FUN_080071c0",
            "FUN_08005614",
            "FUN_080070a4",
            "FUN_0800407c",
            "FUN_08001938",
            "FUN_080022d0",
            "FUN_080010c4",
            "FUN_0800245c",
            "FUN_080008f4",
            "FUN_08004e14",
            "FUN_08002ea0",
            "FUN_08001424",
            "FUN_08004c64",
            "FUN_080041e4",
            "FUN_080003e4",
            "FUN_08007092",
            "FUN_08002f28",
            "FUN_08004384",
            "FUN_080009a0",
            "FUN_08003298",
            "FUN_08004028",
            "FUN_0800708c",
            "FUN_08002520",
            "FUN_08000464",
            "FUN_08002404",
            "FUN_08001436",
            "FUN_08004a30",
            "FUN_08004c70",
            "FUN_08000904",
            "FUN_0800299a",
            "FUN_080052e4",
            "FUN_08000f94",
            "FUN_080014e2",
            "FUN_0800142e",
            "FUN_08004d8c",
            "FUN_080009b4",
            "FUN_08003068",
            "FUN_08000f8c",
            "FUN_08000474",
            "FUN_08000110",
            "FUN_0800709e",
            "FUN_08002ec0",
            "FUN_08006c0c",
            "FUN_0800426c",
            "FUN_08002538",
            "FUN_080040e8",
            "FUN_08000c44",
            "FUN_08000a04",
            "FUN_080025e8",
            "FUN_08003078",
            "FUN_080009c8",
            "FUN_08000f9c",
            "FUN_08002ed4",
            "FUN_08000c3c",
            "FUN_08001214",
            "FUN_08003fc4",
            "FUN_0800209c",
            "FUN_08003f0e",
            "FUN_0800403c",
            "FUN_08000cec",
            "FUN_0800277c",
            "FUN_0800483c",
            "FUN_08001064",
            "FUN_08000892",
            "FUN_08004458",
            "FUN_08004d48",
            "FUN_08002280",
            "FUN_08001194",
            "FUN_08004348",
            "FUN_08001078",
            "FUN_08001754",
            "FUN_08002724",
            "FUN_080043f0",
            "FUN_08000428",
            "FUN_08004ccc",
            "FUN_08004c30",
            "FUN_0800729c",
            "FUN_080041ae",
            "FUN_080053d4",
            "FUN_080041c4",
            "FUN_0800567c",
            "FUN_0800458c",
            "FUN_08000ffc",
            "FUN_080016f4",
            "FUN_080025a4",
            "FUN_08003034",
            "FUN_08004e7c",
            "FUN_08001530",
            "FUN_0800411c",
            "FUN_080040b8",
            "FUN_08004490",
            "FUN_08000e54",
            "FUN_080015e8"
        ],
        [
            "FUN_08000724",
            "FUN_080004d0"
        ],
        [
            "FUN_08001128",
            "FUN_08004a84",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8"
        ]
    ],
    "locked_functions": []
}