{
    "functions": {
        "FUN_0800192c": {
            "renaming": {
                "FUN_0800192c": "update_flag_value_0800192c"
            },
            "code": "\nvoid updateFlagValue_0800192c(void)\n\n{\n  if ((PTR_DAT_08001954[0x28] & 8) == 0) {\n    *(undefined4 *)PTR_DAT_08001958 = 0;\n  }\n  else {\n    *(undefined4 *)PTR_DAT_08001958 = 1;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800192c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "update_flag_value_0800192c"
        },
        "FUN_08006950": {
            "renaming": {
                "FUN_08006950": "update_register_value_08006950",
                "param_1": "inputValue"
            },
            "code": "\nvoid updateRegisterValue_08006950(uint inputValue)\n\n{\n  *(uint *)(DAT_08006994 + 0xc) =\n       *(uint *)(DAT_08006994 + 0xc) & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006950",
            "calling": [
                "FUN_08006ce0"
            ],
            "imported": false,
            "current_name": "update_register_value_08006950"
        },
        "FUN_08008ba0": {
            "renaming": {
                "FUN_08008ba0": "calculate_result_08008ba0",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "intermediate_result",
                "iVar2": "temp_var",
                "uVar3": "shift_amount"
            },
            "code": "\nuint calculate_result_08008ba0(uint input_1,uint input_2)\n\n{\n  uint intermediate_result;\n  int temp_var;\n  uint shift_amount;\n  \n  temp_var = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < temp_var) {\n      return 0;\n    }\n    intermediate_result = temp_var >> 0x15;\n    shift_amount = -intermediate_result - 0x3e1;\n    if (intermediate_result < 0xfffffc20 && shift_amount != 0) {\n      intermediate_result = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        intermediate_result = -intermediate_result;\n      }\n      return intermediate_result;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008ba0",
            "calling": [
                "FUN_08009d78",
                "FUN_080095b8",
                "FUN_0800adf0",
                "FUN_0800a5a0",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a348"
            ],
            "imported": false,
            "current_name": "calculate_result_08008ba0"
        },
        "FUN_08005a5c": {
            "renaming": {
                "FUN_08005a5c": "do_nothing_08005a5c"
            },
            "code": "\nvoid do_nothing_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a5c",
            "calling": [
                "FUN_080059f8"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a5c"
        },
        "FUN_08005984": {
            "renaming": {
                "FUN_08005984": "check_and_trigger_interrupt_08005984",
                "param_1": "interruptType",
                "uVar1": "result"
            },
            "code": "\nundefined4 checkAndTriggerInterrupt_08005984(undefined4 interruptType)\n\n{\n  undefined4 result;\n  \n  if (*(int *)PTR_DAT_080059b0 == 0) {\n    result = trigger_software_interrupt_0800597c(1,interruptType,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0800597c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005984",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "check_and_trigger_interrupt_08005984"
        },
        "FUN_08007a10": {
            "renaming": {
                "FUN_08007a10": "update_status_flag_08007a10",
                "param_1": "inputValue"
            },
            "code": "\nvoid updateStatusFlag_08007a10(int inputValue)\n\n{\n  if (inputValue == 0x40000000) {\n    *(uint *)(DAT_08007a64 + 0x40) = *(uint *)(DAT_08007a64 + 0x40) | 1;\n  }\n  else if (inputValue == DAT_08007a68) {\n    *(uint *)(DAT_08007a64 + 0x40) = *(uint *)(DAT_08007a64 + 0x40) | 2;\n  }\n  else if (inputValue == DAT_08007a6c) {\n    *(uint *)(DAT_08007a64 + 0x40) = *(uint *)(DAT_08007a64 + 0x40) | 4;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a10",
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "imported": false,
            "current_name": "update_status_flag_08007a10"
        },
        "FUN_0800856c": {
            "renaming": {
                "FUN_0800856c": "calculate_ulonglong_0800856c",
                "param_1": "input_value",
                "uVar1": "lower_bits",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeroes",
                "uVar5": "adjusted_zeroes",
                "uVar6": "sign_bit",
                "in_r12": "complementary_shift",
                "bVar7": "is_negative_shift",
                "bVar8": "is_zero_shift",
                "bVar9": "shift_overflow"
            },
            "code": "\nulonglong calculate_ulonglong_0800856c(uint input_value)\n\n{\n  uint lower_bits;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeroes;\n  uint adjusted_zeroes;\n  uint sign_bit;\n  uint complementary_shift;\n  bool is_negative_shift;\n  bool is_zero_shift;\n  bool shift_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input = -input_value;\n  }\n  lower_bits = 0;\n  leading_zeroes = count_leading_zeroes(abs_input);\n  adjusted_zeroes = leading_zeroes + 0x15;\n  shift_overflow = SBORROW4(adjusted_zeroes,0x20);\n  shift_amount = leading_zeroes - 0xb;\n  is_negative_shift = (int)shift_amount < 0;\n  is_zero_shift = shift_amount == 0;\n  if ((int)adjusted_zeroes < 0x20) {\n    shift_overflow = SCARRY4(shift_amount,0xc);\n    leading_zeroes = leading_zeroes + 1;\n    is_negative_shift = leading_zeroes < 0;\n    is_zero_shift = leading_zeroes == 0;\n    shift_amount = adjusted_zeroes;\n    if (!is_zero_shift && is_negative_shift == shift_overflow) {\n      lower_bits = abs_input << (adjusted_zeroes & 0xff);\n      abs_input = abs_input >> (0xcU - leading_zeroes & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero_shift || is_negative_shift != shift_overflow) {\n    complementary_shift = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero_shift || is_negative_shift != shift_overflow) {\n    abs_input = abs_input | 0U >> (complementary_shift & 0xff);\n  }\n  if (is_zero_shift || is_negative_shift != shift_overflow) {\n    lower_bits = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if ((int)adjusted_zeroes < 0x433) {\n    return CONCAT44(abs_input + (0x432 - adjusted_zeroes) * 0x100000 | sign_bit,lower_bits);\n  }\n  shift_amount = ~(0x432 - adjusted_zeroes);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeroes = shift_amount - 0x13;\n  if (leading_zeroes == 0 || leading_zeroes < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    lower_bits >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,lower_bits >> (0x20 - (0xcU - leading_zeroes) & 0xff) | abs_input << (0xcU - leading_zeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800856c",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_ulonglong_0800856c"
        },
        "FUN_08008b00": {
            "renaming": {
                "FUN_08008b00": "process_data_08008b00",
                "param_1": "inputData"
            },
            "code": "\nundefined4 processData_08008b00(undefined4 inputData)\n\n{\n  compare_and_combine_08008a74();\n  return inputData;\n}\n\n",
            "called": [
                "FUN_08008a74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b00",
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "imported": false,
            "current_name": "process_data_08008b00"
        },
        "FUN_0800585c": {
            "renaming": {
                "FUN_0800585c": "update_and_process_data_0800585c"
            },
            "code": "\nvoid updateAndProcessData_0800585c(void)\n\n{\n  if (PTR_DAT_08005878[1] == '\\x02') {\n    PTR_DAT_08005878[1] = 3;\n    process_data_08005790();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005790"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800585c",
            "calling": [
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_and_process_data_0800585c"
        },
        "FUN_0800597c": {
            "renaming": {
                "FUN_0800597c": "trigger_software_interrupt_0800597c"
            },
            "code": "\nvoid triggerSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800597c",
            "calling": [
                "FUN_08005984"
            ],
            "imported": false,
            "current_name": "trigger_software_interrupt_0800597c"
        },
        "FUN_08009798": {
            "renaming": {
                "FUN_08009798": "process_numbers_08009798",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "unused_param3",
                "param_4": "unused_param4",
                "uVar1": "shifted_number",
                "uVar2": "temp_number",
                "lVar3": "result"
            },
            "code": "\nlonglong process_numbers_08009798(uint number1,uint number2,undefined4 unused_param3,undefined4 unused_param4)\n\n{\n  uint shifted_number;\n  uint temp_number;\n  longlong result;\n  \n  temp_number = (number2 << 1) >> 0x15;\n  shifted_number = temp_number - 0x3ff;\n  if ((int)shifted_number < 0x14) {\n    if ((int)shifted_number < 0) {\n      return ((ulonglong)number2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(number2 & ~(DAT_08009814 >> (shifted_number & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_number < 0x34) {\n      return CONCAT44(number2,number1 & ~(0xffffffffU >> (temp_number - 0x413 & 0xff)));\n    }\n    if (shifted_number != 0x400) {\n      return CONCAT44(number2,number1);\n    }\n    result = calculate_result_080082d4(number1,number2,number1,number2,unused_param4);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009798",
            "calling": [
                "FUN_08004e30",
                "FUN_08003b98",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_numbers_08009798"
        },
        "FUN_08008cd8": {
            "renaming": {
                "FUN_08008cd8": "process_numbers_08008cd8",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "unused_param",
                "param_4": "temp_param",
                "iVar1": "intVar1",
                "uVar2": "uintVar2",
                "uVar3": "uintVar3",
                "uVar4": "uintVar4",
                "uVar5": "uintVar5",
                "uVar6": "uintVar6",
                "iVar7": "intVar7",
                "bVar8": "boolVar8"
            },
            "code": "\nuint process_numbers_08008cd8(uint number1,uint number2,undefined4 unused_param,uint temp_param)\n\n{\n  int intVar1;\n  uint uintVar2;\n  uint uintVar3;\n  uint uintVar4;\n  uint uintVar5;\n  uint uintVar6;\n  int intVar7;\n  bool boolVar8;\n  \n  uintVar2 = number2 ^ 0x80000000;\n  uintVar4 = number1 << 1;\n  boolVar8 = uintVar4 == 0;\n  if (!boolVar8) {\n    temp_param = number2 << 1;\n    boolVar8 = temp_param == 0;\n  }\n  if (!boolVar8) {\n    boolVar8 = uintVar4 == temp_param;\n  }\n  intVar7 = (int)uintVar4 >> 0x18;\n  if (!boolVar8) {\n    boolVar8 = intVar7 == -1;\n  }\n  if (!boolVar8) {\n    boolVar8 = (int)temp_param >> 0x18 == -1;\n  }\n  if (boolVar8) {\n    intVar1 = (int)(number2 << 1) >> 0x18;\n    if (intVar7 == -1 || intVar1 == -1) {\n      uintVar4 = uintVar2;\n      if (intVar7 == -1) {\n        uintVar4 = number1;\n      }\n      if (intVar7 != -1 || intVar1 != -1) {\n        uintVar2 = uintVar4;\n      }\n      boolVar8 = (uintVar4 & 0x7fffff) == 0;\n      if (boolVar8) {\n        boolVar8 = (uintVar2 & 0x7fffff) == 0;\n      }\n      if (boolVar8) {\n        boolVar8 = uintVar4 == uintVar2;\n      }\n      if (!boolVar8) {\n        uintVar4 = uintVar4 | 0x400000;\n      }\n      return uintVar4;\n    }\n    if (((number1 ^ uintVar2) & 0x7fffffff) != 0) {\n      if (uintVar4 == 0) {\n        number1 = uintVar2;\n      }\n      return number1;\n    }\n    if (number1 != uintVar2) {\n      return 0;\n    }\n    if ((uintVar4 & 0xff000000) == 0) {\n      uintVar2 = number1 << 1;\n      if ((number1 & 0x80000000) != 0) {\n        uintVar2 = uintVar2 | 0x80000000;\n      }\n      return uintVar2;\n    }\n    if (uintVar4 < 0xfe000000) {\n      return number1 + 0x800000;\n    }\n    number1 = number1 & 0x80000000;\nLAB_08008e12:\n    return number1 | 0x7f800000;\n  }\n  uintVar4 = uintVar4 >> 0x18;\n  temp_param = temp_param >> 0x18;\n  uintVar6 = temp_param - uintVar4;\n  boolVar8 = uintVar6 != 0;\n  uintVar5 = uintVar4;\n  if (boolVar8 && uintVar4 <= temp_param) {\n    uintVar5 = uintVar4 + uintVar6;\n  }\n  if (boolVar8 && uintVar4 <= temp_param) {\n    uintVar2 = uintVar2 ^ number1;\n  }\n  if (boolVar8 && uintVar4 <= temp_param) {\n    number1 = number1 ^ uintVar2;\n  }\n  if (boolVar8 && uintVar4 <= temp_param) {\n    uintVar2 = uintVar2 ^ number1;\n  }\n  if (temp_param < uintVar4) {\n    uintVar6 = -uintVar6;\n  }\n  if (0x19 < uintVar6) {\n    return number1;\n  }\n  uintVar4 = number1 & 0xffffff | 0x800000;\n  if ((number1 & 0x80000000) != 0) {\n    uintVar4 = -uintVar4;\n  }\n  uintVar3 = uintVar2 & 0xffffff | 0x800000;\n  if ((uintVar2 & 0x80000000) != 0) {\n    uintVar3 = -uintVar3;\n  }\n  if (uintVar5 == uintVar6) {\n    uintVar3 = uintVar3 ^ 0x800000;\n    if (uintVar5 == 0) {\n      uintVar4 = uintVar4 ^ 0x800000;\n      uintVar5 = 1;\n    }\n    else {\n      uintVar6 = uintVar6 - 1;\n    }\n  }\n  uintVar4 = uintVar4 + ((int)uintVar3 >> (uintVar6 & 0xff));\n  uintVar3 = uintVar3 << (0x20 - uintVar6 & 0xff);\n  number1 = uintVar4 & 0x80000000;\n  if ((int)uintVar4 < 0) {\n    boolVar8 = uintVar3 != 0;\n    uintVar3 = -uintVar3;\n    uintVar4 = -uintVar4 - (uint)boolVar8;\n  }\n  if (uintVar4 < 0x800000) {\n    uintVar2 = uintVar3 & 0x80000000;\n    uintVar3 = uintVar3 << 1;\n    uintVar4 = uintVar4 * 2 + (uint)(uintVar2 != 0);\n    uintVar2 = uintVar5 - 2;\n    if (uintVar5 - 1 == 0 || uintVar4 < 0x800000) {\n      intVar7 = count_leading_zeroes(uintVar4);\n      uintVar6 = intVar7 - 8;\n      uintVar4 = uintVar4 << (uintVar6 & 0xff);\n      if ((int)uintVar2 < (int)uintVar6) {\n        uintVar4 = uintVar4 >> (-(uintVar2 - uintVar6) & 0xff);\n      }\n      else {\n        uintVar4 = uintVar4 + (uintVar2 - uintVar6) * 0x800000;\n      }\n      return uintVar4 | number1;\n    }\n  }\n  else {\n    uintVar2 = uintVar5 - 1;\n    if (0xffffff < uintVar4) {\n      uintVar2 = uintVar4 & 1;\n      uintVar4 = uintVar4 >> 1;\n      uintVar3 = (uint)(uintVar2 != 0) << 0x1f | uintVar3 >> 1;\n      uintVar2 = uintVar5;\n      if (0xfd < uintVar5) goto LAB_08008e12;\n    }\n  }\n  uintVar4 = uintVar4 + uintVar2 * 0x800000 + (uint)(0x7fffffff < uintVar3);\n  if (uintVar3 == 0x80000000) {\n    uintVar4 = uintVar4 & 0xfffffffe;\n  }\n  return uintVar4 | number1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008cd8",
            "calling": [
                "FUN_08004940",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08003004",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_08002908",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_numbers_08008cd8"
        },
        "FUN_08007930": {
            "renaming": {
                "FUN_08007930": "update_registers_08007930",
                "puVar1": "registerArrayPtr",
                "uVar2": "combinedBits",
                "uVar3": "bitwiseOrResult",
                "uVar4": "previousBitwiseOr",
                "iVar5": "registerIndex"
            },
            "code": "\nvoid updateRegisters_08007930(void)\n\n{\n  undefined *registerArrayPtr;\n  undefined4 combinedBits;\n  uint bitwiseOrResult;\n  uint previousBitwiseOr;\n  int registerIndex;\n  \n  registerArrayPtr = PTR_DAT_080079b8;\n  if (*(int *)PTR_DAT_080079bc != 0) {\n    registerIndex = *(int *)(PTR_DAT_080079b8 + 0x14);\n    combinedBits = combine_bits_from_memory_08007884();\n    *(undefined4 *)(registerArrayPtr + registerIndex * 4) = combinedBits;\n    if (*(int *)(registerArrayPtr + 0x14) == 3) {\n      registerIndex = 0;\n    }\n    else {\n      registerIndex = *(int *)(registerArrayPtr + 0x14) + 1;\n    }\n    *(int *)(registerArrayPtr + 0x14) = registerIndex;\n    bitwiseOrResult = calculate_bitwise_or_080078f4();\n    if (bitwiseOrResult != *(uint *)(registerArrayPtr + 0x10)) {\n      previousBitwiseOr = *(uint *)(registerArrayPtr + 0x10);\n      if ((~*(uint *)(registerArrayPtr + 0x10) & bitwiseOrResult) != 0) {\n        process_register_updates_080074c8(~*(uint *)(registerArrayPtr + 0x10) & bitwiseOrResult);\n      }\n      if ((~bitwiseOrResult & previousBitwiseOr) != 0) {\n        set_bit_if_odd_08007520(~bitwiseOrResult & previousBitwiseOr);\n      }\n      *(uint *)(registerArrayPtr + 0x10) = bitwiseOrResult;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884",
                "FUN_080078f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007930",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "update_registers_08007930"
        },
        "FUN_080082ba": {
            "renaming": {
                "FUN_080082ba": "do_nothing_080082ba"
            },
            "code": "\nvoid do_nothing_080082ba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082ba",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_080082ba"
        },
        "FUN_08000188": {
            "renaming": {
                "FUN_08000188": "initialize_function_pointer_08000188",
                "param_1": "function_pointer"
            },
            "code": "\nundefined * initialize_function_pointer_08000188(undefined *function_pointer)\n\n{\n  if (*PTR_DAT_080001a0 == '\\0') {\n    if (DAT_080001a4 != 0) {\n      function_pointer = PTR_FUN_080001a8;\n    }\n    *PTR_DAT_080001a0 = 1;\n  }\n  return function_pointer;\n}\n\n",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000188",
            "calling": [],
            "imported": false,
            "current_name": "initialize_function_pointer_08000188"
        },
        "FUN_080082d0": {
            "renaming": {
                "FUN_080082d0": "floating_point_operation_080082d0",
                "param_1": "inputA_low",
                "param_2": "inputA_high",
                "param_3": "inputB_low",
                "param_4": "inputB_high",
                "iVar1": "tempVar1",
                "bVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "bVar13": "boolVar13",
                "bVar14": "boolVar14",
                "bVar15": "boolVar15"
            },
            "code": "\nulonglong floatingPointOperation_080082d0(uint inputA_low,uint inputA_high,uint inputB_low,uint inputB_high)\n\n{\n  int tempVar1;\n  byte tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  bool boolVar13;\n  bool boolVar14;\n  bool boolVar15;\n  \n  tempVar6 = inputB_high ^ 0x80000000;\n  tempVar9 = inputA_high << 1;\n  inputB_high = inputB_high << 1;\n  boolVar13 = ((inputA_high ^ tempVar6) & 0x7fffffff) == 0;\n  boolVar14 = boolVar13 && inputA_low == inputB_low;\n  if (!boolVar13 || inputA_low != inputB_low) {\n    boolVar14 = (tempVar9 | inputA_low) == 0;\n  }\n  if (!boolVar14) {\n    boolVar14 = (inputB_high | inputB_low) == 0;\n  }\n  tempVar8 = (int)tempVar9 >> 0x15;\n  if (!boolVar14) {\n    boolVar14 = tempVar8 == -1;\n  }\n  tempVar1 = (int)inputB_high >> 0x15;\n  if (!boolVar14) {\n    boolVar14 = tempVar1 == -1;\n  }\n  if (boolVar14) {\n    if (tempVar8 == -1 || tempVar1 == -1) {\n      tempVar9 = tempVar6;\n      tempVar11 = inputB_low;\n      if (tempVar8 == -1) {\n        tempVar9 = inputA_high;\n        tempVar11 = inputA_low;\n      }\n      if (tempVar8 != -1 || tempVar1 != -1) {\n        inputB_low = tempVar11;\n        tempVar6 = tempVar9;\n      }\n      boolVar14 = (tempVar11 | tempVar9 << 0xc) == 0;\n      if (boolVar14) {\n        boolVar14 = (inputB_low | tempVar6 << 0xc) == 0;\n      }\n      if (boolVar14) {\n        boolVar14 = tempVar9 == tempVar6;\n      }\n      if (!boolVar14) {\n        tempVar9 = tempVar9 | 0x80000;\n      }\n      return CONCAT44(tempVar9,tempVar11);\n    }\n    if (((inputA_high ^ tempVar6) & 0x7fffffff) != 0 || inputA_low != inputB_low) {\n      if ((tempVar9 | inputA_low) == 0) {\n        inputA_low = inputB_low;\n        inputA_high = tempVar6;\n      }\n      return CONCAT44(inputA_high,inputA_low);\n    }\n    if (inputA_high != tempVar6) {\n      return 0;\n    }\n    if (tempVar9 >> 0x15 == 0) {\n      boolVar14 = (inputA_low & 0x80000000) != 0;\n      tempVar6 = inputA_high * 2 + (uint)boolVar14;\n      if (CARRY4(inputA_high,inputA_high) || CARRY4(inputA_high * 2,(uint)boolVar14)) {\n        tempVar6 = tempVar6 | 0x80000000;\n      }\n      return CONCAT44(tempVar6,inputA_low << 1);\n    }\n    if (tempVar9 < 0xffc00000) {\n      return CONCAT44(inputA_high + 0x100000,inputA_low);\n    }\n    inputA_high = inputA_high & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(inputA_high | 0x7ff00000) << 0x20;\n  }\n  tempVar9 = tempVar9 >> 0x15;\n  inputB_high = inputB_high >> 0x15;\n  tempVar11 = inputB_high - tempVar9;\n  boolVar14 = tempVar11 != 0;\n  if (inputB_high < tempVar9) {\n    tempVar11 = -tempVar11;\n  }\n  tempVar10 = inputA_low;\n  tempVar7 = inputA_high;\n  if (boolVar14 && tempVar9 <= inputB_high) {\n    tempVar9 = tempVar9 + tempVar11;\n    tempVar10 = inputB_low;\n    tempVar7 = tempVar6;\n    inputB_low = inputA_low;\n    tempVar6 = inputA_high;\n  }\n  if (0x36 < tempVar11) {\n    return CONCAT44(tempVar7,tempVar10);\n  }\n  tempVar4 = tempVar7 & 0xfffff | 0x100000;\n  if ((tempVar7 & 0x80000000) != 0) {\n    boolVar14 = tempVar10 != 0;\n    tempVar10 = -tempVar10;\n    tempVar4 = -tempVar4 - (uint)boolVar14;\n  }\n  tempVar7 = tempVar6 & 0xfffff | 0x100000;\n  if ((tempVar6 & 0x80000000) != 0) {\n    boolVar14 = inputB_low != 0;\n    inputB_low = -inputB_low;\n    tempVar7 = -tempVar7 - (uint)boolVar14;\n  }\n  if (tempVar9 == tempVar11) {\n    tempVar7 = tempVar7 ^ 0x100000;\n    if (tempVar9 == 0) {\n      tempVar4 = tempVar4 ^ 0x100000;\n      tempVar9 = 1;\n    }\n    else {\n      tempVar11 = tempVar11 - 1;\n    }\n  }\n  tempVar6 = -tempVar11 + 0x20;\n  if ((int)tempVar11 < 0x21) {\n    tempVar12 = inputB_low << (tempVar6 & 0xff);\n    inputB_low = inputB_low >> (tempVar11 & 0xff);\n    tempVar3 = tempVar10 + inputB_low;\n    tempVar5 = tempVar7 << (tempVar6 & 0xff);\n    tempVar6 = tempVar3 + tempVar5;\n    tempVar4 = tempVar4 + CARRY4(tempVar10,inputB_low) + ((int)tempVar7 >> (tempVar11 & 0xff)) +\n            (uint)CARRY4(tempVar3,tempVar5);\n  }\n  else {\n    tempVar12 = tempVar7 << (-tempVar11 + 0x40 & 0xff);\n    if (inputB_low != 0) {\n      tempVar12 = tempVar12 | 2;\n    }\n    tempVar7 = (int)tempVar7 >> (tempVar11 - 0x20 & 0xff);\n    tempVar6 = tempVar10 + tempVar7;\n    tempVar4 = tempVar4 + ((int)tempVar7 >> 0x1f) + (uint)CARRY4(tempVar10,tempVar7);\n  }\n  inputA_high = tempVar4 & 0x80000000;\n  tempVar11 = tempVar4;\n  if ((int)tempVar4 < 0) {\n    boolVar14 = tempVar12 == 0;\n    tempVar12 = -tempVar12;\n    tempVar11 = -tempVar6;\n    tempVar6 = -(uint)!boolVar14 - tempVar6;\n    tempVar11 = -(uint)(boolVar14 <= tempVar11) - tempVar4;\n  }\n  if (0xfffff < tempVar11) {\n    tempVar10 = tempVar9 - 1;\n    if (0x1fffff < tempVar11) {\n      tempVar10 = tempVar11 & 1;\n      tempVar11 = tempVar11 >> 1;\n      tempVar2 = (byte)tempVar6;\n      tempVar6 = (uint)(tempVar10 != 0) << 0x1f | tempVar6 >> 1;\n      tempVar12 = (uint)(tempVar2 & 1) << 0x1f | tempVar12 >> 1;\n      tempVar10 = tempVar9;\n      if (0xffbfffff < tempVar9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    boolVar14 = 0x7fffffff < tempVar12;\n    if (tempVar12 == 0x80000000) {\n      boolVar14 = (tempVar6 & 1) != 0;\n    }\n    return CONCAT44(tempVar11 + tempVar10 * 0x100000 + (uint)CARRY4(tempVar6,(uint)boolVar14) | inputA_high,\n                    tempVar6 + boolVar14);\n  }\n  boolVar13 = (tempVar12 & 0x80000000) != 0;\n  tempVar12 = tempVar12 << 1;\n  tempVar10 = tempVar6 * 2;\n  boolVar14 = CARRY4(tempVar6,tempVar6);\n  tempVar6 = tempVar6 * 2 + (uint)boolVar13;\n  tempVar11 = tempVar11 * 2 + (uint)(boolVar14 || CARRY4(tempVar10,(uint)boolVar13));\n  tempVar10 = tempVar9 - 2;\n  if (tempVar9 - 1 != 0 && 0xfffff < tempVar11) goto LAB_080083e0;\n  tempVar7 = tempVar6;\n  tempVar9 = tempVar11;\n  if (tempVar11 == 0) {\n    tempVar7 = 0;\n    tempVar9 = tempVar6;\n  }\n  tempVar8 = count_leading_zeroes(tempVar9);\n  if (tempVar11 == 0) {\n    tempVar8 = tempVar8 + 0x20;\n  }\n  tempVar11 = tempVar8 - 0xb;\n  boolVar15 = SBORROW4(tempVar11,0x20);\n  tempVar6 = tempVar8 - 0x2b;\n  boolVar14 = (int)tempVar6 < 0;\n  boolVar13 = tempVar6 == 0;\n  if ((int)tempVar11 < 0x20) {\n    boolVar15 = SCARRY4(tempVar6,0xc);\n    tempVar8 = tempVar8 + -0x1f;\n    boolVar14 = tempVar8 < 0;\n    boolVar13 = tempVar8 == 0;\n    tempVar6 = tempVar11;\n    if (!boolVar13 && boolVar14 == boolVar15) {\n      tempVar7 = tempVar9 << (tempVar11 & 0xff);\n      tempVar9 = tempVar9 >> (0xcU - tempVar8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (boolVar13 || boolVar14 != boolVar15) {\n    tempVar12 = 0x20 - tempVar6;\n  }\n  tempVar9 = tempVar9 << (tempVar6 & 0xff);\n  if (boolVar13 || boolVar14 != boolVar15) {\n    tempVar9 = tempVar9 | tempVar7 >> (tempVar12 & 0xff);\n  }\n  if (boolVar13 || boolVar14 != boolVar15) {\n    tempVar7 = tempVar7 << (tempVar6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)tempVar11 <= (int)tempVar10) {\n    return CONCAT44(tempVar9 + (tempVar10 - tempVar11) * 0x100000 | inputA_high,tempVar7);\n  }\n  tempVar6 = ~(tempVar10 - tempVar11);\n  if ((int)tempVar6 < 0x1f) {\n    tempVar8 = tempVar6 - 0x13;\n    if (tempVar8 != 0 && tempVar8 < 0 == SCARRY4(tempVar6 - 0x1f,0xc)) {\n      return CONCAT44(tempVar4,tempVar7 >> (0x20 - (0xcU - tempVar8) & 0xff) | tempVar9 << (0xcU - tempVar8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tempVar6 = tempVar6 + 1;\n    return CONCAT44(inputA_high | tempVar9 >> (tempVar6 & 0xff),\n                    tempVar7 >> (tempVar6 & 0xff) | tempVar9 << (0x20 - tempVar6 & 0xff));\n  }\n  return CONCAT44(tempVar4,tempVar9 >> (tempVar6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082d0",
            "calling": [
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_0800a1bc",
                "FUN_080096e8",
                "FUN_08004940",
                "FUN_0800adf0",
                "FUN_08009b24",
                "FUN_08009410",
                "FUN_0800a5a0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_0800a348"
            ],
            "imported": false,
            "current_name": "floating_point_operation_080082d0"
        },
        "FUN_08009318": {
            "renaming": {
                "FUN_08009318": "calculate_longlong_value_08009318",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "is_processed",
                "uVar2": "shifted_value",
                "uVar3": "temp_value",
                "bVar4": "carry_flag",
                "uVar5": "calculation_result",
                "lVar6": "final_result"
            },
            "code": "\nlonglong calculate_longlong_value_08009318(uint input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int is_processed;\n  uint shifted_value;\n  uint temp_value;\n  bool carry_flag;\n  undefined8 calculation_result;\n  longlong final_result;\n  \n  temp_value = (input_2 << 1) >> 0x15;\n  shifted_value = temp_value - 0x3ff;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      calculation_result = calculate_result_080082d4(input_1,input_2,DAT_08009400,DAT_08009404,input_4);\n      is_processed = is_data_processed_08008b60((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_processed != 0) {\n        if ((int)input_2 < 0) {\n          final_result = -0x8000000000000000;\n        }\n        else {\n          input_1 = input_1 | input_2;\n          final_result = CONCAT44(input_1,input_1);\n          if (input_1 != 0) {\n            final_result = (ulonglong)DAT_0800940c << 0x20;\n          }\n        }\n      }\n    }\n    else {\n      temp_value = DAT_08009408 >> (shifted_value & 0xff);\n      final_result = CONCAT44(input_2,input_1);\n      if ((input_2 & temp_value | input_1) != 0) {\n        calculation_result = calculate_result_080082d4(input_1,input_2,DAT_08009400,DAT_08009404,input_4);\n        is_processed = is_data_processed_08008b60((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0);\n        final_result = CONCAT44(input_2,input_1);\n        if (is_processed != 0) {\n          if (0 < (int)input_2) {\n            input_2 = input_2 + (0x100000 >> (shifted_value & 0xff));\n          }\n          final_result = (ulonglong)(input_2 & ~temp_value) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_value < 0x34) {\n    temp_value = 0xffffffff >> (temp_value - 0x413 & 0xff);\n    final_result = CONCAT44(input_2,input_1);\n    if ((temp_value & input_1) != 0) {\n      calculation_result = calculate_result_080082d4(input_1,input_2,DAT_08009400,DAT_08009404,input_4);\n      is_processed = is_data_processed_08008b60((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_processed != 0) {\n        if (0 < (int)input_2) {\n          if (shifted_value == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shifted_value = 1 << (0x34 - shifted_value & 0xff);\n            carry_flag = CARRY4(shifted_value,input_1);\n            input_1 = shifted_value + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_2,input_1 & ~temp_value);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_2,input_1);\n    if (shifted_value == 0x400) {\n      final_result = calculate_result_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009318",
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_longlong_value_08009318"
        },
        "FUN_080018cc": {
            "renaming": {
                "FUN_080018cc": "update_register_value_080018cc",
                "param_1": "inputValue"
            },
            "code": "\nvoid updateRegisterValue_080018cc(uint inputValue)\n\n{\n  *(uint *)(DAT_080018f8 + 0x14) = inputValue | *(uint *)(DAT_080018f8 + 0x14) & 0xfffffaaf;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018cc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "update_register_value_080018cc"
        },
        "FUN_080079e0": {
            "renaming": {
                "FUN_080079e0": "set_bit_at_index_080079e0",
                "param_1": "bitIndex"
            },
            "code": "\nvoid setBitAtIndex_080079e0(byte bitIndex)\n\n{\n  *(int *)(DAT_08007a0c + ((uint)(int)(char)bitIndex >> 5) * 4) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079e0",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080079e0"
        },
        "FUN_08006a58": {
            "renaming": {
                "FUN_08006a58": "set_bit_at_index_08006a58",
                "param_1": "bitIndex"
            },
            "code": "\nvoid setBitAtIndex_08006a58(byte bitIndex)\n\n{\n  *(int *)(DAT_08006a88 + (((uint)(int)(char)bitIndex >> 5) + 0x40) * 4) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a58",
            "calling": [
                "FUN_08006dc4"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_08006a58"
        },
        "FUN_08005a84": {
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84"
            },
            "code": "\nundefined4 get_data_value_08005a84(void)\n\n{\n  return *(undefined4 *)PTR_DAT_08005a94;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a84",
            "calling": [
                "FUN_08005a98",
                "FUN_08007756",
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08005cec"
            ],
            "imported": false,
            "current_name": "get_data_value_08005a84"
        },
        "FUN_08008b10": {
            "renaming": {
                "FUN_08008b10": "is_data_processed_08008b10",
                "in_ZR": "dataStatus"
            },
            "code": "\nbool isDataProcessed_08008b10(void)\n\n{\n  char dataStatus;\n  \n  process_data_08008b00();\n  return dataStatus != '\\0';\n}\n\n",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b10",
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "is_data_processed_08008b10"
        },
        "FUN_08004e30": {
            "renaming": {
                "FUN_08004e30": "process_parameters_08004e30",
                "param_1": "parameter_type",
                "param_2": "parameter_value",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "iVar4": "check_status",
                "uVar5": "transformed_value"
            },
            "code": "\nundefined4 process_parameters_08004e30(int parameter_type,uint parameter_value)\n\n{\n  undefined result_1;\n  undefined2 result_2;\n  undefined4 result_3;\n  int check_status;\n  undefined8 transformed_value;\n  \n  switch(parameter_type) {\n  case 0:\n  case 1:\n  case 2:\n    check_status = check_parameters_status_0800923c(parameter_value,0);\n    if (check_status != 0) {\n      return 8;\n    }\n    *(uint *)(PTR_DAT_080051a8 + parameter_type * 4) = parameter_value;\n    break;\n  case 3:\n    check_status = check_status_08009228(parameter_value,DAT_080051ac);\n    if (check_status != 0) {\n      return 9;\n    }\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009654((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_1 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    PTR_DAT_080051a8[0xd] = result_1;\n    break;\n  case 4:\n    *(uint *)(PTR_DAT_080051a8 + 0x10) = parameter_value;\n    break;\n  case 5:\n    *(uint *)(PTR_DAT_080051a8 + 0x14) = parameter_value;\n    break;\n  case 6:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009798((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_2 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x18) = result_2;\n    break;\n  case 7:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009654((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_1 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    PTR_DAT_080051a8[0x3c] = result_1;\n    break;\n  case 8:\n    result_3 = floating_point_multiplication_08008eec(parameter_value,DAT_080051b0);\n    result_3 = floating_point_multiplication_08008eec(result_3,DAT_080051b0);\n    *(undefined4 *)(PTR_DAT_080051a8 + 0x20) = result_3;\n    break;\n  case 9:\n    *(uint *)(PTR_DAT_080051a8 + 0x24) = parameter_value & 0x7fffffff;\n    break;\n  case 10:\n    *(uint *)(PTR_DAT_080051a8 + 0x1c) = parameter_value;\n    break;\n  case 0xb:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009654((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_1 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    PTR_DAT_080051a8[0x3e] = result_1;\n    break;\n  case 0xc:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009654((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_1 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    PTR_DAT_080051a8[0x3d] = result_1;\n    break;\n  case 0xd:\n    check_status = check_non_zero_result_08009214(parameter_value,0);\n    if (check_status == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 1;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfe;\n    }\n    break;\n  case 0xe:\n    check_status = check_non_zero_result_08009214(parameter_value,0);\n    if (check_status == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 2;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfd;\n    }\n    break;\n  case 0xf:\n    check_status = check_non_zero_result_08009214(parameter_value,0);\n    if (check_status == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 4;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xfb;\n    }\n    break;\n  case 0x10:\n    check_status = check_non_zero_result_08009214(parameter_value,0);\n    if (check_status == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 8;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xf7;\n    }\n    update_flag_value_0800192c();\n    break;\n  case 0x11:\n    check_status = check_non_zero_result_08009214(parameter_value,0);\n    if (check_status == 0) {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] | 0x10;\n    }\n    else {\n      PTR_DAT_080051a8[0x28] = PTR_DAT_080051a8[0x28] & 0xef;\n    }\n    break;\n  case 0x12:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009798((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_2 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x2a) = result_2;\n    break;\n  case 0x13:\n    *(uint *)(PTR_DAT_080051a8 + 0x2c) = parameter_value;\n    break;\n  case 0x14:\n    *(uint *)(PTR_DAT_080051a8 + 0x30) = parameter_value;\n    break;\n  case 0x15:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009654((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_2 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x34) = result_2;\n    break;\n  case 0x16:\n    *(uint *)(PTR_DAT_080051a8 + 0x38) = parameter_value;\n    break;\n  case 0x17:\n    transformed_value = calculate_transformed_value_08008590(parameter_value);\n    transformed_value = process_numbers_08009798((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    result_2 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    *(undefined2 *)(PTR_DAT_080051a8 + 0x1a) = result_2;\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_processing_08004c2a();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08009798",
                "FUN_08009214",
                "FUN_0800923c",
                "FUN_08008bf0",
                "FUN_08009654",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008590",
                "FUN_08004c2a",
                "FUN_0800192c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004e30",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_parameters_08004e30"
        },
        "FUN_08008c30": {
            "renaming": {
                "FUN_08008c30": "calculate_result_08008c30",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "in_r12": "tempVar3",
                "bVar4": "condition1",
                "bVar5": "condition2"
            },
            "code": "\nuint calculateResult_08008c30(uint inputValue1,uint inputValue2)\n\n{\n  uint result;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  bool condition1;\n  bool condition2;\n  \n  tempVar1 = inputValue2 * 2;\n  condition2 = tempVar1 < 0x70000000;\n  tempVar2 = tempVar1 + 0x90000000;\n  result = tempVar2;\n  if (!condition2) {\n    tempVar3 = tempVar1 + 0x8fe00000;\n    result = tempVar3;\n  }\n  condition1 = result == 0;\n  if (!condition2 && tempVar2 >= 0x200000) {\n    condition1 = tempVar3 == 0x1fc00000;\n  }\n  if (((condition2 || tempVar2 < 0x200000) || 0x1fc00000 < tempVar3) || condition1) {\n    if ((inputValue2 & 0x40000000) != 0) {\n      if (((int)tempVar1 >> 0x15 == -1) && ((inputValue1 | inputValue2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputValue2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(tempVar1 + 0x92e00000) < 0 != SCARRY4(tempVar2,0x2e00000)) {\n      return inputValue2 & 0x80000000;\n    }\n    tempVar1 = 0x18 - (tempVar1 + 0x92e00000 >> 0x15);\n    result = inputValue1 >> (tempVar1 & 0xff);\n    if (inputValue1 << (0x20 - tempVar1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    tempVar2 = inputValue2 & 0x1fffff | 0x100000;\n    inputValue1 = result | tempVar2 << (0x20 - tempVar1 & 0xff);\n    tempVar2 = (tempVar2 >> (tempVar1 & 0xff)) << 1;\n  }\n  result = (inputValue2 & 0x80000000 | inputValue1 >> 0x1d) + tempVar2 * 4 + (uint)(0x7fffffff < inputValue1 * 8);\n  if (inputValue1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008c30",
            "calling": [
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_08002978",
                "FUN_080046d0",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002638",
                "FUN_0800056c",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_result_08008c30"
        },
        "FUN_080082d4": {
            "renaming": {
                "FUN_080082d4": "calculate_result_080082d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "int_var1",
                "bVar2": "byte_var2",
                "uVar3": "uint_var3",
                "uVar4": "uint_var4",
                "uVar5": "uint_var5",
                "iVar6": "int_var6",
                "uVar7": "uint_var7",
                "uVar8": "uint_var8",
                "uVar9": "uint_var9",
                "uVar10": "uint_var10",
                "uVar11": "uint_var11",
                "uVar12": "uint_var12",
                "bVar13": "bool_var13",
                "bVar14": "bool_var14",
                "bVar15": "bool_var15"
            },
            "code": "\nulonglong calculate_result_080082d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int int_var1;\n  byte byte_var2;\n  uint uint_var3;\n  uint uint_var4;\n  uint uint_var5;\n  int int_var6;\n  uint uint_var7;\n  uint uint_var8;\n  uint uint_var9;\n  uint uint_var10;\n  uint uint_var11;\n  uint uint_var12;\n  bool bool_var13;\n  bool bool_var14;\n  bool bool_var15;\n  \n  uint_var7 = input_2 << 1;\n  uint_var9 = input_4 << 1;\n  bool_var13 = ((input_2 ^ input_4) & 0x7fffffff) == 0;\n  bool_var14 = bool_var13 && input_1 == input_3;\n  if (!bool_var13 || input_1 != input_3) {\n    bool_var14 = (uint_var7 | input_1) == 0;\n  }\n  if (!bool_var14) {\n    bool_var14 = (uint_var9 | input_3) == 0;\n  }\n  int_var6 = (int)uint_var7 >> 0x15;\n  if (!bool_var14) {\n    bool_var14 = int_var6 == -1;\n  }\n  int_var1 = (int)uint_var9 >> 0x15;\n  if (!bool_var14) {\n    bool_var14 = int_var1 == -1;\n  }\n  if (bool_var14) {\n    if (int_var6 == -1 || int_var1 == -1) {\n      uint_var9 = input_4;\n      uint_var7 = input_3;\n      if (int_var6 == -1) {\n        uint_var9 = input_2;\n        uint_var7 = input_1;\n      }\n      if (int_var6 != -1 || int_var1 != -1) {\n        input_3 = uint_var7;\n        input_4 = uint_var9;\n      }\n      bool_var14 = (uint_var7 | uint_var9 << 0xc) == 0;\n      if (bool_var14) {\n        bool_var14 = (input_3 | input_4 << 0xc) == 0;\n      }\n      if (bool_var14) {\n        bool_var14 = uint_var9 == input_4;\n      }\n      if (!bool_var14) {\n        uint_var9 = uint_var9 | 0x80000;\n      }\n      return CONCAT44(uint_var9,uint_var7);\n    }\n    if (((input_2 ^ input_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((uint_var7 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = input_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != input_4) {\n      return 0;\n    }\n    if (uint_var7 >> 0x15 == 0) {\n      bool_var14 = (input_1 & 0x80000000) != 0;\n      uint_var9 = input_2 * 2 + (uint)bool_var14;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)bool_var14)) {\n        uint_var9 = uint_var9 | 0x80000000;\n      }\n      return CONCAT44(uint_var9,input_1 << 1);\n    }\n    if (uint_var7 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  uint_var7 = uint_var7 >> 0x15;\n  uint_var9 = uint_var9 >> 0x15;\n  uint_var10 = uint_var9 - uint_var7;\n  bool_var14 = uint_var10 != 0;\n  if (uint_var9 < uint_var7) {\n    uint_var10 = -uint_var10;\n  }\n  uint_var8 = input_1;\n  uint_var5 = input_2;\n  if (bool_var14 && uint_var7 <= uint_var9) {\n    uint_var7 = uint_var7 + uint_var10;\n    uint_var8 = input_3;\n    uint_var5 = input_4;\n    input_3 = input_1;\n    input_4 = input_2;\n  }\n  if (0x36 < uint_var10) {\n    return CONCAT44(uint_var5,uint_var8);\n  }\n  uint_var9 = uint_var5 & 0xfffff | 0x100000;\n  if ((uint_var5 & 0x80000000) != 0) {\n    bool_var14 = uint_var8 != 0;\n    uint_var8 = -uint_var8;\n    uint_var9 = -uint_var9 - (uint)bool_var14;\n  }\n  uint_var5 = input_4 & 0xfffff | 0x100000;\n  if ((input_4 & 0x80000000) != 0) {\n    bool_var14 = input_3 != 0;\n    input_3 = -input_3;\n    uint_var5 = -uint_var5 - (uint)bool_var14;\n  }\n  if (uint_var7 == uint_var10) {\n    uint_var5 = uint_var5 ^ 0x100000;\n    if (uint_var7 == 0) {\n      uint_var9 = uint_var9 ^ 0x100000;\n      uint_var7 = 1;\n    }\n    else {\n      uint_var10 = uint_var10 - 1;\n    }\n  }\n  uint_var12 = -uint_var10 + 0x20;\n  if ((int)uint_var10 < 0x21) {\n    uint_var11 = input_3 << (uint_var12 & 0xff);\n    input_3 = input_3 >> (uint_var10 & 0xff);\n    uint_var3 = uint_var8 + input_3;\n    uint_var4 = uint_var5 << (uint_var12 & 0xff);\n    uint_var12 = uint_var3 + uint_var4;\n    uint_var9 = uint_var9 + CARRY4(uint_var8,input_3) + ((int)uint_var5 >> (uint_var10 & 0xff)) +\n            (uint)CARRY4(uint_var3,uint_var4);\n  }\n  else {\n    uint_var11 = uint_var5 << (-uint_var10 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      uint_var11 = uint_var11 | 2;\n    }\n    uint_var5 = (int)uint_var5 >> (uint_var10 - 0x20 & 0xff);\n    uint_var12 = uint_var8 + uint_var5;\n    uint_var9 = uint_var9 + ((int)uint_var5 >> 0x1f) + (uint)CARRY4(uint_var8,uint_var5);\n  }\n  input_2 = uint_var9 & 0x80000000;\n  uint_var10 = uint_var9;\n  if ((int)uint_var9 < 0) {\n    bool_var14 = uint_var11 == 0;\n    uint_var11 = -uint_var11;\n    uint_var10 = -uint_var12;\n    uint_var12 = -(uint)!bool_var14 - uint_var12;\n    uint_var10 = -(uint)(bool_var14 <= uint_var10) - uint_var9;\n  }\n  if (0xfffff < uint_var10) {\n    uint_var8 = uint_var7 - 1;\n    if (0x1fffff < uint_var10) {\n      uint_var9 = uint_var10 & 1;\n      uint_var10 = uint_var10 >> 1;\n      byte_var2 = (byte)uint_var12;\n      uint_var12 = (uint)(uint_var9 != 0) << 0x1f | uint_var12 >> 1;\n      uint_var11 = (uint)(byte_var2 & 1) << 0x1f | uint_var11 >> 1;\n      uint_var8 = uint_var7;\n      if (0xffbfffff < uint_var7 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bool_var14 = 0x7fffffff < uint_var11;\n    if (uint_var11 == 0x80000000) {\n      bool_var14 = (uint_var12 & 1) != 0;\n    }\n    return CONCAT44(uint_var10 + uint_var8 * 0x100000 + (uint)CARRY4(uint_var12,(uint)bool_var14) | input_2,\n                    uint_var12 + bool_var14);\n  }\n  bool_var13 = (uint_var11 & 0x80000000) != 0;\n  uint_var11 = uint_var11 << 1;\n  uint_var8 = uint_var12 * 2;\n  bool_var14 = CARRY4(uint_var12,uint_var12);\n  uint_var12 = uint_var12 * 2 + (uint)bool_var13;\n  uint_var10 = uint_var10 * 2 + (uint)(bool_var14 || CARRY4(uint_var8,(uint)bool_var13));\n  uint_var8 = uint_var7 - 2;\n  if (uint_var7 - 1 != 0 && 0xfffff < uint_var10) goto LAB_080083e0;\n  uint_var5 = uint_var12;\n  uint_var7 = uint_var10;\n  if (uint_var10 == 0) {\n    uint_var5 = 0;\n    uint_var7 = uint_var12;\n  }\n  int_var6 = count_leading_zeroes(uint_var7);\n  if (uint_var10 == 0) {\n    int_var6 = int_var6 + 0x20;\n  }\n  uint_var12 = int_var6 - 0xb;\n  bool_var15 = SBORROW4(uint_var12,0x20);\n  uint_var10 = int_var6 - 0x2b;\n  bool_var14 = (int)uint_var10 < 0;\n  bool_var13 = uint_var10 == 0;\n  if ((int)uint_var12 < 0x20) {\n    bool_var15 = SCARRY4(uint_var10,0xc);\n    int_var6 = int_var6 + -0x1f;\n    bool_var14 = int_var6 < 0;\n    bool_var13 = int_var6 == 0;\n    uint_var10 = uint_var12;\n    if (!bool_var13 && bool_var14 == bool_var15) {\n      uint_var5 = uint_var7 << (uint_var12 & 0xff);\n      uint_var7 = uint_var7 >> (0xcU - int_var6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bool_var13 || bool_var14 != bool_var15) {\n    uint_var11 = 0x20 - uint_var10;\n  }\n  uint_var7 = uint_var7 << (uint_var10 & 0xff);\n  if (bool_var13 || bool_var14 != bool_var15) {\n    uint_var7 = uint_var7 | uint_var5 >> (uint_var11 & 0xff);\n  }\n  if (bool_var13 || bool_var14 != bool_var15) {\n    uint_var5 = uint_var5 << (uint_var10 & 0xff);\n  }\nLAB_08008458:\n  if ((int)uint_var12 <= (int)uint_var8) {\n    return CONCAT44(uint_var7 + (uint_var8 - uint_var12) * 0x100000 | input_2,uint_var5);\n  }\n  uint_var10 = ~(uint_var8 - uint_var12);\n  if ((int)uint_var10 < 0x1f) {\n    int_var6 = uint_var10 - 0x13;\n    if (int_var6 != 0 && int_var6 < 0 == SCARRY4(uint_var10 - 0x1f,0xc)) {\n      return CONCAT44(uint_var9,uint_var5 >> (0x20 - (0xcU - int_var6) & 0xff) | uint_var7 << (0xcU - int_var6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    uint_var10 = uint_var10 + 1;\n    return CONCAT44(input_2 | uint_var7 >> (uint_var10 & 0xff),\n                    uint_var5 >> (uint_var10 & 0xff) | uint_var7 << (0x20 - uint_var10 & 0xff));\n  }\n  return CONCAT44(uint_var9,uint_var7 >> (uint_var10 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080082d4",
            "calling": [
                "FUN_08009798",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_0800a1bc",
                "FUN_080094c0",
                "FUN_08009654",
                "FUN_08009318",
                "FUN_0800adf0",
                "FUN_0800b2e8",
                "FUN_08009b24",
                "FUN_0800a5a0",
                "FUN_08001f00",
                "FUN_0800a348"
            ],
            "imported": false,
            "current_name": "calculate_result_080082d4"
        },
        "FUN_08007bf0": {
            "renaming": {
                "FUN_08007bf0": "update_minimum_value_08007bf0",
                "param_1": "inputValue"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid updateMinimumValue_08007bf0(uint inputValue)\n\n{\n  _DAT_4000002c = inputValue;\n  if (inputValue <= _DAT_40000024) {\n    _DAT_40000024 = inputValue;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bf0",
            "calling": [
                "FUN_08005324"
            ],
            "imported": false,
            "current_name": "update_minimum_value_08007bf0"
        },
        "FUN_08008590": {
            "renaming": {
                "FUN_08008590": "calculate_transformed_value_08008590",
                "param_1": "input_value",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "temp_param_4",
                "uVar1": "shifted_value",
                "uVar2": "result_low",
                "uVar3": "temp_result_high",
                "uVar4": "temp_shift",
                "uVar5": "shifted_input",
                "iVar6": "leading_zeroes_count",
                "uVar7": "adjusted_zeroes_count",
                "in_r12": "complement_shift",
                "bVar8": "is_zero",
                "bVar9": "is_condition_met",
                "bVar10": "is_overflow"
            },
            "code": "\nulonglong calculate_transformed_value_08008590(uint input_value,undefined4 unused_param_2,undefined4 unused_param_3,uint temp_param_4)\n\n{\n  uint shifted_value;\n  uint result_low;\n  uint temp_result_high;\n  uint temp_shift;\n  uint shifted_input;\n  int leading_zeroes_count;\n  uint adjusted_zeroes_count;\n  uint complement_shift;\n  bool is_zero;\n  bool is_condition_met;\n  bool is_overflow;\n  \n  shifted_input = input_value << 1;\n  is_condition_met = shifted_input == 0;\n  shifted_value = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  temp_shift = (uint)((int)shifted_input >> 3) >> 1;\n  temp_result_high = shifted_value | temp_shift;\n  input_value = input_value << 0x1d;\n  if (!is_condition_met) {\n    temp_param_4 = shifted_input & 0xff000000;\n    is_condition_met = temp_param_4 == 0;\n  }\n  if (!is_condition_met) {\n    is_condition_met = temp_param_4 == 0xff000000;\n  }\n  if (!is_condition_met) {\n    return CONCAT44(temp_result_high,input_value) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return CONCAT44(temp_result_high,input_value);\n  }\n  if (temp_param_4 == 0xff000000) {\n    return CONCAT44(temp_result_high,input_value) | 0x8000000000000;\n  }\n  result_low = input_value;\n  shifted_input = temp_shift;\n  if (temp_shift == 0) {\n    result_low = 0;\n    shifted_input = input_value;\n  }\n  leading_zeroes_count = count_leading_zeroes(shifted_input);\n  if (temp_shift == 0) {\n    leading_zeroes_count = leading_zeroes_count + 0x20;\n  }\n  adjusted_zeroes_count = leading_zeroes_count - 0xb;\n  is_overflow = SBORROW4(adjusted_zeroes_count,0x20);\n  temp_shift = leading_zeroes_count - 0x2b;\n  is_condition_met = (int)temp_shift < 0;\n  is_zero = temp_shift == 0;\n  if ((int)adjusted_zeroes_count < 0x20) {\n    is_overflow = SCARRY4(temp_shift,0xc);\n    leading_zeroes_count = leading_zeroes_count + -0x1f;\n    is_condition_met = leading_zeroes_count < 0;\n    is_zero = leading_zeroes_count == 0;\n    temp_shift = adjusted_zeroes_count;\n    if (!is_zero && is_condition_met == is_overflow) {\n      result_low = shifted_input << (adjusted_zeroes_count & 0xff);\n      shifted_input = shifted_input >> (0xcU - leading_zeroes_count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_condition_met != is_overflow) {\n    complement_shift = 0x20 - temp_shift;\n  }\n  shifted_input = shifted_input << (temp_shift & 0xff);\n  if (is_zero || is_condition_met != is_overflow) {\n    shifted_input = shifted_input | result_low >> (complement_shift & 0xff);\n  }\n  if (is_zero || is_condition_met != is_overflow) {\n    result_low = result_low << (temp_shift & 0xff);\n  }\nLAB_08008458:\n  if ((int)adjusted_zeroes_count < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - adjusted_zeroes_count) * 0x100000 | shifted_value,result_low);\n  }\n  temp_shift = ~(0x380 - adjusted_zeroes_count);\n  if (0x1e < (int)temp_shift) {\n    return CONCAT44(temp_result_high,shifted_input >> (temp_shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeroes_count = temp_shift - 0x13;\n  if (leading_zeroes_count == 0 || leading_zeroes_count < 0 != SCARRY4(temp_shift - 0x1f,0xc)) {\n    temp_shift = temp_shift + 1;\n    return CONCAT44(shifted_value | shifted_input >> (temp_shift & 0xff),\n                    result_low >> (temp_shift & 0xff) | shifted_input << (0x20 - temp_shift & 0xff));\n  }\n  return CONCAT44(temp_result_high,result_low >> (0x20 - (0xcU - leading_zeroes_count) & 0xff) | shifted_input << (0xcU - leading_zeroes_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008590",
            "calling": [
                "FUN_080044e8",
                "FUN_08002978",
                "FUN_08002638",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_08004e30",
                "FUN_08004940",
                "FUN_08002408",
                "FUN_08003b98",
                "FUN_080046d0",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_0800056c"
            ],
            "imported": false,
            "current_name": "calculate_transformed_value_08008590"
        },
        "FUN_08007ad0": {
            "renaming": {
                "FUN_08007ad0": "initialize_registers_08007ad0"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid initialize_registers_08007ad0(void)\n\n{\n  update_status_flag_08007a10(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = (uint)((ulonglong)DAT_08007b6c * (ulonglong)*(uint *)PTR_DAT_08007b68 >> 0x38) - 1\n  ;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  process_and_set_bit_08007a70(0x40000000,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_08007a70",
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ad0",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_registers_08007ad0"
        },
        "FUN_080005b4": {
            "renaming": {
                "FUN_080005b4": "process_code_sequence_080005b4",
                "param_1": "input_sequence",
                "puVar1": "temp_pointer",
                "uVar2": "temp_byte",
                "iVar3": "int_result",
                "uVar4": "temp_uint32",
                "uVar5": "result",
                "uVar6": "temp_uint32_2",
                "uVar7": "temp_uint64",
                "local_94": "result_array",
                "local_84": "processed_value_1",
                "local_80": "processed_value_2",
                "local_7c": "processed_value_3",
                "uStack_78": "processed_value_4",
                "uStack_74": "processed_value_5",
                "auStack_70": "input_values",
                "local_58": "input_value",
                "local_52": "command",
                "local_51": "command_buffer",
                "local_3d": "loop_counter_1",
                "local_3c": "loop_counter_2",
                "local_3b": "loop_counter_3",
                "local_3a": "loop_counter_4",
                "local_39": "calc_result",
                "local_38": "processed_input_value",
                "local_34": "input_value_34",
                "local_2f": "state",
                "local_2e": "switch_case",
                "local_2d": "flag_2d",
                "local_2c": "input_value_2c",
                "local_27": "flags_27",
                "local_26": "flags_26",
                "local_24": "temp_result"
            },
            "code": "\nuint process_code_sequence_080005b4(undefined4 input_sequence)\n\n{\n  undefined *temp_pointer;\n  undefined temp_byte;\n  int int_result;\n  undefined4 temp_uint32;\n  uint result;\n  undefined4 temp_uint32_2;\n  undefined8 temp_uint64;\n  undefined4 result_array [4];\n  undefined4 processed_value_1;\n  undefined4 processed_value_2;\n  undefined4 processed_value_3;\n  undefined4 processed_value_4;\n  undefined4 processed_value_5;\n  undefined4 input_values [6];\n  undefined4 input_value;\n  byte command;\n  undefined command_buffer [20];\n  byte loop_counter_1;\n  byte loop_counter_2;\n  byte loop_counter_3;\n  byte loop_counter_4;\n  char calc_result;\n  undefined4 processed_input_value;\n  undefined4 input_value_34;\n  sbyte state;\n  char switch_case;\n  char flag_2d;\n  undefined4 input_value_2c;\n  byte flags_27;\n  ushort flags_26;\n  uint temp_result;\n  \n  if (PTR_DAT_08000808[1] == '\\x06') {\n    result = 0xc;\n  }\n  else {\n    command_buffer[0] = 0;\n    flags_26 = 0;\n    flags_27 = 0;\n    input_value_2c = DAT_0800080c;\n    flag_2d = '\\0';\n    switch_case = '\\0';\n    set_memory_0800b430(input_values + 3,0,0xc);\n    set_memory_0800b430(input_values,0,0xc);\n    *PTR_DAT_08000810 = 0;\n    state = 0;\n    while (int_result = process_character_0800184c(&command,input_values + 6,input_sequence,command_buffer), int_result != 0) {\n      temp_uint64 = calculate_transformed_value_08008590(input_value);\n      temp_uint64 = process_numbers_08009798((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n      temp_result = calculate_result_08008ba0((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n      if (command == 0x47) {\n        switch(temp_result) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          state = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          state = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          state = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          state = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          state = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          state = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          state = 6;\n        }\n        switch(temp_result) {\n        case 0:\n          PTR_DAT_08000ca0[1] = 0;\n          break;\n        case 1:\n          PTR_DAT_08000ca0[1] = 1;\n          break;\n        case 2:\n          PTR_DAT_08000ca0[1] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[1] = 3;\n          break;\n        case 4:\n          switch_case = '\\x01';\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 10:\n          switch_case = '\\x02';\n          break;\n        case 0x11:\n          update_data_08000478(0,1,2);\n          break;\n        case 0x12:\n          update_data_08000478(2,0,1);\n          break;\n        case 0x13:\n          update_data_08000478(1,2,0);\n          break;\n        case 0x14:\n          PTR_DAT_08000ca0[3] = 1;\n          break;\n        case 0x15:\n          PTR_DAT_08000ca0[3] = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_uint32 = floating_point_multiplication_08008eec(input_value,DAT_08000ca4);\n          temp_uint64 = calculate_transformed_value_08008590(temp_uint32);\n          temp_uint64 = process_numbers_08009798((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          temp_result = calculate_result_08008ba0((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          switch(temp_result) {\n          case 0x118:\n            switch_case = '\\x03';\n            break;\n          case 0x119:\n            switch_case = '\\x04';\n            break;\n          default:\n            *PTR_DAT_08000ca0 = 3;\n            break;\n          case 300:\n            switch_case = '\\x05';\n            break;\n          case 0x12d:\n            switch_case = '\\x06';\n          }\n          break;\n        case 0x35:\n          flag_2d = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          PTR_DAT_08000ca0[0x1c] = (char)temp_result + -0x36;\n          break;\n        case 0x50:\n          PTR_DAT_08000ca0[1] = 4;\n          break;\n        case 0x5a:\n          PTR_DAT_08000ca0[4] = 1;\n          break;\n        case 0x5b:\n          PTR_DAT_08000ca0[4] = 0;\n          break;\n        case 0x5c:\n          temp_uint32 = floating_point_multiplication_08008eec(input_value,DAT_08000ca4);\n          temp_uint64 = calculate_transformed_value_08008590(temp_uint32);\n          temp_uint64 = process_numbers_08009798((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          temp_result = calculate_result_08008ba0((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          if (temp_result == 0x398) {\n            switch_case = '\\a';\n          }\n          else if (temp_result == 0x399) {\n            switch_case = '\\b';\n          }\n          else {\n            *PTR_DAT_08000ca0 = 3;\n          }\n          break;\n        case 0x5d:\n          PTR_DAT_08000ca0[2] = 1;\n          break;\n        case 0x5e:\n          PTR_DAT_08000ca0[2] = 0;\n        }\n      }\n      else if (command == 0x4d) {\n        if (temp_result == 0x1e) {\nLAB_08000b96:\n          state = 5;\n        }\n        else if ((int)temp_result < 0x1f) {\n          if ((int)temp_result < 3) {\n            if (-1 < (int)temp_result) goto LAB_08000b96;\n          }\n          else if (temp_result - 3 < 3) {\n            state = 8;\n          }\n        }\n        switch(temp_result) {\n        case 0:\n          PTR_DAT_08000ca0[5] = 1;\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          PTR_DAT_08000ca0[5] = 2;\n          break;\n        case 3:\n          PTR_DAT_08000ca0[6] = 1;\n          break;\n        case 4:\n          PTR_DAT_08000ca0[6] = 0xff;\n          break;\n        case 5:\n          PTR_DAT_08000ca0[6] = 0;\n          break;\n        default:\n          *PTR_DAT_08000ca0 = 3;\n          break;\n        case 7:\n          PTR_DAT_08000ca0[7] = 2;\n          break;\n        case 8:\n          PTR_DAT_08000ca0[7] = 1;\n          break;\n        case 9:\n          PTR_DAT_08000ca0[7] = 0;\n        }\n      }\n      if (state != 0) {\n        if (((int)(uint)flags_26 >> state & 1U) == 0) {\n          flags_26 = flags_26 | (ushort)(1 << state);\n        }\n        else {\n          *PTR_DAT_08000ca0 = 5;\n        }\n        state = 0;\n      }\n    }\n    if (*PTR_DAT_08000ff0 == '\\0') {\n      input_value_34 = 0;\n      processed_input_value = 0;\n      calc_result = '\\0';\n      command_buffer[0] = 0;\nswitchD_08000d18_caseD_47:\n      int_result = process_character_0800184c(&command,input_values + 6,input_sequence,command_buffer);\n      if (int_result != 0) {\n        switch(command) {\n        case 0x46:\n          int_result = check_parameters_status_0800923c(input_value,0);\n          if (int_result != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          if (PTR_DAT_08000ff0[2] == '\\0') {\n            temp_uint32 = process_input_value_0800056c(input_value);\n            *(undefined4 *)(PTR_DAT_08000ff0 + 8) = temp_uint32;\n          }\n          else {\n            input_value_2c = process_input_value_0800056c(input_value);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          *PTR_DAT_08000ff0 = 3;\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          result = (uint)command;\n          temp_uint32 = process_input_value_0800056c(input_value);\n          input_values[result - 0x49] = temp_uint32;\n          break;\n        case 0x4c:\n          temp_uint64 = calculate_transformed_value_08008590(input_value);\n          temp_uint64 = process_numbers_08009798((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          calc_result = calculate_result_08008bf0((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          break;\n        case 0x50:\n          input_value_34 = input_value;\n          break;\n        case 0x52:\n          processed_input_value = process_input_value_0800056c(input_value);\n          break;\n        case 0x53:\n          int_result = check_status_08009228(input_value,0);\n          if (int_result != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case 0x54:\n          int_result = check_status_08009228(input_value,0);\n          if (int_result != 0) {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          temp_uint64 = calculate_transformed_value_08008590(input_value);\n          temp_uint64 = process_numbers_08009798((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          temp_byte = calculate_result_08008bf0((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          PTR_DAT_08000ff0[0x18] = temp_byte;\n          break;\n        case 0x58:\n          input_values[3] = process_input_value_0800056c(input_value);\n          flags_27 = flags_27 | 1;\n          break;\n        case 0x59:\n          input_values[4] = process_input_value_0800056c(input_value);\n          flags_27 = flags_27 | 2;\n          break;\n        case 0x5a:\n          input_values[5] = process_input_value_0800056c(input_value);\n          flags_27 = flags_27 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      if (*PTR_DAT_08000ff0 == '\\0') {\n        if (PTR_DAT_08000ff4[1] != '\\a') {\n          process_input_0800525c((int)(char)PTR_DAT_08000ff0[6]);\n          process_input_08000220(PTR_DAT_08000ff0[7]);\n        }\n        if ((flags_26 & 0x200) != 0) {\n          int_result = validate_and_process_data_08004d7c(PTR_DAT_08000ff0[0x1c],&processed_value_3);\n          temp_pointer = PTR_DAT_08000ff0;\n          if (int_result == 0) {\n            return 10;\n          }\n          *(undefined4 *)(PTR_DAT_08000ff0 + 0x20) = processed_value_3;\n          *(undefined4 *)(temp_pointer + 0x24) = processed_value_4;\n          *(undefined4 *)(temp_pointer + 0x28) = processed_value_5;\n        }\n        switch(switch_case) {\n        case '\\x01':\n          int_result = check_status_08009228(input_value_34,0);\n          if (int_result == 0) {\n            if (PTR_DAT_08000ff4[1] != '\\a') {\n              process_data_sequence_08002408(input_value_34);\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 6;\n          }\n          break;\n        case '\\x02':\n          temp_uint64 = calculate_transformed_value_08008590(input_value_34);\n          temp_uint64 = process_numbers_08009798((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          temp_result = calculate_result_08008ba0((int)temp_uint64,(int)((ulonglong)temp_uint64 >> 0x20));\n          if ((((calc_result == '\\x02') || (calc_result == '\\x14')) && (-1 < (int)temp_result)) &&\n             ((int)temp_result < 7)) {\n            if ((flags_27 == 0) && (calc_result == '\\x02')) {\n              *PTR_DAT_08000ff0 = 6;\n            }\n            else {\n              if ((int)temp_result < 1) {\n                temp_result = (uint)(byte)PTR_DAT_08001304[0x1c];\n              }\n              else {\n                temp_result = temp_result - 1;\n              }\n              int_result = validate_and_process_data_08004d7c(temp_result & 0xff,result_array);\n              if (int_result == 0) {\n                return 10;\n              }\n              for (loop_counter_4 = 0; loop_counter_4 < 3; loop_counter_4 = loop_counter_4 + 1) {\n                if (((int)(uint)flags_27 >> loop_counter_4 & 1U) != 0) {\n                  if (calc_result == '\\x14') {\n                    result = (uint)loop_counter_4;\n                    temp_uint32 = process_numbers_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (loop_counter_4 + 2) * 4 + 4),\n                                         input_values[loop_counter_4 + 3]);\n                    result_array[result] = temp_uint32;\n                  }\n                  else {\n                    result_array[loop_counter_4] = input_values[loop_counter_4 + 3];\n                  }\n                }\n              }\n              process_data_with_offset_08004bf4(temp_result & 0xff,result_array);\n              temp_pointer = PTR_DAT_08001304;\n              if (temp_result == (byte)PTR_DAT_08001304[0x1c]) {\n                *(undefined4 *)(PTR_DAT_08001304 + 0x20) = result_array[0];\n                *(undefined4 *)(temp_pointer + 0x24) = result_array[1];\n                *(undefined4 *)(temp_pointer + 0x28) = result_array[2];\n              }\n            }\n          }\n          else {\n            *PTR_DAT_08000ff0 = 3;\n          }\n          flags_27 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (flags_27 != 0) {\n            for (loop_counter_3 = 0; loop_counter_3 < 3; loop_counter_3 = loop_counter_3 + 1) {\n              if (((int)(uint)flags_27 >> loop_counter_3 & 1U) == 0) {\n                input_values[loop_counter_3 + 3] =\n                     *(undefined4 *)(PTR_DAT_08001304 + (loop_counter_3 + 2) * 4 + 4);\n              }\n              else if (PTR_DAT_08001304[4] == '\\0') {\n                result = (uint)loop_counter_3;\n                temp_uint32 = calculate_result_08008cdc(input_values[loop_counter_3 + 3],\n                                     *(undefined4 *)(PTR_DAT_08001304 + (loop_counter_3 + 2) * 4 + 4));\n                input_values[result + 3] = temp_uint32;\n              }\n              else {\n                temp_uint32_2 = input_values[loop_counter_3 + 3];\n                temp_uint32 = calculate_result_08008cdc(*(undefined4 *)(PTR_DAT_08001304 + (loop_counter_3 + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (loop_counter_3 + 10) * 4 + 4));\n                result = (uint)loop_counter_3;\n                temp_uint32 = calculate_result_08008cdc(temp_uint32_2,temp_uint32);\n                input_values[result + 3] = temp_uint32;\n              }\n            }\n            process_input_and_update_08001e98(input_values[3],input_values[4],input_values[5],\n                         *(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          }\n          if (switch_case == '\\x05') {\n            int_result = validate_and_process_data_08004d7c(7,result_array + 3);\n            if (int_result == 0) {\n              return 10;\n            }\n          }\n          else {\n            int_result = validate_and_process_data_08004d7c(6,result_array + 3);\n            if (int_result == 0) {\n              return 10;\n            }\n          }\n          process_input_and_update_08001e98(result_array[3],processed_value_1,processed_value_2,*(undefined4 *)(PTR_DAT_08001308 + 0x14),0);\n          temp_pointer = PTR_DAT_08001304;\n          *(undefined4 *)(PTR_DAT_08001304 + 0xc) = result_array[3];\n          *(undefined4 *)(temp_pointer + 0x10) = processed_value_1;\n          *(undefined4 *)(temp_pointer + 0x14) = processed_value_2;\n          flags_27 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (switch_case == '\\x06') {\n            process_data_with_offset_08004bf4(7,PTR_DAT_0800130c);\n          }\n          else {\n            process_data_with_offset_08004bf4(6,PTR_DAT_0800130c);\n          }\n          break;\n        case '\\a':\n          if (flags_27 == 0) {\n            *PTR_DAT_08001304 = 6;\n          }\n          else {\n            for (loop_counter_2 = 0; loop_counter_2 < 3; loop_counter_2 = loop_counter_2 + 1) {\n              if (((int)(uint)flags_27 >> loop_counter_2 & 1U) != 0) {\n                temp_uint32 = process_numbers_08008cd8(*(undefined4 *)(PTR_DAT_08001304 + (loop_counter_2 + 2) * 4 + 4),\n                                     *(undefined4 *)(PTR_DAT_08001304 + (loop_counter_2 + 8) * 4));\n                result = (uint)loop_counter_2;\n                temp_uint32 = process_numbers_08008cd8(temp_uint32,input_values[loop_counter_2 + 3]);\n                *(undefined4 *)(PTR_DAT_08001304 + (result + 10) * 4 + 4) = temp_uint32;\n              }\n            }\n          }\n          flags_27 = 0;\n          break;\n        case '\\b':\n          set_memory_0800b430(PTR_DAT_08001310,0,0xc);\n        }\n        if (((flags_26 & 4) != 0) || (flags_27 != 0)) {\n          if ((PTR_DAT_08001574[2] != '\\0') &&\n             ((int_result = check_status_08009228(input_value_2c,0), int_result != 0 && (PTR_DAT_08001574[1] != '\\x04')))) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (((flag_2d != '\\0') && (PTR_DAT_08001574[1] != '\\0')) &&\n             (PTR_DAT_08001574[1] != '\\x01')) {\n            *PTR_DAT_08001574 = 6;\n          }\n          if (*PTR_DAT_08001574 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001574;\n          }\n          for (loop_counter_1 = 0; temp_pointer = PTR_DAT_08001840, loop_counter_1 < 3; loop_counter_1 = loop_counter_1 + 1) {\n            if (((int)(uint)flags_27 >> loop_counter_1 & 1U) == 0) {\n              input_values[loop_counter_1 + 3] = *(undefined4 *)(PTR_DAT_08001574 + (loop_counter_1 + 2) * 4 + 4);\n            }\n            else if (flag_2d == '\\0') {\n              if (PTR_DAT_08001574[4] == '\\0') {\n                result = (uint)loop_counter_1;\n                temp_uint32 = calculate_result_08008cdc(input_values[loop_counter_1 + 3],\n                                     *(undefined4 *)(PTR_DAT_08001574 + (loop_counter_1 + 2) * 4 + 4));\n                input_values[result + 3] = temp_uint32;\n              }\n              else {\n                temp_uint32_2 = input_values[loop_counter_1 + 3];\n                temp_uint32 = calculate_result_08008cdc(*(undefined4 *)(PTR_DAT_08001574 + (loop_counter_1 + 8) * 4),\n                                     *(undefined4 *)(PTR_DAT_08001574 + (loop_counter_1 + 10) * 4 + 4));\n                result = (uint)loop_counter_1;\n                temp_uint32 = calculate_result_08008cdc(temp_uint32_2,temp_uint32);\n                input_values[result + 3] = temp_uint32;\n              }\n            }\n          }\n          if ((byte)PTR_DAT_08001574[1] < 5) {\n                    /* WARNING: Could not recover jumptable at 0x08001474. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n            result = (*(code *)(&switchD_08001474::switchdataD_08001478)[(byte)PTR_DAT_08001574[1]])\n                              ();\n            return result;\n          }\n          if (*PTR_DAT_08001840 != '\\0') {\n            return (uint)(byte)*PTR_DAT_08001840;\n          }\n          *(undefined4 *)(PTR_DAT_08001840 + 0xc) = input_values[3];\n          *(undefined4 *)(temp_pointer + 0x10) = input_values[4];\n          *(undefined4 *)(temp_pointer + 0x14) = input_values[5];\n        }\n        if (PTR_DAT_08001840[5] != '\\0') {\n          process_buffer_08002fd4();\n          PTR_DAT_08001848[0x10] = 0;\n          if (PTR_DAT_08001840[5] == '\\x02') {\n            update_control_registers_080025e8();\n          }\n          else {\n            PTR_DAT_08001840[5] = 0;\n          }\n        }\n        result = (uint)(byte)*PTR_DAT_08001840;\n      }\n      else {\n        result = (uint)(byte)*PTR_DAT_08000ff0;\n      }\n    }\n    else {\n      result = (uint)(byte)*PTR_DAT_08000ff0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_08009214",
                "FUN_08008590",
                "FUN_08008ba0",
                "FUN_0800981c",
                "FUN_080025e8",
                "FUN_0800923c",
                "FUN_08004bf4",
                "FUN_08008c30",
                "FUN_08002fd4",
                "FUN_08001f00",
                "FUN_08001e98",
                "FUN_08009798",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08000478",
                "FUN_08000220",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008894",
                "FUN_0800525c",
                "FUN_08004d7c",
                "FUN_08008bf0",
                "FUN_08002408",
                "FUN_080098d0",
                "FUN_0800b430",
                "FUN_0800056c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080005b4",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_code_sequence_080005b4"
        },
        "FUN_080039a0": {
            "renaming": {
                "FUN_080039a0": "initialize_system_080039a0",
                "reset_memory_08003980": "resetMemory",
                "display_grbl_help_message_08004228": "displayHelpMessage"
            },
            "code": "\nvoid initializeSystem_080039a0(void)\n\n{\n  resetMemory();\n  displayHelpMessage();\n  *(undefined4 *)PTR_DAT_080039b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_08004228",
                "FUN_08003980"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039a0",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_system_080039a0"
        },
        "FUN_08009204": {
            "renaming": {
                "FUN_08009204": "combine_parameters_08009204",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "code": "\nundefined8 combineParameters_08009204(undefined4 firstParam,undefined4 secondParam)\n\n{\n  calculate_result_0800919c();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "called": [
                "FUN_0800919c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009204",
            "calling": [
                "FUN_08009214",
                "FUN_080091fc",
                "FUN_0800923c",
                "FUN_08009228"
            ],
            "imported": false,
            "current_name": "combine_parameters_08009204"
        },
        "FUN_080029d8": {
            "renaming": {
                "FUN_080029d8": "process_data_080029d8",
                "param_1": "output_data",
                "param_2": "input_data1",
                "param_3": "input_data2",
                "iVar1": "check_result",
                "uVar2": "temp_result",
                "uVar3": "swapped_value"
            },
            "code": "\nvoid process_data_080029d8(undefined4 output_data,int input_data1,int input_data2)\n\n{\n  int check_result;\n  undefined4 temp_result;\n  undefined4 swapped_value;\n  \n  if (((input_data1 != 0) && (input_data2 != 0)) &&\n     (check_result = check_non_zero_result_08009214(*(undefined4 *)(input_data1 + 0x18),*(undefined4 *)(input_data1 + 0x1c)),\n     check_result == 0)) {\n    if ((*(char *)(input_data1 + 0x25) == '\\0') &&\n       (check_result = check_swapped_parameters_08009264(*(undefined4 *)(input_data1 + 0x1c),*(undefined4 *)(input_data2 + 0x18)),\n       check_result != 0)) {\n      swapped_value = *(undefined4 *)(input_data1 + 0x1c);\n      temp_result = calculate_final_result_08002978(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000,\n                           *(undefined4 *)(input_data2 + 0x18),*(undefined4 *)(input_data1 + 0x20));\n      check_result = check_status_08009228(swapped_value,temp_result);\n      if (check_result == 0) {\n        temp_result = calculate_final_result_08002978(*(uint *)(PTR_DAT_08002a90 + 0x20) ^ 0x80000000,\n                             *(undefined4 *)(input_data2 + 0x18),*(undefined4 *)(input_data1 + 0x20));\n      }\n      else {\n        temp_result = *(undefined4 *)(input_data1 + 0x1c);\n      }\n      *(undefined4 *)(input_data1 + 0x18) = temp_result;\n    }\n    else {\n      *(undefined4 *)(input_data1 + 0x18) = *(undefined4 *)(input_data1 + 0x1c);\n    }\n    *(undefined *)(input_data1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009214",
                "FUN_08002978",
                "FUN_08009264",
                "FUN_08009228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080029d8",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "process_data_080029d8"
        },
        "FUN_08007c5e": {
            "renaming": {
                "FUN_08007c5e": "set_global_parameter_08007c5e",
                "param_1": "inputParameter"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid setGlobalParameter_08007c5e(undefined4 inputParameter)\n\n{\n  _DAT_40000038 = inputParameter;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c5e",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_parameter_08007c5e"
        },
        "FUN_08005760": {
            "renaming": {
                "FUN_08005760": "update_register_from_data_08005760",
                "update_register_value_080052ac": "update_register_value"
            },
            "code": "\nvoid update_register_from_data_08005760(void)\n\n{\n  update_register_value(*(undefined2 *)(PTR_DAT_08005774 + 0x18));\n  return;\n}\n\n",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005760",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_register_from_data_08005760"
        },
        "FUN_08008b24": {
            "renaming": {
                "FUN_08008b24": "is_data_processed_08008b24",
                "in_CY": "data_status"
            },
            "code": "\nbool isDataProcessed_08008b24(void)\n\n{\n  char data_status;\n  \n  process_data_08008b00();\n  return data_status == '\\0';\n}\n\n",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b24",
            "calling": [
                "FUN_08009b24",
                "FUN_08003004",
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "is_data_processed_08008b24"
        },
        "FUN_08002814": {
            "renaming": {
                "FUN_08002814": "do_nothing_08002814"
            },
            "code": "\nvoid do_nothing_08002814(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002814",
            "calling": [
                "FUN_08004148",
                "FUN_08002408",
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "do_nothing_08002814"
        },
        "FUN_0800587c": {
            "renaming": {
                "FUN_0800587c": "update_state_0800587c"
            },
            "code": "\nvoid updateState_0800587c(void)\n\n{\n  if (PTR_DAT_0800589c[1] == '\\x03') {\n    PTR_DAT_0800589c[1] = 4;\n    PTR_DAT_0800589c[0x10] = 0;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800587c",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_state_0800587c"
        },
        "FUN_08008a02": {
            "renaming": {
                "FUN_08008a02": "calculate_result_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "tempVar1",
                "unaff_r4": "unchangedVar",
                "uVar2": "maskedVar",
                "uVar3": "resultVar",
                "in_r12": "inputMask",
                "bVar4": "isZero"
            },
            "code": "\nulonglong calculate_result_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint tempVar1;\n  uint unchangedVar;\n  uint maskedVar;\n  uint resultVar;\n  uint inputMask;\n  bool isZero;\n  \n  maskedVar = inputMask & input4 >> 0x14;\n  resultVar = input2;\n  if (unchangedVar != inputMask || maskedVar != inputMask) {\n    if (unchangedVar == inputMask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, resultVar = input4, maskedVar != inputMask)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (maskedVar == inputMask) {\n      input1 = input3;\n      resultVar = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (unchangedVar == 0) {\n          resultVar = input2 & 0x80000000;\n          do {\n            tempVar1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(tempVar1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | resultVar;\n          if (maskedVar != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          resultVar = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(resultVar != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(resultVar,input1) | 0x7ff8000000000000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a02",
            "calling": [
                "FUN_08008894"
            ],
            "imported": false,
            "current_name": "calculate_result_08008a02"
        },
        "FUN_0800369c": {
            "renaming": {
                "FUN_0800369c": "write_string_to_data_0800369c",
                "param_1": "input_string",
                "local_c": "current_char"
            },
            "code": "\nvoid write_string_to_data_0800369c(char *input_string)\n\n{\n  char *current_char;\n  \n  current_char = input_string;\n  while (*current_char != '\\0') {\n    write_data_wrapper_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800369c",
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "write_string_to_data_0800369c"
        },
        "FUN_08005a98": {
            "renaming": {
                "FUN_08005a98": "wait_until_sum_reached_08005a98",
                "param_1": "target_sum",
                "iVar1": "initial_value",
                "uVar2": "current_value"
            },
            "code": "\nvoid wait_until_sum_reached_08005a98(int target_sum)\n\n{\n  int initial_value;\n  uint current_value;\n  \n  initial_value = get_data_value_08005a84();\n  do {\n    current_value = get_data_value_08005a84();\n  } while (current_value < (uint)(target_sum + initial_value));\n  return;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a98",
            "calling": [
                "FUN_080002a0"
            ],
            "imported": false,
            "current_name": "wait_until_sum_reached_08005a98"
        },
        "FUN_08008cdc": {
            "renaming": {
                "FUN_08008cdc": "calculate_result_08008cdc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param",
                "param_4": "temp_var",
                "iVar1": "temp_int1",
                "uVar2": "temp_uint2",
                "uVar3": "temp_uint3",
                "uVar4": "temp_uint4",
                "uVar5": "temp_uint5",
                "iVar6": "temp_int2",
                "bVar7": "condition"
            },
            "code": "\nuint calculate_result_08008cdc(uint input_1,uint input_2,undefined4 unused_param,uint temp_var)\n\n{\n  int temp_int1;\n  uint temp_uint2;\n  uint temp_uint3;\n  uint temp_uint4;\n  uint temp_uint5;\n  int temp_int2;\n  bool condition;\n  \n  temp_uint3 = input_1 << 1;\n  condition = temp_uint3 == 0;\n  if (!condition) {\n    temp_var = input_2 << 1;\n    condition = temp_var == 0;\n  }\n  if (!condition) {\n    condition = temp_uint3 == temp_var;\n  }\n  temp_int2 = (int)temp_uint3 >> 0x18;\n  if (!condition) {\n    condition = temp_int2 == -1;\n  }\n  if (!condition) {\n    condition = (int)temp_var >> 0x18 == -1;\n  }\n  if (condition) {\n    temp_int1 = (int)(input_2 << 1) >> 0x18;\n    if (temp_int2 == -1 || temp_int1 == -1) {\n      temp_uint3 = input_2;\n      if (temp_int2 == -1) {\n        temp_uint3 = input_1;\n      }\n      if (temp_int2 != -1 || temp_int1 != -1) {\n        input_2 = temp_uint3;\n      }\n      condition = (temp_uint3 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (input_2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = temp_uint3 == input_2;\n      }\n      if (!condition) {\n        temp_uint3 = temp_uint3 | 0x400000;\n      }\n      return temp_uint3;\n    }\n    if (((input_1 ^ input_2) & 0x7fffffff) != 0) {\n      if (temp_uint3 == 0) {\n        input_1 = input_2;\n      }\n      return input_1;\n    }\n    if (input_1 != input_2) {\n      return 0;\n    }\n    if ((temp_uint3 & 0xff000000) == 0) {\n      temp_uint3 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        temp_uint3 = temp_uint3 | 0x80000000;\n      }\n      return temp_uint3;\n    }\n    if (temp_uint3 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08008e12:\n    return input_1 | 0x7f800000;\n  }\n  temp_uint3 = temp_uint3 >> 0x18;\n  temp_var = temp_var >> 0x18;\n  temp_uint5 = temp_var - temp_uint3;\n  condition = temp_uint5 != 0;\n  temp_uint4 = temp_uint3;\n  if (condition && temp_uint3 <= temp_var) {\n    temp_uint4 = temp_uint3 + temp_uint5;\n  }\n  if (condition && temp_uint3 <= temp_var) {\n    input_2 = input_2 ^ input_1;\n  }\n  if (condition && temp_uint3 <= temp_var) {\n    input_1 = input_1 ^ input_2;\n  }\n  if (condition && temp_uint3 <= temp_var) {\n    input_2 = input_2 ^ input_1;\n  }\n  if (temp_var < temp_uint3) {\n    temp_uint5 = -temp_uint5;\n  }\n  if (0x19 < temp_uint5) {\n    return input_1;\n  }\n  temp_uint3 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    temp_uint3 = -temp_uint3;\n  }\n  temp_uint2 = input_2 & 0xffffff | 0x800000;\n  if ((input_2 & 0x80000000) != 0) {\n    temp_uint2 = -temp_uint2;\n  }\n  if (temp_uint4 == temp_uint5) {\n    temp_uint2 = temp_uint2 ^ 0x800000;\n    if (temp_uint4 == 0) {\n      temp_uint3 = temp_uint3 ^ 0x800000;\n      temp_uint4 = 1;\n    }\n    else {\n      temp_uint5 = temp_uint5 - 1;\n    }\n  }\n  temp_uint3 = temp_uint3 + ((int)temp_uint2 >> (temp_uint5 & 0xff));\n  temp_uint2 = temp_uint2 << (0x20 - temp_uint5 & 0xff);\n  input_1 = temp_uint3 & 0x80000000;\n  if ((int)temp_uint3 < 0) {\n    condition = temp_uint2 != 0;\n    temp_uint2 = -temp_uint2;\n    temp_uint3 = -temp_uint3 - (uint)condition;\n  }\n  if (temp_uint3 < 0x800000) {\n    temp_uint5 = temp_uint2 & 0x80000000;\n    temp_uint2 = temp_uint2 << 1;\n    temp_uint3 = temp_uint3 * 2 + (uint)(temp_uint5 != 0);\n    temp_uint5 = temp_uint4 - 2;\n    if (temp_uint4 - 1 == 0 || temp_uint3 < 0x800000) {\n      temp_int2 = count_leading_zeroes(temp_uint3);\n      temp_uint4 = temp_int2 - 8;\n      temp_uint3 = temp_uint3 << (temp_uint4 & 0xff);\n      if ((int)temp_uint5 < (int)temp_uint4) {\n        temp_uint3 = temp_uint3 >> (-(temp_uint5 - temp_uint4) & 0xff);\n      }\n      else {\n        temp_uint3 = temp_uint3 + (temp_uint5 - temp_uint4) * 0x800000;\n      }\n      return temp_uint3 | input_1;\n    }\n  }\n  else {\n    temp_uint5 = temp_uint4 - 1;\n    if (0xffffff < temp_uint3) {\n      temp_uint5 = temp_uint3 & 1;\n      temp_uint3 = temp_uint3 >> 1;\n      temp_uint2 = (uint)(temp_uint5 != 0) << 0x1f | temp_uint2 >> 1;\n      temp_uint5 = temp_uint4;\n      if (0xfd < temp_uint4) goto LAB_08008e12;\n    }\n  }\n  temp_uint3 = temp_uint3 + temp_uint5 * 0x800000 + (uint)(0x7fffffff < temp_uint2);\n  if (temp_uint2 == 0x80000000) {\n    temp_uint3 = temp_uint3 & 0xfffffffe;\n  }\n  return temp_uint3 | input_1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008cdc",
            "calling": [
                "FUN_08004940",
                "FUN_08002978",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08002908"
            ],
            "imported": false,
            "current_name": "calculate_result_08008cdc"
        },
        "FUN_080044e8": {
            "renaming": {
                "FUN_080044e8": "process_and_display_data_080044e8",
                "iVar1": "validation_result",
                "uVar2": "result",
                "uVar3": "transformed_value",
                "auStack_18": "data_array",
                "local_a": "index_a",
                "local_9": "index_9"
            },
            "code": "\nvoid process_and_display_data_080044e8(void)\n\n{\n  int validation_result;\n  undefined4 result;\n  undefined8 transformed_value;\n  undefined4 data_array [3];\n  byte index_a;\n  byte index_9;\n  \n  index_9 = 0;\n  while( true ) {\n    if (7 < index_9) {\n      write_characters_080036c6(PTR_s__G92__080046c8);\n      for (index_a = 0; index_a < 3; index_a = index_a + 1) {\n        if ((PTR_DAT_080046bc[0x28] & 1) == 0) {\n          convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_080046cc + (index_a + 10) * 4 + 4));\n        }\n        else {\n          transformed_value = calculate_transformed_value_08008590(*(undefined4 *)(PTR_DAT_080046cc + (index_a + 10) * 4 + 4));\n          transformed_value = calculate_double_multiplication_08008640((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20),DAT_08004690,DAT_08004694)\n          ;\n          result = calculate_result_08008c30((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n          convert_float_to_string_08003826(result);\n        }\n        if (index_a < 2) {\n          write_characters_080036c6(PTR_DAT_080046c0);\n        }\n        else {\n          write_characters_080036c6(PTR_DAT_080046c4);\n        }\n      }\n      return;\n    }\n    validation_result = validate_and_process_data_08004d7c(index_9,data_array);\n    if (validation_result == 0) break;\n    write_characters_080036c6(PTR_DAT_08004698);\n    switch(index_9) {\n    case 0:\n      write_characters_080036c6(PTR_DAT_0800469c);\n      break;\n    case 1:\n      write_characters_080036c6(PTR_DAT_080046a0);\n      break;\n    case 2:\n      write_characters_080036c6(PTR_DAT_080046a4);\n      break;\n    case 3:\n      write_characters_080036c6(PTR_DAT_080046a8);\n      break;\n    case 4:\n      write_characters_080036c6(PTR_DAT_080046ac);\n      break;\n    case 5:\n      write_characters_080036c6(PTR_DAT_080046b0);\n      break;\n    case 6:\n      write_characters_080036c6(PTR_DAT_080046b4);\n      break;\n    case 7:\n      write_characters_080036c6(PTR_DAT_080046b8);\n    }\n    for (index_a = 0; index_a < 3; index_a = index_a + 1) {\n      if ((PTR_DAT_080046bc[0x28] & 1) == 0) {\n        convert_float_to_string_08003826(data_array[index_a]);\n      }\n      else {\n        transformed_value = calculate_transformed_value_08008590(data_array[index_a]);\n        transformed_value = calculate_double_multiplication_08008640((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20),DAT_08004690,DAT_08004694);\n        result = calculate_result_08008c30((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n        convert_float_to_string_08003826(result);\n      }\n      if (index_a < 2) {\n        write_characters_080036c6(PTR_DAT_080046c0);\n      }\n      else {\n        write_characters_080036c6(PTR_DAT_080046c4);\n      }\n    }\n    index_9 = index_9 + 1;\n  }\n  display_error_message_08004030(10);\n  return;\n}\n\n",
            "called": [
                "FUN_08008c30",
                "FUN_080036c6",
                "FUN_08008640",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_08003826",
                "FUN_08008590"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080044e8",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_and_display_data_080044e8"
        },
        "FUN_08006c9c": {
            "renaming": {
                "FUN_08006c9c": "update_status_08006c9c",
                "param_1": "input_value",
                "bVar1": "is_valid"
            },
            "code": "\nbool update_status_08006c9c(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    DAT_08006cdc[1] = input_value + -1;\n    update_memory_08006b00(0xffffffff,0xf);\n    DAT_08006cdc[2] = 0;\n    *DAT_08006cdc = 7;\n  }\n  return !is_valid;\n}\n\n",
            "called": [
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c9c",
            "calling": [
                "FUN_08006d72"
            ],
            "imported": false,
            "current_name": "update_status_08006c9c"
        },
        "FUN_0800a5a0": {
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 uVar28;\n  ulonglong uVar29;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  uVar28 = CONCAT44(param_5,param_5);\n  iVar15 = *(int *)(PTR_DAT_0800a894 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (int)((longlong)DAT_0800a898 * (longlong)(param_3 + -3) >> 0x22) -\n                (param_3 + -3 >> 0x1f);\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = calculate_ulonglong_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = calculate_double_multiplication_08008640(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                                *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = calculate_result_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        calculate_double_multiplication_08008640((int)uVar26,uVar6,0,DAT_0800a89c);\n        calculate_result_08008ba0();\n        uVar25 = calculate_ulonglong_0800856c();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = calculate_double_multiplication_08008640((int)uVar25,uVar8,0,DAT_0800a8a0);\n        floating_point_operation_080082d0((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = calculate_result_08008ba0();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = calculate_result_080082d4((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = process_double_values_0800b2e8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    calculate_double_multiplication_08008640((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = process_data_080094c0();\n    uVar25 = calculate_double_multiplication_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,DAT_0800a8a4);\n    uVar26 = floating_point_operation_080082d0((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = calculate_result_08008ba0();\n    uVar25 = calculate_ulonglong_0800856c();\n    uVar26 = floating_point_operation_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                          (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = check_process_status_08008b4c(uVar8,uVar6,0,DAT_0800ac3c);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = floating_point_operation_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar12 = 0;\n        }\n        else {\nLAB_0800a8c8:\n          uVar12 = local_258[0];\n          if (local_258[0] == 0) {\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                uVar12 = *puVar5;\n                if (uVar12 != 0) {\n                  iVar14 = iVar4 + 1;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            uVar12 = 1;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = floating_point_operation_080082d0(0,DAT_0800ac38,uVar8,uVar6);\n          if (uVar12 != 0) {\n            uVar25 = process_double_values_0800b2e8(0,DAT_0800ac38,local_270);\n            uVar26 = floating_point_operation_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                  (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = is_data_processed_08008b10((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = process_double_values_0800b2e8((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = check_process_status_08008b4c(uVar8,uVar6,0,DAT_0800ade4);\n      if (iVar9 == 0) {\n        uVar12 = calculate_result_08008ba0(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        calculate_double_multiplication_08008640(uVar8,uVar6,0,DAT_0800ade8);\n        uVar12 = calculate_result_08008ba0();\n        uVar26 = calculate_ulonglong_0800856c();\n        uVar26 = calculate_double_multiplication_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,DAT_0800ade4);\n        floating_point_operation_080082d0(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = calculate_result_08008ba0();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = calculate_ulonglong_0800856c(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = calculate_double_multiplication_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = calculate_result_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = process_double_values_0800b2e8(0,DAT_0800ac38,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar28 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar28;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar28;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar28 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar28;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar28 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = calculate_ulonglong_0800856c(*puVar5);\n      uVar25 = calculate_double_multiplication_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = calculate_double_multiplication_08008640((int)uVar26,uVar8,0,DAT_0800ac40);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    uVar8 = DAT_0800ac30;\n    uVar6 = DAT_0800ac34;\n    do {\n      DAT_0800ac30 = uVar8;\n      DAT_0800ac34 = uVar6;\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = (undefined4 *)PTR_DAT_0800ac44;\n        while( true ) {\n          uVar25 = calculate_double_multiplication_08008640(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6\n                               );\n          uVar26 = calculate_result_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n      uVar8 = DAT_0800ac30;\n      uVar6 = DAT_0800ac34;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n            uVar8 = (undefined4)uVar28;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar28 = calculate_result_080082d4(uVar8,uVar6,uVar11,uVar20);\n            uVar26 = floating_point_operation_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n            uVar26 = calculate_result_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar26;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar28;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar28 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar28 >> 0x20);\n              uVar8 = (undefined4)uVar28;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar28 = calculate_result_080082d4(uVar8,uVar6,uVar11,uVar20);\n              uVar26 = floating_point_operation_080082d0(uVar11,uVar20,(int)uVar28,(int)((ulonglong)uVar28 >> 0x20));\n              uVar26 = calculate_result_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar26;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar28;\n            } while (&local_168 + 1 != puVar16);\n            uVar28 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar28 = calculate_result_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar28 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar28 = calculate_result_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar28 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar28 = calculate_result_080082d4((int)uVar28,(int)((ulonglong)uVar28 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar28 >> 0x20);\n  uVar8 = (undefined4)uVar28;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar28;\n    uVar29 = floating_point_operation_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar29 = calculate_result_080082d4((int)uVar29,(int)(uVar29 >> 0x20),*(undefined4 *)(puVar16 + 1),\n                            *(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar29 = floating_point_operation_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar29 = uVar29 & 0xffffffff | (ulonglong)((int)(uVar29 >> 0x20) + 0x80000000) << 0x20;\nLAB_0800ad26:\n  *(ulonglong *)((int)local_260[1] + 8) = uVar29;\n  return uVar2 & 7;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_080094c0",
                "FUN_0800b2e8",
                "FUN_08008640",
                "FUN_080082d0",
                "FUN_0800856c",
                "FUN_08008ba0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0800a5a0",
            "calling": [
                "FUN_08009d78"
            ],
            "imported": false,
            "current_name": "FUNC_0800a5a0"
        },
        "FUN_0800195c": {
            "renaming": {
                "FUN_0800195c": "update_control_register_if_needed_0800195c"
            },
            "code": "\nvoid updateControlRegisterIfNeeded_0800195c(void)\n\n{\n  if ((PTR_DAT_08001990[1] != '\\x06') && ((PTR_DAT_08001990[2] & 0x20) == 0)) {\n    update_control_registers_080025e8();\n    PTR_DAT_08001990[2] = PTR_DAT_08001990[2] | 0x40;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800195c",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "update_control_register_if_needed_0800195c"
        },
        "FUN_08009214": {
            "renaming": {
                "FUN_08009214": "check_non_zero_result_08009214",
                "in_ZR": "inputChar"
            },
            "code": "\nbool checkNonZeroResult_08009214(void)\n\n{\n  char inputChar;\n  \n  combine_parameters_08009204();\n  return inputChar != '\\0';\n}\n\n",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009214",
            "calling": [
                "FUN_08004e30",
                "FUN_080029d8",
                "FUN_08002afc",
                "FUN_08001f00",
                "FUN_08002638",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_non_zero_result_08009214"
        },
        "FUN_08004dd2": {
            "renaming": {
                "FUN_08004dd2": "validate_and_initialize_settings_08004dd2",
                "bVar1": "dataValue",
                "iVar2": "checksumResult"
            },
            "code": "\nundefined4 validateAndInitializeSettings_08004dd2(void)\n\n{\n  byte dataValue;\n  int checksumResult;\n  \n  dataValue = get_data_from_memory_08000310(0);\n  if (dataValue == 5) {\n    checksumResult = check_data_checksum_080003ec(PTR_DAT_08004e2c,1,0x40);\n    if (checksumResult == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < dataValue) {\n      return 0;\n    }\n    checksumResult = check_data_checksum_080003ec(PTR_DAT_08004e2c,1,0x28);\n    if (checksumResult == 0) {\n      return 0;\n    }\n    initialize_settings_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_08000310",
                "FUN_080003ec",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004dd2",
            "calling": [
                "FUN_080051b4"
            ],
            "imported": false,
            "current_name": "validate_and_initialize_settings_08004dd2"
        },
        "FUN_08008244": {
            "renaming": {
                "FUN_08008244": "do_nothing_08008244"
            },
            "code": "\nvoid do_nothing_08008244(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008244",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "do_nothing_08008244"
        },
        "FUN_08005778": {
            "renaming": {
                "FUN_08005778": "update_register_from_pointer_08005778",
                "update_register_value_080052ac": "updateRegisterValue"
            },
            "code": "\nvoid updateRegisterFromPointer_08005778(void)\n\n{\n  updateRegisterValue(*(undefined2 *)PTR_DAT_0800578c);\n  return;\n}\n\n",
            "called": [
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005778",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "update_register_from_pointer_08005778"
        },
        "FUN_080028bc": {
            "renaming": {
                "FUN_080028bc": "calculate_quotient_080028bc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "code": "\nundefined4 calculate_quotient_080028bc(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = floating_point_multiplication_08008eec(value2,value2);\n  result2 = floating_point_multiplication_08008eec(value1,value1);\n  result1 = process_numbers_08008cd8(result1,result2);\n  result2 = calculate_result_08008cdc(value3,value3);\n  result1 = floating_point_division_08009054(result1,result2);\n  return result1;\n}\n\n",
            "called": [
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080028bc",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_quotient_080028bc"
        },
        "FUN_08006628": {
            "renaming": {
                "FUN_08006628": "calculate_shifted_value_08006628",
                "uVar1": "result",
                "uVar2": "leading_zeroes"
            },
            "code": "\nundefined4 calculate_shifted_value_08006628(void)\n\n{\n  uint result;\n  uint leading_zeroes;\n  \n  result = calculate_result_080064ec();\n  leading_zeroes = count_leading_zeroes(0xf000000);\n  *(uint *)PTR_DAT_0800667c =\n       result >> PTR_DAT_08006678[(*(uint *)(DAT_08006674 + 8) & 0xf0) >> (leading_zeroes & 0xff)];\n  return *(undefined4 *)PTR_DAT_0800667c;\n}\n\n",
            "called": [
                "FUN_080064ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006628",
            "calling": [
                "FUN_080066cc",
                "FUN_0800618c",
                "FUN_08006680"
            ],
            "imported": false,
            "current_name": "calculate_shifted_value_08006628"
        },
        "FUN_0800738e": {
            "renaming": {
                "FUN_0800738e": "update_and_execute_0800738e",
                "param_1": "inputValue",
                "do_nothing_080073c0": "executeFunction"
            },
            "code": "\nvoid updateAndExecute_0800738e(ushort inputValue)\n\n{\n  if (((uint)inputValue & *(uint *)(DAT_080073bc + 0x14)) != 0) {\n    *(uint *)(DAT_080073bc + 0x14) = (uint)inputValue;\n    executeFunction(inputValue);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080073c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800738e",
            "calling": [],
            "imported": false,
            "current_name": "update_and_execute_0800738e"
        },
        "FUN_08002828": {
            "renaming": {
                "FUN_08002828": "do_nothing_08002828"
            },
            "code": "\nvoid do_nothing_08002828(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002828",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "do_nothing_08002828"
        },
        "FUN_080053a0": {
            "renaming": {
                "FUN_080053a0": "process_control_values_080053a0",
                "uVar1": "buffer_address",
                "iVar2": "threshold_updated"
            },
            "code": "\nvoid process_control_values_080053a0(void)\n\n{\n  undefined4 buffer_address;\n  int threshold_updated;\n  \n  update_register_080052dc(*(undefined2 *)PTR_DAT_080055f0);\n  *(undefined2 *)PTR_DAT_080055f8 = *(undefined2 *)PTR_DAT_080055f4;\n  if (*(int *)PTR_DAT_080055fc == 0) {\n    buffer_address = get_buffer_address_08002f74();\n    *(undefined4 *)PTR_DAT_080055fc = buffer_address;\n    if (*(int *)PTR_DAT_080055fc == 0) {\n      check_and_reset_control_registers_080057e4();\n      PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n    }\n    else {\n      if (PTR_DAT_08005600[1] == '\\x03') {\n        *(undefined4 *)(PTR_DAT_08005604 + 0x1c) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x28);\n        calculate_and_update_min_value_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n        *(undefined4 *)(PTR_DAT_08005604 + 0x18) = DAT_08005608;\n      }\n      *(int *)(PTR_DAT_08005604 + 0x20) =\n           (*(int *)(*(int *)PTR_DAT_080055fc + 0x30) >> 1) +\n           *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n      *(int *)PTR_DAT_08005604 = -(*(int *)(*(int *)PTR_DAT_080055fc + 0x10) >> 1);\n      *(undefined4 *)(PTR_DAT_08005604 + 4) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 8) = *(undefined4 *)PTR_DAT_08005604;\n      *(undefined4 *)(PTR_DAT_08005604 + 0xc) = *(undefined4 *)(*(int *)PTR_DAT_080055fc + 0x10);\n      *(undefined4 *)(PTR_DAT_08005604 + 0x10) = 0;\n    }\n  }\n  if (*(int *)PTR_DAT_080055fc != 0) {\n    *(undefined2 *)PTR_DAT_080055f0 = **(undefined2 **)PTR_DAT_080055fc;\n    *(undefined2 *)PTR_DAT_080055f4 = 0;\n    *(int *)PTR_DAT_08005604 = *(int *)(*(int *)PTR_DAT_080055fc + 4) + *(int *)PTR_DAT_08005604;\n    if (0 < *(int *)PTR_DAT_08005604) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x10;\n      *(int *)PTR_DAT_08005604 = *(int *)PTR_DAT_08005604 - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x20) == 0) {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 4) = *(int *)(PTR_DAT_08005600 + 4) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 4) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 8) + *(int *)(PTR_DAT_08005604 + 4);\n    if (0 < *(int *)(PTR_DAT_08005604 + 4)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x440;\n      *(int *)(PTR_DAT_08005604 + 4) =\n           *(int *)(PTR_DAT_08005604 + 4) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x80) == 0) {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 8) = *(int *)(PTR_DAT_08005600 + 8) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 8) =\n         *(int *)(*(int *)PTR_DAT_080055fc + 0xc) + *(int *)(PTR_DAT_08005604 + 8);\n    if (0 < *(int *)(PTR_DAT_08005604 + 8)) {\n      *(ushort *)PTR_DAT_080055f4 = *(ushort *)PTR_DAT_080055f4 | 0x100;\n      *(int *)(PTR_DAT_08005604 + 8) =\n           *(int *)(PTR_DAT_08005604 + 8) - *(int *)(PTR_DAT_08005604 + 0xc);\n      if ((*(ushort *)PTR_DAT_080055f0 & 0x200) == 0) {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + 1;\n      }\n      else {\n        *(int *)(PTR_DAT_08005600 + 0xc) = *(int *)(PTR_DAT_08005600 + 0xc) + -1;\n      }\n    }\n    *(int *)(PTR_DAT_08005604 + 0x10) = *(int *)(PTR_DAT_08005604 + 0x10) + 1;\n    if (*(uint *)(PTR_DAT_08005604 + 0x10) < *(uint *)(*(int *)PTR_DAT_080055fc + 0x10)) {\n      if (PTR_DAT_08005600[1] == '\\x04') {\n        threshold_updated = update_threshold_08005360();\n        if (threshold_updated != 0) {\n          if (*(uint *)(*(int *)PTR_DAT_080055fc + 0x30) < *(uint *)(PTR_DAT_08005604 + 0x1c)) {\n            *(int *)(PTR_DAT_08005604 + 0x1c) =\n                 *(int *)(PTR_DAT_08005604 + 0x1c) - *(int *)(*(int *)PTR_DAT_080055fc + 0x30);\n            calculate_and_update_min_value_08005324(*(undefined4 *)(PTR_DAT_08005604 + 0x1c));\n          }\n          else {\n            check_and_reset_control_registers_080057e4();\n            PTR_DAT_08005600[2] = PTR_DAT_08005600[2] | 4;\n          }\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x34)) {\n        threshold_updated = update_threshold_08005360();\n        if (threshold_updated != 0) {\n          *(int *)(PTR_DAT_08005748 + 0x1c) =\n               *(int *)(PTR_DAT_08005748 + 0x1c) + *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          if (*(uint *)(*(int *)PTR_DAT_0800574c + 0x3c) <= *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          }\n          calculate_and_update_min_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(uint *)(PTR_DAT_08005748 + 0x10) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) != *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n               *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x3c);\n          calculate_and_update_min_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n      else if (*(int *)(PTR_DAT_08005748 + 0x10) == *(int *)(*(int *)PTR_DAT_0800574c + 0x38)) {\n        if (*(int *)(PTR_DAT_08005748 + 0x1c) == *(int *)(*(int *)PTR_DAT_0800574c + 0x3c)) {\n          *(undefined4 *)(PTR_DAT_08005748 + 0x18) = DAT_08005750;\n        }\n        else {\n          *(int *)(PTR_DAT_08005748 + 0x18) = 420000 - *(int *)(PTR_DAT_08005748 + 0x18);\n        }\n      }\n      else {\n        threshold_updated = update_threshold_08005360();\n        if (threshold_updated != 0) {\n          if (*(uint *)(PTR_DAT_08005748 + 0x20) < *(uint *)(PTR_DAT_08005748 + 0x1c)) {\n            *(int *)(PTR_DAT_08005748 + 0x1c) =\n                 *(int *)(PTR_DAT_08005748 + 0x1c) - *(int *)(*(int *)PTR_DAT_0800574c + 0x30);\n          }\n          else {\n            *(uint *)(PTR_DAT_08005748 + 0x1c) = *(uint *)(PTR_DAT_08005748 + 0x1c) >> 1;\n          }\n          if (*(uint *)(PTR_DAT_08005748 + 0x1c) < *(uint *)(*(int *)PTR_DAT_0800574c + 0x2c)) {\n            *(undefined4 *)(PTR_DAT_08005748 + 0x1c) =\n                 *(undefined4 *)(*(int *)PTR_DAT_0800574c + 0x2c);\n          }\n          calculate_and_update_min_value_08005324(*(undefined4 *)(PTR_DAT_08005748 + 0x1c));\n        }\n      }\n    }\n    else {\n      *(undefined2 *)PTR_DAT_08005754 = 0;\n      *(undefined4 *)PTR_DAT_0800574c = 0;\n      update_pointer_08002f40();\n    }\n  }\n  *(ushort *)PTR_DAT_08005754 = *(ushort *)PTR_DAT_08005754 ^ *(ushort *)(PTR_DAT_08005758 + 0x18);\n  *(ushort *)PTR_DAT_0800575c = *(ushort *)PTR_DAT_0800575c ^ *(ushort *)(PTR_DAT_08005758 + 0x1a);\n  return;\n}\n\n",
            "called": [
                "FUN_080057e4",
                "FUN_08005324",
                "FUN_08005360",
                "FUN_08002f40",
                "FUN_08002f74",
                "FUN_080052dc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080053a0",
            "calling": [
                "FUN_08007c7c"
            ],
            "imported": false,
            "current_name": "process_control_values_080053a0"
        },
        "FUN_080092c4": {
            "renaming": {
                "FUN_080092c4": "initialize_and_execute_080092c4",
                "iVar1": "index",
                "puVar2": "data_ptr",
                "UNRECOVERED_JUMPTABLE": "unrecovered_jumptable"
            },
            "code": "\nvoid initialize_and_execute_080092c4(void)\n\n{\n  int index;\n  undefined4 *data_ptr;\n  code *unrecovered_jumptable;\n  \n  for (index = 0; data_ptr = (undefined4 *)PTR_DAT_0800930c,\n      PTR_DAT_08009304 + index < PTR_DAT_08009308; index = index + 4) {\n    *(undefined4 *)(PTR_DAT_08009304 + index) = *(undefined4 *)(DAT_08009300 + index);\n  }\n  for (; data_ptr < PTR_DAT_08009310; data_ptr = data_ptr + 1) {\n    *data_ptr = 0;\n  }\n  initialize_data_0800756c();\n  execute_function_list_0800b3e8();\n  unrecovered_jumptable = (code *)0x80092fa;\n  system_initialization_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jumptable)();\n  return;\n}\n\n",
            "called": [
                "FUN_0800756c",
                "FUN_0800b3e8",
                "FUN_08007540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080092c4",
            "calling": [],
            "imported": false,
            "current_name": "initialize_and_execute_080092c4"
        },
        "FUN_08008250": {
            "renaming": {
                "FUN_08008250": "write_data_wrapper_08008250",
                "param_1": "inputData"
            },
            "code": "\nvoid writeDataWrapper_08008250(undefined inputData)\n\n{\n  write_data_08007e1c(inputData);\n  return;\n}\n\n",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008250",
            "calling": [
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "imported": false,
            "current_name": "write_data_wrapper_08008250"
        },
        "FUN_0800184c": {
            "renaming": {
                "FUN_0800184c": "process_character_0800184c",
                "param_1": "output_byte",
                "param_2": "input_param",
                "param_3": "input_string",
                "param_4": "input_index",
                "iVar1": "process_result",
                "uVar2": "function_result"
            },
            "code": "\nundefined4 process_character_0800184c(byte *output_byte,undefined4 input_param,int input_string,byte *input_index)\n\n{\n  int process_result;\n  undefined4 function_result;\n  \n  if (*(char *)(input_string + (uint)*input_index) == '\\0') {\n    function_result = 0;\n  }\n  else {\n    *output_byte = *(byte *)(input_string + (uint)*input_index);\n    if ((*output_byte < 0x41) || (0x5a < *output_byte)) {\n      *PTR_DAT_080018c8 = 2;\n      function_result = 0;\n    }\n    else {\n      *input_index = *input_index + 1;\n      process_result = process_input_string_08002638(input_string,input_index,input_param);\n      if (process_result == 0) {\n        *PTR_DAT_080018c8 = 1;\n        function_result = 0;\n      }\n      else {\n        function_result = 1;\n      }\n    }\n  }\n  return function_result;\n}\n\n",
            "called": [
                "FUN_08002638"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800184c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_character_0800184c"
        },
        "FUN_08001f00": {
            "renaming": {
                "FUN_08001f00": "process_data_and_update_08001f00",
                "param_1": "base_address",
                "param_2": "input_array",
                "param_3": "offset_address",
                "param_4": "byte1",
                "param_5": "byte2",
                "param_6": "byte3",
                "param_7": "multiplier",
                "param_8": "update_flag",
                "param_9": "additional_multiplier",
                "param_10": "parameter_status",
                "local_1c": "intermediate_result1",
                "local_20": "intermediate_result2",
                "local_24": "transformed_result",
                "local_2c": "result1",
                "local_30": "result2",
                "local_34": "processed_number",
                "local_38": "processed_result1",
                "local_3c": "processed_result2",
                "local_40": "updated_result",
                "local_42": "iteration_limit",
                "local_48": "divided_result1",
                "local_4c": "divided_result2",
                "local_50": "final_result1",
                "local_54": "final_result2",
                "local_58": "interpolated_result1",
                "local_5c": "interpolated_result2",
                "local_6c": "result_array",
                "local_27": "iteration_counter",
                "local_26": "current_iteration",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar4": "temp_uint",
                "uVar5": "temp_dbl1",
                "uVar6": "temp_dbl2",
                "iVar3": "temp_int"
            },
            "code": "\nvoid process_data_and_update_08001f00(int base_address,undefined4 *input_array,int offset_address,byte byte1,byte byte2,byte byte3\n                 ,undefined4 multiplier,char update_flag,undefined4 additional_multiplier,char parameter_status)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  int temp_int;\n  uint temp_uint;\n  undefined8 temp_dbl1;\n  undefined8 temp_dbl2;\n  uint result_array [4];\n  undefined4 interpolated_result2;\n  undefined4 interpolated_result1;\n  undefined4 final_result2;\n  undefined4 final_result1;\n  undefined4 divided_result2;\n  undefined4 divided_result1;\n  ushort iteration_limit;\n  undefined4 updated_result;\n  undefined4 processed_result2;\n  undefined4 processed_result1;\n  uint processed_number;\n  undefined4 result2;\n  undefined4 result1;\n  char iteration_counter;\n  ushort current_iteration;\n  undefined4 transformed_result;\n  uint intermediate_result2;\n  uint intermediate_result1;\n  \n  result1 = calculate_result_08008cdc(*(undefined4 *)((uint)byte1 * 4 + base_address),\n                          *(undefined4 *)((uint)byte1 * 4 + offset_address));\n  result2 = calculate_result_08008cdc(*(undefined4 *)((uint)byte2 * 4 + base_address),\n                          *(undefined4 *)((uint)byte2 * 4 + offset_address));\n  processed_number = process_numbers_08008cd8(input_array[byte3],*(undefined4 *)((uint)byte3 * 4 + base_address));\n  intermediate_result1 = *(uint *)((uint)byte1 * 4 + offset_address) ^ 0x80000000;\n  intermediate_result2 = *(uint *)((uint)byte2 * 4 + offset_address) ^ 0x80000000;\n  processed_result1 = process_numbers_08008cd8(input_array[byte1],result1);\n  processed_result2 = process_numbers_08008cd8(input_array[byte2],result2);\n  temp_var1 = floating_point_multiplication_08008eec(intermediate_result1,processed_result2);\n  temp_var2 = floating_point_multiplication_08008eec(intermediate_result2,processed_result1);\n  temp_var1 = process_numbers_08008cd8(temp_var1,temp_var2);\n  temp_dbl1 = calculate_transformed_value_08008590(temp_var1);\n  temp_var1 = floating_point_multiplication_08008eec(intermediate_result1,processed_result1);\n  temp_var2 = floating_point_multiplication_08008eec(intermediate_result2,processed_result2);\n  temp_var1 = calculate_result_08008cdc(temp_var1,temp_var2);\n  temp_dbl2 = calculate_transformed_value_08008590(temp_var1);\n  temp_dbl1 = thunk_calculate_complex_operation_08009990((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20),(int)temp_dbl2,\n                             (int)((ulonglong)temp_dbl2 >> 0x20));\n  transformed_result = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n  if (parameter_status == '\\0') {\n    temp_int = check_parameters_status_0800923c(transformed_result,0);\n    if (temp_int != 0) {\n      temp_dbl1 = calculate_transformed_value_08008590(transformed_result);\n      temp_dbl1 = calculate_result_080082d4((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20),DAT_08002240,DAT_08002244);\n      transformed_result = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n    }\n  }\n  else {\n    temp_int = check_parameters_status_08009250(transformed_result,0);\n    if (temp_int != 0) {\n      temp_dbl1 = calculate_transformed_value_08008590(transformed_result);\n      temp_dbl1 = floating_point_operation_080082d0((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20),DAT_08002240,DAT_08002244);\n      transformed_result = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n    }\n  }\n  temp_var1 = floating_point_multiplication_08008eec(transformed_result,additional_multiplier);\n  temp_dbl1 = calculate_transformed_value_08008590(temp_var1);\n  temp_dbl2 = calculate_transformed_value_08008590(processed_number & 0x7fffffff);\n  temp_dbl1 = calculate_result_0800981c((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20),(int)temp_dbl2,\n                       (int)((ulonglong)temp_dbl2 >> 0x20));\n  updated_result = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n  temp_int = check_non_zero_result_08009214(updated_result,0);\n  if (temp_int == 0) {\n    temp_var1 = floating_point_division_08009054(updated_result,*(undefined4 *)(PTR_DAT_08002248 + 0x1c));\n    temp_dbl1 = calculate_transformed_value_08008590(temp_var1);\n    temp_dbl1 = process_data_080094c0((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n    iteration_limit = calculate_result_08008bf0((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n    if (update_flag != '\\0') {\n      temp_var1 = calculate_float_representation_08008e44(iteration_limit);\n      multiplier = floating_point_multiplication_08008eec(multiplier,temp_var1);\n    }\n    temp_var1 = calculate_float_representation_08008e44(iteration_limit);\n    divided_result1 = floating_point_division_08009054(transformed_result,temp_var1);\n    temp_var1 = calculate_float_representation_08008e44(iteration_limit);\n    divided_result2 = floating_point_division_08009054(processed_number,temp_var1);\n    temp_dbl1 = calculate_transformed_value_08008590(divided_result1);\n    temp_dbl1 = calculate_double_multiplication_08008640((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20),0,DAT_0800224c);\n    temp_dbl2 = calculate_transformed_value_08008590(divided_result1);\n    temp_dbl1 = calculate_double_multiplication_08008640((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20),(int)temp_dbl2,\n                         (int)((ulonglong)temp_dbl2 >> 0x20));\n    temp_dbl1 = floating_point_operation_080082d0(0,DAT_08002250,(int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n    final_result1 = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n    final_result2 = divided_result1;\n    iteration_counter = '\\0';\n    result_array[byte3] = *(uint *)(base_address + (uint)byte3 * 4);\n    for (current_iteration = 1; current_iteration < iteration_limit; current_iteration = current_iteration + 1) {\n      if ((int)iteration_counter < (int)(uint)(byte)PTR_DAT_08002248[0x3e]) {\n        temp_var1 = floating_point_multiplication_08008eec(intermediate_result1,final_result2);\n        temp_var2 = floating_point_multiplication_08008eec(intermediate_result2,final_result1);\n        result_array[3] = calculate_result_08008cdc(temp_var1,temp_var2);\n        temp_var1 = floating_point_multiplication_08008eec(intermediate_result1,final_result1);\n        temp_var2 = floating_point_multiplication_08008eec(intermediate_result2,final_result2);\n        intermediate_result1 = process_numbers_08008cd8(temp_var1,temp_var2);\n        intermediate_result2 = result_array[3];\n        iteration_counter = iteration_counter + '\\x01';\n      }\n      else {\n        temp_var1 = calculate_float_representation_08008e44(current_iteration);\n        temp_var1 = floating_point_multiplication_08008eec(temp_var1,divided_result1);\n        temp_dbl1 = calculate_transformed_value_08008590(temp_var1);\n        temp_dbl1 = calculate_result_08009410((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n        interpolated_result1 = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n        temp_var1 = calculate_float_representation_08008e44(current_iteration);\n        temp_var1 = floating_point_multiplication_08008eec(temp_var1,divided_result1);\n        temp_dbl1 = calculate_transformed_value_08008590(temp_var1);\n        temp_dbl1 = calculate_result_080096e8((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n        interpolated_result2 = calculate_result_08008c30((int)temp_dbl1,(int)((ulonglong)temp_dbl1 >> 0x20));\n        temp_var1 = floating_point_multiplication_08008eec(*(uint *)((uint)byte1 * 4 + offset_address) ^ 0x80000000,interpolated_result1);\n        temp_var2 = floating_point_multiplication_08008eec(*(undefined4 *)((uint)byte2 * 4 + offset_address),interpolated_result2);\n        intermediate_result1 = calculate_result_08008cdc(temp_var1,temp_var2);\n        temp_var1 = floating_point_multiplication_08008eec(*(uint *)((uint)byte1 * 4 + offset_address) ^ 0x80000000,interpolated_result2);\n        temp_var2 = floating_point_multiplication_08008eec(*(undefined4 *)((uint)byte2 * 4 + offset_address),interpolated_result1);\n        intermediate_result2 = process_numbers_08008cd8(temp_var1,temp_var2);\n        iteration_counter = '\\0';\n      }\n      temp_uint = calculate_result_08008cdc(result1,intermediate_result1);\n      result_array[byte1] = temp_uint;\n      temp_uint = calculate_result_08008cdc(result2,intermediate_result2);\n      result_array[byte2] = temp_uint;\n      temp_uint = calculate_result_08008cdc(result_array[byte3],divided_result2);\n      result_array[byte3] = temp_uint;\n      process_input_and_update_08001e98(result_array[0],result_array[1],result_array[2],multiplier,update_flag);\n      if (*PTR_DAT_08002404 != '\\0') {\n        return;\n      }\n    }\n    process_input_and_update_08001e98(*input_array,input_array[1],input_array[2],multiplier,update_flag);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08001e98",
                "FUN_08008cd8",
                "FUN_08009214",
                "FUN_08008cdc",
                "FUN_080082d4",
                "thunk_FUN_08009990",
                "FUN_080094c0",
                "FUN_080096e8",
                "FUN_08009250",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_0800981c",
                "FUN_08009054",
                "FUN_0800923c",
                "FUN_08008c30",
                "FUN_08009410",
                "FUN_08008bf0",
                "FUN_08008640",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001f00",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_data_and_update_08001f00"
        },
        "FUN_08006ce0": {
            "renaming": {
                "FUN_08006ce0": "update_register_08006ce0",
                "param_1": "registerValue"
            },
            "code": "\nvoid updateRegister_08006ce0(undefined4 registerValue)\n\n{\n  update_register_value_08006950(registerValue);\n  return;\n}\n\n",
            "called": [
                "FUN_08006950"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ce0",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "update_register_08006ce0"
        },
        "FUN_08006d4a": {
            "renaming": {
                "FUN_08006d4a": "set_char_bit_08006d4a",
                "param_1": "inputChar"
            },
            "code": "\nvoid setCharBit_08006d4a(char inputChar)\n\n{\n  set_bit_at_index_080069e4((int)inputChar);\n  return;\n}\n\n",
            "called": [
                "FUN_080069e4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d4a",
            "calling": [],
            "imported": false,
            "current_name": "set_char_bit_08006d4a"
        },
        "FUN_08008894": {
            "renaming": {
                "FUN_08008894": "calculate_float_multiplication_08008894",
                "param_1": "operand1_low",
                "param_2": "operand1_high",
                "param_3": "operand2_low",
                "param_4": "operand2_high",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "result_high",
                "uVar9": "exponent_diff",
                "uVar10": "intermediate1",
                "uVar11": "intermediate2",
                "uVar12": "intermediate3",
                "uVar13": "intermediate4",
                "unaff_r5": "operand2_exponent",
                "uVar17": "result",
                "iVar8": "exponent_sum",
                "bVar14": "condition1",
                "bVar15": "condition2",
                "bVar16": "condition3"
            },
            "code": "\nulonglong calculate_float_multiplication_08008894(undefined4 operand1_low,uint operand1_high,uint operand2_low,uint operand2_high)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint result_high;\n  int exponent_sum;\n  uint exponent_diff;\n  uint operand2_exponent;\n  uint intermediate1;\n  uint intermediate2;\n  uint intermediate3;\n  uint intermediate4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong result;\n  \n  result = CONCAT44(operand1_high,operand1_low);\n  intermediate4 = 0x7ff;\n  result_high = operand1_high >> 0x14 & 0x7ff;\n  condition1 = result_high == 0;\n  if (!condition1) {\n    operand2_exponent = operand2_high >> 0x14 & 0x7ff;\n    condition1 = operand2_exponent == 0;\n  }\n  if (!condition1) {\n    condition1 = result_high == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = operand2_exponent == 0x7ff;\n  }\n  if (condition1) {\n    result = calculate_result_08008a02();\n  }\n  exponent_diff = (uint)(result >> 0x20);\n  intermediate2 = (uint)result;\n  exponent_sum = result_high - operand2_exponent;\n  if ((operand2_low | operand2_high << 0xc) == 0) {\n    result_high = (exponent_diff ^ operand2_high) & 0x80000000 | exponent_diff & 0xfffff;\n    condition3 = SCARRY4(exponent_sum,intermediate4 >> 1);\n    exponent_diff = exponent_sum + (intermediate4 >> 1);\n    condition1 = (int)exponent_diff < 0;\n    condition2 = exponent_diff == 0;\n    if (!condition2 && condition1 == condition3) {\n      condition3 = SBORROW4(intermediate4,exponent_diff);\n      condition1 = (int)(intermediate4 - exponent_diff) < 0;\n      condition2 = intermediate4 == exponent_diff;\n    }\n    if (!condition2 && condition1 == condition3) {\n      result_high = result_high | exponent_diff * 0x100000;\n    }\n    if (!condition2 && condition1 == condition3) {\n      return result & 0xffffffff | (ulonglong)result_high << 0x20;\n    }\n    result_high = result_high | 0x100000;\n    intermediate4 = 0;\n    condition2 = SBORROW4(exponent_diff,1);\n    exponent_diff = exponent_diff - 1;\n    condition1 = exponent_diff == 0;\n    temp3 = exponent_diff;\n  }\n  else {\n    temp3 = (operand2_high << 0xc) >> 4 | 0x10000000 | operand2_low >> 0x18;\n    intermediate4 = operand2_low << 8;\n    intermediate1 = (exponent_diff << 0xc) >> 4 | 0x10000000 | intermediate2 >> 0x18;\n    intermediate2 = intermediate2 * 0x100;\n    result_high = (exponent_diff ^ operand2_high) & 0x80000000;\n    condition1 = temp3 <= intermediate1;\n    if (intermediate1 == temp3) {\n      condition1 = intermediate4 <= intermediate2;\n    }\n    exponent_sum = exponent_sum + (uint)condition1;\n    exponent_diff = exponent_sum + 0x3fd;\n    if (condition1 == false) {\n      temp3 = temp3 >> 1;\n      intermediate4 = (uint)((operand2_low >> 0x18 & 1) != 0) << 0x1f | intermediate4 >> 1;\n    }\n    intermediate3 = intermediate2 - intermediate4;\n    intermediate1 = (intermediate1 - temp3) - (uint)(intermediate2 < intermediate4);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | intermediate4 >> 1;\n    intermediate2 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      condition1 = temp1 <= intermediate3;\n      if (temp4 < intermediate1 || intermediate1 - temp4 < (uint)condition1) {\n        intermediate3 = intermediate3 - temp1;\n        intermediate2 = intermediate2 | temp3;\n        intermediate1 = (intermediate1 - temp4) - (uint)!condition1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp1 <= intermediate3;\n      condition1 = intermediate1 - temp5 < (uint)condition2;\n      intermediate4 = intermediate1;\n      if (temp5 < intermediate1 || condition1) {\n        intermediate3 = intermediate3 - temp1;\n        intermediate4 = (intermediate1 - temp5) - (uint)!condition2;\n      }\n      if (temp5 < intermediate1 || condition1) {\n        intermediate2 = intermediate2 | temp3 >> 1;\n      }\n      intermediate1 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp2 <= intermediate3;\n      condition1 = intermediate4 - intermediate1 < (uint)condition2;\n      temp5 = intermediate4;\n      if (intermediate1 < intermediate4 || condition1) {\n        intermediate3 = intermediate3 - temp2;\n        temp5 = (intermediate4 - intermediate1) - (uint)!condition2;\n      }\n      if (intermediate1 < intermediate4 || condition1) {\n        intermediate2 = intermediate2 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((intermediate1 & 1) != 0) << 0x1f | temp2 >> 1;\n      condition2 = temp1 <= intermediate3;\n      condition1 = temp5 - temp6 < (uint)condition2;\n      intermediate1 = temp5;\n      if (temp6 < temp5 || condition1) {\n        intermediate3 = intermediate3 - temp1;\n        intermediate1 = (temp5 - temp6) - (uint)!condition2;\n      }\n      if (temp6 < temp5 || condition1) {\n        intermediate2 = intermediate2 | temp3 >> 3;\n      }\n      intermediate4 = intermediate1 | intermediate3;\n      if (intermediate4 == 0) break;\n      intermediate1 = intermediate1 << 4 | intermediate3 >> 0x1c;\n      intermediate3 = intermediate3 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((result_high & 0x100000) != 0) goto LAB_080089b2;\n        result_high = result_high | intermediate2;\n        intermediate2 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((result_high & 0x100000) == 0) {\n      result_high = result_high | intermediate2;\n      intermediate2 = 0;\n    }\nLAB_080089b2:\n    condition3 = 0xfc < exponent_diff;\n    condition2 = SBORROW4(exponent_diff,0xfd);\n    temp4 = exponent_sum + 0x300;\n    condition1 = temp4 == 0;\n    temp3 = temp4;\n    if (condition3 && !condition1) {\n      condition3 = 0x6ff < temp4;\n      condition2 = SBORROW4(temp4,0x700);\n      temp3 = exponent_sum - 0x400;\n      condition1 = temp4 == 0x700;\n    }\n    if (!condition3 || condition1) {\n      condition1 = temp6 <= intermediate1;\n      if (intermediate1 == temp6) {\n        condition1 = temp1 <= intermediate3;\n      }\n      if (intermediate1 == temp6 && intermediate3 == temp1) {\n        condition1 = (intermediate2 & 1) != 0;\n      }\n      return CONCAT44(result_high + exponent_diff * 0x100000 + (uint)CARRY4(intermediate2,(uint)condition1),intermediate2 + condition1);\n    }\n  }\n  if (!condition1 && (int)temp3 < 0 == condition2) {\n    return (ulonglong)(result_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition3 = SCARRY4(exponent_diff,0x36);\n  condition1 = (int)(exponent_diff + 0x36) < 0;\n  condition2 = exponent_diff == 0xffffffca;\n  if (condition2 || condition1 != condition3) {\n    intermediate2 = 0;\n  }\n  if (condition2 || condition1 != condition3) {\n    result_high = result_high & 0x80000000;\n  }\n  if (condition2 || condition1 != condition3) {\n    return CONCAT44(result_high,intermediate2);\n  }\n  temp3 = -exponent_diff;\n  intermediate1 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = intermediate2 >> (intermediate1 & 0xff) | result_high << (0x20 - intermediate1 & 0xff);\n    exponent_diff = (result_high >> (intermediate1 & 0xff) & ~((result_high & 0x80000000) >> (intermediate1 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((intermediate4 | intermediate2 << (0x20 - intermediate1 & 0xff) | temp3 << 1) == 0) {\n      exponent_diff = exponent_diff & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(result_high,exponent_diff) & 0x80000000ffffffff;\n  }\n  exponent_sum = temp3 - 0x14;\n  if (exponent_sum != 0 && exponent_sum < 0 == SCARRY4(intermediate1,0xc)) {\n    exponent_diff = 0xc - exponent_sum;\n    temp3 = intermediate2 << (exponent_diff & 0xff);\n    intermediate2 = intermediate2 >> (0x20 - exponent_diff & 0xff) | result_high << (exponent_diff & 0xff);\n    exponent_diff = intermediate2 + -((int)temp3 >> 0x1f);\n    if ((intermediate4 | temp3 << 1) == 0) {\n      exponent_diff = exponent_diff & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((result_high & 0x80000000) + (uint)CARRY4(intermediate2,-((int)temp3 >> 0x1f)),exponent_diff);\n  }\n  intermediate1 = intermediate2 << (exponent_diff + 0x20 & 0xff);\n  intermediate2 = intermediate2 >> (temp3 & 0xff) | result_high << (exponent_diff + 0x20 & 0xff);\n  exponent_diff = intermediate2 + -((int)intermediate1 >> 0x1f);\n  if ((intermediate4 | intermediate1 << 1) == 0) {\n    exponent_diff = exponent_diff & ~(intermediate1 >> 0x1f);\n  }\n  return CONCAT44((result_high & 0x80000000) +\n                  ((result_high & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(intermediate2,-((int)intermediate1 >> 0x1f)),exponent_diff);\n}\n\n",
            "called": [
                "FUN_08008a02"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008894",
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_0800a1bc",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080098d0",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_float_multiplication_08008894"
        },
        "FUN_08000374": {
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "start_value",
                "param_2": "data_ptr",
                "param_3": "iterations",
                "local_1c": "remaining_iterations",
                "local_18": "current_data_ptr",
                "local_14": "current_value",
                "local_9": "accumulator"
            },
            "code": "\nvoid process_data_08000374(int start_value,char *data_ptr,int iterations)\n\n{\n  int remaining_iterations;\n  char *current_data_ptr;\n  int current_value;\n  char accumulator;\n  \n  accumulator = '\\0';\n  remaining_iterations = iterations;\n  current_data_ptr = data_ptr;\n  current_value = start_value;\n  if (*(int *)PTR_DAT_080003e8 == 0) {\n    initialize_memory_080002f0();\n    current_data_ptr = data_ptr;\n    current_value = start_value;\n  }\n  for (; remaining_iterations != 0; remaining_iterations = remaining_iterations + -1) {\n    accumulator = (accumulator != '\\0') + *current_data_ptr;\n    update_memory_08000340(current_value,*current_data_ptr);\n    current_data_ptr = current_data_ptr + 1;\n    current_value = current_value + 1;\n  }\n  update_memory_08000340(current_value,accumulator);\n  return;\n}\n\n",
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000374",
            "calling": [
                "FUN_08004bf4",
                "FUN_08004c2a",
                "FUN_08004bc0"
            ],
            "imported": false,
            "current_name": "process_data_08000374"
        },
        "FUN_080037fc": {
            "renaming": {
                "FUN_080037fc": "print_signed_int_080037fc",
                "param_1": "inputNumber",
                "local_c": "absoluteValue"
            },
            "code": "\nvoid printSignedInt_080037fc(int inputNumber)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = inputNumber;\n  if (inputNumber < 0) {\n    write_data_wrapper_08008250(0x2d);\n    absoluteValue = -inputNumber;\n  }\n  convert_and_write_uint_08003778(absoluteValue);\n  return;\n}\n\n",
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080037fc",
            "calling": [
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "print_signed_int_080037fc"
        },
        "FUN_0800a1bc": {
            "renaming": {
                "FUN_0800a1bc": "compute_result_0800a1bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result",
                "uVar2": "temp_1",
                "iVar3": "temp_int",
                "uVar4": "partial_result",
                "uVar5": "undefined_result",
                "uVar6": "counter_1",
                "uVar7": "mask_1",
                "uVar8": "value_1",
                "uVar9": "value_2",
                "uVar10": "value_3",
                "uVar11": "counter_2",
                "uVar12": "temp_2",
                "uVar13": "final_result",
                "uVar14": "double_result"
            },
            "code": "\nuint compute_result_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint result;\n  uint temp_1;\n  int temp_int;\n  uint partial_result;\n  undefined4 undefined_result;\n  uint counter_1;\n  uint mask_1;\n  uint value_1;\n  uint value_2;\n  uint value_3;\n  uint counter_2;\n  uint temp_2;\n  uint final_result;\n  undefined8 double_result;\n  \n  if ((DAT_0800a340 & ~input_2) == 0) {\n    double_result = calculate_double_multiplication_08008640(input_1,input_2,input_1,input_2);\n    value_1 = calculate_result_080082d4((int)double_result,(int)((ulonglong)double_result >> 0x20),input_1,input_2);\n    return value_1;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      double_result = floating_point_operation_080082d0(input_1,input_2,input_1);\n      undefined_result = (undefined4)((ulonglong)double_result >> 0x20);\n      value_1 = calculate_float_multiplication_08008894((int)double_result,undefined_result,(int)double_result,undefined_result);\n      return value_1;\n    }\n    do {\n      value_3 = input_1;\n      value_1 = value_3 >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = value_3 << 0x15;\n    } while (value_1 == 0);\n    temp_1 = input_2;\n    if (-1 < (int)value_3) goto LAB_0800a290;\n    counter_2 = 0x20;\n    counter_1 = 0xffffffff;\n    value_3 = input_1;\n  }\n  else {\n    temp_1 = (int)input_2 >> 0x14;\n    value_1 = input_2;\n    value_3 = input_1;\n    if (temp_1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    value_3 = 0;\n    counter_2 = value_1;\n    do {\n      counter_1 = value_3;\n      value_1 = counter_2 << 1;\n      temp_int = counter_2 << 0xc;\n      value_3 = counter_1 + 1;\n      counter_2 = value_1;\n    } while (-1 < temp_int);\n    counter_2 = 0x20 - value_3;\n    input_2 = temp_1;\n    value_3 = input_1 << (value_3 & 0xff);\n  }\n  value_1 = input_1 >> (counter_2 & 0xff) | value_1;\n  temp_1 = input_2 - counter_1;\nLAB_0800a1da:\n  value_1 = value_1 & 0xfffff | 0x100000;\n  if (-1 < (int)(temp_1 << 0x1f)) {\n    value_1 = value_1 * 2 - ((int)value_3 >> 0x1f);\n    value_3 = value_3 << 1;\n  }\n  final_result = 0;\n  value_1 = value_1 * 2 - ((int)value_3 >> 0x1f);\n  value_3 = value_3 << 1;\n  temp_1 = 0;\n  counter_2 = 0x16;\n  counter_1 = 0x200000;\n  do {\n    temp_int = temp_1 + counter_1;\n    if (temp_int <= (int)value_1) {\n      value_1 = value_1 - temp_int;\n      temp_1 = temp_int + counter_1;\n      final_result = final_result + counter_1;\n    }\n    counter_2 = counter_2 - 1;\n    value_1 = value_1 * 2 - ((int)value_3 >> 0x1f);\n    counter_1 = counter_1 >> 1;\n    value_3 = value_3 << 1;\n  } while (counter_2 != 0);\n  result = 0x20;\n  mask_1 = 0x80000000;\n  counter_1 = counter_2;\n  do {\n    partial_result = mask_1 + counter_2;\n    temp_2 = temp_1;\n    if ((int)temp_1 < (int)value_1) {\n      if ((int)partial_result < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(partial_result + mask_1)) {\n          temp_2 = temp_1 + 1;\n        }\n      }\n      value_2 = value_1 - temp_1;\n      temp_1 = temp_2;\n      if (value_3 < partial_result) {\n        value_2 = value_2 - 1;\n      }\nLAB_0800a262:\n      counter_2 = partial_result + mask_1;\n      value_3 = value_3 - partial_result;\n      counter_1 = counter_1 + mask_1;\n      value_1 = value_2;\n    }\n    else if ((value_1 == temp_1) && (partial_result <= value_3)) {\n      if ((int)partial_result < 0) goto LAB_0800a26a;\n      value_2 = 0;\n      temp_1 = value_1;\n      goto LAB_0800a262;\n    }\n    result = result - 1;\n    mask_1 = mask_1 >> 1;\n    value_1 = value_1 * 2 - ((int)value_3 >> 0x1f);\n    value_3 = value_3 << 1;\n    if (result == 0) {\n      if ((value_1 | value_3) == 0) {\n        result = counter_1 >> 1;\n      }\n      else if (counter_1 == 0xffffffff) {\n        final_result = final_result + 1;\n      }\n      else {\n        result = counter_1 + 1 >> 1;\n      }\n      if ((final_result & 1) != 0) {\n        result = result | 0x80000000;\n      }\n      return result;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_080082d0",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a1bc",
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "compute_result_0800a1bc"
        },
        "FUN_0800525c": {
            "renaming": {
                "FUN_0800525c": "process_input_0800525c",
                "param_1": "inputChar"
            },
            "code": "\nvoid processInput_0800525c(char inputChar)\n\n{\n  if ((int)inputChar != (uint)(byte)*PTR_DAT_080052a8) {\n    process_buffer_08002fd4();\n    if (inputChar == '\\0') {\n      call_do_nothing_function_08005250();\n    }\n    else {\n      if (inputChar < '\\x01') {\n        do_nothing_0800522c();\n      }\n      else {\n        do_nothing_08005220();\n      }\n      do_nothing_08005208();\n    }\n    *PTR_DAT_080052a8 = inputChar;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800522c",
                "FUN_08005220",
                "FUN_08002fd4",
                "FUN_08005250",
                "FUN_08005208"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800525c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_input_0800525c"
        },
        "FUN_080073d4": {
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "bitPosition"
            },
            "code": "\nvoid setBitInMemory_080073d4(uint bitPosition)\n\n{\n  *(short *)(((int)bitPosition >> 4) * 0x400 + 0x4002001a) = (short)(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073d4",
            "calling": [
                "FUN_08007520"
            ],
            "imported": false,
            "current_name": "set_bit_in_memory_080073d4"
        },
        "FUN_08006dfe": {
            "renaming": {
                "FUN_08006dfe": "set_bit_for_char_08006dfe",
                "param_1": "charInput"
            },
            "code": "\nvoid setBitForChar_08006dfe(char charInput)\n\n{\n  set_bit_for_index_08006a8c((int)charInput);\n  return;\n}\n\n",
            "called": [
                "FUN_08006a8c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dfe",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_for_char_08006dfe"
        },
        "FUN_08006d66": {
            "renaming": {
                "FUN_08006d66": "configure_memory_wrapper_08006d66"
            },
            "code": "\nvoid configureMemoryWrapper_08006d66(void)\n\n{\n  configure_memory_08006c70();\n  return;\n}\n\n",
            "called": [
                "FUN_08006c70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d66",
            "calling": [],
            "imported": false,
            "current_name": "configure_memory_wrapper_08006d66"
        },
        "FUN_08006e88": {
            "renaming": {
                "FUN_08006e88": "update_configuration_08006e88",
                "param_1": "configArray",
                "param_2": "inputArray",
                "uVar1": "mask1",
                "uVar2": "mask2",
                "iVar3": "configIndex",
                "local_c": "counter"
            },
            "code": "\nvoid updateConfiguration_08006e88(uint *configArray,uint *inputArray)\n\n{\n  uint mask1;\n  uint mask2;\n  int configIndex;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    mask1 = 1 << (counter & 0xff);\n    mask2 = *inputArray & mask1;\n    if (mask2 == mask1) {\n      if ((inputArray[1] == 2) || (inputArray[1] == 0x12)) {\n        mask1 = inputArray[4];\n        configArray[(counter >> 3) + 8] = configArray[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        configArray[(counter >> 3) + 8] = configArray[(counter >> 3) + 8] | mask1 << ((counter & 7) << 2);\n      }\n      *configArray = *configArray & ~(3 << ((counter & 0x7f) << 1));\n      *configArray = *configArray | (inputArray[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((inputArray[1] == 1) || (inputArray[1] == 2)) || (inputArray[1] == 0x11)) || (inputArray[1] == 0x12)\n         ) {\n        configArray[2] = configArray[2] & ~(3 << ((counter & 0x7f) << 1));\n        configArray[2] = configArray[2] | inputArray[3] << ((counter & 0x7f) << 1);\n        configArray[1] = configArray[1] & ~(1 << (counter & 0xff));\n        configArray[1] = configArray[1] | (inputArray[1] >> 4 & 1) << (counter & 0xff);\n      }\n      configArray[3] = configArray[3] & ~(3 << ((counter & 0x7f) << 1));\n      configArray[3] = configArray[3] | inputArray[2] << ((counter & 0x7f) << 1);\n      if ((inputArray[1] & 0x10000000) != 0) {\n        *(uint *)(DAT_0800719c + 0x44) = *(uint *)(DAT_0800719c + 0x44) | 0x4000;\n        *(uint *)(DAT_080071a0 + ((counter >> 2) + 2) * 4) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(DAT_080071a0 + ((counter >> 2) + 2) * 4);\n        if (configArray == DAT_080071a4) {\n          configIndex = 0;\n        }\n        else if (configArray == DAT_080071a8) {\n          configIndex = 1;\n        }\n        else if (configArray == DAT_080071ac) {\n          configIndex = 2;\n        }\n        else if (configArray == DAT_080071b0) {\n          configIndex = 3;\n        }\n        else if (configArray == DAT_080071b4) {\n          configIndex = 4;\n        }\n        else if (configArray == DAT_080071b8) {\n          configIndex = 5;\n        }\n        else if (configArray == DAT_080071bc) {\n          configIndex = 6;\n        }\n        else if (configArray == DAT_080071c0) {\n          configIndex = 7;\n        }\n        else if (configArray == DAT_080071c4) {\n          configIndex = 8;\n        }\n        else if (configArray == DAT_080071c8) {\n          configIndex = 9;\n        }\n        else {\n          configIndex = 10;\n        }\n        *(uint *)(DAT_080071a0 + ((counter >> 2) + 2) * 4) =\n             configIndex << ((counter & 3) << 2) | *(uint *)(DAT_080071a0 + ((counter >> 2) + 2) * 4);\n        *DAT_080071cc = ~mask2 & *DAT_080071cc;\n        DAT_080071cc[1] = ~mask2 & DAT_080071cc[1];\n        if ((inputArray[1] & 0x10000) != 0) {\n          *DAT_080071cc = mask2 | *DAT_080071cc;\n        }\n        if ((inputArray[1] & 0x20000) != 0) {\n          DAT_080071cc[1] = mask2 | DAT_080071cc[1];\n        }\n        DAT_080071cc[2] = ~mask2 & DAT_080071cc[2];\n        DAT_080071cc[3] = ~mask2 & DAT_080071cc[3];\n        if ((inputArray[1] & 0x100000) != 0) {\n          DAT_080071cc[2] = mask2 | DAT_080071cc[2];\n        }\n        if ((inputArray[1] & 0x200000) != 0) {\n          DAT_080071cc[3] = mask2 | DAT_080071cc[3];\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e88",
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "update_configuration_08006e88"
        },
        "FUN_080001e0": {
            "renaming": {
                "FUN_080001e0": "do_nothing_080001e0"
            },
            "code": "\nvoid do_nothing_080001e0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001e0",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001e0"
        },
        "FUN_080036f0": {
            "renaming": {
                "FUN_080036f0": "print_binary_representation_080036f0",
                "param_1": "number",
                "param_2": "num_bits",
                "uVar1": "current_bit_char",
                "local_10": "bit_position",
                "local_c": "bit_mask"
            },
            "code": "\nvoid print_binary_representation_080036f0(uint number,int num_bits)\n\n{\n  undefined4 current_bit_char;\n  int bit_position;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_position = 0; bit_position < num_bits; bit_position = bit_position + 1) {\n    if ((bit_mask & number) == 0) {\n      current_bit_char = 0x30;\n    }\n    else {\n      current_bit_char = 0x31;\n    }\n    write_data_wrapper_08008250(current_bit_char);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036f0",
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "imported": false,
            "current_name": "print_binary_representation_080036f0"
        },
        "FUN_08002edc": {
            "renaming": {
                "FUN_08002edc": "process_data_sequence_08002edc",
                "process_character_sequence_08002a94": "process_characters",
                "process_sequence_08002ba8": "process_sequence",
                "process_position_data_08002e08": "process_positions"
            },
            "code": "\nvoid process_data_sequence_08002edc(void)\n\n{\n  process_characters();\n  process_sequence();\n  process_positions();\n  return;\n}\n\n",
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002edc",
            "calling": [
                "FUN_08003618",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "process_data_sequence_08002edc"
        },
        "FUN_0800375c": {
            "renaming": {
                "FUN_0800375c": "print_uint16_in_binary_0800375c",
                "param_1": "input_number"
            },
            "code": "\nvoid print_uint16_in_binary_0800375c(undefined2 input_number)\n\n{\n  print_binary_representation_080036f0(input_number,0x10);\n  return;\n}\n\n",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800375c",
            "calling": [
                "FUN_08004250"
            ],
            "imported": false,
            "current_name": "print_uint16_in_binary_0800375c"
        },
        "FUN_08009990": {
            "renaming": {
                "FUN_08009990": "calculate_complex_operation_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "intVar1",
                "uVar2": "uintVar2",
                "uVar3": "uintVar3",
                "uVar4": "uintVar4",
                "uVar5": "uintVar5",
                "uVar6": "uint64Var6"
            },
            "code": "\nuint calculate_complex_operation_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int intVar1;\n  undefined4 uintVar2;\n  uint uintVar3;\n  uint uintVar4;\n  uint uintVar5;\n  undefined8 uint64Var6;\n  \n  uint64Var6 = CONCAT44(DAT_08009b04,DAT_08009b00);\n  uintVar4 = input4 & 0x7fffffff;\n  if ((DAT_08009b18 < (uintVar4 | (-input3 | input3) >> 0x1f)) ||\n     (uintVar5 = input2 & 0x7fffffff, DAT_08009b18 < (uintVar5 | (-input1 | input1) >> 0x1f))) {\n    uintVar4 = calculate_result_080082d4(input3,input4,input1,input2);\n  }\n  else {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      uintVar4 = process_data_0800af78();\n      return uintVar4;\n    }\n    uintVar3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((uintVar5 | input1) == 0) {\n      uintVar4 = DAT_08009af0;\n      if ((uintVar3 != 2) && (uintVar4 = input1, uintVar3 == 3)) {\n        uintVar4 = DAT_08009af8;\n      }\n    }\n    else {\n      if ((uintVar4 | input3) != 0) {\n        if (uintVar4 == DAT_08009b18) {\n          uintVar3 = uintVar3 - 1;\n          if (uintVar5 == uintVar4) {\n            if (2 < uintVar3) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + uintVar3 * 8);\n          }\n          if (uintVar3 < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + uintVar3 * 8);\n          }\n          return 0;\n        }\n        if (uintVar5 != DAT_08009b18) {\n          intVar1 = (int)(uintVar5 - uintVar4) >> 0x14;\n          if ((int)(uintVar5 - uintVar4) < 0x3d00000) {\n            if (((int)input4 < 0) && (intVar1 + 0x3c < 0 != SCARRY4(intVar1,0x3c))) {\n              uint64Var6 = 0;\n            }\n            else {\n              calculate_float_multiplication_08008894(input1,input2,input3,input4,input4);\n              do_nothing_0800b2cc();\n              uint64Var6 = process_data_0800af78();\n            }\n          }\n          uintVar2 = (undefined4)((ulonglong)uint64Var6 >> 0x20);\n          uintVar4 = (uint)uint64Var6;\n          if (uintVar3 == 1) {\n            return uintVar4;\n          }\n          if (uintVar3 == 2) {\n            uint64Var6 = floating_point_operation_080082d0(uintVar4,uintVar2,DAT_08009ae8,DAT_08009aec);\n            uintVar4 = floating_point_operation_080082d0(DAT_08009af0,DAT_08009af4,(int)uint64Var6,\n                                 (int)((ulonglong)uint64Var6 >> 0x20));\n            return uintVar4;\n          }\n          if (uintVar3 == 0) {\n            return uintVar4;\n          }\n          uint64Var6 = floating_point_operation_080082d0(uintVar4,uintVar2,DAT_08009ae8,DAT_08009aec);\n          uintVar4 = floating_point_operation_080082d0((int)uint64Var6,(int)((ulonglong)uint64Var6 >> 0x20),DAT_08009af0,DAT_08009af4)\n          ;\n          return uintVar4;\n        }\n      }\n      uintVar4 = DAT_08009b08;\n      if (-1 < (int)input2) {\n        uintVar4 = DAT_08009b00;\n      }\n    }\n  }\n  return uintVar4;\n}\n\n",
            "called": [
                "FUN_0800af78",
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_080082d0",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009990",
            "calling": [
                "thunk_FUN_08009990"
            ],
            "imported": false,
            "current_name": "calculate_complex_operation_08009990"
        },
        "FUN_08007e58": {
            "renaming": {
                "FUN_08007e58": "check_bit_status_08007e58"
            },
            "code": "\nbool check_bit_status_08007e58(void)\n\n{\n  return (*DAT_08007e80 & 0x20) != 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e58",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "check_bit_status_08007e58"
        },
        "FUN_080059f8": {
            "renaming": {
                "FUN_080059f8": "initialize_variables_080059f8"
            },
            "code": "\nundefined4 initialize_variables_080059f8(void)\n\n{\n  *(undefined4 *)(DAT_08005a4c + 0x20) = 0xffffffff;\n  *(undefined4 *)(DAT_08005a4c + 0x20) = 0;\n  *(undefined4 *)(DAT_08005a4c + 0x24) = 0xffffffff;\n  *(undefined4 *)(DAT_08005a4c + 0x24) = 0;\n  *(undefined4 *)(DAT_08005a4c + 0x10) = 0xffffffff;\n  *(undefined4 *)(DAT_08005a4c + 0x10) = 0;\n  *(undefined4 *)(DAT_08005a4c + 0x14) = 0xffffffff;\n  *(undefined4 *)(DAT_08005a4c + 0x14) = 0;\n  *(undefined4 *)(DAT_08005a4c + 0x18) = 0xffffffff;\n  *(undefined4 *)(DAT_08005a4c + 0x18) = 0;\n  do_nothing_08005a5c();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a5c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059f8",
            "calling": [],
            "imported": false,
            "current_name": "initialize_variables_080059f8"
        },
        "FUN_08003f34": {
            "renaming": {
                "FUN_08003f34": "process_input_sequence_08003f34",
                "bVar1": "temp_byte",
                "bVar2": "current_byte",
                "uVar3": "error_code"
            },
            "code": "\nvoid process_input_sequence_08003f34(void)\n\n{\n  byte temp_byte;\n  byte current_byte;\n  undefined4 error_code;\n  \n  while( true ) {\n    while( true ) {\n      current_byte = fetch_processed_byte_08008286();\n      if (current_byte == 0xff) {\n        return;\n      }\n      if ((current_byte == 10) || (current_byte == 0xd)) break;\n      if (*PTR_DAT_08004028 == '\\0') {\n        if ((0x20 < current_byte) && (current_byte != 0x2f)) {\n          if (current_byte == 0x28) {\n            *PTR_DAT_08004028 = 1;\n          }\n          else if (*PTR_DAT_08004020 == -1) {\n            display_error_message_08004030(0xd);\n            reset_memory_08003980();\n          }\n          else if ((current_byte < 0x61) || (0x7a < current_byte)) {\n            temp_byte = *PTR_DAT_08004020;\n            *PTR_DAT_08004020 = temp_byte + 1;\n            PTR_DAT_08004024[temp_byte] = current_byte;\n          }\n          else {\n            temp_byte = *PTR_DAT_08004020;\n            *PTR_DAT_08004020 = temp_byte + 1;\n            PTR_DAT_08004024[temp_byte] = current_byte - 0x20;\n          }\n        }\n      }\n      else if (current_byte == 0x29) {\n        *PTR_DAT_08004028 = 0;\n      }\n    }\n    process_system_flags_08003a74();\n    if (*PTR_DAT_0800401c != '\\0') break;\n    if (*PTR_DAT_08004020 == '\\0') {\n      display_error_message_08004030(0);\n    }\n    else {\n      PTR_DAT_08004024[(byte)*PTR_DAT_08004020] = 0;\n      error_code = process_command_08003b98(PTR_DAT_08004024);\n      display_error_message_08004030(error_code);\n    }\n    reset_memory_08003980();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003980",
                "FUN_08003a74",
                "FUN_08008286",
                "FUN_08004030",
                "FUN_08003b98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003f34",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_input_sequence_08003f34"
        },
        "FUN_080095b8": {
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "param_1": "factor1",
                "param_2": "factor2",
                "uVar1": "temp_var1",
                "uVar2": "shifted_factor2",
                "uVar3": "modified_factor2",
                "iVar4": "sign",
                "uVar5": "adjusted_shift"
            },
            "code": "\nint calculate_product_080095b8(uint factor1,uint factor2)\n\n{\n  uint temp_var1;\n  uint shifted_factor2;\n  uint modified_factor2;\n  int sign;\n  uint adjusted_shift;\n  \n  shifted_factor2 = (factor2 << 1) >> 0x15;\n  adjusted_shift = shifted_factor2 - 0x3ff;\n  if ((int)factor2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  modified_factor2 = factor2 & 0xfffff | 0x100000;\n  if ((int)adjusted_shift < 0x14) {\n    if ((int)adjusted_shift < 0) {\n      if (adjusted_shift != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    modified_factor2 = modified_factor2 + (0x80000 >> (adjusted_shift & 0xff)) >> (0x14 - adjusted_shift & 0xff);\n  }\n  else {\n    if (0x1e < adjusted_shift) {\n      sign = calculate_result_08008ba0();\n      return sign;\n    }\n    if ((int)adjusted_shift < 0x34) {\n      temp_var1 = 0x80000000 >> (shifted_factor2 - 0x413 & 0xff);\n      if (CARRY4(temp_var1,factor1) != false) {\n        modified_factor2 = modified_factor2 + 1;\n      }\n      modified_factor2 = modified_factor2 << (shifted_factor2 - 0x413 & 0xff);\n      if (adjusted_shift != 0x14) {\n        modified_factor2 = modified_factor2 | temp_var1 + factor1 >> (0x34 - adjusted_shift & 0xff);\n      }\n    }\n    else {\n      modified_factor2 = modified_factor2 << (shifted_factor2 - 0x413 & 0xff) | factor1 << (shifted_factor2 - 0x433 & 0xff);\n    }\n  }\n  return modified_factor2 * sign;\n}\n\n",
            "called": [
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080095b8",
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_product_080095b8"
        },
        "FUN_08006cf6": {
            "renaming": {
                "FUN_08006cf6": "process_bit_field_08006cf6",
                "param_1": "inputChar",
                "param_2": "bitFieldMask",
                "param_3": "operationSelector",
                "uVar1": "bitFieldValue"
            },
            "code": "\nvoid processBitField_08006cf6(char inputChar,undefined4 bitFieldMask,undefined4 operationSelector)\n\n{\n  undefined4 bitFieldValue;\n  \n  bitFieldValue = get_bit_field_08006998();\n  bitFieldValue = bitwise_operation_08006ba0(bitFieldValue,bitFieldMask,operationSelector);\n  update_memory_08006b00((int)inputChar,bitFieldValue);\n  return;\n}\n\n",
            "called": [
                "FUN_08006ba0",
                "FUN_08006998",
                "FUN_08006b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006cf6",
            "calling": [
                "FUN_08007a70"
            ],
            "imported": false,
            "current_name": "process_bit_field_08006cf6"
        },
        "FUN_08002ef0": {
            "renaming": {
                "FUN_08002ef0": "update_data_pointers_08002ef0",
                "uVar1": "wrapped_increment"
            },
            "code": "\nvoid update_data_pointers_08002ef0(void)\n\n{\n  undefined wrapped_increment;\n  \n  *PTR_DAT_08002f1c = *PTR_DAT_08002f18;\n  wrapped_increment = increment_and_wrap_08002870(*PTR_DAT_08002f18);\n  *PTR_DAT_08002f20 = wrapped_increment;\n  return;\n}\n\n",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ef0",
            "calling": [
                "FUN_08002f24"
            ],
            "imported": false,
            "current_name": "update_data_pointers_08002ef0"
        },
        "FUN_08001d4c": {
            "renaming": {
                "FUN_08001d4c": "execute_data_processing_08001d4c",
                "cVar1": "tempVar",
                "local_9": "counter"
            },
            "code": "\nvoid executeDataProcessing_08001d4c(void)\n\n{\n  char tempVar;\n  char counter;\n  \n  process_data_08005790();\n  process_data_08001994(4,1,0,*(undefined4 *)(PTR_DAT_08001dd8 + 0x30));\n  process_data_08001994(3,1,0,*(undefined4 *)(PTR_DAT_08001dd8 + 0x30));\n  do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\n  counter = '\\x02';\n  while( true ) {\n    tempVar = counter + -1;\n    if (counter == '\\0') break;\n    process_data_08001994(7,0,1,*(undefined4 *)(PTR_DAT_08001dd8 + 0x2c));\n    do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\n    counter = tempVar;\n    if ('\\0' < tempVar) {\n      process_data_08001994(7,1,0,*(undefined4 *)(PTR_DAT_08001dd8 + 0x2c));\n      do_nothing_08002814(*(undefined2 *)(PTR_DAT_08001dd8 + 0x34));\n    }\n  }\n  check_and_reset_control_registers_080057e4();\n  return;\n}\n\n",
            "called": [
                "FUN_080057e4",
                "FUN_08005790",
                "FUN_08002814",
                "FUN_08001994"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001d4c",
            "calling": [
                "FUN_080024c4"
            ],
            "imported": false,
            "current_name": "execute_data_processing_08001d4c"
        },
        "FUN_08000268": {
            "renaming": {
                "FUN_08000268": "calculate_result_08000268",
                "iVar1": "data_value"
            },
            "code": "\nint calculate_result_08000268(void)\n\n{\n  int data_value;\n  \n  data_value = get_data_value_08005a84();\n  return (data_value + 1) * 1000 -\n         (uint)((ulonglong)DAT_0800029c * (ulonglong)(*(uint *)(DAT_08000298 + 8) >> 3) >> 0x21);\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000268",
            "calling": [
                "FUN_080002b6"
            ],
            "imported": false,
            "current_name": "calculate_result_08000268"
        },
        "FUN_08003778": {
            "renaming": {
                "FUN_08003778": "convert_and_write_uint_08003778",
                "param_1": "input_value",
                "uVar1": "index",
                "local_1c": "current_value",
                "acStack_15": "char_buffer",
                "local_9": "buffer_length"
            },
            "code": "\nvoid convert_and_write_uint_08003778(uint input_value)\n\n{\n  uint index;\n  uint current_value;\n  char char_buffer [12];\n  byte buffer_length;\n  \n  buffer_length = 0;\n  current_value = input_value;\n  if (input_value == 0) {\n    write_data_wrapper_08008250(0x30);\n  }\n  else {\n    for (; current_value != 0; current_value = (uint)((ulonglong)DAT_080037f8 * (ulonglong)current_value >> 0x23))\n    {\n      index = (uint)buffer_length;\n      buffer_length = buffer_length + 1;\n      char_buffer[index + 1] =\n           (char)current_value +\n           (char)(uint)((ulonglong)DAT_080037f8 * (ulonglong)current_value >> 0x23) * -10 + '0';\n    }\n    for (; buffer_length != 0; buffer_length = buffer_length - 1) {\n      write_data_wrapper_08008250(char_buffer[buffer_length]);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003778",
            "calling": [
                "FUN_080037fc"
            ],
            "imported": false,
            "current_name": "convert_and_write_uint_08003778"
        },
        "FUN_0800b3dc": {
            "renaming": {
                "FUN_0800b3dc": "get_undefined_value_0800b3dc"
            },
            "code": "\nundefined4 get_undefined_value_0800b3dc(void)\n\n{\n  return *(undefined4 *)PTR_PTR_DAT_0800b3e4;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3dc",
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "get_undefined_value_0800b3dc"
        },
        "FUN_080046d0": {
            "renaming": {
                "FUN_080046d0": "display_information_080046d0",
                "bVar1": "byte_var",
                "cVar2": "char_var",
                "uVar3": "undefined_var",
                "uVar4": "undefined_double_var"
            },
            "code": "\nvoid display_information_080046d0(void)\n\n{\n  byte byte_var;\n  char char_var;\n  undefined4 undefined_var;\n  undefined8 undefined_double_var;\n  \n  if (4 < (byte)PTR_DAT_08004890[1]) {\n    write_characters_080036c6(PTR_DAT_080048a8);\n    print_signed_int_080037fc((byte)PTR_DAT_08004890[0x1c] + 0x36);\n    if (PTR_DAT_08004890[0x19] == '\\0') {\n      if (PTR_DAT_08004890[0x1a] == '\\x01') {\n        write_characters_080036c6(PTR_DAT_080048ac);\n      }\n      else {\n        write_characters_080036c6(PTR_DAT_080048b0);\n      }\n    }\n    else {\n      write_characters_080036c6(PTR_DAT_080048b4);\n    }\n    if (PTR_DAT_08004890[3] == '\\0') {\n      write_characters_080036c6(PTR_DAT_080048bc);\n    }\n    else {\n      write_characters_080036c6(PTR_DAT_080048b8);\n    }\n    if (PTR_DAT_08004890[4] == '\\0') {\n      write_characters_080036c6(PTR_DAT_080048c4);\n    }\n    else {\n      write_characters_080036c6(PTR_DAT_080048c0);\n    }\n    if (PTR_DAT_08004890[2] == '\\0') {\n      write_characters_080036c6(PTR_DAT_080048cc);\n    }\n    else {\n      write_characters_080036c6(PTR_DAT_080048c8);\n    }\n    byte_var = PTR_DAT_08004890[5];\n    if (byte_var == 2) {\n      write_characters_080036c6(PTR_DAT_080048d8);\n    }\n    else if (byte_var < 3) {\n      if (byte_var == 0) {\n        write_characters_080036c6(PTR_DAT_080048d0);\n      }\n      else if (byte_var == 1) {\n        write_characters_080036c6(PTR_DAT_080048d4);\n      }\n    }\n    char_var = PTR_DAT_08004890[6];\n    if (char_var == '\\x01') {\n      write_characters_080036c6(PTR_DAT_080048dc);\n    }\n    else if (char_var < '\\x02') {\n      if (char_var == -1) {\n        write_characters_080036c6(PTR_DAT_080048e0);\n      }\n      else if (char_var == '\\0') {\n        write_characters_080036c6(PTR_DAT_080048e4);\n      }\n    }\n    byte_var = PTR_DAT_08004890[7];\n    if (byte_var == 2) {\n      write_characters_080036c6(PTR_DAT_080048f0);\n    }\n    else if (byte_var < 3) {\n      if (byte_var == 0) {\n        write_characters_080036c6(PTR_DAT_080048e8);\n      }\n      else if (byte_var == 1) {\n        write_characters_080036c6(PTR_DAT_080048ec);\n      }\n    }\n    write_characters_080036c6(PTR_DAT_080048f4);\n    print_signed_int_080037fc(PTR_DAT_08004890[0x18]);\n    write_characters_080036c6(PTR_DAT_080048f8);\n    if (PTR_DAT_08004890[3] == '\\0') {\n      convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004890 + 8));\n    }\n    else {\n      undefined_double_var = calculate_transformed_value_08008590(*(undefined4 *)(PTR_DAT_08004890 + 8));\n      undefined_double_var = calculate_double_multiplication_08008640((int)undefined_double_var,(int)((ulonglong)undefined_double_var >> 0x20),DAT_08004888,DAT_0800488c);\n      undefined_var = calculate_result_08008c30((int)undefined_double_var,(int)((ulonglong)undefined_double_var >> 0x20));\n      convert_float_to_string_08003826(undefined_var);\n    }\n    write_characters_080036c6(PTR_DAT_080048fc);\n    return;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080046de. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(&switchD_080046de::switchdataD_080046e4)[(byte)PTR_DAT_08004890[1]])();\n  return;\n}\n\n",
            "called": [
                "FUN_080037fc",
                "FUN_08008c30",
                "FUN_080036c6",
                "FUN_08008640",
                "FUN_08003826",
                "FUN_08008590"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080046d0",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "display_information_080046d0"
        },
        "FUN_08006d72": {
            "renaming": {
                "FUN_08006d72": "get_updated_status_08006d72",
                "param_1": "status_input",
                "uVar1": "updated_status"
            },
            "code": "\nundefined4 get_updated_status_08006d72(undefined4 status_input)\n\n{\n  undefined4 updated_status;\n  \n  updated_status = update_status_08006c9c(status_input);\n  return updated_status;\n}\n\n",
            "called": [
                "FUN_08006c9c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d72",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "get_updated_status_08006d72"
        },
        "FUN_0800756c": {
            "renaming": {
                "FUN_0800756c": "initialize_data_0800756c"
            },
            "code": "\nvoid initializeData_0800756c(void)\n\n{\n  *DAT_080075bc = *DAT_080075bc | 1;\n  DAT_080075bc[2] = 0;\n  *DAT_080075bc = *DAT_080075bc & 0xfef6ffff;\n  DAT_080075bc[1] = DAT_080075c0;\n  *DAT_080075bc = *DAT_080075bc & 0xfffbffff;\n  DAT_080075bc[3] = 0;\n  *(undefined4 *)(DAT_080075c4 + 8) = 0x8000000;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800756c",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "initialize_data_0800756c"
        },
        "FUN_080001f8": {
            "renaming": {
                "FUN_080001f8": "initialize_and_execute_operations_080001f8"
            },
            "code": "\nvoid initializeAndExecuteOperations_080001f8(void)\n\n{\n  *PTR_DAT_0800020c = 0;\n  execute_two_operations_08000210();\n  return;\n}\n\n",
            "called": [
                "FUN_08000210"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001f8",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_and_execute_operations_080001f8"
        },
        "FUN_08002f74": {
            "renaming": {
                "FUN_08002f74": "get_buffer_address_08002f74",
                "puVar1": "bufferAddress"
            },
            "code": "\nundefined * getBufferAddress_08002f74(void)\n\n{\n  undefined *bufferAddress;\n  \n  if (*PTR_DAT_08002fa0 == *PTR_DAT_08002fa4) {\n    bufferAddress = (undefined *)0x0;\n  }\n  else {\n    bufferAddress = PTR_DAT_08002fa8 + (uint)(byte)*PTR_DAT_08002fa4 * 0x40;\n  }\n  return bufferAddress;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f74",
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "imported": false,
            "current_name": "get_buffer_address_08002f74"
        },
        "FUN_0800b3e8": {
            "renaming": {
                "FUN_0800b3e8": "execute_function_list_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "functionPtr",
                "iVar3": "numFunctions"
            },
            "code": "\nvoid executeFunctionList_0800b3e8(void)\n\n{\n  int counter;\n  code **functionPtr;\n  int numFunctions;\n  \n  numFunctions = (int)PTR_DAT_0800b420 - (int)PTR_DAT_0800b424 >> 2;\n  if (numFunctions != 0) {\n    counter = 0;\n    functionPtr = (code **)PTR_DAT_0800b424;\n    do {\n      counter = counter + 1;\n      (**functionPtr)();\n      functionPtr = functionPtr + 1;\n    } while (numFunctions != counter);\n  }\n  functionPtr = (code **)PTR_DAT_0800b42c;\n  numFunctions = (int)PTR_DAT_0800b428 - (int)PTR_DAT_0800b42c;\n  do_nothing_0800b5b0();\n  numFunctions = numFunctions >> 2;\n  if (numFunctions != 0) {\n    counter = 0;\n    do {\n      counter = counter + 1;\n      (**functionPtr)();\n      functionPtr = functionPtr + 1;\n    } while (numFunctions != counter);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800b5b0",
                "FUN_0800b4d0",
                "FUN_080001ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b3e8",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "execute_function_list_0800b3e8"
        },
        "FUN_080096e8": {
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result",
                "uVar2": "calculation_type",
                "local_28": "calc_result_1",
                "uStack_24": "calc_result_2",
                "local_20": "calc_result_3",
                "uStack_1c": "calc_result_4"
            },
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_1,uint input_2)\n\n{\n  undefined4 result;\n  uint calculation_type;\n  undefined4 calc_result_1;\n  undefined4 calc_result_2;\n  undefined4 calc_result_3;\n  undefined4 calc_result_4;\n  \n  if (DAT_08009790 < (int)(input_2 & 0x7fffffff)) {\n    if (DAT_08009794 < (int)(input_2 & 0x7fffffff)) {\n      result = floating_point_operation_080082d0(input_1,input_2,input_1,input_2);\n    }\n    else {\n      calculation_type = complex_calculations_08009d78(input_1,input_2,&calc_result_1);\n      calculation_type = calculation_type & 3;\n      if (calculation_type == 1) {\n        result = complex_calculation_0800a348(calc_result_1,calc_result_2,calc_result_3,calc_result_4);\n      }\n      else if (calculation_type == 2) {\n        result = complex_calculation_0800adf0(calc_result_1,calc_result_2,calc_result_3,calc_result_4,1);\n      }\n      else if (calculation_type == 0) {\n        result = complex_calculation_0800adf0(calc_result_1,calc_result_2,calc_result_3,calc_result_4,1);\n      }\n      else {\n        result = complex_calculation_0800a348(calc_result_1,calc_result_2,calc_result_3,calc_result_4);\n      }\n    }\n    return result;\n  }\n  result = complex_calculation_0800adf0(input_1,input_2,0,0,0);\n  return result;\n}\n\n",
            "called": [
                "FUN_08009d78",
                "FUN_0800adf0",
                "FUN_080082d0",
                "FUN_0800a348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080096e8",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_080096e8"
        },
        "FUN_08006a18": {
            "renaming": {
                "FUN_08006a18": "is_bit_set_08006a18",
                "param_1": "inputByte"
            },
            "code": "\nbool isBitSet_08006a18(byte inputByte)\n\n{\n  return (*(uint *)(DAT_08006a54 + (((uint)(int)(char)inputByte >> 5) + 0x40) * 4) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a18",
            "calling": [
                "FUN_08006de0"
            ],
            "imported": false,
            "current_name": "is_bit_set_08006a18"
        },
        "FUN_08002c18": {
            "renaming": {
                "FUN_08002c18": "calculate_position_values_08002c18",
                "param_1": "position_data",
                "param_2": "multiplier_1",
                "param_3": "multiplier_2",
                "uVar1": "temp_result",
                "iVar2": "temp_int_result",
                "uVar3": "modified_value_1",
                "uVar4": "modified_value_2",
                "uVar5": "float_representation_1",
                "uVar6": "unsigned_result",
                "uVar7": "temp_longlong",
                "local_20": "final_offset",
                "local_1c": "initial_offset"
            },
            "code": "\nvoid calculate_position_values_08002c18(int position_data,undefined4 multiplier_1,undefined4 multiplier_2)\n\n{\n  undefined4 temp_result;\n  int temp_int_result;\n  undefined4 modified_value_1;\n  undefined4 modified_value_2;\n  undefined4 float_representation_1;\n  uint unsigned_result;\n  undefined8 temp_longlong;\n  int final_offset;\n  uint initial_offset;\n  \n  temp_result = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x3c));\n  temp_result = floating_point_multiplication_08008eec(temp_result,multiplier_1);\n  temp_longlong = calculate_transformed_value_08008590(temp_result);\n  temp_longlong = calculate_longlong_value_08009318((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  temp_result = calculate_result_08008bf0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  *(undefined4 *)(position_data + 0x28) = temp_result;\n  temp_result = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x3c));\n  temp_result = floating_point_multiplication_08008eec(temp_result,multiplier_2);\n  temp_longlong = calculate_transformed_value_08008590(temp_result);\n  temp_longlong = calculate_longlong_value_08009318((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  temp_result = calculate_result_08008bf0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  *(undefined4 *)(position_data + 0x2c) = temp_result;\n  temp_longlong = calculate_ulonglong_0800856c(*(int *)(position_data + 0x30) * 0x32);\n  temp_longlong = calculate_double_multiplication_08008640((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20),0,DAT_08002e04);\n  temp_int_result = calculate_result_08008ba0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  temp_result = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x28));\n  modified_value_1 = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x3c));\n  modified_value_2 = calculate_float_representation_08008e44(temp_int_result);\n  temp_result = calculate_quotient_080028bc(temp_result,modified_value_1,modified_value_2);\n  temp_longlong = calculate_transformed_value_08008590(temp_result);\n  temp_longlong = calculate_longlong_value_08009318((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  initial_offset = calculate_result_08008ba0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  temp_result = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x3c));\n  modified_value_1 = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x2c));\n  modified_value_2 = calculate_float_representation_08008e44(-temp_int_result);\n  temp_result = calculate_quotient_080028bc(temp_result,modified_value_1,modified_value_2);\n  temp_longlong = calculate_transformed_value_08008590(temp_result);\n  temp_longlong = process_data_080094c0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  final_offset = calculate_result_08008ba0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n  final_offset = (*(int *)(position_data + 0x10) - initial_offset) - final_offset;\n  if (final_offset < 0) {\n    temp_result = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x28));\n    modified_value_1 = calculate_modified_value_08008e3c(*(undefined4 *)(position_data + 0x2c));\n    modified_value_2 = calculate_float_representation_08008e44(temp_int_result);\n    float_representation_1 = calculate_float_representation_08008e44(*(undefined4 *)(position_data + 0x10));\n    temp_result = calculate_final_result_08002908(temp_result,modified_value_1,modified_value_2,float_representation_1);\n    temp_longlong = calculate_transformed_value_08008590(temp_result);\n    temp_longlong = calculate_longlong_value_08009318((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n    unsigned_result = calculate_result_08008ba0((int)temp_longlong,(int)((ulonglong)temp_longlong >> 0x20));\n    unsigned_result = unsigned_result & ~((int)unsigned_result >> 0x1f);\n    initial_offset = *(uint *)(position_data + 0x10);\n    if ((int)unsigned_result <= (int)*(uint *)(position_data + 0x10)) {\n      initial_offset = unsigned_result;\n    }\n    final_offset = 0;\n  }\n  *(uint *)(position_data + 0x34) = initial_offset;\n  *(uint *)(position_data + 0x38) = final_offset + initial_offset;\n  return;\n}\n\n",
            "called": [
                "FUN_08008e44",
                "FUN_08008e3c",
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008640",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_08002908"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002c18",
            "calling": [
                "FUN_08002e08"
            ],
            "imported": false,
            "current_name": "calculate_position_values_08002c18"
        },
        "FUN_08006ac0": {
            "renaming": {
                "FUN_08006ac0": "check_bit_in_lookup_table_08006ac0",
                "param_1": "inputByte"
            },
            "code": "\nbool checkBitInLookupTable_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)(DAT_08006afc + (((uint)(int)(char)inputByte >> 5) + 0x80) * 4) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ac0",
            "calling": [
                "FUN_08006e1a"
            ],
            "imported": false,
            "current_name": "check_bit_in_lookup_table_08006ac0"
        },
        "FUN_080001ec": {
            "renaming": {
                "FUN_080001ec": "do_nothing_080001ec"
            },
            "code": "\nvoid do_nothing_080001ec(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ec",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001ec"
        },
        "FUN_08005a50": {
            "renaming": {
                "FUN_08005a50": "do_nothing_08005a50"
            },
            "code": "\nvoid do_nothing_08005a50(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a50",
            "calling": [
                "FUN_080059b4"
            ],
            "imported": false,
            "current_name": "do_nothing_08005a50"
        },
        "FUN_08002ba8": {
            "renaming": {
                "FUN_08002ba8": "process_sequence_08002ba8",
                "puVar1": "current_data_ptr",
                "puVar2": "previous_data_ptr",
                "puVar3": "last_processed_ptr",
                "local_14": "prev_data",
                "local_10": "current_data",
                "local_9": "current_index"
            },
            "code": "\nvoid process_sequence_08002ba8(void)\n\n{\n  undefined *current_data_ptr;\n  undefined *previous_data_ptr;\n  undefined *last_processed_ptr;\n  undefined *prev_data;\n  undefined *current_data;\n  byte current_index;\n  \n  current_index = *PTR_DAT_08002c0c;\n  prev_data = (undefined *)0x0;\n  current_data = (undefined *)0x0;\n  last_processed_ptr = (undefined *)0x0;\n  while (previous_data_ptr = prev_data, current_index != *PTR_DAT_08002c14) {\n    prev_data = current_data;\n    current_data_ptr = PTR_DAT_08002c10 + (uint)current_index * 0x40;\n    process_data_08002afc(previous_data_ptr,current_data,current_data_ptr);\n    current_index = increment_and_wrap_08002870(current_index);\n    last_processed_ptr = previous_data_ptr;\n    current_data = current_data_ptr;\n  }\n  process_data_08002afc(prev_data,current_data,0,prev_data,last_processed_ptr);\n  return;\n}\n\n",
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002ba8",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "process_sequence_08002ba8"
        },
        "FUN_0800919c": {
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "double_input1",
                "uVar3": "double_input2",
                "uVar4": "intermediate_result",
                "bVar1": "condition1",
                "bVar5": "condition2"
            },
            "code": "\nuint calculate_result_0800919c(uint input1,uint input2)\n\n{\n  bool condition1;\n  uint double_input1;\n  uint double_input2;\n  uint intermediate_result;\n  bool condition2;\n  \n  double_input1 = input1 * 2;\n  double_input2 = input2 * 2;\n  if (((int)double_input1 >> 0x18 == -1 || (int)double_input2 >> 0x18 == -1) &&\n     ((((int)double_input1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)double_input2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  intermediate_result = double_input1 | input2 & 0x7fffffff;\n  condition2 = intermediate_result == 0;\n  if (!condition2) {\n    intermediate_result = input1 ^ input2;\n    condition2 = intermediate_result == 0;\n  }\n  condition1 = -1 < (int)intermediate_result;\n  if (condition1) {\n    input1 = double_input1 + input2 * -2;\n    condition2 = input1 == 0;\n  }\n  if ((condition1 && double_input2 <= double_input1) && !condition2) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!condition1 || double_input2 > double_input1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!condition2) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800919c",
            "calling": [
                "FUN_08009204"
            ],
            "imported": false,
            "current_name": "calculate_result_0800919c"
        },
        "FUN_0800b2cc": {
            "renaming": {
                "FUN_0800b2cc": "do_nothing_0800b2cc"
            },
            "code": "\nvoid do_nothing_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2cc",
            "calling": [
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_0800af78"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b2cc"
        },
        "FUN_0800854c": {
            "renaming": {
                "FUN_0800854c": "calculate_modified_value_0800854c",
                "param_1": "input_value",
                "uVar1": "result_high",
                "uVar2": "shift_value",
                "iVar3": "leading_zero_count",
                "uVar4": "adjusted_zero_count",
                "in_r12": "complement_shift",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "carry_flag"
            },
            "code": "\nulonglong calculate_modified_value_0800854c(uint input_value)\n\n{\n  uint result_high;\n  uint shift_value;\n  int leading_zero_count;\n  uint adjusted_zero_count;\n  uint complement_shift;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  result_high = 0;\n  leading_zero_count = count_leading_zeroes(input_value);\n  adjusted_zero_count = leading_zero_count + 0x15;\n  carry_flag = SBORROW4(adjusted_zero_count,0x20);\n  shift_value = leading_zero_count - 0xb;\n  is_negative = (int)shift_value < 0;\n  is_zero = shift_value == 0;\n  if ((int)adjusted_zero_count < 0x20) {\n    carry_flag = SCARRY4(shift_value,0xc);\n    leading_zero_count = leading_zero_count + 1;\n    is_negative = leading_zero_count < 0;\n    is_zero = leading_zero_count == 0;\n    shift_value = adjusted_zero_count;\n    if (!is_zero && is_negative == carry_flag) {\n      result_high = input_value << (adjusted_zero_count & 0xff);\n      input_value = input_value >> (0xcU - leading_zero_count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    complement_shift = 0x20 - shift_value;\n  }\n  input_value = input_value << (shift_value & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    input_value = input_value | 0U >> (complement_shift & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    result_high = 0 << (shift_value & 0xff);\n  }\nLAB_08008458:\n  if ((int)adjusted_zero_count < 0x433) {\n    return CONCAT44(input_value + (0x432 - adjusted_zero_count) * 0x100000,result_high);\n  }\n  shift_value = ~(0x432 - adjusted_zero_count);\n  if (0x1e < (int)shift_value) {\n    return (ulonglong)(input_value >> (shift_value - 0x1f & 0xff));\n  }\n  leading_zero_count = shift_value - 0x13;\n  if (leading_zero_count == 0 || leading_zero_count < 0 != SCARRY4(shift_value - 0x1f,0xc)) {\n    shift_value = shift_value + 1;\n    return CONCAT44(input_value >> (shift_value & 0xff),\n                    result_high >> (shift_value & 0xff) | input_value << (0x20 - shift_value & 0xff));\n  }\n  return (ulonglong)(result_high >> (0x20 - (0xcU - leading_zero_count) & 0xff) | input_value << (0xcU - leading_zero_count & 0xff));\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800854c",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "calculate_modified_value_0800854c"
        },
        "FUN_08008e44": {
            "renaming": {
                "FUN_08008e44": "calculate_float_representation_08008e44",
                "param_1": "input_value",
                "iVar1": "leading_zeroes_count",
                "uVar2": "shift_amount",
                "uVar3": "float_representation",
                "iVar4": "exponent",
                "uVar5": "temp_value"
            },
            "code": "\nuint calculate_float_representation_08008e44(uint input_value)\n\n{\n  int leading_zeroes_count;\n  uint shift_amount;\n  uint float_representation;\n  int exponent;\n  uint temp_value;\n  \n  float_representation = input_value & 0x80000000;\n  if ((int)float_representation < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes_count = count_leading_zeroes(input_value);\n  shift_amount = leading_zeroes_count - 8;\n  exponent = ((float_representation | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes_count) {\n    temp_value = 0 << (shift_amount & 0xff);\n    float_representation = exponent + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < temp_value);\n    if (temp_value == 0x80000000) {\n      float_representation = float_representation & 0xfffffffe;\n    }\n    return float_representation;\n  }\n  shift_amount = input_value << (leading_zeroes_count + 0x18U & 0xff);\n  float_representation = exponent + ((input_value >> (0x20 - (leading_zeroes_count + 0x18U) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    float_representation = float_representation & ~(shift_amount >> 0x1f);\n  }\n  return float_representation;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e44",
            "calling": [
                "FUN_08004940",
                "FUN_080024c4",
                "FUN_08003618",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_float_representation_08008e44"
        },
        "FUN_0800733e": {
            "renaming": {
                "FUN_0800733e": "update_memory_address_0800733e",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "offset_flag"
            },
            "code": "\nvoid update_memory_address_0800733e(int base_address,undefined2 value,char offset_flag)\n\n{\n  if (offset_flag == '\\0') {\n    *(undefined2 *)(base_address + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(base_address + 0x18) = value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800733e",
            "calling": [
                "FUN_0800778c"
            ],
            "imported": false,
            "current_name": "update_memory_address_0800733e"
        },
        "FUN_0800583c": {
            "renaming": {
                "FUN_0800583c": "execute_operations_0800583c",
                "update_register_value_080052ac": "update_register_value",
                "process_data_08005790": "process_data",
                "check_and_reset_control_registers_080057e4": "check_and_reset_control_registers"
            },
            "code": "\nvoid execute_operations_0800583c(void)\n\n{\n  update_register_value(*(undefined2 *)(PTR_DAT_08005858 + 0x18));\n  process_data();\n  check_and_reset_control_registers();\n  return;\n}\n\n",
            "called": [
                "FUN_080057e4",
                "FUN_08005790",
                "FUN_080052ac"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800583c",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "execute_operations_0800583c"
        },
        "FUN_08001e98": {
            "renaming": {
                "FUN_08001e98": "process_input_and_update_08001e98",
                "param_1": "input_data1",
                "param_2": "input_data2",
                "param_3": "input_data3",
                "param_4": "input_data4",
                "param_5": "input_data5",
                "iVar1": "comparison_result"
            },
            "code": "\nvoid process_input_and_update_08001e98(undefined4 input_data1,undefined4 input_data2,undefined4 input_data3,undefined4 input_data4,\n                 undefined input_data5)\n\n{\n  int comparison_result;\n  \n  if (PTR_DAT_08001efc[1] != '\\a') {\n    do {\n      process_system_flags_08003a74();\n      if (*PTR_DAT_08001efc != '\\0') {\n        return;\n      }\n      comparison_result = compare_values_08002fac();\n    } while (comparison_result != 0);\n    process_sensor_data_08003004(input_data1,input_data2,input_data3,input_data4,input_data5);\n    if (PTR_DAT_08001efc[1] == '\\0') {\n      PTR_DAT_08001efc[1] = 2;\n    }\n    if (PTR_DAT_08001efc[0x10] != '\\0') {\n      update_and_process_data_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002fac",
                "FUN_08003a74",
                "FUN_08003004",
                "FUN_0800585c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001e98",
            "calling": [
                "FUN_080024c4",
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_input_and_update_08001e98"
        },
        "FUN_080069e4": {
            "renaming": {
                "FUN_080069e4": "set_bit_at_index_080069e4",
                "param_1": "bitIndex"
            },
            "code": "\nvoid setBitAtIndex_080069e4(byte bitIndex)\n\n{\n  *(int *)(DAT_08006a14 + (((uint)(int)(char)bitIndex >> 5) + 0x20) * 4) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069e4",
            "calling": [
                "FUN_08006d4a"
            ],
            "imported": false,
            "current_name": "set_bit_at_index_080069e4"
        },
        "FUN_0800b2d4": {
            "renaming": {
                "FUN_0800b2d4": "calculate_bitwise_operation_0800b2d4",
                "param_1": "inputValue",
                "param_2": "bitmask"
            },
            "code": "\nuint calculateBitwiseOperation_0800b2d4(undefined4 inputValue,uint bitmask)\n\n{\n  return (bitmask | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2d4",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_operation_0800b2d4"
        },
        "FUN_08008e3c": {
            "renaming": {
                "FUN_08008e3c": "calculate_modified_value_08008e3c",
                "param_1": "inputValue",
                "iVar1": "leadingZeroesCount",
                "uVar2": "adjustedZeroesCount",
                "iVar3": "intermediateValue",
                "uVar4": "shiftedValue"
            },
            "code": "\nuint calculateModifiedValue_08008e3c(uint inputValue)\n\n{\n  int leadingZeroesCount;\n  uint adjustedZeroesCount;\n  int intermediateValue;\n  uint shiftedValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroesCount = count_leading_zeroes(inputValue);\n  adjustedZeroesCount = leadingZeroesCount - 8;\n  intermediateValue = adjustedZeroesCount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroesCount) {\n    shiftedValue = 0 << (adjustedZeroesCount & 0xff);\n    adjustedZeroesCount = intermediateValue + (inputValue << (adjustedZeroesCount & 0xff)) +\n            (0U >> (0x20 - adjustedZeroesCount & 0xff)) + (uint)(0x7fffffff < shiftedValue);\n    if (shiftedValue == 0x80000000) {\n      adjustedZeroesCount = adjustedZeroesCount & 0xfffffffe;\n    }\n    return adjustedZeroesCount;\n  }\n  shiftedValue = inputValue << (leadingZeroesCount + 0x18U & 0xff);\n  adjustedZeroesCount = intermediateValue + ((inputValue >> (0x20 - (leadingZeroesCount + 0x18U) & 0xff)) - ((int)shiftedValue >> 0x1f));\n  if ((shiftedValue & 0x7fffffff) == 0) {\n    adjustedZeroesCount = adjustedZeroesCount & ~(shiftedValue >> 0x1f);\n  }\n  return adjustedZeroesCount;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008e3c",
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_modified_value_08008e3c"
        },
        "FUN_08009654": {
            "renaming": {
                "FUN_08009654": "process_numbers_08009654",
                "param_1": "number1",
                "param_2": "number2",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "lVar3": "result"
            },
            "code": "\nlonglong process_numbers_08009654(uint number1,uint number2)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  longlong result;\n  \n  result = CONCAT44(number2,number1);\n  tempVar2 = (number2 << 1) >> 0x15;\n  tempVar1 = tempVar2 - 0x3ff;\n  if ((int)tempVar1 < 0x14) {\n    if ((int)tempVar1 < 0) {\n      number2 = number2 & 0x80000000;\n      if (tempVar1 == 0xffffffff) {\n        number2 = number2 | 0x3ff00000;\n      }\n      result = (ulonglong)number2 << 0x20;\n    }\n    else {\n      tempVar2 = DAT_080096e4 >> (tempVar1 & 0xff);\n      result = CONCAT44(number2,number1);\n      if ((number2 & tempVar2 | number1) != 0) {\n        result = (ulonglong)(number2 + (0x80000 >> (tempVar1 & 0xff)) & ~tempVar2) << 0x20;\n      }\n    }\n  }\n  else if ((int)tempVar1 < 0x34) {\n    tempVar2 = 0xffffffff >> (tempVar2 - 0x413 & 0xff);\n    if ((number1 & tempVar2) != 0) {\n      tempVar1 = 1 << (0x33 - tempVar1 & 0xff);\n      if (CARRY4(number1,tempVar1) != false) {\n        number2 = number2 + 1;\n      }\n      result = CONCAT44(number2,number1 + tempVar1 & ~tempVar2);\n    }\n  }\n  else {\n    result = CONCAT44(number2,number1);\n    if (tempVar1 == 0x400) {\n      result = calculate_result_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_080082d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009654",
            "calling": [
                "FUN_08004e30"
            ],
            "imported": false,
            "current_name": "process_numbers_08009654"
        },
        "FUN_08007bc2": {
            "renaming": {
                "FUN_08007bc2": "reset_control_registers_08007bc2"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid resetControlRegisters_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007bc2",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "reset_control_registers_08007bc2"
        },
        "FUN_08009410": {
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result",
                "uVar2": "calculation_type",
                "local_28": "calc_result_1",
                "uStack_24": "calc_result_2",
                "local_20": "calc_result_3",
                "uStack_1c": "calc_result_4"
            },
            "code": "\nundefined4 calculate_result_08009410(undefined4 input_1,uint input_2)\n\n{\n  undefined4 result;\n  uint calculation_type;\n  undefined4 calc_result_1;\n  undefined4 calc_result_2;\n  undefined4 calc_result_3;\n  undefined4 calc_result_4;\n  \n  if (DAT_080094b4 < (int)(input_2 & 0x7fffffff)) {\n    if (DAT_080094b8 < (int)(input_2 & 0x7fffffff)) {\n      result = floating_point_operation_080082d0(input_1,input_2,input_1,input_2);\n    }\n    else {\n      calculation_type = complex_calculations_08009d78(input_1,input_2,&calc_result_1);\n      calculation_type = calculation_type & 3;\n      if (calculation_type == 1) {\n        result = complex_calculation_0800adf0(calc_result_1,calc_result_2,calc_result_3,calc_result_4,1);\n      }\n      else if (calculation_type == 2) {\n        result = complex_calculation_0800a348(calc_result_1,calc_result_2,calc_result_3,calc_result_4);\n      }\n      else if (calculation_type == 0) {\n        result = complex_calculation_0800a348(calc_result_1,calc_result_2,calc_result_3,calc_result_4);\n      }\n      else {\n        result = complex_calculation_0800adf0(calc_result_1,calc_result_2,calc_result_3,calc_result_4,1);\n      }\n    }\n    return result;\n  }\n  result = complex_calculation_0800a348(input_1,input_2,0,0);\n  return result;\n}\n\n",
            "called": [
                "FUN_08009d78",
                "FUN_0800adf0",
                "FUN_080082d0",
                "FUN_0800a348"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009410",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "calculate_result_08009410"
        },
        "FUN_080035ec": {
            "renaming": {
                "FUN_080035ec": "update_parameters_080035ec",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter"
            },
            "code": "\nvoid update_parameters_080035ec(undefined4 first_parameter,undefined4 second_parameter,undefined4 third_parameter)\n\n{\n  *(undefined4 *)PTR_DAT_08003614 = first_parameter;\n  *(undefined4 *)(PTR_DAT_08003614 + 4) = second_parameter;\n  *(undefined4 *)(PTR_DAT_08003614 + 8) = third_parameter;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080035ec",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "update_parameters_080035ec"
        },
        "FUN_08006c70": {
            "renaming": {
                "FUN_08006c70": "configure_memory_08006c70"
            },
            "code": "\nvoid configureMemory_08006c70(void)\n\n{\n  DataSynchronizationBarrier(0xf);\n  *(uint *)(DAT_08006c94 + 0xc) = DAT_08006c98 | *(uint *)(DAT_08006c94 + 0xc) & 0x700;\n  DataSynchronizationBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c70",
            "calling": [
                "FUN_08006d66"
            ],
            "imported": false,
            "current_name": "configure_memory_08006c70"
        },
        "FUN_08006d98": {
            "renaming": {
                "FUN_08006d98": "process_byte_and_manipulate_bits_08006d98",
                "param_1": "input_char",
                "param_2": "bit_param1",
                "param_3": "bit_param2",
                "param_4": "bit_param3",
                "uVar1": "modified_byte"
            },
            "code": "\nvoid process_byte_and_manipulate_bits_08006d98(char input_char,undefined4 bit_param1,undefined4 bit_param2,undefined4 bit_param3)\n\n{\n  undefined4 modified_byte;\n  \n  modified_byte = get_modified_byte_08006b54((int)input_char);\n  bit_manipulation_08006c04(modified_byte,bit_param1,bit_param2,bit_param3);\n  return;\n}\n\n",
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d98",
            "calling": [],
            "imported": false,
            "current_name": "process_byte_and_manipulate_bits_08006d98"
        },
        "FUN_08005a68": {
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  *(int *)PTR_DAT_08005a80 = *(int *)PTR_DAT_08005a80 + 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005a68",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "increment_counter_08005a68"
        },
        "FUN_080079c0": {
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0",
                "set_memory_0800b430": "set_memory"
            },
            "code": "\nvoid initialize_memory_080079c0(void)\n\n{\n  set_memory(PTR_DAT_080079d8,0,0x18);\n  *(undefined4 *)PTR_DAT_080079dc = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080079c0",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_memory_080079c0"
        },
        "FUN_0800b2e0": {
            "renaming": {
                "FUN_0800b2e0": "return_zero_0800b2e0"
            },
            "code": "\nundefined4 return_zero_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e0",
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "return_zero_0800b2e0"
        },
        "FUN_08002908": {
            "renaming": {
                "FUN_08002908": "calculate_final_result_08002908",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "intermediate_result_1",
                "uVar2": "intermediate_result_2"
            },
            "code": "\nundefined4 calculate_final_result_08002908(undefined4 input_a,undefined4 input_b,undefined4 input_c,undefined4 input_d)\n\n{\n  undefined4 intermediate_result_1;\n  undefined4 intermediate_result_2;\n  \n  intermediate_result_1 = calculate_result_08008cdc(input_c,input_c);\n  intermediate_result_1 = floating_point_multiplication_08008eec(intermediate_result_1,input_d);\n  intermediate_result_2 = floating_point_multiplication_08008eec(input_a,input_a);\n  intermediate_result_1 = process_numbers_08008cd8(intermediate_result_1,intermediate_result_2);\n  intermediate_result_2 = floating_point_multiplication_08008eec(input_b,input_b);\n  intermediate_result_1 = calculate_result_08008cdc(intermediate_result_1,intermediate_result_2);\n  intermediate_result_2 = floating_point_multiplication_08008eec(input_c,0x40800000);\n  intermediate_result_1 = floating_point_division_08009054(intermediate_result_1,intermediate_result_2);\n  return intermediate_result_1;\n}\n\n",
            "called": [
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002908",
            "calling": [
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "calculate_final_result_08002908"
        },
        "FUN_08007c40": {
            "renaming": {
                "FUN_08007c40": "set_global_value_08007c40",
                "param_1": "input_value"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid setGlobalValue_08007c40(undefined4 input_value)\n\n{\n  _DAT_40000034 = input_value;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c40",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "set_global_value_08007c40"
        },
        "FUN_080094c0": {
            "renaming": {
                "FUN_080094c0": "process_data_080094c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "processed_flag",
                "uVar2": "shift_value",
                "uVar3": "temp_value",
                "bVar4": "carry_flag",
                "uVar5": "calculation_result",
                "lVar6": "final_result"
            },
            "code": "\nlonglong process_data_080094c0(uint input1,uint input2,undefined4 unused1,undefined4 unused2)\n\n{\n  int processed_flag;\n  uint shift_value;\n  uint temp_value;\n  bool carry_flag;\n  undefined8 calculation_result;\n  longlong final_result;\n  \n  temp_value = (input2 << 1) >> 0x15;\n  shift_value = temp_value - 0x3ff;\n  if ((int)shift_value < 0x14) {\n    if ((int)shift_value < 0) {\n      calculation_result = calculate_result_080082d4(input1,input2,DAT_080095a8,DAT_080095ac,unused2);\n      processed_flag = is_data_processed_08008b60((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0);\n      final_result = CONCAT44(input2,input1);\n      if (processed_flag != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = DAT_080095b4;\n          }\n          final_result = (ulonglong)input2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      temp_value = DAT_080095b0 >> (shift_value & 0xff);\n      final_result = CONCAT44(input2,input1);\n      if ((input2 & temp_value | input1) != 0) {\n        calculation_result = calculate_result_080082d4(input1,input2,DAT_080095a8,DAT_080095ac,unused2);\n        processed_flag = is_data_processed_08008b60((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0);\n        final_result = CONCAT44(input2,input1);\n        if (processed_flag != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shift_value & 0xff));\n          }\n          final_result = (ulonglong)(input2 & ~temp_value) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_value < 0x34) {\n    temp_value = 0xffffffff >> (temp_value - 0x413 & 0xff);\n    final_result = CONCAT44(input2,input1);\n    if ((temp_value & input1) != 0) {\n      calculation_result = calculate_result_080082d4(input1,input2,DAT_080095a8,DAT_080095ac,unused2);\n      processed_flag = is_data_processed_08008b60((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),0,0);\n      final_result = CONCAT44(input2,input1);\n      if (processed_flag != 0) {\n        if ((int)input2 < 0) {\n          if (shift_value == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shift_value = 1 << (0x34 - shift_value & 0xff);\n            carry_flag = CARRY4(shift_value,input1);\n            input1 = shift_value + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input2,input1 & ~temp_value);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input2,input1);\n    if (shift_value == 0x400) {\n      final_result = calculate_result_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080094c0",
            "calling": [
                "FUN_08002408",
                "FUN_0800a5a0",
                "FUN_08001f00",
                "FUN_08002c18"
            ],
            "imported": false,
            "current_name": "process_data_080094c0"
        },
        "FUN_08008eec": {
            "renaming": {
                "FUN_08008eec": "floating_point_multiplication_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param",
                "param_4": "temp_input2",
                "lVar1": "long_product",
                "uVar2": "temp_result",
                "uVar3": "input1_exponent",
                "iVar4": "sum_exponents",
                "iVar5": "adjusted_exponent",
                "uVar6": "product_low",
                "iVar7": "temp_exponent",
                "uVar8": "result",
                "bVar9": "condition",
                "bVar10": "borrow"
            },
            "code": "\nuint floating_point_multiplication_08008eec(uint input1,uint input2,undefined4 unused_param,uint temp_input2)\n\n{\n  longlong long_product;\n  uint temp_result;\n  uint input1_exponent;\n  int sum_exponents;\n  int adjusted_exponent;\n  uint product_low;\n  int temp_exponent;\n  uint result;\n  bool condition;\n  bool borrow;\n  \n  input1_exponent = input1 >> 0x17 & 0xff;\n  condition = input1_exponent == 0;\n  if (!condition) {\n    temp_input2 = input2 >> 0x17 & 0xff;\n    condition = temp_input2 == 0;\n  }\n  if (!condition) {\n    condition = input1_exponent == 0xff;\n  }\n  if (!condition) {\n    condition = temp_input2 == 0xff;\n  }\n  if (condition) {\n    temp_input2 = input2 >> 0x17 & 0xff;\n    if (input1_exponent == 0xff || temp_input2 == 0xff) {\n      condition = input1 == 0 || input1 == 0x80000000;\n      temp_result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition = input2 == 0;\n        temp_result = input1;\n      }\n      if (!condition) {\n        condition = input2 == 0x80000000;\n      }\n      result = temp_result;\n      if (((condition) || ((input1_exponent == 0xff && ((temp_result & 0x7fffff) != 0)))) ||\n         ((temp_input2 == 0xff && (result = input2, (input2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      temp_result = temp_result ^ input2;\n      goto LAB_0800903c;\n    }\n    condition = (input1 & 0x7fffffff) == 0;\n    if (!condition) {\n      condition = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition = input1_exponent == 0;\n    temp_result = input1 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        input1 = input1 << 1;\n        condition = (input1 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      input1_exponent = input1_exponent - 1;\n    }\n    input1 = input1 | temp_result;\n    condition = temp_input2 == 0;\n    temp_result = input2 & 0x80000000;\n    while( true ) {\n      if (condition) {\n        input2 = input2 << 1;\n        condition = (input2 & 0x800000) == 0;\n      }\n      if (!condition) break;\n      temp_input2 = temp_input2 - 1;\n    }\n    input2 = input2 | temp_result;\n  }\n  sum_exponents = input1_exponent + temp_input2;\n  result = input1 ^ input2;\n  input1_exponent = input1 << 9;\n  condition = input1_exponent == 0;\n  if (!condition) {\n    input2 = input2 << 9;\n    condition = input2 == 0;\n  }\n  if (condition) {\n    if (input1_exponent == 0) {\n      input2 = input2 << 9;\n    }\n    temp_result = result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    borrow = SBORROW4(sum_exponents,0x7f);\n    adjusted_exponent = sum_exponents + -0x7f;\n    condition = adjusted_exponent == 0;\n    temp_exponent = adjusted_exponent;\n    if (!condition && 0x7e < sum_exponents) {\n      borrow = SBORROW4(0xff,adjusted_exponent);\n      temp_exponent = 0xff - adjusted_exponent;\n      condition = adjusted_exponent == 0xff;\n    }\n    if (!condition && temp_exponent < 0 == borrow) {\n      temp_result = temp_result | adjusted_exponent * 0x800000;\n    }\n    if (!condition && temp_exponent < 0 == borrow) {\n      return temp_result;\n    }\n    temp_result = temp_result | 0x800000;\n    product_low = 0;\n    borrow = SBORROW4(adjusted_exponent,1);\n    result = sum_exponents - 0x80;\n    condition = result == 0;\n    input1_exponent = result;\n  }\n  else {\n    long_product = (ulonglong)(input1_exponent >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product_low = (uint)long_product;\n    temp_result = (uint)((ulonglong)long_product >> 0x20);\n    condition = temp_result < 0x800000;\n    if (condition) {\n      temp_result = temp_result << 1;\n    }\n    if (condition) {\n      temp_result = temp_result | product_low >> 0x1f;\n      product_low = product_low << 1;\n    }\n    temp_result = result & 0x80000000 | temp_result;\n    result = (sum_exponents + -0x7f) - (uint)condition;\n    borrow = SBORROW4(result,0xfd);\n    condition = result == 0xfd;\n    input1_exponent = result - 0xfd;\n    if (result < 0xfe) {\n      temp_result = temp_result + result * 0x800000 + (uint)(0x7fffffff < product_low);\n      if (product_low == 0x80000000) {\n        temp_result = temp_result & 0xfffffffe;\n      }\n      return temp_result;\n    }\n  }\n  if (condition || (int)input1_exponent < 0 != borrow) {\n    condition = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || condition != SCARRY4(result,0x19)) {\n      temp_result = temp_result & 0x80000000;\n    }\n    if (result != 0xffffffe7 && condition == SCARRY4(result,0x19)) {\n      input1_exponent = (temp_result << 1) >> (-result & 0xff);\n      result = temp_result << (result + 0x20 & 0xff);\n      input1_exponent = ((uint)((temp_result & 0x80000000) != 0) << 0x1f | input1_exponent >> 1) + (uint)((byte)input1_exponent & 1);\n      if ((product_low | result << 1) == 0) {\n        input1_exponent = input1_exponent & ~(result >> 0x1f);\n      }\n      return input1_exponent;\n    }\n    return temp_result;\n  }\nLAB_0800903c:\n  return temp_result & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008eec",
            "calling": [
                "FUN_080024c4",
                "FUN_08002978",
                "FUN_08003618",
                "FUN_08002638",
                "FUN_08002c18",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002408",
                "FUN_08003826",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_08002908"
            ],
            "imported": false,
            "current_name": "floating_point_multiplication_08008eec"
        },
        "FUN_08006b54": {
            "renaming": {
                "FUN_08006b54": "get_modified_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "resultByte"
            },
            "code": "\nbyte getModifiedByte_08006b54(byte inputByte)\n\n{\n  byte resultByte;\n  \n  if ((char)inputByte < '\\0') {\n    resultByte = *(byte *)((inputByte & 0xf) + DAT_08006b98 + 0x14);\n  }\n  else {\n    resultByte = *(byte *)((char)inputByte + DAT_08006b9c + 0x300);\n  }\n  return resultByte >> 4;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b54",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "get_modified_byte_08006b54"
        },
        "FUN_08007e84": {
            "renaming": {
                "FUN_08007e84": "get_lower_byte_08007e84"
            },
            "code": "\nuint get_lower_byte_08007e84(void)\n\n{\n  return *(uint *)(DAT_08007ea0 + 4) & 0xff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e84",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "get_lower_byte_08007e84"
        },
        "FUN_080057e4": {
            "renaming": {
                "FUN_080057e4": "check_and_reset_control_registers_080057e4",
                "reset_control_registers_08007bc2": "resetControlRegisters",
                "do_nothing_0800530c": "doNothing"
            },
            "code": "\nvoid checkAndResetControlRegisters_080057e4(void)\n\n{\n  resetControlRegisters();\n  if ((PTR_DAT_0800580c[0x3c] != -1) || ((PTR_DAT_08005810[2] & 0x20) != 0)) {\n    doNothing();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080057e4",
            "calling": [
                "FUN_080053a0",
                "FUN_080025e8",
                "FUN_0800583c",
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "check_and_reset_control_registers_080057e4"
        },
        "FUN_08006d8a": {
            "renaming": {
                "FUN_08006d8a": "get_bit_field_value_08006d8a",
                "uVar1": "bit_field_value"
            },
            "code": "\nundefined4 get_bit_field_value_08006d8a(void)\n\n{\n  undefined4 bit_field_value;\n  \n  bit_field_value = get_bit_field_08006998();\n  return bit_field_value;\n}\n\n",
            "called": [
                "FUN_08006998"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d8a",
            "calling": [],
            "imported": false,
            "current_name": "get_bit_field_value_08006d8a"
        },
        "FUN_0800b2e8": {
            "renaming": {
                "FUN_0800b2e8": "process_double_values_0800b2e8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "exponent",
                "param_4": "status",
                "uVar1": "intermediate_result",
                "iVar2": "adjusted_exponent",
                "uVar3": "result_high",
                "uVar4": "combined_values"
            },
            "code": "\nuint process_double_values_0800b2e8(uint input_value_1,uint input_value_2,int exponent,undefined4 status)\n\n{\n  uint intermediate_result;\n  int adjusted_exponent;\n  uint result_high;\n  ulonglong combined_values;\n  \n  combined_values = CONCAT44(input_value_2,input_value_1);\n  intermediate_result = (input_value_2 << 1) >> 0x15;\n  if (intermediate_result == 0) {\n    if ((input_value_1 | input_value_2 & 0x7fffffff) == 0) {\n      return input_value_1;\n    }\n    combined_values = calculate_double_multiplication_08008640(input_value_1,input_value_2,0,DAT_0800b3c8);\n    if (exponent < DAT_0800b3cc) goto LAB_0800b34a;\n    intermediate_result = ((uint)((int)(combined_values >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (intermediate_result == 0x7ff) {\n    intermediate_result = calculate_result_080082d4(input_value_1,input_value_2,input_value_1,input_value_2,status);\n    return intermediate_result;\n  }\n  result_high = (uint)(combined_values >> 0x20);\n  adjusted_exponent = intermediate_result + exponent;\n  if (adjusted_exponent < 0x7ff) {\n    if (0 < adjusted_exponent) {\n      return (uint)combined_values;\n    }\n    if (adjusted_exponent + 0x35 < 0 == SCARRY4(adjusted_exponent,0x35)) {\n      intermediate_result = calculate_double_multiplication_08008640((uint)combined_values,result_high & 0x800fffff | (adjusted_exponent + 0x36) * 0x100000,0,DAT_0800b3d8\n                          );\n      return intermediate_result;\n    }\n    if (exponent < 0xc351) {\n      combined_values = combined_values & 0x8000000000000000 | (ulonglong)DAT_0800b3d0 | 0x1a56e1f00000000;\nLAB_0800b34a:\n      intermediate_result = calculate_double_multiplication_08008640((int)combined_values,(int)(combined_values >> 0x20),DAT_0800b3b8,DAT_0800b3bc);\n      return intermediate_result;\n    }\n  }\n  intermediate_result = calculate_double_multiplication_08008640(DAT_0800b3d4,result_high & 0x80000000 | 0x7e37e43c,DAT_0800b3c0,DAT_0800b3c4);\n  return intermediate_result;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b2e8",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "process_double_values_0800b2e8"
        },
        "FUN_08005220": {
            "renaming": {
                "FUN_08005220": "do_nothing_08005220"
            },
            "code": "\nvoid do_nothing_08005220(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005220",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005220"
        },
        "FUN_08007520": {
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "inputNumber"
            },
            "code": "\nvoid setBitIfOdd_08007520(uint inputNumber)\n\n{\n  if ((inputNumber & 1) != 0) {\n    set_bit_in_memory_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080073d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007520",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "set_bit_if_odd_08007520"
        },
        "FUN_08007884": {
            "renaming": {
                "FUN_08007884": "combine_bits_from_memory_08007884",
                "iVar1": "bit1",
                "iVar2": "bit2",
                "iVar3": "bit3",
                "iVar4": "bit4",
                "iVar5": "bit5",
                "uVar6": "combined_bits"
            },
            "code": "\nuint combine_bits_from_memory_08007884(void)\n\n{\n  int bit1;\n  int bit2;\n  int bit3;\n  int bit4;\n  int bit5;\n  uint combined_bits;\n  \n  bit1 = get_bit_from_memory_08007854(0x36);\n  bit2 = get_bit_from_memory_08007854(0x37);\n  bit3 = get_bit_from_memory_08007854(0x38);\n  bit4 = get_bit_from_memory_08007854(0x39);\n  bit5 = get_bit_from_memory_08007854(0xf);\n  combined_bits = get_bit_from_memory_08007854(0);\n  return combined_bits | bit1 << 4 | bit2 << 3 | bit3 << 2 | bit4 << 1 | bit5 << 7;\n}\n\n",
            "called": [
                "FUN_08007854"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007884",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "combine_bits_from_memory_08007884"
        },
        "FUN_08004250": {
            "renaming": {
                "FUN_08004250": "print_machine_settings_08004250",
                "uVar1": "temp_float_result"
            },
            "code": "\nvoid print_machine_settings_08004250(void)\n\n{\n  undefined4 temp_float_result;\n  \n  write_characters_080036c6(PTR_DAT_08004470);\n  convert_float_to_string_08003826(*(undefined4 *)PTR_DAT_08004474);\n  write_characters_080036c6(PTR_s___x__step_mm___1__08004478);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 4));\n  write_characters_080036c6(PTR_s___y__step_mm___2__0800447c);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 8));\n  write_characters_080036c6(PTR_s___z__step_mm___3__08004480);\n  print_signed_int_080037fc(PTR_DAT_08004474[0xd]);\n  write_characters_080036c6(PTR_s___step_pulse__usec___4__08004484);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x10));\n  write_characters_080036c6(PTR_s___default_feed__mm_min___5__08004488);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x14));\n  write_characters_080036c6(PTR_s___default_seek__mm_min___6__0800448c);\n  print_signed_int_080037fc(*(undefined2 *)(PTR_DAT_08004474 + 0x18));\n  write_characters_080036c6(PTR_s___step_port_invert_mask__int__08004490);\n  print_uint16_in_binary_0800375c(*(undefined2 *)(PTR_DAT_08004474 + 0x18));\n  write_characters_080036c6(PTR_s____7__08004494);\n  print_signed_int_080037fc(PTR_DAT_08004474[0x3c]);\n  write_characters_080036c6(PTR_s___step_idle_delay__msec___8__08004498);\n  temp_float_result = floating_point_division_08009054(*(undefined4 *)(PTR_DAT_08004474 + 0x20),DAT_0800449c);\n  convert_float_to_string_08003826(temp_float_result);\n  write_characters_080036c6(PTR_s___acceleration__mm_sec_2___9__080044a0);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x24));\n  write_characters_080036c6(PTR_s___junction_deviation__mm___10__080044a4);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x1c));\n  write_characters_080036c6(PTR_s___arc__mm_segment___11__080044a8);\n  print_signed_int_080037fc(PTR_DAT_08004474[0x3e]);\n  write_characters_080036c6(PTR_s___n_arc_correction__int___12__080044ac);\n  print_signed_int_080037fc(PTR_DAT_08004474[0x3d]);\n  write_characters_080036c6(PTR_s___n_decimals__int___13__080044b0);\n  print_signed_int_080037fc((PTR_DAT_08004474[0x28] & 1) != 0);\n  write_characters_080036c6(PTR_s___report_inches__bool___14__080044b4);\n  print_signed_int_080037fc((PTR_DAT_08004474[0x28] & 2) != 0);\n  write_characters_080036c6(PTR_s___auto_start__bool___15__080044b8);\n  print_signed_int_080037fc((PTR_DAT_08004474[0x28] & 4) != 0);\n  write_characters_080036c6(PTR_s___invert_step_enable__bool___16__080044bc);\n  print_signed_int_080037fc((PTR_DAT_08004474[0x28] & 8) != 0);\n  write_characters_080036c6(PTR_s___hard_limits__bool___17__080044c0);\n  print_signed_int_080037fc((PTR_DAT_08004474[0x28] & 0x10) != 0);\n  write_characters_080036c6(PTR_s___homing_cycle__bool___18__080044c4);\n  print_signed_int_080037fc(*(undefined2 *)(PTR_DAT_08004474 + 0x2a));\n  write_characters_080036c6(PTR_s___homing_dir_invert_mask__int__080044c8);\n  print_uint16_in_binary_0800375c(*(undefined2 *)(PTR_DAT_08004474 + 0x2a));\n  write_characters_080036c6(PTR_s____19__080044cc);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x2c));\n  write_characters_080036c6(PTR_s___homing_feed__mm_min___20__080044d0);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x30));\n  write_characters_080036c6(PTR_s___homing_seek__mm_min___21__080044d4);\n  print_signed_int_080037fc(*(undefined2 *)(PTR_DAT_08004474 + 0x34));\n  write_characters_080036c6(PTR_s___homing_debounce__msec___22__080044d8);\n  convert_float_to_string_08003826(*(undefined4 *)(PTR_DAT_08004474 + 0x38));\n  write_characters_080036c6(PTR_s___homing_pull_off__mm___23__080044dc);\n  print_signed_int_080037fc(*(undefined2 *)(PTR_DAT_08004474 + 0x1a));\n  write_characters_080036c6(PTR_s___dir_port_invert_mask__int__080044e0);\n  print_uint16_in_binary_0800375c(*(undefined2 *)(PTR_DAT_08004474 + 0x1a));\n  write_characters_080036c6(PTR_DAT_080044e4);\n  return;\n}\n\n",
            "called": [
                "FUN_08009054",
                "FUN_0800375c",
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_08003826"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004250",
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_machine_settings_08004250"
        },
        "FUN_08006dc4": {
            "renaming": {
                "FUN_08006dc4": "set_bit_at_index_08006dc4",
                "param_1": "inputChar"
            },
            "code": "\nvoid setBitAtIndex_08006dc4(char inputChar)\n\n{\n  set_bit_at_index_08006a58((int)inputChar);\n  return;\n}\n\n",
            "called": [
                "FUN_08006a58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006dc4",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_at_index_08006dc4"
        },
        "FUN_08007402": {
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "bitPosition"
            },
            "code": "\nvoid setBitInMemory_08007402(uint bitPosition)\n\n{\n  *(short *)(((int)bitPosition >> 4) * 0x400 + 0x40020018) = (short)(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007402",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "set_bit_in_memory_08007402"
        },
        "FUN_08002870": {
            "renaming": {
                "FUN_08002870": "increment_and_wrap_08002870",
                "param_1": "input_char",
                "local_9": "result_char"
            },
            "code": "\nchar increment_and_wrap_08002870(char input_char)\n\n{\n  char result_char;\n  \n  result_char = input_char + '\\x01';\n  if (result_char == '\\x12') {\n    result_char = '\\0';\n  }\n  return result_char;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002870",
            "calling": [
                "FUN_08002ef0",
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002f40",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "increment_and_wrap_08002870"
        },
        "FUN_08000210": {
            "renaming": {
                "FUN_08000210": "execute_two_operations_08000210"
            },
            "code": "\nvoid executeTwoOperations_08000210(void)\n\n{\n  do_nothing_080001ec();\n  do_nothing_080001d4();\n  return;\n}\n\n",
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000210",
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "execute_two_operations_08000210"
        },
        "FUN_08005900": {
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "input_byte"
            },
            "code": "\nundefined4 process_byte_08005900(byte input_byte)\n\n{\n  if (input_byte == 0x7e) {\n    PTR_DAT_08005978[2] = PTR_DAT_08005978[2] | 2;\n    return 1;\n  }\n  if (input_byte < 0x7f) {\n    if (input_byte == 0x3f) {\n      PTR_DAT_08005978[2] = PTR_DAT_08005978[2] | 1;\n      return 1;\n    }\n    if (input_byte < 0x40) {\n      if (input_byte == 0x18) {\n        update_control_registers_080025e8();\n        return 1;\n      }\n      if (input_byte == 0x21) {\n        PTR_DAT_08005978[2] = PTR_DAT_08005978[2] | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005900",
            "calling": [
                "FUN_08008286"
            ],
            "imported": false,
            "current_name": "process_byte_08005900"
        },
        "FUN_08002638": {
            "renaming": {
                "FUN_08002638": "process_input_string_08002638",
                "param_1": "input_offset",
                "param_2": "input_string",
                "param_3": "output_result",
                "bVar1": "current_diff",
                "bVar2": "is_negative",
                "bVar3": "is_decimal",
                "iVar4": "non_zero_check",
                "pcVar5": "temp_pointer",
                "pcVar6": "current_pointer",
                "uVar7": "return_code",
                "uVar8": "intermediate_result",
                "local_1c": "modified_value",
                "local_16": "digit_count",
                "local_15": "exponent",
                "local_14": "integer_part",
                "local_d": "current_char",
                "local_c": "next_pointer"
            },
            "code": "\nundefined4 process_input_string_08002638(int input_offset,byte *input_string,uint *output_result)\n\n{\n  byte current_diff;\n  bool is_negative;\n  bool is_decimal;\n  int non_zero_check;\n  char *temp_pointer;\n  char *current_pointer;\n  undefined4 return_code;\n  undefined8 intermediate_result;\n  uint modified_value;\n  byte digit_count;\n  char exponent;\n  int integer_part;\n  char current_char;\n  char *next_pointer;\n  \n  current_pointer = (char *)(input_offset + (uint)*input_string);\n  temp_pointer = current_pointer + 1;\n  current_char = *current_pointer;\n  is_negative = false;\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *temp_pointer;\n    next_pointer = current_pointer + 2;\n  }\n  else {\n    next_pointer = temp_pointer;\n    if (current_char == '+') {\n      next_pointer = current_pointer + 2;\n      current_char = *temp_pointer;\n    }\n  }\n  integer_part = 0;\n  exponent = '\\0';\n  digit_count = 0;\n  is_decimal = false;\n  do {\n    current_diff = current_char - 0x30;\n    if (current_diff < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_decimal) {\n          exponent = exponent + -1;\n        }\n        integer_part = (uint)current_diff + integer_part * 10;\n      }\n      else if (!is_decimal) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((current_diff != 0xfe) || (is_decimal)) {\n        if (digit_count == 0) {\n          return_code = 0;\n        }\n        else {\n          modified_value = calculate_modified_value_08008e3c(integer_part);\n          non_zero_check = check_non_zero_result_08009214(modified_value,0);\n          if (non_zero_check == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              intermediate_result = calculate_transformed_value_08008590(modified_value);\n              intermediate_result = calculate_double_multiplication_08008640((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_08002800,\n                                   DAT_08002804);\n              modified_value = calculate_result_08008c30((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n            }\n            if (exponent < '\\0') {\n              intermediate_result = calculate_transformed_value_08008590(modified_value);\n              intermediate_result = calculate_double_multiplication_08008640((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_08002808,\n                                   DAT_0800280c);\n              modified_value = calculate_result_08008c30((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                modified_value = floating_point_multiplication_08008eec(modified_value,DAT_08002810);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_result = modified_value ^ 0x80000000;\n          }\n          else {\n            *output_result = modified_value;\n          }\n          *input_string = ((char)next_pointer - (char)input_offset) - 1;\n          return_code = 1;\n        }\n        return return_code;\n      }\n      is_decimal = true;\n    }\n    current_char = *next_pointer;\n    next_pointer = next_pointer + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08008eec",
                "FUN_08008590"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002638",
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_input_string_08002638"
        },
        "FUN_080051b4": {
            "renaming": {
                "FUN_080051b4": "process_data_and_settings_080051b4",
                "iVar1": "result",
                "auStack_18": "data_buffer",
                "local_9": "data_index"
            },
            "code": "\nvoid process_data_and_settings_080051b4(void)\n\n{\n  int result;\n  undefined data_buffer [15];\n  byte data_index;\n  \n  result = validate_and_initialize_settings_08004dd2();\n  if (result == 0) {\n    display_error_message_08004030(10);\n    initialize_settings_08004c48(1);\n    print_machine_settings_08004250();\n  }\n  for (data_index = 0; data_index < 8; data_index = data_index + 1) {\n    result = validate_and_process_data_08004d7c(data_index,data_buffer);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004dd2",
                "FUN_08004d7c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080051b4",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_data_and_settings_080051b4"
        },
        "FUN_080098d0": {
            "renaming": {
                "FUN_080098d0": "calculate_result_080098d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "condition_char",
                "uVar2": "result",
                "iVar3": "is_processed",
                "puVar4": "undefined_val_ptr",
                "piVar5": "local_30_ptr",
                "local_50": "flag",
                "local_4c": "data_ptr",
                "local_48": "input_1_copy",
                "uStack_44": "input_2_copy",
                "local_40": "input_1_copy2",
                "uStack_3c": "input_2_copy2",
                "local_38": "float_result",
                "local_30": "check_result"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nundefined4 calculate_result_080098d0(undefined4 input_1,undefined4 input_2)\n\n{\n  char condition_char;\n  undefined4 result;\n  int is_processed;\n  undefined4 *undefined_val_ptr;\n  int *local_30_ptr;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy2;\n  undefined4 input_2_copy2;\n  undefined8 float_result;\n  int check_result;\n  \n  result = compute_result_0800a1bc();\n  condition_char = *PTR_DAT_08009988;\n  if (((condition_char == -1) || (check_result = check_conditions_08008b74(input_1,input_2,input_1,input_2), check_result != 0))\n     || (is_processed = is_data_processed_08008b24(input_1,input_2,0,0), is_processed == 0)) {\n    return result;\n  }\n  flag = 1;\n  data_ptr = PTR_DAT_0800998c;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy2 = input_1;\n  input_2_copy2 = input_2;\n  if (condition_char == '\\0') {\n    float_result = 0;\nLAB_0800996c:\n    is_processed = return_zero_0800b2e0(&flag);\n    if (is_processed != 0) goto joined_r0x0800997a;\n  }\n  else {\n    float_result = calculate_float_multiplication_08008894(0,0,0,0);\n    if (condition_char != '\\x02') goto LAB_0800996c;\n  }\n  undefined_val_ptr = (undefined4 *)get_undefined_value_0800b3dc();\n  *undefined_val_ptr = 0x21;\njoined_r0x0800997a:\n  if (check_result != 0) {\n    local_30_ptr = (int *)get_undefined_value_0800b3dc();\n    *local_30_ptr = check_result;\n  }\n  return (undefined4)float_result;\n}\n\n",
            "called": [
                "FUN_08008b24",
                "FUN_0800b2e0",
                "FUN_0800a1bc",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080098d0",
            "calling": [
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_result_080098d0"
        },
        "FUN_08005c30": {
            "renaming": {
                "FUN_08005c30": "check_and_update_memory_08005c30",
                "param_1": "inputValue",
                "bVar1": "isInRange"
            },
            "code": "\nbool checkAndUpdateMemory_08005c30(int inputValue)\n\n{\n  bool isInRange;\n  \n  isInRange = inputValue - 1U < 0x1000000;\n  if (isInRange) {\n    DAT_08005c70[1] = inputValue + -1;\n    update_memory_08005bdc(0xffffffff,0xf);\n    DAT_08005c70[2] = 0;\n    *DAT_08005c70 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "called": [
                "FUN_08005bdc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005c30",
            "calling": [
                "FUN_0800618c"
            ],
            "imported": false,
            "current_name": "check_and_update_memory_08005c30"
        },
        "FUN_0800b51c": {
            "renaming": {
                "FUN_0800b51c": "do_nothing_0800b51c"
            },
            "code": "\nvoid do_nothing_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b51c",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b51c"
        },
        "FUN_0800056c": {
            "renaming": {
                "FUN_0800056c": "process_input_value_0800056c",
                "param_1": "input_value",
                "uVar1": "intermediate_result"
            },
            "code": "\nundefined4 process_input_value_0800056c(undefined4 input_value)\n\n{\n  undefined8 intermediate_result;\n  \n  if (PTR_DAT_080005b0[3] != '\\0') {\n    intermediate_result = calculate_transformed_value_08008590(input_value);\n    intermediate_result = calculate_double_multiplication_08008640((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),DAT_080005a8,DAT_080005ac);\n    input_value = calculate_result_08008c30((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "called": [
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08008590"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800056c",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_input_value_0800056c"
        },
        "FUN_08002f24": {
            "renaming": {
                "FUN_08002f24": "initialize_data_memory_08002f24",
                "update_data_pointers_08002ef0": "updateDataPointers",
                "set_memory_0800b430": "setMemory"
            },
            "code": "\nvoid initializeDataMemory_08002f24(void)\n\n{\n  updateDataPointers();\n  setMemory(PTR_DAT_08002f3c,0,0x1c);\n  return;\n}\n\n",
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f24",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_data_memory_08002f24"
        },
        "FUN_0800981c": {
            "renaming": {
                "FUN_0800981c": "calculate_result_0800981c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "undefined8": "uint64_t",
                "undefined4": "uint32_t",
                "undefined": "uint8_t",
                "iVar3": "int_result",
                "uVar6": "uint64_result",
                "local_50": "local_var_50",
                "puStack_4c": "ptr_local_stack_4c",
                "local_48": "local_var_48",
                "uStack_44": "uint_stack_44",
                "local_40": "local_var_40",
                "uStack_3c": "uint_stack_3c",
                "local_38": "local_var_38",
                "uStack_34": "uint_stack_34",
                "local_30": "local_var_30",
                "puVar2": "ptr_var_2",
                "puVar4": "ptr_var_4",
                "piVar5": "ptr_int_var_5",
                "cVar1": "char_var_1"
            },
            "code": "\nuint64_t calculate_result_0800981c(uint32_t input_1,uint32_t input_2,uint32_t input_3,uint32_t input_4)\n\n{\n  char char_var_1;\n  uint8_t *ptr_var_2;\n  int int_result;\n  uint32_t *ptr_var_4;\n  int *ptr_int_var_5;\n  uint64_t uint64_result;\n  uint32_t local_var_50;\n  uint8_t *ptr_local_stack_4c;\n  uint32_t local_var_48;\n  uint32_t uint_stack_44;\n  uint32_t local_var_40;\n  uint32_t uint_stack_3c;\n  uint32_t local_var_38;\n  uint32_t uint_stack_34;\n  int local_var_30;\n  \n  ptr_var_2 = PTR_DAT_080098cc;\n  uint64_result = improved_calculation_08009b24();\n  if (*ptr_var_2 == -1) {\n    return uint64_result;\n  }\n  local_var_30 = calculate_bitwise_operation_0800b2d4();\n  if (local_var_30 != 0) {\n    return uint64_result;\n  }\n  int_result = calculate_bitwise_operation_0800b2d4(input_1,input_2);\n  if (int_result == 0) {\n    return uint64_result;\n  }\n  int_result = calculate_bitwise_operation_0800b2d4(input_3,input_4);\n  if (int_result == 0) {\n    return uint64_result;\n  }\n  char_var_1 = *ptr_var_2;\n  local_var_50 = 3;\n  ptr_local_stack_4c = PTR_s_hypot_080098c0;\n  local_var_48 = input_1;\n  uint_stack_44 = input_2;\n  local_var_40 = input_3;\n  uint_stack_3c = input_4;\n  if (char_var_1 == '\\0') {\n    local_var_38 = 0xe0000000;\n    uint_stack_34 = DAT_080098c8;\nLAB_080098aa:\n    int_result = return_zero_0800b2e0(&local_var_50);\n    if (int_result != 0) goto LAB_08009896;\n  }\n  else {\n    local_var_38 = 0;\n    uint_stack_34 = DAT_080098c4;\n    if (char_var_1 != '\\x02') goto LAB_080098aa;\n  }\n  ptr_var_4 = (uint32_t *)get_uint8_t_value_0800b3dc();\n  *ptr_var_4 = 0x22;\nLAB_08009896:\n  uint64_result = CONCAT44(uint_stack_34,local_var_38);\n  if (local_var_30 != 0) {\n    ptr_int_var_5 = (int *)get_uint8_t_value_0800b3dc();\n    uint64_result = CONCAT44(uint_stack_34,local_var_38);\n    *ptr_int_var_5 = local_var_30;\n  }\n  return uint64_result;\n}\n\n",
            "called": [
                "FUN_0800b2e0",
                "FUN_0800b2d4",
                "FUN_0800b3dc",
                "FUN_08009b24"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800981c",
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_result_0800981c"
        },
        "FUN_080059b4": {
            "renaming": {
                "FUN_080059b4": "set_register_flags_080059b4"
            },
            "code": "\nundefined4 set_register_flags_080059b4(void)\n\n{\n  *DAT_080059f4 = *DAT_080059f4 | 0x200;\n  *DAT_080059f4 = *DAT_080059f4 | 0x400;\n  *DAT_080059f4 = *DAT_080059f4 | 0x100;\n  get_updated_status_08006d72(16000);\n  update_register_08006ce0(3);\n  do_nothing_08005a50();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a50",
                "FUN_08006ce0",
                "FUN_08006d72"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080059b4",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "set_register_flags_080059b4"
        },
        "FUN_08006c04": {
            "renaming": {
                "FUN_08006c04": "bit_manipulation_08006c04",
                "param_1": "inputValue",
                "param_2": "shiftValue",
                "param_3": "outputValue1",
                "param_4": "outputValue2",
                "uVar1": "tempValue"
            },
            "code": "\nvoid bitManipulation_08006c04(uint inputValue,uint shiftValue,uint *outputValue1,uint *outputValue2)\n\n{\n  uint tempValue;\n  \n  shiftValue = shiftValue & 7;\n  tempValue = 7 - shiftValue;\n  if (3 < tempValue) {\n    tempValue = 4;\n  }\n  if (shiftValue + 4 < 7) {\n    shiftValue = 0;\n  }\n  else {\n    shiftValue = shiftValue - 3;\n  }\n  *outputValue1 = (1 << (tempValue & 0xff)) - 1U & inputValue >> (shiftValue & 0xff);\n  *outputValue2 = (1 << (shiftValue & 0xff)) - 1U & inputValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006c04",
            "calling": [
                "FUN_08006d98"
            ],
            "imported": false,
            "current_name": "bit_manipulation_08006c04"
        },
        "FUN_08002e08": {
            "renaming": {
                "FUN_08002e08": "process_position_data_08002e08",
                "uVar1": "division_result1",
                "uVar2": "division_result2",
                "puVar3": "current_position_ptr",
                "local_18": "previous_position_ptr",
                "local_11": "position_index"
            },
            "code": "\nvoid process_position_data_08002e08(void)\n\n{\n  undefined4 division_result1;\n  undefined4 division_result2;\n  undefined *current_position_ptr;\n  undefined *previous_position_ptr;\n  byte position_index;\n  \n  position_index = *PTR_DAT_08002ed0;\n  previous_position_ptr = (undefined *)0x0;\n  while (position_index != *PTR_DAT_08002ed8) {\n    current_position_ptr = PTR_DAT_08002ed4 + (uint)position_index * 0x40;\n    if ((previous_position_ptr != (undefined *)0x0) && ((previous_position_ptr[0x24] != '\\0' || (current_position_ptr[0x24] != '\\0')))) {\n      division_result1 = floating_point_division_08009054(*(undefined4 *)(previous_position_ptr + 0x18),*(undefined4 *)(previous_position_ptr + 0x14));\n      division_result2 = floating_point_division_08009054(*(undefined4 *)(current_position_ptr + 0x18),*(undefined4 *)(previous_position_ptr + 0x14));\n      calculate_position_values_08002c18(previous_position_ptr,division_result1,division_result2);\n      previous_position_ptr[0x24] = 0;\n    }\n    position_index = increment_and_wrap_08002870(position_index);\n    previous_position_ptr = current_position_ptr;\n  }\n  division_result1 = floating_point_division_08009054(*(undefined4 *)(previous_position_ptr + 0x18),*(undefined4 *)(previous_position_ptr + 0x14));\n  division_result2 = floating_point_division_08009054(0,*(undefined4 *)(previous_position_ptr + 0x14));\n  calculate_position_values_08002c18(previous_position_ptr,division_result1,division_result2);\n  previous_position_ptr[0x24] = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_08002870",
                "FUN_08009054",
                "FUN_08002c18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002e08",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "process_position_data_08002e08"
        },
        "FUN_08006680": {
            "renaming": {
                "FUN_08006680": "calculate_final_value_08006680",
                "uVar1": "shifted_value",
                "uVar2": "leading_zeroes_count"
            },
            "code": "\nuint calculate_final_value_08006680(void)\n\n{\n  uint shifted_value;\n  uint leading_zeroes_count;\n  \n  shifted_value = calculate_shifted_value_08006628();\n  leading_zeroes_count = count_leading_zeroes(0x380000);\n  return shifted_value >> PTR_DAT_080066c8[(*(uint *)(DAT_080066c4 + 8) & 0x1c00) >> (leading_zeroes_count & 0xff)];\n}\n\n",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006680",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_final_value_08006680"
        },
        "FUN_08000340": {
            "renaming": {
                "FUN_08000340": "update_memory_08000340",
                "param_1": "index",
                "param_2": "value"
            },
            "code": "\nvoid updateMemory_08000340(uint index,undefined value)\n\n{\n  if (*(int *)PTR_DAT_0800036c == 0) {\n    initialize_memory_080002f0();\n  }\n  PTR_DAT_08000370[index & 0x3ff] = value;\n  return;\n}\n\n",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000340",
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "imported": false,
            "current_name": "update_memory_08000340"
        },
        "thunk_FUN_08009990": {
            "renaming": {
                "thunk_FUN_08009990": "complex_calculation_thunk_08009990",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "int_var1",
                "uVar2": "uint_var2",
                "uVar3": "uint_var3",
                "uVar4": "uint_var4",
                "uVar5": "uint_var5",
                "uVar6": "uint64_var6"
            },
            "code": "\nuint complex_calculation_thunk_08009990(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  int int_var1;\n  undefined4 uint_var2;\n  uint uint_var3;\n  uint uint_var4;\n  uint uint_var5;\n  undefined8 uint64_var6;\n  \n  uint64_var6 = CONCAT44(DAT_08009b04,DAT_08009b00);\n  uint_var4 = input_d & 0x7fffffff;\n  if ((DAT_08009b18 < (uint_var4 | (-input_c | input_c) >> 0x1f)) ||\n     (uint_var5 = input_b & 0x7fffffff, DAT_08009b18 < (uint_var5 | (-input_a | input_a) >> 0x1f))) {\n    uint_var4 = calculate_result_080082d4(input_c,input_d,input_a,input_b);\n  }\n  else {\n    if ((input_d + 0xc0100000 | input_c) == 0) {\n      uint_var4 = process_data_0800af78();\n      return uint_var4;\n    }\n    uint_var3 = (int)input_d >> 0x1e & 2U | input_b >> 0x1f;\n    if ((uint_var5 | input_a) == 0) {\n      uint_var4 = DAT_08009af0;\n      if ((uint_var3 != 2) && (uint_var4 = input_a, uint_var3 == 3)) {\n        uint_var4 = DAT_08009af8;\n      }\n    }\n    else {\n      if ((uint_var4 | input_c) != 0) {\n        if (uint_var4 == DAT_08009b18) {\n          uint_var3 = uint_var3 - 1;\n          if (uint_var5 == uint_var4) {\n            if (2 < uint_var3) {\n              return DAT_08009b10;\n            }\n            return *(uint *)(PTR_DAT_08009b20 + uint_var3 * 8);\n          }\n          if (uint_var3 < 3) {\n            return *(uint *)(PTR_DAT_08009b1c + uint_var3 * 8);\n          }\n          return 0;\n        }\n        if (uint_var5 != DAT_08009b18) {\n          int_var1 = (int)(uint_var5 - uint_var4) >> 0x14;\n          if ((int)(uint_var5 - uint_var4) < 0x3d00000) {\n            if (((int)input_d < 0) && (int_var1 + 0x3c < 0 != SCARRY4(int_var1,0x3c))) {\n              uint64_var6 = 0;\n            }\n            else {\n              calculate_float_multiplication_08008894(input_a,input_b,input_c,input_d,input_d);\n              do_nothing_0800b2cc();\n              uint64_var6 = process_data_0800af78();\n            }\n          }\n          uint_var2 = (undefined4)((ulonglong)uint64_var6 >> 0x20);\n          uint_var4 = (uint)uint64_var6;\n          if (uint_var3 == 1) {\n            return uint_var4;\n          }\n          if (uint_var3 == 2) {\n            uint64_var6 = floating_point_operation_080082d0(uint_var4,uint_var2,DAT_08009ae8,DAT_08009aec);\n            uint_var4 = floating_point_operation_080082d0(DAT_08009af0,DAT_08009af4,(int)uint64_var6,\n                                 (int)((ulonglong)uint64_var6 >> 0x20));\n            return uint_var4;\n          }\n          if (uint_var3 == 0) {\n            return uint_var4;\n          }\n          uint64_var6 = floating_point_operation_080082d0(uint_var4,uint_var2,DAT_08009ae8,DAT_08009aec);\n          uint_var4 = floating_point_operation_080082d0((int)uint64_var6,(int)((ulonglong)uint64_var6 >> 0x20),DAT_08009af0,DAT_08009af4)\n          ;\n          return uint_var4;\n        }\n      }\n      uint_var4 = DAT_08009b08;\n      if (-1 < (int)input_b) {\n        uint_var4 = DAT_08009b00;\n      }\n    }\n  }\n  return uint_var4;\n}\n\n",
            "called": [
                "FUN_08009990"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009818",
            "calling": [
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "complex_calculation_thunk_08009990"
        },
        "FUN_08004bf4": {
            "renaming": {
                "FUN_08004bf4": "process_data_with_offset_08004bf4",
                "param_1": "inputByte",
                "param_2": "additionalData"
            },
            "code": "\nvoid processDataWithOffset_08004bf4(byte inputByte,undefined4 additionalData)\n\n{\n  process_data_08000374((ushort)inputByte * 0xd + 0x200,additionalData,0xc);\n  return;\n}\n\n",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bf4",
            "calling": [
                "FUN_08004d7c",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_data_with_offset_08004bf4"
        },
        "FUN_08004d7c": {
            "renaming": {
                "FUN_08004d7c": "validate_and_process_data_08004d7c",
                "param_1": "data_length",
                "param_2": "data_buffer",
                "iVar1": "checksum_result"
            },
            "code": "\nbool validate_and_process_data_08004d7c(byte data_length,undefined4 data_buffer)\n\n{\n  int checksum_result;\n  \n  checksum_result = check_data_checksum_080003ec(data_buffer,(ushort)data_length * 0xd + 0x200,0xc);\n  if (checksum_result == 0) {\n    set_memory_0800b430(data_buffer,0,0xc);\n    process_data_with_offset_08004bf4(data_length,data_buffer);\n  }\n  return checksum_result != 0;\n}\n\n",
            "called": [
                "FUN_08004bf4",
                "FUN_080003ec",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d7c",
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "validate_and_process_data_08004d7c"
        },
        "FUN_08009278": {
            "renaming": {
                "FUN_08009278": "process_value_08009278",
                "param_1": "input_value",
                "uVar1": "intermediate_result",
                "uVar2": "shift_amount"
            },
            "code": "\nuint process_value_08009278(uint input_value)\n\n{\n  uint intermediate_result;\n  uint shift_amount;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  intermediate_result = (input_value << 1) >> 0x18;\n  shift_amount = 0x9e - intermediate_result;\n  if (intermediate_result < 0x9f && shift_amount != 0) {\n    intermediate_result = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      intermediate_result = -intermediate_result;\n    }\n    return intermediate_result;\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009278",
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "imported": false,
            "current_name": "process_value_08009278"
        },
        "FUN_080004fc": {
            "renaming": {
                "FUN_080004fc": "normalize_coordinates_080004fc",
                "param_1": "x_coordinate",
                "param_2": "y_coordinate",
                "param_3": "z_coordinate",
                "uVar1": "normalized_value"
            },
            "code": "\nvoid normalize_coordinates_080004fc(undefined4 x_coordinate,undefined4 y_coordinate,undefined4 z_coordinate)\n\n{\n  undefined4 normalized_value;\n  \n  normalized_value = calculate_float_representation_08008e44(x_coordinate);\n  normalized_value = floating_point_division_08009054(normalized_value,*(undefined4 *)PTR_DAT_08000564);\n  *(undefined4 *)(PTR_DAT_08000568 + 0xc) = normalized_value;\n  normalized_value = calculate_float_representation_08008e44(y_coordinate);\n  normalized_value = floating_point_division_08009054(normalized_value,*(undefined4 *)(PTR_DAT_08000564 + 4));\n  *(undefined4 *)(PTR_DAT_08000568 + 0x10) = normalized_value;\n  normalized_value = calculate_float_representation_08008e44(z_coordinate);\n  normalized_value = floating_point_division_08009054(normalized_value,*(undefined4 *)(PTR_DAT_08000564 + 8));\n  *(undefined4 *)(PTR_DAT_08000568 + 0x14) = normalized_value;\n  return;\n}\n\n",
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004fc",
            "calling": [
                "FUN_0800283a"
            ],
            "imported": false,
            "current_name": "normalize_coordinates_080004fc"
        },
        "FUN_08000220": {
            "renaming": {
                "FUN_08000220": "process_input_08000220",
                "param_1": "inputChar"
            },
            "code": "\nvoid processInput_08000220(char inputChar)\n\n{\n  if (inputChar != *PTR_DAT_08000264) {\n    process_buffer_08002fd4();\n    if (inputChar == '\\x01') {\n      do_nothing_080001c8();\n    }\n    else if (inputChar == '\\x02') {\n      do_nothing_080001e0();\n    }\n    else {\n      execute_two_operations_08000210();\n    }\n    *PTR_DAT_08000264 = inputChar;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000210",
                "FUN_080001c8",
                "FUN_08002fd4",
                "FUN_080001e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000220",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_input_08000220"
        },
        "FUN_08005238": {
            "renaming": {
                "FUN_08005238": "reset_and_call_08005238",
                "call_do_nothing_function_08005250": "doNothing"
            },
            "code": "\nvoid resetAndCall_08005238(void)\n\n{\n  *PTR_DAT_0800524c = 0;\n  doNothing();\n  return;\n}\n\n",
            "called": [
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005238",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "reset_and_call_08005238"
        },
        "FUN_08007da8": {
            "renaming": {
                "FUN_08007da8": "update_flags_08007da8",
                "puVar1": "flagsPtr"
            },
            "code": "\nvoid updateFlags_08007da8(void)\n\n{\n  uint *flagsPtr;\n  \n  flagsPtr = DAT_08007dd4;\n  DAT_08007dd4[8] = DAT_08007dd4[8] | 0x10;\n  *flagsPtr = *flagsPtr | 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007da8",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "update_flags_08007da8"
        },
        "FUN_08004148": {
            "renaming": {
                "FUN_08004148": "display_alarm_messages_08004148",
                "param_1": "alarmType"
            },
            "code": "\nvoid displayAlarmMessages_08004148(char alarmType)\n\n{\n  write_characters_080036c6(PTR_s_ALARM__08004190);\n  if (alarmType == -2) {\n    write_characters_080036c6(PTR_s_Abort_during_cycle_08004198);\n  }\n  else if (alarmType == -1) {\n    write_characters_080036c6(PTR_s_Hard_limit_08004194);\n  }\n  write_characters_080036c6(PTR_s___MPos__0800419c);\n  do_nothing_08002814(500);\n  return;\n}\n\n",
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004148",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "display_alarm_messages_08004148"
        },
        "FUN_08004940": {
            "renaming": {
                "FUN_08004940": "calculate_and_display_positions_08004940",
                "uVar1": "intermediate_result",
                "uVar2": "index",
                "uVar3": "position_value",
                "uVar4": "transformed_value1",
                "uVar5": "transformed_value2",
                "auStack_2c": "position_data",
                "local_11": "iterator"
            },
            "code": "\nvoid calculate_and_display_positions_08004940(void)\n\n{\n  undefined4 intermediate_result;\n  uint index;\n  undefined4 position_value;\n  undefined8 transformed_value1;\n  undefined8 transformed_value2;\n  undefined4 position_data [6];\n  byte iterator;\n  \n  position_data[3] = *(undefined4 *)(PTR_DAT_08004b88 + 4);\n  position_data[4] = *(undefined4 *)(PTR_DAT_08004b88 + 8);\n  position_data[5] = *(undefined4 *)(PTR_DAT_08004b88 + 0xc);\n  if ((byte)PTR_DAT_08004b88[1] < 8) {\n                    /* WARNING: Could not recover jumptable at 0x0800495e. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    (*(code *)(&switchD_0800495e::switchdataD_08004964)[(byte)PTR_DAT_08004b88[1]])();\n    return;\n  }\n  write_characters_080036c6(PTR_s__MPos__08004ba8);\n  for (iterator = 0; iterator < 3; iterator = iterator + 1) {\n    intermediate_result = calculate_float_representation_08008e44(position_data[iterator + 3]);\n    index = (uint)iterator;\n    intermediate_result = floating_point_division_08009054(intermediate_result,*(undefined4 *)(PTR_DAT_08004bac + (uint)iterator * 4));\n    position_data[index] = intermediate_result;\n    if ((PTR_DAT_08004bac[0x28] & 1) != 0) {\n      transformed_value1 = calculate_transformed_value_08008590(position_data[iterator]);\n      transformed_value1 = calculate_double_multiplication_08008640((int)transformed_value1,(int)((ulonglong)transformed_value1 >> 0x20),DAT_08004b80,DAT_08004b84);\n      index = (uint)iterator;\n      intermediate_result = calculate_result_08008c30((int)transformed_value1,(int)((ulonglong)transformed_value1 >> 0x20));\n      position_data[index] = intermediate_result;\n    }\n    convert_float_to_string_08003826(position_data[iterator]);\n    write_characters_080036c6(PTR_DAT_08004bb0);\n  }\n  write_characters_080036c6(PTR_s_WPos__08004bb4);\n  for (iterator = 0; iterator < 3; iterator = iterator + 1) {\n    if ((PTR_DAT_08004bac[0x28] & 1) == 0) {\n      position_value = position_data[iterator];\n      intermediate_result = calculate_result_08008cdc(*(undefined4 *)(PTR_DAT_08004bb8 + (iterator + 8) * 4),\n                           *(undefined4 *)(PTR_DAT_08004bb8 + (iterator + 10) * 4 + 4));\n      index = (uint)iterator;\n      intermediate_result = process_numbers_08008cd8(position_value,intermediate_result);\n      position_data[index] = intermediate_result;\n    }\n    else {\n      transformed_value1 = calculate_transformed_value_08008590(position_data[iterator]);\n      intermediate_result = calculate_result_08008cdc(*(undefined4 *)(PTR_DAT_08004bb8 + (iterator + 8) * 4),\n                           *(undefined4 *)(PTR_DAT_08004bb8 + (iterator + 10) * 4 + 4));\n      transformed_value2 = calculate_transformed_value_08008590(intermediate_result);\n      transformed_value2 = calculate_double_multiplication_08008640((int)transformed_value2,(int)((ulonglong)transformed_value2 >> 0x20),DAT_08004b80,DAT_08004b84);\n      transformed_value1 = floating_point_operation_080082d0((int)transformed_value1,(int)((ulonglong)transformed_value1 >> 0x20),(int)transformed_value2,\n                           (int)((ulonglong)transformed_value2 >> 0x20));\n      index = (uint)iterator;\n      intermediate_result = calculate_result_08008c30((int)transformed_value1,(int)((ulonglong)transformed_value1 >> 0x20));\n      position_data[index] = intermediate_result;\n    }\n    convert_float_to_string_08003826(position_data[iterator]);\n    if (iterator < 2) {\n      write_characters_080036c6(PTR_DAT_08004bb0);\n    }\n  }\n  write_characters_080036c6(PTR_DAT_08004bbc);\n  return;\n}\n\n",
            "called": [
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_080036c6",
                "FUN_080082d0",
                "FUN_08003826",
                "FUN_08008590"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004940",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "calculate_and_display_positions_08004940"
        },
        "FUN_08008a74": {
            "renaming": {
                "FUN_08008a74": "compare_and_combine_08008a74",
                "param_1": "value_a1",
                "param_2": "value_a2",
                "param_3": "value_b1",
                "param_4": "value_b2",
                "uVar1": "xor_result",
                "bVar2": "comparison_flag",
                "bVar3": "conditional_flag"
            },
            "code": "\nuint compare_and_combine_08008a74(uint value_a1,uint value_a2,uint value_b1,uint value_b2)\n\n{\n  uint xor_result;\n  bool comparison_flag;\n  bool conditional_flag;\n  \n  if (((int)(value_a2 << 1) >> 0x15 == -1 || (int)(value_b2 << 1) >> 0x15 == -1) &&\n     ((((int)(value_a2 << 1) >> 0x15 == -1 && ((value_a1 | value_a2 << 0xc) != 0)) ||\n      (((int)(value_b2 << 1) >> 0x15 == -1 && ((value_b1 | value_b2 << 0xc) != 0)))))) {\n    return 1;\n  }\n  comparison_flag = (value_a1 | value_a2 << 1) == 0;\n  if (comparison_flag) {\n    comparison_flag = (value_b1 | value_b2 << 1) == 0;\n  }\n  if (!comparison_flag) {\n    comparison_flag = value_a2 == value_b2;\n  }\n  if (comparison_flag) {\n    comparison_flag = value_a1 == value_b1;\n  }\n  if (!comparison_flag) {\n    xor_result = value_a2 ^ value_b2;\n    comparison_flag = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      comparison_flag = value_a2 == value_b2;\n    }\n    conditional_flag = -1 < (int)xor_result && value_b2 <= value_a2;\n    if (comparison_flag) {\n      conditional_flag = value_b1 <= value_a1;\n    }\n    value_b2 = (int)value_b2 >> 0x1f;\n    if (!conditional_flag) {\n      value_b2 = ~value_b2;\n    }\n    return value_b2 | 1;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008a74",
            "calling": [
                "FUN_08008b00"
            ],
            "imported": false,
            "current_name": "compare_and_combine_08008a74"
        },
        "FUN_08002fd4": {
            "renaming": {
                "FUN_08002fd4": "process_buffer_08002fd4",
                "iVar1": "bufferAddress"
            },
            "code": "\nvoid processBuffer_08002fd4(void)\n\n{\n  int bufferAddress;\n  \n  while ((bufferAddress = get_buffer_address_08002f74(), bufferAddress != 0 || (PTR_DAT_08003000[1] == '\\x03'))) {\n    process_system_flags_08003a74();\n    if (*PTR_DAT_08003000 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fd4",
            "calling": [
                "FUN_080024c4",
                "FUN_08000220",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "process_buffer_08002fd4"
        },
        "FUN_08002408": {
            "renaming": {
                "FUN_08002408": "process_data_sequence_08002408",
                "param_1": "input_data",
                "uVar1": "result1",
                "uVar2": "temp_result1",
                "uVar3": "temp_result2",
                "uVar4": "transformed_value",
                "local_12": "loop_counter"
            },
            "code": "\nvoid process_data_sequence_08002408(undefined4 input_data)\n\n{\n  undefined2 result1;\n  undefined4 temp_result1;\n  undefined4 temp_result2;\n  undefined8 transformed_value;\n  ushort loop_counter;\n  \n  temp_result1 = floating_point_multiplication_08008eec(input_data,DAT_080024b8);\n  transformed_value = calculate_transformed_value_08008590(temp_result1);\n  transformed_value = process_data_080094c0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n  loop_counter = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n  process_buffer_08002fd4();\n  temp_result1 = floating_point_multiplication_08008eec(input_data,DAT_080024bc);\n  temp_result2 = calculate_float_representation_08008e44((uint)loop_counter * 0x32);\n  temp_result1 = process_numbers_08008cd8(temp_result1,temp_result2);\n  transformed_value = calculate_transformed_value_08008590(temp_result1);\n  transformed_value = process_data_080094c0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n  result1 = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n  do_nothing_08002814(result1);\n  while ((loop_counter != 0 && (process_system_flags_08003a74(), *PTR_DAT_080024c0 == '\\0'))) {\n    wait_for_sum_080002a0(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080002a0",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_080094c0",
                "FUN_08003a74",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08002814",
                "FUN_08008590",
                "FUN_08002fd4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002408",
            "calling": [
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "process_data_sequence_08002408"
        },
        "FUN_08002a94": {
            "renaming": {
                "FUN_08002a94": "process_character_sequence_08002a94",
                "puVar1": "prev_data_ptr",
                "puVar2": "current_data_ptr",
                "local_18": "current_buffer",
                "local_14": "previous_buffer",
                "local_9": "current_char"
            },
            "code": "\nvoid process_character_sequence_08002a94(void)\n\n{\n  undefined *prev_data_ptr;\n  undefined *current_data_ptr;\n  undefined *current_buffer;\n  undefined *previous_buffer;\n  byte current_char;\n  \n  current_char = *PTR_DAT_08002af0;\n  current_buffer = (undefined *)0x0;\n  previous_buffer = (undefined *)0x0;\n  while (prev_data_ptr = previous_buffer, current_char != *PTR_DAT_08002af8) {\n    current_char = adjust_character_08002896(current_char);\n    previous_buffer = current_buffer;\n    current_data_ptr = PTR_DAT_08002af4 + (uint)current_char * 0x40;\n    process_data_080029d8(current_data_ptr,current_buffer,prev_data_ptr);\n    current_buffer = current_data_ptr;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002a94",
            "calling": [
                "FUN_08002edc"
            ],
            "imported": false,
            "current_name": "process_character_sequence_08002a94"
        },
        "FUN_08003618": {
            "renaming": {
                "FUN_08003618": "update_data_sequence_08003618",
                "param_1": "input_value",
                "puVar2": "data_ptr",
                "uVar3": "result",
                "uVar4": "temp_value",
                "bVar1": "index_byte"
            },
            "code": "\nvoid update_data_sequence_08003618(undefined4 input_value)\n\n{\n  byte index_byte;\n  undefined *data_ptr;\n  undefined4 result;\n  undefined4 temp_value;\n  \n  data_ptr = PTR_DAT_08003698;\n  index_byte = *PTR_DAT_08003694;\n  temp_value = *(undefined4 *)(PTR_DAT_08003698 + (uint)index_byte * 0x40 + 0x20);\n  result = calculate_float_representation_08008e44(input_value);\n  result = floating_point_multiplication_08008eec(temp_value,result);\n  temp_value = calculate_float_representation_08008e44(*(undefined4 *)(data_ptr + (uint)index_byte * 0x40 + 0x10));\n  result = floating_point_division_08009054(result,temp_value);\n  *(undefined4 *)(data_ptr + (uint)index_byte * 0x40 + 0x20) = result;\n  *(undefined4 *)(data_ptr + (uint)index_byte * 0x40 + 0x10) = input_value;\n  *(undefined4 *)(data_ptr + (uint)index_byte * 0x40 + 0x18) = 0;\n  *(undefined4 *)(data_ptr + (uint)index_byte * 0x40 + 0x1c) = 0;\n  data_ptr[(uint)index_byte * 0x40 + 0x25] = 0;\n  data_ptr[(uint)index_byte * 0x40 + 0x24] = 1;\n  process_data_sequence_08002edc();\n  return;\n}\n\n",
            "called": [
                "FUN_08008e44",
                "FUN_08002edc",
                "FUN_08009054",
                "FUN_08008eec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003618",
            "calling": [
                "FUN_080058a0"
            ],
            "imported": false,
            "current_name": "update_data_sequence_08003618"
        },
        "FUN_0800522c": {
            "renaming": {
                "FUN_0800522c": "do_nothing_0800522c"
            },
            "code": "\nvoid do_nothing_0800522c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800522c",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_0800522c"
        },
        "FUN_0800af78": {
            "renaming": {
                "FUN_0800af78": "process_data_0800af78",
                "param_1": "input_1",
                "param_2": "input_2",
                "puVar1": "pointer_var",
                "iVar2": "int_var",
                "uVar3": "uint_var1",
                "uVar4": "uint_var2",
                "uVar5": "uint_var3",
                "uVar6": "uint_var4",
                "uVar7": "uint_var5",
                "uVar8": "uint_var6",
                "uVar9": "uint64_var1",
                "uVar10": "uint64_var2",
                "local_2c": "local_var"
            },
            "code": "\nint process_data_0800af78(int input_1,uint input_2)\n\n{\n  undefined *pointer_var;\n  int int_var;\n  undefined4 uint_var1;\n  undefined4 uint_var2;\n  undefined4 uint_var3;\n  undefined4 uint_var4;\n  undefined4 uint_var5;\n  uint uint_var6;\n  undefined8 uint64_var1;\n  undefined8 uint64_var2;\n  undefined4 local_var;\n  \n  uint64_var1 = CONCAT44(input_2,input_1);\n  uint_var6 = input_2 & 0x7fffffff;\n  if (DAT_0800b298 < (int)uint_var6) {\n    if ((uint_var6 != DAT_0800b29c && (int)DAT_0800b29c <= (int)uint_var6) ||\n       ((int_var = DAT_0800b2a8, uint_var6 == DAT_0800b29c && (input_1 != 0)))) {\n      int_var = calculate_result_080082d4(input_1,input_2,input_1);\n      return int_var;\n    }\n  }\n  else {\n    if (DAT_0800b2ac < (int)uint_var6) {\n      uint64_var1 = do_nothing_0800b2cc();\n      uint_var4 = (undefined4)((ulonglong)uint64_var1 >> 0x20);\n      uint_var1 = (undefined4)uint64_var1;\n      if (DAT_0800b2bc < (int)uint_var6) {\n        if ((int)uint_var6 < DAT_0800b2c0) {\n          uint64_var1 = floating_point_operation_080082d0(uint_var1,uint_var4,0,DAT_0800b2c4);\n          uint64_var2 = calculate_double_multiplication_08008640(uint_var1,uint_var4,0,DAT_0800b2c4);\n          uint64_var2 = calculate_result_080082d4((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),0,DAT_0800b2b8);\n          uint64_var1 = calculate_float_multiplication_08008894((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),(int)uint64_var2,\n                               (int)((ulonglong)uint64_var2 >> 0x20));\n          int_var = 2;\n        }\n        else {\n          uint64_var1 = calculate_float_multiplication_08008894(0,DAT_0800b2c8,uint_var1,uint_var4);\n          int_var = 3;\n        }\n      }\n      else if (DAT_0800b2bc + -0xd0000 < (int)uint_var6) {\n        uint64_var1 = floating_point_operation_080082d0(uint_var1,uint_var4,0,DAT_0800b2b8);\n        uint64_var2 = calculate_result_080082d4(uint_var1,uint_var4,0,DAT_0800b2b8);\n        uint64_var1 = calculate_float_multiplication_08008894((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),(int)uint64_var2,\n                             (int)((ulonglong)uint64_var2 >> 0x20));\n        int_var = 1;\n      }\n      else {\n        uint64_var1 = calculate_result_080082d4(uint_var1,uint_var4,uint_var1,uint_var4);\n        uint64_var1 = floating_point_operation_080082d0((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),0,DAT_0800b2b8);\n        uint64_var2 = calculate_result_080082d4(uint_var1,uint_var4,0,0x40000000);\n        uint64_var1 = calculate_float_multiplication_08008894((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),(int)uint64_var2,\n                             (int)((ulonglong)uint64_var2 >> 0x20));\n        int_var = 0;\n      }\n    }\n    else {\n      if ((int)uint_var6 <= DAT_0800b2ac + -0x1bc0000) {\n        uint64_var2 = calculate_result_080082d4(input_1,input_2,DAT_0800b290,DAT_0800b294);\n        int_var = is_data_processed_08008b60((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),0,DAT_0800b2b8);\n        if (int_var != 0) {\n          return input_1;\n        }\n      }\n      int_var = -1;\n    }\n    local_var = (undefined4)((ulonglong)uint64_var1 >> 0x20);\n    uint_var5 = (undefined4)uint64_var1;\n    uint64_var1 = calculate_double_multiplication_08008640(uint_var5,local_var,uint_var5);\n    uint_var2 = (undefined4)((ulonglong)uint64_var1 >> 0x20);\n    uint_var1 = (undefined4)uint64_var1;\n    uint64_var1 = calculate_double_multiplication_08008640(uint_var1,uint_var2,uint_var1,uint_var2);\n    uint_var3 = (undefined4)((ulonglong)uint64_var1 >> 0x20);\n    uint_var4 = (undefined4)uint64_var1;\n    uint64_var1 = calculate_double_multiplication_08008640(uint_var4,uint_var3,DAT_0800b238,DAT_0800b23c);\n    uint64_var1 = calculate_result_080082d4((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),DAT_0800b240,DAT_0800b244);\n    uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var4,uint_var3);\n    uint64_var1 = calculate_result_080082d4((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),DAT_0800b248,DAT_0800b24c);\n    uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var4,uint_var3);\n    uint64_var1 = calculate_result_080082d4((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),DAT_0800b250,DAT_0800b254);\n    uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var4,uint_var3);\n    uint64_var1 = calculate_result_080082d4((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),DAT_0800b258,DAT_0800b25c);\n    uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var4,uint_var3);\n    uint64_var1 = calculate_result_080082d4((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),DAT_0800b260,DAT_0800b264);\n    uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var1,uint_var2);\n    uint_var1 = (undefined4)((ulonglong)uint64_var1 >> 0x20);\n    uint64_var2 = calculate_double_multiplication_08008640(uint_var4,uint_var3,DAT_0800b268,DAT_0800b26c);\n    uint64_var2 = floating_point_operation_080082d0((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),DAT_0800b270,DAT_0800b274);\n    uint64_var2 = calculate_double_multiplication_08008640((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),uint_var4,uint_var3);\n    uint64_var2 = floating_point_operation_080082d0((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),DAT_0800b278,DAT_0800b27c);\n    uint64_var2 = calculate_double_multiplication_08008640((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),uint_var4,uint_var3);\n    uint64_var2 = floating_point_operation_080082d0((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),DAT_0800b280,DAT_0800b284);\n    uint64_var2 = calculate_double_multiplication_08008640((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),uint_var4,uint_var3);\n    uint64_var2 = floating_point_operation_080082d0((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),DAT_0800b288,DAT_0800b28c);\n    uint64_var2 = calculate_double_multiplication_08008640((int)uint64_var2,(int)((ulonglong)uint64_var2 >> 0x20),uint_var4,uint_var3);\n    uint_var4 = (undefined4)((ulonglong)uint64_var2 >> 0x20);\n    if (int_var == -1) {\n      uint64_var1 = calculate_result_080082d4((int)uint64_var1,uint_var1,(int)uint64_var2,uint_var4);\n      uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var5,local_var);\n      int_var = floating_point_operation_080082d0(uint_var5,local_var,(int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20));\n      return int_var;\n    }\n    uint64_var1 = calculate_result_080082d4((int)uint64_var1,uint_var1,(int)uint64_var2,uint_var4);\n    pointer_var = PTR_DAT_0800b2b0;\n    uint64_var1 = calculate_double_multiplication_08008640((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var5,local_var);\n    uint64_var1 = floating_point_operation_080082d0((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),\n                         *(undefined4 *)(PTR_DAT_0800b2b4 + int_var * 8),\n                         *(undefined4 *)((int)(PTR_DAT_0800b2b4 + int_var * 8) + 4));\n    uint64_var1 = floating_point_operation_080082d0((int)uint64_var1,(int)((ulonglong)uint64_var1 >> 0x20),uint_var5,local_var);\n    int_var = floating_point_operation_080082d0(*(undefined4 *)(pointer_var + int_var * 8),\n                         *(undefined4 *)((int)(pointer_var + int_var * 8) + 4),(int)uint64_var1,\n                         (int)((ulonglong)uint64_var1 >> 0x20));\n    if ((int)input_2 < 0) {\n      return int_var;\n    }\n  }\n  return int_var;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_080082d0",
                "FUN_08008b60",
                "FUN_08008894"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800af78",
            "calling": [
                "FUN_08009990"
            ],
            "imported": false,
            "current_name": "process_data_0800af78"
        },
        "FUN_08007d08": {
            "renaming": {
                "FUN_08007d08": "initialize_device_settings_08007d08",
                "puVar1": "deviceSettings"
            },
            "code": "\nvoid initializeDeviceSettings_08007d08(void)\n\n{\n  undefined4 *deviceSettings;\n  \n  deviceSettings = DAT_08007d9c;\n  update_status_flag_08007a10(DAT_08007d9c);\n  *deviceSettings = 0x80;\n  deviceSettings[1] = 0;\n  deviceSettings[2] = 0;\n  deviceSettings[3] = 0;\n  deviceSettings[4] = 0;\n  deviceSettings[6] = 0x6800;\n  deviceSettings[7] = 0;\n  deviceSettings[8] = 0;\n  deviceSettings[9] = 0;\n  deviceSettings[10] = (uint)((ulonglong)DAT_08007da4 * (ulonglong)*(uint *)PTR_DAT_08007da0 >> 0x35) - 1;\n  deviceSettings[0xb] = 199;\n  deviceSettings[0xd] = 0;\n  deviceSettings[0xe] = 100;\n  deviceSettings[0xf] = 0;\n  deviceSettings[0x10] = 0;\n  deviceSettings[0x12] = 0;\n  deviceSettings[0x13] = 0;\n  deviceSettings[5] = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_08007a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007d08",
            "calling": [
                "FUN_08007e08"
            ],
            "imported": false,
            "current_name": "initialize_device_settings_08007d08"
        },
        "FUN_080091fc": {
            "renaming": {
                "FUN_080091fc": "swap_parameters_080091fc",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "\nvoid swap_parameters_080091fc(undefined4 first_param,undefined4 second_param)\n\n{\n  combine_parameters_08009204(second_param,first_param);\n  return;\n}\n\n",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080091fc",
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "imported": false,
            "current_name": "swap_parameters_080091fc"
        },
        "FUN_080058a0": {
            "renaming": {
                "FUN_080058a0": "update_data_state_080058a0"
            },
            "code": "\nvoid update_data_state_080058a0(void)\n\n{\n  if (*(int *)PTR_DAT_080058f0 == 0) {\n    PTR_DAT_080058fc[1] = 0;\n  }\n  else {\n    update_data_sequence_08003618(*(int *)(*(int *)PTR_DAT_080058f0 + 0x10) - *(int *)(PTR_DAT_080058f4 + 0x10));\n    *(undefined4 *)(PTR_DAT_080058f4 + 0x1c) = 0;\n    calculate_and_update_min_value_08005324(*(undefined4 *)(PTR_DAT_080058f4 + 0x1c));\n    *(undefined4 *)(PTR_DAT_080058f4 + 0x18) = DAT_080058f8;\n    *(undefined4 *)(PTR_DAT_080058f4 + 0x10) = 0;\n    PTR_DAT_080058fc[1] = 2;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08005324",
                "FUN_08003618"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080058a0",
            "calling": [
                "FUN_08003a74"
            ],
            "imported": false,
            "current_name": "update_data_state_080058a0"
        },
        "FUN_080036c6": {
            "renaming": {
                "FUN_080036c6": "write_characters_080036c6",
                "param_1": "input_string",
                "local_c": "current_char"
            },
            "code": "\nvoid write_characters_080036c6(char *input_string)\n\n{\n  char *current_char;\n  \n  current_char = input_string;\n  while (*current_char != '\\0') {\n    write_data_wrapper_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080036c6",
            "calling": [
                "FUN_08004940",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_080044e8",
                "FUN_08004148",
                "FUN_08004030",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_080046d0",
                "FUN_08004900"
            ],
            "imported": false,
            "current_name": "write_characters_080036c6"
        },
        "FUN_08008190": {
            "renaming": {
                "FUN_08008190": "configure_registers_08008190",
                "puVar1": "register_pointer"
            },
            "code": "\nvoid configure_registers_08008190(void)\n\n{\n  uint *register_pointer;\n  \n  register_pointer = DAT_08008240;\n  update_register_flags_08007ea4(DAT_08008240);\n  register_pointer[3] = register_pointer[3] & 0xffffdfff;\n  register_pointer[3] = register_pointer[3] & 0xffff400c | 0xc;\n  register_pointer[4] = register_pointer[4] & 0xffff8090;\n  register_pointer[5] = register_pointer[5] & 0xfffff000;\n  *register_pointer = *register_pointer & 0xfffffc00;\n  calculate_result_08007f54(register_pointer,0x1c200);\n  register_pointer[6] = register_pointer[6];\n  register_pointer[3] = register_pointer[3] | 0x2000;\n  return;\n}\n\n",
            "called": [
                "FUN_08007f54",
                "FUN_08007ea4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008190",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "configure_registers_08008190"
        },
        "FUN_080074c8": {
            "renaming": {
                "FUN_080074c8": "process_register_updates_080074c8",
                "param_1": "registerValue"
            },
            "code": "\nvoid processRegisterUpdates_080074c8(uint registerValue)\n\n{\n  if ((registerValue & 1) != 0) {\n    set_bit_in_memory_08007402(0x3e);\n  }\n  if ((*(int *)PTR_DAT_08007518 != 0) && ((registerValue & 0x1e) != 0)) {\n    update_control_register_if_needed_0800195c();\n  }\n  if ((*(int *)PTR_DAT_0800751c != 0) && ((registerValue & 0x80) != 0)) {\n    update_register_flags_08003a18(registerValue);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080074c8",
            "calling": [
                "FUN_08007930"
            ],
            "imported": false,
            "current_name": "process_register_updates_080074c8"
        },
        "FUN_0800b430": {
            "renaming": {
                "FUN_0800b430": "set_memory_0800b430",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "tempPtr1",
                "puVar2": "tempPtr2",
                "uVar3": "tempCount",
                "uVar4": "combinedValue",
                "bVar5": "isZero"
            },
            "code": "\nvoid setMemory_0800b430(undefined4 *destination,undefined value,uint count)\n\n{\n  undefined4 *tempPtr1;\n  undefined4 *tempPtr2;\n  uint tempCount;\n  undefined4 combinedValue;\n  bool isZero;\n  \n  if (((uint)destination & 3) != 0) {\n    tempCount = count - 1;\n    tempPtr1 = destination;\n    if (count == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)tempPtr1 + 1);\n      *(undefined *)tempPtr1 = value;\n      count = tempCount;\n      if (((uint)destination & 3) == 0) break;\n      isZero = tempCount == 0;\n      tempCount = tempCount - 1;\n      tempPtr1 = destination;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    combinedValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < count) {\n      tempPtr1 = destination + 4;\n      do {\n        tempPtr1[-4] = combinedValue;\n        tempPtr1[-3] = combinedValue;\n        tempPtr1[-2] = combinedValue;\n        tempPtr1[-1] = combinedValue;\n        tempPtr1 = tempPtr1 + 4;\n      } while (tempPtr1 != (undefined4 *)((int)destination + (count - 0x10 & 0xfffffff0) + 0x20));\n      tempCount = count & 0xc;\n      destination = destination + ((count - 0x10 >> 4) + 1) * 4;\n      count = count & 0xf;\n      if (tempCount == 0) goto joined_r0x0800b4a8;\n    }\n    tempPtr1 = (undefined4 *)((count - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      tempPtr2 = destination + 1;\n      *destination = combinedValue;\n      destination = tempPtr2;\n    } while (tempPtr1 != tempPtr2);\n    count = count & 3;\n    destination = tempPtr1;\n  }\njoined_r0x0800b4a8:\n  if (count != 0) {\n    tempPtr1 = destination;\n    do {\n      tempPtr2 = (undefined4 *)((int)tempPtr1 + 1);\n      *(undefined *)tempPtr1 = value;\n      tempPtr1 = tempPtr2;\n    } while ((undefined4 *)(count + (int)destination) != tempPtr2);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b430",
            "calling": [
                "FUN_080002f0",
                "FUN_08002f24",
                "FUN_080024c4",
                "FUN_08001ddc",
                "FUN_08005814",
                "FUN_080004ac",
                "FUN_080079c0",
                "FUN_08004d7c",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "set_memory_0800b430"
        },
        "FUN_08004030": {
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode"
            },
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    write_characters_080036c6(PTR_DAT_08004108);\n  }\n  else {\n    write_characters_080036c6(PTR_s_error__0800410c);\n    switch(errorCode) {\n    case '\\x01':\n      write_characters_080036c6(PTR_s_Bad_number_format_08004110);\n      break;\n    case '\\x02':\n      write_characters_080036c6(PTR_s_Expected_command_letter_08004114);\n      break;\n    case '\\x03':\n      write_characters_080036c6(PTR_s_Unsupported_statement_08004118);\n      break;\n    case '\\x04':\n      write_characters_080036c6(PTR_s_Invalid_radius_0800411c);\n      break;\n    case '\\x05':\n      write_characters_080036c6(PTR_s_Modal_group_violation_08004120);\n      break;\n    case '\\x06':\n      write_characters_080036c6(PTR_s_Invalid_statement_08004124);\n      break;\n    case '\\a':\n      write_characters_080036c6(PTR_s_Setting_disabled_08004128);\n      break;\n    case '\\b':\n      write_characters_080036c6(PTR_s_Value___0_0_0800412c);\n      break;\n    case '\\t':\n      write_characters_080036c6(PTR_s_Value___3_usec_08004130);\n      break;\n    case '\\n':\n      write_characters_080036c6(PTR_s_EEPROM_read_fail__Using_defaults_08004134);\n      break;\n    case '\\v':\n      write_characters_080036c6(PTR_s_Busy_or_queued_08004138);\n      break;\n    case '\\f':\n      write_characters_080036c6(PTR_s_Alarm_lock_0800413c);\n      break;\n    case '\\r':\n      write_characters_080036c6(PTR_s_Line_overflow_08004140);\n    }\n    write_characters_080036c6(PTR_DAT_08004144);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004030",
            "calling": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "display_error_message_08004030"
        },
        "FUN_08005360": {
            "renaming": {
                "FUN_08005360": "update_threshold_08005360",
                "uVar1": "currentThreshold",
                "uVar2": "updatedThreshold"
            },
            "code": "\nbool updateThreshold_08005360(void)\n\n{\n  uint currentThreshold;\n  uint updatedThreshold;\n  \n  *(int *)(PTR_DAT_08005398 + 0x18) =\n       *(int *)(PTR_DAT_08005398 + 0x14) + *(int *)(PTR_DAT_08005398 + 0x18);\n  currentThreshold = DAT_0800539c;\n  updatedThreshold = *(uint *)(PTR_DAT_08005398 + 0x18);\n  if (DAT_0800539c < updatedThreshold) {\n    *(int *)(PTR_DAT_08005398 + 0x18) = *(int *)(PTR_DAT_08005398 + 0x18) + -420000;\n  }\n  return currentThreshold < updatedThreshold;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005360",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_threshold_08005360"
        },
        "FUN_08003980": {
            "renaming": {
                "FUN_08003980": "reset_memory_08003980"
            },
            "code": "\nvoid resetMemory_08003980(void)\n\n{\n  *PTR_DAT_08003998 = 0;\n  *PTR_DAT_0800399c = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003980",
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "imported": false,
            "current_name": "reset_memory_08003980"
        },
        "FUN_08006de0": {
            "renaming": {
                "FUN_08006de0": "is_character_bit_set_08006de0",
                "param_1": "character",
                "uVar1": "bitSetResult"
            },
            "code": "\nundefined4 isCharacterBitSet_08006de0(char character)\n\n{\n  undefined4 bitSetResult;\n  \n  bitSetResult = is_bit_set_08006a18((int)character);\n  return bitSetResult;\n}\n\n",
            "called": [
                "FUN_08006a18"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006de0",
            "calling": [],
            "imported": false,
            "current_name": "is_character_bit_set_08006de0"
        },
        "FUN_08007540": {
            "renaming": {
                "FUN_08007540": "system_initialization_08007540",
                "set_register_flags_080059b4": "set_register_flags",
                "initialize_system_08007436": "initialize_hardware",
                "update_configurations_and_memory_0800778c": "update_system_config",
                "initialize_system_08007e08": "initialize_software",
                "initialize_memory_080079c0": "initialize_memory",
                "configure_registers_08008190": "configure_registers",
                "check_and_trigger_interrupt_08005984": "check_interrupt",
                "main_program_loop_08001ddc": "main_loop"
            },
            "code": "\nundefined4 system_initialization_08007540(void)\n\n{\n  set_register_flags();\n  initialize_hardware();\n  update_system_config();\n  initialize_software();\n  initialize_memory();\n  configure_registers();\n  check_interrupt(0);\n  main_loop();\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007436",
                "FUN_0800778c",
                "FUN_08001ddc",
                "FUN_080059b4",
                "FUN_080079c0",
                "FUN_08008190",
                "FUN_08005984",
                "FUN_08007e08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007540",
            "calling": [
                "FUN_080092c4"
            ],
            "imported": false,
            "current_name": "system_initialization_08007540"
        },
        "FUN_080052dc": {
            "renaming": {
                "FUN_080052dc": "update_register_080052dc",
                "param_1": "value"
            },
            "code": "\nvoid updateRegister_080052dc(uint value)\n\n{\n  *(uint *)(DAT_08005308 + 0x14) = value | *(uint *)(DAT_08005308 + 0x14) & 0xfffff55f;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052dc",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_register_080052dc"
        },
        "FUN_080064ec": {
            "renaming": {
                "FUN_080064ec": "calculate_result_080064ec",
                "uVar1": "bitwise_result",
                "uVar2": "mask_result",
                "local_c": "intermediate_result"
            },
            "code": "\nuint calculate_result_080064ec(void)\n\n{\n  uint bitwise_result;\n  uint mask_result;\n  uint intermediate_result;\n  \n  bitwise_result = *(uint *)(DAT_0800661c + 8) & 0xc;\n  if (bitwise_result == 8) {\n    mask_result = *(uint *)(DAT_0800661c + 4) & 0x3f;\n    bitwise_result = count_leading_zeroes(0x200);\n    if ((*(uint *)(DAT_0800661c + 4) & 0x400000) >> (bitwise_result & 0xff) == 0) {\n      bitwise_result = count_leading_zeroes(0x3fe0000);\n      intermediate_result = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (bitwise_result & 0xff)) * (DAT_08006620 / mask_result);\n    }\n    else {\n      bitwise_result = count_leading_zeroes(0x3fe0000);\n      intermediate_result = ((*(uint *)(DAT_0800661c + 4) & 0x7fc0) >> (bitwise_result & 0xff)) * (DAT_08006624 / mask_result);\n    }\n    bitwise_result = count_leading_zeroes(0xc000);\n    return intermediate_result / ((((*(uint *)(DAT_0800661c + 4) & 0x30000) >> (bitwise_result & 0xff)) + 1) * 2);\n  }\n  if (bitwise_result < 9) {\n    if (bitwise_result == 0) {\n      return DAT_08006620;\n    }\n    if (bitwise_result == 4) {\n      return DAT_08006624;\n    }\n  }\n  return DAT_08006620;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080064ec",
            "calling": [
                "FUN_08006628"
            ],
            "imported": false,
            "current_name": "calculate_result_080064ec"
        },
        "FUN_08006ba0": {
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "tempVar"
            },
            "code": "\nuint bitwiseOperation_08006ba0(uint input1,uint input2,uint input3)\n\n{\n  uint tempVar;\n  \n  input1 = input1 & 7;\n  tempVar = 7 - input1;\n  if (3 < tempVar) {\n    tempVar = 4;\n  }\n  if (input1 + 4 < 7) {\n    input1 = 0;\n  }\n  else {\n    input1 = input1 - 3;\n  }\n  return input3 & (1 << (input1 & 0xff)) - 1U |\n         ((1 << (tempVar & 0xff)) - 1U & input2) << (input1 & 0xff);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006ba0",
            "calling": [
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "bitwise_operation_08006ba0"
        },
        "FUN_080003ec": {
            "renaming": {
                "FUN_080003ec": "check_data_checksum_080003ec",
                "param_1": "output_buffer",
                "param_2": "input_index",
                "param_3": "data_length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_output",
                "local_9": "checksum"
            },
            "code": "\nbool check_data_checksum_080003ec(char *output_buffer,int input_index,int data_length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *current_output;\n  byte checksum;\n  \n  checksum = 0;\n  remaining_length = data_length;\n  current_index = input_index;\n  current_output = output_buffer;\n  if (*(int *)PTR_DAT_08000470 == 0) {\n    initialize_memory_080002f0();\n    current_index = input_index;\n    current_output = output_buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = get_data_from_memory_08000310(current_index);\n    checksum = cVar1 + (checksum != 0);\n    *current_output = cVar1;\n    current_index = current_index + 1;\n    current_output = current_output + 1;\n  }\n  uVar2 = get_data_from_memory_08000310(current_index);\n  return checksum == uVar2;\n}\n\n",
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080003ec",
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "imported": false,
            "current_name": "check_data_checksum_080003ec"
        },
        "FUN_08002896": {
            "renaming": {
                "FUN_08002896": "adjust_character_08002896",
                "param_1": "inputChar",
                "local_9": "resultChar"
            },
            "code": "\nchar adjustCharacter_08002896(char inputChar)\n\n{\n  char resultChar;\n  \n  resultChar = inputChar;\n  if (inputChar == '\\0') {\n    resultChar = '\\x12';\n  }\n  return resultChar + -1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002896",
            "calling": [
                "FUN_08002a94"
            ],
            "imported": false,
            "current_name": "adjust_character_08002896"
        },
        "FUN_0800a348": {
            "renaming": {
                "FUN_0800a348": "complex_calculation_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result1",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "masked_input2",
                "uVar5": "multiplied1",
                "uVar6": "multiplied2",
                "uVar7": "multiplied3",
                "lVar8": "long_result",
                "local_30": "local_result1",
                "uStack_2c": "local_result2",
                "local_28": "local_result3",
                "uStack_24": "local_result4"
            },
            "code": "\nundefined4 complex_calculation_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result1;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint masked_input2;\n  undefined8 multiplied1;\n  undefined8 multiplied2;\n  undefined8 multiplied3;\n  longlong long_result;\n  undefined4 local_result1;\n  undefined4 local_result2;\n  undefined4 local_result3;\n  undefined4 local_result4;\n  \n  masked_input2 = input2 & 0x7fffffff;\n  if (masked_input2 < 0x3e400000) {\n    result1 = calculate_result_08008ba0();\n    if (result1 == 0) {\n      return 0;\n    }\n    multiplied1 = calculate_double_multiplication_08008640(input1,input2,input1,input2);\n    temp2 = (undefined4)((ulonglong)multiplied1 >> 0x20);\n    temp1 = (undefined4)multiplied1;\n    multiplied2 = calculate_double_multiplication_08008640(temp1,temp2,DAT_0800a558,DAT_0800a55c);\n    multiplied2 = calculate_result_080082d4((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a560,DAT_0800a564);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = floating_point_operation_080082d0((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = calculate_result_080082d4((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a570,DAT_0800a574);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = floating_point_operation_080082d0((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = calculate_result_080082d4((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a580,DAT_0800a584);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n  }\n  else {\n    multiplied1 = calculate_double_multiplication_08008640(input1,input2,input1,input2);\n    temp2 = (undefined4)((ulonglong)multiplied1 >> 0x20);\n    temp1 = (undefined4)multiplied1;\n    multiplied2 = calculate_double_multiplication_08008640(temp1,temp2,DAT_0800a558,DAT_0800a55c);\n    multiplied2 = calculate_result_080082d4((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a560,DAT_0800a564);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = floating_point_operation_080082d0((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a568,DAT_0800a56c);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = calculate_result_080082d4((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a570,DAT_0800a574);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = floating_point_operation_080082d0((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a578,DAT_0800a57c);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    multiplied2 = calculate_result_080082d4((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),DAT_0800a580,DAT_0800a584);\n    multiplied2 = calculate_double_multiplication_08008640((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),temp1,temp2);\n    if (DAT_0800a590 < (int)masked_input2) {\n      if (DAT_0800a594 < (int)masked_input2) {\n        long_result = (ulonglong)DAT_0800a598 << 0x20;\n        result1 = DAT_0800a59c;\n      }\n      else {\n        long_result = floating_point_operation_080082d0(0,DAT_0800a58c,0,masked_input2 - 0x200000);\n        result1 = masked_input2 - 0x200000;\n      }\n      local_result4 = (undefined4)((ulonglong)long_result >> 0x20);\n      local_result3 = (undefined4)long_result;\n      multiplied1 = calculate_double_multiplication_08008640(temp1,temp2,0,DAT_0800a588);\n      multiplied1 = floating_point_operation_080082d0((int)multiplied1,(int)((ulonglong)multiplied1 >> 0x20),0,result1);\n      multiplied2 = calculate_double_multiplication_08008640(temp1,temp2,(int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20));\n      multiplied3 = calculate_double_multiplication_08008640(input1,input2,input3,input4);\n      multiplied2 = floating_point_operation_080082d0((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),(int)multiplied3,\n                           (int)((ulonglong)multiplied3 >> 0x20));\n      multiplied1 = floating_point_operation_080082d0((int)multiplied1,(int)((ulonglong)multiplied1 >> 0x20),(int)multiplied2,\n                           (int)((ulonglong)multiplied2 >> 0x20));\n      temp1 = floating_point_operation_080082d0(local_result3,local_result4,(int)multiplied1,(int)((ulonglong)multiplied1 >> 0x20));\n      return temp1;\n    }\n  }\n  local_result2 = (undefined4)((ulonglong)multiplied2 >> 0x20);\n  local_result1 = (undefined4)multiplied2;\n  temp1 = (undefined4)((ulonglong)multiplied1 >> 0x20);\n  multiplied2 = calculate_double_multiplication_08008640((int)multiplied1,temp1,0,DAT_0800a588);\n  multiplied1 = calculate_double_multiplication_08008640((int)multiplied1,temp1,local_result1,local_result2);\n  multiplied3 = calculate_double_multiplication_08008640(input1,input2,input3,input4);\n  multiplied1 = floating_point_operation_080082d0((int)multiplied1,(int)((ulonglong)multiplied1 >> 0x20),(int)multiplied3,\n                       (int)((ulonglong)multiplied3 >> 0x20));\n  multiplied1 = floating_point_operation_080082d0((int)multiplied2,(int)((ulonglong)multiplied2 >> 0x20),(int)multiplied1,\n                       (int)((ulonglong)multiplied1 >> 0x20));\n  temp1 = floating_point_operation_080082d0(0,DAT_0800a58c,(int)multiplied1,(int)((ulonglong)multiplied1 >> 0x20));\n  return temp1;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_080082d0",
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800a348",
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "imported": false,
            "current_name": "complex_calculation_0800a348"
        },
        "FUN_080001ac": {
            "renaming": {
                "FUN_080001ac": "combine_parameters_080001ac",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "code": "\nundefined8 combine_parameters_080001ac(undefined *first_param,undefined *second_param)\n\n{\n  if (DAT_080001bc != 0) {\n    first_param = PTR_FUN_080001c4;\n    second_param = PTR_DAT_080001c0;\n  }\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "called": [
                "FUN_0800b5b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001ac",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "combine_parameters_080001ac"
        },
        "FUN_08003740": {
            "renaming": {
                "FUN_08003740": "print_binary_representation_08003740",
                "param_1": "input_value"
            },
            "code": "\nvoid print_binary_representation_08003740(undefined input_value)\n\n{\n  print_binary_representation_08003740_080036f0(input_value,8);\n  return;\n}\n\n",
            "called": [
                "FUN_080036f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003740",
            "calling": [],
            "imported": false,
            "current_name": "print_binary_representation_08003740"
        },
        "FUN_08000478": {
            "renaming": {
                "FUN_08000478": "update_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "code": "\nvoid updateData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  PTR_DAT_080004a8[0x19] = data1;\n  PTR_DAT_080004a8[0x1a] = data2;\n  PTR_DAT_080004a8[0x1b] = data3;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000478",
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "update_data_08000478"
        },
        "FUN_08006d2e": {
            "renaming": {
                "FUN_08006d2e": "set_bit_in_char_08006d2e",
                "param_1": "inputChar"
            },
            "code": "\nvoid setBitInChar_08006d2e(char inputChar)\n\n{\n  set_bit_in_array_080069b4((int)inputChar);\n  return;\n}\n\n",
            "called": [
                "FUN_080069b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006d2e",
            "calling": [],
            "imported": false,
            "current_name": "set_bit_in_char_08006d2e"
        },
        "FUN_08007e1c": {
            "renaming": {
                "FUN_08007e1c": "write_data_08007e1c",
                "param_1": "data_byte"
            },
            "code": "\nvoid write_data_08007e1c(byte data_byte)\n\n{\n  do {\n  } while ((*DAT_08007e48 & 0x80) == 0);\n  DAT_08007e48[1] = (uint)data_byte;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e1c",
            "calling": [
                "FUN_08008250",
                "FUN_0800826a"
            ],
            "imported": false,
            "current_name": "write_data_08007e1c"
        },
        "FUN_0800adf0": {
            "renaming": {
                "FUN_0800adf0": "complex_calculation_0800adf0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "iVar1": "result1",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "temp_result",
                "uVar8": "temp_result2"
            },
            "code": "\nundefined4\ncomplex_calculation_0800adf0(undefined4 input1,uint input2,undefined4 input3,undefined4 input4,int flag)\n\n{\n  int result1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined8 temp_result;\n  undefined8 temp_result2;\n  \n  if (((input2 & 0x7fffffff) < 0x3e400000) && (result1 = calculate_result_08008ba0(), result1 == 0)) {\n    return input1;\n  }\n  temp_result = calculate_double_multiplication_08008640(input1,input2,input1);\n  var4 = (undefined4)((ulonglong)temp_result >> 0x20);\n  var3 = (undefined4)temp_result;\n  temp_result = calculate_double_multiplication_08008640(input1,input2,var3,var4);\n  var5 = (undefined4)((ulonglong)temp_result >> 0x20);\n  var2 = (undefined4)temp_result;\n  temp_result = calculate_double_multiplication_08008640(var3,var4,DAT_0800af40,DAT_0800af44);\n  temp_result = floating_point_operation_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),DAT_0800af48,DAT_0800af4c);\n  temp_result = calculate_double_multiplication_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var3,var4);\n  temp_result = calculate_result_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),DAT_0800af50,DAT_0800af54);\n  temp_result = calculate_double_multiplication_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var3,var4);\n  temp_result = floating_point_operation_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),DAT_0800af58,DAT_0800af5c);\n  temp_result = calculate_double_multiplication_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var3,var4);\n  temp_result = calculate_result_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),DAT_0800af60,DAT_0800af64);\n  var6 = (undefined4)((ulonglong)temp_result >> 0x20);\n  if (flag != 0) {\n    temp_result2 = calculate_double_multiplication_08008640(input3,input4,0,DAT_0800af70);\n    temp_result = calculate_double_multiplication_08008640(var2,var5,(int)temp_result,var6);\n    temp_result = floating_point_operation_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    temp_result = calculate_double_multiplication_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var3,var4);\n    temp_result = floating_point_operation_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),input3,input4);\n    temp_result2 = calculate_double_multiplication_08008640(var2,var5,DAT_0800af68,DAT_0800af6c);\n    temp_result = calculate_result_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                         (int)((ulonglong)temp_result2 >> 0x20));\n    var3 = floating_point_operation_080082d0(input1,input2,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    return var3;\n  }\n  temp_result = calculate_double_multiplication_08008640(var3,var4,(int)temp_result,var6);\n  temp_result = floating_point_operation_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),DAT_0800af68,DAT_0800af6c);\n  temp_result = calculate_double_multiplication_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var5);\n  var3 = calculate_result_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),input1,input2);\n  return var3;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_080082d0",
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800adf0",
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "imported": false,
            "current_name": "complex_calculation_0800adf0"
        },
        "FUN_08003a74": {
            "renaming": {
                "FUN_08003a74": "process_system_flags_08003a74",
                "bVar1": "systemFlags"
            },
            "code": "\nvoid process_system_flags_08003a74(void)\n\n{\n  byte systemFlags;\n  \n  if (PTR_DAT_08003b90[2] != '\\0') {\n    systemFlags = PTR_DAT_08003b90[2];\n    if ((systemFlags & 0x60) != 0) {\n      PTR_DAT_08003b90[1] = 6;\n      if ((systemFlags & 0x40) == 0) {\n        display_alarm_messages_08004148(0xfffffffe);\n      }\n      else {\n        display_alarm_messages_08004148(0xffffffff);\n        display_message_080041a0(1);\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xef;\n        do {\n        } while ((PTR_DAT_08003b90[2] & 0x10) == 0);\n      }\n      PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0x9f;\n    }\n    if ((systemFlags & 0x10) == 0) {\n      if ((systemFlags & 1) != 0) {\n        calculate_and_display_positions_08004940();\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfe;\n      }\n      if ((systemFlags & 8) != 0) {\n        update_state_0800587c();\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xf7;\n      }\n      if ((systemFlags & 4) != 0) {\n        update_data_state_080058a0();\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfb;\n      }\n      if ((systemFlags & 2) != 0) {\n        update_and_process_data_0800585c();\n        if ((PTR_DAT_08003b94[0x28] & 2) != 0) {\n          PTR_DAT_08003b90[0x10] = 1;\n        }\n        PTR_DAT_08003b90[2] = PTR_DAT_08003b90[2] & 0xfd;\n      }\n    }\n    else {\n      *PTR_DAT_08003b90 = 1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004940",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004148",
                "FUN_080058a0",
                "FUN_0800585c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a74",
            "calling": [
                "FUN_08001e98",
                "FUN_080024c4",
                "FUN_08003f34",
                "FUN_08001ddc",
                "FUN_08002408",
                "FUN_08002fd4"
            ],
            "imported": false,
            "current_name": "process_system_flags_08003a74"
        },
        "FUN_08005cec": {
            "renaming": {
                "FUN_08005cec": "process_data_08005cec",
                "param_1": "input_data",
                "iVar1": "current_time",
                "uVar2": "updated_time",
                "uVar3": "leading_zeroes1",
                "uVar4": "leading_zeroes2"
            },
            "code": "\nundefined4 process_data_08005cec(uint *input_data)\n\n{\n  int current_time;\n  uint updated_time;\n  uint leading_zeroes1;\n  uint leading_zeroes2;\n  \n  if ((*input_data & 1) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 4) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0x400000)))) {\n      if (((*DAT_08005fac & 0x20000) != 0) && (input_data[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      *DAT_08005fb0 = 0;\n      current_time = get_data_value_08005a84();\n      while ((*DAT_08005fac & 0x20000) != 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 5000U <= updated_time) {\n          return 3;\n        }\n      }\n      *DAT_08005fb0 = (char)input_data[1];\n      if (input_data[1] == 1) {\n        current_time = get_data_value_08005a84();\n        while ((*DAT_08005fac & 0x20000) == 0) {\n          updated_time = get_data_value_08005a84();\n          if (current_time + 5000U <= updated_time) {\n            return 3;\n          }\n        }\n      }\n      else {\n        current_time = get_data_value_08005a84();\n        while ((*DAT_08005fac & 0x20000) != 0) {\n          updated_time = get_data_value_08005a84();\n          if (current_time + 5000U <= updated_time) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*input_data & 2) != 0) {\n    if (((DAT_08005fac[2] & 0xc) == 0) ||\n       (((DAT_08005fac[2] & 0xc) == 8 && ((DAT_08005fac[1] & 0x400000) == 0)))) {\n      if (((*DAT_08005fac & 2) != 0) && (input_data[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (input_data[3] == 0) {\n      *DAT_08005fb4 = 0;\n      current_time = get_data_value_08005a84();\n      while ((*DAT_08005fac & 2) != 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb4 = 1;\n      current_time = get_data_value_08005a84();\n      while ((*DAT_08005fac & 2) == 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n      updated_time = count_leading_zeroes(0x1f000000);\n      *DAT_08005fac = input_data[4] << (updated_time & 0xff) | *DAT_08005fac & 0xffffff07;\n    }\n  }\n  if ((*input_data & 8) != 0) {\n    if (input_data[5] == 0) {\n      *DAT_08005fb8 = 0;\n      current_time = get_data_value_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) != 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08005fb8 = 1;\n      current_time = get_data_value_08005a84();\n      while ((DAT_08005fac[0x1d] & 2) == 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*input_data & 4) != 0) {\n    DAT_08005fac[0x10] = DAT_08005fac[0x10] | 0x10000000;\n    *DAT_08005fbc = *DAT_08005fbc | 0x100;\n    current_time = get_data_value_08005a84();\n    while ((*DAT_08005fbc & 0x100) == 0) {\n      updated_time = get_data_value_08005a84();\n      if (current_time + 100U <= updated_time) {\n        return 3;\n      }\n    }\n    *DAT_08005fc0 = 0;\n    current_time = get_data_value_08005a84();\n    while ((DAT_08006180[0x1c] & 2) != 0) {\n      updated_time = get_data_value_08005a84();\n      if (current_time + 5000U <= updated_time) {\n        return 3;\n      }\n    }\n    *DAT_08006184 = (char)input_data[2];\n    if (input_data[2] == 1) {\n      current_time = get_data_value_08005a84();\n      while ((DAT_08006180[0x1c] & 2) == 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 5000U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      current_time = get_data_value_08005a84();\n      while ((DAT_08006180[0x1c] & 2) != 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 5000U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (input_data[6] != 0) {\n    if ((DAT_08006180[2] & 0xc) == 8) {\n      return 1;\n    }\n    if (input_data[6] == 2) {\n      *DAT_08006188 = 0;\n      current_time = get_data_value_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n      updated_time = count_leading_zeroes(0x3fe0000);\n      leading_zeroes1 = count_leading_zeroes(0xc000);\n      leading_zeroes2 = count_leading_zeroes(0xf0);\n      DAT_08006180[1] =\n           input_data[0xb] << (leading_zeroes2 & 0xff) |\n           input_data[8] | input_data[9] << (updated_time & 0xff) | (input_data[10] >> 1) - 1 << (leading_zeroes1 & 0xff) |\n           input_data[7] | 0x20000000;\n      *DAT_08006188 = 1;\n      current_time = get_data_value_08005a84();\n      while ((*DAT_08006180 & 0x2000000) == 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      *DAT_08006188 = 0;\n      current_time = get_data_value_08005a84();\n      while ((*DAT_08006180 & 0x2000000) != 0) {\n        updated_time = get_data_value_08005a84();\n        if (current_time + 100U <= updated_time) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005cec",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "process_data_08005cec"
        },
        "FUN_08006b00": {
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "byteIndex",
                "param_2": "value"
            },
            "code": "\nvoid updateMemory_08006b00(byte byteIndex,uint value)\n\n{\n  if ((char)byteIndex < '\\0') {\n    *(char *)((byteIndex & 0xf) + DAT_08006b4c + 0x14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteIndex + DAT_08006b50 + 0x300) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006b00",
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "update_memory_08006b00"
        },
        "FUN_0800b4d0": {
            "renaming": {
                "FUN_0800b4d0": "execute_data_processing_0800b4d0"
            },
            "code": "\nvoid executeDataProcessing_0800b4d0(void)\n\n{\n  if (DAT_0800b4dc != 0) {\n    process_data_0800b524(0,PTR_LAB_0800b4f0_1_0800b4e0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800b524"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b4d0",
            "calling": [
                "FUN_0800b3e8"
            ],
            "imported": false,
            "current_name": "execute_data_processing_0800b4d0"
        },
        "FUN_08007f54": {
            "renaming": {
                "FUN_08007f54": "calculate_result_08007f54",
                "param_1": "input_value",
                "param_2": "multiplier",
                "lVar1": "intermediate_result",
                "iVar2": "temp_result1",
                "iVar3": "temp_result2",
                "uVar4": "calc_value"
            },
            "code": "\nvoid calculate_result_08007f54(int input_value,int multiplier)\n\n{\n  longlong intermediate_result;\n  int temp_result1;\n  int temp_result2;\n  undefined8 calc_value;\n  \n  if ((*(uint *)(input_value + 0xc) & 0x8000) == 0) {\n    if ((input_value != DAT_08008184) && (input_value != DAT_08008188)) {\n      calc_value = calculate_final_value_08006680();\n      intermediate_result = (ulonglong)DAT_0800818c *\n              ((ulonglong)(uint)((int)calc_value * 0x19) / (ulonglong)(uint)(multiplier << 2));\n      temp_result1 = calculate_final_value_08006680((int)calc_value,(int)((ulonglong)calc_value >> 0x20),(int)intermediate_result);\n      temp_result2 = calculate_final_value_08006680();\n      *(uint *)(input_value + 8) =\n           (uint)((ulonglong)intermediate_result >> 0x25) << 4 |\n           (uint)((ulonglong)DAT_0800818c *\n                  (ulonglong)\n                  (((uint)(temp_result1 * 0x19) / (uint)(multiplier << 2) +\n                   (uint)((ulonglong)DAT_0800818c *\n                          ((ulonglong)(uint)(temp_result2 * 0x19) / (ulonglong)(uint)(multiplier << 2)) >>\n                         0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf;\n      return;\n    }\n    calc_value = calculate_final_value_080066cc();\n    intermediate_result = (ulonglong)DAT_0800818c *\n            ((ulonglong)(uint)((int)calc_value * 0x19) / (ulonglong)(uint)(multiplier << 2));\n    temp_result1 = calculate_final_value_080066cc((int)calc_value,(int)((ulonglong)calc_value >> 0x20),(int)intermediate_result);\n    temp_result2 = calculate_final_value_080066cc();\n    *(uint *)(input_value + 8) =\n         (uint)((ulonglong)intermediate_result >> 0x25) << 4 |\n         (uint)((ulonglong)DAT_0800818c *\n                (ulonglong)\n                (((uint)(temp_result1 * 0x19) / (uint)(multiplier << 2) +\n                 (uint)((ulonglong)DAT_0800818c *\n                        ((ulonglong)(uint)(temp_result2 * 0x19) / (ulonglong)(uint)(multiplier << 2)) >> 0x25)\n                 * -100) * 0x10 + 0x32) >> 0x25) & 0xf;\n  }\n  else {\n    if ((input_value != DAT_08008184) && (input_value != DAT_08008188)) {\n      calc_value = calculate_final_value_08006680();\n      intermediate_result = (ulonglong)DAT_0800818c *\n              ((ulonglong)(uint)((int)calc_value * 0x19) / (ulonglong)(uint)(multiplier << 1));\n      temp_result1 = calculate_final_value_08006680((int)calc_value,(int)((ulonglong)calc_value >> 0x20),(int)intermediate_result);\n      temp_result2 = calculate_final_value_08006680();\n      *(uint *)(input_value + 8) =\n           (uint)((ulonglong)intermediate_result >> 0x25) << 4 |\n           (uint)((ulonglong)DAT_0800818c *\n                  (ulonglong)\n                  (((uint)(temp_result1 * 0x19) / (uint)(multiplier << 1) +\n                   (uint)((ulonglong)DAT_0800818c *\n                          ((ulonglong)(uint)(temp_result2 * 0x19) / (ulonglong)(uint)(multiplier << 1)) >>\n                         0x25) * -100) * 0x10 + 0x32) >> 0x25) & 0xf;\n      return;\n    }\n    calc_value = calculate_final_value_080066cc();\n    intermediate_result = (ulonglong)DAT_0800818c *\n            ((ulonglong)(uint)((int)calc_value * 0x19) / (ulonglong)(uint)(multiplier << 1));\n    temp_result1 = calculate_final_value_080066cc((int)calc_value,(int)((ulonglong)calc_value >> 0x20),(int)intermediate_result);\n    temp_result2 = calculate_final_value_080066cc();\n    *(uint *)(input_value + 8) =\n         (uint)((ulonglong)intermediate_result >> 0x25) << 4 |\n         (uint)((ulonglong)DAT_0800818c *\n                (ulonglong)\n                (((uint)(temp_result1 * 0x19) / (uint)(multiplier << 1) +\n                 (uint)((ulonglong)DAT_0800818c *\n                        ((ulonglong)(uint)(temp_result2 * 0x19) / (ulonglong)(uint)(multiplier << 1)) >> 0x25)\n                 * -100) * 0x10 + 0x32) >> 0x25) & 0xf;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007f54",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "calculate_result_08007f54"
        },
        "FUN_08003b98": {
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "bVar1": "current_char",
                "iVar2": "result",
                "uVar3": "processed_value",
                "uVar4": "return_code",
                "uVar5": "transformed_value",
                "local_14": "value_1",
                "local_10": "command_code",
                "local_a": "command_index",
                "local_9": "is_nested_command"
            },
            "code": "\nuint process_command_08003b98(char *command)\n\n{\n  byte current_char;\n  int result;\n  undefined4 processed_value;\n  uint return_code;\n  undefined8 transformed_value;\n  undefined4 value_1;\n  undefined4 command_code;\n  byte command_index;\n  byte is_nested_command;\n  \n  if (*command != '$') {\n    return_code = process_code_sequence_080005b4(command);\n    return return_code;\n  }\n  command_index = 1;\n  is_nested_command = '\\0';\n  current_char = command[1];\n  if (current_char == 0) {\n    display_grbl_settings_0800423c();\n    return 0;\n  }\n  if ((0x58 < current_char) || (current_char < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(current_char) {\n  case 0x23:\n    command_index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    process_and_display_data_080044e8();\n    break;\n  case 0x24:\n    command_index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_machine_settings_08004250();\n    break;\n  case 0x43:\n    command_index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (PTR_DAT_08003f2c[1] == '\\a') {\n      update_control_registers_080025e8();\n      display_message_080041a0(5);\n    }\n    else {\n      if (PTR_DAT_08003f2c[1] != '\\0') {\n        return 0xb;\n      }\n      PTR_DAT_08003f2c[1] = 7;\n      display_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    command_index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    display_information_080046d0();\n    break;\n  case 0x48:\n    if ((PTR_DAT_08003f30[0x28] & 0x10) == 0) {\n      return 7;\n    }\n    if ((PTR_DAT_08003f2c[1] != '\\0') && (PTR_DAT_08003f2c[1] != '\\x06')) {\n      return 0xb;\n    }\n    process_system_state_080024c4();\n    if (*PTR_DAT_08003f2c == '\\0') {\n      process_data_sequence_080039bc();\n    }\n    break;\n  case 0x4e:\n    command_index = 2;\n    if (command[2] == '\\0') {\n      for (is_nested_command = 0; is_nested_command < 2; is_nested_command = is_nested_command + 1) {\n        result = validate_and_process_data_08004d2c(is_nested_command,command);\n        if (result == 0) {\n          display_error_message_08004030(10);\n        }\n        else {\n          print_formatted_data_08004900(is_nested_command,command);\n        }\n      }\n      return 0;\n    }\n    is_nested_command = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = process_input_string_08002638(command,&command_index,&command_code);\n    if (result == 0) {\n      return 1;\n    }\n    current_char = command_index + 1;\n    if (command[command_index] != '=') {\n      return 3;\n    }\n    command_index = current_char;\n    if (is_nested_command == '\\0') {\n      result = process_input_string_08002638(command,&command_index,&value_1);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[command_index] == '\\0') {\n        processed_value = process_value_08009278(command_code);\n        return_code = process_parameters_08004e30(processed_value,value_1);\n        return return_code;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)command_index - (uint)current_char] = command[command_index];\n      return_code = (uint)command_index;\n      command_index = command_index + 1;\n    } while (command[return_code] != '\\0');\n    is_nested_command = current_char;\n    is_nested_command = process_code_sequence_080005b4(command);\n    if (is_nested_command != 0) {\n      return (uint)is_nested_command;\n    }\n    transformed_value = calculate_transformed_value_08008590(command_code);\n    transformed_value = process_numbers_08009798((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    is_nested_command = calculate_result_08008bf0((int)transformed_value,(int)((ulonglong)transformed_value >> 0x20));\n    process_data_wrapper_08004bc0(is_nested_command,command);\n    break;\n  case 0x58:\n    command_index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (PTR_DAT_08003f2c[1] == '\\x06') {\n      display_message_080041a0(3);\n      PTR_DAT_08003f2c[1] = 0;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_08009798",
                "FUN_080024c4",
                "FUN_080039bc",
                "FUN_080044e8",
                "FUN_08004d2c",
                "FUN_08009278",
                "FUN_0800423c",
                "FUN_08004900",
                "FUN_08008590",
                "FUN_08002638",
                "FUN_080005b4",
                "FUN_08004bc0",
                "FUN_08004e30",
                "FUN_080041a0",
                "FUN_080025e8",
                "FUN_08008bf0",
                "FUN_08004030",
                "FUN_08004250",
                "FUN_080046d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003b98",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "process_command_08003b98"
        },
        "FUN_080024c4": {
            "renaming": {
                "FUN_080024c4": "process_system_state_080024c4",
                "uVar1": "floatVal1",
                "uVar2": "floatVal2",
                "uVar3": "floatVal3",
                "local_13": "flagZ",
                "local_12": "flagY",
                "local_11": "flagX"
            },
            "code": "\nvoid processSystemState_080024c4(void)\n\n{\n  undefined4 floatVal1;\n  undefined4 floatVal2;\n  undefined4 floatVal3;\n  char flagZ;\n  char flagY;\n  char flagX;\n  \n  PTR_DAT_080025d8[1] = 5;\n  *(undefined4 *)PTR_DAT_080025dc = 0;\n  execute_data_processing_08001d4c();\n  process_system_flags_08003a74();\n  if (*PTR_DAT_080025d8 == '\\0') {\n    set_memory_0800b430(PTR_DAT_080025e0,0,0xc);\n    process_coordinates_0800283a();\n    PTR_DAT_080025d8[1] = 0;\n    if ((*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x20) == 0) {\n      flagX = -1;\n    }\n    else {\n      flagX = '\\x01';\n    }\n    if ((*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x80) == 0) {\n      flagY = -1;\n    }\n    else {\n      flagY = '\\x01';\n    }\n    if ((*(ushort *)(PTR_DAT_080025e4 + 0x2a) & 0x200) == 0) {\n      flagZ = -1;\n    }\n    else {\n      flagZ = '\\x01';\n    }\n    floatVal1 = calculate_float_representation_08008e44((int)flagX);\n    floatVal1 = floating_point_multiplication_08008eec(floatVal1,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\n    floatVal2 = calculate_float_representation_08008e44((int)flagY);\n    floatVal2 = floating_point_multiplication_08008eec(floatVal2,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\n    floatVal3 = calculate_float_representation_08008e44((int)flagZ);\n    floatVal3 = floating_point_multiplication_08008eec(floatVal3,*(undefined4 *)(PTR_DAT_080025e4 + 0x38));\n    process_input_and_update_08001e98(floatVal1,floatVal2,floatVal3,*(undefined4 *)(PTR_DAT_080025e4 + 0x30),0);\n    update_and_process_data_0800585c();\n    process_buffer_08002fd4();\n    process_coordinates_0800283a();\n    if ((PTR_DAT_080025e4[0x28] & 8) != 0) {\n      *(undefined4 *)PTR_DAT_080025dc = 1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008e44",
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_08008eec",
                "FUN_08002fd4",
                "FUN_0800b430",
                "FUN_0800283a",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080024c4",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_system_state_080024c4"
        },
        "FUN_08002f40": {
            "renaming": {
                "FUN_08002f40": "update_pointer_08002f40",
                "uVar1": "updatedValue"
            },
            "code": "\nvoid updatePointer_08002f40(void)\n\n{\n  undefined updatedValue;\n  \n  if (*PTR_DAT_08002f6c != *PTR_DAT_08002f70) {\n    updatedValue = increment_and_wrap_08002870(*PTR_DAT_08002f70);\n    *PTR_DAT_08002f70 = updatedValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002870"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002f40",
            "calling": [
                "FUN_080053a0"
            ],
            "imported": false,
            "current_name": "update_pointer_08002f40"
        },
        "FUN_08009054": {
            "renaming": {
                "FUN_08009054": "floating_point_division_08009054",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "unused_param",
                "param_4": "numerator_exp",
                "uVar1": "denominator_shifted",
                "uVar2": "numerator_exp_temp",
                "iVar3": "exp_diff",
                "uVar4": "numerator_shift",
                "iVar5": "exp_sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "code": "\nuint floatingPointDivision_08009054(uint numerator,uint denominator,undefined4 unused_param,uint numerator_exp)\n\n{\n  uint denominator_shifted;\n  uint numerator_exp_temp;\n  int exp_diff;\n  uint numerator_shift;\n  int exp_sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  numerator_exp_temp = numerator >> 0x17 & 0xff;\n  condition1 = numerator_exp_temp == 0;\n  if (!condition1) {\n    numerator_exp = denominator >> 0x17 & 0xff;\n    condition1 = numerator_exp == 0;\n  }\n  if (!condition1) {\n    condition1 = numerator_exp_temp == 0xff;\n  }\n  if (!condition1) {\n    condition1 = numerator_exp == 0xff;\n  }\n  if (condition1) {\n    numerator_exp = denominator >> 0x17 & 0xff;\n    result = numerator;\n    if (numerator_exp_temp == 0xff) {\n      if (((numerator & 0x7fffff) != 0) || (result = denominator, numerator_exp == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (numerator_exp == 0xff) {\n        result = denominator;\n        if ((denominator & 0x7fffff) == 0) {\nLAB_08009000:\n          return (numerator ^ denominator) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      condition1 = (numerator & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (denominator & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = numerator_exp_temp == 0;\n        result = numerator & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            numerator = numerator << 1;\n            condition1 = (numerator & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          numerator_exp_temp = numerator_exp_temp - 1;\n        }\n        numerator = numerator | result;\n        condition1 = numerator_exp == 0;\n        result = denominator & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            denominator = denominator << 1;\n            condition1 = (denominator & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          numerator_exp = numerator_exp - 1;\n        }\n        denominator = denominator | result;\n        goto LAB_0800906c;\n      }\n      if ((numerator & 0x7fffffff) == 0) {\n        if ((denominator & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    numerator = numerator ^ denominator;\n  }\n  else {\nLAB_0800906c:\n    exp_diff = numerator_exp_temp - numerator_exp;\n    if (denominator << 9 == 0) {\n      numerator = (numerator ^ denominator) & 0x80000000 | numerator & 0x7fffff;\n      condition3 = SCARRY4(exp_diff,0x7f);\n      exp_sum = exp_diff + 0x7f;\n      condition1 = exp_sum < 0;\n      condition2 = exp_sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,exp_sum);\n        condition1 = 0xff - exp_sum < 0;\n        condition2 = exp_sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        numerator = numerator | exp_sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return numerator;\n      }\n      numerator = numerator | 0x800000;\n      numerator_exp_temp = 0;\n      condition2 = SBORROW4(exp_sum,1);\n      numerator_shift = exp_diff + 0x7e;\n      condition1 = numerator_shift == 0;\n      result = numerator_shift;\n    }\n    else {\n      denominator_shifted = (denominator << 9) >> 4 | 0x10000000;\n      numerator_exp_temp = (numerator << 9) >> 4 | 0x10000000;\n      numerator = (numerator ^ denominator) & 0x80000000;\n      condition1 = denominator_shifted <= numerator_exp_temp;\n      if (!condition1) {\n        numerator_exp_temp = numerator_exp_temp << 1;\n      }\n      numerator_shift = exp_diff + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (denominator_shifted <= numerator_exp_temp) {\n          numerator_exp_temp = numerator_exp_temp - denominator_shifted;\n          numerator = numerator | result;\n        }\n        condition1 = denominator_shifted >> 1 <= numerator_exp_temp;\n        if (condition1) {\n          numerator_exp_temp = numerator_exp_temp - (denominator_shifted >> 1);\n        }\n        if (condition1) {\n          numerator = numerator | result >> 1;\n        }\n        condition1 = denominator_shifted >> 2 <= numerator_exp_temp;\n        if (condition1) {\n          numerator_exp_temp = numerator_exp_temp - (denominator_shifted >> 2);\n        }\n        if (condition1) {\n          numerator = numerator | result >> 2;\n        }\n        condition1 = denominator_shifted >> 3 <= numerator_exp_temp;\n        if (condition1) {\n          numerator_exp_temp = numerator_exp_temp - (denominator_shifted >> 3);\n        }\n        if (condition1) {\n          numerator = numerator | result >> 3;\n        }\n        numerator_exp_temp = numerator_exp_temp * 0x10;\n        condition1 = numerator_exp_temp == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(numerator_shift,0xfd);\n      condition1 = numerator_shift == 0xfd;\n      result = numerator_shift - 0xfd;\n      if (numerator_shift < 0xfe) {\n        numerator = numerator + numerator_shift * 0x800000 + (uint)(denominator_shifted <= numerator_exp_temp);\n        if (numerator_exp_temp - denominator_shifted == 0) {\n          numerator = numerator & 0xfffffffe;\n        }\n        return numerator;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(numerator_shift + 0x19) < 0;\n      if (numerator_shift == 0xffffffe7 || condition1 != SCARRY4(numerator_shift,0x19)) {\n        numerator = numerator & 0x80000000;\n      }\n      if (numerator_shift == 0xffffffe7 || condition1 != SCARRY4(numerator_shift,0x19)) {\n        return numerator;\n      }\n      result = (numerator << 1) >> (-numerator_shift & 0xff);\n      numerator_shift = numerator << (numerator_shift + 0x20 & 0xff);\n      result = ((uint)((numerator & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((numerator_exp_temp | numerator_shift << 1) == 0) {\n        result = result & ~(numerator_shift >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return numerator & 0x80000000 | 0x7f800000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009054",
            "calling": [
                "FUN_08004940",
                "FUN_08003618",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080028bc",
                "FUN_08001f00",
                "FUN_08002908"
            ],
            "imported": false,
            "current_name": "floating_point_division_08009054"
        },
        "FUN_080025e8": {
            "renaming": {
                "FUN_080025e8": "update_control_registers_080025e8",
                "call_do_nothing_function_08005250": "doNothingFunction",
                "execute_two_operations_08000210": "executeOperations",
                "check_and_reset_control_registers_080057e4": "resetControlRegisters"
            },
            "code": "\nvoid updateControlRegisters_080025e8(void)\n\n{\n  if ((PTR_DAT_08002634[2] & 0x10) == 0) {\n    PTR_DAT_08002634[2] = PTR_DAT_08002634[2] | 0x10;\n    doNothingFunction();\n    executeOperations();\n    if ((byte)PTR_DAT_08002634[1] - 3 < 3) {\n      PTR_DAT_08002634[2] = PTR_DAT_08002634[2] | 0x20;\n      resetControlRegisters();\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080057e4",
                "FUN_08000210",
                "FUN_08005250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080025e8",
            "calling": [
                "FUN_08005900",
                "FUN_0800195c",
                "FUN_08003b98",
                "FUN_08003a18",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "update_control_registers_080025e8"
        },
        "FUN_080001c8": {
            "renaming": {
                "FUN_080001c8": "do_nothing_080001c8"
            },
            "code": "\nvoid do_nothing_080001c8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001c8",
            "calling": [
                "FUN_08000220"
            ],
            "imported": false,
            "current_name": "do_nothing_080001c8"
        },
        "FUN_08005250": {
            "renaming": {
                "FUN_08005250": "call_do_nothing_function_08005250"
            },
            "code": "\nvoid callDoNothingFunction_08005250(void)\n\n{\n  do_nothing_08005214();\n  return;\n}\n\n",
            "called": [
                "FUN_08005214"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005250",
            "calling": [
                "FUN_080025e8",
                "FUN_08005238",
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "call_do_nothing_function_08005250"
        },
        "FUN_08007430": {
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007430",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "infinite_loop_08007430"
        },
        "FUN_08008640": {
            "renaming": {
                "FUN_08008640": "calculate_double_multiplication_08008640",
                "param_1": "value1_low",
                "param_2": "value1_high",
                "param_3": "value2_low",
                "param_4": "value2_high",
                "uVar1": "temp_product",
                "lVar2": "long_product",
                "uVar3": "temp_val1",
                "uVar4": "temp_val2",
                "iVar5": "exponent_sum",
                "uVar6": "adjusted_exponent",
                "unaff_r5": "value2_exponent",
                "uVar7": "mask",
                "uVar8": "temp_val3",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "result"
            },
            "code": "\nulonglong calculate_double_multiplication_08008640(undefined4 value1_low,uint value1_high,uint value2_low,uint value2_high)\n\n{\n  ulonglong temp_product;\n  longlong long_product;\n  uint temp_val1;\n  uint temp_val2;\n  int exponent_sum;\n  uint adjusted_exponent;\n  uint value2_exponent;\n  uint mask;\n  uint temp_val3;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong result;\n  \n  result = CONCAT44(value1_high,value1_low);\n  mask = 0x7ff;\n  temp_val2 = value1_high >> 0x14 & 0x7ff;\n  condition1 = temp_val2 == 0;\n  if (!condition1) {\n    value2_exponent = value2_high >> 0x14 & 0x7ff;\n    condition1 = value2_exponent == 0;\n  }\n  if (!condition1) {\n    condition1 = temp_val2 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = value2_exponent == 0x7ff;\n  }\n  if (condition1) {\n    result = calculate_result_0800881c();\n  }\n  temp_val1 = (uint)(result >> 0x20);\n  exponent_sum = temp_val2 + value2_exponent;\n  temp_val2 = temp_val1 ^ value2_high;\n  temp_val1 = temp_val1 & ~(mask << 0x15);\n  value2_high = value2_high & ~(mask << 0x15);\n  condition1 = ((uint)result | temp_val1 << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (value2_low | value2_high << 0xc) == 0;\n  }\n  temp_val1 = temp_val1 | 0x100000;\n  value2_high = value2_high | 0x100000;\n  if (condition1) {\n    value2_low = (uint)result | value2_low;\n    value2_high = (temp_val2 & 0x80000000 | temp_val1) ^ value2_high;\n    temp_val2 = mask >> 1;\n    condition3 = SBORROW4(exponent_sum,temp_val2);\n    adjusted_exponent = exponent_sum - temp_val2;\n    condition1 = adjusted_exponent == 0;\n    temp_val1 = adjusted_exponent;\n    if (!condition1 && (int)temp_val2 <= exponent_sum) {\n      condition3 = SBORROW4(mask,adjusted_exponent);\n      temp_val1 = mask - adjusted_exponent;\n      condition1 = mask == adjusted_exponent;\n    }\n    if (!condition1 && (int)temp_val1 < 0 == condition3) {\n      value2_high = value2_high | adjusted_exponent * 0x100000;\n    }\n    if (!condition1 && (int)temp_val1 < 0 == condition3) {\n      return CONCAT44(value2_high,value2_low);\n    }\n    value2_high = value2_high | 0x100000;\n    mask = 0;\n    condition3 = SBORROW4(adjusted_exponent,1);\n    adjusted_exponent = adjusted_exponent - 1;\n    condition1 = adjusted_exponent == 0;\n    temp_val2 = adjusted_exponent;\n  }\n  else {\n    temp_product = (result & 0xffffffff) * (ulonglong)value2_low;\n    result = (result & 0xffffffff) * (ulonglong)value2_high +\n             (ulonglong)temp_val1 * (ulonglong)value2_low + (temp_product >> 0x20);\n    temp_val3 = (uint)result;\n    long_product = (ulonglong)temp_val1 * (ulonglong)value2_high + (result >> 0x20);\n    mask = (uint)long_product;\n    temp_val1 = (uint)((ulonglong)long_product >> 0x20);\n    if ((int)temp_product != 0) {\n      temp_val3 = temp_val3 | 1;\n    }\n    adjusted_exponent = (exponent_sum + -0x3ff) - (uint)(temp_val1 < 0x200);\n    if (temp_val1 < 0x200) {\n      condition1 = (temp_val3 & 0x80000000) != 0;\n      temp_val3 = temp_val3 << 1;\n      long_product = CONCAT44(temp_val1 * 2 + (uint)(CARRY4(mask,mask) || CARRY4(mask * 2,(uint)condition1)),\n                       mask * 2 + (uint)condition1);\n    }\n    value2_high = temp_val2 & 0x80000000 | (int)((ulonglong)long_product >> 0x20) << 0xb | (uint)long_product >> 0x15;\n    value2_low = (uint)long_product << 0xb | temp_val3 >> 0x15;\n    mask = temp_val3 * 0x800;\n    condition2 = 0xfc < adjusted_exponent;\n    condition3 = SBORROW4(adjusted_exponent,0xfd);\n    temp_val1 = adjusted_exponent - 0xfd;\n    condition1 = temp_val1 == 0;\n    temp_val2 = temp_val1;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < temp_val1;\n      condition3 = SBORROW4(temp_val1,0x700);\n      temp_val2 = adjusted_exponent - 0x7fd;\n      condition1 = temp_val1 == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < mask;\n      if (mask == 0x80000000) {\n        condition1 = (temp_val3 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(value2_high + adjusted_exponent * 0x100000 + (uint)CARRY4(value2_low,(uint)condition1),value2_low + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)temp_val2 < 0 == condition3) {\n    return (ulonglong)(value2_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(adjusted_exponent,0x36);\n  condition1 = (int)(adjusted_exponent + 0x36) < 0;\n  condition3 = adjusted_exponent == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    value2_low = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    value2_high = value2_high & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(value2_high,value2_low);\n  }\n  temp_val2 = -adjusted_exponent;\n  temp_val1 = temp_val2 - 0x20;\n  if (0x1f < (int)temp_val2) {\n    adjusted_exponent = value2_low >> (temp_val1 & 0xff) | value2_high << (0x20 - temp_val1 & 0xff);\n    temp_val2 = (value2_high >> (temp_val1 & 0xff) & ~((value2_high & 0x80000000) >> (temp_val1 & 0xff))) -\n            ((int)adjusted_exponent >> 0x1f);\n    if ((mask | value2_low << (0x20 - temp_val1 & 0xff) | adjusted_exponent << 1) == 0) {\n      temp_val2 = temp_val2 & ~(adjusted_exponent >> 0x1f);\n    }\n    return CONCAT44(value2_high,temp_val2) & 0x80000000ffffffff;\n  }\n  exponent_sum = temp_val2 - 0x14;\n  if (exponent_sum == 0 || exponent_sum < 0 != SCARRY4(temp_val1,0xc)) {\n    temp_val3 = value2_low << (adjusted_exponent + 0x20 & 0xff);\n    temp_val1 = value2_low >> (temp_val2 & 0xff) | value2_high << (adjusted_exponent + 0x20 & 0xff);\n    adjusted_exponent = temp_val1 + -((int)temp_val3 >> 0x1f);\n    if ((mask | temp_val3 << 1) == 0) {\n      adjusted_exponent = adjusted_exponent & ~(temp_val3 >> 0x1f);\n    }\n    return CONCAT44((value2_high & 0x80000000) +\n                    ((value2_high & 0x7fffffff) >> (temp_val2 & 0xff)) +\n                    (uint)CARRY4(temp_val1,-((int)temp_val3 >> 0x1f)),adjusted_exponent);\n  }\n  temp_val2 = 0xc - exponent_sum;\n  adjusted_exponent = value2_low << (temp_val2 & 0xff);\n  temp_val2 = value2_low >> (0x20 - temp_val2 & 0xff) | value2_high << (temp_val2 & 0xff);\n  temp_val1 = temp_val2 + -((int)adjusted_exponent >> 0x1f);\n  if ((mask | adjusted_exponent << 1) == 0) {\n    temp_val1 = temp_val1 & ~(adjusted_exponent >> 0x1f);\n  }\n  return CONCAT44((value2_high & 0x80000000) + (uint)CARRY4(temp_val2,-((int)adjusted_exponent >> 0x1f)),temp_val1);\n}\n\n",
            "called": [
                "FUN_0800881c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008640",
            "calling": [
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_0800a1bc",
                "FUN_080044e8",
                "FUN_08002638",
                "FUN_08002c18",
                "FUN_08004940",
                "FUN_0800adf0",
                "FUN_0800b2e8",
                "FUN_08009b24",
                "FUN_0800a5a0",
                "FUN_080046d0",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_0800056c",
                "FUN_0800a348"
            ],
            "imported": false,
            "current_name": "calculate_double_multiplication_08008640"
        },
        "FUN_08007436": {
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "iVar1": "result",
                "local_4c": "param1",
                "local_48": "param2",
                "local_34": "param3",
                "local_30": "param4",
                "local_2c": "param5",
                "local_28": "param6",
                "local_24": "param7",
                "local_20": "param8",
                "local_1c": "param9",
                "local_18": "param10",
                "local_14": "param11",
                "local_10": "param12",
                "local_c": "param13"
            },
            "code": "\nvoid initialize_system_08007436(void)\n\n{\n  int result;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  undefined4 param9;\n  undefined4 param10;\n  undefined4 param11;\n  undefined4 param12;\n  undefined4 param13;\n  \n  *(uint *)(DAT_080074c0 + 0x40) = *(uint *)(DAT_080074c0 + 0x40) | 0x10000000;\n  *DAT_080074c4 = *DAT_080074c4 | 0xc000;\n  param1 = 1;\n  param2 = 1;\n  param3 = 2;\n  param4 = 0x400000;\n  param5 = 8;\n  param6 = 0x150;\n  param7 = 2;\n  param8 = 7;\n  result = process_data_08005cec(&param1);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  param9 = 0xf;\n  param10 = 2;\n  param11 = 0;\n  param12 = 0x1400;\n  param13 = 0x1000;\n  result = configure_and_update_settings_0800618c(&param9,5);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007430",
                "FUN_0800618c",
                "FUN_08005cec"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007436",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_system_08007436"
        },
        "FUN_08005814": {
            "renaming": {
                "FUN_08005814": "initialize_memory_and_min_value_08005814",
                "set_memory_0800b430": "initialize_memory",
                "calculate_and_update_min_value_08005324": "update_min_value"
            },
            "code": "\nvoid initialize_memory_and_min_value_08005814(void)\n\n{\n  initialize_memory(PTR_DAT_08005834,0,0x24);\n  update_min_value(800);\n  *(undefined4 *)PTR_DAT_08005838 = 0;\n  return;\n}\n\n",
            "called": [
                "FUN_08005324",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005814",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_memory_and_min_value_08005814"
        },
        "FUN_08005bdc": {
            "renaming": {
                "FUN_08005bdc": "update_memory_08005bdc",
                "param_1": "byteValue",
                "param_2": "uintValue"
            },
            "code": "\nvoid updateMemory_08005bdc(byte byteValue,uint uintValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + DAT_08005c28 + 0x14) = (char)((uintValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + DAT_08005c2c + 0x300) = (char)((uintValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005bdc",
            "calling": [
                "FUN_08005c30"
            ],
            "imported": false,
            "current_name": "update_memory_08005bdc"
        },
        "FUN_080002f0": {
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0",
                "set_memory_0800b430": "setMemory"
            },
            "code": "\nvoid initializeMemory_080002f0(void)\n\n{\n  setMemory(PTR_DAT_08000308,0xff,4);\n  *(undefined4 *)PTR_DAT_0800030c = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002f0",
            "calling": [
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340",
                "FUN_080003ec"
            ],
            "imported": false,
            "current_name": "initialize_memory_080002f0"
        },
        "FUN_080073c0": {
            "renaming": {
                "FUN_080073c0": "do_nothing_080073c0"
            },
            "code": "\nvoid do_nothing_080073c0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080073c0",
            "calling": [
                "FUN_0800738e"
            ],
            "imported": false,
            "current_name": "do_nothing_080073c0"
        },
        "FUN_0800778c": {
            "renaming": {
                "FUN_0800778c": "update_configurations_and_memory_0800778c",
                "local_24": "bitmask",
                "local_20": "config_param_1",
                "local_1c": "config_param_2",
                "local_18": "config_param_3",
                "local_14": "config_param_4",
                "local_10": "config_ptr",
                "local_c": "config_index"
            },
            "code": "\nvoid update_configurations_and_memory_0800778c(void)\n\n{\n  int bitmask;\n  uint config_param_1;\n  uint config_param_2;\n  uint config_param_3;\n  uint config_param_4;\n  uint *config_ptr;\n  uint config_index;\n  \n  for (config_index = 0; config_index < 0x11; config_index = config_index + 1) {\n    config_ptr = (uint *)(PTR_DAT_0800784c + config_index * 0x18);\n    *(uint *)(DAT_08007850 + 0x30) = *(uint *)(DAT_08007850 + 0x30) | 1 << (*config_ptr >> 4 & 0xff);\n    bitmask = 1 << (*config_ptr & 0xf);\n    config_param_1 = config_ptr[1];\n    config_param_2 = config_ptr[2];\n    config_param_3 = config_ptr[3];\n    config_param_4 = config_ptr[4];\n    update_configuration_08006e88(((*config_ptr >> 4) + 0x100080) * 0x400,&bitmask);\n    if (-1 < (int)config_ptr[5]) {\n      update_memory_address_0800733e(((*config_ptr >> 4) + 0x100080) * 0x400,1 << (*config_ptr & 0xf) & 0xffff,\n                   config_ptr[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800778c",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "update_configurations_and_memory_0800778c"
        },
        "FUN_080001d4": {
            "renaming": {
                "FUN_080001d4": "do_nothing_080001d4"
            },
            "code": "\nvoid do_nothing_080001d4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080001d4",
            "calling": [
                "FUN_08000210"
            ],
            "imported": false,
            "current_name": "do_nothing_080001d4"
        },
        "FUN_08001ddc": {
            "renaming": {
                "FUN_08001ddc": "main_program_loop_08001ddc",
                "do_nothing_08008244": "perform_initialization",
                "process_data_and_settings_080051b4": "load_data_and_settings",
                "execute_operations_0800583c": "execute_initial_operations",
                "set_memory_0800b430": "initialize_memory",
                "do_nothing_080082ba": "perform_preparation",
                "initialize_data_memory_08002f24": "initialize_data_structure",
                "initialize_and_process_data_080004ac": "load_and_process_data",
                "initialize_system_080039a0": "setup_system",
                "reset_and_call_08005238": "reset_and_invoke",
                "initialize_and_execute_operations_080001f8": "initialize_and_run_operations",
                "update_flag_value_0800192c": "update_system_flags",
                "initialize_memory_and_min_value_08005814": "init_memory_and_minimum_value",
                "process_coordinates_0800283a": "process_coordinate_data",
                "process_system_flags_08003a74": "handle_system_flags",
                "process_input_sequence_08003f34": "process_input_data",
                "display_message_080041a0": "show_message",
                "process_data_sequence_080039bc": "process_data_flow"
            },
            "code": "\nvoid main_program_loop_08001ddc(void)\n\n{\n  perform_initialization();\n  load_data_and_settings();\n  execute_initial_operations();\n  initialize_memory(PTR_DAT_08001e90,0,0x14);\n  *PTR_DAT_08001e90 = 1;\n  PTR_DAT_08001e90[1] = 1;\n  do {\n    if (*PTR_DAT_08001e90 != '\\0') {\n      perform_preparation();\n      initialize_data_structure();\n      load_and_process_data();\n      setup_system();\n      reset_and_invoke();\n      initialize_and_run_operations();\n      update_system_flags();\n      init_memory_and_minimum_value();\n      process_coordinate_data();\n      *PTR_DAT_08001e90 = 0;\n      PTR_DAT_08001e90[2] = 0;\n      if ((PTR_DAT_08001e94[0x28] & 2) != 0) {\n        PTR_DAT_08001e90[0x10] = 1;\n      }\n      if ((PTR_DAT_08001e90[1] == '\\x01') && ((PTR_DAT_08001e94[0x28] & 0x10) != 0)) {\n        PTR_DAT_08001e90[1] = 6;\n      }\n      if (PTR_DAT_08001e90[1] == '\\x06') {\n        show_message(2);\n      }\n      else {\n        PTR_DAT_08001e90[1] = 0;\n        process_data_flow();\n      }\n    }\n    handle_system_flags();\n    process_input_data();\n  } while( true );\n}\n\n",
            "called": [
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_08005814",
                "FUN_080004ac",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_0800192c",
                "FUN_08002f24",
                "FUN_080041a0",
                "FUN_0800583c",
                "FUN_080001f8",
                "FUN_080051b4",
                "FUN_08005238",
                "FUN_0800b430",
                "FUN_080039a0",
                "FUN_0800283a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001ddc",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "main_program_loop_08001ddc"
        },
        "FUN_080069b4": {
            "renaming": {
                "FUN_080069b4": "set_bit_in_array_080069b4",
                "param_1": "bitIndex"
            },
            "code": "\nvoid setBitInArray_080069b4(byte bitIndex)\n\n{\n  *(int *)(DAT_080069e0 + ((uint)(int)(char)bitIndex >> 5) * 4) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080069b4",
            "calling": [
                "FUN_08006d2e"
            ],
            "imported": false,
            "current_name": "set_bit_in_array_080069b4"
        },
        "FUN_08009228": {
            "renaming": {
                "FUN_08009228": "check_status_08009228",
                "in_CY": "statusFlag"
            },
            "code": "\nbool checkStatus_08009228(void)\n\n{\n  char statusFlag;\n  \n  combine_parameters_08009204();\n  return statusFlag == '\\0';\n}\n\n",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009228",
            "calling": [
                "FUN_08004e30",
                "FUN_080029d8",
                "FUN_08003826",
                "FUN_08002afc",
                "FUN_08003004",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_status_08009228"
        },
        "FUN_08007c7c": {
            "renaming": {
                "FUN_08007c7c": "process_registers_08007c7c"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid process_registers_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_register_from_pointer_08005778();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_register_from_data_08005760();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    process_control_values_080053a0();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080053a0",
                "FUN_08005760",
                "FUN_08005778"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007c7c",
            "calling": [],
            "imported": false,
            "current_name": "process_registers_08007c7c"
        },
        "FUN_08007b70": {
            "renaming": {
                "FUN_08007b70": "update_register_values_08007b70",
                "local_c": "registerMask"
            },
            "code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid updateRegisterValues_08007b70(void)\n\n{\n  uint registerMask;\n  \n  registerMask = 1;\n  if (_DAT_40000034 != 0) {\n    registerMask = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    registerMask = registerMask | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | registerMask;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007b70",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "update_register_values_08007b70"
        },
        "FUN_08004d2c": {
            "renaming": {
                "FUN_08004d2c": "validate_and_process_data_08004d2c",
                "param_1": "data_length",
                "param_2": "data_buffer",
                "iVar1": "checksum_result"
            },
            "code": "\nbool validate_and_process_data_08004d2c(byte data_length,undefined *data_buffer)\n\n{\n  int checksum_result;\n  \n  checksum_result = check_data_checksum_080003ec(data_buffer,(ushort)data_length * 0x101 + 0x300,0x100);\n  if (checksum_result == 0) {\n    *data_buffer = 0;\n    process_data_wrapper_08004bc0(data_length,data_buffer);\n  }\n  return checksum_result != 0;\n}\n\n",
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004d2c",
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "validate_and_process_data_08004d2c"
        },
        "FUN_08003004": {
            "renaming": {
                "FUN_08003004": "process_sensor_data_08003004",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "flag",
                "puVar1": "temp_ptr",
                "uVar2": "temp_val",
                "uVar3": "multiplied_val",
                "iVar4": "product_1",
                "iVar5": "product_2",
                "iVar6": "product_3",
                "uVar7": "divided_val_1",
                "uVar8": "divided_val_2",
                "uVar9": "result_val_1",
                "uVar10": "result_val_2",
                "uVar11": "max_val_1",
                "puVar12": "data_ptr",
                "iVar13": "abs_diff",
                "uVar14": "max_val_2",
                "uVar15": "transformed_val",
                "uVar16": "float_multiplication_result",
                "uVar17": "float_operation_result",
                "local_20": "final_result",
                "local_1c": "multiplier"
            },
            "code": "\nvoid process_sensor_data_08003004(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 char flag)\n\n{\n  undefined *temp_ptr;\n  undefined temp_val;\n  undefined4 multiplied_val;\n  int product_1;\n  int product_2;\n  int product_3;\n  undefined4 divided_val_1;\n  undefined4 divided_val_2;\n  undefined4 result_val_1;\n  undefined4 result_val_2;\n  uint max_val_1;\n  ushort *data_ptr;\n  int abs_diff;\n  uint max_val_2;\n  undefined8 transformed_val;\n  undefined8 float_multiplication_result;\n  undefined8 float_operation_result;\n  undefined4 final_result;\n  undefined4 multiplier;\n  \n  data_ptr = (ushort *)(PTR_DAT_08003234 + (uint)(byte)*PTR_DAT_08003230 * 0x40);\n  multiplied_val = floating_point_multiplication_08008eec(*(undefined4 *)PTR_DAT_08003238,input_1);\n  transformed_val = calculate_transformed_value_08008590(multiplied_val);\n  product_1 = calculate_product_080095b8((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n  multiplied_val = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 4),input_2);\n  transformed_val = calculate_transformed_value_08008590(multiplied_val);\n  product_2 = calculate_product_080095b8((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n  multiplied_val = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08003238 + 8),input_3);\n  transformed_val = calculate_transformed_value_08008590(multiplied_val);\n  product_3 = calculate_product_080095b8((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n  *data_ptr = 0;\n  if (product_1 < *(int *)PTR_DAT_0800323c) {\n    *data_ptr = *data_ptr | 0x20;\n  }\n  if (product_2 < *(int *)(PTR_DAT_0800323c + 4)) {\n    *data_ptr = *data_ptr | 0x880;\n  }\n  if (product_3 < *(int *)(PTR_DAT_0800323c + 8)) {\n    *data_ptr = *data_ptr | 0x200;\n  }\n  abs_diff = product_1 - *(int *)PTR_DAT_0800323c;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(data_ptr + 2) = abs_diff;\n  abs_diff = product_2 - *(int *)(PTR_DAT_0800323c + 4);\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(data_ptr + 4) = abs_diff;\n  abs_diff = product_3 - *(int *)(PTR_DAT_0800323c + 8);\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(data_ptr + 6) = abs_diff;\n  max_val_1 = *(uint *)(data_ptr + 6);\n  if (*(uint *)(data_ptr + 6) < *(uint *)(data_ptr + 4)) {\n    max_val_1 = *(uint *)(data_ptr + 4);\n  }\n  max_val_2 = *(uint *)(data_ptr + 2);\n  if (*(uint *)(data_ptr + 2) < max_val_1) {\n    max_val_2 = max_val_1;\n  }\n  *(uint *)(data_ptr + 8) = max_val_2;\n  if (*(int *)(data_ptr + 8) != 0) {\n    multiplied_val = calculate_float_representation_08008e44(product_1 - *(int *)PTR_DAT_0800323c);\n    multiplied_val = floating_point_division_08009054(multiplied_val,*(undefined4 *)PTR_DAT_08003238);\n    divided_val_1 = calculate_float_representation_08008e44(product_2 - *(int *)(PTR_DAT_0800323c + 4));\n    divided_val_1 = floating_point_division_08009054(divided_val_1,*(undefined4 *)(PTR_DAT_08003238 + 4));\n    divided_val_2 = calculate_float_representation_08008e44(product_3 - *(int *)(PTR_DAT_0800323c + 8));\n    divided_val_2 = floating_point_division_08009054(divided_val_2,*(undefined4 *)(PTR_DAT_08003238 + 8));\n    result_val_1 = floating_point_multiplication_08008eec(multiplied_val,multiplied_val);\n    result_val_2 = floating_point_multiplication_08008eec(divided_val_1,divided_val_1);\n    result_val_1 = calculate_result_08008cdc(result_val_1,result_val_2);\n    result_val_2 = floating_point_multiplication_08008eec(divided_val_2,divided_val_2);\n    result_val_1 = calculate_result_08008cdc(result_val_1,result_val_2);\n    transformed_val = calculate_transformed_value_08008590(result_val_1);\n    transformed_val = calculate_result_080098d0((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n    result_val_1 = calculate_result_08008c30((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n    *(undefined4 *)(data_ptr + 0x10) = result_val_1;\n    result_val_1 = floating_point_division_08009054(0x3f800000,*(undefined4 *)(data_ptr + 0x10));\n    if (flag == '\\0') {\n      multiplier = floating_point_multiplication_08008eec(input_4,result_val_1);\n    }\n    else {\n      multiplier = floating_point_division_08009054(0x3f800000,input_4);\n    }\n    result_val_2 = floating_point_multiplication_08008eec(*(undefined4 *)(data_ptr + 0x10),multiplier);\n    *(undefined4 *)(data_ptr + 10) = result_val_2;\n    result_val_2 = calculate_float_representation_08008e44(*(undefined4 *)(data_ptr + 8));\n    result_val_2 = floating_point_multiplication_08008eec(result_val_2,multiplier);\n    transformed_val = calculate_transformed_value_08008590(result_val_2);\n    transformed_val = calculate_longlong_value_08009318((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n    result_val_2 = calculate_result_08008bf0((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n    *(undefined4 *)(data_ptr + 0x1e) = result_val_2;\n    result_val_2 = calculate_float_representation_08008e44(*(undefined4 *)(data_ptr + 8));\n    result_val_2 = floating_point_multiplication_08008eec(result_val_2,result_val_1);\n    result_val_2 = floating_point_multiplication_08008eec(result_val_2,*(undefined4 *)(PTR_DAT_08003560 + 0x20));\n    result_val_2 = floating_point_division_08009054(result_val_2,DAT_08003564);\n    transformed_val = calculate_transformed_value_08008590(result_val_2);\n    transformed_val = calculate_longlong_value_08009318((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n    result_val_2 = calculate_result_08008ba0((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n    *(undefined4 *)(data_ptr + 0x18) = result_val_2;\n    multiplied_val = floating_point_multiplication_08008eec(multiplied_val,result_val_1);\n    divided_val_1 = floating_point_multiplication_08008eec(divided_val_1,result_val_1);\n    divided_val_2 = floating_point_multiplication_08008eec(divided_val_2,result_val_1);\n    final_result = 0;\n    if ((*PTR_DAT_08003568 != *PTR_DAT_0800356c) &&\n       (abs_diff = check_swapped_parameters_08009264(*(undefined4 *)(PTR_DAT_08003570 + 0x18),0), abs_diff != 0)) {\n      result_val_1 = floating_point_multiplication_08008eec(*(uint *)(PTR_DAT_08003570 + 0xc) ^ 0x80000000,multiplied_val);\n      result_val_2 = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x10),divided_val_1);\n      result_val_1 = process_numbers_08008cd8(result_val_1,result_val_2);\n      result_val_2 = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08003570 + 0x14),divided_val_2);\n      result_val_1 = process_numbers_08008cd8(result_val_1,result_val_2);\n      transformed_val = calculate_transformed_value_08008590(result_val_1);\n      abs_diff = is_data_processed_08008b24((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20),DAT_08003550,DAT_08003554);\n      if (abs_diff != 0) {\n        abs_diff = check_status_08009228(*(undefined4 *)(PTR_DAT_08003570 + 0x18),*(undefined4 *)(data_ptr + 10)\n                             );\n        if (abs_diff == 0) {\n          final_result = *(undefined4 *)(data_ptr + 10);\n        }\n        else {\n          final_result = *(undefined4 *)(PTR_DAT_08003570 + 0x18);\n        }\n        transformed_val = calculate_transformed_value_08008590(result_val_1);\n        abs_diff = is_data_processed_08008b60((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20),DAT_08003558,DAT_0800355c\n                             );\n        if (abs_diff != 0) {\n          transformed_val = calculate_transformed_value_08008590(result_val_1);\n          transformed_val = floating_point_operation_080082d0(0,DAT_08003574,(int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n          transformed_val = calculate_double_multiplication_08008640((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20),0,DAT_08003578);\n          transformed_val = calculate_result_080098d0((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n          result_val_1 = calculate_result_08008c30((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n          transformed_val = calculate_transformed_value_08008590(final_result);\n          result_val_2 = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n          result_val_2 = floating_point_multiplication_08008eec(result_val_2,result_val_1);\n          float_multiplication_result = calculate_transformed_value_08008590(result_val_2);\n          float_operation_result = calculate_transformed_value_08008590(result_val_1);\n          float_operation_result = floating_point_operation_080082d0(0,DAT_08003574,(int)float_operation_result,(int)((ulonglong)float_operation_result >> 0x20));\n          float_multiplication_result = calculate_float_multiplication_08008894((int)float_multiplication_result,(int)((ulonglong)float_multiplication_result >> 0x20),(int)float_operation_result,\n                                (int)((ulonglong)float_operation_result >> 0x20));\n          float_multiplication_result = calculate_result_080098d0((int)float_multiplication_result,(int)((ulonglong)float_multiplication_result >> 0x20));\n          abs_diff = is_data_processed_08008b24((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20),(int)float_multiplication_result,\n                                (int)((ulonglong)float_multiplication_result >> 0x20));\n          if (abs_diff == 0) {\n            result_val_2 = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08003560 + 0x20),\n                                  *(undefined4 *)(PTR_DAT_08003560 + 0x24));\n            result_val_2 = floating_point_multiplication_08008eec(result_val_2,result_val_1);\n            transformed_val = calculate_transformed_value_08008590(result_val_2);\n            float_multiplication_result = calculate_transformed_value_08008590(result_val_1);\n            float_multiplication_result = floating_point_operation_080082d0(0,DAT_08003574,(int)float_multiplication_result,(int)((ulonglong)float_multiplication_result >> 0x20));\n            transformed_val = calculate_float_multiplication_08008894((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20),(int)float_multiplication_result,\n                                  (int)((ulonglong)float_multiplication_result >> 0x20));\n            transformed_val = calculate_result_080098d0((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n            final_result = calculate_result_08008c30((int)transformed_val,(int)((ulonglong)transformed_val >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(data_ptr + 0xe) = final_result;\n    result_val_2 = calculate_final_result_08002978(*(uint *)(PTR_DAT_08003560 + 0x20) ^ 0x80000000,0,\n                          *(undefined4 *)(data_ptr + 0x10));\n    abs_diff = check_status_08009228(final_result,result_val_2);\n    result_val_1 = result_val_2;\n    if (abs_diff != 0) {\n      result_val_1 = final_result;\n    }\n    *(undefined4 *)(data_ptr + 0xc) = result_val_1;\n    abs_diff = check_parameters_status_08009250(result_val_2,*(undefined4 *)(data_ptr + 10));\n    if (abs_diff == 0) {\n      *(undefined *)((int)data_ptr + 0x25) = 0;\n    }\n    else {\n      *(undefined *)((int)data_ptr + 0x25) = 1;\n    }\n    *(undefined *)(data_ptr + 0x12) = 1;\n    temp_ptr = PTR_DAT_080035e0;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0xc) = multiplied_val;\n    *(undefined4 *)(temp_ptr + 0x10) = divided_val_1;\n    *(undefined4 *)(temp_ptr + 0x14) = divided_val_2;\n    *(undefined4 *)(PTR_DAT_080035e0 + 0x18) = *(undefined4 *)(data_ptr + 10);\n    *PTR_DAT_080035e8 = *PTR_DAT_080035e4;\n    temp_val = increment_and_wrap_08002870(*PTR_DAT_080035e8);\n    *PTR_DAT_080035e4 = temp_val;\n    temp_ptr = PTR_DAT_080035e0;\n    *(int *)PTR_DAT_080035e0 = product_1;\n    *(int *)(temp_ptr + 4) = product_2;\n    *(int *)(temp_ptr + 8) = product_3;\n    process_data_sequence_08002edc();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08002870",
                "FUN_08008cd8",
                "FUN_08008b24",
                "FUN_08008cdc",
                "FUN_08002978",
                "FUN_08009250",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008590",
                "FUN_08008ba0",
                "FUN_08008894",
                "FUN_08008e44",
                "FUN_08002edc",
                "FUN_08009054",
                "FUN_080095b8",
                "FUN_08009318",
                "FUN_08008c30",
                "FUN_08008640",
                "FUN_08008bf0",
                "FUN_080082d0",
                "FUN_08009264",
                "FUN_08008b60",
                "FUN_080098d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003004",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "process_sensor_data_08003004"
        },
        "FUN_080066cc": {
            "renaming": {
                "FUN_080066cc": "calculate_final_value_080066cc",
                "uVar1": "shiftedValue",
                "uVar2": "leadingZeroesCount"
            },
            "code": "\nuint calculate_final_value_080066cc(void)\n\n{\n  uint shiftedValue;\n  uint leadingZeroesCount;\n  \n  shiftedValue = calculate_shifted_value_08006628();\n  leadingZeroesCount = count_leading_zeroes(0x70000);\n  return shiftedValue >> PTR_DAT_08006714[(*(uint *)(DAT_08006710 + 8) & 0xe000) >> (leadingZeroesCount & 0xff)];\n}\n\n",
            "called": [
                "FUN_08006628"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080066cc",
            "calling": [
                "FUN_08007f54"
            ],
            "imported": false,
            "current_name": "calculate_final_value_080066cc"
        },
        "FUN_080018fc": {
            "renaming": {
                "FUN_080018fc": "update_flag_080018fc",
                "param_1": "newFlagValue"
            },
            "code": "\nvoid updateFlag_080018fc(uint newFlagValue)\n\n{\n  *(uint *)(DAT_08001928 + 0x14) = newFlagValue | *(uint *)(DAT_08001928 + 0x14) & 0xfffff55f;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080018fc",
            "calling": [
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "update_flag_080018fc"
        },
        "FUN_080039bc": {
            "renaming": {
                "FUN_080039bc": "process_data_sequence_080039bc",
                "iVar1": "validation_result",
                "uVar2": "error_code",
                "local_9": "iteration"
            },
            "code": "\nvoid process_data_sequence_080039bc(void)\n\n{\n  int validation_result;\n  undefined4 error_code;\n  byte iteration;\n  \n  for (iteration = 0; iteration < 2; iteration = iteration + 1) {\n    validation_result = validate_and_process_data_08004d2c(iteration,PTR_DAT_08003a14);\n    if (validation_result == 0) {\n      display_error_message_08004030(10);\n    }\n    else if (*PTR_DAT_08003a14 != '\\0') {\n      write_string_to_data_0800369c(PTR_DAT_08003a14);\n      error_code = process_code_sequence_080005b4(PTR_DAT_08003a14);\n      display_error_message_08004030(error_code);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08004d2c",
                "FUN_08004030",
                "FUN_0800369c",
                "FUN_080005b4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080039bc",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_sequence_080039bc"
        },
        "FUN_0800618c": {
            "renaming": {
                "FUN_0800618c": "configure_and_update_settings_0800618c",
                "param_1": "config_params",
                "param_2": "threshold",
                "lVar1": "long_product",
                "iVar2": "current_time",
                "uVar3": "updated_time",
                "uVar4": "timeout",
                "uVar5": "shifted_value"
            },
            "code": "\nundefined4 configure_and_update_settings_0800618c(uint *config_params,uint threshold)\n\n{\n  longlong long_product;\n  int current_time;\n  uint updated_time;\n  uint timeout;\n  ulonglong shifted_value;\n  \n  if ((*DAT_08006400 & 0xf) < threshold) {\n    *(char *)DAT_08006400 = (char)threshold;\n    if (threshold != (*DAT_08006400 & 0xf)) {\n      return 1;\n    }\n    if ((*config_params & 1) != 0) {\n      if (config_params[1] == 1) {\n        if ((*DAT_08006404 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((config_params[1] != 2) && ((*DAT_08006404 & 2) == 0)) {\n        return 1;\n      }\n      DAT_08006404[2] = config_params[1] | DAT_08006404[2] & 0xfffffffc;\n      current_time = get_data_value_08005a84();\n      timeout = current_time + 5000;\n      if (config_params[1] == 1) {\n        while ((DAT_08006404[2] & 0xc) != 4) {\n          updated_time = get_data_value_08005a84();\n          if (timeout <= updated_time) {\n            return 3;\n          }\n        }\n      }\n      else if (config_params[1] == 2) {\n        while ((DAT_08006404[2] & 0xc) != 8) {\n          updated_time = get_data_value_08005a84();\n          if (timeout <= updated_time) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((DAT_08006404[2] & 0xc) != 0) {\n          updated_time = get_data_value_08005a84();\n          if (timeout <= updated_time) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*config_params & 1) != 0) {\n      if (config_params[1] == 1) {\n        if ((*DAT_08006404 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (config_params[1] == 2) {\n        if ((*DAT_08006404 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((*DAT_08006404 & 2) == 0) {\n        return 1;\n      }\n      DAT_08006404[2] = config_params[1] | DAT_08006404[2] & 0xfffffffc;\n      current_time = get_data_value_08005a84();\n      timeout = current_time + 5000;\n      if (config_params[1] == 1) {\n        while ((DAT_08006404[2] & 0xc) != 4) {\n          updated_time = get_data_value_08005a84();\n          if (timeout <= updated_time) {\n            return 3;\n          }\n        }\n      }\n      else if (config_params[1] == 2) {\n        while ((DAT_08006404[2] & 0xc) != 8) {\n          updated_time = get_data_value_08005a84();\n          if (timeout <= updated_time) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((DAT_08006404[2] & 0xc) != 0) {\n          updated_time = get_data_value_08005a84();\n          if (timeout <= updated_time) {\n            return 3;\n          }\n        }\n      }\n    }\n    *(char *)DAT_08006400 = (char)threshold;\n    if (threshold != (*DAT_08006400 & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    DAT_08006404[2] = config_params[2] | DAT_08006404[2] & 0xffffff0f;\n  }\n  if ((*config_params & 4) != 0) {\n    DAT_08006404[2] = config_params[3] | DAT_08006404[2] & 0xffffe3ff;\n  }\n  if ((*config_params & 8) != 0) {\n    DAT_08006404[2] = config_params[4] << 3 | DAT_08006404[2] & 0xffff1fff;\n  }\n  shifted_value = calculate_shifted_value_08006628();\n  long_product = (ulonglong)DAT_08006408 * (shifted_value & 0xffffffff);\n  check_and_update_memory_08005c30((uint)((ulonglong)long_product >> 0x26),(int)(shifted_value >> 0x20),(int)long_product);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08005c30",
                "FUN_08006628",
                "FUN_08005a84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800618c",
            "calling": [
                "FUN_08007436"
            ],
            "imported": false,
            "current_name": "configure_and_update_settings_0800618c"
        },
        "FUN_08006998": {
            "renaming": {
                "FUN_08006998": "get_bit_field_08006998"
            },
            "code": "\nuint getBitField_08006998(void)\n\n{\n  return *(uint *)(DAT_080069b0 + 0xc) >> 8 & 7;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006998",
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "imported": false,
            "current_name": "get_bit_field_08006998"
        },
        "FUN_080004ac": {
            "renaming": {
                "FUN_080004ac": "initialize_and_process_data_080004ac",
                "iVar1": "result"
            },
            "code": "\nvoid initialize_and_process_data_080004ac(void)\n\n{\n  int result;\n  \n  set_memory_0800b430(PTR_DAT_080004f0,0,0x38);\n  *(undefined4 *)(PTR_DAT_080004f0 + 8) = *(undefined4 *)(PTR_DAT_080004f4 + 0x10);\n  update_data_08000478(0,1,2);\n  PTR_DAT_080004f0[4] = 1;\n  result = validate_and_process_data_08004d7c(PTR_DAT_080004f0[0x1c],PTR_DAT_080004f8);\n  if (result == 0) {\n    display_error_message_08004030(10);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080004ac",
            "calling": [
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_080004ac"
        },
        "FUN_080078f4": {
            "renaming": {
                "FUN_080078f4": "calculate_bitwise_or_080078f4",
                "local_10": "index",
                "local_c": "bitwiseOrResult"
            },
            "code": "\nuint calculateBitwiseOr_080078f4(void)\n\n{\n  int index;\n  uint bitwiseOrResult;\n  \n  bitwiseOrResult = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    bitwiseOrResult = *(uint *)(PTR_DAT_0800792c + index * 4) | bitwiseOrResult;\n  }\n  return bitwiseOrResult;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080078f4",
            "calling": [
                "FUN_08007930",
                "FUN_08001994"
            ],
            "imported": false,
            "current_name": "calculate_bitwise_or_080078f4"
        },
        "FUN_080041a0": {
            "renaming": {
                "FUN_080041a0": "display_message_080041a0",
                "param_1": "messageCode"
            },
            "code": "\nvoid displayMessage_080041a0(undefined messageCode)\n\n{\n  write_characters_080036c6(PTR_DAT_0800420c);\n  switch(messageCode) {\n  case 1:\n    write_characters_080036c6(PTR_s_Reset_to_continue_08004210);\n    break;\n  case 2:\n    write_characters_080036c6(PTR_s___H____X__to_unlock_08004214);\n    break;\n  case 3:\n    write_characters_080036c6(PTR_s_Caution__Unlocked_08004218);\n    break;\n  case 4:\n    write_characters_080036c6(PTR_s_Enabled_0800421c);\n    break;\n  case 5:\n    write_characters_080036c6(PTR_s_Disabled_08004220);\n  }\n  write_characters_080036c6(PTR_DAT_08004224);\n  return;\n}\n\n",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080041a0",
            "calling": [
                "FUN_08001ddc",
                "FUN_08003a74",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "display_message_080041a0"
        },
        "FUN_08008bf0": {
            "renaming": {
                "FUN_08008bf0": "calculate_result_08008bf0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "iVar1": "intermediateValue1",
                "uVar2": "intermediateValue2"
            },
            "code": "\nuint calculateResult_08008bf0(uint inputValue1,uint inputValue2)\n\n{\n  int intermediateValue1;\n  uint intermediateValue2;\n  \n  if ((inputValue2 & 0x80000000) != 0) {\n    return 0;\n  }\n  intermediateValue1 = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < intermediateValue1) {\n      return 0;\n    }\n    intermediateValue2 = -(intermediateValue1 >> 0x15) - 0x3e1;\n    if (-1 < (int)intermediateValue2) {\n      return (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (intermediateValue2 & 0xff);\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008bf0",
            "calling": [
                "FUN_08004e30",
                "FUN_08002408",
                "FUN_08003b98",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "calculate_result_08008bf0"
        },
        "FUN_08003a18": {
            "renaming": {
                "FUN_08003a18": "update_register_flags_08003a18",
                "param_1": "input_flag"
            },
            "code": "\nvoid update_register_flags_08003a18(uint input_flag)\n\n{\n  if ((input_flag & 0x80) == 0) {\n    if ((input_flag & 0x40) == 0) {\n      if ((input_flag & 0x20) != 0) {\n        PTR_DAT_08003a70[2] = PTR_DAT_08003a70[2] | 2;\n      }\n    }\n    else {\n      PTR_DAT_08003a70[2] = PTR_DAT_08003a70[2] | 8;\n    }\n  }\n  else {\n    update_control_registers_080025e8();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080025e8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003a18",
            "calling": [
                "FUN_080074c8"
            ],
            "imported": false,
            "current_name": "update_register_flags_08003a18"
        },
        "FUN_08005790": {
            "renaming": {
                "FUN_08005790": "process_data_08005790",
                "do_nothing_08005318": "initialize",
                "set_global_value_08007c40": "setGlobalValue",
                "set_global_parameter_08007c5e": "setGlobalParameter",
                "update_register_values_08007b70": "updateRegisterValues"
            },
            "code": "\nvoid processData_08005790(void)\n\n{\n  initialize();\n  if (PTR_DAT_080057d4[1] == '\\x03') {\n    *(undefined2 *)PTR_DAT_080057dc = *(undefined2 *)(PTR_DAT_080057d8 + 0x18);\n    *(undefined2 *)PTR_DAT_080057e0 = *(undefined2 *)(PTR_DAT_080057d8 + 0x1a);\n    setGlobalValue(0x69);\n    setGlobalParameter(((byte)PTR_DAT_080057d8[0xd] + 5) * 0x15);\n    updateRegisterValues();\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007c40",
                "FUN_08007b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005790",
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "process_data_08005790"
        },
        "FUN_08001994": {
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "param_1": "input_flags",
                "param_2": "flag_control",
                "param_3": "bitwise_control",
                "param_4": "input_value",
                "local_11": "flag_count",
                "local_5c": "product_1",
                "local_58": "product_2",
                "local_54": "product_3",
                "local_4e": "register_value",
                "local_4c": "product_limit",
                "local_48": "result_1",
                "local_44": "result_2",
                "local_40": "max_product",
                "local_3c": "bitwise_result",
                "local_36": "updated_register_value",
                "local_34": "counter_limit",
                "local_30": "counter",
                "local_2c": "delay_1",
                "local_28": "accumulator_1",
                "local_24": "accumulator_2",
                "local_20": "accumulator_3",
                "local_1a": "flag_value",
                "local_18": "current_limit",
                "uVar1": "temp_result",
                "uVar2": "temp_uint",
                "uVar3": "intermediate_value_1",
                "uVar4": "intermediate_value_2"
            },
            "code": "\nvoid process_data_08001994(byte input_flags,char flag_control,char bitwise_control,undefined4 input_value)\n\n{\n  undefined4 temp_result;\n  uint temp_uint;\n  undefined8 intermediate_value_1;\n  undefined8 intermediate_value_2;\n  byte local_61;\n  uint product_1;\n  uint product_2;\n  uint product_3;\n  ushort register_value;\n  uint product_limit;\n  int result_1;\n  undefined4 result_2;\n  uint max_product;\n  uint bitwise_result;\n  ushort updated_register_value;\n  uint counter_limit;\n  uint counter;\n  int delay_1;\n  int accumulator_1;\n  int accumulator_2;\n  int accumulator_3;\n  ushort flag_value;\n  uint current_limit;\n  char flag_count;\n  \n  flag_count = '\\0';\n  set_memory_0800b430(&product_1,0,0xc);\n  if ((input_flags & 1) != 0) {\n    flag_count = flag_count + '\\x01';\n    intermediate_value_1 = calculate_transformed_value_08008590(*(undefined4 *)PTR_DAT_08001c90);\n    product_1 = calculate_product_080095b8((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  }\n  if ((input_flags & 2) != 0) {\n    flag_count = flag_count + '\\x01';\n    intermediate_value_1 = calculate_transformed_value_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 4));\n    product_2 = calculate_product_080095b8((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  }\n  if ((input_flags & 4) != 0) {\n    flag_count = flag_count + '\\x01';\n    intermediate_value_1 = calculate_transformed_value_08008590(*(undefined4 *)(PTR_DAT_08001c90 + 8));\n    product_3 = calculate_product_080095b8((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  }\n  temp_uint = product_3;\n  if (product_3 < product_2) {\n    temp_uint = product_2;\n  }\n  max_product = product_1;\n  if (product_1 < temp_uint) {\n    max_product = temp_uint;\n  }\n  intermediate_value_1 = calculate_modified_value_0800854c(max_product);\n  intermediate_value_2 = calculate_modified_value_0800854c(flag_count);\n  intermediate_value_2 = calculate_result_080098d0((int)intermediate_value_2,(int)((ulonglong)intermediate_value_2 >> 0x20));\n  intermediate_value_1 = calculate_float_multiplication_08008894((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20),(int)intermediate_value_2,\n                       (int)((ulonglong)intermediate_value_2 >> 0x20));\n  result_2 = calculate_result_08008c30((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  temp_result = floating_point_multiplication_08008eec(*(undefined4 *)(PTR_DAT_08001c90 + 0x20),result_2);\n  temp_result = floating_point_division_08009054(temp_result,DAT_08001c94);\n  intermediate_value_1 = calculate_transformed_value_08008590(temp_result);\n  intermediate_value_1 = calculate_longlong_value_08009318((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  result_1 = calculate_result_08008bf0((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  intermediate_value_1 = calculate_modified_value_0800854c(flag_count);\n  intermediate_value_1 = calculate_result_080098d0((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  intermediate_value_2 = calculate_transformed_value_08008590(input_value);\n  intermediate_value_1 = calculate_double_multiplication_08008640((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20),(int)intermediate_value_2,\n                       (int)((ulonglong)intermediate_value_2 >> 0x20));\n  temp_result = calculate_result_08008c30((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  temp_result = floating_point_multiplication_08008eec(result_2,temp_result);\n  temp_result = floating_point_division_08009054(DAT_08001c98,temp_result);\n  intermediate_value_1 = calculate_transformed_value_08008590(temp_result);\n  product_limit = calculate_product_080095b8((int)intermediate_value_1,(int)((ulonglong)intermediate_value_1 >> 0x20));\n  current_limit = DAT_08001c9c;\n  if (product_limit < DAT_08001c9c) {\n    current_limit = product_limit;\n  }\n  register_value = *(ushort *)(PTR_DAT_08001c90 + 0x18);\n  flag_value = *(ushort *)(PTR_DAT_08001c90 + 0x1a) ^ *(ushort *)(PTR_DAT_08001c90 + 0x2a) & 0xaa0;\n  if (flag_control == '\\0') {\n    flag_value = flag_value ^ 0xaa0;\n  }\n  update_flag_080018fc(flag_value);\n  update_register_value_080018cc(register_value);\n  accumulator_1 = -(max_product >> 1);\n  delay_1 = current_limit - (byte)PTR_DAT_08001c90[0xd];\n  counter = 0;\n  counter_limit = 10000;\n  local_61 = input_flags;\n  accumulator_2 = accumulator_1;\n  accumulator_3 = accumulator_1;\n  while( true ) {\n    updated_register_value = register_value;\n    bitwise_result = calculate_bitwise_or_080078f4();\n    if (bitwise_control == '\\0') {\n      bitwise_result = bitwise_result ^ 0x1e;\n    }\n    if (((local_61 & 1) != 0) && (accumulator_3 = accumulator_3 + product_1, 0 < accumulator_3)) {\n      if ((bitwise_result & 0x10) == 0) {\n        local_61 = local_61 & 0xfe;\n      }\n      else {\n        updated_register_value = updated_register_value ^ 0x10;\n      }\n      accumulator_3 = accumulator_3 - max_product;\n    }\n    if (((local_61 & 2) != 0) && (accumulator_2 = accumulator_2 + product_2, 0 < accumulator_2)) {\n      if ((bitwise_result & 8) == 0) {\n        local_61 = local_61 & 0xfd;\n      }\n      else {\n        updated_register_value = updated_register_value ^ 0x440;\n      }\n      accumulator_2 = accumulator_2 - max_product;\n    }\n    if (((local_61 & 4) != 0) && (accumulator_1 = accumulator_1 + product_3, 0 < accumulator_1)) {\n      if ((bitwise_result & 4) == 0) {\n        local_61 = local_61 & 0xfb;\n      }\n      else {\n        updated_register_value = updated_register_value ^ 0x100;\n      }\n      accumulator_1 = accumulator_1 - max_product;\n    }\n    if ((local_61 == 0) || ((PTR_DAT_08001d40[2] & 0x10) != 0)) break;\n    update_register_value_080018cc(updated_register_value);\n    do_nothing_08002828(PTR_DAT_08001d44[0xd]);\n    update_register_value_080018cc(register_value);\n    do_nothing_08002828(delay_1);\n    if ((product_limit < current_limit) && (counter_limit = current_limit + counter_limit, 20000 < counter_limit)) {\n      counter_limit = counter_limit - 20000;\n      counter = result_1 + counter;\n      current_limit = DAT_08001d48 / counter;\n      if (current_limit < product_limit) {\n        current_limit = product_limit;\n      }\n      delay_1 = current_limit - (byte)PTR_DAT_08001d44[0xd];\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_080018fc",
                "FUN_0800854c",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008894",
                "FUN_080095b8",
                "FUN_08009318",
                "FUN_08009054",
                "FUN_08008c30",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008bf0",
                "FUN_08008640",
                "FUN_080098d0",
                "FUN_080078f4",
                "FUN_0800b430"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08001994",
            "calling": [
                "FUN_08001d4c"
            ],
            "imported": false,
            "current_name": "process_data_08001994"
        },
        "FUN_08007854": {
            "renaming": {
                "FUN_08007854": "get_bit_from_memory_08007854",
                "param_1": "inputValue"
            },
            "code": "\nuint getBitFromMemory_08007854(uint inputValue)\n\n{\n  return *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020010) >> (inputValue & 0xf) & 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007854",
            "calling": [
                "FUN_08007884"
            ],
            "imported": false,
            "current_name": "get_bit_from_memory_08007854"
        },
        "FUN_08004900": {
            "renaming": {
                "FUN_08004900": "print_formatted_data_08004900",
                "param_1": "signed_integer",
                "param_2": "input_string"
            },
            "code": "\nvoid print_formatted_data_08004900(undefined signed_integer,undefined4 input_string)\n\n{\n  write_characters_080036c6(PTR_DAT_08004934);\n  print_signed_int_080037fc(signed_integer);\n  write_characters_080036c6(PTR_DAT_08004938);\n  write_string_to_data_0800369c(input_string);\n  write_characters_080036c6(PTR_DAT_0800493c);\n  return;\n}\n\n",
            "called": [
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_0800369c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004900",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "print_formatted_data_08004900"
        },
        "FUN_08005318": {
            "renaming": {
                "FUN_08005318": "do_nothing_08005318"
            },
            "code": "\nvoid do_nothing_08005318(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005318",
            "calling": [
                "FUN_08005790"
            ],
            "imported": false,
            "current_name": "do_nothing_08005318"
        },
        "FUN_08004228": {
            "renaming": {
                "FUN_08004228": "display_grbl_help_message_08004228",
                "write_characters_080036c6": "writeCharacters"
            },
            "code": "\nvoid displayGrblHelpMessage_08004228(void)\n\n{\n  writeCharacters(PTR_s__Grbl_0_8c______for_help__08004238);\n  return;\n}\n\n",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004228",
            "calling": [
                "FUN_080039a0"
            ],
            "imported": false,
            "current_name": "display_grbl_help_message_08004228"
        },
        "FUN_08009b24": {
            "renaming": {
                "FUN_08009b24": "improved_calculation_08009b24",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "tempVar1",
                "iVar2": "intVar2",
                "uVar3": "result1",
                "iVar4": "intVar4",
                "uVar5": "tempVar5",
                "iVar6": "intVar6",
                "uVar7": "result2",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13",
                "local_3c": "localOffset"
            },
            "code": "\nuint improved_calculation_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 tempVar1;\n  int intVar2;\n  uint result1;\n  int intVar4;\n  undefined4 tempVar5;\n  int intVar6;\n  uint result2;\n  undefined4 tempVar8;\n  undefined4 tempVar9;\n  undefined8 tempVar10;\n  undefined8 tempVar11;\n  undefined8 tempVar12;\n  undefined8 tempVar13;\n  int localOffset;\n  \n  tempVar1 = DAT_08009d70;\n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result1 = input1;\n  result2 = input2;\n  if (input2 < input4) {\n    result1 = input3;\n    input3 = input1;\n    result2 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(result2 - input4)) {\n    result1 = calculate_result_080082d4(result1,result2,input3,input4);\n    return result1;\n  }\n  if (DAT_08009d68 < (int)result2) {\n    if (DAT_08009d74 < (int)result2) {\n      if ((result2 & 0xfffff | result1) != 0) {\n        result1 = calculate_result_080082d4(result1,result2,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result1;\n      }\n      return input3;\n    }\n    result2 = result2 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    localOffset = 600;\n  }\n  else {\n    localOffset = 0;\n  }\n  tempVar11 = CONCAT44(result2,result1);\n  tempVar10 = CONCAT44(input4,input3);\n  if ((int)input4 <= DAT_08009d6c) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result1;\n      }\n      tempVar10 = calculate_double_multiplication_08008640(input3,input4,0,DAT_08009d70);\n      tempVar11 = calculate_double_multiplication_08008640(result1,result2,0,tempVar1);\n      localOffset = localOffset + -0x3fe;\n    }\n    else {\n      result2 = result2 + 0x25800000;\n      tempVar11 = CONCAT44(result2,result1);\n      input4 = input4 + 0x25800000;\n      tempVar10 = CONCAT44(input4,input3);\n      localOffset = localOffset + -600;\n    }\n  }\n  tempVar9 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n  tempVar8 = (undefined4)tempVar11;\n  intVar6 = (int)((ulonglong)tempVar10 >> 0x20);\n  tempVar5 = (undefined4)tempVar10;\n  tempVar10 = floating_point_operation_080082d0(tempVar8,tempVar9,tempVar5,intVar6);\n  intVar4 = (int)((ulonglong)tempVar10 >> 0x20);\n  tempVar1 = (undefined4)tempVar10;\n  intVar2 = is_data_processed_08008b24(tempVar5,intVar6,tempVar1,intVar4);\n  if (intVar2 == 0) {\n    tempVar10 = calculate_double_multiplication_08008640(0,input4,0);\n    tempVar11 = calculate_double_multiplication_08008640(tempVar1,intVar4 + -0x80000000,tempVar1,intVar4);\n    tempVar12 = calculate_result_080082d4(tempVar8,tempVar9,tempVar8,tempVar9);\n    tempVar12 = floating_point_operation_080082d0((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),0,result2 + 0x100000);\n    tempVar12 = calculate_double_multiplication_08008640((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),tempVar5,intVar6);\n    tempVar13 = floating_point_operation_080082d0(tempVar5,intVar6,0,input4);\n    tempVar13 = calculate_double_multiplication_08008640((int)tempVar13,(int)((ulonglong)tempVar13 >> 0x20),0,result2 + 0x100000);\n    tempVar12 = calculate_result_080082d4((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar13,\n                          (int)((ulonglong)tempVar13 >> 0x20));\n    tempVar11 = floating_point_operation_080082d0((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),(int)tempVar12,\n                          (int)((ulonglong)tempVar12 >> 0x20));\n    floating_point_operation_080082d0((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                 (int)((ulonglong)tempVar11 >> 0x20));\n    tempVar10 = compute_result_0800a1bc();\n  }\n  else {\n    tempVar10 = calculate_double_multiplication_08008640(0,result2,0,result2);\n    tempVar11 = calculate_double_multiplication_08008640(tempVar5,intVar6 + -0x80000000,tempVar5,intVar6);\n    tempVar12 = calculate_result_080082d4(tempVar8,tempVar9,0,result2);\n    tempVar13 = floating_point_operation_080082d0(tempVar8,tempVar9,0,result2);\n    tempVar12 = calculate_double_multiplication_08008640((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar13,\n                          (int)((ulonglong)tempVar13 >> 0x20));\n    tempVar11 = floating_point_operation_080082d0((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),(int)tempVar12,\n                          (int)((ulonglong)tempVar12 >> 0x20));\n    floating_point_operation_080082d0((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                 (int)((ulonglong)tempVar11 >> 0x20));\n    tempVar10 = compute_result_0800a1bc();\n  }\n  result1 = (uint)tempVar10;\n  if (localOffset != 0) {\n    result1 = calculate_double_multiplication_08008640(result1,(int)((ulonglong)tempVar10 >> 0x20),0,localOffset * 0x100000 + 0x3ff00000);\n  }\n  return result1;\n}\n\n",
            "called": [
                "FUN_08008b24",
                "FUN_080082d4",
                "FUN_0800a1bc",
                "FUN_08008640",
                "FUN_080082d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009b24",
            "calling": [
                "FUN_0800981c"
            ],
            "imported": false,
            "current_name": "improved_calculation_08009b24"
        },
        "FUN_080076c8": {
            "renaming": {
                "FUN_080076c8": "toggle_bit_080076c8",
                "param_1": "inputValue"
            },
            "code": "\nvoid toggleBit_080076c8(uint inputValue)\n\n{\n  *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) ^ 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080076c8",
            "calling": [
                "FUN_08007756"
            ],
            "imported": false,
            "current_name": "toggle_bit_080076c8"
        },
        "FUN_0800530c": {
            "renaming": {
                "FUN_0800530c": "do_nothing_0800530c"
            },
            "code": "\nvoid do_nothing_0800530c(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800530c",
            "calling": [
                "FUN_080057e4"
            ],
            "imported": false,
            "current_name": "do_nothing_0800530c"
        },
        "FUN_08006a8c": {
            "renaming": {
                "FUN_08006a8c": "set_bit_for_index_08006a8c",
                "param_1": "bitIndex"
            },
            "code": "\nvoid setBitForIndex_08006a8c(byte bitIndex)\n\n{\n  *(int *)(DAT_08006abc + (((uint)(int)(char)bitIndex >> 5) + 0x60) * 4) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006a8c",
            "calling": [
                "FUN_08006dfe"
            ],
            "imported": false,
            "current_name": "set_bit_for_index_08006a8c"
        },
        "FUN_0800283a": {
            "renaming": {
                "FUN_0800283a": "process_coordinates_0800283a",
                "undefined4": "uint32_t"
            },
            "code": "\nvoid process_coordinates_0800283a(void)\n\n{\n  update_parameters_080035ec(*(uint32_t *)(PTR_DAT_08002868 + 4),*(uint32_t *)(PTR_DAT_08002868 + 8),\n               *(uint32_t *)(PTR_DAT_08002868 + 0xc));\n  normalize_coordinates_080004fc(*(uint32_t *)(PTR_DAT_08002868 + 4),*(uint32_t *)(PTR_DAT_08002868 + 8),\n               *(uint32_t *)(PTR_DAT_08002868 + 0xc));\n  return;\n}\n\n",
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800283a",
            "calling": [
                "FUN_080024c4",
                "FUN_08001ddc"
            ],
            "imported": false,
            "current_name": "process_coordinates_0800283a"
        },
        "FUN_0800881c": {
            "renaming": {
                "FUN_0800881c": "calculate_result_0800881c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_var_1",
                "unaff_r4": "unchanged_r4",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "in_r12": "input_r12",
                "bVar4": "condition_flag"
            },
            "code": "\nulonglong calculate_result_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_var_1;\n  uint unchanged_r4;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint input_r12;\n  bool condition_flag;\n  \n  temp_var_2 = input_r12 & input_4 >> 0x14;\n  if (unchanged_r4 != input_r12 && temp_var_2 != input_r12) {\n    condition_flag = (input_1 | input_2 << 1) == 0;\n    if (!condition_flag) {\n      condition_flag = (input_3 | input_4 << 1) == 0;\n    }\n    if (condition_flag) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (unchanged_r4 == 0) {\n      temp_var_3 = input_2 & 0x80000000;\n      do {\n        temp_var_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_var_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_var_3;\n      if (temp_var_2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_var_2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_var_2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  condition_flag = (input_1 | input_2 << 1) == 0;\n  if (condition_flag) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!condition_flag) {\n    condition_flag = (input_3 | input_4 << 1) == 0;\n  }\n  temp_var_3 = input_2;\n  if (((!condition_flag) && ((unchanged_r4 != input_r12 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_var_2 != input_r12 || (input_1 = input_3, temp_var_3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_var_3,input_1) | 0x7ff8000000000000;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800881c",
            "calling": [
                "FUN_08008640"
            ],
            "imported": false,
            "current_name": "calculate_result_0800881c"
        },
        "FUN_08004bc0": {
            "renaming": {
                "FUN_08004bc0": "process_data_wrapper_08004bc0",
                "param_1": "inputByte",
                "param_2": "dataBuffer"
            },
            "code": "\nvoid processDataWrapper_08004bc0(byte inputByte,undefined4 dataBuffer)\n\n{\n  process_data_08000374((ushort)inputByte * 0x101 + 0x300,dataBuffer,0x100);\n  return;\n}\n\n",
            "called": [
                "FUN_08000374"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004bc0",
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "process_data_wrapper_08004bc0"
        },
        "FUN_08008b4c": {
            "renaming": {
                "FUN_08008b4c": "check_process_status_08008b4c",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkProcessStatus_08008b4c(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  process_data_wrapper_08008af0();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b4c",
            "calling": [
                "FUN_0800a5a0"
            ],
            "imported": false,
            "current_name": "check_process_status_08008b4c"
        },
        "FUN_08004c2a": {
            "renaming": {
                "FUN_08004c2a": "initialize_data_processing_08004c2a",
                "update_memory_08000340": "update_memory",
                "process_data_08000374": "process_data"
            },
            "code": "\nvoid initialize_data_processing_08004c2a(void)\n\n{\n  update_memory(0,5);\n  process_data(1,PTR_DAT_08004c44,0x40);\n  return;\n}\n\n",
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c2a",
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "imported": false,
            "current_name": "initialize_data_processing_08004c2a"
        },
        "FUN_0800826a": {
            "renaming": {
                "FUN_0800826a": "store_data_0800826a",
                "undefined": "uint32_t",
                "undefined4": "uint32_t",
                "param_1": "inputData"
            },
            "code": "\nuint32_t storeData_0800826a(uint32_t inputData)\n\n{\n  write_data_08007e1c(inputData);\n  return 0;\n}\n\n",
            "called": [
                "FUN_08007e1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800826a",
            "calling": [],
            "imported": false,
            "current_name": "store_data_0800826a"
        },
        "FUN_08008b60": {
            "renaming": {
                "FUN_08008b60": "is_data_processed_08008b60",
                "in_CY": "dataStatus"
            },
            "code": "\nbool isDataProcessed_08008b60(void)\n\n{\n  char dataStatus;\n  \n  process_data_wrapper_08008af0();\n  return dataStatus == '\\0';\n}\n\n",
            "called": [
                "FUN_08008af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b60",
            "calling": [
                "FUN_0800af78",
                "FUN_08009318",
                "FUN_080094c0",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "is_data_processed_08008b60"
        },
        "FUN_08005324": {
            "renaming": {
                "FUN_08005324": "calculate_and_update_min_value_08005324",
                "param_1": "input_value",
                "local_14": "calculated_value"
            },
            "code": "\nvoid calculate_and_update_min_value_08005324(uint input_value)\n\n{\n  uint calculated_value;\n  \n  calculated_value = input_value;\n  if (input_value < 800) {\n    calculated_value = 800;\n  }\n  calculated_value = DAT_08005358 / calculated_value;\n  *(uint *)(PTR_DAT_0800535c + 0x14) = calculated_value;\n  update_minimum_value_08007bf0(calculated_value);\n  return;\n}\n\n",
            "called": [
                "FUN_08007bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005324",
            "calling": [
                "FUN_080053a0",
                "FUN_08005814",
                "FUN_080058a0"
            ],
            "imported": false,
            "current_name": "calculate_and_update_min_value_08005324"
        },
        "FUN_08000310": {
            "renaming": {
                "FUN_08000310": "get_data_from_memory_08000310",
                "param_1": "index",
                "initialize_memory_080002f0": "initialize_memory"
            },
            "code": "\nundefined get_data_from_memory_08000310(uint index)\n\n{\n  if (*(int *)PTR_DAT_08000338 == 0) {\n    initialize_memory();\n  }\n  return PTR_DAT_0800033c[index & 0x3ff];\n}\n\n",
            "called": [
                "FUN_080002f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08000310",
            "calling": [
                "FUN_08004dd2",
                "FUN_080003ec"
            ],
            "imported": false,
            "current_name": "get_data_from_memory_08000310"
        },
        "FUN_08005208": {
            "renaming": {
                "FUN_08005208": "do_nothing_08005208"
            },
            "code": "\nvoid do_nothing_08005208(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005208",
            "calling": [
                "FUN_0800525c"
            ],
            "imported": false,
            "current_name": "do_nothing_08005208"
        },
        "FUN_08007a70": {
            "renaming": {
                "FUN_08007a70": "process_and_set_bit_08007a70",
                "param_1": "input_value",
                "param_2": "bit_field_param",
                "param_3": "bit_index_param",
                "local_c": "bit_value"
            },
            "code": "\nvoid process_and_set_bit_08007a70(int input_value,undefined4 bit_field_param,undefined4 bit_index_param)\n\n{\n  undefined bit_value;\n  \n  if (input_value == 0x40000000) {\n    bit_value = 0x1c;\n  }\n  else if (input_value == DAT_08007ac8) {\n    bit_value = 0x1d;\n  }\n  else {\n    if (input_value != DAT_08007acc) {\n      return;\n    }\n    bit_value = 0x1e;\n  }\n  process_bit_field_08006cf6(bit_value,bit_field_param,bit_index_param);\n  set_bit_at_index_080079e0(bit_value);\n  return;\n}\n\n",
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007a70",
            "calling": [
                "FUN_08007ad0"
            ],
            "imported": false,
            "current_name": "process_and_set_bit_08007a70"
        },
        "FUN_0800b5b0": {
            "renaming": {
                "FUN_0800b5b0": "do_nothing_0800b5b0"
            },
            "code": "\nvoid do_nothing_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5b0",
            "calling": [
                "FUN_08000188",
                "FUN_0800b3e8",
                "FUN_080001ac"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b5b0"
        },
        "FUN_08002978": {
            "renaming": {
                "FUN_08002978": "calculate_final_result_08002978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "intermediate_result_1",
                "uVar2": "intermediate_result_2",
                "uVar3": "intermediate_result_3"
            },
            "code": "\nundefined4 calculate_final_result_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 intermediate_result_1;\n  undefined4 intermediate_result_2;\n  undefined8 intermediate_result_3;\n  \n  intermediate_result_1 = floating_point_multiplication_08008eec(input_2,input_2);\n  intermediate_result_2 = calculate_result_08008cdc(input_1,input_1);\n  intermediate_result_2 = floating_point_multiplication_08008eec(intermediate_result_2,input_3);\n  intermediate_result_1 = process_numbers_08008cd8(intermediate_result_1,intermediate_result_2);\n  intermediate_result_3 = calculate_transformed_value_08008590(intermediate_result_1);\n  intermediate_result_3 = calculate_result_080098d0((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20));\n  intermediate_result_1 = calculate_result_08008c30((int)intermediate_result_3,(int)((ulonglong)intermediate_result_3 >> 0x20));\n  return intermediate_result_1;\n}\n\n",
            "called": [
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008eec",
                "FUN_080098d0",
                "FUN_08008590"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002978",
            "calling": [
                "FUN_080029d8",
                "FUN_08002afc",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "calculate_final_result_08002978"
        },
        "FUN_08009d78": {
            "renaming": {
                "FUN_08009d78": "complex_calculations_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "masked_input2",
                "iVar9": "result",
                "uVar10": "intermediate_result1",
                "uVar11": "intermediate_result2",
                "uVar12": "intermediate_result3",
                "local_50": "local_var1",
                "uStack_4c": "local_var2",
                "local_40": "local_result1",
                "local_38": "local_result2",
                "local_30": "local_result3"
            },
            "code": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nint complex_calculations_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint masked_input2;\n  int result;\n  undefined8 intermediate_result1;\n  undefined8 intermediate_result2;\n  undefined8 intermediate_result3;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_result1;\n  undefined8 local_result2;\n  undefined8 local_result3;\n  \n  masked_input2 = input2 & 0x7fffffff;\n  if ((int)masked_input2 <= DAT_08009fb0) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if ((int)masked_input2 <= DAT_08009fb4) {\n    if ((int)input2 < 1) {\n      intermediate_result1 = calculate_result_080082d4(input1,input2,DAT_08009f88,DAT_08009f8c);\n      temp3 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n      temp1 = (undefined4)intermediate_result1;\n      if (masked_input2 != DAT_0800a1b8) {\n        intermediate_result1 = calculate_result_080082d4(temp1,temp3,DAT_0800a1b0,DAT_0800a1b4);\n        *output = intermediate_result1;\n        intermediate_result1 = floating_point_operation_080082d0(temp1,temp3);\n        intermediate_result1 = calculate_result_080082d4((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_0800a1b0,DAT_0800a1b4\n                             );\n        output[1] = intermediate_result1;\n        return -1;\n      }\n      intermediate_result1 = calculate_result_080082d4(temp1,temp3,DAT_0800a190,DAT_0800a194);\n      temp1 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n      intermediate_result2 = calculate_result_080082d4((int)intermediate_result1,temp1,DAT_0800a198,DAT_0800a19c);\n      *output = intermediate_result2;\n      intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,temp1);\n      intermediate_result1 = calculate_result_080082d4((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_0800a198,DAT_0800a19c);\n      output[1] = intermediate_result1;\n      return -1;\n    }\n    intermediate_result1 = floating_point_operation_080082d0();\n    temp3 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    temp1 = (undefined4)intermediate_result1;\n    if (masked_input2 != DAT_08009fb8) {\n      intermediate_result1 = floating_point_operation_080082d0(temp1,temp3,DAT_08009f90,DAT_08009f94);\n      *output = intermediate_result1;\n      intermediate_result1 = floating_point_operation_080082d0(temp1,temp3);\n      intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08009f90,DAT_08009f94);\n      output[1] = intermediate_result1;\n      return 1;\n    }\n    intermediate_result1 = floating_point_operation_080082d0(temp1,temp3,DAT_08009f98,DAT_08009f9c);\n    temp1 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    intermediate_result2 = floating_point_operation_080082d0((int)intermediate_result1,temp1,DAT_08009fa0,DAT_08009fa4);\n    *output = intermediate_result2;\n    intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,temp1);\n    intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),DAT_08009fa0,DAT_08009fa4);\n    output[1] = intermediate_result1;\n    return 1;\n  }\n  if (DAT_08009fbc < (int)masked_input2) {\n    if (DAT_08009fc0 < (int)masked_input2) {\n      intermediate_result1 = floating_point_operation_080082d0(input1,input2,input1,input2);\n      output[1] = intermediate_result1;\n      *output = intermediate_result1;\n      return 0;\n    }\n    result = ((int)masked_input2 >> 0x14) + -0x416;\n    calculate_result_08008ba0();\n    local_result1 = calculate_ulonglong_0800856c();\n    intermediate_result1 = floating_point_operation_080082d0(input1,masked_input2 + result * -0x100000,(int)local_result1,\n                          (int)((ulonglong)local_result1 >> 0x20));\n    intermediate_result1 = calculate_double_multiplication_08008640((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),0,DAT_08009fc4);\n    calculate_result_08008ba0();\n    local_result2 = calculate_ulonglong_0800856c();\n    intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20));\n    local_result3 = calculate_double_multiplication_08008640((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),0,DAT_08009fc4);\n    is_data_processed_08008b10((int)local_result3,(int)((ulonglong)local_result3 >> 0x20),0,0);\n    result = FUNC_0800a5a0(&local_result1,output,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -result;\n  }\n  intermediate_result1 = do_nothing_0800b2cc();\n  temp3 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n  intermediate_result2 = calculate_double_multiplication_08008640((int)intermediate_result1,temp3,DAT_08009fa8,DAT_08009fac);\n  calculate_result_080082d4((int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20),0,DAT_08009fcc);\n  result = calculate_result_08008ba0();\n  intermediate_result2 = calculate_ulonglong_0800856c();\n  temp4 = (undefined4)((ulonglong)intermediate_result2 >> 0x20);\n  temp1 = (undefined4)intermediate_result2;\n  intermediate_result2 = calculate_double_multiplication_08008640(temp1,temp4,DAT_08009f88,DAT_08009f8c);\n  intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,temp3,(int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20));\n  temp5 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n  temp3 = (undefined4)intermediate_result1;\n  intermediate_result2 = calculate_double_multiplication_08008640(temp1,temp4,DAT_08009f90,DAT_08009f94);\n  if ((0x1f < result) || (*(uint *)(PTR_DAT_08009fd0 + (result + -1) * 4) == masked_input2)) {\n    intermediate_result3 = floating_point_operation_080082d0(temp3,temp5,(int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20));\n    if ((int)((masked_input2 >> 0x14) - ((uint)((int)((ulonglong)intermediate_result3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    intermediate_result2 = calculate_double_multiplication_08008640(temp1,temp4,DAT_0800a190,DAT_0800a194);\n    temp6 = (undefined4)((ulonglong)intermediate_result2 >> 0x20);\n    intermediate_result1 = floating_point_operation_080082d0(temp3,temp5,(int)intermediate_result2,temp6);\n    temp7 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    temp2 = (undefined4)intermediate_result1;\n    intermediate_result3 = floating_point_operation_080082d0(temp3,temp5,temp2,temp7);\n    intermediate_result2 = floating_point_operation_080082d0((int)intermediate_result3,(int)((ulonglong)intermediate_result3 >> 0x20),(int)intermediate_result2,temp6);\n    intermediate_result3 = calculate_double_multiplication_08008640(temp1,temp4,DAT_0800a198,DAT_0800a19c);\n    intermediate_result2 = floating_point_operation_080082d0((int)intermediate_result3,(int)((ulonglong)intermediate_result3 >> 0x20),(int)intermediate_result2,\n                          (int)((ulonglong)intermediate_result2 >> 0x20));\n    intermediate_result3 = floating_point_operation_080082d0(temp2,temp7,(int)intermediate_result2,(int)((ulonglong)intermediate_result2 >> 0x20));\n    if ((int)(((int)masked_input2 >> 0x14) - ((uint)((int)((ulonglong)intermediate_result3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    intermediate_result2 = calculate_double_multiplication_08008640(temp1,temp4,DAT_0800a1a0,DAT_0800a1a4);\n    temp3 = (undefined4)((ulonglong)intermediate_result2 >> 0x20);\n    intermediate_result1 = floating_point_operation_080082d0(temp2,temp7,(int)intermediate_result2,temp3);\n    intermediate_result3 = floating_point_operation_080082d0(temp2,temp7);\n    intermediate_result2 = floating_point_operation_080082d0((int)intermediate_result3,(int)((ulonglong)intermediate_result3 >> 0x20),(int)intermediate_result2,temp3);\n    intermediate_result3 = calculate_double_multiplication_08008640(temp1,temp4,DAT_0800a1a8,DAT_0800a1ac);\n    intermediate_result2 = floating_point_operation_080082d0((int)intermediate_result3,(int)((ulonglong)intermediate_result3 >> 0x20),(int)intermediate_result2,\n                          (int)((ulonglong)intermediate_result2 >> 0x20));\n  }\n  intermediate_result3 = floating_point_operation_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result2,\n                        (int)((ulonglong)intermediate_result2 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n  local_var1 = (undefined4)intermediate_result1;\n  *output = intermediate_result3;\n  intermediate_result1 = floating_point_operation_080082d0(local_var1,local_var2);\n  intermediate_result1 = floating_point_operation_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result2,\n                        (int)((ulonglong)intermediate_result2 >> 0x20));\n  output[1] = intermediate_result1;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)intermediate_result3;\n    *(int *)((int)output + 4) = (int)((ulonglong)intermediate_result3 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)intermediate_result1;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)intermediate_result1 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_080082d4",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_08008640",
                "FUN_080082d0",
                "FUN_0800a5a0",
                "FUN_0800856c",
                "FUN_08008ba0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009d78",
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "imported": false,
            "current_name": "complex_calculations_08009d78"
        },
        "FUN_08003826": {
            "renaming": {
                "FUN_08003826": "convert_float_to_string_08003826",
                "param_1": "input_value",
                "iVar1": "status_check_result",
                "uVar2": "result_calculation",
                "bVar3": "temp_byte",
                "uVar4": "temp_uint",
                "local_24": "processed_value",
                "acStack_1d": "string_buffer",
                "local_10": "current_value",
                "local_a": "buffer_index",
                "local_9": "loop_counter"
            },
            "code": "\nvoid convert_float_to_string_08003826(uint input_value)\n\n{\n  int status_check_result;\n  undefined4 result_calculation;\n  byte temp_byte;\n  uint temp_uint;\n  uint processed_value;\n  char string_buffer [13];\n  uint current_value;\n  byte buffer_index;\n  byte loop_counter;\n  \n  status_check_result = check_status_08009228(input_value,0);\n  processed_value = input_value;\n  if (status_check_result != 0) {\n    write_data_wrapper_08008250(0x2d);\n    processed_value = input_value ^ 0x80000000;\n  }\n  for (loop_counter = PTR_DAT_08003970[0x3d]; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    processed_value = floating_point_multiplication_08008eec(processed_value,DAT_08003974);\n  }\n  if (loop_counter != 0) {\n    processed_value = floating_point_multiplication_08008eec(processed_value,DAT_08003978);\n  }\n  result_calculation = calculate_result_08008cdc(processed_value,0x3f000000);\n  buffer_index = 0;\n  current_value = process_value_08009278(result_calculation);\n  string_buffer[(byte)PTR_DAT_08003970[0x3d] + 1] = '.';\n  for (; current_value != 0; current_value = (uint)((ulonglong)DAT_0800397c * (ulonglong)current_value >> 0x23)) {\n    if (buffer_index == PTR_DAT_08003970[0x3d]) {\n      buffer_index = buffer_index + 1;\n    }\n    temp_uint = (uint)buffer_index;\n    buffer_index = buffer_index + 1;\n    string_buffer[temp_uint + 1] =\n         (char)current_value + (char)(uint)((ulonglong)DAT_0800397c * (ulonglong)current_value >> 0x23) * -10\n         + '0';\n  }\n  while (buffer_index < (byte)PTR_DAT_08003970[0x3d]) {\n    temp_uint = (uint)buffer_index;\n    buffer_index = buffer_index + 1;\n    string_buffer[temp_uint + 1] = '0';\n  }\n  if (buffer_index == PTR_DAT_08003970[0x3d]) {\n    temp_byte = buffer_index + 1;\n    buffer_index = buffer_index + 2;\n    string_buffer[temp_byte + 1] = '0';\n  }\n  for (; buffer_index != 0; buffer_index = buffer_index - 1) {\n    write_data_wrapper_08008250(string_buffer[buffer_index]);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08008cdc",
                "FUN_08008250",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08003826",
            "calling": [
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_08004250",
                "FUN_080046d0"
            ],
            "imported": false,
            "current_name": "convert_float_to_string_08003826"
        },
        "FUN_0800923c": {
            "renaming": {
                "FUN_0800923c": "check_parameters_status_0800923c",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkParametersStatus_0800923c(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  combine_parameters_08009204();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_08009204"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800923c",
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "imported": false,
            "current_name": "check_parameters_status_0800923c"
        },
        "FUN_08002afc": {
            "renaming": {
                "FUN_08002afc": "process_data_08002afc",
                "param_1": "data1",
                "param_2": "data2",
                "iVar1": "statusCheckResult",
                "uVar2": "finalResult",
                "uVar3": "tempVar"
            },
            "code": "\nvoid processData_08002afc(int data1,int data2)\n\n{\n  int statusCheckResult;\n  undefined4 finalResult;\n  undefined4 tempVar;\n  \n  if (((data1 != 0) && (*(char *)(data1 + 0x25) == '\\0')) &&\n     (statusCheckResult = check_status_08009228(*(undefined4 *)(data1 + 0x18),*(undefined4 *)(data2 + 0x18)),\n     statusCheckResult != 0)) {\n    tempVar = *(undefined4 *)(data2 + 0x18);\n    finalResult = calculate_final_result_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                         *(undefined4 *)(data1 + 0x18),*(undefined4 *)(data1 + 0x20));\n    statusCheckResult = check_status_08009228(tempVar,finalResult);\n    if (statusCheckResult == 0) {\n      finalResult = calculate_final_result_08002978(*(uint *)(PTR_DAT_08002ba4 + 0x20) ^ 0x80000000,\n                           *(undefined4 *)(data1 + 0x18),*(undefined4 *)(data1 + 0x20));\n    }\n    else {\n      finalResult = *(undefined4 *)(data2 + 0x18);\n    }\n    statusCheckResult = check_non_zero_result_08009214(finalResult,*(undefined4 *)(data2 + 0x18));\n    if (statusCheckResult == 0) {\n      *(undefined4 *)(data2 + 0x18) = finalResult;\n      *(undefined *)(data2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08009214",
                "FUN_08002978",
                "FUN_08009228"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002afc",
            "calling": [
                "FUN_08002ba8"
            ],
            "imported": false,
            "current_name": "process_data_08002afc"
        },
        "FUN_08004c48": {
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "param_1": "input_flag"
            },
            "code": "\nvoid initialize_settings_08004c48(char input_flag)\n\n{\n  if (input_flag != '\\0') {\n    *(undefined4 *)PTR_DAT_08004d0c = DAT_08004d10;\n    *(undefined4 *)(PTR_DAT_08004d0c + 4) = DAT_08004d10;\n    *(undefined4 *)(PTR_DAT_08004d0c + 8) = DAT_08004d10;\n    PTR_DAT_08004d0c[0xd] = 10;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x10) = DAT_08004d14;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x14) = DAT_08004d18;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x20) = DAT_08004d1c;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x1c) = DAT_08004d20;\n    *(undefined2 *)(PTR_DAT_08004d0c + 0x18) = 0;\n    *(undefined2 *)(PTR_DAT_08004d0c + 0x1a) = 0xa80;\n    *(undefined4 *)(PTR_DAT_08004d0c + 0x24) = DAT_08004d24;\n  }\n  PTR_DAT_08004d0c[0x28] = 0;\n  PTR_DAT_08004d0c[0x28] = PTR_DAT_08004d0c[0x28] | 2;\n  PTR_DAT_08004d0c[0x28] = PTR_DAT_08004d0c[0x28] | 0x10;\n  *(undefined2 *)(PTR_DAT_08004d0c + 0x2a) = 0;\n  *(undefined4 *)(PTR_DAT_08004d0c + 0x2c) = DAT_08004d28;\n  *(undefined4 *)(PTR_DAT_08004d0c + 0x30) = DAT_08004d14;\n  *(undefined2 *)(PTR_DAT_08004d0c + 0x34) = 100;\n  *(undefined4 *)(PTR_DAT_08004d0c + 0x38) = 0x3f800000;\n  PTR_DAT_08004d0c[0x3c] = 0x19;\n  PTR_DAT_08004d0c[0x3d] = 3;\n  PTR_DAT_08004d0c[0x3e] = 0x19;\n  initialize_data_processing_08004c2a();\n  return;\n}\n\n",
            "called": [
                "FUN_08004c2a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08004c48",
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "imported": false,
            "current_name": "initialize_settings_08004c48"
        },
        "FUN_080002a0": {
            "renaming": {
                "FUN_080002a0": "wait_for_sum_080002a0",
                "param_1": "targetSum"
            },
            "code": "\nvoid waitForSum_080002a0(undefined4 targetSum)\n\n{\n  wait_until_sum_reached_08005a98(targetSum);\n  return;\n}\n\n",
            "called": [
                "FUN_08005a98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002a0",
            "calling": [
                "FUN_08002408"
            ],
            "imported": false,
            "current_name": "wait_for_sum_080002a0"
        },
        "FUN_08009250": {
            "renaming": {
                "FUN_08009250": "check_parameters_status_08009250",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "code": "\nbool checkParametersStatus_08009250(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  swap_parameters_080091fc();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009250",
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "imported": false,
            "current_name": "check_parameters_status_08009250"
        },
        "FUN_0800640c": {
            "renaming": {
                "FUN_0800640c": "update_settings_0800640c",
                "param_1": "mode",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "config_value",
                "local_18": "config_option1",
                "local_14": "config_option2",
                "local_10": "config_option3",
                "local_c": "config_option4"
            },
            "code": "\nvoid update_settings_0800640c(int mode,uint value1,uint value2)\n\n{\n  undefined4 config_value;\n  undefined4 config_option1;\n  undefined4 config_option2;\n  undefined4 config_option3;\n  undefined4 config_option4;\n  \n  if (mode == 0) {\n    *(uint *)(DAT_080064b0 + 0x30) = *(uint *)(DAT_080064b0 + 0x30) | 1;\n    config_value = 0x100;\n    config_option1 = 2;\n    config_option3 = 3;\n    config_option2 = 0;\n    config_option4 = 0;\n    update_configuration_08006e88(DAT_080064b4,&config_value);\n    *(uint *)(DAT_080064b0 + 8) = value2 | value1 | *(uint *)(DAT_080064b0 + 8) & 0xf89fffff;\n  }\n  else {\n    *(uint *)(DAT_080064b0 + 0x30) = *(uint *)(DAT_080064b0 + 0x30) | 4;\n    config_value = 0x200;\n    config_option1 = 2;\n    config_option3 = 3;\n    config_option2 = 0;\n    config_option4 = 0;\n    update_configuration_08006e88(DAT_080064b8,&config_value);\n    *(uint *)(DAT_080064b0 + 8) = value1 | value2 << 3 | *(uint *)(DAT_080064b0 + 8) & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_08006e88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800640c",
            "calling": [],
            "imported": false,
            "current_name": "update_settings_0800640c"
        },
        "FUN_08008af0": {
            "renaming": {
                "FUN_08008af0": "process_data_wrapper_08008af0",
                "param_1": "inputData1",
                "param_2": "inputData2",
                "param_3": "inputData3",
                "param_4": "inputData4"
            },
            "code": "\nvoid processDataWrapper_08008af0(undefined4 inputData1,undefined4 inputData2,undefined4 inputData3,undefined4 inputData4)\n\n{\n  process_data_08008b00(inputData3,inputData4,inputData1,inputData2);\n  return;\n}\n\n",
            "called": [
                "FUN_08008b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008af0",
            "calling": [
                "FUN_08008b4c",
                "FUN_08008b60"
            ],
            "imported": false,
            "current_name": "process_data_wrapper_08008af0"
        },
        "FUN_08006e1a": {
            "renaming": {
                "FUN_08006e1a": "check_bit_in_char_08006e1a",
                "param_1": "inputChar",
                "uVar1": "bitCheckResult"
            },
            "code": "\nundefined4 checkBitInChar_08006e1a(char inputChar)\n\n{\n  undefined4 bitCheckResult;\n  \n  bitCheckResult = check_bit_in_lookup_table_08006ac0((int)inputChar);\n  return bitCheckResult;\n}\n\n",
            "called": [
                "FUN_08006ac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08006e1a",
            "calling": [],
            "imported": false,
            "current_name": "check_bit_in_char_08006e1a"
        },
        "FUN_080052ac": {
            "renaming": {
                "FUN_080052ac": "update_register_value_080052ac",
                "param_1": "inputValue"
            },
            "code": "\nvoid updateRegisterValue_080052ac(uint inputValue)\n\n{\n  *(uint *)(DAT_080052d8 + 0x14) = inputValue | *(uint *)(DAT_080052d8 + 0x14) & 0xfffffaaf;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080052ac",
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "imported": false,
            "current_name": "update_register_value_080052ac"
        },
        "FUN_08008286": {
            "renaming": {
                "FUN_08008286": "fetch_processed_byte_08008286",
                "uVar1": "lower_byte",
                "iVar2": "bit_status"
            },
            "code": "\nundefined fetch_processed_byte_08008286(void)\n\n{\n  undefined lower_byte;\n  int bit_status;\n  \n  bit_status = check_bit_status_08007e58();\n  if (bit_status != 0) {\n    lower_byte = get_lower_byte_08007e84();\n    bit_status = process_byte_08005900(lower_byte);\n    if (bit_status == 0) {\n      return lower_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "called": [
                "FUN_08007e84",
                "FUN_08005900",
                "FUN_08007e58"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008286",
            "calling": [
                "FUN_08003f34"
            ],
            "imported": false,
            "current_name": "fetch_processed_byte_08008286"
        },
        "FUN_0800b5bc": {
            "renaming": {
                "FUN_0800b5bc": "do_nothing_0800b5bc"
            },
            "code": "\nvoid do_nothing_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b5bc",
            "calling": [],
            "imported": false,
            "current_name": "do_nothing_0800b5bc"
        },
        "FUN_08008b74": {
            "renaming": {
                "FUN_08008b74": "check_conditions_08008b74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "code": "\nundefined4 check_conditions_08008b74(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08008b74",
            "calling": [
                "FUN_080098d0"
            ],
            "imported": false,
            "current_name": "check_conditions_08008b74"
        },
        "FUN_0800b524": {
            "renaming": {
                "FUN_0800b524": "process_data_0800b524",
                "param_1": "mode",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointerVar1",
                "uVar2": "result",
                "uVar3": "tempVar",
                "iVar4": "intVar4",
                "iVar5": "intVar5",
                "uVar6": "uintVar6"
            },
            "code": "\nundefined4 processData_0800b524(int mode,undefined4 data,undefined4 param3,undefined4 param4)\n\n{\n  undefined *pointerVar1;\n  undefined4 result;\n  uint tempVar;\n  int intVar4;\n  int intVar5;\n  uint uintVar6;\n  \n  pointerVar1 = PTR_PTR_DAT_0800b5ac;\n  do_nothing_0800b51c(*(undefined4 *)PTR_PTR_DAT_0800b5ac);\n  intVar4 = *(int *)PTR_PTR_DAT_0800b5a8;\n  intVar5 = *(int *)(intVar4 + 0x148);\n  if (intVar5 == 0) {\n    intVar5 = intVar4 + 0x14c;\n    *(int *)(intVar4 + 0x148) = intVar5;\n  }\n  uintVar6 = *(uint *)(intVar5 + 4);\n  if ((int)uintVar6 < 0x20) {\n    if (mode != 0) {\n      intVar4 = intVar5 + uintVar6 * 4;\n      *(undefined4 *)(intVar4 + 0x88) = param3;\n      tempVar = 1 << (uintVar6 & 0xff);\n      *(uint *)(intVar5 + 0x188) = *(uint *)(intVar5 + 0x188) | tempVar;\n      *(undefined4 *)(intVar4 + 0x108) = param4;\n      if (mode == 2) {\n        *(uint *)(intVar5 + 0x18c) = tempVar | *(uint *)(intVar5 + 0x18c);\n      }\n    }\n    result = *(undefined4 *)pointerVar1;\n    *(uint *)(intVar5 + 4) = uintVar6 + 1;\n    *(undefined4 *)(intVar5 + (uintVar6 + 2) * 4) = data;\n    do_nothing_0800b520(result);\n    result = 0;\n  }\n  else {\n    do_nothing_0800b520(*(undefined4 *)pointerVar1);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b524",
            "calling": [
                "FUN_0800b4d0"
            ],
            "imported": false,
            "current_name": "process_data_0800b524"
        },
        "FUN_08005214": {
            "renaming": {
                "FUN_08005214": "do_nothing_08005214"
            },
            "code": "\nvoid do_nothing_08005214(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08005214",
            "calling": [
                "FUN_08005250"
            ],
            "imported": false,
            "current_name": "do_nothing_08005214"
        },
        "FUN_08007ea4": {
            "renaming": {
                "FUN_08007ea4": "update_register_flags_08007ea4",
                "param_1": "inputValue"
            },
            "code": "\nvoid updateRegisterFlags_08007ea4(int inputValue)\n\n{\n  if (inputValue == DAT_08007f38) {\n    *(uint *)(DAT_08007f3c + 0x44) = *(uint *)(DAT_08007f3c + 0x44) | 0x10;\n  }\n  else if (inputValue == DAT_08007f40) {\n    *(uint *)(DAT_08007f3c + 0x40) = *(uint *)(DAT_08007f3c + 0x40) | 0x20000;\n  }\n  else if (inputValue == DAT_08007f44) {\n    *(uint *)(DAT_08007f3c + 0x40) = *(uint *)(DAT_08007f3c + 0x40) | 0x40000;\n  }\n  else if (inputValue == DAT_08007f48) {\n    *(uint *)(DAT_08007f3c + 0x40) = *(uint *)(DAT_08007f3c + 0x40) | 0x80000;\n  }\n  else if (inputValue == DAT_08007f4c) {\n    *(uint *)(DAT_08007f3c + 0x40) = *(uint *)(DAT_08007f3c + 0x40) | 0x100000;\n  }\n  else if (inputValue == DAT_08007f50) {\n    *(uint *)(DAT_08007f3c + 0x44) = *(uint *)(DAT_08007f3c + 0x44) | 0x20;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007ea4",
            "calling": [
                "FUN_08008190"
            ],
            "imported": false,
            "current_name": "update_register_flags_08007ea4"
        },
        "FUN_08007756": {
            "renaming": {
                "FUN_08007756": "process_data_08007756",
                "uVar1": "dataValue"
            },
            "code": "\nvoid processData_08007756(void)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value_08005a84();\n  if ((dataValue & 0x1ff) == 0) {\n    toggle_bit_080076c8(0x3c);\n  }\n  if ((dataValue & 0xf) == 0) {\n    update_registers_08007930();\n  }\n  increment_counter_08005a68();\n  return;\n}\n\n",
            "called": [
                "FUN_08007930",
                "FUN_080076c8",
                "FUN_08005a84",
                "FUN_08005a68"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007756",
            "calling": [],
            "imported": false,
            "current_name": "process_data_08007756"
        },
        "FUN_0800b520": {
            "renaming": {
                "FUN_0800b520": "do_nothing_0800b520"
            },
            "code": "\nvoid do_nothing_0800b520(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800b520",
            "calling": [
                "FUN_0800b524"
            ],
            "imported": false,
            "current_name": "do_nothing_0800b520"
        },
        "FUN_0800423c": {
            "renaming": {
                "FUN_0800423c": "display_grbl_settings_0800423c",
                "write_characters_080036c6": "writeCharacters"
            },
            "code": "\nvoid displayGrblSettings_0800423c(void)\n\n{\n  writeCharacters(PTR_s_____view_Grbl_settings______view_0800424c);\n  return;\n}\n\n",
            "called": [
                "FUN_080036c6"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0800423c",
            "calling": [
                "FUN_08003b98"
            ],
            "imported": false,
            "current_name": "display_grbl_settings_0800423c"
        },
        "FUN_08009264": {
            "renaming": {
                "FUN_08009264": "check_swapped_parameters_08009264",
                "in_CY": "swappedFlag"
            },
            "code": "\nbool checkSwappedParameters_08009264(void)\n\n{\n  char swappedFlag;\n  \n  swap_parameters_080091fc();\n  return swappedFlag == '\\0';\n}\n\n",
            "called": [
                "FUN_080091fc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08009264",
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "imported": false,
            "current_name": "check_swapped_parameters_08009264"
        },
        "FUN_08007e08": {
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08",
                "initialize_registers_08007ad0": "initialize_registers",
                "initialize_device_settings_08007d08": "initialize_device_settings",
                "update_flags_08007da8": "update_system_flags"
            },
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  initialize_registers();\n  initialize_device_settings();\n  update_system_flags();\n  return;\n}\n\n",
            "called": [
                "FUN_08007ad0",
                "FUN_08007da8",
                "FUN_08007d08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08007e08",
            "calling": [
                "FUN_08007540"
            ],
            "imported": false,
            "current_name": "initialize_system_08007e08"
        },
        "FUN_08002fac": {
            "renaming": {
                "FUN_08002fac": "compare_values_08002fac"
            },
            "code": "\nbool compare_values_08002fac(void)\n\n{\n  return *PTR_DAT_08002fcc == *PTR_DAT_08002fd0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x08002fac",
            "calling": [
                "FUN_08001e98"
            ],
            "imported": false,
            "current_name": "compare_values_08002fac"
        },
        "FUN_080002b6": {
            "renaming": {
                "FUN_080002b6": "compare_results_080002b6",
                "param_1": "inputValue",
                "uVar1": "resultHighBits",
                "uVar2": "sumHighBits",
                "bVar3": "comparisonFlag",
                "lVar4": "initialResult",
                "uVar5": "currentResult"
            },
            "code": "\nvoid compareResults_080002b6(uint inputValue)\n\n{\n  uint resultHighBits;\n  uint sumHighBits;\n  bool comparisonFlag;\n  longlong initialResult;\n  undefined8 currentResult;\n  \n  initialResult = calculate_result_08000268();\n  sumHighBits = (uint)(initialResult + (ulonglong)inputValue >> 0x20);\n  do {\n    currentResult = calculate_result_08000268();\n    resultHighBits = (uint)((ulonglong)currentResult >> 0x20);\n    comparisonFlag = sumHighBits <= resultHighBits;\n    if (resultHighBits == sumHighBits) {\n      comparisonFlag = (uint)(initialResult + (ulonglong)inputValue) <= (uint)currentResult;\n    }\n  } while (!comparisonFlag);\n  return;\n}\n\n",
            "called": [
                "FUN_08000268"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x080002b6",
            "calling": [],
            "imported": false,
            "current_name": "compare_results_080002b6"
        }
    },
    "used_tokens": 182382,
    "layers": [
        [
            "FUN_0800192c",
            "FUN_08006950",
            "FUN_08008ba0",
            "FUN_08007a10",
            "FUN_0800856c",
            "FUN_0800597c",
            "FUN_08008cd8",
            "FUN_08000188",
            "FUN_080082d0",
            "FUN_080018cc",
            "FUN_080079e0",
            "FUN_08006a58",
            "FUN_08005a84",
            "FUN_08008c30",
            "FUN_080082d4",
            "FUN_08007bf0",
            "FUN_08008590",
            "FUN_08007c5e",
            "FUN_0800587c",
            "FUN_08008a02",
            "FUN_08008cdc",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08006e88",
            "FUN_08007e58",
            "FUN_080059f8",
            "FUN_0800b3dc",
            "FUN_0800756c",
            "FUN_08002f74",
            "FUN_0800b3e8",
            "FUN_08006a18",
            "FUN_08006ac0",
            "FUN_0800919c",
            "FUN_0800854c",
            "FUN_08008e44",
            "FUN_0800733e",
            "FUN_080069e4",
            "FUN_0800b2d4",
            "FUN_08008e3c",
            "FUN_08007bc2",
            "FUN_080035ec",
            "FUN_08006c70",
            "FUN_08005a68",
            "FUN_0800b2e0",
            "FUN_08007c40",
            "FUN_08008eec",
            "FUN_08006b54",
            "FUN_08007e84",
            "FUN_08007402",
            "FUN_08002870",
            "FUN_08000210",
            "FUN_08006c04",
            "FUN_08009278",
            "FUN_08007da8",
            "FUN_08008a74",
            "FUN_0800b430",
            "FUN_08005360",
            "FUN_08003980",
            "FUN_080052dc",
            "FUN_080064ec",
            "FUN_08006ba0",
            "FUN_08002896",
            "FUN_080001ac",
            "FUN_08000478",
            "FUN_08007e1c",
            "FUN_08006b00",
            "FUN_08009054",
            "FUN_08005250",
            "FUN_08007430",
            "FUN_08005bdc",
            "FUN_080069b4",
            "FUN_08007b70",
            "FUN_080018fc",
            "FUN_08006998",
            "FUN_080078f4",
            "FUN_08008bf0",
            "FUN_08007854",
            "FUN_080076c8",
            "FUN_08006a8c",
            "FUN_0800881c",
            "FUN_080052ac",
            "FUN_08008b74",
            "FUN_0800b524",
            "FUN_08007ea4",
            "FUN_08002fac"
        ],
        [
            "FUN_08005984",
            "FUN_08008b00",
            "FUN_08009798",
            "FUN_08009204",
            "FUN_08005760",
            "FUN_08005a98",
            "FUN_08006c9c",
            "FUN_08005778",
            "FUN_080028bc",
            "FUN_08006628",
            "FUN_08008250",
            "FUN_08006ce0",
            "FUN_08006d4a",
            "FUN_08008894",
            "FUN_08006dfe",
            "FUN_08006d66",
            "FUN_080095b8",
            "FUN_08006cf6",
            "FUN_08002ef0",
            "FUN_08000268",
            "FUN_080001f8",
            "FUN_08009654",
            "FUN_08006d98",
            "FUN_080079c0",
            "FUN_08002908",
            "FUN_080057e4",
            "FUN_08006d8a",
            "FUN_08007520",
            "FUN_08007884",
            "FUN_08006dc4",
            "FUN_08005c30",
            "FUN_080004fc",
            "FUN_08005238",
            "FUN_08007d08",
            "FUN_08006de0",
            "FUN_08006d2e",
            "FUN_08005cec",
            "FUN_0800b4d0",
            "FUN_08002f40",
            "FUN_08008640",
            "FUN_080002f0",
            "FUN_0800778c",
            "FUN_08005790",
            "FUN_0800826a",
            "FUN_08005324",
            "FUN_0800640c",
            "FUN_08006e1a"
        ],
        [
            "FUN_0800585c",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_0800369c",
            "FUN_08009214",
            "FUN_080053a0",
            "FUN_0800a1bc",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_08006d72",
            "FUN_0800583c",
            "FUN_0800b2e8",
            "FUN_0800056c",
            "FUN_08002f24",
            "FUN_08006680",
            "FUN_08000340",
            "FUN_080091fc",
            "FUN_080036c6",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_080025e8",
            "FUN_08005814",
            "FUN_08009228",
            "FUN_080066cc",
            "FUN_0800618c",
            "FUN_0800283a",
            "FUN_08000310",
            "FUN_08007a70",
            "FUN_0800923c",
            "FUN_080002a0",
            "FUN_08008af0",
            "FUN_080002b6"
        ],
        [
            "FUN_08007ad0",
            "FUN_0800195c",
            "FUN_08000374",
            "FUN_080037fc",
            "FUN_0800375c",
            "FUN_08005900",
            "FUN_08002638",
            "FUN_080098d0",
            "FUN_080059b4",
            "FUN_08004148",
            "FUN_08004030",
            "FUN_080003ec",
            "FUN_08003740",
            "FUN_08007f54",
            "FUN_08007436",
            "FUN_08007c7c",
            "FUN_080041a0",
            "FUN_08003a18",
            "FUN_08004228",
            "FUN_08009b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08003826",
            "FUN_08009250",
            "FUN_0800423c",
            "FUN_08009264"
        ],
        [
            "FUN_08009318",
            "FUN_080039a0",
            "FUN_0800184c",
            "FUN_080046d0",
            "FUN_080094c0",
            "FUN_08004250",
            "FUN_0800981c",
            "FUN_08004bf4",
            "FUN_08004940",
            "FUN_0800af78",
            "FUN_08008190",
            "FUN_080074c8",
            "FUN_08004900",
            "FUN_08004bc0",
            "FUN_08004c2a",
            "FUN_08002978",
            "FUN_08008286",
            "FUN_08007e08"
        ],
        [
            "FUN_08007930",
            "FUN_08004e30",
            "FUN_080029d8",
            "FUN_0800a5a0",
            "FUN_08009990",
            "FUN_08002c18",
            "thunk_FUN_08009990",
            "FUN_08004d7c",
            "FUN_08004d2c",
            "FUN_08001994",
            "FUN_08002afc",
            "FUN_08004c48"
        ],
        [
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08001d4c",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_08002a94",
            "FUN_080004ac",
            "FUN_08009d78",
            "FUN_08007756"
        ],
        [
            "FUN_08002edc",
            "FUN_080096e8",
            "FUN_08009410",
            "FUN_080051b4"
        ],
        [
            "FUN_08003618",
            "FUN_08003004"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08001f00",
            "FUN_0800525c",
            "FUN_08000220",
            "FUN_08002408",
            "FUN_080024c4"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ],
        [
            "FUN_080092c4"
        ]
    ],
    "locked_functions": []
}