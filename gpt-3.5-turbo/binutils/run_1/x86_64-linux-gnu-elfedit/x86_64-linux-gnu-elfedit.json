{
    "functions": {
        "_DT_INIT": {
            "entrypoint": "0x00102000",
            "current_name": "_DT_INIT",
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__gmon_start__"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102020": {
            "entrypoint": "0x00102020",
            "current_name": "execute_indirect_jump_00102020",
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_ptr *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "function_pointer",
                "code": "function_ptr"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102020": {
                    "12": "execute_indirect_jump",
                    "1": "execute_function_from_address",
                    "6": "execute_indirect_call",
                    "3": "execute_indirect_function",
                    "2": "execute_function"
                },
                "undefined": {
                    "3": "function_address",
                    "1": "new_ptr",
                    "4": "function_pointer",
                    "2": "target_address"
                },
                "code": {
                    "3": "function_ptr",
                    "1": "indirect_jump_function"
                },
                "<original_parameter_name>": {
                    "1": "<new_parameter_name>"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "PTR_FUN_00102020": {
                    "1": "indirect_jump_function_pointer"
                },
                "<new_parameter_name_1>": {
                    "1": "<unchanged>"
                },
                "<new_variable_name_1>": {
                    "1": "<unchanged>"
                },
                "PTR_void": {
                    "1": "function_pointer"
                },
                "PTR": {
                    "1": "pointer"
                },
                "DAT": {
                    "1": "data"
                }
            }
        },
        "free": {
            "entrypoint": "0x00102030",
            "current_name": "free",
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_001032de",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00102f65",
                "FUN_00103bf0",
                "FUN_00103006"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strcasecmp": {
            "entrypoint": "0x00102040",
            "current_name": "strcasecmp",
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010234b",
                "FUN_00104c60",
                "FUN_00104d30",
                "FUN_001022c0",
                "FUN_00104ce0",
                "FUN_00104da0"
            ],
            "called": [
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "abort": {
            "entrypoint": "0x00102050",
            "current_name": "abort",
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102c98",
                "FUN_0010354e",
                "FUN_00104de0",
                "caseD_0",
                "FUN_0010347f"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "__errno_location": {
            "entrypoint": "0x00102060",
            "current_name": "__errno_location",
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "called": [
                "__errno_location"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strncmp": {
            "entrypoint": "0x00102070",
            "current_name": "strncmp",
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001027fd"
            ],
            "called": [
                "strncmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ferror": {
            "entrypoint": "0x00102080",
            "current_name": "ferror",
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "ferror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fread": {
            "entrypoint": "0x00102090",
            "current_name": "fread",
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_00104de0",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be"
            ],
            "called": [
                "fread"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "textdomain": {
            "entrypoint": "0x001020a0",
            "current_name": "textdomain",
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "textdomain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fclose": {
            "entrypoint": "0x001020b0",
            "current_name": "fclose",
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "called": [
                "fclose"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "bindtextdomain": {
            "entrypoint": "0x001020c0",
            "current_name": "bindtextdomain",
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "bindtextdomain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "dcgettext": {
            "entrypoint": "0x001020d0",
            "current_name": "dcgettext",
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102323",
                "FUN_00102c98",
                "error",
                "FUN_00102434",
                "FUN_00104de0",
                "FUN_001032de",
                "FUN_001029a5",
                "FUN_00104da0",
                "caseD_0",
                "FUN_0010358d",
                "FUN_0010234b",
                "FUN_0010354e",
                "warn",
                "FUN_001025ab",
                "FUN_00103bf0",
                "FUN_001024ec",
                "FUN_00102cc4",
                "FUN_00102558",
                "FUN_001028be",
                "FUN_001022c0",
                "FUN_0010347f"
            ],
            "called": [
                "dcgettext"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strlen": {
            "entrypoint": "0x001020e0",
            "current_name": "strlen",
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_00103186",
                "FUN_001027fd",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_00103160"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "mmap": {
            "entrypoint": "0x001020f0",
            "current_name": "mmap",
            "code": "\n\n\nvoid * mmap(void *__addr,size_t __len,int __prot,int __flags,int __fd,__off_t __offset)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = mmap(__addr,__len,__prot,__flags,__fd,__offset);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "mmap"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "getopt_long": {
            "entrypoint": "0x00102100",
            "current_name": "getopt_long",
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "getopt_long"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "printf": {
            "entrypoint": "0x00102110",
            "current_name": "printf",
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "printf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "rewind": {
            "entrypoint": "0x00102120",
            "current_name": "rewind",
            "code": "\n\n\nvoid rewind(FILE *__stream)\n\n{\n  rewind(__stream);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "rewind"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "snprintf": {
            "entrypoint": "0x00102130",
            "current_name": "snprintf",
            "code": "\n\n\nint snprintf(char *__s,size_t __maxlen,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = snprintf(__s,__maxlen,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d"
            ],
            "called": [
                "snprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "sbrk": {
            "entrypoint": "0x00102140",
            "current_name": "sbrk",
            "code": "\n\n\nvoid * sbrk(intptr_t __delta)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = sbrk(__delta);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102fc7"
            ],
            "called": [
                "sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strcmp": {
            "entrypoint": "0x00102150",
            "current_name": "strcmp",
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fprintf": {
            "entrypoint": "0x00102160",
            "current_name": "fprintf",
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102fc7",
                "error",
                "warn",
                "FUN_001032de",
                "FUN_00103bf0"
            ],
            "called": [
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "ftell": {
            "entrypoint": "0x00102170",
            "current_name": "ftell",
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104de0",
                "FUN_00103bf0"
            ],
            "called": [
                "ftell"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "stat": {
            "entrypoint": "0x00102180",
            "current_name": "stat",
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "stat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "memcpy": {
            "entrypoint": "0x00102190",
            "current_name": "memcpy",
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "memcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fileno": {
            "entrypoint": "0x001021a0",
            "current_name": "fileno",
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "called": [
                "fileno"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "malloc": {
            "entrypoint": "0x001021b0",
            "current_name": "malloc",
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_00103449",
                "FUN_001025ab",
                "FUN_00102cc4",
                "FUN_00105370"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fflush": {
            "entrypoint": "0x001021c0",
            "current_name": "fflush",
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "error",
                "warn"
            ],
            "called": [
                "fflush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fseek": {
            "entrypoint": "0x001021d0",
            "current_name": "fseek",
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_00104de0",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be"
            ],
            "called": [
                "fseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "realloc": {
            "entrypoint": "0x001021e0",
            "current_name": "realloc",
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103449"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "munmap": {
            "entrypoint": "0x001021f0",
            "current_name": "munmap",
            "code": "\n\n\nint munmap(void *__addr,size_t __len)\n\n{\n  int iVar1;\n  \n  iVar1 = munmap(__addr,__len);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "munmap"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "setlocale": {
            "entrypoint": "0x00102200",
            "current_name": "setlocale",
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "setlocale"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "memmove": {
            "entrypoint": "0x00102210",
            "current_name": "memmove",
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fopen": {
            "entrypoint": "0x00102220",
            "current_name": "fopen",
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "called": [
                "fopen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "vfprintf": {
            "entrypoint": "0x00102230",
            "current_name": "vfprintf",
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "error",
                "warn"
            ],
            "called": [
                "vfprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strtoul": {
            "entrypoint": "0x00102240",
            "current_name": "strtoul",
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be"
            ],
            "called": [
                "strtoul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "exit": {
            "entrypoint": "0x00102250",
            "current_name": "exit",
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102fbc",
                "FUN_001032de",
                "FUN_00103bf0"
            ],
            "called": [
                "exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fwrite": {
            "entrypoint": "0x00102260",
            "current_name": "fwrite",
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "fwrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strdup": {
            "entrypoint": "0x00102270",
            "current_name": "strdup",
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001025ab"
            ],
            "called": [
                "strdup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "strerror": {
            "entrypoint": "0x00102280",
            "current_name": "strerror",
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "called": [
                "strerror"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "fstat": {
            "entrypoint": "0x00102290",
            "current_name": "fstat",
            "code": "\n\n\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = fstat(__fd,__buf);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "called": [
                "fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "getc": {
            "entrypoint": "0x001022a0",
            "current_name": "getc",
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001025ab"
            ],
            "called": [
                "getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "__cxa_finalize": {
            "entrypoint": "0x001022b0",
            "current_name": "__cxa_finalize",
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "_FINI_0"
            ],
            "called": [
                "__cxa_finalize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001022c0": {
            "entrypoint": "0x001022c0",
            "current_name": "update_x86_feature_001022c0",
            "code": "\nundefined  [16] update_x86_feature_001022c0(void)\n\n{\n  int comparison_result;\n  uint feature_mask;\n  undefined8 error_message;\n  char *feature_name;\n  int is_enabled;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  comparison_result = strcasecmp(feature_name,\"lam_u48\");\n  if (comparison_result == 0) {\n    feature_mask = 4;\n  }\n  else {\n    comparison_result = strcasecmp(feature_name,\"lam_u57\");\n    feature_mask = 8;\n    if (comparison_result != 0) {\n      error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n      error(error_message);\n      error_message = 0xffffffff;\n      goto LAB_00104ca5;\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_mask | DAT_00109440;\n    DAT_00109444 = ~feature_mask & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_mask | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_mask;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_001022c0": "update_x86_feature_001022c0",
                "unaff_RBX": "feature_name",
                "unaff_EBP": "is_enabled",
                "iVar1": "comparison_result",
                "uVar2": "feature_mask",
                "uVar3": "error_message",
                "auVar4": "return_value",
                "unaff_retaddr": "return_address",
                "uVar4": "result_value"
            },
            "calling": [
                "FUN_00104c60"
            ],
            "called": [
                "dcgettext",
                "error",
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001022c0": {
                    "1": "update_feature",
                    "4": "update_feature_flags",
                    "15": "update_x86_feature",
                    "8": "update_x86_features"
                },
                "unaff_RBX": {
                    "14": "feature",
                    "15": "feature_name",
                    "1": "input_feature"
                },
                "unaff_EBP": {
                    "2": "flag",
                    "1": "disable_feature",
                    "5": "is_zero",
                    "3": "is_enable",
                    "6": "is_enabled"
                },
                "iVar1": {
                    "1": "result",
                    "11": "comparison_result",
                    "2": "strcmp_result",
                    "10": "strcasecmp_result"
                },
                "uVar2": {
                    "1": "feature_bit",
                    "9": "feature_value",
                    "12": "feature_mask",
                    "2": "feature_flag"
                },
                "uVar3": {
                    "23": "error_message",
                    "2": "error_string",
                    "4": "error_msg",
                    "1": "error_code"
                },
                "auVar4": {
                    "6": "result",
                    "15": "return_value"
                },
                "unaff_retaddr": {
                    "10": "return_address"
                },
                "uVar4": {
                    "1": "result_value"
                }
            }
        },
        "FUN_00102323": {
            "entrypoint": "0x00102323",
            "current_name": "print_unknown_osabi_error_00102323",
            "code": "\nundefined  [16] print_unknown_osabi_error_00102323(void)\n\n{\n  undefined8 error_message;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00102323": "print_unknown_osabi_error_00102323",
                "uVar1": "error_message",
                "auVar2": "return_value",
                "unaff_retaddr": "return_address"
            },
            "calling": [
                "FUN_00104ce0"
            ],
            "called": [
                "dcgettext",
                "error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102323": {
                    "2": "get_unknown_osabi_error_message",
                    "17": "print_unknown_osabi_error",
                    "6": "print_unknown_osabi"
                },
                "uVar1": {
                    "16": "error_message",
                    "2": "error_string",
                    "1": "msg"
                },
                "auVar2": {
                    "1": "ret_value",
                    "16": "return_value",
                    "2": "return_address"
                },
                "unaff_retaddr": {
                    "2": "unaffected_return_address",
                    "21": "return_address"
                }
            }
        },
        "FUN_0010234b": {
            "entrypoint": "0x0010234b",
            "current_name": "get_machine_type_0010234b",
            "code": "\nint get_machine_type_0010234b(void)\n\n{\n  int result;\n  undefined8 error_message;\n  char *machine_type;\n  \n  result = strcasecmp(machine_type,\"x86_64\");\n  if (result == 0) {\n    result = 0x3e;\n  }\n  else {\n    result = strcasecmp(machine_type,\"x86-64\");\n    if (result == 0) {\n      result = 0x3e;\n    }\n    else {\n      result = strcasecmp(machine_type,\"none\");\n      if (result != 0) {\n        error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n        error(error_message);\n        result = -1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0010234b": "get_machine_type_0010234b",
                "unaff_RBX": "machine_type",
                "iVar1": "result",
                "uVar2": "error_message"
            },
            "calling": [
                "FUN_00104d30"
            ],
            "called": [
                "dcgettext",
                "error",
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010234b": {
                    "3": "check_machine_type",
                    "25": "get_machine_type",
                    "1": "identify_machine_type"
                },
                "unaff_RBX": {
                    "31": "machine_type"
                },
                "iVar1": {
                    "6": "comparison_result",
                    "21": "result"
                },
                "uVar2": {
                    "21": "error_message",
                    "1": "error_string",
                    "4": "error_msg"
                }
            }
        },
        "FUN_001023ce": {
            "entrypoint": "0x001023ce",
            "current_name": "get_one_001023ce",
            "code": "\nuint64_t get_one_001023ce(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_001023ce": "get_one_001023ce",
                "undefined8": "uint64_t",
                "return": "result"
            },
            "calling": [
                "FUN_00104da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001023ce": {
                    "1": "get_result",
                    "3": "get_value",
                    "2": "get_constant_value",
                    "13": "get_one"
                },
                "undefined8": {
                    "6": "uint64_t",
                    "1": "unsigned_long",
                    "2": "int"
                },
                "return": {
                    "1": "status",
                    "6": "result"
                },
                "": {
                    "1": ""
                },
                "<no parameters>": {
                    "1": ""
                },
                "<no variables>": {
                    "1": ""
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "RET": {
                    "1": "result"
                },
                "return_value": {
                    "1": "result"
                }
            }
        },
        "FUN_00102434": {
            "entrypoint": "0x00102434",
            "current_name": "update_elf_header_00102434",
            "code": "\nundefined8 update_elf_header_00102434(void)\n\n{\n  undefined8 error_message;\n  size_t write_result;\n  FILE *file;\n  char *error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n  print_error_message(error_message);\n  if (DAT_001093e6 == '\\x01') {\n    if (DAT_0010941a == DAT_0010916c) {\n      return 0;\n    }\n    if (DAT_00109170 == 0xffffffff) {\n      if (DAT_0010941a == 6) {\n        DAT_00109170 = 1;\n      }\n      else if (DAT_0010941a < 7) {\n        DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n      }\n      else {\n        DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n      }\n    }\n    if ((DAT_001093e4 == DAT_00109170) || (DAT_00109170 == 3)) {\n      if ((DAT_001093e4 == DAT_00109168) || (DAT_00109168 == 3)) {\n        if ((DAT_0010941a == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n          if ((DAT_00109164 == 0xffffffff) || (DAT_00109418 == DAT_00109164)) {\n            if ((DAT_0010915c == 0xffffffff) || (DAT_001093e7 == DAT_0010915c)) {\n              if ((DAT_001093e8 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                if (DAT_001093e4 == 1) {\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    DAT_00109387 = (undefined)DAT_00109158;\n                  }\n                  if (DAT_00109150 != -1) {\n                    DAT_00109388 = (undefined)DAT_00109150;\n                  }\n                  write_result = fwrite(&DAT_00109380,0x34,1,file);\n                  if (write_result == 1) {\n                    return 0;\n                  }\n                  error_message = update_elf_header_00102434();\n                  return error_message;\n                }\n                if (DAT_001093e4 != 2) {\n                    \n                  abort();\n                }\n                if (DAT_0010916c != 0xffffffff) {\n                  (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                }\n                if (DAT_00109160 != -1) {\n                  (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                }\n                if (DAT_00109158 != -1) {\n                  DAT_00109347 = (undefined)DAT_00109158;\n                }\n                if (DAT_00109150 != -1) {\n                  DAT_00109348 = (undefined)DAT_00109150;\n                }\n                write_result = fwrite(&DAT_00109340,0x40,1,file);\n                if (write_result == 1) {\n                  return 0;\n                }\n                error_message = update_elf_header_00102434();\n                return error_message;\n              }\n              error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n            }\n            else {\n              error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n          }\n        }\n        else {\n          error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n        }\n        error_message = dcgettext(0,error_message,5);\n        print_error_message(error_message);\n        return 1;\n      }\n      error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n    }\n    else {\n      error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n    }\n    error_message = dcgettext(0,error_message,5);\n    print_error_message(error_message);\n  }\n  else {\n    error_message = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n    print_error_message(error_message);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00102434": "update_elf_header_00102434",
                "unaff_RBX": "file",
                "pcVar3": "error_message",
                "uVar1": "error_message",
                "sVar2": "write_result",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "update_elf_header_001024ec": "update_elf_header"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "dcgettext",
                "error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102434": {
                    "1": "write_elf_file",
                    "2": "verify_and_update_elf_header",
                    "4": "validate_elf_header",
                    "10": "update_elf_header"
                },
                "unaff_RBX": {
                    "1": "file_pointer",
                    "26": "file",
                    "3": "file_ptr"
                },
                "pcVar3": {
                    "1": "error_msg_format",
                    "19": "error_message",
                    "2": "error_format",
                    "3": "format_string"
                },
                "uVar1": {
                    "5": "error_string",
                    "1": "translation_message",
                    "9": "error_message",
                    "2": "error_msg"
                },
                "sVar2": {
                    "1": "status",
                    "18": "write_result",
                    "3": "result",
                    "4": "bytes_written"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "print_error_message"
                },
                "update_elf_header_001024ec": {
                    "2": "update_elf_header"
                },
                "DAT_001093e6": {
                    "1": "flag_1"
                },
                "DAT_0010941a": {
                    "1": "flag_2"
                },
                "DAT_0010916c": {
                    "1": "value_11"
                },
                "DAT_00109170": {
                    "1": "value_2"
                },
                "DAT_001093e4": {
                    "1": "flag_3"
                },
                "DAT_00109168": {
                    "1": "value_3"
                },
                "DAT_00109174": {
                    "1": "value_4"
                },
                "DAT_00109164": {
                    "1": "value_5"
                },
                "DAT_00109418": {
                    "1": "value_6"
                },
                "DAT_0010915c": {
                    "1": "value_7"
                },
                "DAT_001093e7": {
                    "1": "value_8"
                },
                "DAT_001093e8": {
                    "1": "value_9"
                },
                "DAT_00109154": {
                    "1": "value_10"
                },
                "DAT_00109160": {
                    "1": "value_12"
                },
                "DAT_00109158": {
                    "1": "value_13"
                },
                "DAT_00109150": {
                    "1": "value_14"
                },
                "DAT_001093b8": {
                    "1": "write_function"
                },
                "DAT_00109392": {
                    "1": "data_1"
                },
                "DAT_00109390": {
                    "1": "data_2"
                },
                "DAT_00109387": {
                    "1": "output_value_1"
                },
                "DAT_00109388": {
                    "1": "output_value_2"
                },
                "DAT_00109380": {
                    "1": "data_3"
                },
                "DAT_00109352": {
                    "1": "data_4"
                },
                "DAT_00109350": {
                    "1": "data_5"
                },
                "DAT_00109347": {
                    "1": "output_value_3"
                },
                "DAT_00109348": {
                    "1": "output_value_4"
                },
                "DAT_00109340": {
                    "1": "data_6"
                }
            }
        },
        "FUN_001024ec": {
            "entrypoint": "0x001024ec",
            "current_name": "update_elf_header_001024ec",
            "code": "\nundefined8 update_elf_header_001024ec(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"%s: Failed to update ELF header: %s\\n\",5);\n  print_error_message(error_message);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_001024ec": "update_elf_header_001024ec",
                "piVar1": "errno_location",
                "uVar2": "error_message",
                "__errno_location": "get_errno_location",
                "strerror": "get_error_string",
                "dcgettext": "get_translated_error_message",
                "error": "print_error_message"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "dcgettext",
                "error",
                "strerror",
                "__errno_location"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001024ec": {
                    "3": "update_elf_header_failed",
                    "20": "update_elf_header",
                    "4": "update_elf_header_error"
                },
                "piVar1": {
                    "8": "error_number",
                    "3": "error_number_ptr",
                    "9": "errno_location",
                    "2": "error_location",
                    "5": "errno_ptr",
                    "1": "error_number_pointer"
                },
                "uVar2": {
                    "5": "error_string",
                    "1": "error_msg",
                    "23": "error_message"
                },
                "__errno_location": {
                    "2": "get_errno_location"
                },
                "strerror": {
                    "3": "get_error_string",
                    "1": "get_error_message"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "error": {
                    "1": "report_error",
                    "2": "print_error_message"
                }
            }
        },
        "FUN_00102558": {
            "entrypoint": "0x00102558",
            "current_name": "read_elf_header_failed_00102558",
            "code": "\nundefined8 read_elf_header_failed_00102558(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n  error(error_message);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00102558": "read_elf_header_failed_00102558",
                "uVar1": "error_message"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "dcgettext",
                "error"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102558": {
                    "7": "read_elf_header_failure",
                    "8": "read_elf_header_failed",
                    "1": "failed_to_read_elf_header"
                },
                "uVar1": {
                    "22": "error_message",
                    "6": "error_string",
                    "3": "error_msg"
                }
            }
        },
        "FUN_001025ab": {
            "entrypoint": "0x001025ab",
            "current_name": "parse_archive_001025ab",
            "code": "\nundefined4 parse_archive_001025ab(char **archive,char *filename,FILE *file,long max_size,undefined4 param_5)\n\n{\n  char **header_buffer;\n  undefined temp_var;\n  char comparison_result;\n  int result;\n  char *error_message;\n  size_t read_size;\n  undefined8 translation;\n  char *long_name_table;\n  \n  error_message = strdup(filename);\n  ptr1 = (char *)0x0;\n  *(undefined4 *)((long)archive + 0x54) = 0;\n  *archive = error_message;\n  param2 = (char *)file;\n  param5 = (char *)0x0;\n  param6 = (char *)0x0;\n  *(undefined4 *)(archive + 10) = param_5;\n  param9 = (char *)0x8;\n  *(undefined (*) [16])(archive + 3) = zeroed_array(0);\n  *(undefined (*) [16])(archive + 7) = zeroed_array(0);\n  result = fseek(file,8,0);\n  error_message = \"%s: failed to seek to first archive header\\n\";\n  if (result != 0) goto LAB_00102658;\n  header_buffer = archive + 0xb;\n  read_size = fread(header_buffer,1,0x3c,file);\n  if (read_size != 0x3c) {\n    if (read_size == 0) {\n      return 0;\n    }\n    error_message = \"%s: failed to read archive header\\n\";\n    goto LAB_00102658;\n  }\n  comparison_result = compare_strings_001027fd(header_buffer,\"/               \");\n  if (comparison_result == '\\0') {\n    comparison_result = compare_strings_001027fd(header_buffer,\"/SYM64/         \");\n    if (comparison_result != '\\0') {\n      *(undefined4 *)((long)archive + 0x54) = 1;\n      result = parse_archive_001025ab_header_001028be(archive,8);\n      goto joined_r0x001026dd;\n    }\n  }\n  else {\n    result = parse_archive_001025ab_header_001028be(archive,4);\njoined_r0x001026dd:\n    if (result == 0) {\n      return 1;\n    }\n  }\n  comparison_result = compare_strings_001027fd(header_buffer);\n  if (comparison_result == '\\0') {\n    return 0;\n  }\n  temp_var = *(undefined *)((long)archive + 0x92);\n  *(undefined *)((long)archive + 0x92) = 0;\n  error_message = (char *)strtoul((char *)(archive + 0x11),(char **)0x0,10);\n  long_name_table = \"%s: long name table is too small, (size = %ld)\\n\";\n  param7 = error_message;\n  *(undefined *)((long)archive + 0x92) = temp_var;\n  if ((char *)0x7 < error_message) {\n    if (((long)error_message <= max_size) && (-1 < (long)error_message)) {\n      param9 = error_message + 0x3c + (long)param9;\n      long_name_table = (char *)malloc((size_t)(error_message + 1));\n      param6 = long_name_table;\n      if (long_name_table == (char *)0x0) {\n        translation = dcgettext(0,\"Out of memory reading long symbol names in archive\\n\",5);\n        handle_error(translation);\n        return 1;\n      }\n      read_size = fread(long_name_table,(size_t)error_message,1,file);\n      if (read_size == 1) {\n        if ((*(byte *)(archive + 7) & 1) != 0) {\n          getc(file);\n        }\n        symbol_name = '\\0';\n        return 0;\n      }\n      free(param6);\n      error_message = \"%s: failed to read long symbol name string table\\n\";\n      param6 = (char *)0x0;\nLAB_00102658:\n      translation = dcgettext(0,error_message,5);\n      handle_error(translation,filename);\n      return 1;\n    }\n    long_name_table = \"%s: long name table is too big, (size = %#lx)\\n\";\n  }\n  translation = dcgettext(0,long_name_table,5);\n  handle_error(translation,filename,error_message);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_001025ab": "parse_archive_001025ab",
                "param_1": "archive",
                "param_2": "filename",
                "param_3": "file",
                "param_4": "max_size",
                "__ptr": "header_buffer",
                "uVar1": "temp_var",
                "cVar2": "comparison_result",
                "iVar3": "result",
                "pcVar4": "error_message",
                "sVar5": "read_size",
                "uVar6": "translation",
                "pcVar7": "long_name_table",
                "ZEXT816": "zeroed_array",
                "error": "handle_error",
                "param_1[2]": "ptr1",
                "param_1[1]": "param2",
                "param_1[5]": "param5",
                "param_1[6]": "param6",
                "param_1[9]": "param9",
                "param_1[7]": "param7",
                "param_1[6][(long)param_1[7]]": "symbol_name"
            },
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "called": [
                "dcgettext",
                "error",
                "free",
                "fread",
                "malloc",
                "fseek",
                "FUN_001027fd",
                "strtoul",
                "FUN_001028be",
                "getc",
                "strdup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001025ab": {
                    "1": "extract_symbols_from_archive",
                    "3": "process_archive_header",
                    "18": "parse_archive",
                    "2": "process_archive"
                },
                "param_1": {
                    "1": "parsed_archive_header",
                    "13": "archive",
                    "2": "output",
                    "3": "output_params"
                },
                "param_2": {
                    "2": "file_name",
                    "1": "archive_file",
                    "6": "file_path",
                    "13": "filename"
                },
                "param_3": {
                    "20": "file",
                    "2": "input_file",
                    "1": "file_stream",
                    "3": "file_pointer",
                    "4": "archive_file"
                },
                "param_4": {
                    "1": "max_name_size",
                    "2": "name_table_size",
                    "3": "max_long_name_table_size",
                    "11": "max_size",
                    "8": "table_size"
                },
                "param_5": {
                    "1": "parse_result",
                    "2": "param5",
                    "4": "flags",
                    "15": "param_5"
                },
                "__ptr": {
                    "1": "block_header",
                    "8": "header_buffer",
                    "4": "ptr",
                    "2": "header_data",
                    "5": "header",
                    "3": "header_ptr"
                },
                "uVar1": {
                    "1": "temp_byte",
                    "2": "tmp_byte",
                    "5": "temp",
                    "3": "temp_value",
                    "6": "temp_var"
                },
                "cVar2": {
                    "1": "header_comparison",
                    "4": "result",
                    "11": "compare_result"
                },
                "iVar3": {
                    "1": "seek_result",
                    "12": "parse_result",
                    "13": "result",
                    "3": "status",
                    "2": "error_code"
                },
                "pcVar4": {
                    "1": "str",
                    "21": "error_message"
                },
                "sVar5": {
                    "14": "read_size",
                    "1": "num_read",
                    "5": "bytes_read",
                    "9": "read_result"
                },
                "uVar6": {
                    "1": "error_msg",
                    "2": "error_text",
                    "5": "error_message",
                    "4": "translated_string",
                    "6": "translation"
                },
                "pcVar7": {
                    "1": "allocated_memory",
                    "3": "error_message",
                    "2": "name_table",
                    "6": "long_name_table"
                },
                "pcVar8": {
                    "1": "memory_error_message"
                },
                "DAT_001025fb": {
                    "1": "archive_header_size"
                },
                "DAT_00102657": {
                    "1": "first_header_offset"
                },
                "DAT_00102691": {
                    "1": "long_name_size"
                },
                "DAT_00102698": {
                    "1": "long_name_flag"
                },
                "ZEXT816": {
                    "1": "zero_extender"
                },
                "error": {
                    "1": "handle_error"
                },
                "output": {
                    "1": "output"
                },
                "input_filename": {
                    "1": "input_filename"
                },
                "input_file": {
                    "1": "input_file"
                },
                "max_size": {
                    "1": "max_size"
                },
                "flags": {
                    "1": "flags"
                },
                "buffer": {
                    "1": "buffer"
                },
                "prev_char": {
                    "1": "prev_char"
                },
                "compare_result": {
                    "1": "compare_result"
                },
                "result": {
                    "1": "result"
                },
                "error_message": {
                    "1": "error_message"
                },
                "long_name_table": {
                    "1": "long_name_table"
                },
                "read_size": {
                    "1": "read_size"
                },
                "error_msg": {
                    "1": "error_msg"
                },
                "param_1[2]": {
                    "1": "ptr1"
                },
                "(undefined4 *)((long)param_1 + 0x54)": {
                    "1": "ptr2"
                },
                "*param_1": {
                    "1": "param1"
                },
                "param_1[1]": {
                    "1": "param2"
                },
                "param_1[5]": {
                    "1": "param5"
                },
                "param_1[6]": {
                    "1": "param6"
                },
                "*(undefined4 *)(param_1 + 10)": {
                    "1": "param10"
                },
                "param_1[9]": {
                    "1": "param9"
                },
                "*(undefined (*) [16])(param_1 + 3)": {
                    "1": "variable1"
                },
                "*(undefined (*) [16])(param_1 + 7)": {
                    "1": "variable2"
                },
                "param_1[7]": {
                    "1": "param7"
                },
                "(char *)0x7": {
                    "1": "comparison1"
                },
                "param_1[6][(long)param_1[7]]": {
                    "1": "symbol_name"
                },
                "\"%s: failed to seek to first archive header\\n\"": {
                    "1": "error_msg1"
                },
                "\"%s: failed to read archive header\\n\"": {
                    "1": "error_msg2"
                },
                "\"%s: long name table is too small, (size = %ld)\\n\"": {
                    "1": "error_msg3"
                },
                "\"%s: failed to read long symbol name string table\\n\"": {
                    "1": "error_msg7"
                },
                "\"%s: long name table is too big, (size = %#lx)\\n\"": {
                    "1": "error_msg6"
                },
                "pcVar7 = (char *)malloc((size_t)(pcVar4 + 1))": {
                    "1": "allocate_mem"
                },
                "\"Out of memory reading long symbol names in archive\\n\"": {
                    "1": "error_message"
                },
                "&param_1[6]": {
                    "1": "symbol_table_ptr"
                }
            }
        },
        "FUN_001027fd": {
            "entrypoint": "0x001027fd",
            "current_name": "compare_strings_001027fd",
            "code": "\nundefined  [16] compare_strings_001027fd(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_001027fd": "compare_strings_001027fd",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "iVar1": "comparison_result",
                "extraout_var": "result",
                "auVar2": "result",
                "in_RAX": "return_value",
                "strlen": "string_length"
            },
            "calling": [
                "FUN_001025ab"
            ],
            "called": [
                "strncmp",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001027fd": {
                    "19": "compare_strings",
                    "1": "strncmp_wrapper",
                    "6": "string_comparison",
                    "3": "string_compare"
                },
                "param_1": {
                    "28": "string1",
                    "1": "str1",
                    "2": "input_string1"
                },
                "param_2": {
                    "28": "string2",
                    "2": "input_string2",
                    "1": "str2"
                },
                "__n": {
                    "1": "strlen",
                    "4": "string2_length",
                    "25": "length"
                },
                "iVar1": {
                    "20": "comparison_result",
                    "5": "result",
                    "1": "comparison_value"
                },
                "extraout_var": {
                    "1": "additional_var",
                    "5": "result",
                    "2": "comparison_result"
                },
                "auVar2": {
                    "2": "comparison",
                    "14": "result",
                    "6": "comparison_result",
                    "1": "output_array"
                },
                "in_RAX": {
                    "1": "unknown_value",
                    "3": "return_value"
                },
                "strlen": {
                    "1": "string_length"
                }
            }
        },
        "caseD_3": {
            "entrypoint": "0x00102825",
            "current_name": "caseD_3",
            "code": "\nvoid switchD_00103aac::caseD_3(long param_1,undefined8 param_2)\n\n{\n  FUNC_00103ab3(param_1,param_2,\n               (ulong)*(byte *)(param_1 + 1) << 8 | (ulong)*(byte *)(param_1 + 2) << 0x10);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103a90"
            ],
            "called": [
                "FUN_00103ab3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "caseD_0": {
            "entrypoint": "0x0010289a",
            "current_name": "caseD_0",
            "code": "\nvoid switchD_00103aac::caseD_0(void)\n\n{\n  undefined8 uVar1;\n  undefined4 unaff_EBX;\n  \n  uVar1 = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(uVar1,unaff_EBX);\n                    \n  abort();\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00103a90"
            ],
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001028be": {
            "entrypoint": "0x001028be",
            "current_name": "parse_archive_header_001028be",
            "code": "\nundefined8 parse_archive_header_001028be(undefined8 *archive_header)\n\n{\n  undefined previous_value;\n  int seek_result;\n  ulong header_size;\n  undefined8 error_message;\n  size_t read_size;\n  undefined8 archive_name;\n  char *error_format;\n  \n  previous_value = *(undefined *)((long)archive_header + 0x92);\n  *(undefined *)((long)archive_header + 0x92) = 0;\n  header_size = strtoul((char *)(archive_header + 0x11),(char **)0x0,10);\n  *(undefined *)((long)archive_header + 0x92) = previous_value;\n  if ((long)header_size < 0) {\n    archive_name = *archive_header;\n    error_message = dcgettext(0,\"%s: invalid archive header size: %ld\\n\",5);\n    error(error_message,archive_name,header_size);\n  }\n  else {\n    header_size = header_size + 1 & 0xfffffffffffffffe;\n    archive_header[9] = header_size + 0x3c + archive_header[9];\n    seek_result = fseek((FILE *)archive_header[1],header_size,1);\n    if (seek_result == 0) {\n      read_size = fread(archive_header + 0xb,1,0x3c,(FILE *)archive_header[1]);\n      if ((read_size == 0x3c) || (read_size == 0)) {\n        return 1;\n      }\n      archive_name = *archive_header;\n      error_format = \"%s: failed to read archive header following archive index\\n\";\n    }\n    else {\n      archive_name = *archive_header;\n      error_format = \"%s: failed to skip archive symbol table\\n\";\n    }\n    error_message = dcgettext(0,error_format,5);\n    error(error_message,archive_name);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_001028be": "parse_archive_header_001028be",
                "param_1": "archive_header",
                "uVar1": "previous_value",
                "iVar2": "seek_result",
                "uVar3": "header_size",
                "uVar4": "error_message",
                "sVar5": "read_size",
                "pcVar7": "error_format",
                "uVar6": "archive_name"
            },
            "calling": [
                "FUN_001025ab"
            ],
            "called": [
                "dcgettext",
                "error",
                "fread",
                "fseek",
                "strtoul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001028be": {
                    "1": "validate_archive_header_size",
                    "2": "read_archive_header",
                    "10": "parse_archive_header",
                    "5": "validate_archive_header"
                },
                "param_1": {
                    "3": "archive_info",
                    "16": "archive_header",
                    "2": "archive_data",
                    "1": "input_data",
                    "5": "header"
                },
                "uVar1": {
                    "1": "temp_byte",
                    "6": "prev_value",
                    "3": "old_value",
                    "2": "original_value",
                    "8": "previous_value"
                },
                "iVar2": {
                    "10": "seek_result",
                    "1": "error_check",
                    "7": "result",
                    "4": "status",
                    "3": "file_operation_result",
                    "2": "file_seek_result"
                },
                "uVar3": {
                    "1": "archive_size",
                    "28": "header_size"
                },
                "uVar4": {
                    "27": "error_message",
                    "1": "error_string",
                    "3": "error_msg"
                },
                "sVar5": {
                    "14": "read_size",
                    "2": "header_read_size",
                    "8": "bytes_read",
                    "1": "read_header_result",
                    "4": "read_result"
                },
                "pcVar7": {
                    "1": "error_message_format",
                    "2": "error_msg_format",
                    "4": "error_format_string",
                    "18": "error_format"
                },
                "uVar6": {
                    "1": "archive_filename",
                    "11": "archive_name",
                    "2": "filename",
                    "5": "file_name"
                }
            }
        },
        "FUN_001029a5": {
            "entrypoint": "0x001029a5",
            "current_name": "extract_file_name_001029a5",
            "code": "\nundefined4 * extract_file_name_001029a5(undefined8 *file_info,char **output_params)\n\n{\n  undefined temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  int status;\n  ulong long_name_index;\n  ulong long_name_table_size;\n  ulong current_index;\n  undefined8 error_message;\n  FILE *file_stream;\n  size_t read_size;\n  undefined4 *result;\n  long index;\n  char *file_name;\n  char *error_message;\n  char *error_format;\n  char *temp_buffer;\n  stat file_stat;\n  \n  if (*(char *)(file_info + 0xb) != '/') {\n    index = 0;\n    do {\n      if (*(char *)((long)file_info + index + 0x58) == '/') {\n        *(undefined *)((long)file_info + index + 0x58) = 0;\n        result = (undefined4 *)copy_string_00103160(file_info + 0xb);\n        return result;\n      }\n      index = index + 1;\n    } while (index != 0x10);\n    result = (undefined4 *)extract_file_name_001029a5_00105370(0x11);\n    temp_var2 = *(undefined4 *)(file_info + 0xb);\n    temp_var3 = *(undefined4 *)((long)file_info + 0x5c);\n    temp_var4 = *(undefined4 *)(file_info + 0xc);\n    temp_var5 = *(undefined4 *)((long)file_info + 100);\n    *(undefined *)(result + 4) = 0;\n    *result = temp_var2;\n    result[1] = temp_var3;\n    result[2] = temp_var4;\n    result[3] = temp_var5;\n    return result;\n  }\n  if ((file_info[6] == 0) || (file_info[7] == 0)) {\n    error_message = \"Archive member uses long names, but no longname table found\\n\";\nLAB_00102acd:\n    error_message = dcgettext(0,error_message,5);\n    error(error_message);\n    return (undefined4 *)0x0;\n  }\n  temp_var1 = *(undefined *)((long)file_info + 0x92);\n  file_info[8] = 0;\n  *(undefined *)((long)file_info + 0x92) = 0;\n  long_name_index = strtoul((char *)((long)file_info + 0x59),&temp_buffer,10);\n  if (((*(int *)(file_info + 10) != 0) && (temp_buffer != (char *)0x0)) && (*temp_buffer == ':')) {\n    long_name_table_size = strtoul(temp_buffer + 1,(char **)0x0,10);\n    file_info[8] = long_name_table_size;\n  }\n  long_name_table_size = file_info[7];\n  *(undefined *)((long)file_info + 0x92) = temp_var1;\n  if (long_name_table_size < long_name_index) {\n    error_message = dcgettext(0,\"Found long name index (%ld) beyond end of long name table\\n\",5);\n    error(error_message,long_name_index);\n    return (undefined4 *)0x0;\n  }\n  index = file_info[6];\n  for (current_index = long_name_index;\n      ((long_name_table_size != current_index && (*(char *)(index + current_index) != '\\0')) &&\n      (*(char *)(index + current_index) != '\\n')); current_index = current_index + 1) {\n  }\n  if ((current_index != 0) && (*(char *)(index + -1 + current_index) == '/')) {\n    current_index = current_index - 1;\n  }\n  if (current_index < long_name_table_size) {\n    long_name_table_size = current_index;\n  }\n  *(undefined *)(index + long_name_table_size) = 0;\n  if ((*(int *)(file_info + 10) == 0) || (file_info[8] == 0)) goto LAB_00102c2d;\n  if (long_name_table_size <= long_name_index) {\n    error_message = \"Invalid Thin archive member name\\n\";\n    goto LAB_00102acd;\n  }\n  error_message = (char *)extract_file_name_001029a5_00102cc4(*file_info,file_info[6] + long_name_index,long_name_table_size - long_name_index);\n  if (error_message != (char *)0x0) {\n    if ((*output_params == (char *)0x0) || (status = strcmp(*output_params,error_message), status != 0)) {\n      if ((FILE *)output_params[1] != (FILE *)0x0) {\n        fclose((FILE *)output_params[1]);\n        output_params[1] = (char *)0x0;\n      }\n      free_memory_00102f65(output_params);\n      file_stream = fopen(error_message,\"rb\");\n      if (file_stream != (FILE *)0x0) {\n        status = fileno(file_stream);\n        status = fstat(status,&file_stat);\n        if ((-1 < status) &&\n           (status = parse_archive_001025ab(output_params,error_message,file_stream,file_stat.st_size,0), status == 0))\n        goto LAB_00102b84;\n      }\n    }\n    else {\nLAB_00102b84:\n      status = fseek((FILE *)output_params[1],file_info[8],0);\n      if (status == 0) {\n        read_size = fread(output_params + 0xb,1,0x3c,(FILE *)output_params[1]);\n        if (read_size == 0x3c) {\n          if (*(short *)((long)output_params + 0x92) == 0xa60) {\n            result = (undefined4 *)extract_file_name_001029a5(output_params,0);\n            if (result != (undefined4 *)0x0) {\n              free(error_message);\n              return result;\n            }\n            goto LAB_00102c25;\n          }\n          file_name = *output_params;\n          error_format = \"%s: did not find a valid archive header\\n\";\n        }\n        else {\n          file_name = *output_params;\n          error_format = \"%s: failed to read archive header\\n\";\n        }\n      }\n      else {\n        file_name = *output_params;\n        error_format = \"%s: failed to seek to next file name\\n\";\n      }\n      error_message = dcgettext(0,error_format,5);\n      error(error_message,file_name);\n    }\n  }\nLAB_00102c25:\n  free(error_message);\nLAB_00102c2d:\n  result = (undefined4 *)copy_string_00103160(file_info[6] + long_name_index);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_001029a5": "extract_file_name_001029a5",
                "param_1": "file_info",
                "param_2": "output_params",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "iVar6": "status",
                "uVar7": "long_name_index",
                "uVar8": "long_name_table_size",
                "uVar9": "current_index",
                "uVar10": "error_message",
                "__stream": "file_stream",
                "sVar11": "read_size",
                "puVar12": "result",
                "lVar13": "index",
                "pcVar14": "file_name",
                "pcVar15": "error_message",
                "pcVar16": "error_format",
                "local_c0": "temp_buffer",
                "local_b8": "file_stat"
            },
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "called": [
                "fopen",
                "free",
                "error",
                "fseek",
                "FUN_001029a5",
                "FUN_00102f65",
                "strtoul",
                "strcmp",
                "dcgettext",
                "fileno",
                "fread",
                "fclose",
                "FUN_001025ab",
                "FUN_00102cc4",
                "FUN_00105370",
                "FUN_00103160",
                "fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001029a5": {
                    "5": "extract_file_path",
                    "1": "parse_thin_archive_member",
                    "11": "extract_file_name",
                    "7": "extract_file_name_from_path"
                },
                "param_1": {
                    "1": "file_params",
                    "6": "file_path",
                    "15": "file_info",
                    "3": "input_params"
                },
                "param_2": {
                    "1": "file_data",
                    "2": "archive_info",
                    "5": "output_params",
                    "3": "file_info"
                },
                "uVar1": {
                    "1": "temp_variable",
                    "14": "temp_var1",
                    "5": "temp",
                    "2": "temp_var"
                },
                "uVar2": {
                    "1": "result1",
                    "5": "var1",
                    "12": "temp_var2",
                    "3": "result"
                },
                "uVar3": {
                    "1": "param1_value",
                    "12": "temp_var3",
                    "2": "result",
                    "5": "var2"
                },
                "uVar4": {
                    "1": "var4",
                    "5": "var3",
                    "12": "temp_var4",
                    "2": "result"
                },
                "uVar5": {
                    "1": "result4",
                    "12": "temp_var5",
                    "2": "result",
                    "5": "var4"
                },
                "iVar6": {
                    "1": "index",
                    "2": "result",
                    "10": "status",
                    "7": "temp_var6"
                },
                "uVar7": {
                    "10": "long_name_index",
                    "1": "index1",
                    "6": "start_index",
                    "3": "name_index",
                    "2": "index"
                },
                "uVar8": {
                    "1": "index2",
                    "2": "table_size",
                    "3": "long_name_table_end",
                    "13": "long_name_table_size"
                },
                "uVar9": {
                    "1": "index2",
                    "2": "current_char_index",
                    "6": "current_index",
                    "3": "index"
                },
                "uVar10": {
                    "2": "translation",
                    "1": "error_msg",
                    "9": "error_message",
                    "8": "temp_var10"
                },
                "__stream": {
                    "1": "stream",
                    "20": "file_stream",
                    "8": "file",
                    "2": "file_pointer"
                },
                "sVar11": {
                    "1": "size_var11",
                    "18": "read_size",
                    "9": "bytes_read"
                },
                "puVar12": {
                    "2": "new_file_info",
                    "1": "new_string_ptr",
                    "14": "result",
                    "4": "new_string"
                },
                "lVar13": {
                    "1": "loop_index",
                    "3": "counter",
                    "2": "length",
                    "9": "index"
                },
                "pcVar14": {
                    "1": "temp_char1",
                    "3": "current_file_name",
                    "18": "file_name"
                },
                "pcVar15": {
                    "3": "error_message1",
                    "1": "temp_var15",
                    "17": "error_message",
                    "2": "error_msg"
                },
                "pcVar16": {
                    "1": "temp_var16",
                    "7": "error_message",
                    "2": "error_message_format",
                    "3": "error_message2",
                    "8": "error_format"
                },
                "pcVar17": {
                    "1": "file_name"
                },
                "local_c0": {
                    "1": "char_buffer",
                    "4": "temp_string",
                    "5": "temp_buffer",
                    "2": "local_string"
                },
                "local_b8": {
                    "1": "file_info_stat",
                    "3": "file_stats",
                    "4": "stat_struct",
                    "15": "file_stat"
                },
                "pcVar18": {
                    "1": "file_name_comparison"
                },
                "pcVar21": {
                    "1": "file_header"
                }
            }
        },
        "FUN_00102c98": {
            "entrypoint": "0x00102c98",
            "current_name": "handle_unhandled_data_length_00102c98",
            "code": "\nvoid handle_unhandled_data_length_00102c98(void)\n\n{\n  undefined8 error_message;\n  undefined4 error_code;\n  \n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,error_code);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_00102c98": "handle_unhandled_data_length_00102c98",
                "unaff_EBX": "error_code",
                "uVar1": "error_message"
            },
            "calling": [
                "FUN_00103ad0"
            ],
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102c98": {
                    "2": "handle_unhandled_data",
                    "1": "handle_data_length_error",
                    "28": "handle_unhandled_data_length"
                },
                "unaff_EBX": {
                    "25": "error_code",
                    "2": "error_status"
                },
                "uVar1": {
                    "15": "error_message",
                    "1": "error_string"
                }
            }
        },
        "FUN_00102cbc": {
            "entrypoint": "0x00102cbc",
            "current_name": "extract_file_name_00102cbc",
            "code": "\nchar * extract_file_name_00102cbc(undefined8 param,char *file_path)\n\n{\n  ulong total_size;\n  long combined_size;\n  char current_char;\n  char *current_char;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_size;\n  ulong file_name_size;\n  char *file_path_ptr;\n  ulong file_name_length;\n  byte flag;\n  \n  flag = 0;\n  malloc();\n  current_char = file_path_ptr;\n  last_slash = file_path_ptr;\n  while (current_char = *current_char, current_char != '\\0') {\n    current_char = current_char + 1;\n    if (current_char == '/') {\n      last_slash = current_char;\n    }\n  }\n  if ((*file_path == '/') || (file_path_ptr == last_slash)) {\n    if (file_name_size + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)allocate_memory(file_name_size + 1);\n    remaining_size = file_name_size;\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)flag * -2 + 1;\n        current_char = current_char + (ulong)flag * -2 + 1;\n      }\n      last_slash[file_name_size] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    file_name_length = (long)last_slash - (long)file_path_ptr;\n    combined_size = file_name_length + file_name_size;\n    remaining_size = file_name_size;\n    if (file_name_size <= file_name_length) {\n      remaining_size = file_name_length;\n    }\n    total_size = combined_size + 1;\n    if (total_size < remaining_size) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,file_name_size);\n      return (char *)0x0;\n    }\n    last_slash = (char *)allocate_memory(total_size);\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size = file_name_size, file_name_length != 0; file_name_length = file_name_length - 1) {\n        *current_char = *file_path_ptr;\n        file_path_ptr = file_path_ptr + (ulong)flag * -2 + 1;\n        current_char = current_char + (ulong)flag * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)flag * -2 + 1;\n        current_char = current_char + (ulong)flag * -2 + 1;\n      }\n      last_slash[combined_size] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "renaming": {
                "FUN_00102cbc": "extract_file_name_00102cbc",
                "param_1": "param",
                "param_2": "file_path",
                "pcVar3": "current_char",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_size",
                "extraout_RDX": "file_name_size",
                "unaff_RBX": "file_path_ptr",
                "uVar7": "file_name_length",
                "bVar8": "flag",
                "__size": "total_size",
                "lVar1": "combined_size",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "allocate_memory_00102fc7": "allocate_memory",
                "malloc": "allocate_memory",
                "cVar2": "current_char"
            },
            "calling": [
                "FUN_00105370"
            ],
            "called": [
                "FUN_00102fc7"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102cbc": {
                    "2": "parse_file_name",
                    "1": "extract_archive_member_name",
                    "3": "extract_filename",
                    "17": "extract_file_name",
                    "4": "parse_file_path"
                },
                "param_1": {
                    "1": "file_descriptor",
                    "3": "unused_param",
                    "4": "param1",
                    "2": "file_handle",
                    "7": "param"
                },
                "param_2": {
                    "1": "filepath",
                    "4": "path",
                    "18": "file_path",
                    "3": "input_string",
                    "2": "file_name"
                },
                "pcVar3": {
                    "2": "current_pos",
                    "1": "output_ptr",
                    "7": "current_char"
                },
                "pcVar4": {
                    "1": "ptr2",
                    "3": "ptr_last_slash",
                    "2": "last_slash_char",
                    "6": "last_slash_ptr",
                    "8": "last_slash"
                },
                "uVar5": {
                    "2": "translation",
                    "1": "localized_error_msg",
                    "10": "error_message",
                    "5": "err_msg",
                    "8": "error_msg"
                },
                "uVar6": {
                    "1": "counter",
                    "13": "remaining_size",
                    "4": "remaining_chars",
                    "2": "length"
                },
                "extraout_RDX": {
                    "1": "length",
                    "2": "remaining_chars",
                    "3": "file_name_size"
                },
                "unaff_RBX": {
                    "1": "original_string",
                    "3": "file_path_ptr",
                    "2": "path_start"
                },
                "uVar7": {
                    "1": "ptr_length",
                    "3": "prefix_size",
                    "6": "file_name_length",
                    "2": "diff"
                },
                "bVar8": {
                    "1": "byte_value",
                    "2": "is_backslash",
                    "5": "flag",
                    "3": "is_negative"
                },
                "__size": {
                    "2": "alloc_size",
                    "3": "size",
                    "14": "total_size",
                    "1": "allocation_size",
                    "4": "allocated_size"
                },
                "lVar1": {
                    "1": "filename_size",
                    "2": "offset",
                    "5": "total_size",
                    "6": "combined_size"
                },
                "dcgettext": {
                    "1": "get_localized_message",
                    "2": "get_error_message"
                },
                "error": {
                    "3": "print_error",
                    "1": "print_error_message"
                },
                "allocate_memory_00102fc7": {
                    "1": "allocate_memory"
                },
                "malloc": {
                    "2": "allocate_memory"
                },
                "cVar2": {
                    "19": "current_char"
                },
                "uVar8": {
                    "1": "dummy"
                }
            }
        },
        "FUN_00102cc4": {
            "entrypoint": "0x00102cc4",
            "current_name": "extract_file_name_00102cc4",
            "code": "\nchar * extract_file_name_00102cc4(char *file_path,char *file_name,ulong length)\n\n{\n  ulong buffer_size;\n  long total_length;\n  char current_char;\n  char *current_char;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_length;\n  ulong path_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  current_char = file_path;\n  last_slash = file_path;\n  while (current_char = *current_char, current_char != '\\0') {\n    current_char = current_char + 1;\n    if (current_char == '/') {\n      last_slash = current_char;\n    }\n  }\n  if ((*file_name == '/') || (file_path == last_slash)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(length + 1);\n    remaining_length = length;\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *current_char = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    path_length = (long)last_slash - (long)file_path;\n    total_length = path_length + length;\n    remaining_length = length;\n    if (length <= path_length) {\n      remaining_length = path_length;\n    }\n    buffer_size = total_length + 1;\n    if (buffer_size < remaining_length) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(buffer_size);\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; path_length != 0; path_length = path_length - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      for (; length != 0; length = length - 1) {\n        *current_char = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "renaming": {
                "FUN_00102cc4": "extract_file_name_00102cc4",
                "param_1": "file_path",
                "param_2": "file_name",
                "param_3": "length",
                "__size": "buffer_size",
                "lVar1": "total_length",
                "cVar2": "current_char",
                "pcVar3": "current_char",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_length",
                "uVar7": "path_length",
                "bVar8": "is_negative",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "malloc": "allocate_memory"
            },
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "called": [
                "dcgettext",
                "error",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102cc4": {
                    "1": "extract_file_name_or_allocate_memory",
                    "2": "extract_file_path",
                    "4": "extract_filename",
                    "18": "extract_file_name"
                },
                "param_1": {
                    "3": "input_string",
                    "11": "path",
                    "12": "file_path",
                    "1": "original_path"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_string",
                    "4": "filename",
                    "5": "source",
                    "7": "file_name"
                },
                "param_3": {
                    "1": "filename_size",
                    "2": "size",
                    "19": "length",
                    "3": "file_name_length"
                },
                "__size": {
                    "1": "realloc_size",
                    "3": "size",
                    "7": "buffer_size",
                    "6": "allocated_size",
                    "2": "malloc_size"
                },
                "lVar1": {
                    "15": "total_length",
                    "1": "new_path_length",
                    "6": "total_size"
                },
                "cVar2": {
                    "22": "current_char",
                    "1": "character",
                    "2": "current_byte"
                },
                "pcVar3": {
                    "1": "dst_pointer",
                    "2": "destination",
                    "3": "dest_ptr",
                    "4": "current_char"
                },
                "pcVar4": {
                    "1": "pointer2",
                    "3": "last_slash_position",
                    "4": "last_slash_ptr",
                    "11": "last_slash",
                    "2": "last_slash_pointer"
                },
                "uVar5": {
                    "4": "err_msg",
                    "1": "errormsg",
                    "19": "error_message",
                    "2": "error_msg"
                },
                "uVar6": {
                    "1": "counter",
                    "5": "remaining_size",
                    "18": "remaining_length"
                },
                "uVar7": {
                    "1": "file_length",
                    "2": "path_size",
                    "13": "path_length",
                    "3": "file_name_length"
                },
                "bVar8": {
                    "1": "is_slash_encountered",
                    "4": "is_reversed",
                    "3": "flag",
                    "7": "is_negative"
                },
                "dcgettext": {
                    "3": "get_error_message"
                },
                "error": {
                    "3": "print_error"
                },
                "malloc": {
                    "1": "allocate_memory"
                }
            }
        },
        "warn": {
            "entrypoint": "0x00102da5",
            "current_name": "warn",
            "code": "\n\n\nvoid warn(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n         undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n         undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n         undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Warning: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "dcgettext",
                "fflush",
                "fprintf",
                "vfprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "error": {
            "entrypoint": "0x00102e85",
            "current_name": "error",
            "code": "\n\n\nvoid error(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n          undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n          undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Error: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102323",
                "FUN_00102c98",
                "FUN_00102434",
                "FUN_00104de0",
                "FUN_001029a5",
                "FUN_00104da0",
                "caseD_0",
                "FUN_0010358d",
                "FUN_0010234b",
                "FUN_0010354e",
                "FUN_001025ab",
                "FUN_00103bf0",
                "FUN_001024ec",
                "FUN_00102cc4",
                "FUN_00102558",
                "FUN_001028be",
                "FUN_001022c0",
                "FUN_0010347f"
            ],
            "called": [
                "dcgettext",
                "fprintf",
                "fflush",
                "vfprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102f65": {
            "entrypoint": "0x00102f65",
            "current_name": "free_memory_00102f65",
            "code": "\nvoid free_memory_00102f65(void **memory_blocks)\n\n{\n  free(*memory_blocks);\n  free(block3);\n  free(block4);\n  free(block6);\n  *memory_blocks = (void *)0x0;\n  block6 = (void *)0x0;\n  *(undefined (*) [16])(memory_blocks + 3) = zero;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102f65": "free_memory_00102f65",
                "param_1": "memory_blocks",
                "param_1[3]": "block3",
                "param_1[4]": "block4",
                "param_1[6]": "block6",
                "ZEXT816(0)": "zero"
            },
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102f65": {
                    "1": "reset_pointers",
                    "5": "clear_memory",
                    "3": "free_memory_and_reset",
                    "18": "free_memory"
                },
                "**param_1": {
                    "1": "pointer"
                },
                "param_1": {
                    "9": "memory_blocks",
                    "4": "memory",
                    "2": "pointer_array",
                    "1": "resources",
                    "3": "memory_pointer",
                    "5": "memory_block"
                },
                "ptr_1": {
                    "1": "pointer1"
                },
                "ptr_2": {
                    "1": "pointer2"
                },
                "param_1[3]": {
                    "1": "resource3",
                    "2": "block2",
                    "5": "block3"
                },
                "param_1[4]": {
                    "1": "ptr2",
                    "2": "pointer4",
                    "5": "block4"
                },
                "param_1[6]": {
                    "2": "block4",
                    "1": "memory_blocks[6]",
                    "5": "block6"
                },
                "*param_1": {
                    "1": "memory_block_ptr",
                    "2": "block1"
                },
                "*(undefined (*) [16])(param_1 + 3)": {
                    "1": "array"
                },
                "ZEXT816(0)": {
                    "2": "zero"
                },
                "memory": {
                    "1": "memory"
                },
                "*(param_1 + 3)": {
                    "1": "flag"
                }
            }
        },
        "FUN_00102fa0": {
            "entrypoint": "0x00102fa0",
            "current_name": "skip_non_printable_characters_00102fa0",
            "code": "\nvoid skip_non_printable_characters_00102fa0(byte **data_pointer)\n\n{\n  while (((&DAT_00107040)[(ulong)**data_pointer * 2] & 0x40) != 0) {\n    *data_pointer = *data_pointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102fa0": "skip_non_printable_characters_00102fa0",
                "param_1": "data_pointer"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102fa0": {
                    "1": "skip_to_nonmatching",
                    "3": "skip_non_printable_characters",
                    "2": "skip_invalid_characters"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "input_string",
                    "5": "data_ptr",
                    "7": "data_pointer",
                    "3": "data"
                },
                "&DAT_00107040": {
                    "1": "byte_table"
                },
                "**param_1": {
                    "1": "dereferenced_byte"
                },
                "*param_1": {
                    "5": "current_byte",
                    "1": "byte_value",
                    "2": "current_position"
                },
                "*param_1 + 1": {
                    "1": "next_byte_ptr",
                    "2": "next_byte"
                },
                "DAT_00107040": {
                    "1": "flag_array"
                }
            }
        },
        "FUN_00102fbc": {
            "entrypoint": "0x00102fbc",
            "current_name": "exit_program_00102fbc",
            "code": "\nvoid exit_program_00102fbc(void)\n\n{\n                    \n  exit_status(1);\n}\n\n",
            "renaming": {
                "FUN_00102fbc": "exit_program_00102fbc",
                "exit": "exit_status"
            },
            "calling": [
                "FUN_00102fc7",
                "FUN_00103bf0"
            ],
            "called": [
                "exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102fbc": {
                    "1": "exit_function",
                    "27": "exit_program",
                    "2": "exit_with_error"
                },
                "exit": {
                    "1": "exit_status"
                }
            }
        },
        "FUN_00102fc7": {
            "entrypoint": "0x00102fc7",
            "current_name": "allocate_memory_00102fc7",
            "code": "\n\n\nchar * allocate_memory_00102fc7(undefined8 size)\n\n{\n  char exit_flag;\n  void *current_break;\n  size_t string_length;\n  ulong temp_var;\n  char *allocated_memory;\n  char **current_string;\n  undefined8 extra_output_rdx;\n  long total_length;\n  char *format_string;\n  FILE *error_stream;\n  char *current_char;\n  byte is_negative;\n  undefined8 extra_output_xmm0_qa;\n  uint stack_size;\n  char **string_array;\n  char **previous_string;\n  char *string_array [4];\n  undefined8 param1;\n  long base_address;\n  undefined8 exit_value;\n  undefined8 param_1_copy;\n  \n  is_negative = 0;\n  current_break = sbrk(0);\n  base_address = (long)current_break + -0x10a0e0;\n  string_array[3] = \"\";\n  format_string = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  error_stream = _standard_error;\n  param1 = size;\n  fprintf(_standard_error,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  exit_flag = exit_program_00102fbc();\n  if (exit_flag != '\\0') {\n    exit_value = extra_output_xmm0_qa;\n  }\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = format_string;\n  string_array = (char **)register0x00000020;\n  string_array[2] = (char *)extra_output_rdx;\n  param_1_copy = size;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_array + temp_var);\n      previous_string = string_array;\n    }\n    else {\n      previous_string = string_array + 1;\n      current_string = string_array;\n    }\n    current_char = *current_string;\n    string_array = previous_string;\n  } while (current_char != (char *)0x0);\n  allocated_memory = (char *)extract_file_name_00105370(total_length + 1);\n  stack_size = 0x10;\n  current_char = allocated_memory;\n  string_array = (char **)register0x00000020;\n  do {\n    string_length = strlen(format_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *format_string;\n      format_string = format_string + (ulong)is_negative * -2 + 1;\n      current_char = current_char + (ulong)is_negative * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_array + temp_var);\n      previous_string = string_array;\n    }\n    else {\n      previous_string = string_array + 1;\n      current_string = string_array;\n    }\n    format_string = *current_string;\n    string_array = previous_string;\n  } while (format_string != (char *)0x0);\n  *current_char = '\\0';\n  free(error_stream);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_00102fc7": "allocate_memory_00102fc7",
                "param_1": "size",
                "__s": "format_string",
                "__ptr": "error_stream",
                "pcVar8": "current_char",
                "pcVar5": "allocated_memory",
                "uStack_f8": "stack_size",
                "ppcVar10": "string_array",
                "apcStack_e0": "string_array",
                "lStack_b8": "base_address",
                "uStack_c0": "param1",
                "uStack_b0": "exit_value",
                "uStack_28": "param_1_copy",
                "pvVar2": "current_break",
                "sVar3": "string_length",
                "uVar4": "temp_var",
                "ppcVar6": "current_string",
                "extraout_RDX": "extra_output_rdx",
                "lVar7": "total_length",
                "bVar9": "is_negative",
                "extraout_XMM0_Qa": "extra_output_xmm0_qa",
                "ppcVar11": "previous_string",
                "cVar1": "exit_flag",
                "stderr": "standard_error"
            },
            "calling": [
                "FUN_00103449",
                "FUN_00102cbc"
            ],
            "called": [
                "sbrk",
                "FUN_00102fbc",
                "fprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\n\n\nchar * FUN_00102fc7(undefined8 param_1)\n\n{\n  char cVar1;\n  void *pvVar2;\n  size_t sVar3;\n  ulong uVar4;\n  char *pcVar5;\n  char **ppcVar6;\n  undefined8 extraout_RDX;\n  long lVar7;\n  char *__s;\n  FILE *__ptr;\n  char *pcVar8;\n  byte bVar9;\n  undefined8 extraout_XMM0_Qa;\n  uint uStack_f8;\n  char **ppcVar10;\n  char **ppcVar11;\n  char *apcStack_e0 [4];\n  undefined8 uStack_c0;\n  long lStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_28;\n  \n  bVar9 = 0;\n  pvVar2 = sbrk(0);\n  lStack_b8 = (long)pvVar2 + -0x10a0e0;\n  apcStack_e0[3] = \"\";\n  __s = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  __ptr = _stderr;\n  uStack_c0 = param_1;\n  fprintf(_stderr,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  cVar1 = exit_program_00102fbc();\n  if (cVar1 != '\\0') {\n    uStack_b0 = extraout_XMM0_Qa;\n  }\n  lVar7 = 0;\n  uStack_f8 = 0x10;\n  pcVar8 = __s;\n  ppcVar10 = (char **)register0x00000020;\n  apcStack_e0[2] = (char *)extraout_RDX;\n  uStack_28 = param_1;\n  do {\n    sVar3 = strlen(pcVar8);\n    lVar7 = lVar7 + sVar3;\n    if (uStack_f8 < 0x30) {\n      uVar4 = (ulong)uStack_f8;\n      uStack_f8 = uStack_f8 + 8;\n      ppcVar6 = (char **)((long)apcStack_e0 + uVar4);\n      ppcVar11 = ppcVar10;\n    }\n    else {\n      ppcVar11 = ppcVar10 + 1;\n      ppcVar6 = ppcVar10;\n    }\n    pcVar8 = *ppcVar6;\n    ppcVar10 = ppcVar11;\n  } while (pcVar8 != (char *)0x0);\n  pcVar5 = (char *)FUNC_00105370(lVar7 + 1);\n  uStack_f8 = 0x10;\n  pcVar8 = pcVar5;\n  ppcVar10 = (char **)register0x00000020;\n  do {\n    sVar3 = strlen(__s);\n    for (; sVar3 != 0; sVar3 = sVar3 - 1) {\n      *pcVar8 = *__s;\n      __s = __s + (ulong)bVar9 * -2 + 1;\n      pcVar8 = pcVar8 + (ulong)bVar9 * -2 + 1;\n    }\n    if (uStack_f8 < 0x30) {\n      uVar4 = (ulong)uStack_f8;\n      uStack_f8 = uStack_f8 + 8;\n      ppcVar6 = (char **)((long)apcStack_e0 + uVar4);\n      ppcVar11 = ppcVar10;\n    }\n    else {\n      ppcVar11 = ppcVar10 + 1;\n      ppcVar6 = ppcVar10;\n    }\n    __s = *ppcVar6;\n    ppcVar10 = ppcVar11;\n  } while (__s != (char *)0x0);\n  *pcVar8 = '\\0';\n  free(__ptr);\n  return pcVar5;\n}\n\n",
            "additional_data": {
                "FUN_00102fc7": {
                    "1": "allocate_memory_and_construct_string",
                    "2": "allocate_memory_and_print_error",
                    "5": "allocate_memory_and_copy_strings",
                    "7": "allocate_memory",
                    "4": "allocate_memory_and_format_string"
                },
                "param_1": {
                    "1": "bytes_to_allocate",
                    "3": "total_bytes",
                    "12": "size",
                    "2": "input_param"
                },
                "__s": {
                    "5": "error_message",
                    "1": "error_message_format",
                    "24": "format_string"
                },
                "__ptr": {
                    "3": "output_stream",
                    "2": "stderr_stream",
                    "1": "error_msg_stream",
                    "11": "error_stream",
                    "4": "file_pointer"
                },
                "pcVar8": {
                    "1": "output_ptr",
                    "3": "current_string",
                    "2": "output_string",
                    "13": "current_char",
                    "4": "current_character"
                },
                "pcVar5": {
                    "1": "output",
                    "4": "result",
                    "3": "allocated_string",
                    "9": "allocated_memory"
                },
                "uStack_f8": {
                    "3": "stack_var",
                    "1": "current_offset",
                    "2": "current_index",
                    "8": "stack_size"
                },
                "ppcVar10": {
                    "1": "current_ptr_array",
                    "2": "pointer_array",
                    "3": "string_array"
                },
                "apcStack_e0": {
                    "1": "string_array_constant",
                    "7": "string_array",
                    "5": "string_stack",
                    "2": "array_stack",
                    "4": "stack_array"
                },
                "lStack_b8": {
                    "1": "stack_diff",
                    "2": "heap_offset",
                    "5": "base_address"
                },
                "uStack_c0": {
                    "1": "size_param",
                    "2": "param_1",
                    "3": "input_size",
                    "4": "param_1_copy"
                },
                "uStack_b0": {
                    "1": "extra_output",
                    "2": "extra_var",
                    "3": "exit_value"
                },
                "uStack_28": {
                    "1": "extra_output",
                    "2": "param_1_copy_2",
                    "3": "param_1_copy"
                },
                "pvVar2": {
                    "1": "current_end",
                    "4": "current_memory",
                    "5": "current_brk",
                    "2": "heap_end",
                    "8": "current_break"
                },
                "sVar3": {
                    "20": "string_length",
                    "1": "string_size",
                    "4": "str_length",
                    "2": "length"
                },
                "uVar4": {
                    "1": "tmp_value",
                    "2": "temp_size",
                    "4": "temp",
                    "6": "temp_value",
                    "8": "temp_var"
                },
                "ppcVar6": {
                    "1": "current_string_ptr",
                    "6": "string_array",
                    "11": "current_string"
                },
                "extraout_RDX": {
                    "1": "bytes_to_allocate"
                },
                "lVar7": {
                    "9": "total_length",
                    "1": "total_size"
                },
                "bVar9": {
                    "1": "append_flag",
                    "2": "loop_flag",
                    "4": "byte_flag",
                    "5": "is_negative"
                },
                "extraout_XMM0_Qa": {
                    "1": "extra_output_xmm0_qa"
                },
                "ppcVar11": {
                    "1": "string_array_ptr2",
                    "2": "previous_string"
                },
                "cVar1": {
                    "1": "success_flag",
                    "15": "exit_flag",
                    "3": "exit_code"
                },
                "FUNC_00105370": {
                    "1": "allocate_memory"
                },
                "stderr": {
                    "1": "standard_error"
                }
            }
        },
        "FUN_00103006": {
            "entrypoint": "0x00103006",
            "current_name": "reverse_string_00103006",
            "code": "\nchar * reverse_string_00103006(undefined4 size1,undefined4 size2,undefined4 size3,undefined4 size4,\n                   undefined4 size5,undefined4 size6,undefined4 size7,undefined4 size8,\n                   void *buffer,char *string_array,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp_var;\n  char *result_string;\n  char **current_string_ptr;\n  long total_length;\n  char *current_char;\n  byte increment;\n  uint stack_size;\n  char **stack_pointer_array;\n  char *pointer_array [4];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 input_1;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  increment = 0;\n  if (flag != '\\0') {\n    input_1 = size1;\n    param_2_copy = size2;\n    param_3_copy = size3;\n    param_4_copy = size4;\n    param_5_copy = size5;\n    param_6_copy = size6;\n    param_7_copy = size7;\n    param_8_copy = size8;\n  }\n  stack_pointer_array = (char **)&stack0x00000008;\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = string_array;\n  pointer_array[2] = (char *)param11;\n  pointer_array[3] = (char *)param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string_ptr = (char **)((long)pointer_array + temp_var);\n    }\n    else {\n      current_string_ptr = stack_pointer_array;\n      stack_pointer_array = stack_pointer_array + 1;\n    }\n    current_char = *current_string_ptr;\n  } while (current_char != (char *)0x0);\n  result_string = (char *)extract_file_name_00105370(total_length + 1);\n  stack_size = 0x10;\n  stack_pointer_array = (char **)&stack0x00000008;\n  current_char = result_string;\n  do {\n    string_length = strlen(string_array);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *string_array;\n      string_array = string_array + (ulong)increment * -2 + 1;\n      current_char = current_char + (ulong)increment * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string_ptr = (char **)((long)pointer_array + temp_var);\n    }\n    else {\n      current_string_ptr = stack_pointer_array;\n      stack_pointer_array = stack_pointer_array + 1;\n    }\n    string_array = *current_string_ptr;\n  } while (string_array != (char *)0x0);\n  *current_char = '\\0';\n  free(buffer);\n  return result_string;\n}\n\n",
            "renaming": {
                "FUN_00103006": "reverse_string_00103006",
                "param_1": "size1",
                "param_2": "size2",
                "param_3": "size3",
                "param_4": "size4",
                "param_5": "size5",
                "param_6": "size6",
                "param_7": "size7",
                "param_8": "size8",
                "param_9": "buffer",
                "param_10": "string_array",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "pcVar3": "result_string",
                "ppcVar4": "current_string_ptr",
                "lVar5": "total_length",
                "pcVar6": "current_char",
                "bVar7": "increment",
                "local_f0": "stack_size",
                "local_e8": "stack_pointer_array",
                "local_d8": "pointer_array",
                "local_b8": "param13_copy",
                "local_b0": "param14_copy",
                "local_a8": "input_1",
                "local_98": "param_2_copy",
                "local_88": "param_3_copy",
                "local_78": "param_4_copy",
                "local_68": "param_5_copy",
                "local_58": "param_6_copy",
                "local_48": "param_7_copy",
                "local_38": "param_8_copy",
                "sVar1": "string_length",
                "uVar2": "temp_var",
                "in_AL": "flag"
            },
            "calling": [
                "FUN_001032de"
            ],
            "called": [
                "free",
                "strlen",
                "FUN_00105370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nchar * FUN_00103006(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                   undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                   void *param_9,char *param_10,undefined8 param_11,undefined8 param_12,\n                   undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  size_t sVar1;\n  ulong uVar2;\n  char *pcVar3;\n  char **ppcVar4;\n  long lVar5;\n  char *pcVar6;\n  byte bVar7;\n  uint local_f0;\n  char **local_e8;\n  char *local_d8 [4];\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined4 local_a8;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  \n  bVar7 = 0;\n  if (in_AL != '\\0') {\n    local_a8 = param_1;\n    local_98 = param_2;\n    local_88 = param_3;\n    local_78 = param_4;\n    local_68 = param_5;\n    local_58 = param_6;\n    local_48 = param_7;\n    local_38 = param_8;\n  }\n  local_e8 = (char **)&stack0x00000008;\n  lVar5 = 0;\n  local_f0 = 0x10;\n  pcVar6 = param_10;\n  local_d8[2] = (char *)param_11;\n  local_d8[3] = (char *)param_12;\n  local_b8 = param_13;\n  local_b0 = param_14;\n  do {\n    sVar1 = strlen(pcVar6);\n    lVar5 = lVar5 + sVar1;\n    if (local_f0 < 0x30) {\n      uVar2 = (ulong)local_f0;\n      local_f0 = local_f0 + 8;\n      ppcVar4 = (char **)((long)local_d8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_e8;\n      local_e8 = local_e8 + 1;\n    }\n    pcVar6 = *ppcVar4;\n  } while (pcVar6 != (char *)0x0);\n  pcVar3 = (char *)FUNC_00105370(lVar5 + 1);\n  local_f0 = 0x10;\n  local_e8 = (char **)&stack0x00000008;\n  pcVar6 = pcVar3;\n  do {\n    sVar1 = strlen(param_10);\n    for (; sVar1 != 0; sVar1 = sVar1 - 1) {\n      *pcVar6 = *param_10;\n      param_10 = param_10 + (ulong)bVar7 * -2 + 1;\n      pcVar6 = pcVar6 + (ulong)bVar7 * -2 + 1;\n    }\n    if (local_f0 < 0x30) {\n      uVar2 = (ulong)local_f0;\n      local_f0 = local_f0 + 8;\n      ppcVar4 = (char **)((long)local_d8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_e8;\n      local_e8 = local_e8 + 1;\n    }\n    param_10 = *ppcVar4;\n  } while (param_10 != (char *)0x0);\n  *pcVar6 = '\\0';\n  free(param_9);\n  return pcVar3;\n}\n\n",
            "additional_data": {
                "FUN_00103006": {
                    "1": "build_string",
                    "4": "string_concatenation",
                    "3": "copy_and_concatenate_strings",
                    "2": "copy_and_concat_strings",
                    "8": "reverse_string"
                },
                "param_1": {
                    "2": "size_param",
                    "1": "length",
                    "3": "input_1",
                    "4": "size1"
                },
                "param_2": {
                    "1": "str2",
                    "4": "input2",
                    "2": "length",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "size_of_param3",
                    "4": "size3",
                    "2": "param_3",
                    "3": "input_3"
                },
                "param_4": {
                    "4": "input4",
                    "1": "weight",
                    "3": "input_4",
                    "2": "src4"
                },
                "param_5": {
                    "1": "arr5_size",
                    "4": "size5",
                    "2": "color",
                    "3": "input_5"
                },
                "param_6": {
                    "1": "color",
                    "4": "input6",
                    "3": "param_6",
                    "2": "shape"
                },
                "param_7": {
                    "1": "source_7",
                    "2": "weight",
                    "4": "input7",
                    "3": "input_7"
                },
                "param_8": {
                    "3": "input_8",
                    "1": "flag8",
                    "4": "size8",
                    "2": "src8"
                },
                "param_9": {
                    "3": "input_string",
                    "2": "original_string",
                    "1": "to_free_memory",
                    "4": "buffer"
                },
                "param_10": {
                    "1": "str",
                    "5": "source_string",
                    "6": "input_string",
                    "2": "original_string"
                },
                "param_11": {
                    "10": "param11",
                    "1": "extra_string1",
                    "4": "ptr1",
                    "5": "param_11"
                },
                "param_12": {
                    "1": "src_length2",
                    "5": "param_12",
                    "10": "param12",
                    "4": "ptr2"
                },
                "param_13": {
                    "3": "var1",
                    "1": "ptr_13",
                    "5": "param_13",
                    "2": "value1",
                    "10": "param13"
                },
                "param_14": {
                    "1": "val2",
                    "2": "value2",
                    "5": "param_14",
                    "3": "var2",
                    "10": "param14"
                },
                "pcVar3": {
                    "1": "reversed_and_allocated_string",
                    "8": "result",
                    "3": "reversed_string",
                    "12": "result_string",
                    "2": "new_string"
                },
                "ppcVar4": {
                    "1": "current_source_ptr",
                    "3": "current_string",
                    "2": "string_ptr_array",
                    "4": "current_string_ptr"
                },
                "lVar5": {
                    "19": "total_length",
                    "1": "string_length",
                    "2": "length"
                },
                "pcVar6": {
                    "1": "curr_char",
                    "4": "current_string",
                    "2": "dest_string",
                    "14": "current_char"
                },
                "bVar7": {
                    "1": "byte_value",
                    "2": "flag",
                    "6": "increment",
                    "3": "temp_flag",
                    "4": "byte_var"
                },
                "local_f0": {
                    "1": "stack_pointer",
                    "3": "local_counter",
                    "2": "counter",
                    "4": "local_size",
                    "5": "stack_size"
                },
                "local_e8": {
                    "1": "temp_stack_ptr",
                    "2": "string_ptr_array"
                },
                "local_d8": {
                    "1": "local_string_array",
                    "2": "local_strings",
                    "5": "pointer_array"
                },
                "local_b8": {
                    "2": "local_var1",
                    "3": "param13_copy",
                    "1": "temp_param_13"
                },
                "local_b0": {
                    "1": "address6",
                    "2": "value4",
                    "3": "param14_copy"
                },
                "local_a8": {
                    "1": "size_copy"
                },
                "local_98": {
                    "1": "input2",
                    "2": "param_2_copy"
                },
                "local_88": {
                    "1": "value7",
                    "2": "param_3_copy"
                },
                "local_78": {
                    "1": "input_4_copy",
                    "2": "param_4_copy"
                },
                "local_68": {
                    "1": "local_size5",
                    "2": "param_5_copy"
                },
                "local_58": {
                    "1": "extra_param12",
                    "2": "param_6_copy"
                },
                "local_48": {
                    "1": "local_param7",
                    "2": "param_7_copy"
                },
                "local_38": {
                    "1": "unused",
                    "2": "param_8_copy"
                },
                "sVar1": {
                    "3": "length",
                    "1": "current_string_length",
                    "6": "string_length",
                    "2": "str_length"
                },
                "uVar2": {
                    "2": "index",
                    "1": "var",
                    "3": "temp_var"
                },
                "in_AL": {
                    "1": "condition_flag",
                    "13": "flag",
                    "3": "condition"
                },
                "local_d8[]": {
                    "1": "extra_strings_array"
                }
            }
        },
        "FUN_00103160": {
            "entrypoint": "0x00103160",
            "current_name": "copy_string_00103160",
            "code": "\nvoid copy_string_00103160(char *input_string)\n\n{\n  size_t string_length;\n  char *copied_string;\n  long length;\n  byte offset;\n  \n  offset = 0;\n  string_length = strlen(input_string);\n  length = string_length + 1;\n  copied_string = (char *)extract_file_name_00105370(length);\n  for (; length != 0; length = length + -1) {\n    *copied_string = *input_string;\n    input_string = input_string + (ulong)offset * -2 + 1;\n    copied_string = copied_string + (ulong)offset * -2 + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103160": "copy_string_00103160",
                "param_1": "input_string",
                "sVar1": "string_length",
                "pcVar2": "copied_string",
                "lVar3": "length",
                "bVar4": "offset"
            },
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00103160(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  long lVar3;\n  byte bVar4;\n  \n  bVar4 = 0;\n  sVar1 = strlen(param_1);\n  lVar3 = sVar1 + 1;\n  pcVar2 = (char *)FUNC_00105370(lVar3);\n  for (; lVar3 != 0; lVar3 = lVar3 + -1) {\n    *pcVar2 = *param_1;\n    param_1 = param_1 + (ulong)bVar4 * -2 + 1;\n    pcVar2 = pcVar2 + (ulong)bVar4 * -2 + 1;\n  }\n  return;\n}\n\n",
            "additional_data": {
                "FUN_00103160": {
                    "1": "copy_string_with_offset",
                    "27": "copy_string"
                },
                "param_1": {
                    "8": "source_string",
                    "1": "original_string",
                    "18": "input_string",
                    "2": "source"
                },
                "sVar1": {
                    "1": "str_length",
                    "19": "string_length",
                    "6": "source_length",
                    "3": "input_length"
                },
                "pcVar2": {
                    "2": "destination",
                    "1": "new_string",
                    "6": "output_string",
                    "18": "copied_string"
                },
                "lVar3": {
                    "1": "copy_length",
                    "8": "length_plus_one",
                    "2": "length_with_null",
                    "11": "length"
                },
                "bVar4": {
                    "1": "bool_value",
                    "2": "iterator",
                    "13": "offset",
                    "3": "counter"
                }
            }
        },
        "FUN_00103186": {
            "entrypoint": "0x00103186",
            "current_name": "reverse_and_concatenate_strings_00103186",
            "code": "\nchar * reverse_and_concatenate_strings_00103186(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp_var;\n  char *result_string;\n  char **current_string;\n  long total_length;\n  char *current_string;\n  char *result_ptr;\n  byte is_negative;\n  uint counter;\n  char **string_array;\n  char *string_array [4];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 input1_copy;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  is_negative = 0;\n  if (flag != '\\0') {\n    input1_copy = input1;\n    param_2 = input2;\n    param_3 = input3;\n    param_4 = input4;\n    param_5 = input5;\n    param_6 = input6;\n    param_7 = input7;\n    param_8 = input8;\n  }\n  string_array = (char **)&stack0x00000008;\n  total_length = 0;\n  counter = 8;\n  current_string = \"none\";\n  long_param_2_ptr = (char *)param10;\n  long_param_3_ptr = (char *)param11;\n  long_param_4_ptr = (char *)param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  do {\n    string_length = strlen(current_string);\n    total_length = total_length + string_length;\n    if (counter < 0x30) {\n      temp_var = (ulong)counter;\n      counter = counter + 8;\n      current_string = (char **)((long)string_array + temp_var);\n    }\n    else {\n      current_string = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_string;\n  } while (current_string != (char *)0x0);\n  current_string = \"none\";\n  result_string = (char *)extract_file_name_00105370(total_length + 1);\n  counter = 8;\n  string_array = (char **)&stack0x00000008;\n  result_ptr = result_string;\n  do {\n    string_length = strlen(current_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *result_ptr = *current_string;\n      current_string = current_string + (ulong)is_negative * -2 + 1;\n      result_ptr = result_ptr + (ulong)is_negative * -2 + 1;\n    }\n    if (counter < 0x30) {\n      temp_var = (ulong)counter;\n      counter = counter + 8;\n      current_string = (char **)((long)string_array + temp_var);\n    }\n    else {\n      current_string = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_string;\n  } while (current_string != (char *)0x0);\n  *result_ptr = '\\0';\n  return result_string;\n}\n\n",
            "renaming": {
                "FUN_00103186": "reverse_and_concatenate_strings_00103186",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_e0": "counter",
                "local_d8": "string_array",
                "local_c8": "string_array",
                "local_a8": "param13_copy",
                "local_a0": "param14_copy",
                "local_98": "input1_copy",
                "local_88": "param_2",
                "local_78": "param_3",
                "local_68": "param_4",
                "local_58": "param_5",
                "local_48": "param_6",
                "local_38": "param_7",
                "local_28": "param_8",
                "bVar8": "is_negative",
                "lVar5": "total_length",
                "pcVar6": "current_string",
                "pcVar7": "result_ptr",
                "pcVar3": "result_string",
                "sVar1": "string_length",
                "uVar2": "temp_var",
                "param_9": "param9",
                "ppcVar4": "current_string",
                "pcVar4": "ptr_to_current_string",
                "local_c8[1]": "long_param_2_ptr",
                "local_c8[2]": "long_param_3_ptr",
                "local_c8[3]": "long_param_4_ptr"
            },
            "calling": [
                "FUN_001032de"
            ],
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nchar * FUN_00103186(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                   undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                   undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n                   undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  size_t sVar1;\n  ulong uVar2;\n  char *pcVar3;\n  char **ppcVar4;\n  long lVar5;\n  char *pcVar6;\n  char *pcVar7;\n  byte bVar8;\n  uint local_e0;\n  char **local_d8;\n  char *local_c8 [4];\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  bVar8 = 0;\n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_d8 = (char **)&stack0x00000008;\n  lVar5 = 0;\n  local_e0 = 8;\n  pcVar6 = \"none\";\n  local_c8[1] = (char *)param_10;\n  local_c8[2] = (char *)param_11;\n  local_c8[3] = (char *)param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  do {\n    sVar1 = strlen(pcVar6);\n    lVar5 = lVar5 + sVar1;\n    if (local_e0 < 0x30) {\n      uVar2 = (ulong)local_e0;\n      local_e0 = local_e0 + 8;\n      ppcVar4 = (char **)((long)local_c8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_d8;\n      local_d8 = local_d8 + 1;\n    }\n    pcVar6 = *ppcVar4;\n  } while (pcVar6 != (char *)0x0);\n  pcVar6 = \"none\";\n  pcVar3 = (char *)FUNC_00105370(lVar5 + 1);\n  local_e0 = 8;\n  local_d8 = (char **)&stack0x00000008;\n  pcVar7 = pcVar3;\n  do {\n    sVar1 = strlen(pcVar6);\n    for (; sVar1 != 0; sVar1 = sVar1 - 1) {\n      *pcVar7 = *pcVar6;\n      pcVar6 = pcVar6 + (ulong)bVar8 * -2 + 1;\n      pcVar7 = pcVar7 + (ulong)bVar8 * -2 + 1;\n    }\n    if (local_e0 < 0x30) {\n      uVar2 = (ulong)local_e0;\n      local_e0 = local_e0 + 8;\n      ppcVar4 = (char **)((long)local_c8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_d8;\n      local_d8 = local_d8 + 1;\n    }\n    pcVar6 = *ppcVar4;\n  } while (pcVar6 != (char *)0x0);\n  *pcVar7 = '\\0';\n  return pcVar3;\n}\n\n",
            "additional_data": {
                "FUN_00103186": {
                    "1": "build_string",
                    "3": "decode_string",
                    "2": "reverse_string_array",
                    "6": "reverse_string"
                },
                "param_1": {
                    "1": "initial_value",
                    "3": "first_param",
                    "2": "flag1",
                    "11": "input1"
                },
                "param_2": {
                    "3": "input_2",
                    "1": "str2",
                    "2": "flag2",
                    "10": "input2"
                },
                "param_3": {
                    "1": "len_ptr",
                    "2": "input_3",
                    "11": "input3",
                    "4": "third_param"
                },
                "param_4": {
                    "1": "str4",
                    "2": "input_4",
                    "4": "fourth_param",
                    "10": "input4"
                },
                "param_5": {
                    "1": "value5",
                    "2": "flag5",
                    "10": "input5",
                    "4": "fifth_param"
                },
                "param_6": {
                    "2": "flag6",
                    "11": "input6",
                    "1": "input_param_6",
                    "4": "sixth_param"
                },
                "param_7": {
                    "1": "value7",
                    "10": "input7",
                    "2": "param7",
                    "4": "seventh_param"
                },
                "param_8": {
                    "1": "str8",
                    "10": "input8",
                    "2": "input_8",
                    "4": "eighth_param"
                },
                "param_10": {
                    "1": "part_1",
                    "3": "param_10",
                    "8": "param10"
                },
                "param_11": {
                    "1": "eleventh_param",
                    "3": "param_11",
                    "8": "param11"
                },
                "param_12": {
                    "1": "array_param3",
                    "3": "param_12",
                    "8": "param12"
                },
                "param_13": {
                    "1": "value5",
                    "3": "input13",
                    "11": "param13"
                },
                "param_14": {
                    "1": "long_value6",
                    "3": "param_14",
                    "11": "param14"
                },
                "in_AL": {
                    "1": "is_flag_set",
                    "13": "flag",
                    "2": "condition"
                },
                "local_e0": {
                    "1": "local_size",
                    "3": "stack_size",
                    "2": "offset",
                    "4": "local_counter",
                    "7": "counter"
                },
                "local_d8": {
                    "1": "str_array_ptr",
                    "2": "local_string_array",
                    "4": "string_array",
                    "3": "stack_ptr"
                },
                "local_c8": {
                    "1": "local_string_array",
                    "2": "str_array",
                    "3": "string_array"
                },
                "local_a8": {
                    "1": "input13_copy",
                    "5": "param13_copy",
                    "2": "param_13",
                    "3": "local_param13"
                },
                "local_a0": {
                    "1": "temp_val2",
                    "5": "param14_copy",
                    "2": "param_14",
                    "3": "local_param14"
                },
                "local_98": {
                    "1": "unused_var_98",
                    "2": "input1_copy"
                },
                "local_88": {
                    "1": "str2",
                    "3": "param_2",
                    "2": "local_input2"
                },
                "local_78": {
                    "2": "temp_param3",
                    "1": "extra_param5",
                    "3": "param_3"
                },
                "local_68": {
                    "1": "str4",
                    "2": "local_input4",
                    "3": "param_4"
                },
                "local_58": {
                    "1": "fifth_param_copy",
                    "2": "input5_copy",
                    "3": "param_5"
                },
                "local_48": {
                    "1": "temp_var6",
                    "3": "param_6",
                    "2": "temp_param6"
                },
                "local_38": {
                    "1": "seventh_local",
                    "2": "input7_copy",
                    "3": "param_7"
                },
                "local_28": {
                    "1": "unused_var_28",
                    "2": "local_input8",
                    "3": "param_8"
                },
                "bVar8": {
                    "1": "byte_value",
                    "5": "is_negative",
                    "3": "byte_var",
                    "2": "flag2"
                },
                "lVar5": {
                    "16": "total_length",
                    "1": "total_string_length",
                    "3": "total_len"
                },
                "pcVar6": {
                    "1": "source_str",
                    "4": "current_char",
                    "11": "current_string",
                    "2": "str"
                },
                "pcVar7": {
                    "1": "destination_char",
                    "3": "destination_string",
                    "2": "destination",
                    "4": "result_ptr"
                },
                "pcVar3": {
                    "2": "concatenated_string",
                    "10": "result",
                    "1": "dst_str",
                    "13": "result_string"
                },
                "sVar1": {
                    "6": "string_length",
                    "3": "length",
                    "4": "str_length"
                },
                "uVar2": {
                    "1": "ul_index",
                    "5": "temp_var"
                },
                "param_9": {
                    "1": "p9",
                    "2": "input9",
                    "8": "param9"
                },
                "ppcVar4": {
                    "1": "string_pointer",
                    "4": "current_string",
                    "2": "current_ptr"
                },
                "pcVar4": {
                    "1": "ptr_to_current_string"
                },
                "in_al": {
                    "1": "flag"
                },
                "...\n: param_14: ": {
                    "1": "input_14"
                },
                "local_c8[1]": {
                    "1": "long_param_2_ptr"
                },
                "local_c8[2]": {
                    "1": "long_param_3_ptr"
                },
                "local_c8[3]": {
                    "1": "long_param_4_ptr"
                }
            }
        },
        "FUN_001032de": {
            "entrypoint": "0x001032de",
            "current_name": "print_usage_and_exit_001032de",
            "code": "\nvoid print_usage_and_exit_001032de(FILE *output_file,int exit_code)\n\n{\n  undefined8 *pointer;\n  void *reversed_string;\n  char *message;\n  undefined4 *data_ptr;\n  \n  data_ptr = &DAT_00108ca0;\n  reversed_string = (void *)reverse_and_concatenate_strings(&DAT_00106137,0);\n  do {\n    pointer = (undefined8 *)(data_ptr + 6);\n    data_ptr = data_ptr + 4;\n    reversed_string = (void *)reverse_string(reversed_string,reversed_string,&DAT_001061ef,*pointer,0);\n  } while (data_ptr != (undefined4 *)&DAT_00108d90);\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> elffile(s)\\n\",5);\n  fprintf(output_file,message,\"elfedit\");\n  message = (char *)dcgettext(0,\" Update the ELF header of ELF files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  --input-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set input machine type\\n  --output-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set output machine type\\n  --input-type [none|rel|exec|dyn]\\n                              Set input file type\\n  --output-type [none|rel|exec|dyn]\\n                              Set output file type\\n  --input-osabi [%s]\\n                              Set input OSABI\\n  --output-osabi [%s]\\n                              Set output OSABI\\n  --input-abiversion [0-255]  Set input ABIVERSION\\n  --output-abiversion [0-255] Set output ABIVERSION\\n\"\n                             ,5);\n  fprintf(output_file,message,reversed_string,reversed_string);\n  message = (char *)dcgettext(0,\n                             \"  --enable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Enable x86 feature\\n  --disable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Disable x86 feature\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -h --help                   Display this information\\n  -v --version                Display the version number of %s\\n\"\n                             ,5);\n  fprintf(output_file,message,\"elfedit\");\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n  free_memory(reversed_string);\n                    \n  exit_program(exit_code);\n}\n\n",
            "renaming": {
                "FUN_001032de": "print_usage_and_exit_001032de",
                "param_1": "output_file",
                "param_2": "exit_code",
                "puVar1": "pointer",
                "__ptr": "reversed_string",
                "pcVar2": "message",
                "puVar3": "data_ptr",
                "reverse_and_concatenate_strings_00103186": "reverse_and_concatenate_strings",
                "reverse_string_00103006": "reverse_string",
                "dcgettext": "get_localized_text",
                "fprintf": "write_to_file",
                "exit": "exit_program",
                "free": "free_memory"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "dcgettext",
                "FUN_00103186",
                "free",
                "fprintf",
                "exit",
                "FUN_00103006"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001032de": {
                    "6": "print_elf_edit_usage",
                    "1": "print_elf_options",
                    "4": "update_elf_header",
                    "11": "print_usage_and_exit",
                    "2": "print_elf_edit_options"
                },
                "param_1": {
                    "6": "file",
                    "1": "file_output",
                    "2": "file_ptr",
                    "19": "output_file"
                },
                "param_2": {
                    "26": "exit_code",
                    "3": "error_code",
                    "1": "exit_status"
                },
                "puVar1": {
                    "1": "option_pointer",
                    "4": "pointer",
                    "2": "option",
                    "3": "ptr"
                },
                "__ptr": {
                    "2": "reverse_concat_string",
                    "4": "reversed_concatenated_string",
                    "3": "concatenated_strings",
                    "7": "concatenated_string",
                    "9": "reversed_string",
                    "1": "str"
                },
                "pcVar2": {
                    "1": "translation",
                    "10": "message",
                    "7": "localized_string",
                    "3": "localized_text"
                },
                "puVar3": {
                    "1": "dat",
                    "4": "data_ptr",
                    "3": "option_list",
                    "2": "option_array"
                },
                "DAT_00108ca0": {
                    "1": "dat_start"
                },
                "reverse_and_concatenate_strings_00103186": {
                    "1": "reverse_and_concatenate_strings"
                },
                "DAT_00106137": {
                    "1": "start_string"
                },
                "reverse_string_00103006": {
                    "1": "reverse_string"
                },
                "DAT_001061ef": {
                    "1": "delimiter"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "exit": {
                    "2": "exit_program"
                },
                "free": {
                    "1": "free_memory"
                }
            }
        },
        "FUN_00103449": {
            "entrypoint": "0x00103449",
            "current_name": "allocate_or_resize_memory_00103449",
            "code": "\nvoid allocate_or_resize_memory_00103449(void *buffer,size_t size)\n\n{\n  size_t new_size;\n  void *allocated_memory;\n  \n  new_size = 1;\n  if (size != 0) {\n    new_size = size;\n  }\n  if (buffer == (void *)0x0) {\n    allocated_memory = malloc(new_size);\n  }\n  else {\n    allocated_memory = realloc(buffer,new_size);\n  }\n  if (allocated_memory == (void *)0x0) {\n    allocate_memory_00102fc7(new_size);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103449": "allocate_or_resize_memory_00103449",
                "param_1": "buffer",
                "param_2": "size",
                "__size": "new_size",
                "pvVar1": "allocated_memory"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "FUN_00102fc7",
                "malloc",
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103449": {
                    "4": "allocate_or_realloc_memory",
                    "2": "realloc_or_allocate_memory",
                    "1": "resize_memory",
                    "5": "allocate_or_reallocate_memory",
                    "16": "allocate_or_resize_memory"
                },
                "param_1": {
                    "1": "data",
                    "2": "old_memory",
                    "3": "ptr",
                    "5": "memory_block",
                    "6": "buffer"
                },
                "param_2": {
                    "3": "buffer_size",
                    "9": "new_size",
                    "2": "memory_size",
                    "12": "size",
                    "1": "block_size"
                },
                "__size": {
                    "9": "new_size",
                    "7": "size",
                    "3": "allocated_size",
                    "2": "actual_size",
                    "1": "block_size",
                    "4": "allocation_size"
                },
                "pvVar1": {
                    "3": "new_memory",
                    "1": "new_data_ptr",
                    "2": "new_ptr",
                    "9": "allocated_memory",
                    "4": "new_buffer"
                }
            }
        },
        "FUN_0010347f": {
            "entrypoint": "0x0010347f",
            "current_name": "extract_data_0010347f",
            "code": "\nulong extract_data_0010347f(ulong *data,undefined4 data_length)\n\n{\n  uint temp_var1;\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length) {\n  case 1:\n    return (ulong)*(byte *)data;\n  case 2:\n    return (ulong)CONCAT11((char)*(undefined2 *)data,(char)((ushort)*(undefined2 *)data >> 8))\n    ;\n  case 3:\n    return (ulong)*(byte *)((long)data + 1) << 8 | (ulong)*(byte *)data << 0x10 |\n           (ulong)*(byte *)((long)data + 2);\n  case 4:\n    temp_var1 = *(uint *)data;\n    return (ulong)(temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 | temp_var1 << 0x18);\n  case 5:\n    temp_var1 = *(uint *)((long)data + 1);\n    return (ulong)CONCAT14(*(byte *)data,\n                           temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 |\n                           temp_var1 << 0x18);\n  case 6:\n    temp_var1 = *(uint *)((long)data + 2);\n    return (ulong)*(byte *)((long)data + 1) << 0x20 | (ulong)*(byte *)data << 0x28 |\n           (ulong)(temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 | temp_var1 << 0x18);\n  case 7:\n    temp_var1 = *(uint *)((long)data + 3);\n    return (ulong)*(byte *)((long)data + 2) << 0x20 | (ulong)*(byte *)((long)data + 1) << 0x28\n           | (ulong)*(byte *)data << 0x30 |\n           (ulong)(temp_var1 >> 0x18 | (temp_var1 & 0xff0000) >> 8 | (temp_var1 & 0xff00) << 8 | temp_var1 << 0x18);\n  case 8:\n    result = *data;\n    return result >> 0x38 | (result & 0xff000000000000) >> 0x28 | (result & 0xff0000000000) >> 0x18 |\n           (result & 0xff00000000) >> 8 | (result & 0xff000000) << 8 | (result & 0xff0000) << 0x18 |\n           (result & 0xff00) << 0x28 | result << 0x38;\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,data_length);\n                    \n    abort();\n  }\n}\n\n",
            "renaming": {
                "FUN_0010347f": "extract_data_0010347f",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "temp_var1",
                "uVar2": "result",
                "uVar3": "error_message"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010347f": {
                    "1": "get_u_int_from_data",
                    "3": "decode_data",
                    "10": "convert_data"
                },
                "param_1": {
                    "5": "data_ptr",
                    "7": "data_pointer",
                    "19": "data"
                },
                "param_2": {
                    "1": "data_size",
                    "28": "data_length",
                    "2": "length"
                },
                "uVar1": {
                    "4": "temp_value",
                    "1": "converted_data",
                    "7": "temp",
                    "5": "temp1",
                    "2": "temp_var"
                },
                "uVar2": {
                    "7": "temp_var2",
                    "5": "temp2",
                    "14": "result",
                    "1": "temp_ulong",
                    "2": "temp_value2"
                },
                "uVar3": {
                    "28": "error_message",
                    "1": "translation_text"
                }
            }
        },
        "FUN_0010354e": {
            "entrypoint": "0x0010354e",
            "current_name": "write_data_to_memory_0010354e",
            "code": "\nvoid write_data_to_memory_0010354e(long destination,ulong data,uint length)\n\n{\n  undefined8 error_message;\n  int counter;\n  ulong temp_length;\n  \n  temp_length = (ulong)length;\n  if (8 < length) {\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,length);\n                    \n    abort();\n  }\n  while (counter = (int)temp_length, temp_length = (ulong)(counter - 1), counter != 0) {\n    *(char *)(destination + temp_length) = (char)data;\n    data = data >> 8;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0010354e": "write_data_to_memory_0010354e",
                "param_1": "destination",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "error_message",
                "iVar2": "counter",
                "uVar3": "temp_length"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010354e": {
                    "1": "reverse_data",
                    "3": "fill_data",
                    "2": "write_data"
                },
                "param_1": {
                    "1": "data",
                    "3": "data_buffer",
                    "2": "memory_address",
                    "6": "destination"
                },
                "param_2": {
                    "1": "value_to_set",
                    "10": "data",
                    "4": "data_value",
                    "2": "byte_value"
                },
                "param_3": {
                    "1": "count",
                    "8": "data_length",
                    "21": "length"
                },
                "uVar1": {
                    "20": "error_message",
                    "1": "err_msg",
                    "4": "error_msg"
                },
                "iVar2": {
                    "1": "index",
                    "4": "count",
                    "2": "remaining_length",
                    "3": "iteration_count",
                    "8": "counter"
                },
                "uVar3": {
                    "1": "loop_counter_unsigned",
                    "10": "temp_length",
                    "2": "unsigned_length",
                    "6": "remaining_length"
                }
            }
        },
        "FUN_0010358d": {
            "entrypoint": "0x0010358d",
            "current_name": "parse_archive_0010358d",
            "code": "\nuint parse_archive_0010358d(undefined8 param,FILE *file,char flag)\n\n{\n  long length;\n  char *str;\n  int result;\n  uint status;\n  undefined8 error_message;\n  size_t read_size;\n  undefined8 error_message;\n  ulong value;\n  size_t name_length;\n  char *corrupt_string;\n  size_t archive_name_length;\n  size_t file_name_length;\n  char *full_name;\n  char *archive_name;\n  FILE *stream;\n  char *error_message;\n  uint return_value;\n  stat file_stat;\n  undefined memory1 [24];\n  undefined memory2 [16];\n  undefined8 value1;\n  undefined archive_data [16];\n  undefined memory_block4 [16];\n  undefined8 unused_variable;\n  long member_offset;\n  long current_offset;\n  int flag;\n  undefined buffer [48];\n  char header [10];\n  short header_type;\n  \n  value1 = 0;\n  archive_data = ZEXT816(0);\n  memory_block4 = ZEXT816(0);\n  memory1._0_16_ = ZEXT816(0);\n  memory2 = ZEXT816(0);\n  unused_variable = 0;\n  result = fileno(file);\n  result = fstat(result,&file_stat);\n  if ((result < 0) ||\n     (result = parse_archive_0010358d_header(archive_data,param,file,file_stat.st_size,flag), result != 0)) {\nLAB_001036cc:\n    return_value = 1;\nLAB_00103a46:\n    if ((FILE *)memory1._8_8_ != (FILE *)0x0) {\n      fclose((FILE *)memory1._8_8_);\n    }\n    free_memory(memory1);\n    free_memory(archive_data);\n  }\n  else {\n    return_value = 0;\n    while (result = fseek(file,current_offset,0), result == 0) {\n      read_size = fread(buffer,1,0x3c,file);\n      if (read_size != 0x3c) {\n        if (read_size == 0) goto LAB_00103a46;\n        error_message = \"%s: failed to read archive header\\n\";\nLAB_001036b8:\n        error_message = dcgettext(0,error_message,5);\n        print_error(error_message,param);\n        goto LAB_001036cc;\n      }\n      if (header_type != 0xa60) {\n        error_message = archive_data._0_8_;\n        error_message = dcgettext(0,\"%s: did not find a valid archive header\\n\",5);\n        print_error(error_message,error_message);\n        goto LAB_001036cc;\n      }\n      current_offset = current_offset + 0x3c;\n      value = strtoul(header,(char **)0x0,10);\n      DAT_00109438 = (value + 1) - (ulong)((value & 1) == 0);\n      error_message = (char *)extract_file_name_001029a5(archive_data,memory1);\n      if (error_message == (char *)0x0) {\n        error_message = \"%s: bad archive file name\\n\";\n        goto LAB_001036b8;\n      }\n      name_length = strlen(error_message);\n      corrupt_string = (char *)dcgettext(0,\"<corrupt>\",5);\n      archive_name = (char *)archive_data._0_8_;\n      archive_name_length = strlen((char *)archive_data._0_8_);\n      file_name_length = strlen(error_message);\n      read_size = archive_name_length + file_name_length + 3;\n      if (flag == 0) {\n        full_name = (char *)malloc(read_size);\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,read_size,\"%s(%s)\",archive_name,error_message);\n      }\n      else if (member_offset == 0) {\n        full_name = (char *)malloc(read_size);\n        if (full_name == (char *)0x0) {\nLAB_001037d3:\n          error_message = dcgettext(0,\"Out of memory\\n\",5);\n          print_error(error_message);\n          error_message = dcgettext(0,\"%s: bad archive file name\\n\",5);\n          print_error(error_message,param);\n          free(error_message);\n          goto LAB_001036cc;\n        }\n        snprintf(full_name,read_size,\"%s[%s]\",archive_name,error_message);\n      }\n      else {\n        str = (char *)memory1._0_8_;\n        length = archive_name_length + file_name_length + 5;\n        if ((char *)memory1._0_8_ == (char *)0x0) {\n          read_size = strlen(corrupt_string);\n          read_size = length + read_size;\n          full_name = (char *)malloc(read_size);\n          str = corrupt_string;\n        }\n        else {\n          read_size = strlen((char *)memory1._0_8_);\n          read_size = length + read_size;\n          full_name = (char *)malloc(read_size);\n        }\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,read_size,\"%s[%s(%s)]\",archive_name,str,error_message);\n      }\n      if (flag == '\\0') {\n        free(error_message);\n        current_offset = current_offset + DAT_00109438;\n        status = parse_elf_header(full_name,file);\n        return_value = return_value | status;\n      }\n      else {\n        if (member_offset == 0) {\n          archive_name = (char *)extract_file_name_00102cc4(param,error_message,name_length);\n          free(error_message);\n          if (archive_name != (char *)0x0) {\n            stream = fopen(archive_name,\"r+b\");\n            if (stream != (FILE *)0x0) {\n              status = parse_elf_header(full_name,stream);\n              return_value = return_value | status;\n              fclose(stream);\n              free(archive_name);\n              goto LAB_00103a39;\n            }\n            error_message = dcgettext(0,\"Input file \\'%s\\' is not readable\\n\",5);\n            print_error(error_message,archive_name);\n            free(archive_name);\n          }\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        free(error_message);\n        result = fseek((FILE *)memory1._8_8_,member_offset + 0x3c,0);\n        if (result != 0) {\n          error_message = memory1._0_8_;\n          error_message = dcgettext(0,\"%s: failed to seek to archive member\\n\",5);\n          print_error(error_message,error_message);\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        status = parse_elf_header(full_name,memory1._8_8_);\n        return_value = return_value | status;\n      }\nLAB_00103a39:\n      free(full_name);\n    }\n    error_message = dcgettext(0,\"%s: failed to seek to next archive header\\n\",5);\n    return_value = 1;\n    print_error(error_message,param);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0010358d": "parse_archive_0010358d",
                "param_1": "param",
                "param_2": "file",
                "param_3": "flag",
                "lVar1": "length",
                "pcVar2": "str",
                "iVar3": "result",
                "uVar4": "status",
                "uVar5": "error_message",
                "sVar6": "read_size",
                "uVar7": "error_message",
                "uVar8": "value",
                "sVar9": "name_length",
                "__s": "corrupt_string",
                "sVar10": "archive_name_length",
                "sVar11": "file_name_length",
                "__s_00": "full_name",
                "pcVar12": "archive_name",
                "pcVar13": "error_message",
                "__stream": "stream",
                "local_208": "file_stat",
                "local_178": "memory1",
                "local_160": "memory2",
                "local_148": "value1",
                "local_d8": "archive_data",
                "local_c0": "memory_block4",
                "local_a8": "unused_variable",
                "local_98": "member_offset",
                "local_90": "current_offset",
                "local_88": "flag",
                "local_80": "buffer",
                "local_50": "header",
                "local_46": "header_type",
                "uVar14": "return_value",
                "fclose": "close_file",
                "free_memory_00102f65": "free_memory",
                "parse_archive_001025ab": "parse_archive_header",
                "fstat": "get_file_stats",
                "parse_elf_header_00104de0": "parse_elf_header",
                "error": "print_error",
                "malloc": "allocate_memory",
                "snprintf": "formatted_print",
                "strlen": "string_length",
                "strtoul": "string_to_ulong"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "fopen",
                "error",
                "free",
                "malloc",
                "FUN_00104de0",
                "fseek",
                "FUN_001029a5",
                "FUN_00102f65",
                "strtoul",
                "dcgettext",
                "fileno",
                "strlen",
                "fread",
                "fclose",
                "snprintf",
                "FUN_001025ab",
                "FUN_00102cc4",
                "fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010358d": {
                    "2": "parse_and_extract_archive",
                    "24": "parse_archive",
                    "1": "parse_archive_file"
                },
                "param_1": {
                    "2": "file_name",
                    "1": "param_address",
                    "3": "file_path",
                    "6": "param",
                    "4": "param1"
                },
                "param_2": {
                    "21": "file",
                    "1": "file_stream",
                    "2": "param_file",
                    "3": "file_pointer"
                },
                "param_3": {
                    "1": "read_mode",
                    "3": "reverse_flag",
                    "17": "flag",
                    "2": "param_flag"
                },
                "lVar1": {
                    "1": "strlen_archive_name",
                    "18": "length",
                    "3": "string_length"
                },
                "pcVar2": {
                    "1": "header",
                    "3": "corrupt_string",
                    "4": "archive_name",
                    "2": "string",
                    "7": "str"
                },
                "iVar3": {
                    "1": "return_code",
                    "25": "result",
                    "4": "status"
                },
                "uVar4": {
                    "1": "flags",
                    "3": "return_value",
                    "2": "error_flag",
                    "7": "parse_result",
                    "4": "result",
                    "8": "status"
                },
                "uVar5": {
                    "3": "error_msg",
                    "11": "error_message",
                    "7": "message",
                    "1": "string",
                    "2": "translation"
                },
                "sVar6": {
                    "1": "read",
                    "10": "read_size",
                    "5": "size",
                    "8": "bytes_read",
                    "2": "buffer_length"
                },
                "uVar7": {
                    "1": "str",
                    "5": "error_string",
                    "6": "error_message",
                    "4": "message",
                    "2": "error_msg"
                },
                "uVar8": {
                    "1": "archive_number",
                    "10": "value",
                    "7": "file_size"
                },
                "sVar9": {
                    "1": "str_length",
                    "2": "name_len",
                    "10": "name_length",
                    "5": "filename_length",
                    "7": "file_name_length"
                },
                "__s": {
                    "3": "corrupt_message",
                    "4": "corrupt",
                    "1": "error_msg",
                    "2": "corrupt_text",
                    "11": "corrupt_string"
                },
                "sVar10": {
                    "1": "archive_length",
                    "2": "string_length",
                    "6": "archive_name_length"
                },
                "sVar11": {
                    "1": "str_len2",
                    "4": "filename_length",
                    "3": "name_length",
                    "6": "file_name_length"
                },
                "__s_00": {
                    "1": "concatenated_name",
                    "2": "filename",
                    "4": "full_name",
                    "3": "new_name"
                },
                "pcVar12": {
                    "1": "str2",
                    "2": "filename",
                    "8": "archive_name"
                },
                "pcVar13": {
                    "1": "var13",
                    "7": "error_message",
                    "2": "error_msg",
                    "5": "file_name"
                },
                "__stream": {
                    "1": "archive_file",
                    "2": "input_file",
                    "3": "file_stream",
                    "5": "stream"
                },
                "local_208": {
                    "1": "stat_info",
                    "3": "file_info",
                    "21": "file_stat"
                },
                "local_178": {
                    "1": "archive_filename",
                    "2": "buffer1",
                    "4": "memory1"
                },
                "local_160": {
                    "1": "memory_2",
                    "2": "buffer2",
                    "4": "memory2"
                },
                "local_148": {
                    "1": "parse_result",
                    "2": "error_code",
                    "4": "value1"
                },
                "local_d8": {
                    "1": "var2",
                    "2": "archive_data"
                },
                "local_c0": {
                    "2": "memory4",
                    "1": "undefined_2"
                },
                "local_a8": {
                    "1": "archive_name",
                    "2": "value4"
                },
                "local_98": {
                    "1": "archive_offset",
                    "3": "file_offset",
                    "5": "member_offset",
                    "4": "current_offset"
                },
                "local_90": {
                    "1": "pos",
                    "2": "archive_offset",
                    "10": "current_offset",
                    "3": "position"
                },
                "local_88": {
                    "1": "string_flag",
                    "3": "is_file",
                    "4": "flag2",
                    "2": "is_corrupt"
                },
                "local_80": {
                    "1": "temp_buffer",
                    "17": "buffer",
                    "7": "header_buffer"
                },
                "local_50": {
                    "1": "size_string",
                    "3": "archive_header",
                    "8": "header",
                    "2": "header_magic"
                },
                "local_46": {
                    "2": "header_length",
                    "1": "header_len",
                    "5": "header_value",
                    "3": "header_size"
                },
                "uVar14": {
                    "1": "is_error",
                    "7": "return_value",
                    "2": "result",
                    "6": "error_flag",
                    "3": "return_val"
                },
                "file_ptr": {
                    "1": "archive_file"
                },
                "fclose": {
                    "1": "close_file"
                },
                "free_memory_00102f65": {
                    "1": "free_memory"
                },
                "parse_archive_001025ab": {
                    "1": "parse_archive_header"
                },
                "fstat": {
                    "1": "get_file_stats"
                },
                "parse_elf_header_00104de0": {
                    "1": "parse_elf_header"
                },
                "strings": {
                    "1": "strings"
                },
                "error": {
                    "1": "print_error"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "snprintf": {
                    "1": "formatted_print"
                },
                "strlen": {
                    "1": "string_length"
                },
                "strtoul": {
                    "1": "string_to_ulong"
                },
                "DAT_00109438": {
                    "1": "padding_size"
                },
                "F_UNPACK_ARCHIVE": {
                    "1": "unpack_archive"
                }
            }
        },
        "FUN_00103a90": {
            "entrypoint": "0x00103a90",
            "current_name": "extract_data_00103a90",
            "code": "\nulong extract_data_00103a90(ulong *data_pointer,ulong data_length)\n\n{\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length & 0xffffffff) {\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,data_length & 0xffffffff);\n                    \n    abort();\n  case 1:\n    return (ulong)*(byte *)data_pointer;\n  case 2:\n    return (ulong)*(ushort *)data_pointer;\n  case 3:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte *)((long)data_pointer + 1) << 8 |\n                         (ulong)*(byte *)((long)data_pointer + 2) << 0x10);\n    return result;\n  case 4:\n    return (ulong)*(uint *)data_pointer;\n  case 5:\n    result = FUNC_00103ab3(data_pointer,data_length,(ulong)*(byte *)((long)data_pointer + 4) << 0x20);\n    return result;\n  case 6:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte *)((long)data_pointer + 4) << 0x20 |\n                         (ulong)*(byte *)((long)data_pointer + 5) << 0x28);\n    return result;\n  case 7:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte *)((long)data_pointer + 4) << 0x20 |\n                         (ulong)*(byte *)((long)data_pointer + 5) << 0x28 | (ulong)*(uint *)data_pointer);\n    return result;\n  case 8:\n    return *data_pointer;\n  }\n}\n\n",
            "renaming": {
                "FUN_00103a90": "extract_data_00103a90",
                "param_1": "data_pointer",
                "param_2": "data_length",
                "uVar1": "result",
                "uVar2": "error_message"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "FUN_00103ab3",
                "caseD_0",
                "caseD_3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103a90": {
                    "1": "get_data",
                    "3": "decode_data_length",
                    "2": "decode_data",
                    "8": "extract_data",
                    "5": "get_data_value"
                },
                "param_1": {
                    "8": "data_ptr",
                    "12": "data_pointer",
                    "1": "data_buffer",
                    "10": "data"
                },
                "param_2": {
                    "29": "data_length",
                    "2": "length"
                },
                "uVar1": {
                    "2": "return_value",
                    "24": "result",
                    "3": "extracted_data",
                    "1": "decoding_result"
                },
                "uVar2": {
                    "25": "error_message",
                    "4": "error_msg",
                    "1": "err_msg"
                }
            }
        },
        "FUN_00103ab3": {
            "entrypoint": "0x00103ab3",
            "current_name": "FUNC_00103ab3",
            "code": "\nvoid FUNC_00103ab3(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103ab3": "FUNC_00103ab3"
            },
            "calling": [
                "FUN_00103a90",
                "caseD_3"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103ad0": {
            "entrypoint": "0x00103ad0",
            "current_name": "fill_memory_00103ad0",
            "code": "\nvoid fill_memory_00103ad0(long destination,ulong value,uint length)\n\n{\n  undefined8 error_message;\n  ulong index;\n  \n  if (length < 9) {\n    for (index = 0; length != index; index = index + 1) {\n      *(char *)(destination + index) = (char)value;\n      value = value >> 8;\n    }\n    return;\n  }\n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,length);\n                    \n  abort();\n}\n\n",
            "renaming": {
                "FUN_00103ad0": "fill_memory_00103ad0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "uVar1": "error_message",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00104de0"
            ],
            "called": [
                "FUN_00102c98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103ad0": {
                    "2": "initialize_memory",
                    "1": "fill_memory_block",
                    "3": "fill_data",
                    "4": "write_data",
                    "5": "fill_memory"
                },
                "param_1": {
                    "4": "buffer",
                    "2": "address",
                    "1": "data_start_address",
                    "3": "buffer_address",
                    "10": "destination"
                },
                "param_2": {
                    "1": "initial_value",
                    "14": "value",
                    "13": "data"
                },
                "param_3": {
                    "11": "data_length",
                    "20": "length"
                },
                "uVar1": {
                    "20": "error_message",
                    "4": "error_string",
                    "2": "error_msg",
                    "1": "message"
                },
                "uVar2": {
                    "2": "count",
                    "4": "i",
                    "1": "iteration_counter",
                    "11": "index",
                    "7": "counter"
                }
            }
        },
        "entry": {
            "entrypoint": "0x00103b00",
            "current_name": "entry",
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(parse_elf_file_00103bf0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "__libc_start_main",
                "FUN_00103bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00103b30": {
            "entrypoint": "0x00103b30",
            "current_name": "FUNC_00103b30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b43) */\n/* WARNING: Removing unreachable block (ram,0x00103b4f) */\n\nvoid FUNC_00103b30(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103b30": "FUNC_00103b30"
            },
            "calling": [
                "_FINI_0"
            ],
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00103b60": {
            "entrypoint": "0x00103b60",
            "current_name": "FUNC_00103b60",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b84) */\n/* WARNING: Removing unreachable block (ram,0x00103b90) */\n\nvoid FUNC_00103b60(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00103b60": "FUNC_00103b60"
            },
            "calling": [
                "_INIT_0"
            ],
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "_FINI_0": {
            "entrypoint": "0x00103ba0",
            "current_name": "_FINI_0",
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00109320 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00109148);\n  FUNC_00103b30();\n  DAT_00109320 = 1;\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00103b30",
                "__cxa_finalize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "_INIT_0": {
            "entrypoint": "0x00103be0",
            "current_name": "_INIT_0",
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103b60();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00103b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00103bf0": {
            "entrypoint": "0x00103bf0",
            "current_name": "parse_elf_file_00103bf0",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nuint parse_elf_file_00103bf0(int argc,long *argv)\n\n{\n  char char_var1;\n  byte byte_var\n  ulong ulong_var3;\n  bool bool_var4;\n  bool bool_var5;\n  bool bool_var6;\n  bool bool_var7;\n  int index;\n  uint result;\n  int status;\n  void *address;\n  void *pointer;\n  long *ptr_var11;\n  ulong ulong_var12;\n  ulong ulong_var13;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  FILE *file_ptr;\n  size_t size;\n  byte *buffer;\n  size_t file_size;\n  int *errno_ptr;\n  long loop_var;\n  long *file_names;\n  byte *byte_ptr;\n  long loop_var2;\n  long *long_ptr2;\n  undefined8 error_message;\n  ulong ulong_var26;\n  byte *byte_ptr2;\n  uint ulong_var28;\n  long long_var3;\n  uint final_result;\n  int temp_var2;\n  undefined **pointer_pointer;\n  uint ulong_var33;\n  char *str_var;\n  ulong ulong_var35;\n  char *str_var2;\n  undefined8 *pointer_val2;\n  ulong ulong_var38;\n  undefined8 *extracted_file_names;\n  ulong local_var120;\n  char *local_str_var;\n  byte *local_byte_var;\n  stat local_stat;\n  \n  index = 0;\n  temp_var2 = 2000;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  file_names = argv;\nLAB_00103c54:\n  long_var3 = (long)(index + 1);\n  do {\n    index = (int)long_var3;\n    if (argc <= index) {\n      pointer_pointer = &PTR_s_input_mach_00109180;\n      break;\n    }\n    if (*(char *)file_names[long_var3] == '@') {\n      temp_var2 = temp_var2 + -1;\n      if (temp_var2 == 0) {\n        long_var3 = *file_names;\n        str_var2 = \"%s: handle_error: too many @-files encountered\\n\";\n        goto LAB_00104739;\n      }\n      str_var2 = (char *)file_names[long_var3] + 1;\n      status = stat(str_var2,&local_stat);\n      if (-1 < status) {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var3 = *file_names;\n            str_var2 = \"%s: handle_error: @-file refers to a directory\\n\";\nLAB_00104739:\n            fprintf(_stderr,str_var2,long_var3);\n            exit_program_00102fbc();\n          } while( true );\n        }\n        file_ptr = fopen(str_var2,\"r\");\n        if (file_ptr != (FILE *)0x0) goto code_r0x00104650;\n      }\n    }\n    long_var3 = long_var3 + 1;\n  } while( true );\nLAB_00103c87:\n  index = getopt_long(argc,file_names,&DAT_0010604c,pointer_pointer,0);\n  if (index == -1) {\n    if ((option_index == argc) ||\n       (((DAT_00109444 | DAT_00109440) == 0 &&\n        (pointer_pointer = (undefined **)0x0,\n        (DAT_0010916c & DAT_00109160 & DAT_00109158 & DAT_00109150) == 0xffffffff))))\n    goto switchD_00103cba_caseD_69;\n    final_result = 0;\n    goto LAB_00103d1c;\n  }\n  switch(index) {\n  case 0x68:\n    print_usage_and_exit(_stdout,0);\n  default:\nswitchD_00103cba_caseD_69:\n    print_usage_and_exit(_stderr,1);\n    goto switchD_00103cba_caseD_9a;\n  case 0x76:\n    printf(\"GNU %s %s\\n\",\"elfedit\",\"(GNU Binutils for Debian) 2.40\");\n    str_var2 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str_var2);\n    str_var2 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str_var2);\n                    \n    exit(0);\n  case 0x96:\n    DAT_00109174 = get_machine_type(_optarg);\n    if (DAT_00109174 < 0) {\n      return 1;\n    }\n    if (DAT_00109174 == 6) {\n      DAT_00109170 = 1;\n    }\n    else if (DAT_00109174 < 7) {\n      DAT_00109170 = (DAT_00109174 != 3) + 1 + (uint)(DAT_00109174 != 3);\n    }\n    else {\n      DAT_00109170 = 3 - (uint)(DAT_00109174 - 0xb4U < 2);\n    }\n    goto LAB_00103c87;\n  case 0x97:\n    DAT_0010916c = get_machine_type(_optarg);\n    if ((int)DAT_0010916c < 0) {\n      return 1;\n    }\n    if ((int)DAT_0010916c < 0xb6) {\n      DAT_00109168 = 2;\n      if (((int)DAT_0010916c < 0xb4) && (DAT_00109168 = 1, DAT_0010916c != 3)) {\n        DAT_00109168 = (DAT_0010916c != 6) + 1 + (uint)(DAT_0010916c != 6);\n      }\n    }\n    else {\n      DAT_00109168 = 3;\n    }\n    goto LAB_00103c87;\n  case 0x98:\n    DAT_00109164 = get_type(_optarg);\n    final_result = DAT_00109164;\n    break;\n  case 0x99:\n    DAT_00109160 = get_type(_optarg);\n    final_result = DAT_00109160;\n    break;\n  case 0x9a:\n    goto switchD_00103cba_caseD_9a;\n  case 0x9b:\n    DAT_00109158 = find_osabi(_optarg);\n    final_result = DAT_00109158;\n    break;\n  case 0x9c:\n    ulong_var15 = strtoul(_optarg,&local_str_var,0);\n    final_result = (uint)ulong_var15;\n    char_var1 = *local_str_var;\n    DAT_00109154 = final_result;\n    str_var2 = _optarg;\n    goto joined_r0x00104334;\n  case 0x9d:\n    ulong_var15 = strtoul(_optarg,&local_str_var,0);\n    final_result = (uint)ulong_var15;\n    char_var1 = *local_str_var;\n    DAT_00109150 = final_result;\n    str_var2 = _optarg;\njoined_r0x00104334:\n    _optarg = str_var2;\n    if ((char_var1 != '\\0') || (0xff < final_result)) {\n      error_message = dcgettext(0,\"Invalid ABIVERSION: %s\\n\",5);\n      handle_error(error_message,str_var2);\n      return 1;\n    }\n    goto LAB_00103c87;\n  case 0x9e:\n    error_message = 1;\n    goto LAB_00103e9d;\n  case 0x9f:\n    error_message = 0;\nLAB_00103e9d:\n    final_result = identify_x86_feature_00104c60(_optarg,error_message);\n  }\njoined_r0x00103eae:\n  if ((int)final_result < 0) {\n    return 1;\n  }\n  goto LAB_00103c87;\nLAB_00103d1c:\n  long_var3 = (long)option_index;\n  if (argc <= option_index) {\n    return final_result;\n  }\n  option_index = option_index + 1;\n  str_var2 = (char *)file_names[long_var3];\n  index = stat(str_var2,&local_stat);\n  if (index < 0) {\n    errno_ptr = get_errno_location();\n    str_var = \"\\'%s\\': No such file\\n\";\n    if (*errno_ptr == 2) goto LAB_00104497;\n    str_var = strhandle_error(*errno_ptr);\n    error_message = dcgettext(0,\"Could not locate \\'%s\\'.  System handle_error message: %s\\n\",5);\n    handle_error(error_message,str_var2,str_var);\nLAB_001044ab:\n    result = 1;\n  }\n  else {\n    if ((local_stat.st_mode & 0xf000) != 0x8000) {\n      str_var = \"\\'%s\\' is not an ordinary file\\n\";\nLAB_00104497:\n      error_message = dcgettext(0,str_var,5);\n      handle_error(error_message,str_var2);\n      goto LAB_001044ab;\n    }\n    file_ptr = fopen(str_var2,\"r+b\");\n    if (file_ptr == (FILE *)0x0) {\n      str_var = \"Input file \\'%s\\' is not freadable\\n\";\n      goto LAB_00104497;\n    }\n    size = fread(&local_byte_var,8,1,file_ptr);\n    if (size != 1) {\n      error_message = dcgettext(0,\"%s: Failed to fread file\\'s magic number\\n\",5);\n      handle_error(error_message,str_var2);\n      fclose(file_ptr);\n      goto LAB_001044ab;\n    }\n    if (local_byte_var == (byte *)0xa3e686372613c21) {\n      result = parse_archive2(str_var2,file_ptr,0);\n    }\n    else if (local_byte_var == (byte *)0xa3e6e6968743c21) {\n      result = parse_archive2(str_var2,file_ptr,1);\n    }\n    else {\n      rewind(file_ptr);\n      DAT_00109438 = 0;\n      result = parse_elf_header(str_var2,file_ptr);\n      if (((result == 0) && ((ushort)(DAT_00109418 - 2U) < 2)) &&\n         ((DAT_00109444 | DAT_00109440) != 0)) {\n        if ((DAT_0010941a == 3) ||\n           (str_var = \"%s: Not an i386 nor x86-64 ELF file\\n\", DAT_0010941a == 0x3e)) {\n          index = fileno(file_ptr);\n          index = fstat(index,&local_stat);\n          if (index < 0) {\n            error_message = dcgettext(0,\"%s: stat () failed\\n\",5);\n            handle_error(error_message,str_var2);\n            result = 1;\n          }\n          else {\n            index = fileno(file_ptr);\n            address = mmap((void *)0x0,local_stat.st_size,3,1,index,0);\n            if (address == (void *)0xffffffffffffffff) {\n              str_var = \"%s: mmap () failed\\n\";\n              goto LAB_0010438d;\n            }\n            pointer = (void *)extract_file_name_00105370((ulong)DAT_00109424 << 6);\n            long_var3 = DAT_001093f8;\n            if (DAT_001093e4 == '\\x01') {\n              for (ulong_var15 = 0; (uint)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((uint)ulong_var15 + 1)) {\n                loop_var = ulong_var15 * 0x20 + long_var3 + (long)address;\n                pointer_val2 = (undefined8 *)((long)pointer + ulong_var15 * 0x40);\n                error_message = (*DAT_001093c0)(loop_var,4);\n                *pointer_val2 = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 4,4);\n                pointer_val2[2] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 8,4);\n                pointer_val2[3] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0xc,4);\n                pointer_val2[4] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x10,4);\n                pointer_val2[5] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x14,4);\n                pointer_val2[6] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x18,4);\n                pointer_val2[1] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x1c,4);\n                pointer_val2[7] = error_message;\n              }\n            }\n            else {\n              for (ulong_var28 = 0; ulong_var28 < DAT_00109424; ulong_var28 = ulong_var28 + 1) {\n                loop_var = (ulong)ulong_var28 * 0x38 + long_var3 + (long)address;\n                pointer_val2 = (undefined8 *)((ulong)ulong_var28 * 0x40 + (long)pointer);\n                error_message = (*DAT_001093c0)(loop_var,4);\n                *pointer_val2 = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 8,8);\n                pointer_val2[2] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x10,8);\n                pointer_val2[3] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x18,8);\n                pointer_val2[4] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x20,8);\n                pointer_val2[5] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x28,8);\n                pointer_val2[6] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 4,4);\n                pointer_val2[1] = error_message;\n                error_message = (*DAT_001093c0)(loop_var + 0x30,8);\n                pointer_val2[7] = error_message;\n              }\n            }\n            for (ulong_var15 = 0; (uint)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((uint)ulong_var15 + 1)) {\n              ptr_var11 = (long *)(ulong_var15 * 0x40 + (long)pointer);\n              if (*ptr_var11 == 4) {\n                long_var3 = ptr_var11[5];\n                ulong_var3 = ptr_var11[7];\n                ulong_var35 = (long)address + ptr_var11[2];\n                for (local_var120 = ulong_var35; local_var120 < ulong_var35 + long_var3;\n                    local_var120 = local_var120 + ((ulong_var3 - 1) + ulong_var14 + ulong_var13 & ulong_var26)) {\n                  if ((ulong_var35 - local_var120) + long_var3 < 0xc) {\nLAB_001044cb:\n                    error_message = dcgettext(0,\"%s: Invalid PT_NOTE segment\\n\",5);\n                    handle_error(error_message,str_var2);\n                    result = 1;\n                    goto LAB_001042bf;\n                  }\n                  loop_var = (*DAT_001093c0)(local_var120 + 8,4);\n                  ulong_var12 = (*DAT_001093c0)(local_var120,4);\n                  if ((ulong_var35 - (long)(char *)(local_var120 + 0xc)) + long_var3 < ulong_var12)\n                  goto LAB_001044cb;\n                  ulong_var13 = (*DAT_001093c0)(local_var120 + 4,4);\n                  ulong_var26 = -ulong_var3;\n                  ulong_var14 = ulong_var3 + 0xb + ulong_var12 & ulong_var26;\n                  ulong_var38 = local_var120 + ulong_var14;\n                  if ((ulong_var13 != 0) &&\n                     ((ulong_var35 + long_var3 <= ulong_var38 || ((ulong_var35 - ulong_var38) + long_var3 < ulong_var13))))\n                  goto LAB_001044cb;\n                  if ((ulong_var12 == 4) &&\n                     ((index = strcmp((char *)(local_var120 + 0xc),\"GNU\"), index == 0 && (loop_var == 5))\n                     )) {\n                    if ((ulong_var13 < 8) || (ulong_var13 % ulong_var3 != 0)) goto LAB_001044cb;\n                    ulong_var12 = ulong_var38 + ulong_var13;\n                    do {\n                      index = (*DAT_001093c0)(ulong_var38,4);\n                      ulong_var28 = (*DAT_001093c0)(ulong_var38 + 4,4);\n                      loop_var = ulong_var38 + 8;\n                      if (ulong_var12 < loop_var + (ulong)ulong_var28) goto LAB_001044cb;\n                      if (index == -0x3ffffffe) {\n                        if (ulong_var28 != 4) goto LAB_001044cb;\n                        ulong_var28 = (*DAT_001093c0)(loop_var,4);\n                        if (DAT_00109444 == 0) {\n                          ulong_var33 = ulong_var28;\n                          if (DAT_00109440 == 0) goto LAB_001042bf;\nLAB_001042ac:\n                          ulong_var33 = ulong_var33 & ~DAT_00109440;\n                        }\n                        else {\n                          ulong_var33 = DAT_00109444 | ulong_var28;\n                          if (DAT_00109440 != 0) goto LAB_001042ac;\n                        }\n                        if (ulong_var28 != ulong_var33) {\n                          (*DAT_001093b8)(loop_var,ulong_var33,4);\n                        }\n                        goto LAB_001042bf;\n                      }\n                      ulong_var38 = loop_var + ((ulong)ulong_var28 + (ulong_var3 - 1) & ulong_var26);\n                    } while (7 < (long)(ulong_var12 - ulong_var38));\n                  }\n                }\n              }\n            }\nLAB_001042bf:\n            free(pointer);\n            munmap(address,local_stat.st_size);\n          }\n        }\n        else {\nLAB_0010438d:\n          error_message = dcgettext(0,str_var,5);\n          handle_error(error_message,str_var2);\n        }\n      }\n    }\n    fclose(file_ptr);\n  }\n  final_result = final_result | result;\n  goto LAB_00103d1c;\nswitchD_00103cba_caseD_9a:\n  DAT_0010915c = find_osabi(_optarg);\n  final_result = DAT_0010915c;\n  goto joined_r0x00103eae;\ncode_r0x00104650:\n  status = fseek(file_ptr,0,2);\n  if (((status != -1) && (size = ftell(file_ptr), size != 0xffffffffffffffff)) &&\n     (status = fseek(file_ptr,0,0), status != -1)) {\n    buffer = (byte *)extract_file_name_00105370(size + 1);\n    file_size = fread(buffer,1,size,file_ptr);\n    if ((size == file_size) || (status = fhandle_error(file_ptr), status == 0)) {\n      buffer[file_size] = 0;\n      byte_ptr2 = buffer;\nLAB_001046fc:\n      if (*byte_ptr2 == 0) {\n        extracted_file_names = (undefined8 *)extract_file_name_00105370(8);\n        *extracted_file_names = 0;\n      }\n      else {\n        if (((&DAT_00107040)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) goto code_r0x00104718;\n        local_byte_var = buffer;\n        strlen((char *)buffer);\n        byte_ptr2 = (byte *)extract_file_name_00105370();\n        extracted_file_names = (undefined8 *)0x0;\n        status = 0;\n        bool_var6 = false;\n        bool_var5 = false;\n        bool_var7 = false;\n        loop_var = 0;\n        do {\n          skip_non_printable_characters2(&local_byte_var);\n          byte_ptr = byte_ptr2;\n          if ((status == 0) || (status + -1 <= (int)loop_var)) {\n            if (extracted_file_names == (undefined8 *)0x0) {\n              status = 8;\n              extracted_file_names = (undefined8 *)extract_file_name_00105370(0x40);\n            }\n            else {\n              status = status * 2;\n              extracted_file_names = (undefined8 *)allocate_or_resize_memory_00103449(extracted_file_names,(long)status << 3);\n            }\n            extracted_file_names[loop_var] = 0;\n          }\n          for (; byte_var2 = *local_byte_var, byte_var2 != 0; local_byte_var = local_byte_var + 1) {\n            if ((((&DAT_00107040)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n               (bool_var4 = (bool)(bool_var5 | bool_var7 | bool_var6), !bool_var4)) {\n              bool_var6 = false;\n              bool_var7 = false;\n              bool_var5 = bool_var4;\n              break;\n            }\n            if (bool_var6) {\n              *byte_ptr = byte_var\n              bool_var6 = false;\n              byte_ptr = byte_ptr + 1;\n            }\n            else if (byte_var2 == 0x5c) {\n              bool_var6 = true;\n            }\n            else if (bool_var5) {\n              if (byte_var2 == 0x27) {\n                bool_var5 = false;\n              }\n              else {\nLAB_00104c08:\n                *byte_ptr = byte_var\n                byte_ptr = byte_ptr + 1;\n              }\n            }\n            else if (bool_var7) {\n              if (byte_var2 != 0x22) goto LAB_00104c08;\n              bool_var7 = false;\n            }\n            else if (byte_var2 == 0x27) {\n              bool_var5 = true;\n            }\n            else {\n              if (byte_var2 != 0x22) goto LAB_00104c08;\n              bool_var7 = true;\n            }\n          }\n          *byte_ptr = 0;\n          error_message = copy_string();\n          extracted_file_names[loop_var] = error_message;\n          extracted_file_names[loop_var + 1] = 0;\n          skip_non_printable_characters2(&local_byte_var);\n          loop_var = loop_var + 1;\n        } while (*local_byte_var != 0);\n        free(byte_ptr2);\n      }\n      if (file_names == argv) {\n        loop_var = 1;\n        do {\n          loop_var2 = loop_var;\n          loop_var = loop_var2 + 1;\n        } while (file_names[loop_var2 + -1] != 0);\n        long_ptr2 = (long *)extract_file_name_00105370((long)(int)loop_var2 << 3);\n        ptr_var11 = long_ptr2;\n        while (loop_var = *file_names, file_names = file_names + 1, loop_var != 0) {\n          loop_var = copy_string();\n          *ptr_var11 = loop_var;\n          ptr_var11 = ptr_var11 + 1;\n        }\n        *ptr_var11 = 0;\n        loop_var = 0;\n      }\n      else {\n        loop_var = 0;\n        long_ptr2 = file_names;\n      }\n      for (; extracted_file_names[loop_var] != 0; loop_var = loop_var + 1) {\n      }\n      free((void *)long_ptr2[long_var3]);\n      file_names = (long *)allocate_or_resize_memory_00103449(long_ptr2,(loop_var + 1 + (long)argc) * 8);\n      memmove(file_names + long_var3 + loop_var,file_names + long_var3 + 1,(long)(argc - index) << 3);\n      argc = argc + -1 + (int)loop_var;\n      memcpy(file_names + long_var3,extracted_file_names,loop_var * 8);\n      free(extracted_file_names);\n      free(buffer);\n      index = index + -1;\n    }\n    else {\n      free(buffer);\n    }\n  }\n  fclose(file_ptr);\n  goto LAB_00103c54;\ncode_r0x00104718:\n  byte_ptr2 = byte_ptr2 + 1;\n  goto LAB_001046fc;\n}\n\n",
            "renaming": {
                "FUN_00103bf0": "parse_elf_file_00103bf0",
                "param_1": "argc",
                "param_2": "argv",
                "cVar1": "char_var1",
                "bVar2": "byte_var2",
                "uVar3": "ulong_var3",
                "bVar4": "bool_var4",
                "bVar5": "bool_var5",
                "bVar6": "bool_var6",
                "bVar7": "bool_var7",
                "iVar8": "index",
                "uVar9": "result",
                "iVar10": "status",
                "__addr": "address",
                "__ptr": "pointer",
                "plVar11": "ptr_var11",
                "uVar12": "ulong_var12",
                "uVar13": "ulong_var13",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "sVar17": "size",
                "__s": "buffer",
                "sVar18": "file_size",
                "piVar19": "errno_ptr",
                "lVar20": "loop_var",
                "plVar21": "file_names",
                "pbVar22": "byte_ptr",
                "lVar23": "loop_var2",
                "plVar24": "long_ptr2",
                "uVar25": "error_message",
                "uVar26": "ulong_var26",
                "pbVar27": "byte_ptr2",
                "uVar28": "ulong_var28",
                "lVar29": "long_var3",
                "uVar30": "final_result",
                "iVar31": "temp_var2",
                "uVar33": "ulong_var33",
                "pcVar34": "str_var",
                "uVar35": "ulong_var35",
                "pcVar36": "str_var2",
                "uVar38": "ulong_var38",
                "local_138": "extracted_file_names",
                "local_120": "local_var120",
                "local_d8": "local_str_var",
                "local_d0": "local_byte_var",
                "pFVar16": "file_ptr",
                "ppuVar32": "pointer_pointer",
                "__errno_location()": "get_errno_location()",
                "setlocale": "set_locale",
                "bindtextdomain": "bind_text_domain",
                "textdomain": "text_domain",
                "print_usage_and_exit_001032de": "print_usage_and_exit",
                "dcgettext": "get_translation",
                "error": "handle_error",
                "get_machine_type_00104d30": "get_machine_type",
                "get_type_00104da0": "get_type",
                "find_osabi_00104ce0": "find_osabi",
                "local_c8": "local_stat",
                "skip_non_printable_characters_00102fa0": "skip_non_printable_characters2",
                "parse_archive_0010358d": "parse_archive2",
                "parse_elf_header_00104de0": "parse_elf_header",
                "fread": "read",
                "puVar37": "pointer_val2",
                "bVar2;": "byte_var",
                "copy_string_00103160()": "copy_string()",
                "_optind": "option_index",
                "lVar24": "temp_var2"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "bindtextdomain",
                "fopen",
                "free",
                "setlocale",
                "FUN_00103449",
                "FUN_00104d30",
                "FUN_001032de",
                "exit",
                "mmap",
                "strtoul",
                "FUN_00104da0",
                "strcmp",
                "memcpy",
                "FUN_0010358d",
                "FUN_00102fbc",
                "strlen",
                "fclose",
                "memmove",
                "FUN_00103160",
                "getopt_long",
                "munmap",
                "__errno_location",
                "error",
                "fprintf",
                "FUN_00104de0",
                "fseek",
                "textdomain",
                "dcgettext",
                "FUN_00102fa0",
                "fileno",
                "ferror",
                "strerror",
                "fread",
                "FUN_00104c60",
                "FUN_00105370",
                "ftell",
                "fstat",
                "printf",
                "rewind",
                "FUN_00104ce0",
                "stat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00103bf0": {
                    "1": "process_binary",
                    "2": "parse_input_files",
                    "7": "parse_elf_file",
                    "4": "parse_file"
                },
                "param_1": {
                    "1": "number_of_files",
                    "4": "num_params",
                    "5": "num_args",
                    "20": "argc"
                },
                "param_2": {
                    "1": "args",
                    "2": "param_list",
                    "3": "file_paths",
                    "20": "argv"
                },
                "cVar1": {
                    "3": "char_var",
                    "1": "temp_char",
                    "9": "char_var1",
                    "2": "ch",
                    "8": "current_char"
                },
                "bVar2": {
                    "9": "byte_var2",
                    "1": "byte",
                    "6": "byte_var",
                    "3": "byte_value",
                    "2": "temp_byte"
                },
                "uVar3": {
                    "9": "ulong_var3",
                    "1": "segment_data",
                    "2": "ulong_val",
                    "6": "ulong_var",
                    "3": "current_ulong"
                },
                "bVar4": {
                    "1": "is_true1",
                    "8": "bool_var4",
                    "3": "bool_var",
                    "2": "bool_value",
                    "4": "bool_var1"
                },
                "bVar5": {
                    "1": "single_quotes_flag",
                    "3": "is_single_quote",
                    "8": "bool_var5",
                    "2": "bool_val2",
                    "5": "bool_var2"
                },
                "bVar6": {
                    "1": "escaped_mode",
                    "5": "bool_var3",
                    "2": "bool_val3",
                    "8": "bool_var6"
                },
                "bVar7": {
                    "1": "is_true4",
                    "5": "bool_var4",
                    "2": "bool4",
                    "3": "is_double_quote",
                    "8": "bool_var7"
                },
                "iVar8": {
                    "1": "iteration",
                    "3": "loop_index",
                    "22": "index",
                    "2": "counter"
                },
                "uVar9": {
                    "1": "return_val",
                    "2": "return_value",
                    "24": "result"
                },
                "iVar10": {
                    "1": "file_stat",
                    "2": "return_value",
                    "3": "result",
                    "13": "status",
                    "5": "temp_var"
                },
                "__addr": {
                    "1": "file_mapping",
                    "5": "mapped_address",
                    "8": "address",
                    "3": "mmap_addr",
                    "2": "map_address",
                    "4": "addr"
                },
                "__ptr": {
                    "1": "file_names",
                    "2": "file_name_buffer",
                    "5": "ptr",
                    "4": "file_name_ptr",
                    "8": "pointer",
                    "3": "file_name"
                },
                "plVar11": {
                    "1": "file_names_list",
                    "5": "ptr_var11",
                    "2": "file_names"
                },
                "uVar12": {
                    "1": "ulong_var_2",
                    "2": "ulong_var1",
                    "9": "ulong_var12"
                },
                "uVar13": {
                    "2": "alignment",
                    "1": "size1",
                    "3": "segment_offset",
                    "9": "ulong_var13"
                },
                "uVar14": {
                    "2": "alignment",
                    "1": "extra_padding",
                    "9": "ulong_var14"
                },
                "uVar15": {
                    "1": "temp_ulong4",
                    "2": "ulong_value5",
                    "3": "value",
                    "9": "ulong_var15"
                },
                "FILE *pFVar16": {
                    "1": "file_ptr"
                },
                "sVar17": {
                    "1": "items_read",
                    "5": "read_size",
                    "2": "size_var1",
                    "10": "size",
                    "4": "size_var"
                },
                "__s": {
                    "1": "str",
                    "2": "file_name",
                    "3": "byte_str",
                    "5": "buffer"
                },
                "sVar18": {
                    "1": "size_var18",
                    "3": "str_size",
                    "2": "string_length"
                },
                "piVar19": {
                    "1": "err_no_pointer",
                    "5": "error_number",
                    "2": "error_num",
                    "11": "errno_ptr"
                },
                "lVar20": {
                    "1": "index",
                    "5": "loop_index",
                    "2": "loop_counter",
                    "3": "long_var20",
                    "7": "loop_var"
                },
                "plVar21": {
                    "1": "long_var_pointer",
                    "2": "new_argv",
                    "4": "file_names"
                },
                "pbVar22": {
                    "1": "byte_var",
                    "8": "byte_ptr"
                },
                "lVar23": {
                    "1": "tmp_var_2",
                    "3": "long_var23",
                    "4": "long_var2",
                    "7": "loop_var2"
                },
                "plVar24": {
                    "1": "loop_ptr",
                    "2": "long_ptr2"
                },
                "uVar25": {
                    "1": "result2",
                    "5": "error_message",
                    "3": "ulong_var25",
                    "2": "value"
                },
                "uVar26": {
                    "1": "negative_mask",
                    "2": "ulong_value6",
                    "9": "ulong_var26",
                    "4": "ulong_var6",
                    "3": "mask"
                },
                "pbVar27": {
                    "1": "current_char",
                    "2": "byte_pointer_var2",
                    "6": "byte_ptr2"
                },
                "uVar28": {
                    "1": "uint_var1",
                    "2": "temp_var2",
                    "7": "ulong_var28"
                },
                "lVar29": {
                    "1": "loop_index",
                    "3": "long_var29",
                    "4": "long_var3",
                    "2": "loop_var"
                },
                "uVar30": {
                    "1": "option_result",
                    "2": "flags",
                    "4": "final_result",
                    "3": "result2"
                },
                "iVar31": {
                    "1": "loop_var4",
                    "2": "counter",
                    "3": "temp_var2"
                },
                "undefined **ppuVar32": {
                    "1": "locale_settings"
                },
                "uVar33": {
                    "1": "flags2",
                    "2": "uint_value2",
                    "7": "ulong_var33"
                },
                "pcVar34": {
                    "1": "string_var2",
                    "2": "error_string",
                    "5": "str_var"
                },
                "uVar35": {
                    "1": "abiversion",
                    "9": "ulong_var35",
                    "3": "ulong_var7"
                },
                "pcVar36": {
                    "1": "pointer_val",
                    "2": "string_var2",
                    "4": "str_var2",
                    "3": "char_ptr2"
                },
                "undefined8 uVar37": {
                    "1": "param_uint4"
                },
                "uVar38": {
                    "1": "segment_end",
                    "2": "ulong_var8",
                    "4": "ulong_var38"
                },
                "local_138": {
                    "1": "extracted_filenames",
                    "2": "file_names",
                    "3": "extracted_file_names"
                },
                "local_120": {
                    "1": "local_var",
                    "2": "local_size",
                    "3": "local_var120"
                },
                "local_d8": {
                    "1": "error_message_format",
                    "2": "local_string_var",
                    "3": "local_str_var"
                },
                "local_d0": {
                    "1": "extracted_file_data",
                    "6": "local_byte_var",
                    "2": "magic_number_buffer"
                },
                "stat local_c8": {
                    "1": "file_status"
                },
                "pFVar16": {
                    "1": "file_var",
                    "2": "file",
                    "11": "file_ptr",
                    "9": "file_pointer"
                },
                "ppuVar32": {
                    "1": "ptr_to_ptr_to_undef_var",
                    "3": "pointer_ptr",
                    "2": "text_domain",
                    "4": "pointer_pointer"
                },
                "__errno_location()": {
                    "2": "get_errno_location()"
                },
                "setlocale": {
                    "1": "set_locale"
                },
                "bindtextdomain": {
                    "1": "bind_text_domain"
                },
                "textdomain": {
                    "1": "text_domain"
                },
                "print_usage_and_exit_001032de": {
                    "1": "print_usage_and_exit"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "error": {
                    "1": "handle_error"
                },
                "get_machine_type_00104d30": {
                    "1": "get_machine_type"
                },
                "DAT_00109174": {
                    "1": "machine_type"
                },
                "DAT_00109170": {
                    "1": "machine_flag"
                },
                "DAT_0010916c": {
                    "1": "machine_type2"
                },
                "DAT_00109168": {
                    "1": "machine_flag2"
                },
                "get_type_00104da0": {
                    "1": "get_type"
                },
                "DAT_00109164": {
                    "1": "type_value"
                },
                "DAT_00109160": {
                    "1": "type_value2"
                },
                "find_osabi_00104ce0": {
                    "1": "find_osabi"
                },
                "DAT_00109158": {
                    "1": "osabi"
                },
                "expression": {
                    "1": "expression_value"
                },
                "local_c8": {
                    "1": "local_stat_c8",
                    "4": "local_stat_var",
                    "3": "file_stat",
                    "2": "stat_var"
                },
                "skip_non_printable_characters_00102fa0": {
                    "1": "skip_non_printable_characters2"
                },
                "parse_archive_0010358d": {
                    "1": "parse_archive2"
                },
                "parse_elf_header_00104de0": {
                    "1": "parse_elf_header"
                },
                "fread": {
                    "1": "read"
                },
                "parse_elf_file": {
                    "1": "parse_elf_file"
                },
                "puVar37": {
                    "1": "ptr_ptr"
                },
                "bVar2;": {
                    "1": "byte_var"
                },
                "setlocale()": {
                    "1": "set_locale()"
                },
                "bindtextdomain()": {
                    "1": "bind_text_domain()"
                },
                "textdomain()": {
                    "1": "text_domain()"
                },
                "fopen()": {
                    "1": "file_open()"
                },
                "fseek()": {
                    "1": "set_file_position()"
                },
                "ftell()": {
                    "1": "get_file_position()"
                },
                "fread()": {
                    "1": "file_read()"
                },
                "ferror()": {
                    "1": "file_error()"
                },
                "fclose()": {
                    "1": "file_close()"
                },
                "malloc()": {
                    "1": "allocate_memory()"
                },
                "calloc()": {
                    "1": "allocate_cleared_memory()"
                },
                "realloc()": {
                    "1": "resize_memory()"
                },
                "free()": {
                    "1": "release_memory()"
                },
                "memcpy()": {
                    "1": "copy_memory()"
                },
                "memmove()": {
                    "1": "move_memory()"
                },
                "munmap()": {
                    "1": "release_mapped_memory()"
                },
                "fprintf()": {
                    "1": "print_formatted()"
                },
                "sprintf()": {
                    "1": "format_string()"
                },
                "strcmp()": {
                    "1": "compare_strings()"
                },
                "strlen()": {
                    "1": "get_string_length()"
                },
                "exit()": {
                    "1": "exit_program()"
                },
                "error()": {
                    "1": "report_error()"
                },
                "print_usage_and_exit_001032de()": {
                    "1": "print_usage_and_exit()"
                },
                "dcgettext()": {
                    "1": "get_localized_text()"
                },
                "get_machine_type_00104d30()": {
                    "1": "get_machine_type()"
                },
                "get_type_00104da0()": {
                    "1": "get_data_type()"
                },
                "find_osabi_00104ce0()": {
                    "1": "find_osabi()"
                },
                "identify_x86_feature_00104c60()": {
                    "1": "identify_x86_feature()"
                },
                "parse_archive_0010358d()": {
                    "1": "parse_archive()"
                },
                "parse_elf_header_00104de0()": {
                    "1": "parse_elf_header()"
                },
                "copy_string_00103160()": {
                    "1": "copy_string()"
                },
                "allocate_or_resize_memory_00103449()": {
                    "1": "manage_memory()"
                },
                "lVar37": {
                    "1": "local138_index"
                },
                "__optarg": {
                    "1": "optarg_var"
                },
                "byte *pbVar22": {
                    "1": "string_buffer"
                },
                "_optind": {
                    "1": "option_index"
                },
                "byte *pbVar27": {
                    "1": "char_pointer"
                },
                "char *pcVar34": {
                    "1": "error_string"
                },
                "ulong uVar35": {
                    "1": "abi_version"
                },
                "char *pcVar36": {
                    "1": "file_name"
                },
                "undefined8 *puVar37": {
                    "1": "pointer_to_array_of_eight_bytes"
                },
                "ulong uVar38": {
                    "1": "file_header_offset"
                },
                "undefined8 *local_138": {
                    "1": "output_file_names"
                },
                "ulong local_120": {
                    "1": "segment_file_offset2"
                },
                "char *local_d8": {
                    "1": "error_message"
                },
                "byte *local_d0": {
                    "1": "buffer"
                },
                "bytes_local_d0": {
                    "1": "magic_number"
                },
                "DAT_0010604c": {
                    "1": "long_options"
                },
                "lVar24": {
                    "1": "temp_var2"
                },
                "gpuVar32": {
                    "1": "gnu_ptr"
                },
                "__c": {
                    "1": "temp_char"
                },
                "status": {
                    "1": "status"
                },
                "num_args": {
                    "1": "num_args"
                },
                "iVar33": {
                    "1": "temp_var3"
                },
                "local_c0": {
                    "1": "local_char_var"
                },
                "local_b8": {
                    "1": "local_u_short_var"
                },
                "local_89": {
                    "1": "local_u_char_var"
                },
                "local_88": {
                    "1": "local_char_var2"
                },
                "local_87": {
                    "1": "local_char_var3"
                },
                "local_86": {
                    "1": "local_char_var4"
                },
                "pfVar16": {
                    "1": "file_ptr"
                }
            }
        },
        "FUN_00104c60": {
            "entrypoint": "0x00104c60",
            "current_name": "identify_x86_feature_00104c60",
            "code": "\nundefined  [16] identify_x86_feature_00104c60(char *feature_name,int is_enabled,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  int strcasecmp_result;\n  uint feature_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  strcasecmp_result = strcasecmp(feature_name,\"ibt\");\n  feature_value = 1;\n  if (strcasecmp_result != 0) {\n    strcasecmp_result = strcasecmp(feature_name,\"shstk\");\n    feature_value = 2;\n    if (strcasecmp_result != 0) {\n      strcasecmp_result = strcasecmp(feature_name,\"lam_u48\");\n      if (strcasecmp_result == 0) {\n        feature_value = 4;\n      }\n      else {\n        strcasecmp_result = strcasecmp(feature_name,\"lam_u57\");\n        feature_value = 8;\n        if (strcasecmp_result != 0) {\n          error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n          error(error_message,feature_name);\n          error_message = 0xffffffff;\n          goto LAB_00104ca5;\n        }\n      }\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = unused_param_2;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00104c60": "identify_x86_feature_00104c60",
                "param_1": "feature_name",
                "param_2": "is_enabled",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "iVar1": "strcasecmp_result",
                "uVar2": "feature_value",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "FUN_001022c0",
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104c60": {
                    "1": "map_x86_features",
                    "2": "process_x86_feature",
                    "14": "identify_x86_feature"
                },
                "param_1": {
                    "4": "feature",
                    "1": "input_feature",
                    "23": "feature_name"
                },
                "param_2": {
                    "1": "enabled",
                    "5": "is_set",
                    "2": "enable_feature",
                    "9": "is_enabled"
                },
                "param_3": {
                    "1": "unused",
                    "5": "unused_param_1",
                    "2": "unused_param"
                },
                "param_4": {
                    "2": "error_string",
                    "5": "unused_param_2",
                    "1": "undefined8_param4",
                    "3": "result"
                },
                "iVar1": {
                    "19": "strcasecmp_result",
                    "2": "result",
                    "1": "strcmp_result",
                    "8": "comparison_result"
                },
                "uVar2": {
                    "1": "feature_bit",
                    "13": "feature_value",
                    "4": "feature_mask",
                    "6": "feature_flag"
                },
                "uVar3": {
                    "1": "status_code",
                    "7": "return_value",
                    "16": "error_message",
                    "2": "result"
                },
                "auVar4": {
                    "1": "reconstructed_data",
                    "14": "return_value",
                    "10": "result",
                    "2": "return_data"
                },
                "DAT_00109440": {
                    "1": "positive_flags"
                },
                "DAT_00109444": {
                    "1": "negative_flags"
                }
            }
        },
        "FUN_00104ce0": {
            "entrypoint": "0x00104ce0",
            "current_name": "find_osabi_00104ce0",
            "code": "\nundefined  [16] find_osabi_00104ce0(char *target_osabi,undefined8 param_2,undefined8 param_3,undefined8 arg4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  ulong index;\n  uint next_index;\n  undefined4 *data_ptr;\n  undefined result [16];\n  \n  data_ptr = &DAT_00108ca0;\n  index = 0;\n  do {\n    comparison_result = strcasecmp(target_osabi,*(char **)(data_ptr + 2));\n    if (comparison_result == 0) {\n      index = (ulong)(uint)(&DAT_00108ca0)[index * 4];\n      goto LAB_00104d20;\n    }\n    next_index = (int)index + 1;\n    index = (ulong)next_index;\n    data_ptr = data_ptr + 4;\n  } while (next_index != 0x10);\n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  report_error(error_message,target_osabi);\n  index = 0xffffffff;\nLAB_00104d20:\n  result._8_8_ = arg4;\n  result._0_8_ = index;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00104ce0": "find_osabi_00104ce0",
                "param_1": "target_osabi",
                "param_4": "arg4",
                "iVar1": "comparison_result",
                "uVar2": "error_message",
                "uVar3": "index",
                "uVar4": "next_index",
                "puVar5": "data_ptr",
                "auVar6": "result",
                "strcasecmp": "compare_strings",
                "dcgettext": "get_error_message",
                "error": "report_error"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "FUN_00102323",
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104ce0": {
                    "19": "find_osabi",
                    "1": "get_osabi",
                    "7": "find_osabi_index"
                },
                "param_1": {
                    "1": "osabi_code",
                    "2": "osabi_to_find",
                    "9": "target_osabi",
                    "3": "osabi"
                },
                "param_2": {
                    "7": "arg2",
                    "3": "param2",
                    "1": "unknown1",
                    "16": "param_2"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "7": "arg3",
                    "16": "param_3",
                    "3": "param3"
                },
                "param_4": {
                    "1": "output_osabi",
                    "3": "param4",
                    "2": "output_value",
                    "7": "arg4"
                },
                "iVar1": {
                    "29": "comparison_result",
                    "2": "result"
                },
                "uVar2": {
                    "3": "translation",
                    "2": "message",
                    "1": "result",
                    "14": "error_message"
                },
                "uVar3": {
                    "1": "index_of_found_osabi",
                    "25": "index",
                    "4": "osabi_index"
                },
                "uVar4": {
                    "14": "next_index",
                    "1": "counter",
                    "2": "temp_index",
                    "7": "increment",
                    "3": "index_plus_one"
                },
                "puVar5": {
                    "3": "osabi_array",
                    "1": "osabi_list",
                    "5": "data_ptr",
                    "4": "data_array",
                    "2": "ptr_array"
                },
                "auVar6": {
                    "19": "result",
                    "7": "return_value",
                    "1": "result_buffer"
                },
                "strcasecmp": {
                    "1": "compare_strings"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "1": "report_error"
                },
                "*param_1": {
                    "1": "target_osabi"
                }
            }
        },
        "FUN_00104d30": {
            "entrypoint": "0x00104d30",
            "current_name": "get_machine_type_00104d30",
            "code": "\nint get_machine_type_00104d30(char *machine_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(machine_type,\"i386\");\n  if (result == 0) {\n    result = 3;\n  }\n  else {\n    result = strcasecmp(machine_type,\"iamcu\");\n    if (result == 0) {\n      return 6;\n    }\n    comparison_result = strcasecmp(machine_type,\"l1om\");\n    result = 0xb4;\n    if (comparison_result != 0) {\n      result = strcasecmp(machine_type,\"k1om\");\n      if (result == 0) {\n        return 0xb5;\n      }\n      result = strcasecmp(machine_type,\"x86_64\");\n      if (result == 0) {\n        result = 0x3e;\n      }\n      else {\n        result = strcasecmp(machine_type,\"x86-64\");\n        if (result == 0) {\n          result = 0x3e;\n        }\n        else {\n          result = strcasecmp(machine_type,\"unknown\");\n          if (result != 0) {\n            error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n            print_error_message(error_message,machine_type);\n            result = -1;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00104d30": "get_machine_type_00104d30",
                "param_1": "machine_type",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "none": "unknown",
                "strcasecmp": "compare_ignore_case"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "FUN_0010234b",
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104d30": {
                    "1": "machine_type_to_identifier",
                    "27": "get_machine_type"
                },
                "param_1": {
                    "31": "machine_type"
                },
                "iVar1": {
                    "1": "identifier",
                    "19": "result",
                    "5": "comparison_result",
                    "4": "strcasecmp_result"
                },
                "iVar2": {
                    "1": "comparison2",
                    "2": "strcasecmp_result2",
                    "3": "second_comparison_result",
                    "14": "comparison_result"
                },
                "uVar3": {
                    "19": "error_message",
                    "4": "error_msg",
                    "2": "message"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "error": {
                    "2": "print_error_message"
                },
                "none": {
                    "1": "unknown"
                },
                "strcasecmp": {
                    "1": "compare_ignore_case"
                },
                "F_00104d30": {
                    "1": "get_machine_type"
                },
                "uVar4": {
                    "1": "error_code"
                }
            }
        },
        "FUN_00104da0": {
            "entrypoint": "0x00104da0",
            "current_name": "get_type_00104da0",
            "code": "\nint get_type_00104da0(char *type_string)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(type_string,\"rel\");\n  if (result == 0) {\n    result = 1;\n  }\n  else {\n    comparison_result = strcasecmp(type_string,\"exec\");\n    result = 2;\n    if (comparison_result != 0) {\n      result = strcasecmp(type_string,\"dyn\");\n      if (result == 0) {\n        result = 3;\n      }\n      else {\n        result = strcasecmp(type_string,\"none\");\n        if (result != 0) {\n          error_message = dcgettext(0,\"Unknown type: %s\\n\",5);\n          error(error_message,type_string);\n          result = -1;\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00104da0": "get_type_00104da0",
                "param_1": "type_string",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "uVar3": "error_message"
            },
            "calling": [
                "FUN_00103bf0"
            ],
            "called": [
                "dcgettext",
                "error",
                "FUN_001023ce",
                "strcasecmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104da0": {
                    "1": "get_type_identifier",
                    "4": "get_type_from_param",
                    "3": "get_type_code",
                    "10": "get_type",
                    "9": "get_file_type"
                },
                "param_1": {
                    "1": "section_name",
                    "9": "file_type",
                    "6": "type"
                },
                "iVar1": {
                    "24": "result",
                    "1": "section_type",
                    "2": "type"
                },
                "iVar2": {
                    "2": "result",
                    "1": "comp_result",
                    "21": "comparison_result",
                    "3": "compare_result"
                },
                "uVar3": {
                    "5": "error_msg",
                    "1": "unknown_type_error",
                    "19": "error_message"
                }
            }
        },
        "FUN_00104de0": {
            "entrypoint": "0x00104de0",
            "current_name": "parse_elf_header_00104de0",
            "code": "\n\n\nundefined8 parse_elf_header_00104de0(undefined8 error_message,FILE *file)\n\n{\n  int seek_result;\n  long file_position;\n  size_t read_result;\n  undefined8 return_value;\n  char *error_message;\n  uint input_class;\n  uint output_class;\n  \n  file_position = ftell(file);\n  read_result = fread(&DAT_001093e0,0x10,1,file);\n  if ((read_result == 1) && (_DAT_001093e0 == 0x464c457f)) {\n    DAT_001093b8 = write_to_memory;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093b8 = fill_memory;\n    }\n    DAT_001093c0 = extract_data;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093c0 = extract_data_failed;\n    }\n    if ((char)_DAT_001093e4 == '\\x01') {\n      read_result = fread(&DAT_00109390,0x24,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109390,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109392,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109394,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109398,4);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_0010939c,4);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_001093a0,4);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_001093a4,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_001093a8,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_001093aa,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_001093ac,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_001093ae,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_001093b0,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_001093b2,2);\n      _DAT_00109380 = _DAT_001093e0;\n      saved_file_type = _DAT_001093e4;\n      _DAT_00109388 = _DAT_001093e8;\n      saved_other_condition = uRam00000000001093ec;\n    }\n    else {\n      if ((char)_DAT_001093e4 != '\\x02') {\n        return_value = read_elf_header_failed();\n        return return_value;\n      }\n      read_result = fread(&DAT_00109350,0x30,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109350,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109352,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109354,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109358,8);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_00109360,8);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_00109368,8);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_00109370,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_00109374,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_00109376,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_00109378,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_0010937a,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_0010937c,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_0010937e,2);\n      _DAT_00109340 = _DAT_001093e0;\n      saved_file_type3 = _DAT_001093e4;\n      _DAT_00109348 = _DAT_001093e8;\n      saved_other_condition2 = uRam00000000001093ec;\n    }\n    seek_result = fseek(file,file_position,0);\n    if (seek_result != 0) {\n      return_value = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n      display_error(return_value,error_message);\n    }\n    input_class = _DAT_001093e4 >> 0x10 & 0xff;\n    if ((char)input_class == '\\x01') {\n      input_class = (uint)DAT_0010941a;\n      if (input_class == DAT_0010916c) {\n        return 0;\n      }\n      output_class = _DAT_001093e4 & 0xff;\n      if (DAT_00109170 == 0xffffffff) {\n        if (DAT_0010941a == 6) {\n          DAT_00109170 = 1;\n        }\n        else if (DAT_0010941a < 7) {\n          DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n        }\n        else {\n          DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n        }\n      }\n      if ((output_class == DAT_00109170) || (DAT_00109170 == 3)) {\n        if ((output_class == DAT_00109168) || (DAT_00109168 == 3)) {\n          if ((input_class == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n            input_class = (uint)DAT_00109418;\n            if ((DAT_00109164 == 0xffffffff) || (input_class == DAT_00109164)) {\n              input_class = _DAT_001093e4 >> 0x18;\n              if ((DAT_0010915c == 0xffffffff) || (input_class == DAT_0010915c)) {\n                input_class = _DAT_001093e8 & 0xff;\n                if ((input_class == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                  if ((char)output_class == '\\x01') {\n                    if (DAT_0010916c != 0xffffffff) {\n                      (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                    }\n                    if (DAT_00109160 != -1) {\n                      (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                    }\n                    if (DAT_00109158 != -1) {\n                      saved_file_type =\n                           CONCAT13((char)DAT_00109158,(undefined3)saved_file_type);\n                    }\n                    if (DAT_00109150 != -1) {\n                      _DAT_00109388 = CONCAT31(DAT_00109388_1,(char)DAT_00109150);\n                    }\n                    read_result = fwrite(&DAT_00109380,0x34,1,file);\n                    if (read_result == 1) {\n                      return 0;\n                    }\n                    return_value = update_elf_header();\n                    return return_value;\n                  }\n                  if ((char)output_class != '\\x02') {\n                    \n                    abort_execution();\n                  }\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    saved_file_type3 =\n                         CONCAT13((char)DAT_00109158,(undefined3)saved_file_type3);\n                  }\n                  if (DAT_00109150 != -1) {\n                    _DAT_00109348 = CONCAT31(DAT_00109348_1,(char)DAT_00109150);\n                  }\n                  read_result = fwrite(&DAT_00109340,0x40,1,file);\n                  if (read_result == 1) {\n                    return 0;\n                  }\n                  return_value = update_elf_header();\n                  return return_value;\n                }\n                error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n                output_class = DAT_00109154;\n              }\n              else {\n                error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n                output_class = DAT_0010915c;\n              }\n            }\n            else {\n              error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n              output_class = DAT_00109164;\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n            output_class = DAT_00109174;\n          }\n          return_value = dcgettext(0,error_message,5);\n          display_error(return_value,error_message,input_class,output_class);\n          return 1;\n        }\n        error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n        input_class = DAT_00109168;\n      }\n      else {\n        error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n        input_class = DAT_00109170;\n      }\n      return_value = dcgettext(0,error_message,5);\n      display_error(return_value,error_message,output_class,input_class);\n    }\n    else {\n      return_value = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n      display_error(return_value,error_message,input_class,1);\n    }\n  }\n  else {\ncode_r0x00102558:\n    return_value = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n    display_error(return_value,error_message);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00104de0": "parse_elf_header_00104de0",
                "param_1": "error_message",
                "param_2": "file",
                "__off": "file_position",
                "sVar2": "read_result",
                "uVar3": "return_value",
                "pcVar4": "error_message",
                "uVar5": "input_class",
                "uVar6": "output_class",
                "iVar1": "seek_result",
                "uRam0000000000109384": "saved_file_type",
                "uRam000000000010938c": "saved_other_condition",
                "uRam0000000000109344": "saved_file_type3",
                "uRam000000000010934c": "saved_other_condition2",
                "write_data_to_memory_0010354e": "write_to_memory",
                "fill_memory_00103ad0": "fill_memory",
                "extract_data_0010347f": "extract_data",
                "extract_data_00103a90": "extract_data_failed",
                "read_elf_header_failed_00102558": "read_elf_header_failed",
                "dcgettext": "get_error_message",
                "error": "display_error",
                "update_elf_header_001024ec": "update_elf_header",
                "abort": "abort_execution",
                "fseek": "set_file_offset",
                "fwrite": "write_to_file"
            },
            "calling": [
                "FUN_0010358d",
                "FUN_00103bf0"
            ],
            "called": [
                "error",
                "FUN_00102434",
                "FUN_00103a90",
                "fseek",
                "fwrite",
                "dcgettext",
                "fread",
                "FUN_0010354e",
                "FUN_001024ec",
                "ftell",
                "FUN_00102558",
                "abort",
                "FUN_00103ad0",
                "FUN_0010347f"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00104de0": {
                    "2": "validate_and_extract_elf_header",
                    "1": "process_elf_file",
                    "8": "read_elf_header",
                    "9": "parse_elf_header",
                    "3": "process_elf_header"
                },
                "param_1": {
                    "1": "param_elf_file_path",
                    "5": "param_file",
                    "3": "param_elf_file",
                    "2": "param"
                },
                "param_2": {
                    "1": "param_file_pointer",
                    "9": "file",
                    "7": "file_ptr",
                    "2": "file_stream",
                    "6": "param_file",
                    "4": "file_pointer"
                },
                "__off": {
                    "1": "saved_offset",
                    "9": "file_position",
                    "5": "offset",
                    "2": "current_offset",
                    "3": "current_position"
                },
                "sVar2": {
                    "1": "read_success",
                    "5": "bytes_read",
                    "15": "read_result",
                    "2": "read_count"
                },
                "uVar3": {
                    "13": "result",
                    "18": "return_value"
                },
                "pcVar4": {
                    "18": "error_message",
                    "1": "err_msg",
                    "4": "format_string",
                    "2": "error_format",
                    "5": "error_msg"
                },
                "uVar5": {
                    "3": "temp_var_1",
                    "2": "class_value",
                    "1": "header_class",
                    "4": "input_ei_class",
                    "7": "input_class"
                },
                "uVar6": {
                    "1": "output_type",
                    "7": "output_class",
                    "2": "u_var6",
                    "4": "output_ei_class",
                    "3": "temp_var_2"
                },
                "iVar1": {
                    "18": "seek_result",
                    "1": "seek_error",
                    "3": "status",
                    "4": "file_seek_result"
                },
                "_DAT_001093e0": {
                    "1": "alternative_magic_number"
                },
                "DAT_001093b8": {
                    "1": "data_writer_func"
                },
                "DAT_001093e5": {
                    "1": "other_condition"
                },
                "DAT_001093c0": {
                    "1": "data_extractor_func"
                },
                "(char)_DAT_001093e4": {
                    "1": "file_type_flag"
                },
                "DAT_00109390": {
                    "1": "header_data_1"
                },
                "DAT_00109392": {
                    "1": "header_data_2"
                },
                "DAT_00109394": {
                    "1": "header_data_3"
                },
                "DAT_00109398": {
                    "1": "header_data_4"
                },
                "DAT_0010939c": {
                    "1": "header_data_5"
                },
                "DAT_001093a0": {
                    "1": "header_data_6"
                },
                "DAT_001093a4": {
                    "1": "header_data_7"
                },
                "DAT_001093a8": {
                    "1": "header_data_8"
                },
                "DAT_001093aa": {
                    "1": "header_data_9"
                },
                "DAT_001093ac": {
                    "1": "header_data_10"
                },
                "DAT_001093ae": {
                    "1": "header_data_11"
                },
                "DAT_001093b0": {
                    "1": "header_data_12"
                },
                "_DAT_001093e4": {
                    "1": "output_type_flag"
                },
                "_DAT_001093f0": {
                    "1": "header_data_13"
                },
                "_DAT_001093f8": {
                    "1": "header_data_14"
                },
                "_DAT_00109400": {
                    "1": "header_data_15"
                },
                "_DAT_00109408": {
                    "1": "data3"
                },
                "_DAT_00109410": {
                    "1": "data7"
                },
                "_DAT_00109418": {
                    "1": "header_data_18"
                },
                "_DAT_0010941a": {
                    "1": "header_data_19"
                },
                "_DAT_0010941c": {
                    "1": "header_data_20"
                },
                "_DAT_00109420": {
                    "1": "header_data_21"
                },
                "_DAT_00109424": {
                    "1": "header_data_22"
                },
                "_DAT_00109428": {
                    "1": "header_data_23"
                },
                "_DAT_0010942c": {
                    "1": "data12"
                },
                "_DAT_00109430": {
                    "1": "data13"
                },
                "_DAT_00109380": {
                    "1": "saved_magic_number"
                },
                "uRam0000000000109384": {
                    "1": "temp_var_4"
                },
                "_DAT_00109388": {
                    "1": "saved_file_type2"
                },
                "uRam000000000010938c": {
                    "1": "saved_other_condition"
                },
                "_DAT_00109350": {
                    "1": "header_data_26"
                },
                "_DAT_00109352": {
                    "1": "header_data_27"
                },
                "_DAT_00109354": {
                    "1": "header_data_28"
                },
                "_DAT_00109358": {
                    "1": "header_data_29"
                },
                "_DAT_00109360": {
                    "1": "header_data_30"
                },
                "_DAT_00109368": {
                    "1": "header_data_31"
                },
                "_DAT_00109370": {
                    "1": "header_data_32"
                },
                "_DAT_00109374": {
                    "1": "header_data_33"
                },
                "_DAT_00109376": {
                    "1": "header_data_34"
                },
                "_DAT_00109378": {
                    "1": "header_data_35"
                },
                "_DAT_0010937a": {
                    "1": "header_data_36"
                },
                "_DAT_0010937c": {
                    "1": "header_data_37"
                },
                "_DAT_0010937e": {
                    "1": "header_data_38"
                },
                "_DAT_00109340": {
                    "1": "saved_magic_number2"
                },
                "uRam0000000000109344": {
                    "1": "alternative_temp_var_4"
                },
                "_DAT_00109348": {
                    "1": "alternative_temp_var_5"
                },
                "uRam000000000010934c": {
                    "1": "saved_other_condition2"
                },
                "write_data_to_memory_0010354e": {
                    "1": "write_to_memory"
                },
                "fill_memory_00103ad0": {
                    "2": "fill_memory"
                },
                "extract_data_0010347f": {
                    "1": "extract_data_1"
                },
                "extract_data_00103a90": {
                    "1": "extract_data_2"
                },
                "read_elf_header_failed_00102558": {
                    "2": "read_elf_header_failed"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "error": {
                    "2": "display_error"
                },
                "update_elf_header_001024ec": {
                    "2": "update_elf_header"
                },
                "&DAT_00109390": {
                    "1": "header_address"
                },
                "&DAT_00109392": {
                    "1": "header_version"
                },
                "&DAT_00109394": {
                    "1": "header_entry"
                },
                "&DAT_00109398": {
                    "1": "header_ph_offset"
                },
                "&DAT_0010939c": {
                    "1": "header_sh_offset"
                },
                "&DAT_001093a0": {
                    "1": "header_flags"
                },
                "&DAT_001093a4": {
                    "1": "header_eh_size"
                },
                "&DAT_001093a8": {
                    "1": "header_ph_size"
                },
                "&DAT_001093aa": {
                    "1": "header_ph_num"
                },
                "&DAT_001093ac": {
                    "1": "header_sh_size"
                },
                "&DAT_001093ae": {
                    "1": "header_sh_num"
                },
                "&DAT_001093b0": {
                    "1": "header_sh_str_index"
                },
                "&DAT_00109350": {
                    "1": "alternative_header_address"
                },
                "&DAT_00109352": {
                    "1": "alternative_header_version"
                },
                "&DAT_00109354": {
                    "1": "alternative_header_entry"
                },
                "&DAT_00109358": {
                    "1": "alternative_header_ph_offset"
                },
                "&DAT_00109360": {
                    "1": "alternative_header_sh_offset"
                },
                "&DAT_00109368": {
                    "1": "alternative_header_flags"
                },
                "&DAT_00109370": {
                    "1": "alternative_header_eh_size"
                },
                "&DAT_00109374": {
                    "1": "alternative_header_ph_size"
                },
                "&DAT_00109376": {
                    "1": "alternative_header_ph_num"
                },
                "&DAT_00109378": {
                    "1": "alternative_header_sh_size"
                },
                "&DAT_0010937a": {
                    "1": "alternative_header_sh_num"
                },
                "&DAT_0010937c": {
                    "1": "alternative_header_sh_str_index"
                },
                "_DAT_001093e8": {
                    "1": "alternative_output_type_flag"
                },
                "DAT_00109418": {
                    "1": "data1"
                },
                "DAT_0010941a": {
                    "1": "data2"
                },
                "DAT_001093f8": {
                    "1": "data5"
                },
                "DAT_00109424": {
                    "1": "data10"
                },
                "_DAT_00109390": {
                    "1": "output_header_address"
                },
                "_DAT_00109392": {
                    "1": "output_header_version"
                },
                "_DAT_00109394": {
                    "1": "output_header_entry"
                },
                "_DAT_00109398": {
                    "1": "output_header_ph_offset"
                },
                "_DAT_0010939c": {
                    "1": "output_header_sh_offset"
                },
                "_DAT_001093a0": {
                    "1": "output_header_flags"
                },
                "_DAT_001093a4": {
                    "1": "output_header_eh_size"
                },
                "_DAT_001093a8": {
                    "1": "output_header_ph_size"
                },
                "_DAT_001093aa": {
                    "1": "output_header_ph_num"
                },
                "_DAT_001093ac": {
                    "1": "output_header_sh_size"
                },
                "_DAT_001093ae": {
                    "1": "output_header_sh_num"
                },
                "_DAT_001093b0": {
                    "1": "output_header_sh_str_index"
                },
                "abort": {
                    "1": "abort_execution"
                },
                "fseek": {
                    "1": "set_file_offset"
                },
                "fwrite": {
                    "1": "write_to_file"
                }
            }
        },
        "FUN_00105370": {
            "entrypoint": "0x00105370",
            "current_name": "extract_file_name_00105370",
            "code": "\nchar * extract_file_name_00105370(char *input_path,char *file_name)\n\n{\n  ulong allocated_size;\n  long total_length;\n  char current_char;\n  undefined8 error_message;\n  char *last_slash;\n  char *path_length;\n  char *allocated_memory;\n  ulong remaining_length;\n  ulong file_name_length;\n  ulong path_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  path_length = (char *)0x1;\n  if (input_path != (char *)0x0) {\n    path_length = input_path;\n  }\n  allocated_memory = (char *)malloc((size_t)path_length);\n  if (allocated_memory != (char *)0x0) {\n    return allocated_memory;\n  }\n  allocate_memory_00102fc7();\n  allocated_memory = path_length;\n  last_slash = path_length;\n  while (current_char = *allocated_memory, current_char != '\\0') {\n    allocated_memory = allocated_memory + 1;\n    if (current_char == '/') {\n      last_slash = allocated_memory;\n    }\n  }\n  if ((*file_name == '/') || (path_length == last_slash)) {\n    if (file_name_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    allocated_memory = (char *)malloc(file_name_length + 1);\n    remaining_length = file_name_length;\n    path_length = allocated_memory;\n    if (allocated_memory != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *path_length = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        path_length = path_length + (ulong)is_negative * -2 + 1;\n      }\n      allocated_memory[file_name_length] = '\\0';\n      return allocated_memory;\n    }\n  }\n  else {\n    path_length = (long)last_slash - (long)path_length;\n    total_length = path_length + file_name_length;\n    remaining_length = file_name_length;\n    if (file_name_length <= path_length) {\n      remaining_length = path_length;\n    }\n    allocated_size = total_length + 1;\n    if (allocated_size < remaining_length) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      error(error_message,file_name_length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(allocated_size);\n    allocated_memory = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length = file_name_length, path_length != 0; path_length = path_length - 1) {\n        *allocated_memory = *path_length;\n        path_length = path_length + (ulong)is_negative * -2 + 1;\n        allocated_memory = allocated_memory + (ulong)is_negative * -2 + 1;\n      }\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *allocated_memory = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        allocated_memory = allocated_memory + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  error(error_message);\n  return (char *)0x0;\n}\n\n",
            "renaming": {
                "FUN_00105370": "extract_file_name_00105370",
                "param_1": "input_path",
                "param_2": "file_name",
                "__size": "allocated_size",
                "lVar1": "total_length",
                "cVar2": "current_char",
                "uVar3": "error_message",
                "pcVar4": "last_slash",
                "pcVar5": "path_length",
                "pcVar6": "allocated_memory",
                "uVar7": "remaining_length",
                "uVar8": "path_length",
                "bVar9": "is_negative",
                "extraout_RDX": "file_name_length"
            },
            "calling": [
                "FUN_00103186",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_00103160"
            ],
            "called": [
                "malloc",
                "FUN_00102cbc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00105370": {
                    "1": "extract_file_name_from_path",
                    "3": "extract_archive_member_name",
                    "7": "extract_file_name",
                    "2": "extract_filename_from_path",
                    "5": "parse_file_path",
                    "4": "allocate_and_copy_string"
                },
                "param_1": {
                    "11": "input_path",
                    "1": "original_name",
                    "3": "path",
                    "9": "file_path",
                    "5": "input_string"
                },
                "param_2": {
                    "1": "output_file_path",
                    "3": "delimiter",
                    "2": "member_data",
                    "4": "filename",
                    "10": "file_name"
                },
                "__size": {
                    "1": "total_memory_size",
                    "6": "total_size",
                    "3": "size",
                    "8": "allocated_size",
                    "2": "allocation_size"
                },
                "lVar1": {
                    "7": "total_length",
                    "1": "diff_length",
                    "5": "total_size",
                    "3": "combined_size"
                },
                "cVar2": {
                    "16": "current_char"
                },
                "uVar3": {
                    "1": "translation",
                    "20": "error_message"
                },
                "pcVar4": {
                    "2": "filename_start",
                    "1": "last_delimiter",
                    "9": "last_slash"
                },
                "pcVar5": {
                    "1": "dynamic_memory_size",
                    "3": "path_length",
                    "2": "default_path"
                },
                "pcVar6": {
                    "1": "buffer",
                    "2": "current_char"
                },
                "uVar7": {
                    "1": "input_length",
                    "3": "remaining_size",
                    "2": "file_name_length_copy",
                    "5": "remaining_length",
                    "4": "file_name_length"
                },
                "uVar8": {
                    "1": "remaining_len",
                    "2": "path_size",
                    "4": "path_length",
                    "3": "filename_length"
                },
                "bVar9": {
                    "1": "negative_increment",
                    "7": "flag",
                    "8": "is_negative",
                    "3": "is_slash"
                },
                "extraout_RDX": {
                    "1": "input_path_size",
                    "2": "filename_length",
                    "3": "file_name_length"
                }
            }
        },
        "_DT_FINI": {
            "entrypoint": "0x00105394",
            "current_name": "_DT_FINI",
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 183833,
    "layers": [
        [
            "FUN_00102020",
            "FUN_001022c0",
            "FUN_00102323",
            "FUN_0010234b",
            "FUN_001023ce",
            "FUN_001024ec",
            "FUN_00102558",
            "FUN_001027fd",
            "FUN_001028be",
            "FUN_00102c98",
            "FUN_00102cc4",
            "FUN_00102f65",
            "FUN_00102fa0",
            "FUN_00102fbc",
            "FUN_0010347f",
            "FUN_0010354e",
            "FUN_00103a90",
            "FUN_00103ad0",
            "FUN_00104c60",
            "FUN_00104ce0",
            "FUN_00104d30",
            "FUN_00104da0"
        ],
        [
            "FUN_00102434",
            "FUN_001025ab",
            "FUN_00104de0"
        ],
        [
            "FUN_00102fc7",
            "FUN_00103006",
            "FUN_00103160",
            "FUN_00103186"
        ],
        [
            "FUN_00102cbc",
            "FUN_001032de",
            "FUN_00103449",
            "FUN_00105370"
        ],
        [
            "FUN_001029a5"
        ],
        [
            "FUN_0010358d"
        ],
        [
            "FUN_00103bf0"
        ]
    ],
    "locked_functions": []
}