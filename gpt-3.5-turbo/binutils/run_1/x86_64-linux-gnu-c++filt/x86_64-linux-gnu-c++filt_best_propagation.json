{
    "functions": {
        "FUN_00102000": {
            "entrypoint": "0x00102000",
            "current_name": "initialize_program_00102000",
            "code": "\nvoid initialize_program_00102000(void)\n\n{\n  start_monitoring();\n  exit;\n}\n\n",
            "renaming": {
                "FUN_00102000": "initialize_program_00102000",
                "__gmon_start__": "start_monitoring",
                "return": "exit"
            },
            "calling": [],
            "called": [
                "FUN_0010e0d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102000": {
                    "6": "initialize",
                    "1": "initialize_profiler",
                    "3": "initialize_monitoring",
                    "15": "initialize_program"
                },
                "__gmon_start__": {
                    "2": "start_profiler",
                    "1": "start_execution",
                    "4": "start_profiling",
                    "5": "start_monitoring"
                },
                "DAT_001020cc": {
                    "1": "monitor_data"
                },
                "DAT_001020d0": {
                    "1": "return_address"
                },
                "PTR_FUN_00102000": {
                    "1": "program_initializer"
                },
                "return": {
                    "1": "exit"
                }
            }
        },
        "FUN_00102020": {
            "entrypoint": "0x00102020",
            "current_name": "execute_indirect_jump_00102020",
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(indirect_function *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "function_pointer",
                "code": "indirect_function"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102020": {
                    "14": "execute_indirect_jump",
                    "1": "execute_function",
                    "5": "execute_indirect_call",
                    "6": "execute_indirect_function"
                },
                "undefined": {
                    "1": "indirect_function_address",
                    "3": "target_address",
                    "2": "indirect_function_pointer"
                },
                "(undefined *)0x0": {
                    "1": "target_address"
                },
                "<original_function_name>": {
                    "1": "execute_indirect_call"
                },
                "code": {
                    "2": "indirect_function",
                    "1": "function_to_execute"
                },
                "code_ptr": {
                    "1": "indirect_function_ptr"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "undefined *": {
                    "1": "jump_target"
                },
                "PTR_00102020": {
                    "1": "new_pointer"
                },
                "[none]": {
                    "1": "[none]"
                }
            }
        },
        "FUN_00102030": {
            "entrypoint": "0x00102030",
            "current_name": "FUN_00102030",
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e000"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102040": {
            "entrypoint": "0x00102040",
            "current_name": "FUN_00102040",
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "called": [
                "FUN_0010e008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102050": {
            "entrypoint": "0x00102050",
            "current_name": "FUN_00102050",
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e030"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102060": {
            "entrypoint": "0x00102060",
            "current_name": "FUN_00102060",
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e038"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102070": {
            "entrypoint": "0x00102070",
            "current_name": "FUN_00102070",
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102080": {
            "entrypoint": "0x00102080",
            "current_name": "FUN_00102080",
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e050"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102090": {
            "entrypoint": "0x00102090",
            "current_name": "FUN_00102090",
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_0010225e"
            ],
            "called": [
                "FUN_0010e060"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020a0": {
            "entrypoint": "0x001020a0",
            "current_name": "FUN_001020a0",
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020b0": {
            "entrypoint": "0x001020b0",
            "current_name": "FUN_001020b0",
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020c0": {
            "entrypoint": "0x001020c0",
            "current_name": "FUN_001020c0",
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020d0": {
            "entrypoint": "0x001020d0",
            "current_name": "FUN_001020d0",
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "called": [
                "FUN_0010e080"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020e0": {
            "entrypoint": "0x001020e0",
            "current_name": "FUN_001020e0",
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e088"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001020f0": {
            "entrypoint": "0x001020f0",
            "current_name": "FUN_001020f0",
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e098"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102100": {
            "entrypoint": "0x00102100",
            "current_name": "FUN_00102100",
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e0a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102110": {
            "entrypoint": "0x00102110",
            "current_name": "FUN_00102110",
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e0a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102120": {
            "entrypoint": "0x00102120",
            "current_name": "FUN_00102120",
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010225e"
            ],
            "called": [
                "FUN_0010e0b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102130": {
            "entrypoint": "0x00102130",
            "current_name": "FUN_00102130",
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_00102380",
                "FUN_00102e20"
            ],
            "called": [
                "FUN_0010e0b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102140": {
            "entrypoint": "0x00102140",
            "current_name": "FUN_00102140",
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_0010225e",
                "FUN_00102e20"
            ],
            "called": [
                "FUN_0010e0c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102150": {
            "entrypoint": "0x00102150",
            "current_name": "FUN_00102150",
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e0d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102160": {
            "entrypoint": "0x00102160",
            "current_name": "FUN_00102160",
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e0e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102170": {
            "entrypoint": "0x00102170",
            "current_name": "FUN_00102170",
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e0e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102180": {
            "entrypoint": "0x00102180",
            "current_name": "FUN_00102180",
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_00102e20"
            ],
            "called": [
                "FUN_0010e0f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102190": {
            "entrypoint": "0x00102190",
            "current_name": "FUN_00102190",
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e100"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021a0": {
            "entrypoint": "0x001021a0",
            "current_name": "FUN_001021a0",
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_00102380"
            ],
            "called": [
                "FUN_0010e108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021b0": {
            "entrypoint": "0x001021b0",
            "current_name": "FUN_001021b0",
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021c0": {
            "entrypoint": "0x001021c0",
            "current_name": "FUN_001021c0",
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021d0": {
            "entrypoint": "0x001021d0",
            "current_name": "FUN_001021d0",
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021e0": {
            "entrypoint": "0x001021e0",
            "current_name": "FUN_001021e0",
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_00102e20"
            ],
            "called": [
                "FUN_0010e128"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001021f0": {
            "entrypoint": "0x001021f0",
            "current_name": "FUN_001021f0",
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0",
                "FUN_0010225e"
            ],
            "called": [
                "FUN_0010e130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102200": {
            "entrypoint": "0x00102200",
            "current_name": "FUN_00102200",
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_0010225e",
                "FUN_00102e20"
            ],
            "called": [
                "FUN_0010e138"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102210": {
            "entrypoint": "0x00102210",
            "current_name": "FUN_00102210",
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_0010e148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102220": {
            "entrypoint": "0x00102220",
            "current_name": "FUN_00102220",
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "FUN_001024a0"
            ],
            "called": [
                "FUN_0010e158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00102230": {
            "entrypoint": "0x00102230",
            "current_name": "print_demangled_string_00102230",
            "code": "\n\n\nvoid print_demangled_string_00102230(ulong index)\n\n{\n  byte character;\n  void *demangled_string;\n  char *string;\n  \n  if (string[character] == '_') {\n    index = (ulong)((int)index + 1);\n  }\n  demangled_string = (void *)cplus_demangle(string + index,DAT_00105108);\n  if (demangled_string != (void *)0x0) {\n    if (*string == '.') {\n      print_character(0x2e,standard_output);\n    }\n    printf(\"%s\",demangled_string);\n    free(demangled_string);\n    return;\n  }\n  printf(\"%s\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102230": "print_demangled_string_00102230",
                "param_1": "index",
                "in_AL": "character",
                "__ptr": "demangled_string",
                "unaff_RBX": "string",
                "_stdout": "standard_output",
                "putc": "print_character"
            },
            "calling": [
                "FUN_00102380"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102230": {
                    "1": "print_mangled_name",
                    "2": "print_symbol",
                    "19": "print_demangled_string"
                },
                "param_1": {
                    "3": "input_index",
                    "1": "string_index",
                    "2": "string_offset",
                    "5": "offset",
                    "12": "index"
                },
                "in_AL": {
                    "2": "char_index",
                    "4": "byte_value",
                    "12": "character",
                    "1": "current_character"
                },
                "__ptr": {
                    "2": "mangled_string",
                    "24": "demangled_string",
                    "1": "mangled_name",
                    "3": "demangled_name"
                },
                "unaff_RBX": {
                    "1": "name_buffer",
                    "2": "string_pointer",
                    "21": "string"
                },
                "_stdout": {
                    "4": "standard_output",
                    "1": "stdout"
                },
                "putc": {
                    "1": "print_dot"
                }
            }
        },
        "FUN_0010225e": {
            "entrypoint": "0x0010225e",
            "current_name": "print_usage_0010225e",
            "code": "\n\n\nvoid print_usage_0010225e(FILE *output_file,int exit_code)\n\n{\n  char *bug_report_format;\n  undefined8 *demangler_ptr;\n  \n  fprintf(output_file,\"Usage: %s [options] [mangled names]\\n\",DAT_0010d148);\n  fprintf(output_file,\"Options are:\\n  [-_|--strip-underscore]     Ignore first leading underscore%s\\n\",\n          \"\");\n  fprintf(output_file,\"  [-n|--no-strip-underscore]  Do not ignore a leading underscore%s\\n\",\n          \" (default)\");\n  fwrite(\"  [-p|--no-params]            Do not display function arguments\\n  [-i|--no-verbose]           Do not show implementation details (if any)\\n  [-R|--recurse-limit]        Enable a limit on recursion whilst demangling.  [Default]\\n  ]-r|--no-recurse-limit]     Disable a limit on recursion whilst demangling\\n  [-t|--types]                Also attempt to demangle type encodings\\n  [-s|--format \"\n         ,1,0x184,output_file);\n  fprintf(output_file,\"{%s\",demanglers);\n  demangler_ptr = (undefined8 *)&libiberty_demanglers;\n  while (*(int *)(demangler_ptr + 4) != 0) {\n    fprintf(output_file,\",%s\",demangler_ptr[3]);\n    demangler_ptr = demangler_ptr + 3;\n  }\n  fputc(0x7d,output_file);\n  fwrite(&DAT_001035e8,1,2,output_file);\n  fwrite(\"  [@<file>]                   Read extra options from <file>\\n  [-h|--help]                 Display this information\\n  [-v|--version]              Show the version information\\nDemangled names are displayed to stdout.\\nIf a name cannot be demangled it is just echoed to stdout.\\nIf no names are provided on the command line, stdin is read.\\n\"\n         ,1,0x150,output_file);\n  if (exit_code == 0) {\n    bug_report_format = (char *)get_bug_report_message(0,\"Report bugs to %s.\\n\",5);\n    fprintf(output_file,bug_report_format,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "renaming": {
                "FUN_0010225e": "print_usage_0010225e",
                "param_1": "output_file",
                "param_2": "exit_code",
                "__format": "bug_report_format",
                "puVar1": "demangler_ptr",
                "_libiberty_demanglers": "demanglers",
                "dcgettext": "get_bug_report_message",
                "exit": "exit_program"
            },
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_001021f0",
                "FUN_0010e118",
                "FUN_00102090",
                "FUN_0010e110",
                "FUN_00102120",
                "FUN_00102200",
                "FUN_00102140",
                "FUN_0010e130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_0010225e": {
                    "1": "print_help_message",
                    "3": "display_usage",
                    "2": "display_usage_information",
                    "9": "print_usage_and_exit",
                    "11": "print_usage"
                },
                "param_1": {
                    "14": "output_file",
                    "1": "file_ptr",
                    "12": "file",
                    "4": "file_pointer"
                },
                "param_2": {
                    "28": "exit_code",
                    "2": "error_code",
                    "1": "exit_status"
                },
                "__format": {
                    "1": "bug_report_format_string",
                    "7": "format_string",
                    "19": "bug_report_format"
                },
                "puVar1": {
                    "1": "demanglers_array",
                    "2": "demanglers_pointer",
                    "3": "demanglers_ptr",
                    "5": "demangler_pointer",
                    "12": "demangler_ptr"
                },
                "_libiberty_demanglers": {
                    "5": "demanglers",
                    "1": "demangler_array",
                    "2": "demanglers_arr"
                },
                "DAT_0010d148": {
                    "1": "option_string",
                    "2": "mangled_names"
                },
                "DAT_001035e8": {
                    "1": "closing_bracket",
                    "3": "extra_options"
                },
                "dcgettext": {
                    "2": "get_bug_report_message",
                    "1": "get_bug_report"
                },
                "exit": {
                    "1": "exit_program"
                },
                "__param_1": {
                    "1": "extra_options_file"
                }
            }
        },
        "FUN_00102380": {
            "entrypoint": "0x00102380",
            "current_name": "print_symbol_name_00102380",
            "code": "\n\n\nvoid print_symbol_name_00102380(char *symbol,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  uint is_dot_or_dollar;\n  void *demangled_symbol;\n  ulong start_index;\n  \n  is_dot_or_dollar = (uint)(*symbol == '.' || *symbol == '$');\n  start_index = (ulong)is_dot_or_dollar;\n  if ((_DAT_0010d140 != 0) && (symbol[is_dot_or_dollar] == '_')) {\n    start_index = (ulong)(is_dot_or_dollar + 1);\n  }\n  demangled_symbol = (void *)demangle(symbol + start_index,DAT_00105108);\n  if (demangled_symbol != (void *)0x0) {\n    if (*symbol == '.') {\n      print_character(0x2e,standard_output);\n    }\n    print(\"%s\",demangled_symbol);\n    release_memory(demangled_symbol);\n    return;\n  }\n  print(\"%s\",symbol,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102380": "print_symbol_name_00102380",
                "param_1": "symbol",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "is_dot_or_dollar",
                "__ptr": "demangled_symbol",
                "uVar2": "start_index",
                "put": "put_character",
                "_stdout": "standard_output",
                "printf": "print",
                "free": "release_memory",
                "putc": "print_character",
                "cplus_demangle": "demangle"
            },
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_001021a0",
                "FUN_00102130",
                "FUN_00102230",
                "FUN_001020d0",
                "FUN_00102040"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102380": {
                    "1": "print_string",
                    "6": "print_symbol_name",
                    "4": "print_demangled_name",
                    "2": "print_symbol_info",
                    "5": "print_symbol"
                },
                "param_1": {
                    "1": "symbol_or_value",
                    "6": "name",
                    "13": "symbol",
                    "2": "string",
                    "3": "input_string",
                    "4": "symbol_name"
                },
                "param_2": {
                    "9": "arg2",
                    "7": "param2",
                    "2": "unused_1",
                    "1": "unused_param",
                    "5": "arg1"
                },
                "param_3": {
                    "5": "arg2",
                    "1": "unused_param_3",
                    "9": "arg3",
                    "2": "param_3",
                    "7": "param3"
                },
                "param_4": {
                    "1": "unused_param",
                    "7": "param4",
                    "2": "unused_3",
                    "9": "arg4",
                    "4": "arg3"
                },
                "uVar1": {
                    "12": "is_dot_or_dollar",
                    "1": "is_special_symbol",
                    "11": "starts_with_dot_or_dollar",
                    "4": "is_special_char"
                },
                "__ptr": {
                    "6": "demangled_string",
                    "14": "demangled_symbol",
                    "10": "demangled_name"
                },
                "uVar2": {
                    "1": "index",
                    "2": "index_offset",
                    "7": "offset",
                    "3": "starts_with_underscore",
                    "13": "start_index"
                },
                "put": {
                    "1": "put_character"
                },
                "_stdout": {
                    "3": "standard_output",
                    "2": "stdout"
                },
                "printf": {
                    "1": "print"
                },
                "free": {
                    "1": "release_memory"
                },
                "_DAT_0010d140": {
                    "1": "is_non_zero",
                    "2": "is_demangle_enabled"
                },
                "putc": {
                    "3": "print_character",
                    "1": "put_character"
                },
                "FUN_00102230": {
                    "1": "reverse"
                },
                "*param_1": {
                    "1": "input_string"
                },
                "DAT_00105108": {
                    "2": "demangle_parameter",
                    "1": "demangle_option"
                },
                "cplus_demangle": {
                    "1": "demangle"
                }
            }
        },
        "FUN_00102400": {
            "entrypoint": "0x00102400",
            "current_name": "start_program_00102400",
            "code": "\nvoid start_main_loop start_program_00102400(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  libc_start_main(entry_point,arg2,&stack0x00000008,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "processEntry": "start_main_loop",
                "param_1": "arg1",
                "param_2": "arg2",
                "FUN_00102400": "start_program_00102400",
                "auStack_8": "stack",
                "__libc_start_main": "libc_start_main",
                "main": "entry_point"
            },
            "calling": [],
            "called": [
                "FUN_0010e010",
                "FUN_001024f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "processEntry": {
                    "1": "start_main_process",
                    "13": "start_main_loop",
                    "2": "initialize_program"
                },
                "param_1": {
                    "1": "parameter1",
                    "9": "arg1",
                    "4": "param1",
                    "2": "unused_param1",
                    "3": "param",
                    "5": "argc"
                },
                "param_2": {
                    "9": "arg2",
                    "5": "param2",
                    "2": "args",
                    "1": "arg_2",
                    "6": "argv"
                },
                "FUN_00102400": {
                    "1": "start_main_wrapper",
                    "2": "start_main"
                },
                "auStack_8": {
                    "2": "stack_frame",
                    "1": "stack_var",
                    "5": "stack"
                },
                "FUN_001024f0": {
                    "3": "process_entry",
                    "1": "process_function"
                },
                "__libc_start_main": {
                    "1": "libc_start_main"
                },
                "main": {
                    "1": "entry_point"
                }
            }
        },
        "FUN_00102430": {
            "entrypoint": "0x00102430",
            "current_name": "FUNC_00102430",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102443) */\n/* WARNING: Removing unreachable block (ram,0x0010244f) */\n\nvoid FUNC_00102430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102430": "FUNC_00102430"
            },
            "calling": [
                "FUN_001024a0"
            ],
            "called": [
                "FUN_0010e018"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00102460": {
            "entrypoint": "0x00102460",
            "current_name": "FUNC_00102460",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102484) */\n/* WARNING: Removing unreachable block (ram,0x00102490) */\n\nvoid FUNC_00102460(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102460": "FUNC_00102460"
            },
            "calling": [
                "FUN_001024e0"
            ],
            "called": [
                "FUN_0010e140"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_001024a0": {
            "entrypoint": "0x001024a0",
            "current_name": "initialize_program_001024a0",
            "code": "\nvoid initialize_program_001024a0(void)\n\n{\n  if (DAT_00105120 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00105100);\n  deregister_tm_clones();\n  DAT_00105120 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_001024a0": "initialize_program_001024a0"
            },
            "calling": [],
            "called": [
                "FUN_00102430",
                "FUN_00102220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001024a0": {
                    "1": "disable_memory_cleanup",
                    "8": "initialize",
                    "4": "initialize_application",
                    "14": "initialize_program"
                },
                "FUNC_00102430": {
                    "1": "do_something",
                    "2": "execute_cleanup",
                    "6": "cleanup_resources",
                    "7": "cleanup",
                    "12": "perform_cleanup"
                },
                "PTR_LOOP_00105100": {
                    "2": "ptr_loop",
                    "1": "loop_pointer"
                },
                "deregister_tm_clones": {
                    "1": "deregister_tm_clones"
                },
                "DAT_00105120": {
                    "1": "is_initialized"
                }
            }
        },
        "FUN_001024e0": {
            "entrypoint": "0x001024e0",
            "current_name": "FUN_001024e0",
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00102460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_001024f0": {
            "entrypoint": "0x001024f0",
            "current_name": "demangle_symbols_001024f0",
            "code": "\n\n\nundefined8 demangle_symbols_001024f0(int argc,long *argv)\n\n{\n  byte *byte_ptr1;\n  byte byte_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  byte byte_var6;\n  int int_var7;\n  uint uint_var;\n  int int_var2;\n  FILE *file_stream;\n  size_t size;\n  byte *buffer;\n  size_t read_size;\n  byte *byte_ptr_3;\n  long long_var1;\n  long *args;\n  long *long_ptr;\n  long *long_pointer2;\n  undefined8 result;\n  char *char_ptr1;\n  byte *byte_ptr2;\n  long long_var2;\n  undefined **ptr_ptr;\n  long long_var3;\n  byte *byte_ptr3;\n  ulong ulong_var;\n  int int_var3;\n  int int_var4;\n  size_t size_t_var3;\n  long long_var4;\n  stat stat_struct;\n  \n  DAT_0010d148 = *argv;\n  initialize_program_name();\n  set_bfd_program_name(DAT_0010d148);\n  args = argv;\n  if (1 < argc) {\n    int_var4 = 2000;\n    ulong_var = 1;\n    int_var3 = 0;\n    do {\n      int_var2 = (int)ulong_var;\n      long_var2 = (long)int_var2;\n      if (*(char *)args[long_var2] == '@') {\n        int_var4 = int_var4 + -1;\n        if (int_var4 == 0) goto LAB_00102bdd;\n        char_ptr1 = (char *)args[long_var2] + 1;\n        int_var7 = stat(char_ptr1,&stat_struct);\n        if (int_var7 < 0) goto LAB_00102900;\n        if ((stat_struct.st_mode & 0xf000) == 0x4000) {\n          long_var2 = *args;\n          char_ptr1 = \"%s: error: @-file refers to a directory\\n\";\n          do {\n            print_to_file(stderr,char_ptr1,long_var2);\n            exit_program(1);\nLAB_00102bdd:\n            long_var2 = *args;\n            char_ptr1 = \"%s: error: too many @-files encountered\\n\";\n          } while_loop( true );\n        }\n        file_stream = open_file(char_ptr1,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00102900;\n        int_var7 = seek_file(file_stream,0,2);\n        if (((int_var7 == -1) || (size = get_file_position(file_stream), size == 0xffffffffffffffff)) ||\n           (int_var7 = seek_file(file_stream,0,0), int_var7 == -1)) {\nLAB_001029a0:\n          close_file(file_stream);\n          if (int_var2 + 1 < argc) goto LAB_0010290d;\n          break;\n        }\n        buffer = (byte *)allocate_memory(size + 1);\n        read_size = read_file(buffer,1,size,file_stream);\n        if ((size != read_size) && (int_var7 = get_file_error(file_stream), int_var7 != 0)) {\n          free_memory(buffer);\n          goto LAB_001029a0;\n        }\n        buffer[read_size] = 0;\n        byte_var6 = *buffer;\n        byte_ptr2 = buffer;\n        if (byte_var6 != 0) {\nLAB_00102680:\n          if (((&_sch_istable)[(ulong)byte_var6 * 2] & 0x40) != 0) goto LAB_00102670;\n          find_string_length((char *)buffer);\n          byte_ptr_3 = (byte *)allocate_memory();\n          long_ptr = (long *)0x0;\n          int_var7 = 0;\n          bool_var1 = false;\n          bool_var3 = false;\n          bool_var2 = false;\n          long_var4 = 0;\n          byte_ptr2 = buffer;\n          do {\n            while_loop (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) {\n              byte_ptr2 = byte_ptr2 + 1;\n            }\n            if ((int_var7 == 0) || (int_var7 + -1 <= (int)long_var4)) {\n              if (long_ptr == (long *)0x0) {\n                int_var7 = 8;\n                long_ptr = (long *)allocate_memory(0x40);\n              }\n              else {\n                int_var7 = int_var7 * 2;\n                long_ptr = (long *)reallocate_memory(long_ptr,(long)int_var7 << 3);\n              }\n              long_pointer2 = long_ptr + long_var4;\n              *long_pointer2 = 0;\n            }\n            else {\n              long_pointer2 = long_ptr + long_var4;\n            }\n            byte_var6 = *byte_ptr2;\n            byte_ptr3 = byte_ptr_3;\n            while_loop (byte_var6 != 0) {\n              while_loop( true ) {\n                if ((((&_sch_istable)[(ulong)byte_var6 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                  bool_var2 = false;\n                  bool_var1 = false;\n                  bool_var3 = false;\n                  goto LAB_0010276f;\n                }\n                if (!bool_var2) break;\n                byte_ptr2 = byte_ptr2 + 1;\n                *byte_ptr3 = byte_var6;\n                byte_ptr3 = byte_ptr3 + 1;\n                bool_var2 = false;\n                byte_var6 = *byte_ptr2;\n                if (byte_var6 == 0) goto LAB_0010276f;\n              }\n              if (byte_var6 == 0x5c) {\n                bool_var2 = true;\n              }\n              else if (bool_var3) {\n                if (byte_var6 == 0x27) {\n                  bool_var3 = false;\n                }\n                else {\nLAB_001028e1:\n                  *byte_ptr3 = byte_var6;\n                  byte_ptr3 = byte_ptr3 + 1;\n                }\n              }\n              else if (bool_var1) {\n                if (byte_var6 != 0x22) goto LAB_001028e1;\n                bool_var1 = false;\n              }\n              else if (byte_var6 == 0x27) {\n                bool_var3 = true;\n              }\n              else {\n                if (byte_var6 != 0x22) goto LAB_001028e1;\n                bool_var1 = true;\n              }\n              byte_ptr1 = byte_ptr2 + 1;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var6 = *byte_ptr1;\n            }\nLAB_0010276f:\n            *byte_ptr3 = 0;\n            long_var1 = duplicate_string(byte_ptr_3);\n            *long_pointer2 = long_var1;\n            long_ptr[long_var4 + 1] = 0;\n            byte_var6 = *byte_ptr2;\n            byte_var = (&_sch_istable)[(ulong)byte_var6 * 2];\n            while_loop ((byte_var & 0x40) != 0) {\n              byte_var6 = byte_ptr2[1];\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var = (&_sch_istable)[(ulong)byte_var6 * 2];\n            }\n            long_var4 = long_var4 + 1;\n          } while_loop (byte_var6 != 0);\n          free_memory(byte_ptr_3);\n          long_pointer2 = args;\n          if (argv == args) goto LAB_00102adb;\n          goto LAB_00102807;\n        }\nLAB_00102abe:\n        long_ptr = (long *)allocate_memory(8);\n        *long_ptr = 0;\n        if (argv == args) {\nLAB_00102adb:\n          if (*args == 0) {\n            int_var7 = 0;\n          }\n          else {\n            long_var1 = 1;\n            do {\n              int_var7 = (int)long_var1;\n              long_pointer2 = args + long_var1;\n              long_var1 = long_var1 + 1;\n            } while_loop (*long_pointer2 != 0);\n          }\n          long_var3 = 0;\n          long_pointer2 = (long *)allocate_memory((long)(int_var7 + 1) << 3);\n          long_var1 = *args;\n          while_loop (long_var1 != 0) {\n            result = duplicate_string();\n            *(undefined8 *)((long)long_pointer2 + long_var3) = result;\n            long_var3 = long_var3 + 8;\n            long_var1 = *(long *)((long)args + long_var3);\n          }\n          *(undefined8 *)((long)long_pointer2 + long_var3) = 0;\nLAB_00102807:\n          args = long_pointer2;\n          if (*long_ptr == 0) goto LAB_00102ba3;\n          long_var1 = 0;\n          do {\n            long_var1 = long_var1 + 1;\n          } while_loop (long_ptr[long_var1] != 0);\n          size_t_var3 = long_var1 * 8;\n        }\n        else {\nLAB_00102ba3:\n          long_var1 = 0;\n          size_t_var3 = 0;\n        }\n        free_memory((void *)args[long_var2]);\n        args = (long *)reallocate_memory(args,(long_var1 + 1 + (long)argc) * 8);\n        int_var7 = argc + -1 + (int)long_var1;\n        move_memory(args + long_var2 + long_var1,args + long_var2 + 1,(long)(argc - int_var2) << 3);\n        copy_memory(args + long_var2,long_ptr,size_t_var3);\n        free_memory(long_ptr);\n        free_memory(buffer);\n        close_file(file_stream);\n        uint_var = int_var3 + 1;\n        ulong_var = long_var2 * 8;\n        argc = int_var7;\n        if (int_var7 <= (int)uint_var) break;\n      }\n      else {\nLAB_00102900:\n        if (argc <= int_var2 + 1) break;\nLAB_0010290d:\n        uint_var = int_var2 + 1;\n        int_var3 = int_var2;\n      }\n      ulong_var = (ulong)uint_var;\n    } while_loop( true );\n  }\n  ptr_ptr = &PTR_s_strip_underscore_00104be0;\n  while_loop (int_var2 = getopt_long(argc,args,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0),\n        int_var2 != -1) {\n    switch(int_var2) {\n    case 0x3f:\nswitchD_001029f9_caseD_3f:\n      show_usage(stderr,1);\n    case 0x5f:\nswitchD_001029f9_caseD_5f:\n      _DAT_0010d140 = 1;\n      break;\n    default:\n      do {\n        int_var2 = getopt_long(argc,args,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0);\n        if (int_var2 == -1) goto LAB_00102a6c;\n        switch(int_var2) {\n        case 0x3f:\n          goto switchD_001029f9_caseD_3f;\n        case 0x52:\n          goto switchD_001029f9_caseD_52;\n        case 0x5f:\n          goto switchD_001029f9_caseD_5f;\n        case 0x68:\n          goto switchD_001029f9_caseD_68;\n        case 0x69:\n          goto switchD_001029f9_caseD_69;\n        case 0x6e:\n          goto switchD_001029f9_caseD_6e;\n        case 0x70:\n          goto switchD_001029f9_caseD_70;\n        case 0x72:\n          goto switchD_001029f9_caseD_72;\n        case 0x73:\n          goto switchD_001029f9_caseD_73;\n        case 0x74:\n          goto switchD_001029f9_caseD_74;\n        case 0x76:\n          goto switchD_001029f9_caseD_76;\n        }\n      } while_loop( true );\n    case 0x52:\nswitchD_001029f9_caseD_52:\n      DAT_00105108 = DAT_00105108 & 0xfffbffff;\n      break;\n    case 0x68:\nswitchD_001029f9_caseD_68:\n      show_usage(stdout,0);\n    case 0x74:\nswitchD_001029f9_caseD_74:\n      DAT_00105108 = DAT_00105108 | 0x10;\n      break;\n    case 0x69:\nswitchD_001029f9_caseD_69:\n      DAT_00105108 = DAT_00105108 & 0xfffffff7;\n      break;\n    case 0x6e:\nswitchD_001029f9_caseD_6e:\n      _DAT_0010d140 = 0;\n      break;\n    case 0x70:\nswitchD_001029f9_caseD_70:\n      DAT_00105108 = DAT_00105108 & 0xfffffffe;\n      break;\n    case 0x72:\nswitchD_001029f9_caseD_72:\n      DAT_00105108 = DAT_00105108 | 0x40000;\n      break;\n    case 0x73:\nswitchD_001029f9_caseD_73:\n      int_var2 = demangle_name_to_style(oarg);\n      if (int_var2 == 0) {\n        print_to_file(stderr,\"%s: unknown demangling style `%s\\'\\n\",DAT_0010d148,oarg);\n        return 1;\n      }\n      set_demangle_style(int_var2);\n      break;\n    case 0x76:\nswitchD_001029f9_caseD_76:\n      print_message(\"GNU %s %s\\n\",\"c++filt\",\"(GNU Binutils for Debian) 2.40\");\n      char_ptr1 = (char *)get_localized_message(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      print_message(char_ptr1);\n      char_ptr1 = (char *)get_localized_message(0,\n                                  \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      print_message(char_ptr1);\n                    \n      exit_program(0);\n    }\n  }\nLAB_00102a6c:\n  if (optind < argc) {\n    do {\n      demangle_it(args[optind]);\n      put_character(10,stdout);\n      optind = optind + 1;\n    } while_loop (optind < argc);\n  }\n  else {\n    if (demangling_style == 0x8000) {\nLAB_00102c76:\n      ptr_ptr = (undefined **)&stdout;\n      do {\n        ulong_var = 0;\n        uint_var = get_character(stdin);\n        while_loop( true ) {\n          args = (long *)(ulong_var & 0xffffffff);\n          if (uint_var == 0xffffffff) goto LAB_00102d0d;\n          if ((((&_sch_istable)[(ulong)(uint_var & 0xff) * 2] & 0x8c) == 0) &&\n             (char_ptr1 = find_character(\"_$.\",uint_var), char_ptr1 == (char *)0x0)) {\n            if ((int)args != 0) goto LAB_00102d6f;\n            goto LAB_00102d47;\n          }\n          if (ulong_var == 0x7ffe) break;\n          (&DAT_00105140)[ulong_var] = (char)uint_var;\n          ulong_var = ulong_var + 1;\n          uint_var = get_character(stdin);\n        }\n        args = (long *)0x7ffe;\nLAB_00102d6f:\n        *(undefined *)(args + 0x20a28) = 0;\n        demangle_it(&DAT_00105140);\nLAB_00102d47:\n        put_character(uint_var,stdout);\n        if (uint_var == 10) {\n          flush_stream(stdout);\n        }\n      } while_loop( true );\n    }\n    if (demangling_style < 0x8001) {\n      if (((demangling_style == 0x100) || (demangling_style == 0x4000)) ||\n         (demangling_style == 4)) goto LAB_00102c76;\n    }\n    else if ((demangling_style - 0x10000U & 0xfffeffff) == 0) goto LAB_00102c76;\n    report_error(\"Internal error: no symbol alphabet for current style\");\nLAB_00102d0d:\n    if ((int)ulong_var != 0) {\n      *(undefined *)(args + 0x20a28) = 0;\n      demangle_it();\n    }\n    flush_stream((FILE *)*ptr_ptr);\n  }\n  return 0;\nLAB_00102670:\n  byte_var6 = byte_ptr2[1];\n  byte_ptr2 = byte_ptr2 + 1;\n  if (byte_var6 == 0) goto LAB_00102abe;\n  goto LAB_00102680;\n}\n\n",
            "renaming": {
                "FUN_001024f0": "demangle_symbols_001024f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_ptr1",
                "bVar2": "byte_var",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "bVar5": "bool_var3",
                "bVar6": "byte_var6",
                "iVar7": "int_var7",
                "uVar8": "uint_var",
                "iVar9": "int_var2",
                "__stream": "file_stream",
                "__n": "size",
                "__s": "buffer",
                "sVar10": "read_size",
                "__ptr": "byte_ptr_3",
                "lVar11": "long_var1",
                "plVar12": "args",
                "__src": "long_ptr",
                "plVar13": "long_pointer2",
                "uVar14": "result",
                "pcVar15": "char_ptr1",
                "pbVar16": "byte_ptr2",
                "lVar17": "long_var2",
                "ppuVar18": "ptr_ptr",
                "lVar19": "long_var3",
                "pbVar20": "byte_ptr3",
                "unaff_R13": "ulong_var",
                "local_110": "int_var3",
                "local_10c": "int_var4",
                "local_108": "size_t_var3",
                "local_100": "long_var4",
                "local_c8": "stat_struct",
                "xmalloc_set_program_name": "initialize_program_name",
                "bfd_set_error_program_name": "set_bfd_program_name",
                "xexit": "exit_program",
                "fopen": "open_file",
                "fprintf": "print_to_file",
                "xstrdup": "duplicate_string",
                "xrealloc": "reallocate_memory",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "free": "free_memory",
                "fclose": "close_file",
                "fseek": "seek_file",
                "ftell": "get_file_position",
                "fread": "read_file",
                "ferror": "get_file_error",
                "getc": "get_character",
                "putc": "put_character",
                "fflush": "flush_stream",
                "dcgettext": "get_localized_message",
                "printf": "print_message",
                "exit": "exit_program",
                "usage": "show_usage",
                "cplus_demangle_name_to_style": "demangle_name_to_style",
                "cplus_demangle_set_style": "set_demangle_style",
                "strchr": "find_character",
                "fatal_constprop_0": "report_error",
                "_stderr": "stderr",
                "while": "while_loop",
                "xmalloc": "allocate_memory",
                "strlen": "find_string_length",
                "_stdin": "stdin",
                "_stdout": "stdout",
                "_optarg": "oarg",
                "_current_demangling_style": "demangling_style",
                "_optind": "optind"
            },
            "calling": [
                "FUN_00102400"
            ],
            "called": [
                "FUN_00102080",
                "FUN_00102090",
                "FUN_001021c0",
                "FUN_001021d0",
                "FUN_001020c0",
                "FUN_00102040",
                "FUN_00102e20",
                "FUN_001021b0",
                "FUN_00102150",
                "FUN_001021f0",
                "FUN_00102060",
                "FUN_00102030",
                "FUN_00102130",
                "FUN_00102180",
                "FUN_001020f0",
                "FUN_001020a0",
                "FUN_001021e0",
                "FUN_00102110",
                "FUN_00102160",
                "FUN_00102140",
                "FUN_00102210",
                "FUN_001020e0",
                "FUN_00102100",
                "FUN_00102190",
                "FUN_00102050",
                "FUN_00102070",
                "FUN_00102380",
                "FUN_0010225e",
                "FUN_00102170",
                "FUN_001020d0",
                "FUN_001020b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_001024f0": {
                    "25": "demangle_symbols",
                    "1": "parse_command_line"
                },
                "param_1": {
                    "2": "num_files",
                    "1": "num_parameters",
                    "28": "argc"
                },
                "param_2": {
                    "28": "argv",
                    "1": "param_array"
                },
                "pbVar1": {
                    "6": "byte_ptr",
                    "1": "byte_ptr_1",
                    "2": "ptr1",
                    "8": "byte_ptr1"
                },
                "bVar2": {
                    "9": "byte_var2",
                    "1": "byte_val2",
                    "2": "byte_val",
                    "10": "byte_var"
                },
                "bVar3": {
                    "1": "bool_val3",
                    "6": "bool_var3",
                    "5": "bool_var_1",
                    "2": "bool1",
                    "8": "bool_var1"
                },
                "bVar4": {
                    "1": "single_quotation",
                    "6": "bool_var4",
                    "2": "bool2",
                    "8": "bool_var2",
                    "5": "bool_var_2"
                },
                "bVar5": {
                    "1": "double_quotation",
                    "8": "bool_var3",
                    "6": "bool_var5",
                    "2": "bool3",
                    "5": "bool_var_3"
                },
                "bVar6": {
                    "5": "byte_var2",
                    "4": "byte_var_2",
                    "2": "byte1",
                    "1": "byte_var",
                    "6": "byte_var6"
                },
                "iVar7": {
                    "1": "int_variable_7",
                    "5": "index",
                    "7": "int_var7"
                },
                "uVar8": {
                    "1": "index",
                    "7": "uint_var8",
                    "3": "counter",
                    "9": "uint_var",
                    "2": "uint_var1"
                },
                "iVar9": {
                    "1": "temp_var",
                    "5": "int_var_2",
                    "2": "index"
                },
                "__stream": {
                    "1": "file_pointer",
                    "24": "file_stream",
                    "4": "file"
                },
                "__n": {
                    "2": "size_t_var_1",
                    "1": "size_t1",
                    "7": "file_size",
                    "9": "size",
                    "5": "size_t_var1"
                },
                "__s": {
                    "3": "file_content",
                    "2": "byte_pointer2",
                    "1": "file_data",
                    "4": "byte_ptr_2",
                    "5": "buffer"
                },
                "sVar10": {
                    "2": "size_var2",
                    "6": "read_size",
                    "1": "size_t2",
                    "5": "size_t_var2",
                    "3": "size_t_var_2"
                },
                "__ptr": {
                    "1": "new_buffer",
                    "3": "buffer",
                    "2": "byte_pointer_3",
                    "4": "byte_ptr_3"
                },
                "lVar11": {
                    "1": "loop_index",
                    "4": "long_var_1",
                    "11": "long_var1",
                    "3": "length",
                    "2": "long_var11"
                },
                "plVar12": {
                    "1": "symbols",
                    "2": "symbol_array",
                    "6": "args",
                    "3": "param_ptr"
                },
                "__src": {
                    "2": "src_ptr",
                    "1": "long_var_ptr_1",
                    "3": "long_ptr"
                },
                "plVar13": {
                    "2": "long_pointer2",
                    "1": "array_element"
                },
                "uVar14": {
                    "1": "undefined8_variable_1",
                    "6": "result",
                    "2": "uint_var_2",
                    "5": "undefined_var"
                },
                "pcVar15": {
                    "1": "ptr2",
                    "3": "char_ptr",
                    "2": "str",
                    "5": "char_ptr1"
                },
                "pbVar16": {
                    "4": "byte_ptr_4",
                    "1": "str",
                    "2": "byte_pointer4",
                    "3": "byte_ptr4"
                },
                "lVar17": {
                    "5": "long_var_2",
                    "12": "long_var2",
                    "1": "array_index",
                    "3": "file_index",
                    "2": "long_var17"
                },
                "ppuVar18": {
                    "2": "undefined_ptr1",
                    "1": "undefined_pointer",
                    "3": "pointer_to_pointer",
                    "4": "ptr_ptr"
                },
                "lVar19": {
                    "1": "index2",
                    "2": "long_var19",
                    "12": "long_var3",
                    "5": "long_var_3"
                },
                "pbVar20": {
                    "1": "ptr4",
                    "3": "byte_ptr4",
                    "2": "byte_pointer5",
                    "4": "byte_ptr_5"
                },
                "unaff_R13": {
                    "1": "loop_index",
                    "7": "ulong_var",
                    "2": "unaff_r13",
                    "4": "ulong_var1"
                },
                "local_110": {
                    "2": "int_var_3",
                    "1": "int_variable3",
                    "4": "int_var3",
                    "3": "local_var1"
                },
                "local_10c": {
                    "1": "local_var10c",
                    "3": "max_files",
                    "2": "int_var_4",
                    "4": "int_var4"
                },
                "local_108": {
                    "2": "size_t_var_3",
                    "1": "size1",
                    "3": "local_var3",
                    "4": "size_t_var3"
                },
                "local_100": {
                    "2": "local_long",
                    "1": "local_size",
                    "3": "local_var4",
                    "6": "long_var4"
                },
                "local_c8": {
                    "1": "local_var_c8",
                    "2": "file_info",
                    "4": "local_stat",
                    "5": "stat_var",
                    "3": "file_stat"
                },
                "xmalloc_set_program_name": {
                    "1": "set_program_name"
                },
                "bfd_set_error_program_name": {
                    "1": "set_error_program_name"
                },
                "xexit": {
                    "1": "exit"
                },
                "fopen": {
                    "2": "open_file"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "xstrdup": {
                    "1": "xstrdup",
                    "2": "duplicate_string"
                },
                "xrealloc": {
                    "2": "reallocate_memory",
                    "1": "xrealloc"
                },
                "memcpy": {
                    "1": "memcpy",
                    "2": "copy_memory"
                },
                "memmove": {
                    "1": "memmove",
                    "2": "move_memory"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "free": {
                    "1": "free_memory"
                },
                "fclose": {
                    "2": "close_file",
                    "1": "fclose"
                },
                "fseek": {
                    "1": "seek_file"
                },
                "ftell": {
                    "1": "get_file_position"
                },
                "fread": {
                    "2": "read_file",
                    "1": "fread"
                },
                "ferror": {
                    "1": "check_file_error"
                },
                "getc": {
                    "1": "read_character"
                },
                "putc": {
                    "1": "put_character"
                },
                "fflush": {
                    "2": "flush_stream"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "printf": {
                    "1": "print_message"
                },
                "exit": {
                    "1": "exit_program"
                },
                "usage": {
                    "1": "print_usage"
                },
                "cplus_demangle_name_to_style": {
                    "2": "demangle_name_to_style"
                },
                "cplus_demangle_set_style": {
                    "2": "set_demangle_style"
                },
                "strchr": {
                    "1": "find_character"
                },
                "fatal_constprop_0": {
                    "1": "report_error"
                },
                "_stderr": {
                    "1": "standard_error_stream",
                    "2": "stderr"
                },
                "while": {
                    "1": "while_loop"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "strlen": {
                    "1": "find_string_length"
                },
                "_stdin": {
                    "1": "standard_input_stream",
                    "2": "stdin"
                },
                "_stdout": {
                    "1": "standard_output_stream",
                    "2": "stdout"
                },
                "_optarg": {
                    "1": "optarg"
                },
                "_current_demangling_style": {
                    "2": "demangling_style"
                },
                "DAT_0010d148": {
                    "1": "program_name"
                },
                "_exit": {
                    "1": "xexit"
                },
                "DAT_0010d140": {
                    "1": "global_variables"
                },
                "DAT_00105108": {
                    "1": "global_variables"
                },
                "_optind": {
                    "1": "optind"
                },
                "DAT_00105140": {
                    "1": "global_variables"
                }
            }
        },
        "FUN_00102e20": {
            "entrypoint": "0x00102e20",
            "current_name": "print_error_message_00102e20",
            "code": "\n\n\nvoid print_error_message_00102e20(void)\n\n{\n  fflush(standard_output);\n  print_error_message_00102e20(standard_error,\"%s: \",DAT_0010d148);\n  write_error_message(\"Internal error: no symbol alphabet for current style\",1,0x34,standard_error);\n  print_newline(10,standard_error);\n  exit_program(1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102e20": "print_error_message_00102e20",
                "_stderr": "standard_error",
                "xexit": "exit_program",
                "_stdout": "standard_output",
                "stderr": "error_stream",
                "stdout": "standard_output",
                "fprintf": "print_error_message",
                "fwrite": "write_error_message",
                "putc": "print_newline"
            },
            "calling": [
                "FUN_001024f0"
            ],
            "called": [
                "FUN_00102180",
                "FUN_00102130",
                "FUN_001021e0",
                "FUN_00102200",
                "FUN_00102140"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "additional_data": {
                "FUN_00102e20": {
                    "1": "print_error_message_and_exit",
                    "2": "print_internal_error_and_exit",
                    "11": "handle_internal_error"
                },
                "_stderr": {
                    "1": "err_output",
                    "4": "error_output",
                    "3": "stderr",
                    "10": "standard_error"
                },
                "DAT_0010d148": {
                    "7": "error_message",
                    "2": "error_prefix"
                },
                "xexit": {
                    "1": "exit",
                    "8": "exit_program"
                },
                "_stdout": {
                    "1": "standard_output_stream",
                    "2": "output_stream",
                    "11": "standard_output",
                    "3": "stdout"
                },
                "stderr": {
                    "2": "standard_error",
                    "3": "error_stream",
                    "1": "error_output"
                },
                "stdout": {
                    "3": "standard_output",
                    "1": "output_stream"
                },
                "fprintf": {
                    "3": "print_error_message",
                    "1": "formatted_print"
                },
                "fwrite": {
                    "1": "write_to_file",
                    "3": "write_error_message"
                },
                "putc": {
                    "1": "write_newline"
                }
            }
        },
        "FUN_00102f00": {
            "entrypoint": "0x00102f00",
            "current_name": "FUNC_00102f00",
            "code": "\nvoid FUNC_00102f00(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00102f00": "FUNC_00102f00"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 35438,
    "layers": [
        [
            "FUN_00102000",
            "FUN_00102020",
            "FUN_00102230",
            "FUN_0010225e",
            "FUN_00102380",
            "FUN_00102400",
            "FUN_001024a0",
            "FUN_001024f0",
            "FUN_00102e20"
        ]
    ],
    "locked_functions": []
}