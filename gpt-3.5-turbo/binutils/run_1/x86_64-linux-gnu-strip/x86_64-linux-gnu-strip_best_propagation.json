{
    "functions": {
        "FUN_00104000": {
            "additional_data": {
                "": {
                    "1": ""
                },
                "FUN_00104000": {
                    "1": "start_program",
                    "14": "initialize_program",
                    "2": "initialize_gmon",
                    "3": "initialize_monitor",
                    "4": "initialize_monitoring"
                },
                "__gmon_start__": {
                    "1": "start_program_monitoring",
                    "2": "start_gmon",
                    "3": "start_monitor",
                    "7": "start_profiling",
                    "8": "start_monitoring"
                },
                "gmon_start": {
                    "1": "initialize_profiling"
                }
            },
            "called": [
                "FUN_001282a8"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00104000(void)\n\n{\n  start_monitoring();\n  return;\n}\n\n",
            "current_name": "initialize_program_00104000",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104000": "initialize_program_00104000",
                "__gmon_start__": "start_monitoring",
                "gmon_start": "initialize_profiling"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104020": {
            "additional_data": {
                "*(code *)(undefined *)0x0": {
                    "1": "function_pointer"
                },
                "<original_variable_name_1>": {
                    "1": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "1": "<new_variable_name_2>"
                },
                "FUN_00104020": {
                    "1": "call_indirect_jump",
                    "16": "execute_indirect_jump",
                    "2": "execute_indirect_call",
                    "6": "execute_function"
                },
                "PTR_UNDEFINED": {
                    "1": "jump_address"
                },
                "PTR_undefined_0": {
                    "1": "indirect_function_ptr"
                },
                "code": {
                    "1": "function_to_execute"
                },
                "undef0": {
                    "1": "function_address"
                },
                "undefined": {
                    "1": "code_address",
                    "2": "function_address",
                    "5": "target_address"
                },
                "undefined *": {
                    "1": "function_ptr"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104030": {
            "called": [
                "FUN_00128000"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104030",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104040": {
            "called": [
                "FUN_00128008"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104040",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104050": {
            "called": [
                "FUN_00128010"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "FUN_00104050",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104060": {
            "called": [
                "FUN_00128018"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104060",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104070": {
            "called": [
                "FUN_00128020"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "FUN_00104070",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104080": {
            "called": [
                "FUN_00128030"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104080",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104090": {
            "called": [
                "FUN_00128038"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "FUN_00104090",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040a0": {
            "called": [
                "FUN_00128048"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010b0fa",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_001135a5",
                "FUN_0010e9a0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "FUN_001040a0",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040b0": {
            "called": [
                "FUN_00128050"
            ],
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "FUN_001040b0",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040c0": {
            "called": [
                "FUN_00128058"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00108200"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001040c0",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040d0": {
            "called": [
                "FUN_00128060"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001040d0",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040e0": {
            "called": [
                "FUN_00128068"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00113fb0"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001040e0",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040f0": {
            "called": [
                "FUN_00128080"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "FUN_001040f0",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104100": {
            "called": [
                "FUN_00128088"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_0010a424",
                "FUN_0011378f",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104100",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104110": {
            "called": [
                "FUN_00128090"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104110",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104120": {
            "called": [
                "FUN_00128098"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104120",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104130": {
            "called": [
                "FUN_001280a0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104130",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104140": {
            "called": [
                "FUN_001280a8"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "FUN_00104140",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104150": {
            "called": [
                "FUN_001280b0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "FUN_00104150",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104160": {
            "called": [
                "FUN_001280b8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104160",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104170": {
            "called": [
                "FUN_001280c0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "FUN_00104170",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104180": {
            "called": [
                "FUN_001280c8"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "FUN_00104180",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104190": {
            "called": [
                "FUN_001280d0"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104190",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041a0": {
            "called": [
                "FUN_001280d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "FUN_001041a0",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041b0": {
            "called": [
                "FUN_001280e0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "FUN_001041b0",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041c0": {
            "called": [
                "FUN_001280e8"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001041c0",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041d0": {
            "called": [
                "FUN_001280f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001041d0",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041e0": {
            "called": [
                "FUN_00128100"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "FUN_001041e0",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041f0": {
            "called": [
                "FUN_00128108"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "FUN_001041f0",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104200": {
            "called": [
                "FUN_00128110"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "FUN_00104200",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104210": {
            "called": [
                "FUN_00128118"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104210",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104220": {
            "called": [
                "FUN_00128128"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "FUN_00104220",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104230": {
            "called": [
                "FUN_00128130"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104230",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104240": {
            "called": [
                "FUN_00128138"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_0010551d",
                "FUN_00108808",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00119970",
                "FUN_0010ba08",
                "FUN_00112b6e",
                "FUN_00109a32",
                "FUN_0010bf86",
                "FUN_0010e2f0",
                "FUN_0010914e",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_0010c05d",
                "FUN_00116490",
                "FUN_0010bc80",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0010871c",
                "FUN_0010554f",
                "FUN_0010c892",
                "FUN_00104920",
                "FUN_00109022",
                "FUN_00114dc7",
                "FUN_00105828",
                "FUN_00108072",
                "FUN_00108916",
                "FUN_00115530",
                "FUN_0010543c",
                "FUN_00108179",
                "FUN_0011173a",
                "FUN_00113f50",
                "FUN_001199d0",
                "FUN_00114460",
                "FUN_00115b70",
                "FUN_00108b3e",
                "FUN_001086af",
                "FUN_0010808f",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00114e50",
                "FUN_0010882c",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010da0b",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_001053b5",
                "FUN_00108a2a",
                "FUN_00107880",
                "FUN_00114e00",
                "FUN_00114190",
                "FUN_00104cc1",
                "FUN_001083de",
                "FUN_00107976",
                "FUN_0010b6ea",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_00108f08",
                "FUN_00108200",
                "FUN_00108fe8",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_00112c1f",
                "FUN_001152b6",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010827b",
                "FUN_00119f70",
                "FUN_0010bf20",
                "FUN_00108d9a",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00114690",
                "FUN_00104a35"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "FUN_00104240",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104250": {
            "called": [
                "FUN_00128140"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104250",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104260": {
            "called": [
                "FUN_00128148"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104260",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104270": {
            "called": [
                "FUN_00128150"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_00108c86",
                "FUN_0010e5db",
                "FUN_0010b0fa",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010e8a9",
                "FUN_0010e2f0",
                "FUN_0010d559",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00104ad6",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_0010a83e",
                "FUN_00113fb0",
                "FUN_0010a2b9",
                "FUN_00113ede",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_00115530",
                "FUN_00104943",
                "FUN_0010e9a0",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_0010ab4d",
                "FUN_00109bbb",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104270",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104280": {
            "called": [
                "FUN_00128158"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "FUN_00104280",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104290": {
            "called": [
                "FUN_00128160"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104290",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042a0": {
            "called": [
                "FUN_00128168"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001199d0",
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00104943"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001042a0",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042b0": {
            "called": [
                "FUN_00128170"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010d7d4",
                "FUN_0010abdd",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010dac0",
                "FUN_00109be3",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_00109ed3",
                "FUN_0010e07c",
                "FUN_0010b6ea"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "FUN_001042b0",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042c0": {
            "called": [
                "FUN_00128178"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001042c0",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042d0": {
            "called": [
                "FUN_00128180"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001042d0",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042e0": {
            "called": [
                "FUN_00128188"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "FUN_001042e0",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042f0": {
            "called": [
                "FUN_00128190"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_001042f0",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104300": {
            "called": [
                "FUN_00128198"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "FUN_00104300",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104310": {
            "called": [
                "FUN_001281a0"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104310",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104320": {
            "called": [
                "FUN_001281a8"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00104ea2",
                "FUN_0010d21c",
                "FUN_0010554f"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "FUN_00104320",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104330": {
            "called": [
                "FUN_001281b8"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104330",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104340": {
            "called": [
                "FUN_001281c0"
            ],
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104340",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104350": {
            "called": [
                "FUN_001281c8"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "FUN_00104350",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104360": {
            "called": [
                "FUN_001281d0"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00104360",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104370": {
            "called": [
                "FUN_001281d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "FUN_00104370",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104380": {
            "called": [
                "FUN_001281e0"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104380",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104390": {
            "called": [
                "FUN_001281e8"
            ],
            "calling": [
                "FUN_0010c139",
                "FUN_0010a69a",
                "FUN_00113da9",
                "FUN_00104ea2",
                "FUN_00109b52",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_00116030",
                "FUN_00113b98",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_001163d0",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0011a480",
                "FUN_00116110",
                "FUN_00109022",
                "FUN_00114cf0",
                "FUN_00115530",
                "FUN_0010e9a0",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_00114460",
                "FUN_0010a424",
                "FUN_00113d6e",
                "FUN_0010afd5",
                "FUN_00109a0b",
                "FUN_00116852",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010e6a8",
                "FUN_0010da0b",
                "FUN_00108c86",
                "FUN_00114c80",
                "FUN_0010a0e9",
                "FUN_0010e8a9",
                "FUN_00113c43",
                "FUN_00107880",
                "FUN_00114190",
                "FUN_00109ed3",
                "FUN_0010d882",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00113e23",
                "FUN_0010b6ea",
                "FUN_00114d60",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_00112925",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00112904",
                "FUN_0010ab4d",
                "FUN_00108d9a",
                "FUN_0010bd62",
                "FUN_00113bfa",
                "FUN_0010a377",
                "FUN_00113ce0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104390",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043a0": {
            "called": [
                "FUN_001281f0"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "FUN_001043a0",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043b0": {
            "called": [
                "FUN_001281f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001043b0",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043c0": {
            "called": [
                "FUN_00128200"
            ],
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001043c0",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043d0": {
            "called": [
                "FUN_00128208"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00109b52",
                "FUN_001088ae",
                "FUN_0010554f"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "FUN_001043d0",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043e0": {
            "called": [
                "FUN_00128210"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001043e0",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043f0": {
            "called": [
                "FUN_00128218"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001043f0",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104400": {
            "called": [
                "FUN_00128220"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104400",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104410": {
            "called": [
                "FUN_00128228"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104410",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104420": {
            "called": [
                "FUN_00128230"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104420",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104430": {
            "called": [
                "FUN_00128238"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "FUN_00104430",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104440": {
            "called": [
                "FUN_00128240"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104440",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104450": {
            "called": [
                "FUN_00128248"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "FUN_00104450",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104460": {
            "called": [
                "FUN_00128250"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "FUN_00104460",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104470": {
            "called": [
                "FUN_00128258"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_00115f50",
                "FUN_0010c7a0",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_00108c86",
                "FUN_00115530",
                "FUN_00104943",
                "FUN_0010b0fa",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00114190",
                "FUN_00115b70",
                "FUN_0010554f",
                "FUN_0010afd5"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104470",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104480": {
            "called": [
                "FUN_00128260"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104480",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104490": {
            "called": [
                "FUN_00128268"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "FUN_00104490",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044a0": {
            "called": [
                "FUN_00128280"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104cc1",
                "FUN_00108d9a"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "FUN_001044a0",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044b0": {
            "called": [
                "FUN_00128288"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_00108a2a",
                "FUN_0010bf86",
                "FUN_0010914e",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010b6ea",
                "FUN_0010554f",
                "FUN_0010871c",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_0010c892",
                "FUN_00108f08",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_00112c1f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00119e70",
                "FUN_0010bf20",
                "FUN_001199d0",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044b0",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044c0": {
            "called": [
                "FUN_00128290"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_001044c0",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044d0": {
            "called": [
                "FUN_00128298"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044d0",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044e0": {
            "called": [
                "FUN_001282a0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "FUN_001044e0",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044f0": {
            "called": [
                "FUN_001282b0"
            ],
            "calling": [
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00116b90",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044f0",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104500": {
            "called": [
                "FUN_001282b8"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "FUN_00104500",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104510": {
            "called": [
                "FUN_001282c0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010d559",
                "FUN_00104943"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_00104510",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104520": {
            "called": [
                "FUN_001282c8"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "FUN_00104520",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104530": {
            "called": [
                "FUN_001282d0"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "FUN_00104530",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104540": {
            "called": [
                "FUN_001282d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00104540",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104550": {
            "called": [
                "FUN_001282e0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "FUN_00104550",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104560": {
            "called": [
                "FUN_001282e8"
            ],
            "calling": [
                "FUN_0010e2f0",
                "FUN_0010e6a8",
                "FUN_0010bba1"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "FUN_00104560",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104570": {
            "called": [
                "FUN_001282f0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "FUN_00104570",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104580": {
            "called": [
                "FUN_001282f8"
            ],
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "FUN_00104580",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104590": {
            "called": [
                "FUN_00128300"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "FUN_00104590",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045a0": {
            "called": [
                "FUN_00128308"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_001199d0",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "FUN_001045a0",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045b0": {
            "called": [
                "FUN_00128310"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "FUN_001045b0",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045c0": {
            "called": [
                "FUN_00128318"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001045c0",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045d0": {
            "called": [
                "FUN_00128320"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001045d0",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045e0": {
            "called": [
                "FUN_00128328"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0",
                "FUN_0011256b",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001045e0",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045f0": {
            "called": [
                "FUN_00128330"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "FUN_001045f0",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104600": {
            "called": [
                "FUN_00128338"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "FUN_00104600",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104610": {
            "called": [
                "FUN_00128340"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "FUN_00104610",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104620": {
            "called": [
                "FUN_00128348"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "FUN_00104620",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104630": {
            "called": [
                "FUN_00128350"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104630",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104640": {
            "called": [
                "FUN_00128358"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104640",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104650": {
            "called": [
                "FUN_00128360"
            ],
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "FUN_00104650",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104660": {
            "called": [
                "FUN_00128370"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104660",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104670": {
            "called": [
                "FUN_00128388"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104670",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104680": {
            "called": [
                "FUN_00128390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104680",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104690": {
            "called": [
                "FUN_00128398"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "FUN_00104690",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046a0": {
            "called": [
                "FUN_001283a0"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "FUN_001046a0",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046b0": {
            "called": [
                "FUN_001283a8"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "FUN_001046b0",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046c0": {
            "called": [
                "FUN_001283b0"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001046c0",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046d0": {
            "called": [
                "FUN_001283b8"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001046d0",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046e0": {
            "called": [
                "FUN_001283c0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001046e0",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046f0": {
            "called": [
                "FUN_001283c8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001046f0",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104700": {
            "called": [
                "FUN_001283d0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104700",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104710": {
            "called": [
                "FUN_001283d8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "FUN_00104710",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104720": {
            "called": [
                "FUN_001283e0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104720",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104730": {
            "called": [
                "FUN_001283e8"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104730",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104740": {
            "called": [
                "FUN_001283f0"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104740",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104750": {
            "called": [
                "FUN_001283f8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "FUN_00104750",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104760": {
            "called": [
                "FUN_00128400"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_00119dd0",
                "FUN_001083b7"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "FUN_00104760",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104770": {
            "called": [
                "FUN_00128408"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104770",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104780": {
            "called": [
                "FUN_00128410"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "FUN_00104780",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104790": {
            "called": [
                "FUN_00128418"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "FUN_00104790",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047a0": {
            "called": [
                "FUN_00128420"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "FUN_001047a0",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047b0": {
            "called": [
                "FUN_00128428"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00115dc0",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "FUN_001047b0",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047c0": {
            "called": [
                "FUN_00128430"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001047c0",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047d0": {
            "called": [
                "FUN_00128438"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "FUN_001047d0",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047e0": {
            "called": [
                "FUN_00128440"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010e8a9",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109dfe",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_00109cf4",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010e918",
                "FUN_0010e9a0",
                "FUN_001125fa",
                "FUN_0010ab4d",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001047e0",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047f0": {
            "called": [
                "FUN_00128448"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "FUN_001047f0",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104800": {
            "called": [
                "FUN_00128450"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104800",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104810": {
            "called": [
                "FUN_00128458"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "FUN_00104810",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104820": {
            "called": [
                "FUN_00128460"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "FUN_00104820",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104830": {
            "called": [
                "FUN_00128470"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "FUN_00104830",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104840": {
            "called": [
                "FUN_00128478"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00115dc0",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "FUN_00104840",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104850": {
            "called": [
                "FUN_00128480"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "FUN_00104850",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104860": {
            "called": [
                "FUN_00128488"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "FUN_00104860",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104870": {
            "called": [
                "FUN_00128490"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "FUN_00104870",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104880": {
            "called": [
                "FUN_00128498"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104880",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104890": {
            "called": [
                "FUN_001284a8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_001199d0",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_0010543c"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104890",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048a0": {
            "called": [
                "FUN_001284b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "FUN_001048a0",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048b0": {
            "called": [
                "FUN_001284b8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001048b0",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048c0": {
            "called": [
                "FUN_001284c0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001048c0",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048d0": {
            "called": [
                "FUN_001284c8"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "FUN_001048d0",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048e0": {
            "called": [
                "FUN_001284d8"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "FUN_001048e0",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048f0": {
            "called": [
                "FUN_001284f0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010551d",
                "FUN_0010b948",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_00116030",
                "FUN_001163d0",
                "FUN_0010e07c",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010abdd",
                "FUN_00116110",
                "FUN_0010e9a0",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_0010a424",
                "FUN_0010afd5",
                "FUN_00116852",
                "FUN_0010c1c6",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_00108863",
                "FUN_001081e9",
                "FUN_0010b0fa",
                "FUN_0010a0e9",
                "FUN_0010e8a9",
                "FUN_0010d559",
                "FUN_00107880",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010dac0",
                "FUN_0010e918",
                "FUN_00114b84",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00104a35"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "FUN_001048f0",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048f8": {
            "called": [
                "FUN_00128500"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "FUN_001048f8",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104900": {
            "called": [
                "FUN_00128508"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "FUN_00104900",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104908": {
            "called": [
                "FUN_001284e0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "FUN_00104908",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104910": {
            "called": [
                "FUN_001284e8"
            ],
            "calling": [
                "FUN_00116b40"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "FUN_00104910",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104918": {
            "called": [
                "FUN_001284f8"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104918",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "FUN_00104920": {
                    "1": "check_invalid_number",
                    "2": "check_number_validity",
                    "3": "print_bad_number_error_message",
                    "4": "handle_bad_number",
                    "5": "print_bad_number_error",
                    "6": "print_error_message"
                },
                "dcgettext": {
                    "1": "get_translated_message",
                    "3": "get_localized_message"
                },
                "fatal": {
                    "1": "exit_with_error",
                    "2": "terminate_program"
                },
                "param_1": {
                    "1": "error_type",
                    "2": "var1",
                    "6": "arg1"
                },
                "param_2": {
                    "1": "number",
                    "2": "var2",
                    "6": "arg2"
                },
                "param_3": {
                    "1": "unused3",
                    "2": "var3",
                    "6": "arg3"
                },
                "param_4": {
                    "1": "unused4",
                    "2": "var4",
                    "6": "arg4"
                },
                "uVar1": {
                    "1": "err_msg",
                    "19": "error_message",
                    "2": "error_msg",
                    "8": "error_string"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_error_message_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = get_localized_message(0,\"%s: bad number: %s\",5);\n                    \n  terminate_program(error_message);\n}\n\n",
            "current_name": "print_error_message_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_error_message_00104920",
                "dcgettext": "get_localized_message",
                "fatal": "terminate_program",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "1": "print_architectures",
                    "2": "print_arch_machines",
                    "3": "print_reverse_strings",
                    "4": "print_arch_mach_info"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "iVar1": {
                    "1": "converted_int",
                    "2": "input_int",
                    "6": "int_value",
                    "7": "default_value"
                },
                "iVar2": {
                    "1": "is_equal",
                    "11": "comparison_result",
                    "2": "arch_index"
                },
                "iVar7": {
                    "1": "arch_mach_value",
                    "12": "arch_mach_index",
                    "2": "arch_mach_counter",
                    "5": "arch_index"
                },
                "iVar9": {
                    "1": "num_arch_mach_in_line",
                    "2": "max_iterations",
                    "3": "start_index"
                },
                "in_RAX": {
                    "1": "binary_path",
                    "2": "input_str",
                    "27": "input_string"
                },
                "lVar3": {
                    "1": "loop_index",
                    "2": "index",
                    "3": "parsed_value",
                    "5": "long_value",
                    "6": "converted_value"
                },
                "lVar8": {
                    "1": "index2",
                    "2": "long_var8",
                    "4": "param_index",
                    "5": "start_index"
                },
                "param_11": {
                    "1": "arch_mach_info",
                    "2": "max_string_length",
                    "3": "param11"
                },
                "param_13": {
                    "1": "string_list",
                    "2": "param_13",
                    "3": "data_array",
                    "4": "data_pointer"
                },
                "param_7": {
                    "1": "max_value",
                    "2": "start_index",
                    "3": "param7"
                },
                "pcVar5": {
                    "1": "arch_name",
                    "2": "printable_arch",
                    "3": "arch_mach_str",
                    "6": "arch_mach",
                    "9": "arch_mach_string"
                },
                "sVar4": {
                    "1": "data_string_length",
                    "18": "string_length",
                    "3": "str_length"
                },
                "uStack000000000000000c": {
                    "1": "stack_var",
                    "4": "indentation_level",
                    "8": "indentation"
                },
                "uVar10": {
                    "1": "counter",
                    "2": "loop_index",
                    "3": "length_counter",
                    "9": "loop_counter"
                },
                "uVar11": {
                    "1": "loop_index",
                    "2": "loop_var2",
                    "3": "arch_mach_offset",
                    "4": "arch_index",
                    "6": "arch_mach_index"
                },
                "uVar6": {
                    "1": "printable_arch",
                    "14": "printable_arch_mach",
                    "2": "arch_mach",
                    "4": "arch_mach_printable"
                },
                "unaff_R15D": {
                    "1": "arch_count",
                    "3": "stack_var",
                    "4": "stack_value"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001045a0",
                "FUN_00104480",
                "FUN_001042a0",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_00104310"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_reverse_arch_mach_00104943(void)\n\n{\n  int default_value;\n  int comparison_result;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_mach_string;\n  undefined8 printable_arch_mach;\n  int arch_mach_index;\n  long start_index;\n  int param7;\n  uint stack_value;\n  ulong loop_counter;\n  uint arch_mach_index;\n  int param7;\n  uint indentation;\n  undefined8 arch_mach_array;\n  long data_pointer;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  param7 = param7;\n  indentation = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    param7 = param7;\n    if (arch_mach_array._4_4_ <= param7) {\n      return;\n    }\n    start_index = (long)param7;\n    arch_mach_index = (default_value - indentation) + -1;\n    converted_value = start_index;\n    do {\n      param7 = (int)converted_value;\n      if (arch_mach_array._4_4_ <= param7) break;\n      string_length = strlen(*(char **)(data_pointer + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (converted_value = start_index * 0x60; ((ulong)(uint)(param7 - param7) + start_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(data_pointer + converted_value));\n    }\n    arch_mach_index = 2;\n    putc(10,stdout);\n    do {\n      arch_mach_string = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      comparison_result = strcmp(arch_mach_string,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)indentation,printable_arch_mach);\n        arch_mach_index = arch_mach_index - 2;\n        converted_value = start_index * 0x60;\n        comparison_result = param7;\n        while (param7 != comparison_result) {\n          arch_mach_string = *(char **)(data_pointer + converted_value);\n          if (*(char *)((long)(char **)(data_pointer + converted_value) + (ulong)arch_mach_index + 8) == '\\0') {\n            string_length = strlen(arch_mach_string);\n            for (loop_counter = string_length & 0xffffffff; (int)loop_counter != 0; loop_counter = (ulong)((int)loop_counter - 1)) {\n              putc(0x2d,stdout);\n            }\n          }\n          else {\n            fputs(arch_mach_string,stdout);\n          }\n          comparison_result = comparison_result + 1;\n          if (param7 != comparison_result) {\n            putc(0x20,stdout);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,stdout);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_reverse_arch_mach_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_reverse_arch_mach_00104943",
                "_stdout": "stdout",
                "iVar1": "default_value",
                "iVar2": "comparison_result",
                "iVar7": "arch_mach_index",
                "iVar9": "param7",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "start_index",
                "param_11": "arch_mach_array",
                "param_13": "data_pointer",
                "param_7": "param7",
                "pcVar5": "arch_mach_string",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation",
                "uVar10": "loop_counter",
                "uVar11": "arch_mach_index",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "*piVar1": {
                    "1": "errno_value"
                },
                "FUN_00104966": {
                    "1": "file_error_handler",
                    "17": "handle_file_error",
                    "2": "check_file_existence",
                    "4": "file_not_found_error"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "non_fatal": {
                    "1": "report_error",
                    "2": "handle_non_fatal_error"
                },
                "piVar1": {
                    "1": "error_location_pointer",
                    "16": "errno_ptr",
                    "2": "errno_location",
                    "6": "error_ptr"
                },
                "uVar2": {
                    "2": "error_string",
                    "25": "error_message",
                    "3": "error_msg"
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = get_error_message(0,\"\\'%s\\': No such file\",5);\n    handle_non_fatal_error(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = get_error_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    handle_non_fatal_error(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "dcgettext": "get_error_message",
                "non_fatal": "handle_non_fatal_error",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "31": "print_supported_targets"
                },
                "__ptr": {
                    "31": "target_list"
                },
                "dcgettext": {
                    "1": "get_translation"
                },
                "fprintf": {
                    "1": "write_formatted"
                },
                "fputc": {
                    "1": "write_character"
                },
                "free": {
                    "1": "deallocate"
                },
                "lVar1": {
                    "1": "target_entry",
                    "2": "target_ptr",
                    "4": "target_id",
                    "7": "current_target"
                },
                "param_1": {
                    "1": "target_value",
                    "2": "target_name",
                    "28": "target"
                },
                "param_2": {
                    "1": "output_stream",
                    "27": "output_file",
                    "3": "file"
                },
                "pcVar2": {
                    "1": "text",
                    "2": "target_string",
                    "24": "message"
                },
                "plVar3": {
                    "1": "target_pointer",
                    "18": "current_target",
                    "2": "target_ptr",
                    "7": "ptr"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_00104350",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)get_translation(0,\"Supported targets:\",5);\n    write_formatted(output_file,message);\n  }\n  else {\n    message = (char *)get_translation(0,\"%s: supported targets:\",5);\n    write_formatted(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    write_formatted(output_file,\" %s\");\n  }\n  write_character(10,output_file);\n  deallocate(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "dcgettext": "get_translation",
                "fprintf": "write_formatted",
                "fputc": "write_character",
                "free": "deallocate",
                "lVar1": "current_target",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "FUN_00104ad6": {
                    "1": "find_section_flag",
                    "19": "parse_section_flags",
                    "3": "find_section_flags",
                    "5": "extract_section_flags"
                },
                "__s": {
                    "1": "current_position",
                    "2": "remaining_flags",
                    "4": "section_flag",
                    "6": "section_name"
                },
                "auVar6": {
                    "1": "return_values",
                    "11": "return_value",
                    "18": "result"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "fatal": {
                    "2": "handle_fatal_error"
                },
                "iVar1": {
                    "1": "comparison",
                    "2": "result",
                    "22": "comparison_result"
                },
                "iVar5": {
                    "1": "comparison_result",
                    "2": "string_length",
                    "3": "section_length",
                    "4": "section_name_length",
                    "5": "length"
                },
                "memcpy": {
                    "1": "copy_memory"
                },
                "memset": {
                    "1": "set_memory"
                },
                "non_fatal": {
                    "2": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "i_var3"
                },
                "param_4": {
                    "1": "param4"
                },
                "pcVar3": {
                    "1": "separator",
                    "2": "comma",
                    "3": "comma_index",
                    "4": "delimiter",
                    "5": "comma_ptr"
                },
                "sVar4": {
                    "1": "substring_length",
                    "2": "name_length",
                    "5": "string_length",
                    "6": "length",
                    "9": "section_length"
                },
                "strlen": {
                    "2": "get_string_length"
                },
                "strncasecmp": {
                    "1": "compare_strings"
                },
                "strncpy": {
                    "2": "copy_string"
                },
                "uVar2": {
                    "1": "err_msg",
                    "14": "error_message",
                    "2": "error"
                },
                "unaff_R14D": {
                    "1": "current_flags",
                    "20": "section_flags",
                    "9": "flags"
                },
                "unaff_R15": {
                    "1": "str",
                    "10": "supported_flags",
                    "11": "section_name",
                    "2": "section"
                },
                "unaff_RBP": {
                    "1": "str",
                    "2": "next_section_flag",
                    "3": "next_section_name",
                    "5": "next_flag"
                },
                "unaff_retaddr": {
                    "29": "return_address"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104290",
                "FUN_00119dd0",
                "FUN_00104270",
                "FUN_001040d0",
                "FUN_00104240",
                "FUN_001045d0",
                "FUN_00104ad6",
                "FUN_00104390",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_flag;\n  char *section;\n  size_t section_length;\n  int length;\n  uint section_flags;\n  char *section_name;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    section = next_flag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(section,0x2c);\n              if (comma_position == (char *)0x0) {\n                section_length = get_string_length(section);\n                length = (int)section_length;\n                next_flag = (char *)0x0;\n              }\n              else {\n                next_flag = comma_position + 1;\n                length = (int)comma_position - (int)section;\n              }\n              section_length = (size_t)length;\n              comparison_result = compare_string_case_insensitive(section_name,section,section_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              section = next_flag;\n            }\n            comparison_result = compare_string_case_insensitive(\"load\",section,section_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            section = next_flag;\n          }\n          comparison_result = compare_string_case_insensitive(\"noload\",section,section_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          section = next_flag;\n        }\n        comparison_result = compare_string_case_insensitive(\"readonly\",section,section_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        section = next_flag;\n      }\n      comparison_result = compare_string_case_insensitive(\"debug\",section,section_length);\n      if (comparison_result == 0) break;\n      comparison_result = compare_string_case_insensitive(\"code\",section,section_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        section = next_flag;\n      }\n      else {\n        comparison_result = compare_string_case_insensitive(\"data\",section,section_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          section = next_flag;\n        }\n        else {\n          comparison_result = compare_string_case_insensitive(\"rom\",section,section_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            section = next_flag;\n          }\n          else {\n            comparison_result = compare_string_case_insensitive(\"exclude\",section,section_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              section = next_flag;\n            }\n            else {\n              comparison_result = compare_string_case_insensitive(\"share\",section,section_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                section = next_flag;\n              }\n              else {\n                comparison_result = compare_string_case_insensitive(\"contents\",section,section_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  section = next_flag;\n                }\n                else {\n                  comparison_result = compare_string_case_insensitive(\"merge\",section,section_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    section = next_flag;\n                  }\n                  else {\n                    comparison_result = compare_string_case_insensitive(\"strings\",section,section_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)allocate_memory((long)(length + 1));\n                      copy_string(comma_position,section,section_length);\n                      comma_position[section_length] = '\\0';\n                      error_message = get_translated_message(0,\"unrecognized section flag `%s\\'\",5);\n                      handle_non_fatal_error(error_message,comma_position);\n                      error_message = get_translated_message(0,\"supported flags: %s\",5);\n                    \n                      handle_fatal_error(error_message,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    section = next_flag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "section",
                "auVar6": "result",
                "dcgettext": "get_translated_message",
                "fatal": "handle_fatal_error",
                "iVar1": "comparison_result",
                "iVar5": "length",
                "non_fatal": "handle_non_fatal_error",
                "pcVar3": "comma_position",
                "sVar4": "section_length",
                "strlen": "get_string_length",
                "strncasecmp": "compare_string_case_insensitive",
                "strncpy": "copy_string",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "section_name",
                "unaff_RBP": "next_flag",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "1": "check_and_update_flags",
                    "2": "check_and_set_permissions",
                    "4": "check_and_set_flags"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "fatal": {
                    "1": "show_fatal_error"
                },
                "in_EAX": {
                    "1": "permission_flags",
                    "11": "flags",
                    "2": "eax",
                    "5": "eax_flags",
                    "7": "eax_value"
                },
                "uVar1": {
                    "1": "error_msg",
                    "23": "error_message"
                },
                "unaff_EBP": {
                    "1": "memory_flags",
                    "2": "permissions",
                    "3": "register_value",
                    "5": "ebp_flags",
                    "9": "ebp_value"
                },
                "unaff_R14": {
                    "1": "address_value",
                    "10": "r14_value",
                    "2": "r14_offset",
                    "3": "memory_address",
                    "4": "data_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_and_set_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = get_error_message(0,\"error: %s both copied and removed\",5);\n                    \n    show_fatal_error(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = get_error_message(0,\"error: %s both sets and alters LMA\",5);\n                    \n    show_fatal_error(error_message);\n  }\n  error_message = get_error_message(0,\"error: %s both sets and alters VMA\",5);\n                    \n  show_fatal_error(error_message);\n}\n\n",
            "current_name": "check_and_set_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "dcgettext": "get_error_message",
                "fatal": "show_fatal_error",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "FUN_00104c36": {
                    "1": "parse_and_ignore_rubbish",
                    "17": "process_lines",
                    "2": "parse_input_lines",
                    "3": "parse_lines",
                    "4": "parse_and_process_lines"
                },
                "bVar4": {
                    "1": "temp_char",
                    "3": "next_char2",
                    "4": "next_character",
                    "8": "next_char"
                },
                "in_CL": {
                    "1": "current_char_value",
                    "10": "current_character",
                    "14": "current_char",
                    "2": "current_byte"
                },
                "in_stack_00000008": {
                    "1": "dcgettext_argument1",
                    "2": "filename",
                    "5": "file_name"
                },
                "in_stack_00000010": {
                    "1": "return_ptr",
                    "2": "result_pointer",
                    "3": "result",
                    "4": "result_ptr",
                    "8": "return_address"
                },
                "pbVar2": {
                    "1": "current_line"
                },
                "pbVar3": {
                    "1": "next_token",
                    "2": "next_position",
                    "3": "next_character",
                    "9": "next_char"
                },
                "pbVar4": {
                    "1": "next_character"
                },
                "pbVar5": {
                    "1": "line",
                    "2": "current_char",
                    "3": "current_position",
                    "4": "line_ptr"
                },
                "ppbVar2": {
                    "1": "found_slot_pointer",
                    "5": "hash_table_slot",
                    "6": "slot"
                },
                "uVar1": {
                    "1": "notification",
                    "4": "error_msg",
                    "9": "error_message"
                },
                "uVar4": {
                    "1": "next_byte"
                },
                "unaff_EBP": {
                    "1": "line_index",
                    "12": "line_count",
                    "13": "line_number",
                    "4": "line_counter"
                },
                "unaff_R13": {
                    "1": "result1",
                    "2": "callback_function",
                    "3": "file_name"
                },
                "unaff_R14": {
                    "1": "end_of_file",
                    "2": "line_ptr",
                    "3": "next_line",
                    "9": "line_end"
                },
                "unaff_R15": {
                    "1": "start_pointer",
                    "2": "line_ptr",
                    "3": "next_line",
                    "8": "line_start"
                },
                "unaff_RBP": {
                    "1": "line_number"
                },
                "unaff_RBX": {
                    "1": "input_buffer_ptr",
                    "2": "line_start",
                    "3": "line_ptr",
                    "5": "line_pointer",
                    "6": "line_buffer",
                    "8": "current_line"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *next_char;\n  byte current_char;\n  byte next_char;\n  byte *current_line;\n  int line_number;\n  byte *current_line;\n  undefined8 return_address;\n  byte *line_end;\n  byte *line_start;\n  undefined8 error_message;\n  undefined8 *return_address;\n  \n  do {\n    current_line = line_start;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = current_line[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_line[6];\n        next_char = current_line + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = next_char[1];\n              next_char = next_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,error_message,line_number);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (line_start < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_start;\n    }\n    line_number = line_number + 1;\n    current_line = current_line;\n    if (line_end[1] == 0) {\n      *return_address = return_address;\n      return;\n    }\n    for (; next_char = *current_line, line_end = current_line, next_char != 10; current_line = current_line + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          next_char = current_line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_line = 0;\n          next_char = current_line + 1;\n          if (current_line[1] == 10) {\n            next_char = current_line + 2;\n            line_end = current_line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_line = 0;\n    if (current_line[1] == 0xd) {\n      line_end = current_line + 1;\n      next_char = current_line + 2;\n    }\n    else {\n      next_char = current_line + 1;\n    }\nLAB_00114553:\n    current_char = *current_line;\n    line_start = current_line;\n    while (current_line = next_char, current_char == 0x20) {\nLAB_00104c3f:\n      current_line = line_start + 1;\n      line_start = line_start + 1;\n      next_char = current_line;\n      current_char = *current_line;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "bVar4": "next_char",
                "in_CL": "current_char",
                "in_stack_00000008": "error_message",
                "in_stack_00000010": "return_address",
                "pbVar2": "current_line",
                "pbVar3": "next_char",
                "pbVar5": "current_line",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "return_address",
                "unaff_R14": "line_end",
                "unaff_R15": "line_start",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "*param_8": {
                    "1": "output"
                },
                "FUN_00104cc1": {
                    "1": "parse_config_file",
                    "14": "parse_lines",
                    "2": "parse_file_lines",
                    "3": "parse_and_process_lines",
                    "7": "process_lines"
                },
                "bVar4": {
                    "1": "next_character",
                    "10": "next_char",
                    "2": "current_char_value",
                    "5": "current_char"
                },
                "dcgettext": {
                    "1": "gettext"
                },
                "htab_find_slot": {
                    "2": "find_slot"
                },
                "in_R10": {
                    "1": "current_position",
                    "2": "current_char",
                    "3": "current_line",
                    "5": "line_start",
                    "6": "line_ptr"
                },
                "non_fatal": {
                    "2": "report_error"
                },
                "param_7": {
                    "1": "line_format",
                    "11": "line_number",
                    "3": "message",
                    "8": "error_message"
                },
                "param_8": {
                    "1": "param_8",
                    "2": "output_param",
                    "6": "result",
                    "8": "output"
                },
                "param_9": {
                    "1": "input_lines",
                    "2": "input_line",
                    "3": "line_buffer",
                    "5": "current_line",
                    "8": "line"
                },
                "pbVar3": {
                    "1": "temp_char",
                    "15": "current_char",
                    "2": "current_character",
                    "3": "current_byte"
                },
                "pbVar5": {
                    "1": "current_character",
                    "2": "current_line_end",
                    "3": "current_line",
                    "4": "line_start"
                },
                "ppbVar2": {
                    "1": "entry_slot",
                    "13": "slot",
                    "2": "slot_ptr",
                    "3": "hash_table_slot"
                },
                "process_lines_00104c36": {
                    "1": "process_empty_line"
                },
                "process_lines_00104d1c": {
                    "1": "process_comment",
                    "2": "process_comment_lines"
                },
                "report_data_00119ed0": {
                    "3": "report_data"
                },
                "uVar1": {
                    "1": "translation",
                    "11": "error_message",
                    "2": "translated_message",
                    "5": "error_msg"
                },
                "unaff_EBP": {
                    "1": "line_index",
                    "11": "line_number",
                    "2": "line_length",
                    "3": "line_counter",
                    "9": "line_count"
                },
                "unaff_R13": {
                    "1": "r13_register",
                    "2": "value",
                    "7": "result"
                },
                "unaff_R14": {
                    "1": "line_ptr",
                    "2": "current_char",
                    "3": "current_line_start"
                },
                "unaff_R15": {
                    "1": "start_line",
                    "2": "end_of_line",
                    "3": "line_start",
                    "4": "line_end"
                },
                "unaff_RBX": {
                    "1": "current_position",
                    "2": "line_end",
                    "3": "line_ptr",
                    "4": "current_line",
                    "7": "line_start"
                }
            },
            "called": [
                "FUN_00104c36",
                "FUN_00104d1c",
                "FUN_00104cc1",
                "FUN_00104240",
                "FUN_00119ed0",
                "FUN_001044a0"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid parse_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *line_start;\n  byte *line_start;\n  int line_number;\n  byte *line_ptr;\n  undefined8 result;\n  byte *line_start;\n  byte *line_end;\n  undefined8 line_number;\n  undefined8 *output;\n  byte *line;\n  \ncode_r0x00104cc1:\n  line = line_ptr;\n  error_message = gettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  report_error(error_message,line_number,line_number);\n  line_start = line_start;\n  line_ptr = line;\nLAB_00114599:\n  do {\n    *line_ptr = 0;\n    if (line_end < line_ptr) {\n      slot = (byte **)find_slot();\n      *slot = line_end;\n    }\n    line_number = line_number + 1;\n    current_char = line_start;\n    if (line_start[1] == 0) {\n      *output = result;\n      return;\n    }\n    for (; next_char = *current_char, line_start = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          line_start = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          line_start = current_char + 1;\n          if (current_char[1] == 10) {\n            line_start = current_char + 2;\n            line_start = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_comment_lines();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      line_start = current_char + 1;\n      line_start = current_char + 2;\n    }\n    else {\n      line_start = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_start;\n    line_end = line_start;\n    while ((next_char == 0x20 || (line_ptr = line_end, next_char == 9))) {\n      line_start = line_end + 1;\n      line_end = line_end + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = line_start;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = line_ptr[1];\n      line_ptr = line_ptr + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = line_ptr[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = line_ptr[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = line_ptr[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = line_ptr[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = line_ptr[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = line_ptr[6];\n      current_char = line_ptr + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "current_name": "parse_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "parse_lines_00104cc1",
                "bVar4": "next_char",
                "dcgettext": "gettext",
                "htab_find_slot": "find_slot",
                "in_R10": "line_ptr",
                "non_fatal": "report_error",
                "param_7": "line_number",
                "param_8": "output",
                "param_9": "line",
                "pbVar3": "current_char",
                "pbVar5": "line_start",
                "ppbVar2": "slot",
                "process_lines_00104d1c": "process_comment_lines",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "result",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "unaff_RBX": "line_start"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "*unaff_R14": {
                    "1": "current_line"
                },
                "*unaff_R15": {
                    "1": "current_position"
                },
                "<original_function_name>": {
                    "1": "process_input_lines"
                },
                "FUN_00104d1c": {
                    "1": "parse_and_ignore_lines",
                    "11": "process_lines",
                    "2": "parse_and_process_lines",
                    "4": "parse_lines",
                    "6": "parse_input_lines"
                },
                "bVar4": {
                    "1": "current_char_value",
                    "12": "current_char",
                    "6": "current_byte"
                },
                "in_stack_00000008": {
                    "1": "user_data",
                    "2": "message_format",
                    "3": "error_msg",
                    "4": "message",
                    "6": "filename"
                },
                "in_stack_00000010": {
                    "1": "return_val",
                    "17": "return_address",
                    "2": "return_addr",
                    "3": "return_value"
                },
                "pbVar2": {
                    "1": "htab_find_slot()"
                },
                "pbVar3": {
                    "1": "rubbish_position",
                    "2": "space_ptr",
                    "4": "next_char"
                },
                "pbVar4": {
                    "1": "temp_char"
                },
                "pbVar5": {
                    "1": "next_line_buffer",
                    "19": "next_line",
                    "2": "next_char",
                    "5": "next_line_ptr"
                },
                "pbVar6": {
                    "1": "scan_char",
                    "2": "line_ptr",
                    "4": "next_char"
                },
                "pbVar7": {
                    "1": "ptr2",
                    "2": "current_line",
                    "6": "next_char"
                },
                "ppbVar2": {
                    "1": "line_slot",
                    "2": "found_slot",
                    "3": "hash_slot",
                    "4": "slot_ptr",
                    "5": "hash_table_slot",
                    "8": "slot"
                },
                "uVar1": {
                    "1": "translation",
                    "12": "error_message",
                    "2": "message",
                    "4": "err_msg",
                    "5": "error_string"
                },
                "unaff_EBP": {
                    "1": "count",
                    "15": "line_count",
                    "2": "counter",
                    "5": "line_number",
                    "6": "line_counter"
                },
                "unaff_R13": {
                    "1": "msg",
                    "2": "file_name",
                    "4": "filename",
                    "6": "error_message"
                },
                "unaff_R14": {
                    "1": "line_pointer",
                    "18": "current_line",
                    "2": "line",
                    "3": "line_buffer",
                    "4": "line_start"
                },
                "unaff_R15": {
                    "1": "current_position",
                    "17": "current_char",
                    "2": "line_start",
                    "4": "line_ptr"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *next_char;\n  byte current_char;\n  byte *next_line;\n  int line_count;\n  byte *next_char;\n  undefined8 error_message;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char = *current_line;\n    next_char = current_line;\n    if (current_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_char = *current_char;\n    while ((current_char == 0x20 || (next_char = current_char, current_char == 9))) {\n      next_char = current_char + 1;\n      current_char = current_char + 1;\n      current_char = *next_char;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = next_char[1];\n      next_char = next_char + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = next_char[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = next_char[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = next_char[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = next_char[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = next_char[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = next_char[6];\n        next_char = next_char + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = next_char[1];\n              next_char = next_char + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,filename,line_count);\n      }\n    }\nLAB_00114599:\n    *next_char = 0;\n    if (current_char < next_char) {\n      slot = (byte **)htab_find_slot();\n      *slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = error_message;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "bVar4": "current_char",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address",
                "pbVar2": "htab_find_slot()",
                "pbVar3": "next_char",
                "pbVar5": "next_line",
                "pbVar6": "next_char",
                "pbVar7": "next_char",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "error_message",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUN_00104d25": {
                    "1": "initialize_and_display_message",
                    "2": "initialize_and_print_error_message",
                    "4": "initialize",
                    "5": "initialize_and_print_error",
                    "7": "initialize_and_remove_directory",
                    "8": "initialize_program"
                },
                "error_code1": {
                    "1": "error_code1",
                    "3": "code1"
                },
                "error_code2": {
                    "1": "error_code2",
                    "3": "code2"
                },
                "error_code3": {
                    "1": "error_code3",
                    "3": "code3"
                },
                "error_code4": {
                    "1": "error_code4",
                    "3": "code4"
                },
                "param_7": {
                    "1": "error_code",
                    "11": "error_message",
                    "2": "param",
                    "3": "message_param",
                    "4": "message",
                    "6": "unused_param"
                },
                "print_error_message_001126c0": {
                    "31": "print_error_message"
                },
                "remove_directory_00114b84": {
                    "28": "remove_directory",
                    "3": "delete_directory"
                }
            },
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_program_00104d25(void)\n\n{\n  undefined8 error_message;\n  \n  DAT_00127a40 = 1;\n  bfd_nonfatal_message(0,error_message,0,0);\n  remove_directory();\n  return;\n}\n\n",
            "current_name": "initialize_program_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_program_00104d25",
                "param_7": "error_message",
                "remove_directory_00114b84": "remove_directory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "*param_10": {
                    "1": "output_file_path"
                },
                "*param_11": {
                    "1": "format"
                },
                "*param_19": {
                    "1": "file_size"
                },
                "*param_7": {
                    "1": "input_file_path"
                },
                "*param_8": {
                    "1": "bytes_written"
                },
                "*param_9": {
                    "1": "temp_dir_path"
                },
                "FUN_00104ea2": {
                    "1": "copy_object",
                    "2": "copy_and_extract_archive",
                    "7": "copy_archive",
                    "9": "copy_archive_files"
                },
                "bVar17": {
                    "1": "negative_flag",
                    "2": "byte_value",
                    "3": "byte_var"
                },
                "cVar1": {
                    "1": "temp_char",
                    "2": "copy_successful",
                    "3": "status",
                    "5": "success"
                },
                "code_r0x00104ea2": {
                    "1": "copy_files_loop"
                },
                "copy_archive_001052a2": {
                    "3": "copy_archive"
                },
                "create_temp_directory_0011a0e0": {
                    "2": "create_temp_directory"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "get_formatted_string_001125fa": {
                    "3": "get_formatted_string"
                },
                "iVar2": {
                    "1": "bfd_arch",
                    "6": "architecture"
                },
                "in_stack_00000030": {
                    "1": "unknown",
                    "2": "unknown_flag"
                },
                "lVar12": {
                    "1": "tempdir",
                    "2": "remaining_bytes",
                    "3": "bytes_remaining",
                    "6": "file_size",
                    "8": "remaining_size"
                },
                "lVar13": {
                    "1": "temp_dir_path"
                },
                "lVar14": {
                    "1": "bytes_to_write",
                    "2": "chunk_size",
                    "3": "read_size",
                    "9": "bytes_written"
                },
                "lVar15": {
                    "1": "num_times_set"
                },
                "lVar5": {
                    "1": "read_result",
                    "14": "bytes_read",
                    "3": "bytes_written"
                },
                "non_fatal_00119d40": {
                    "1": "non_fatal_error_message"
                },
                "param_1": {
                    "1": "param_7"
                },
                "param_10": {
                    "1": "archived_files_param",
                    "2": "input_file_path"
                },
                "param_11": {
                    "1": "open_flags",
                    "2": "output_format",
                    "5": "mode",
                    "6": "open_mode"
                },
                "param_18": {
                    "1": "file_mode",
                    "14": "file_permissions",
                    "2": "permissions",
                    "3": "permission",
                    "6": "file_permission"
                },
                "param_19": {
                    "1": "input_file_size",
                    "15": "file_size",
                    "2": "archive_size"
                },
                "param_2": {
                    "1": "param_8"
                },
                "param_3": {
                    "1": "temp_file_path_ptr"
                },
                "param_4": {
                    "1": "input_path_ptr"
                },
                "param_7": {
                    "1": "output_file_path_ptr",
                    "2": "output_path",
                    "3": "input_file"
                },
                "param_8": {
                    "1": "temp_dir_info_ptr",
                    "2": "file_size",
                    "3": "temp_dir_ptr"
                },
                "param_9": {
                    "1": "temp_dir_path_ptr",
                    "2": "tempdir_path",
                    "3": "temp_directory",
                    "4": "temp_directory_path",
                    "8": "temp_dir_path"
                },
                "pcVar10": {
                    "1": "member_name",
                    "13": "error_message",
                    "2": "archive_file_name"
                },
                "pcVar13": {
                    "1": "temp_code_pointer",
                    "12": "close_function",
                    "2": "bfd_close_func"
                },
                "pcVar15": {
                    "1": "pathname",
                    "2": "file_path"
                },
                "pcVar6": {
                    "1": "archived_file_name"
                },
                "pcVar7": {
                    "1": "path_ptr",
                    "2": "filename",
                    "6": "current_char"
                },
                "pcVar8": {
                    "1": "error_msg"
                },
                "piVar9": {
                    "1": "error_ptr",
                    "6": "errno_location",
                    "7": "error_number"
                },
                "ppcVar10": {
                    "1": "archived_file"
                },
                "ppcVar15": {
                    "1": "current_path"
                },
                "ppcVar3": {
                    "1": "archived_files_param",
                    "2": "current_file",
                    "5": "archived_file"
                },
                "ppcVar4": {
                    "1": "archived_file_path"
                },
                "ppcVar5": {
                    "1": "error_message_ptr"
                },
                "ppcVar6": {
                    "1": "temp_char_pointer_pointer_2",
                    "2": "bfd_handle",
                    "4": "archive_file",
                    "7": "output_file"
                },
                "ppvVar4": {
                    "1": "buffer"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "print_error_message_0011a110": {
                    "3": "print_error_message"
                },
                "psVar16": {
                    "1": "unaff_rbp",
                    "3": "file_stat"
                },
                "puVar8": {
                    "1": "archive_copy_info",
                    "2": "temp_file_info",
                    "3": "temp_dir_info"
                },
                "pvVar4": {
                    "1": "temp_memory",
                    "3": "temp_buffer",
                    "7": "buffer"
                },
                "remove_directory_00114b84": {
                    "2": "remove_directory"
                },
                "report_data_00119ed0": {
                    "1": "report_data"
                },
                "set_file_time_0011a350": {
                    "3": "set_file_time"
                },
                "uVar11": {
                    "1": "translation",
                    "2": "translated_message",
                    "3": "error_string",
                    "6": "error_message"
                },
                "unaff_EBX": {
                    "1": "error_stat",
                    "2": "internal_stat_error",
                    "3": "stat_result",
                    "7": "stat_error"
                },
                "unaff_R12": {
                    "1": "archive_filename",
                    "2": "temp_dir_path",
                    "4": "archive_path"
                },
                "unaff_R13": {
                    "1": "temp_dir_node",
                    "2": "temp_dir_info",
                    "4": "temp_dir_list"
                },
                "unaff_R15": {
                    "1": "archived_files_list",
                    "2": "archived_file_struct",
                    "3": "archive_file",
                    "4": "archived_files"
                },
                "unaff_RBP": {
                    "1": "input_file_info",
                    "3": "file_stats",
                    "4": "stat_buffer",
                    "5": "file_info",
                    "6": "file_stat"
                },
                "unaff_retaddr": {
                    "1": "unaffected_retaddr",
                    "21": "return_address"
                },
                "xmm0": {
                    "1": "format_path"
                }
            },
            "called": [
                "FUN_00104820",
                "FUN_00104ea2",
                "FUN_00104870",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104690",
                "FUN_001040c0",
                "FUN_00104810",
                "FUN_001040b0",
                "FUN_00104908",
                "FUN_00104900",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_0011a0e0",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_001043d0",
                "FUN_001044f0",
                "FUN_001284e0",
                "FUN_0011a110",
                "FUN_00104890",
                "FUN_00104320",
                "FUN_001042a0",
                "FUN_00128508",
                "FUN_001048e0",
                "FUN_001048f0",
                "FUN_001052a2",
                "FUN_00114b84",
                "FUN_001125fa",
                "FUN_0011a350",
                "FUN_00104530",
                "FUN_001046d0",
                "FUN_001041f0",
                "FUN_00104230"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid copy_archive_files_00104ea2(void)\n\n{\n  char success;\n  int result;\n  char **archived_file;\n  void *buffer;\n  long bytes_read;\n  char **output_file;\n  char *current_char;\n  undefined8 *temp_dir;\n  int *error_number;\n  char *error_message;\n  undefined8 error_message;\n  long remaining_size;\n  code *close_function;\n  long bytes_written;\n  int stat_error;\n  stat *file_stat;\n  char *file_path;\n  stat *file_stat;\n  char *archive_path;\n  undefined8 *temp_dir_list;\n  char **archived_files;\n  byte byte_var;\n  undefined8 return_address;\n  undefined8 *input_file;\n  long *temp_dir_ptr;\n  char *temp_dir_path;\n  undefined8 *input_path;\n  undefined8 open_mode;\n  undefined8 unknown_flag;\n  uint file_permissions;\n  long file_size;\n  \n  byte_var = 0;\ncopy_files_loop:\n  output_file = (char **)bfd_openw(archive_path,open_mode);\n  if (output_file == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archive_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    success = copy_object(archived_files,output_file,return_address);\n    if (success == '\\0') {\n      result = bfd_get_arch(archived_files);\n      if (result == 0) goto LAB_00104d75;\n      success = bfd_close_all_done(output_file);\n      if (success != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    success = bfd_close(output_file);\n    output_file = archived_files;\n    if (success == '\\0') {\n      bfd_nonfatal_message(archive_path,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (stat_error == 0)) {\n      set_times(archive_path,file_stat);\n    }\n    remaining_size = bfd_openr(archive_path,open_mode);\n    temp_dir_list[2] = remaining_size;\n    *temp_dir_ptr = remaining_size;\n    temp_dir_ptr = (long *)(remaining_size + 0xf0);\n    archived_files = (char **)bfd_openr_next_archived_file(input_path,output_file);\n    bfd_close(output_file);\n    while ((DAT_00127a40 == 0 && (archived_files != (char **)0x0))) {\n      error_message = *archived_files;\n      current_char = error_message;\n      if (*error_message == '/') {\nLAB_0010527d:\n        error_message = get_translated_string(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(error_message,error_message);\n        goto LAB_00104e93;\n      }\n      while (*current_char != '\\0') {\n        file_path = current_char;\n        if ((*current_char == '.') && (file_path = current_char + 1, current_char[1] == '.')) {\n          file_path = current_char + 2;\n          if ((current_char[2] == '\\0') || (current_char[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*file_path != '\\0' && (*file_path != '/')); file_path = file_path + 1) {\n        }\n        current_char = file_path;\n        if (*file_path == '/') {\n          copy_archive();\n          return;\n        }\n      }\n      file_stat = (stat *)&stack0x00000050;\n      archive_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      result = stat(archive_path,file_stat);\n      temp_dir = temp_dir_list;\n      if (-1 < result) {\n        remaining_size = make_tempdir(archive_path);\n        free(archive_path);\n        if (remaining_size == 0) {\n          error_number = __errno_location();\n          error_message = strerror(*error_number);\n          error_message = get_translated_string(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(error_message,error_message);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)xmalloc(0x18);\n        error_message = *archived_files;\n        *temp_dir = temp_dir_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = remaining_size;\n        archive_path = (char *)concat(remaining_size,&DAT_0011b47d,error_message);\n      }\n      stat_error = 0;\n      if (DAT_001279eb != '\\0') {\n        file_stat = file_stat;\n        for (remaining_size = 0x24; remaining_size != 0; remaining_size = remaining_size + -1) {\n          *(undefined4 *)&file_stat->st_dev = 0;\n          file_stat = (stat *)((long)file_stat + (ulong)byte_var * -8 + 4);\n        }\n        output_file = (char **)archived_files[0x1d];\n        if ((char **)archived_files[0x1d] == (char **)0x0) {\n          output_file = archived_files;\n        }\n        stat_error = (**(code **)(output_file[1] + 0x1e8))(archived_files,file_stat);\n        if (stat_error != 0) {\n          error_message = *archived_files;\n          error_message = get_translated_string(0,\"internal stat error on %s\",5);\n          non_fatal(error_message,error_message);\n        }\n      }\n      temp_dir_list = (undefined8 *)xmalloc(0x18);\n      temp_dir_list[1] = archive_path;\n      *temp_dir_list = temp_dir;\n      temp_dir_list[2] = 0;\n      success = bfd_check_format(archived_files,1);\n      if (success != '\\0') {\n        if (unknown_flag._7_1_ != '\\0') goto copy_files_loop;\n        output_file = (char **)bfd_openw(archive_path,*(undefined8 *)archived_files[1]);\n        if (output_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = get_translated_string(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,archived_files,0,error_message);\n      output_file = (char **)bfd_openw(archive_path,open_mode);\n      if (output_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file = (char **)archived_files[0x1d];\n      if ((char **)archived_files[0x1d] == (char **)0x0) {\n        archived_file = archived_files;\n      }\n      result = (**(code **)(archived_file[1] + 0x1e8))(archived_files);\n      remaining_size = file_size;\n      if (result == 0) {\n        if (file_size < 0) {\n          bfd_get_archive_filename(archived_files);\n          error_message = get_translated_string(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(error_message);\n        }\n        else {\n          result = bfd_seek(archived_files,0,0);\n          if (result == 0) {\n            if (DAT_001279e9 != '\\0') {\n              error_message = *output_file;\n              error_message = bfd_get_archive_filename(archived_files);\n              current_char = (char *)get_translated_string(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(current_char,error_message,error_message);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remaining_size == 0) {\n                chmod(*output_file,file_permissions | 0x100);\n                free(buffer);\n                success = bfd_close_all_done(output_file);\n                output_file = archived_files;\n                if (success == '\\0') {\n                  bfd_nonfatal_message(archive_path,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (remaining_size < 0x2001) {\n                bytes_written = remaining_size;\n              }\n              bytes_read = bfd_bread(buffer,bytes_written,archived_files);\n              archived_file = archived_files;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,bytes_written,output_file), archived_file = output_file, bytes_written != bytes_read))\n              break;\n              remaining_size = remaining_size - bytes_written;\n            }\n            bfd_nonfatal_message(0,archived_file,0,0);\n            free(buffer);\n          }\n          else {\n            error_message = bfd_get_archive_filename(archived_files);\n            bfd_nonfatal(error_message);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,archived_files,0,0);\n      }\n      success = bfd_close_all_done(output_file);\n      if (success == '\\0') {\n        bfd_nonfatal_message(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archive_path);\n      DAT_00127a40 = 1;\n    }\n    *temp_dir_ptr = 0;\n    buffer = (void *)xstrdup(*input_file);\n    if (DAT_00127a40 == 0) {\n      close_function = bfd_close;\n    }\n    else {\n      close_function = bfd_close_all_done;\n    }\n    success = (*close_function)(input_file);\n    if (success == '\\0') {\n      DAT_00127a40 = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*input_path);\n    success = bfd_close(input_path);\n    if (success == '\\0') {\n      DAT_00127a40 = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (temp_dir_list != (undefined8 *)0x0) {\n    if (temp_dir_list[2] == 0) {\n      rmdir((char *)temp_dir_list[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_dir_list[1]);\n    }\n    free((void *)temp_dir_list[1]);\n    temp_dir = (undefined8 *)*temp_dir_list;\n    free(temp_dir_list);\n    temp_dir_list = temp_dir;\n  }\n  rmdir(temp_dir_path);\n  free(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "copy_archive_files_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "copy_archive_files_00104ea2",
                "bVar17": "byte_var",
                "cVar1": "success",
                "code_r0x00104ea2": "copy_files_loop",
                "copy_archive_001052a2": "copy_archive",
                "dcgettext": "get_translated_string",
                "iVar2": "result",
                "in_stack_00000030": "unknown_flag",
                "lVar12": "remaining_size",
                "lVar14": "bytes_written",
                "lVar5": "bytes_read",
                "param_1": "param_7",
                "param_10": "input_path",
                "param_11": "open_mode",
                "param_18": "file_permissions",
                "param_19": "file_size",
                "param_7": "input_file",
                "param_8": "temp_dir_ptr",
                "param_9": "temp_dir_path",
                "pcVar10": "error_message",
                "pcVar13": "close_function",
                "pcVar15": "file_path",
                "pcVar6": "archived_file_name",
                "pcVar7": "current_char",
                "piVar9": "error_number",
                "ppcVar3": "archived_file",
                "ppcVar6": "output_file",
                "psVar16": "file_stat",
                "puVar8": "temp_dir",
                "pvVar4": "buffer",
                "uVar11": "error_message",
                "unaff_EBX": "stat_error",
                "unaff_R12": "archive_path",
                "unaff_R13": "temp_dir_list",
                "unaff_R15": "archived_files",
                "unaff_RBP": "file_stat",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "DAT_001279eb": {
                    "1": "dat_001279eb"
                },
                "FUN_001052a2": {
                    "1": "copy_archive_to_temp_dir",
                    "12": "copy_archive",
                    "2": "extract_and_copy_archive_member",
                    "3": "copy_archive_files",
                    "4": "extract_and_copy_archive"
                },
                "__errno_location": {
                    "1": "get_location_of_errno"
                },
                "__format": {
                    "1": "__format",
                    "3": "error_message_format",
                    "4": "error_msg_format",
                    "8": "format_string"
                },
                "bVar18": {
                    "1": "success_flag",
                    "2": "temp_byte",
                    "3": "byte_var18",
                    "4": "byte_var",
                    "5": "flag"
                },
                "byte bVar18": {
                    "1": "zero_byte"
                },
                "cVar1": {
                    "1": "format_result",
                    "2": "format_recognized",
                    "3": "char_var1",
                    "4": "char_var",
                    "6": "format_valid"
                },
                "char **ppcVar11": {
                    "1": "archive_file_pointer"
                },
                "char **ppcVar4": {
                    "1": "archive_file_name"
                },
                "char **unaff_R15": {
                    "1": "archive_structure_pointer"
                },
                "char *__format": {
                    "1": "format_string"
                },
                "char *in_stack_00000018": {
                    "1": "temp_dir_name"
                },
                "char *param_3": {
                    "1": "param_3"
                },
                "char *pcVar10": {
                    "1": "path_pointer"
                },
                "char *pcVar16": {
                    "1": "current_path_char"
                },
                "char cVar1": {
                    "1": "current_char"
                },
                "code *pcVar14": {
                    "1": "close_function_pointer"
                },
                "concat": {
                    "1": "concatenate_strings"
                },
                "dcgettext": {
                    "1": "get_translated_string"
                },
                "iVar2": {
                    "1": "format_result",
                    "3": "int_var2",
                    "4": "result",
                    "6": "arch_type"
                },
                "iVar3": {
                    "1": "var2",
                    "21": "stat_result",
                    "3": "int_var2"
                },
                "in_RAX": {
                    "1": "file_path_len",
                    "2": "in_register_ax",
                    "3": "in_rax"
                },
                "in_stack_00000008": {
                    "1": "input_filename_ptr",
                    "2": "input_file"
                },
                "in_stack_00000010": {
                    "1": "archive_file_handle",
                    "2": "current_file"
                },
                "in_stack_00000018": {
                    "1": "stack_param",
                    "13": "temp_dir_path",
                    "3": "temp_dir_name"
                },
                "in_stack_00000020": {
                    "1": "arch_filename_ptr"
                },
                "in_stack_00000028": {
                    "1": "stack_var",
                    "2": "file_mode",
                    "4": "open_mode"
                },
                "in_stack_00000030": {
                    "1": "stack_var30",
                    "2": "unknown_format_flag",
                    "3": "unknown_flag"
                },
                "in_stack_000000f8": {
                    "1": "stack_var7",
                    "11": "file_permissions",
                    "2": "permission_flags",
                    "3": "file_permission"
                },
                "in_stack_00000110": {
                    "1": "copy_buffer_size",
                    "3": "total_file_size",
                    "4": "file_count",
                    "6": "file_size"
                },
                "int *piVar8": {
                    "1": "errno_location"
                },
                "int iVar2": {
                    "1": "result"
                },
                "int iVar3": {
                    "1": "stat_result"
                },
                "lVar12": {
                    "1": "temp_dir_len",
                    "11": "file_size",
                    "2": "temp_dir_size",
                    "3": "long_var12"
                },
                "lVar15": {
                    "1": "chunk_size",
                    "3": "long_var3",
                    "4": "bytes_remaining"
                },
                "lVar5": {
                    "1": "read_bytes",
                    "2": "read_size",
                    "3": "long_var5",
                    "9": "bytes_read"
                },
                "long *in_stack_00000010": {
                    "1": "current_archive_pointer"
                },
                "long in_RAX": {
                    "1": "current_char_position"
                },
                "long in_stack_00000110": {
                    "1": "stat_buffer_length"
                },
                "long lVar12": {
                    "1": "temp_dir_result"
                },
                "long lVar15": {
                    "1": "buffer_length"
                },
                "long lVar5": {
                    "1": "bytes_read"
                },
                "make_tempdir": {
                    "1": "create_temporary_directory"
                },
                "non_fatal": {
                    "1": "non_fatal_error"
                },
                "param_1": {
                    "12": "param1",
                    "16": "param_1",
                    "2": "param"
                },
                "param_2": {
                    "1": "param",
                    "12": "param2",
                    "17": "param_2"
                },
                "param_3": {
                    "1": "filename",
                    "10": "param3",
                    "2": "archive_file",
                    "3": "pathname"
                },
                "pcVar10": {
                    "1": "path_ptr",
                    "11": "current_char",
                    "7": "current_path"
                },
                "pcVar14": {
                    "1": "close_all_or_close",
                    "2": "pointer_code_var14",
                    "3": "bfd_close_func",
                    "9": "close_function"
                },
                "pcVar16": {
                    "1": "ch",
                    "2": "current_char",
                    "3": "next_path",
                    "5": "next_char"
                },
                "piVar8": {
                    "1": "int_ptr8",
                    "2": "error_code",
                    "3": "error_num",
                    "8": "errno_ptr"
                },
                "ppcVar11": {
                    "1": "current_archive",
                    "2": "pointer_pointer_char_var11"
                },
                "ppcVar11[0x1e8]": {
                    "1": "pointer_to_string_array2[0x1e8]"
                },
                "ppcVar11[1]": {
                    "1": "pointer_to_string_array2[1]"
                },
                "ppcVar4": {
                    "1": "stat_args",
                    "2": "arch_ptr",
                    "3": "file_list"
                },
                "press_enter": {
                    "1": "wait_for_enter_key_press"
                },
                "psVar17": {
                    "1": "st_buffer",
                    "2": "file_stat",
                    "5": "stat_buffer",
                    "7": "stat_struct"
                },
                "puVar7": {
                    "1": "temp_dir_pointer",
                    "2": "pointer_u_var7",
                    "3": "tempdir_ptr",
                    "4": "temp_dir_info",
                    "5": "temp_dir_ptr"
                },
                "pvVar13": {
                    "1": "temp_buffer",
                    "15": "buffer",
                    "2": "ptr_var",
                    "5": "buffer_ptr"
                },
                "stack0x00000050": {
                    "1": "stack_variable1"
                },
                "stack0x000000e0": {
                    "1": "stack_variable2"
                },
                "stackVariable3": {
                    "1": "stack_variable3"
                },
                "stackVariable4": {
                    "1": "stack_variable4"
                },
                "stackVariable5": {
                    "1": "stack_variable5"
                },
                "stackVariable6": {
                    "1": "stack_variable6"
                },
                "stat": {
                    "1": "get_stat"
                },
                "stat *psVar17": {
                    "1": "stat_structure"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar6": {
                    "1": "temp_dir_name",
                    "2": "u_var6",
                    "3": "format_string"
                },
                "uVar9": {
                    "1": "u_qualifier2",
                    "2": "u_var9",
                    "3": "err_msg",
                    "7": "error_msg",
                    "9": "error_message"
                },
                "uint in_stack_000000f8": {
                    "1": "file_permissions"
                },
                "unaff_R14": {
                    "1": "dir_ptr",
                    "2": "temp_file_info",
                    "3": "temp_files"
                },
                "unaff_R15": {
                    "1": "archive_ptr_ptr",
                    "3": "archive_file"
                },
                "unaff_retaddr": {
                    "1": "unaff_ret_addr",
                    "18": "return_address",
                    "2": "unaffected_return_address",
                    "3": "return_addr",
                    "4": "ret_addr"
                },
                "undefined8 *in_stack_00000008": {
                    "1": "input_archive_name"
                },
                "undefined8 *in_stack_00000020": {
                    "1": "current_file_pointer"
                },
                "undefined8 *puVar7": {
                    "1": "temp_dir_pointer"
                },
                "undefined8 *unaff_R14": {
                    "1": "temp_dir_structure_pointer"
                },
                "undefined8 in_stack_00000028": {
                    "1": "flags"
                },
                "undefined8 in_stack_00000030": {
                    "1": "unknown_flag"
                },
                "undefined8 param_1": {
                    "1": "param_1"
                },
                "undefined8 param_2": {
                    "1": "param_2"
                },
                "undefined8 uVar6": {
                    "1": "error_message"
                },
                "undefined8 uVar9": {
                    "1": "error_string"
                },
                "undefined8 unaff_retaddr": {
                    "1": "return_address"
                },
                "void *pvVar13": {
                    "1": "buffer_pointer"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid copy_archive_001052a2(undefined8 param_1,undefined8 param_2,char *param3)\n\n{\n  char format_valid;\n  int arch;\n  int stat_result;\n  char **file_list;\n  long bytes_read;\n  undefined8 format_string;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  undefined8 error_message;\n  long file_descriptor;\n  char *current_char;\n  char **archive_file_ptr;\n  long file_size;\n  void *buffer;\n  code *close_function;\n  long bytes_to_read;\n  char *next_char;\n  get_stat *stat_struct;\n  undefined8 *temp_files;\n  char **archive_ptr;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *param_4;\n  long *current_file;\n  char *temp_dir_path;\n  undefined8 *second_file;\n  undefined8 output_format;\n  undefined8 unknown_flag;\n  uint file_permissions;\n  long file_size;\n  \n  flag = 0;\n  current_char = (char *)(file_descriptor + 1);\n  do {\n    if (*current_char == '/') {\n      copy_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concatenate_strings(temp_dir_path,&DAT_0011b47d);\n      stat_result = get_stat(current_char,(get_stat *)&stack_variable1);\n      temp_dir = temp_files;\n      if (-1 < stat_result) {\n        file_size = create_temporary_directory(current_char);\n        free(current_char);\n        if (file_size == 0) {\n          errno_ptr = get_location_of_errno();\n          current_char = get_error_string(*errno_ptr);\n          error_message = get_translated_string(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal_error(error_message,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)allocate_memory(0x18);\n        current_char = *archive_ptr;\n        *temp_dir = temp_files;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)concatenate_strings(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_struct = (get_stat *)&stack_variable1;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_struct->st_dev = 0;\n          stat_struct = (get_stat *)((long)stat_struct + (ulong)flag * -8 + 4);\n        }\n        archive_file_ptr = (char **)archive_ptr[0x1d];\n        if ((char **)archive_ptr[0x1d] == (char **)0x0) {\n          archive_file_ptr = archive_ptr;\n        }\n        stat_result = (**(code **)(pointer_to_string_array2[1] + 0x1e8))(archive_ptr,(get_stat *)&stack_variable1);\n        if (stat_result != 0) {\n          next_char = *archive_ptr;\n          error_message = get_translated_string(0,\"internal get_stat error on %s\",5);\n          non_fatal_error(error_message,next_char);\n        }\n      }\n      temp_files = (undefined8 *)allocate_memory(0x18);\n      temp_files[1] = current_char;\n      *temp_files = temp_dir;\n      temp_files[2] = 0;\n      format_valid = bfd_check_format(archive_ptr,1);\n      if (format_valid == '\\0') {\n        error_message = get_translated_string(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archive_ptr,0,error_message);\n        archive_file_ptr = (char **)bfd_openw(current_char,output_format);\n        if (archive_file_ptr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        file_list = (char **)archive_ptr[0x1d];\n        if ((char **)archive_ptr[0x1d] == (char **)0x0) {\n          file_list = archive_ptr;\n        }\n        arch = (**(code **)(file_list[1] + 0x1e8))(archive_ptr,&stack_variable2);\n        file_size = file_size;\n        if (arch == 0) {\n          if (file_size < 0) {\n            error_message = bfd_get_archive_filename(archive_ptr);\n            format_string = get_translated_string(0,\"get_stat returns negative size for `%s\\'\",5);\n            non_fatal_error(format_string,error_message);\n          }\n          else {\n            arch = bfd_seek(archive_ptr,0,0);\n            if (arch == 0) {\n              if (DAT_001279e9 != '\\0') {\n                next_char = *archive_file_ptr;\n                error_message = bfd_get_archive_filename(archive_ptr);\n                format_string = (char *)get_translated_string(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format_string,error_message,next_char);\n              }\n              buffer = (void *)allocate_memory(0x2000);\n              for (; file_size != 0; file_size = file_size - bytes_to_read) {\n                bytes_to_read = 0x2000;\n                if (file_size < 0x2001) {\n                  bytes_to_read = file_size;\n                }\n                bytes_read = bfd_bread(buffer,bytes_to_read,archive_ptr);\n                file_list = archive_ptr;\n                if ((bytes_to_read != bytes_read) ||\n                   (bytes_read = bfd_bwrite(buffer,bytes_to_read,archive_file_ptr), file_list = archive_file_ptr, bytes_to_read != bytes_read\n                   )) {\n                  bfd_nonfatal_message(0,file_list,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archive_file_ptr,file_permissions | 0x100);\n              free(buffer);\n              format_valid = bfd_close_all_done(archive_file_ptr);\n              if (format_valid == '\\0') {\n                bfd_nonfatal_message(current_char,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_message = bfd_get_archive_filename(archive_ptr);\n            bfd_nonfatal(error_message);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archive_ptr,0,0);\n        }\nLAB_00104f00:\n        format_valid = bfd_close_all_done(archive_file_ptr);\n        if (format_valid == '\\0') {\n          bfd_nonfatal_message(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_char);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (unknown_flag._7_1_ == '\\0') {\n          archive_file_ptr = (char **)bfd_openw(current_char,*(undefined8 *)archive_ptr[1]);\n        }\n        else {\n          archive_file_ptr = (char **)bfd_openw(current_char,output_format);\n        }\n        if (archive_file_ptr == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_valid = copy_object(archive_ptr,archive_file_ptr,return_address);\n        if (format_valid == '\\0') {\n          arch = bfd_get_arch(archive_ptr);\n          if (arch == 0) goto LAB_00104d75;\n          format_valid = bfd_close_all_done(archive_file_ptr);\n          if (format_valid == '\\0') {\n            bfd_nonfatal_message(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_valid = bfd_close(archive_file_ptr);\n        if (format_valid == '\\0') {\n          bfd_nonfatal_message(current_char,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (stat_result == 0)) {\n          set_times(current_char,(get_stat *)&stack_variable1);\n        }\n        file_size = bfd_openr(current_char,output_format);\n        temp_files[2] = file_size;\n        *current_file = file_size;\n        current_file = (long *)(file_size + 0xf0);\n        archive_file_ptr = (char **)bfd_openr_next_archived_file(second_file,archive_ptr);\n        bfd_close(archive_ptr);\n        archive_ptr = archive_file_ptr;\n      }\n      if ((DAT_00127a40 != 0) || (archive_ptr == (char **)0x0)) {\n        *current_file = 0;\n        buffer = (void *)xstrdup(*param_4);\n        if (DAT_00127a40 == 0) {\n          close_function = bfd_close;\n        }\n        else {\n          close_function = bfd_close_all_done;\n        }\n        format_valid = (*close_function)(param_4);\n        if (format_valid == '\\0') {\n          DAT_00127a40 = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*second_file);\n        format_valid = bfd_close(second_file);\n        if (format_valid == '\\0') {\n          DAT_00127a40 = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive_ptr;\n      param3 = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    next_char = current_char;\n    if ((*current_char == '.') && (next_char = current_char + 1, current_char[1] == '.')) {\n      next_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_message = get_translated_string(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal_error(error_message,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (temp_files != (undefined8 *)0x0) {\n          if (temp_files[2] == 0) {\n            rmdir((char *)temp_files[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)temp_files[1]);\n          }\n          free((void *)temp_files[1]);\n          temp_dir = (undefined8 *)*temp_files;\n          free(temp_files);\n          temp_files = temp_dir;\n        }\n        rmdir(temp_dir_path);\n        free(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = next_char, *next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "copy_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "copy_archive_001052a2",
                "__errno_location": "get_location_of_errno",
                "__format": "format_string",
                "bVar18": "flag",
                "cVar1": "format_valid",
                "concat": "concatenate_strings",
                "dcgettext": "get_translated_string",
                "iVar2": "arch",
                "iVar3": "stat_result",
                "in_RAX": "file_descriptor",
                "in_stack_00000008": "param_4",
                "in_stack_00000010": "current_file",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "second_file",
                "in_stack_00000028": "output_format",
                "in_stack_00000030": "unknown_flag",
                "in_stack_000000f8": "file_permissions",
                "in_stack_00000110": "file_size",
                "lVar12": "file_size",
                "lVar15": "bytes_to_read",
                "lVar5": "bytes_read",
                "make_tempdir": "create_temporary_directory",
                "non_fatal": "non_fatal_error",
                "param_3": "param3",
                "pcVar10": "current_char",
                "pcVar14": "close_function",
                "pcVar16": "next_char",
                "piVar8": "errno_ptr",
                "ppcVar11": "archive_file_ptr",
                "ppcVar11[1]": "pointer_to_string_array2[1]",
                "ppcVar4": "file_list",
                "psVar17": "stat_struct",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "stack0x00000050": "stack_variable1",
                "stack0x000000e0": "stack_variable2",
                "stat": "get_stat",
                "strerror": "get_error_string",
                "uVar6": "format_string",
                "uVar9": "error_message",
                "unaff_R14": "temp_files",
                "unaff_R15": "archive_ptr",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUN_001053b5": {
                    "1": "display_error_message",
                    "2": "check_format_and_exit",
                    "3": "print_error_message",
                    "4": "format_error",
                    "5": "format_error_message",
                    "6": "print_bad_format_error"
                },
                "F_ReverseString": {
                    "1": "print_error_message"
                },
                "PTR_ERR_MSG": {
                    "1": "error_msg_ptr"
                },
                "dcgettext": {
                    "1": "translate"
                },
                "param_1": {
                    "1": "var_1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "unused_param2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "unused_param3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "var_4",
                    "4": "arg4"
                },
                "uVar1": {
                    "1": "error_string",
                    "2": "error_msg",
                    "26": "error_message"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid print_bad_format_error_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = translate(0,\"bad format for %s\",5);\n                    \n  fatal(error_message);\n}\n\n",
            "current_name": "print_bad_format_error_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_001053b5",
                "dcgettext": "translate",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "FUN_001053d5": {
                    "1": "process_bfd",
                    "12": "close_and_return_status",
                    "2": "close_bfd_and_return_status"
                },
                "FUN_0011a110": {
                    "1": "handle_close_done"
                },
                "param_1": {
                    "1": "file_pointer",
                    "2": "bfd_handle"
                },
                "unaff_R12": {
                    "1": "ptr_struct",
                    "2": "param1",
                    "3": "base_address",
                    "4": "file_descriptor"
                },
                "unaff_R14": {
                    "1": "bfd_params",
                    "2": "bfd_ptr",
                    "3": "bfd_pointer",
                    "8": "bfd_handle"
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 close_and_return_status_001053d5(void)\n\n{\n  long file_descriptor;\n  undefined8 *bfd_handle;\n  \n  bfd_nonfatal(*bfd_handle);\n  *(undefined4 *)(file_descriptor + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(file_descriptor + 8);\n}\n\n",
            "current_name": "close_and_return_status_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "close_and_return_status_001053d5",
                "unaff_R12": "file_descriptor",
                "unaff_R14": "bfd_handle"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "offset4"
                },
                "(*(long *)(param_2 + 8) + 0x380)": {
                    "1": "offset3"
                },
                "(*(long *)(param_2 + 8) + 8)": {
                    "1": "offset2"
                },
                "*(byte *)(*(long *)(ptr1 + 0x380) + 0x71)": {
                    "1": "byte_var1"
                },
                "*(int *)(ptr1 + 8)": {
                    "1": "int_var1"
                },
                "*(long *)(param_2 + 8)": {
                    "1": "ptr1"
                },
                "0x380": {
                    "1": "offset"
                },
                "0x71": {
                    "1": "byte_offset"
                },
                "0x78": {
                    "1": "function_offset"
                },
                "8": {
                    "1": "offset1"
                },
                "FUN_0010540e": {
                    "1": "execute_process",
                    "2": "execute_action",
                    "21": "execute_function"
                },
                "byte": {
                    "1": "data_byte"
                },
                "code ***(long *)(in_RAX + 0x380) + 0x78)": {
                    "1": "function_pointer"
                },
                "in_RAX": {
                    "1": "object_offset",
                    "3": "temp1",
                    "5": "rax"
                },
                "param_1": {
                    "1": "input1",
                    "2": "arg1",
                    "3": "data",
                    "4": "function_pointer",
                    "6": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "struct_address",
                    "3": "address",
                    "6": "param2"
                },
                "param_3": {
                    "1": "option",
                    "11": "flag",
                    "2": "arg3",
                    "6": "param3"
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_0010540e(undefined8 param1,long param2,uint flag)\n\n{\n  long rax;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    flag = (uint)*(data_byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,flag != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "byte": "data_byte",
                "in_RAX": "rax",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "*pcVar3": {
                    "2": "error_message"
                },
                "*piVar2": {
                    "1": "errno_pointer"
                },
                "FUN_0010543c": {
                    "1": "open_and_handle_error",
                    "2": "open_and_fatal_error",
                    "3": "open_file_and_print_error",
                    "4": "open_file"
                },
                "param_1": {
                    "1": "error_status",
                    "2": "error_code"
                },
                "param_2": {
                    "1": "file_descriptor",
                    "2": "error_message"
                },
                "pcVar3": {
                    "1": "str_error",
                    "11": "error_message",
                    "14": "error_string",
                    "2": "error_msg"
                },
                "piVar2": {
                    "1": "errno_location_pointer",
                    "2": "error_code",
                    "3": "errno_address",
                    "4": "error_location",
                    "7": "errno_location"
                },
                "uVar1": {
                    "1": "file_address",
                    "12": "file_handle",
                    "16": "file_descriptor"
                },
                "uVar4": {
                    "1": "error_msg_format",
                    "10": "error_message",
                    "2": "error_message_format",
                    "5": "error_string",
                    "8": "localized_error_message"
                },
                "unaff_RBP": {
                    "1": "file_pointer",
                    "3": "stack_base",
                    "5": "base_pointer"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid open_file_with_error_handling_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_location;\n  char *error_string;\n  undefined8 error_message;\n  long base_pointer;\n  \n  errno_location = __errno_location();\n  error_string = strerror(*errno_location);\n  file_descriptor = *(undefined8 *)(base_pointer + 0x10);\n  error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(error_message,file_descriptor,error_string);\n}\n\n",
            "current_name": "open_file_with_error_handling_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "open_file_with_error_handling_0010543c",
                "pcVar3": "error_string",
                "piVar2": "errno_location",
                "uVar1": "file_descriptor",
                "uVar4": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "additional_data": {
                "FUN_001054af": {
                    "1": "clear_hash_table_entries",
                    "10": "cleanup_hash_table",
                    "2": "delete_hash_tables",
                    "3": "cleanup_hash_tables"
                },
                "in_RAX": {
                    "1": "unused_variable",
                    "2": "temp_value"
                },
                "param_1": {
                    "1": "entry1",
                    "10": "unused_param1",
                    "3": "unused_param",
                    "4": "unused_parameter1"
                },
                "param_2": {
                    "1": "next_param",
                    "10": "unused_param2",
                    "3": "unused_param",
                    "4": "unused_parameter2"
                }
            },
            "called": [
                "FUN_00104090"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid cleanup_hash_table_001054af(undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  undefined8 unused_var;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unused_param2,unused_var);\n  return;\n}\n\n",
            "current_name": "cleanup_hash_table_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "in_RAX": "unused_var",
                "param_1": "unused_param1",
                "param_2": "unused_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "DAT_001278c8": {
                    "1": "symbol_table_data"
                },
                "DAT_00127a48": {
                    "1": "debugging_information_type"
                },
                "FUN_0010551d": {
                    "1": "merge_debugging_sections",
                    "12": "decompile_and_improve",
                    "3": "decompiled_function"
                },
                "__ptr": {
                    "1": "ptr_var",
                    "2": "void_pointer1"
                },
                "__ptr_00": {
                    "1": "ptr_var00",
                    "3": "void_pointer2"
                },
                "__s": {
                    "1": "str",
                    "10": "string_var",
                    "2": "string1"
                },
                "__s_00": {
                    "1": "output_file_name",
                    "2": "string2"
                },
                "__s_01": {
                    "1": "string3"
                },
                "_uStack0000000000000048": {
                    "1": "int_pointer2"
                },
                "bStack0000000000000100": {
                    "1": "byte_var2"
                },
                "bStack0000000000000101": {
                    "1": "byte_var3"
                },
                "bVar2": {
                    "1": "boolean_var2",
                    "10": "byte_var",
                    "5": "byte_var2"
                },
                "bVar38": {
                    "1": "boolean_var38",
                    "2": "bool_var"
                },
                "bVar39": {
                    "1": "byte2",
                    "2": "byte_var2"
                },
                "cStack0000000000000148": {
                    "3": "char_var3"
                },
                "cVar38": {
                    "1": "is_strip_section"
                },
                "cVar39": {
                    "1": "is_gnu_debug_link_section"
                },
                "cVar8": {
                    "1": "char_val",
                    "2": "char1",
                    "4": "char_var8",
                    "5": "char_var1"
                },
                "cVar9": {
                    "1": "char_var4",
                    "2": "char2",
                    "4": "char_var9",
                    "9": "char_var2"
                },
                "error_code1": {
                    "1": "error_code1"
                },
                "error_code2": {
                    "1": "error_code2"
                },
                "error_code3": {
                    "1": "error_code3"
                },
                "error_code4": {
                    "1": "error_code4"
                },
                "iStack000000000000006c": {
                    "1": "section_flag"
                },
                "iVar11": {
                    "1": "index",
                    "2": "int1",
                    "3": "int_var11",
                    "4": "int_var",
                    "7": "int_var1"
                },
                "iVar13": {
                    "1": "integer_var13"
                },
                "iVar14": {
                    "1": "strcmp_result",
                    "11": "int_var2",
                    "2": "int2",
                    "3": "int_var14"
                },
                "iVar23": {
                    "1": "integer_var23"
                },
                "iVar31": {
                    "1": "stab_entry_count",
                    "2": "int_var3"
                },
                "in_stack_00000008": {
                    "1": "param1",
                    "2": "stack_var1"
                },
                "in_stack_00000010": {
                    "1": "number_of_symbols",
                    "2": "stack_var2"
                },
                "in_stack_00000018": {
                    "1": "stack_var3"
                },
                "in_stack_000000c0": {
                    "1": "symbol_array"
                },
                "in_stack_000000c8": {
                    "1": "ulong_var7"
                },
                "in_stack_000000d0": {
                    "1": "merged_notes_size"
                },
                "in_stack_000000d8": {
                    "1": "long_var7"
                },
                "in_stack_000000e0": {
                    "1": "output_buffer"
                },
                "in_stack_000000f0": {
                    "1": "output_size"
                },
                "in_stack_000000f8": {
                    "1": "ulong_var8"
                },
                "in_stack_00000110": {
                    "1": "ulong_var9"
                },
                "in_stack_00000118": {
                    "1": "param3"
                },
                "in_stack_00000140": {
                    "1": "char_array3"
                },
                "in_stack_00000150": {
                    "1": "char_array4"
                },
                "lStack0000000000000078": {
                    "1": "debuglink_section",
                    "2": "long_var4"
                },
                "lStack0000000000000088": {
                    "1": "stab_section",
                    "2": "long_var5"
                },
                "lStack00000000000000a0": {
                    "1": "section_data_size",
                    "2": "long_var6"
                },
                "lVar15": {
                    "1": "section_offset"
                },
                "lVar21": {
                    "1": "loop_index",
                    "2": "long1",
                    "5": "long_var21",
                    "7": "long_var1"
                },
                "lVar25": {
                    "1": "merge_size",
                    "5": "long_var25",
                    "8": "long_var2"
                },
                "lVar27": {
                    "1": "section_contents_offset",
                    "4": "long_var3",
                    "5": "long_var27"
                },
                "lVar31": {
                    "1": "long_var31"
                },
                "lVar32": {
                    "1": "long_var4"
                },
                "lVar37": {
                    "1": "long_var37"
                },
                "lVar40": {
                    "1": "section_name"
                },
                "pcStack0000000000000038": {
                    "1": "temp_ptr_4",
                    "2": "char_pointer3"
                },
                "pcStack0000000000000090": {
                    "1": "pointer11",
                    "2": "char_pointer4"
                },
                "pcVar19": {
                    "1": "char_pointer",
                    "2": "char_pointer1",
                    "4": "pointer_var19"
                },
                "pcVar28": {
                    "1": "char_pointer6",
                    "2": "char_pointer2",
                    "3": "pointer_var28"
                },
                "pcVar33": {
                    "1": "pointer_var33",
                    "2": "pointer6"
                },
                "pcVar39": {
                    "1": "pointer_var39"
                },
                "pcVar4": {
                    "1": "function_pointer_var4",
                    "3": "code_var4",
                    "8": "function_pointer"
                },
                "piVar23": {
                    "1": "pointer_int_var1",
                    "2": "int_pointer"
                },
                "piVar36": {
                    "1": "integer_var36"
                },
                "plVar15": {
                    "1": "pointer_list",
                    "2": "pointer_var15",
                    "3": "long_pointer1",
                    "4": "long_pointer"
                },
                "plVar23": {
                    "1": "int_pointer1"
                },
                "plVar27": {
                    "1": "long_ptr"
                },
                "plVar32": {
                    "1": "merged_notes_list",
                    "2": "long_pointer2"
                },
                "ppcVar35": {
                    "1": "pointer_to_pointer_to_char"
                },
                "ppuVar37": {
                    "1": "pointer_to_pointer_to_undefined"
                },
                "puStack0000000000000020": {
                    "1": "debug_sections"
                },
                "puStack0000000000000038": {
                    "1": "pointer9"
                },
                "puVar1": {
                    "1": "ptr1",
                    "12": "pointer1",
                    "5": "pointer_var1"
                },
                "puVar23": {
                    "1": "pointer6"
                },
                "puVar29": {
                    "1": "pointer9",
                    "2": "pointer4"
                },
                "puVar3": {
                    "1": "ptr3",
                    "11": "pointer2",
                    "5": "pointer_var3"
                },
                "puVar34": {
                    "1": "pointer_to_undefined4"
                },
                "puVar41": {
                    "1": "debug_link_section"
                },
                "puVar5": {
                    "1": "ptr5",
                    "10": "pointer3",
                    "5": "pointer_var5"
                },
                "pvVar36": {
                    "1": "void_pointer",
                    "2": "void_pointer3"
                },
                "sStack000000000000015a": {
                    "1": "short_var"
                },
                "sVar18": {
                    "1": "size1",
                    "2": "size_var",
                    "3": "size_t_var1",
                    "5": "size_var18"
                },
                "sVar26": {
                    "1": "size_variable2",
                    "2": "size_t_var2",
                    "4": "size_var26",
                    "6": "size_var2"
                },
                "sVar31": {
                    "1": "size_var3"
                },
                "uStack0000000000000048": {
                    "1": "uint_var3"
                },
                "uStack00000000000000b0": {
                    "1": "section_size"
                },
                "uStack00000000000000b0_: =>$puStack0000000000000020[0],\n: in_stack_000000c0": {
                    "1": "merged_notes"
                },
                "uStack0000000000000158": {
                    "1": "undefined_var"
                },
                "uVar10": {
                    "1": "flags",
                    "2": "uint1",
                    "3": "uint_var",
                    "4": "unsigned_var10",
                    "5": "uint_var1"
                },
                "uVar12": {
                    "1": "temp_var_3",
                    "2": "uint2",
                    "4": "unsigned_var12",
                    "8": "uint_var2"
                },
                "uVar13": {
                    "1": "undefined4_var",
                    "2": "unsigned_var5",
                    "3": "uint_var3"
                },
                "uVar16": {
                    "1": "unsigned_var11",
                    "2": "undefined8_var1",
                    "4": "unsigned_var16",
                    "6": "ulong_var3"
                },
                "uVar17": {
                    "1": "ulong_var17",
                    "2": "ulong4",
                    "4": "unsigned_var17",
                    "5": "ulong_var4"
                },
                "uVar20": {
                    "1": "ulong_var10",
                    "2": "unsigned_var20",
                    "4": "ulong_var5"
                },
                "uVar22": {
                    "1": "ulong_var5",
                    "2": "ulong_var6",
                    "3": "unsigned_var22"
                },
                "uVar24": {
                    "1": "merged_notes_size",
                    "2": "ulong_var7",
                    "3": "unsigned_var24"
                },
                "uVar26": {
                    "1": "unsigned_var26"
                },
                "uVar30": {
                    "1": "ulong5",
                    "2": "unsigned_var30"
                },
                "uVar34": {
                    "1": "section_size"
                },
                "uVar36": {
                    "1": "section_contents"
                },
                "uVar38": {
                    "1": "check_section_contents"
                },
                "uVar6": {
                    "1": "temp_var_1",
                    "2": "unsigned_var1",
                    "4": "unsigned_var6",
                    "8": "ulong_var1"
                },
                "uVar7": {
                    "1": "result_count",
                    "2": "unsigned_var2",
                    "4": "unsigned_var7",
                    "8": "ulong_var2"
                },
                "unaff_R13": {
                    "1": "register_r13"
                },
                "unaff_R14": {
                    "1": "binary"
                },
                "unaff_RBP": {
                    "1": "long_var4"
                },
                "unaff_RBX": {
                    "1": "pointer_array3"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001126c0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong decompile_and_improve_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte_var;\n  undefined *pointer2;\n  code *function_pointer;\n  undefined8 *pointer3;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *string_var;\n  char char_var1;\n  char char_var2;\n  uint uint_var1;\n  int int_var1;\n  uint uint_var2;\n  undefined4 uint_var3;\n  int int_var2;\n  long *long_pointer;\n  undefined8 ulong_var3;\n  undefined8 ulong_var4;\n  size_t size_var1;\n  char *pointer4;\n  void *void_pointer1;\n  void *void_pointer2;\n  ulong ulong_var5;\n  long long_var1;\n  ulong unsigned_var22;\n  int *pointer_int_var23;\n  ulong unsigned_var24;\n  long long_var2;\n  FILE *string2;\n  size_t size_var2;\n  long long_var27;\n  long *long_pointer1;\n  char *pointer5;\n  undefined8 *pointer4;\n  ulong unsigned_var30;\n  int int_var31;\n  long long_var4;\n  long *long_pointer2;\n  char *pointer6;\n  undefined4 *pointer5;\n  char **pointer_pointer_char;\n  long *long_pointer2;\n  void *void_pointer3;\n  undefined8 *long_pointer3;\n  undefined **pointer_to_pointer_to_undefined;\n  bool bool_var;\n  byte byte_var2;\n  long stack_var1;\n  ulong stack_var2;\n  char stack_var3;\n  undefined4 *pointer8;\n  char *char_pointer3;\n  uint uint_variable4;\n  int int_variable3;\n  long long_var4;\n  long long_var5;\n  char *char_pointer4;\n  long long_var6;\n  long *symbol_array;\n  ulong ulong_var7;\n  long relocations;\n  long number_of_relocations;\n  void *output_buffer;\n  long output_size;\n  undefined8 ulong_var8;\n  byte byte_var2;\n  byte byte_var3;\n  undefined8 ulong_var9;\n  ushort param3;\n  char *parameter3;\n  char char_var3;\n  char *param5;\n  undefined undefined_var;\n  short short_var;\n  \n  byte_var2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(long_pointer1);\nLAB_001151a2:\n  long_var4 = *(long *)(long_var4 + 8);\n  pointer4 = DAT_001279d0;\n  if (long_var4 == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(long_pointer3[1] + 8) != 5) || (*(int *)(*(long *)(long_var4 + 0xd0) + 4) != 7)) ||\n        (char_var2 = startswith_lto_priv_0_lto_priv_0(), char_var2 == '\\0')) ||\n       ((*(long *)(long_var4 + 0x60) == 0 || (long_var2 = *(long *)(long_var4 + 0x40), long_var2 == 0))))\n    goto LAB_001151a2;\n    long_pointer1 = (long *)xmalloc(0x20);\n    long_pointer1[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      long_var27 = merge_gnu_build_notes();\n      long_pointer1[2] = long_var27;\n      if ((long_var27 == long_var2) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        long_pointer1[3] = (long)long_pointer2;\n        *long_pointer1 = long_var4;\n        long_pointer2 = long_pointer1;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,stack_var1,long_var4);\n        free((void *)long_pointer1[1]);\n        free(long_pointer1);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long_var2 = *(long *)(long_var4 + 8); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer4 != (undefined8 *)0x0; pointer4 = (undefined8 *)*pointer4) {\n    long_var2 = bfd_get_section_by_name();\n    if (long_var2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(long_var2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      size_var1 = *(size_t *)(long_var2 + 0x40);\n      string2 = fopen((char *)pointer4[2],\"w\");\n      if (string2 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointer4[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((size_var1 != 0) &&\n                (size_var2 = fwrite(parameter3,1,size_var1,string2), size_var2 != size_var1)) {\n          pointer_int_var23 = __errno_location();\n          pointer6 = strerror(*pointer_int_var23);\n          ulong_var4 = pointer4[2];\n          ulong_var3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(ulong_var3,ulong_var4,pointer6);\n          free(parameter3);\n          fclose(string2);\n          return 0;\n        }\n        fclose(string2);\n        free(parameter3);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    long_var4 = 0;\n  }\n  else {\n    long_var2 = bfd_get_section_by_name(stack_var1,\".gnu_debuglink\");\n    if (long_var2 != 0) {\n      ulong_var4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(ulong_var4);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    long_var4 = bfd_create_gnu_debuglink_section(stack_var1);\n    long_var2 = DAT_00127a30;\n    if (long_var4 == 0) {\n      ulong_var4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,stack_var1,0,ulong_var4,long_var2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(stack_var1 + 8) + 8) == 2) {\n      ulong_var5 = 0;\n      for (unsigned_var24 = *(ulong *)(stack_var1 + 0x90); unsigned_var24 != 0;\n          unsigned_var24 = *(ulong *)(unsigned_var24 + 8)) {\n        unsigned_var22 = *(ulong *)(unsigned_var24 + 0x30);\n        unsigned_var30 = ulong_var5;\n        ulong_var1 = unsigned_var24;\n        ulong_var2 = ulong_var5;\n        if (unsigned_var22 != 0) {\n          while ((unsigned_var30 = ulong_var1, ulong_var2 != 0 &&\n                 (unsigned_var30 = unsigned_var24, unsigned_var22 <= *(ulong *)(ulong_var5 + 0x30)))) {\n            unsigned_var24 = *(ulong *)(unsigned_var24 + 8);\n            if (unsigned_var24 == 0) goto LAB_00107db8;\n            unsigned_var22 = *(ulong *)(unsigned_var24 + 0x30);\n            ulong_var1 = ulong_var5;\n            ulong_var2 = unsigned_var22;\n          }\n        }\n        ulong_var5 = unsigned_var30;\n      }\nLAB_00107db8:\n      if (ulong_var5 == 0) {\n        unsigned_var24 = 0x1000;\n      }\n      else {\n        ulong_var5 = *(long *)(ulong_var5 + 0x40) + *(long *)(ulong_var5 + 0x30);\n        unsigned_var24 = 0xffffffffffffffff;\n        if (ulong_var5 < 0xfffffffffffff001) {\n          unsigned_var24 = ulong_var5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(long_var4 + 0x28) = *(byte *)(long_var4 + 0x28) | 1;\n      *(ulong *)(long_var4 + 0x30) = unsigned_var24;\n      *(ulong *)(long_var4 + 0x38) = unsigned_var24;\n    }\n  }\n  long_pointer2 = DAT_001278d0;\n  int_variable3 = *(int *)(stack_var1 + 0xa0);\n  if (int_variable3 != 0) {\n    unsigned_var24 = decompile_and_improve_0010551d_0010554f();\n    return unsigned_var24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    pointer8 = (undefined4 *)0x0;\n  }\n  else {\n    pointer_to_pointer_to_undefined = &PTR_sstring_vartab_00125c60;\n    pointer8 = (undefined4 *)xmalloc(0x60);\n    pointer5 = pointer8;\n    for (long_var2 = 0x18; long_var2 != 0; long_var2 = long_var2 + -1) {\n      *pointer5 = 0;\n      pointer5 = pointer5 + (ulong)byte_var2 * -2 + 1;\n    }\n    char_pointer3 = (char *)0x0;\n    do {\n      pointer2 = *pointer_to_pointer_to_undefined;\n      long_var2 = bfd_get_section_by_name();\n      long_var27 = bfd_get_section_by_name();\n      if ((long_var2 != 0) && (long_var27 != 0)) {\n        long_var2 = *(long *)(long_var2 + 0x40);\n        void_pointer1 = (void *)xmalloc(long_var2);\n        char_var2 = bfd_get_section_contents();\n        if (char_var2 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*long_pointer3);\n          free(char_pointer3);\n          free(void_pointer1);\n        }\n        else {\n          unsigned_var24 = *(ulong *)(long_var27 + 0x40);\n          void_pointer2 = (void *)xmalloc(unsigned_var24 + 1);\n          stack_var3 = bfd_get_section_contents();\n          if (stack_var3 == '\\0') {\n            uint_var3 = bfd_get_error();\n            bfd_errmsg(uint_var3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*long_pointer3);\n            free(char_pointer3);\n          }\n          else {\n            *(undefined *)((long)void_pointer2 + unsigned_var24) = 0;\n            if ((char_pointer3 != (char *)0x0) ||\n               (char_pointer3 = (char *)start_stab_constprop_0(),\n               char_pointer3 != (char *)0x0)) {\n              long_var6 = 0;\n              long_var5 = 0;\n              for (void_pointer3 = void_pointer1; void_pointer3 <= (void *)((long)void_pointer1 + long_var2 + -0xc);\n                  void_pointer3 = (void *)((long)void_pointer3 + 0xc)) {\n                ulong_var5 = (**(code **)(long_pointer3[1] + 0x40))(void_pointer3);\n                byte_var = *(byte *)((long)void_pointer3 + 4);\n                uint_var3 = (**(code **)(long_pointer3[1] + 0x58))((long)void_pointer3 + 6);\n                long_var27 = (**(code **)(long_pointer3[1] + 0x40))((long)void_pointer3 + 8);\n                if (byte_var == 0) {\n                  long_var5 = long_var6;\n                  long_var6 = long_var6 + long_var27;\n                }\n                else {\n                  unsigned_var22 = (ulong_var5 & 0xffffffff) + long_var5;\n                  if (unsigned_var22 < unsigned_var24) {\n                    pointer6 = (char *)((long)void_pointer2 + unsigned_var22);\n                    char_pointer4 = (char *)0x0;\n                    while( true ) {\n                      size_var1 = strlen(pointer6);\n                      if (((size_var1 == 0) || (pointer5 = pointer6 + (size_var1 - 1), *pointer5 != '\\')) ||\n                         ((ulong)((long)void_pointer1 + long_var2) < (long)void_pointer3 + 0x10U)) goto LAB_001077fb;\n                      *pointer5 = '\\0';\n                      void_pointer3 = (void *)((long)void_pointer3 + 0xc);\n                      int_var1 = (**(code **)(long_pointer3[1] + 0x40))(void_pointer3);\n                      ulong_var5 = (ulong)(uint)(int_var1 + (int)long_var5);\n                      if (unsigned_var24 <= ulong_var5) break;\n                      pointer6 = (char *)concat(pointer6,(long)void_pointer2 + ulong_var5,0);\n                      *pointer5 = '\\';\n                      free(char_pointer4);\n                      char_pointer4 = pointer6;\n                    }\n                    ulong_var4 = *long_pointer3;\n                    pointer5 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointer5,ulong_var4,pointer2,((long)void_pointer3 - (long)void_pointer1) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byte_var,uint_var3,long_var27,pointer6);\n                    char_var2 = parse_stab(pointer8,char_pointer3,byte_var);\n                    if (char_var2 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(char_pointer4);\n                      free(char_pointer3);\n                      free(void_pointer1);\n                      free(void_pointer2);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong_var4 = *long_pointer3;\n                    pointer6 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pointer6,ulong_var4,pointer2,((long)void_pointer3 - (long)void_pointer1) / 0xc,\n                            ulong_var5 & 0xffffffff,(ulong)byte_var,((long)void_pointer3 - (long)void_pointer1) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(void_pointer1);\n              goto LAB_001058eb;\n            }\n          }\n          free(void_pointer2);\n          free(void_pointer1);\n        }\nLAB_00105981:\n        free(pointer8);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointer_to_pointer_to_undefined = pointer_to_pointer_to_undefined + 2;\n    } while (pointer_to_pointer_to_undefined != (undefined **)&DAT_00125c90);\n    if ((char_pointer3 != (char *)0x0) && (char_var2 = finish_stab(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(long_pointer3[1] + 8) == 1) {\n      long_var2 = 0;\n      for (long_pointer = long_pointer2; long_pointer < long_pointer2 + stack_var2; long_pointer = long_pointer + 1) {\n        (**(code **)(long_pointer3[1] + 0x218))();\n        if (char_var3 == '-') {\n          if (((long_var2 != 0) || (long_var2 = start_stab_constprop_0(), long_var2 != 0)) &&\n             ((param5 != (char *)0x0 && (*param5 != '\\0')))) {\n            pointer6 = (char *)0x0;\n            pointer5 = param5;\n            while (((*pointer5 != '\\0' && (size_var1 = strlen(pointer5), pointer5[size_var1 - 1] == '\\')) &&\n                   (long_pointer + 1 < long_pointer2 + stack_var2))) {\n              pointer4 = (char *)xstrdup(pointer5);\n              size_var1 = strlen(pointer4);\n              pointer4[size_var1 - 1] = '\\0';\n              pointer5 = (char *)concat(pointer4,*(undefined8 *)(long_pointer[1] + 8),0);\n              free(pointer4);\n              free(pointer6);\n              long_pointer = long_pointer + 1;\n              pointer6 = pointer5;\n            }\n            save_stab(undefined_var,(int)short_var,parameter3,pointer5);\n            stack_var3 = parse_stab(pointer8,long_var2,undefined_var);\n            if (stack_var3 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((long_var2 != 0) && (char_var2 = finish_stab(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (stack_var3 == '\\0') {\n      if ((*(int *)(long_pointer3[1] + 8) != 2) || (stack_var2 == 0)) {\n        pointer6 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      parameter3 = (char *)0x0;\n      symbol_array = long_pointer2;\n      relocations = 0;\n      ulong_var7 = stack_var2;\n      number_of_relocations = 0;\n      pointer4 = (undefined8 *)&stack0x00000148;\n      for (long_var2 = 0x22; long_var2 != 0; long_var2 = long_var2 + -1) {\n        *(undefined4 *)pointer4 = 0;\n        pointer4 = (undefined8 *)((long)pointer4 + (ulong)byte_var2 * -8 + 4);\n      }\n      char_var2 = '\\0';\n      int_pointer2 = (int *)0x0;\n      char_pointer3 = (char *)0x0;\n      char_pointer4 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)stack_var2 <= relocations) break;\n        long_var2 = long_pointer2[relocations];\n        char_var1 = bfd_coff_get_syment();\n        long_var27 = number_of_relocations;\n        if (char_var1 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          pointer6 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulong_var4 = dcgettext(0,pointer6,5);\n          non_fatal(ulong_var4);\n          goto LAB_00105981;\n        }\n        pointer6 = *(char **)(long_var2 + 8);\n        relocations = relocations + 1;\n        number_of_relocations = (ulong)byte_var3 + 1 + number_of_relocations;\n        if ((byte_var3 != 0) && (char_var1 = bfd_coff_get_auxent(), char_var1 == '\\0')) {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          pointer6 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (char_pointer4 == (char *)long_var27) {\n          if (byte_var2 != 0x67) {\n            char_var1 = debug_set_filename(pointer8);\n            if (char_var1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          char_pointer4 = (char *)output_size;\n          char_var1 = debug_set_filename(pointer8);\n        }\n        else {\nLAB_00106de4:\n          if ((char)byte_var2 < '\\0') {\n            if (byte_var2 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (byte_var2 < 100) {\n            switch(byte_var2) {\n            case 3:\n              if (ulong_var8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)ulong_var8._6_2_ & *(uint *)(long_pointer3[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(long_pointer3[0x22] + 0x3c) & 0x3f)) {\n                int_pointer2 = (int *)(**(code **)(long_pointer3[1] + 0x238))();\n                char_pointer3 = pointer6;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(byte_var2) {\n            case 100:\n              int_var1 = strcmp(pointer6,\".bb\");\n              if (int_var1 == 0) {\n                char_var1 = debug_start_block(pointer8);\n                goto joined_r0x00107247;\n              }\n              int_var1 = strcmp(pointer6,\".eb\");\n              if (int_var1 == 0) {\n                char_var1 = debug_end_block(pointer8);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_var1 = strcmp(pointer6,\".bf\");\n              if (int_var1 == 0) {\n                if (char_pointer3 != (char *)0x0) {\n                  long_var27 = parse_coff_type_lto_priv_0();\n                  if ((long_var27 == 0) ||\n                     (char_var2 = debug_record_function(pointer8), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (int_pointer2 != (int *)0x0) {\n                    int_var1 = 0;\n                    if (byte_var3 != 0) {\n                      int_var1 = param3 - 1;\n                    }\n                    long_var2 = *(long *)(*(long *)(long_var2 + 0x20) + 0x30);\n                    while( true ) {\n                      int_var31 = int_pointer2[4];\n                      if (int_var31 == 0) break;\n                      char_var1 = debug_record_line(pointer8,int_var1 + int_var31,\n                                                *(long *)(int_pointer2 + 6) + long_var2);\n                      int_pointer2 = int_pointer2 + 4;\n                      if (char_var1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  int_pointer2 = (int *)0x0;\n                  char_pointer3 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer6 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var1 = strcmp(pointer6,\".ef\");\n                if (int_var1 != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = debug_end_function(pointer8);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointer6 = \"%ld: unexpected .ef\\n\";\n              }\n              ulong_var4 = dcgettext(0,pointer6,5);\n              non_fatal(ulong_var4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var1 = parse_coff_type_lto_priv_0();\n          if (long_var1 == 0) goto LAB_00105981;\n          char_var1 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,long_var2,long_var27);\n        }\njoined_r0x00107247:\n        if (char_var1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(stack_var1 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(stack_var1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(stack_var1 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (stack_var2 != 0) {\n        long_pointer2 = DAT_001278d0 + stack_var2;\n        long_pointer = DAT_001278d0;\n        do {\n          uint_var1 = *(uint *)(*long_pointer + 0x18);\n          if ((uint_var1 & 0x1000000) != 0) {\n            *(uint *)(*long_pointer + 0x18) = uint_var1 & 0xfeffffff;\n          }\n          long_pointer = long_pointer + 1;\n        } while (long_pointer2 != long_pointer);\n      }\n    }\n    else {\n      for (long_var2 = *(long *)(stack_var1 + 0x90); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)\n          ) {\n        if (*(long *)(long_var2 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(long_var2 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int_var1 = bfd_get_error();\n      if (int_var1 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    long_var2 = xmalloc();\n    long_pointer2 = DAT_001278d0;\n    uint_variable4 = *(uint *)((long)long_pointer3 + 0x44) & 0x42;\n    DAT_001278c8 = long_var2;\n    if (stack_var2 == 0) {\n      unsigned_var24 = 0;\n    }\n    else {\n      unsigned_var24 = 0;\n      _stack_var3 = 0;\n      do {\n        int_var1 = DAT_001279c0;\n        long_pointer = (long *)long_pointer2[_stack_var3];\n        function_pointer = (code *)long_pointer[4];\n        uint_var1 = *(uint *)(long_pointer + 3);\n        pointer6 = (char *)long_pointer[1];\n        pointer5 = pointer6;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          int_var31 = 0;\n          pointer4 = DAT_001279c8;\n          while( true ) {\n            if ((int_var1 <= int_var31) || (pointer4 = (char *)pointer4[5], pointer4 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointer4 != \"\") break;\nLAB_0010750b:\n            int_var31 = int_var31 + 1;\n          }\n          int_var2 = strcmp(pointer4,pointer6);\n          if (int_var2 != 0) {\n            pointer4 = (undefined8 *)*pointer4;\n            goto LAB_0010750b;\n          }\n          free(pointer4);\n          ulong_var5 = unsigned_var24 + 1;\n          pointer4[5] = \"\";\n          ulong_var3 = create_new_symbol(pointer4);\n          ulong_var4 = DAT_001278f0;\n          *(undefined8 *)(long_var2 + unsigned_var24 * 8) = ulong_var3;\n          long_var27 = htab_elements(ulong_var4);\n          if ((long_var27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *pointer6;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointer6 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(stack_var1 + 8) + 0x1c) != '\\0')\n             ) {\n            long_var27 = long_pointer3[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long_var27 = htab_elements(DAT_001278f0);\n        ulong_var5 = unsigned_var24;\n        if ((long_var27 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pointer6 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointer6 == '_') && (pointer6[1] == '_')) &&\n             (int_var1 = strcmp(pointer6 + (pointer6[2] == '_'),\"__gnu_lto_slim\"), int_var1 == 0)) {\n            ulong_var4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(ulong_var4);\n          }\n        }\n        _char_var3 = 0;\n        parameter3 = pointer6;\n        long_var27 = htab_find(DAT_001278f0);\n        if (((long_var27 == 0) || (pointer5 = *(char **)(long_var27 + 8), pointer6 == pointer5)) &&\n           (pointer5 = pointer6, pointer_pointer_char = DAT_001278f8, (uint_var1 & 0x100) != 0)) {\n          for (; pointer_pointer_char != (char **)0x0; pointer_pointer_char = (char **)pointer_pointer_char[3]) {\n            int_var1 = strcmp(*pointer_pointer_char,pointer6);\n            if (int_var1 == 0) {\n              pointer5 = pointer_pointer_char[1];\n              break;\n            }\n          }\n        }\n        long_pointer[1] = (long)pointer5;\n        char_var2 = *pointer5;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointer6 = DAT_00127928;\n        long_var27 = long_pointer3[1];\n        if (*(char *)(long_var27 + 0x1c) == char_var2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uint_var1 & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                ((*(byte *)(long_pointer[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointer5 = pointer5 + 1;\n            long_pointer[1] = (long)pointer5;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(stack_var1 + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pointer5 = pointer5 + 1;\n            long_pointer[1] = (long)pointer5;\n            size_var1 = strlen(pointer5);\n            long_var27 = size_var1 + 2;\n            goto LAB_001066bc;\n          }\n          *pointer5 = char_var2;\n          long_pointer[1] = (long)pointer5;\n          unsigned_var24 = ulong_var5;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(stack_var1 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            unsigned_var24 = ulong_var5;\n            if (pointer6 == (char *)0x0) goto LAB_00105b32;\n            size_var1 = strlen(pointer5);\n            size_var2 = strlen(pointer6);\n            pointer6 = (char *)xmalloc(size_var2 + size_var1 + 1);\n            pointer4 = pointer6;\n          }\n          else {\nLAB_0010668d:\n            pointer6 = DAT_00127928;\n            if ((*(char *)(long_var27 + 0x1c) != '\\0') && (char_var2 != *(char *)(long_var27 + 0x1c)))\n            goto joined_r0x00106565;\n            size_var1 = strlen(pointer5);\n            long_var27 = size_var1 + 2;\n            if (pointer6 == (char *)0x0) {\n              pointer4 = (char *)xmalloc(long_var27);\n            }\n            else {\nLAB_001066bc:\n              size_var1 = strlen(pointer6);\n              pointer4 = (char *)xmalloc(size_var1 + long_var27);\n            }\n            pointer6 = pointer4 + 1;\n            *pointer4 = *(char *)(*(long *)(stack_var1 + 8) + 0x1c);\n          }\n          string_var = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pointer6,DAT_00127928);\n            size_var1 = strlen(string_var);\n            pointer6 = pointer6 + size_var1;\n          }\n          strcpy(pointer6,pointer5);\n          long_pointer[1] = (long)pointer4;\n          pointer5 = pointer4;\n          unsigned_var24 = ulong_var5;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uint_var1 & 0x20) == 0) &&\n           (((uint_var1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(long_pointer[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uint_variable4 == 0) &&\n              (((uint_var1 & 0x82) != 0 || ((*(byte *)(long_pointer[4] + 0x25) & 0x10) != 0)))) ||\n             (int_var1 = bfd_decode_symclass(long_pointer), int_var1 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              long_var27 = htab_find();\n              if (long_var27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _char_var3 = _char_var3 & 0xffffffffffffff00;\n              parameter3 = pointer5;\n              htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n              if (char_var3 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var1 & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(long_pointer[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var1 & 4) == 0) {\n              if (((*(int *)(long_pointer3[1] + 8) != 2) ||\n                  (long_var27 = *(long *)(long_pointer[4] + 0xd0), long_var27 == 0)) ||\n                 (*(long *)(long_var27 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  char_var2 = bfd_is_local_label(long_pointer3);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          long_var27 = htab_find();\n          if (long_var27 != 0) {\nLAB_0010687f:\n            ulong_var4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(ulong_var4);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _char_var3 = _char_var3 & 0xffffffffffffff00;\n          parameter3 = pointer5;\n          htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n          if (char_var3 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _char_var3 = _char_var3 & 0xffffffffffffff00;\n            parameter3 = pointer5;\n            htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n            if (char_var3 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long_var27 = htab_find();\n          if (long_var27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uint_var1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            long_var27 = htab_find();\n            if (long_var27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _char_var3 = _char_var3 & 0xffffffffffffff00;\n            parameter3 = pointer5;\n            htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n            if (char_var3 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = is_strip_section_isra_0(long_pointer[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var1 & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint_var1 & 0x82) != 0) {\n                char_var2 = is_specified_symbol(pointer5);\n                if ((char_var2 == '\\0') &&\n                   ((long_var27 = htab_elements(DAT_001279f8), long_var27 == 0 ||\n                    (char_var2 = is_specified_symbol(pointer5), char_var2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uint_var2 = *(uint *)(long_pointer + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (long_var27 = *long_pointer, long_var27 == 0)) ||\n                      ((*(int *)(*(long *)(long_var27 + 8) + 8) != 5 || (*(long *)(long_var27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)long_pointer + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(long_pointer + 3);\n                }\n                *(uint *)(long_pointer + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var1 & 1) != 0) && (char_var2 = is_specified_symbol(pointer5), char_var2 != '\\0')) {\n                *(uint *)(long_pointer + 3) = *(uint *)(long_pointer + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (char_var2 = is_specified_symbol(pointer5), char_var2 != '\\0')) {\n                *(uint *)(long_pointer + 3) = *(uint *)(long_pointer + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(long_var2 + unsigned_var24 * 8) = long_pointer;\n            unsigned_var24 = unsigned_var24 + 1;\n          }\n        }\n        _stack_var3 = _stack_var3 + 1;\n      } while (stack_var2 != _stack_var3);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      pointer4 = DAT_001279c8;\n      int_var1 = DAT_001279c0;\n      for (long_var27 = 0; long_var27 < int_var1; long_var27 = long_var27 + 1) {\n        pointer6 = (char *)pointer4[5];\n        if (pointer6 == (char *)0x0) {\n          long_var1 = unsigned_var24 * 8;\n          unsigned_var24 = unsigned_var24 + 1;\n          ulong_var4 = create_new_symbol(pointer4,stack_var1);\n          *(undefined8 *)(long_var2 + long_var1) = ulong_var4;\n          int_var1 = DAT_001279c0;\n        }\n        else if (pointer6 != \"\") {\n          ulong_var4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(ulong_var4,pointer6);\n        }\n        pointer4 = (undefined8 *)*pointer4;\n      }\n    }\n    bool_var = DAT_001279a0 != '\\0';\n    *(undefined8 *)(long_var2 + unsigned_var24 * 8) = 0;\n    if ((bool_var) && (pointer8 != (undefined4 *)0x0)) {\n      int_var1 = *(int *)(*(undefined8 **)(stack_var1 + 8) + 1);\n      if ((int_var1 != 5) && (int_var1 != 2)) {\n        ulong_var4 = **(undefined8 **)(stack_var1 + 8);\n        ulong_var3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,stack_var1,0,ulong_var3,ulong_var4);\nLAB_00105d8c:\n        free(pointer8);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      output_buffer = (void *)0x0;\n      char_var2 = write_stabs_in_sections_debugging_info_constprop_0\n                        (stack_var1,pointer8,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      long_var2 = bfd_make_section_with_flags(stack_var1,\".stab\",0x2108);\n      long_var27 = bfd_make_section_with_flags(stack_var1,\".stabstr\",0x2108);\n      if ((((long_var2 == 0) || (long_var27 == 0)) ||\n          (char_var2 = bfd_set_section_size(long_var2,ulong_var9), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(long_var27,parameter3), char_var2 == '\\0')) {\n        pointer6 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong_var4 = dcgettext(0,pointer6,5);\n        bfd_nonfatal_message(0,stack_var1,0,ulong_var4);\n        free(output_buffer);\n        free(pointer8);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(long_var2 + 0x7c) = 2;\n      *(undefined4 *)(long_var27 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (stack_var1,long_var2,symbol_array,0,ulong_var9);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (stack_var1,long_var27,output_buffer,0,parameter3),\n         char_var2 == '\\0')) {\n        pointer6 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(pointer8);\n    }\n    stack_var2 = unsigned_var24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    long_var2 = htab_elements(DAT_00127a18);\n    if (((long_var2 != 0) ||\n        (((((((long_var2 = htab_elements(DAT_00127a28), long_var2 != 0 ||\n              (long_var2 = htab_elements(DAT_00127a08), long_var2 != 0)) ||\n             (long_var2 = htab_elements(DAT_00127a00), long_var2 != 0)) ||\n            ((long_var2 = htab_elements(DAT_001279f8), long_var2 != 0 ||\n             (long_var2 = htab_elements(DAT_001279f0), long_var2 != 0)))) ||\n           (long_var2 = htab_elements(DAT_001278f0), long_var2 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(stack_var1,DAT_001278c8,stack_var2 & 0xffffffff);\n  bfd_map_over_sections(long_pointer3,copy_relocations_in_section,stack_var1);\n  bfd_map_over_sections(long_pointer3,copy_section,stack_var1);\n  for (pointer4 = DAT_001279e0; pointer3 = DAT_001279d8, pointer4 != (undefined8 *)0x0;\n      pointer4 = (undefined8 *)*pointer4) {\n    char_var2 = bfd_set_section_contents(stack_var1,pointer4[5],pointer4[4],0,pointer4[3]);\n    if (char_var2 == '\\0') {\n      bfd_nonfatal_message(0,stack_var1,pointer4[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    ulong_var4 = *(undefined8 *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(stack_var1,ulong_var4,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      bfd_nonfatal_message(0,stack_var1,ulong_var4,0);\n      return 0;\n    }\n  }\n  if (long_pointer2 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      ulong_var4 = *long_pointer3;\n      ulong_var3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(ulong_var3,ulong_var4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglink_section(stack_var1,long_var4),\n       long_var2 = DAT_00127a30, char_var2 != '\\0')) {\n      uint_var1 = (**(code **)(*(long *)(stack_var1 + 8) + 0x140))(long_pointer3);\n      unsigned_var24 = (ulong)uint_var1;\n      if ((char)uint_var1 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return unsigned_var24;\n        }\n        char_var2 = bfd_alt_mach_code(stack_var1,DAT_00127930 & 0xffffffff);\n        ulong_var5 = DAT_00127930;\n        if (char_var2 != '\\0') {\n          return unsigned_var24;\n        }\n        ulong_var4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(ulong_var4,ulong_var5);\n        if (*(int *)(*(long *)(stack_var1 + 8) + 8) != 5) {\n          ulong_var4 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(ulong_var4);\n          return unsigned_var24;\n        }\n        ulong_var4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(ulong_var4);\n        *(short *)(*(long *)(stack_var1 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return unsigned_var24;\n      }\n      ulong_var4 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,stack_var1,0,ulong_var4);\n    }\n    else {\n      ulong_var4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,stack_var1,0,ulong_var4,long_var2);\n    }\n    return 0;\n  }\n  long_pointer2 = (long *)0x0;\n  pointer4 = *(undefined8 **)(stack_var1 + 0x90);\n  do {\n    if (pointer4 == (undefined8 *)0x0) {\n      do {\n        long_pointer2 = (long *)long_pointer2[3];\n        free((void *)long_pointer2[1]);\n        free(long_pointer2);\n        long_pointer2 = long_pointer2;\n      } while (long_pointer2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(stack_var1 + 8) + 8) == 5)) &&\n        (*(int *)(pointer4[0x1a] + 4) == 7)) &&\n       (char_var2 = startswith_lto_priv_0_lto_priv_0(*pointer4,\".gnu.build.attributes\"), char_var2 != '\\0'))\n    {\n      if (long_pointer2 == (long *)0x0) {\n        long_pointer2 = long_pointer2;\n      }\n      long_pointer = long_pointer2;\n      if (*(undefined8 **)(*long_pointer2 + 0x60) == pointer4) {\nLAB_0010625f:\n        pointer6 = \"error: failed to merge notes\";\n        if (long_pointer2[1] != 0) {\n          char_var2 = bfd_set_section_contents(stack_var1,pointer4,long_pointer2[1],0,long_pointer2[2]);\n          if (char_var2 == '\\0') {\n            ulong_var4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,stack_var1,pointer4,ulong_var4);\n            return 0;\n          }\n          long_pointer2 = (long *)long_pointer2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          long_pointer2 = long_pointer;\n          if (*(undefined8 **)(*long_pointer + 0x60) == pointer4) goto LAB_0010625f;\n          long_pointer2 = (long *)long_pointer[3];\n          long_pointer = long_pointer2;\n        } while (long_pointer2 != (long *)0x0);\n        pointer6 = \"error: failed to locate merged notes\";\n      }\n      ulong_var4 = dcgettext(0,pointer6,5);\n      bfd_nonfatal_message(0,stack_var1,pointer4,ulong_var4);\n    }\nLAB_001061be:\n    pointer4 = (undefined8 *)pointer4[1];\n  } while( true );\n}\n\n",
            "current_name": "decompile_and_improve_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010551d": "decompile_and_improve_0010551d",
                "__ptr": "void_pointer1",
                "__ptr_00": "void_pointer2",
                "__s": "string_var",
                "__s_00": "string2",
                "_uStack0000000000000048": "int_pointer2",
                "bStack0000000000000100": "byte_var2",
                "bStack0000000000000101": "byte_var3",
                "bVar2": "byte_var",
                "bVar38": "bool_var",
                "bVar39": "byte_var2",
                "cStack0000000000000148": "char_var3",
                "cVar8": "char_var1",
                "cVar9": "char_var2",
                "iStack000000000000006c": "int_variable3",
                "iVar11": "int_var1",
                "iVar14": "int_var2",
                "iVar23": "integer_var23",
                "iVar31": "int_var31",
                "in_stack_00000008": "stack_var1",
                "in_stack_00000010": "stack_var2",
                "in_stack_00000018": "stack_var3",
                "in_stack_000000c0": "symbol_array",
                "in_stack_000000c8": "ulong_var7",
                "in_stack_000000d0": "relocations",
                "in_stack_000000d8": "number_of_relocations",
                "in_stack_000000e0": "output_buffer",
                "in_stack_000000f0": "output_size",
                "in_stack_000000f8": "ulong_var8",
                "in_stack_00000110": "ulong_var9",
                "in_stack_00000118": "param3",
                "in_stack_00000140": "parameter3",
                "in_stack_00000150": "param5",
                "lStack0000000000000078": "long_var4",
                "lStack0000000000000088": "long_var5",
                "lStack00000000000000a0": "long_var6",
                "lVar15": "section_offset",
                "lVar21": "long_var1",
                "lVar25": "long_var2",
                "lVar27": "long_var27",
                "lVar32": "long_var3",
                "pcStack0000000000000038": "char_pointer3",
                "pcStack0000000000000090": "char_pointer4",
                "pcVar19": "pointer4",
                "pcVar28": "pointer5",
                "pcVar33": "pointer6",
                "pcVar4": "function_pointer",
                "piVar23": "pointer_int_var23",
                "plVar15": "long_pointer",
                "plVar32": "long_pointer2",
                "ppcVar35": "pointer_pointer_char",
                "ppuVar37": "pointer_to_pointer_to_undefined",
                "puStack0000000000000020": "pointer8",
                "puVar1": "pointer1",
                "puVar29": "pointer4",
                "puVar3": "pointer2",
                "puVar34": "pointer5",
                "puVar5": "pointer3",
                "pvVar36": "void_pointer3",
                "sStack000000000000015a": "short_var",
                "sVar18": "size_var1",
                "sVar26": "size_var2",
                "uStack0000000000000048": "uint_variable4",
                "uStack0000000000000158": "undefined_var",
                "uVar10": "uint_var1",
                "uVar12": "uint_var2",
                "uVar13": "uint_var3",
                "uVar16": "ulong_var3",
                "uVar17": "ulong_var4",
                "uVar20": "ulong_var5",
                "uVar22": "unsigned_var22",
                "uVar24": "unsigned_var24",
                "uVar30": "unsigned_var30",
                "uVar34": "section_size",
                "uVar6": "ulong_var1",
                "uVar7": "ulong_var2",
                "unaff_R13": "long_pointer2",
                "unaff_R14": "long_pointer3",
                "unaff_RBP": "long_var4",
                "unaff_RBX": "long_pointer1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "additional_data": {
                " lVar23": {
                    "1": "long_var23"
                },
                "DAT_00125c60": {
                    "1": "stab_section_names"
                },
                "DAT_001264c0": {
                    "1": "debug_link_section_size"
                },
                "DAT_001278c8": {
                    "1": "l_var14"
                },
                "DAT_001278d0": {
                    "1": "symbol_table_entries"
                },
                "DAT_001278d8": {
                    "1": "dat_001279c0"
                },
                "DAT_001278f0": {
                    "1": "table3"
                },
                "DAT_001278f8": {
                    "1": "dat_001278f0"
                },
                "DAT_00127930": {
                    "1": "alternative_machine_code"
                },
                "DAT_00127948": {
                    "1": "debugging"
                },
                "DAT_00127958": {
                    "1": "is_stripped_section"
                },
                "DAT_00127959": {
                    "1": "flag3"
                },
                "DAT_00127988": {
                    "1": "flag9"
                },
                "DAT_00127989": {
                    "1": "is_type_propagation_settled",
                    "2": "flag2"
                },
                "DAT_0012798a": {
                    "1": "is_section_padding_settled"
                },
                "DAT_00127990": {
                    "1": "padding_value"
                },
                "DAT_00127998": {
                    "1": "type_propagation_algorithm_settled",
                    "2": "flag1"
                },
                "DAT_00127999": {
                    "1": "padding_byte"
                },
                "DAT_001279a0": {
                    "1": "is_debugging_set"
                },
                "DAT_001279a8": {
                    "1": "flag8"
                },
                "DAT_001279c0": {
                    "1": "sections_data_array_size"
                },
                "DAT_001279c8": {
                    "1": "alternative_machine_code_args"
                },
                "DAT_001279ea": {
                    "1": "flag4"
                },
                "DAT_001279f0": {
                    "1": "table1"
                },
                "DAT_001279f8": {
                    "1": "dat_001279e0"
                },
                "DAT_00127a00": {
                    "1": "is_removed_symbols_set"
                },
                "DAT_00127a08": {
                    "1": "is_indirect_symbols_set"
                },
                "DAT_00127a10": {
                    "1": "is_local_symbols_set"
                },
                "DAT_00127a18": {
                    "1": "table5"
                },
                "DAT_00127a20": {
                    "1": "is_mergeable_notes_set"
                },
                "DAT_00127a28": {
                    "1": "table4"
                },
                "DAT_00127a30": {
                    "1": "dat_00127a38"
                },
                "DAT_00127a38": {
                    "1": "dat_00127a40"
                },
                "DAT_00127a39": {
                    "1": "flag7"
                },
                "DAT_00127a40": {
                    "1": "error_message_flag"
                },
                "DAT_00127a44": {
                    "1": "is_debug_info_requested"
                },
                "DAT_00127a48": {
                    "1": "dat_00127a44"
                },
                "DICT_PARAM": {
                    "1": "new_param_name"
                },
                "FUN_0010554f": {
                    "1": "decompile_and_improve"
                },
                "FUN_0010867e": {
                    "1": "non_fatal"
                },
                "FUN_0010870e": {
                    "1": "bfd_map_over_sections"
                },
                "FUN_0010875d": {
                    "1": "parse_stab_section"
                },
                "FUN_0010bbd3": {
                    "1": "start_stab"
                },
                "FUN_0010bc80": {
                    "1": "save_stab"
                },
                "FUN_0010be1a": {
                    "1": "copy_section"
                },
                "FUN_0010be88": {
                    "1": "debug_end_function"
                },
                "FUN_0010bece": {
                    "1": "is_strip_section"
                },
                "FUN_0010bf20": {
                    "1": "debug_set_filename"
                },
                "FUN_0010bf86": {
                    "1": "dcgettext"
                },
                "FUN_0010c892": {
                    "1": "write_stabs_in_section"
                },
                "FUN_0010cace": {
                    "1": "start_specified_symbol_predicate"
                },
                "FUN_0010cfe1": {
                    "1": "write_symbol_table"
                },
                "FUN_0010dac0": {
                    "1": "debug_traverse_sections"
                },
                "FUN_0011173a": {
                    "1": "finish_stab"
                },
                "FUN_001126c0": {
                    "1": "debug_record_function"
                },
                "FUN_00112894": {
                    "1": "stab_context"
                },
                "FUN_00112a33": {
                    "1": "debug_record_line"
                },
                "FUN_0011378f": {
                    "1": "copy_symbols_in_section"
                },
                "FUN_00113fb0": {
                    "1": "concat"
                },
                "FUN_001159d0": {
                    "1": "decompiled_binary_code"
                },
                "FUN_00115d70": {
                    "1": "xfree"
                },
                "FUN_00115db0": {
                    "1": "fatal"
                },
                "FUN_00115dc0": {
                    "1": "get_message"
                },
                "FUN_00116030": {
                    "1": "get_section_by_name"
                },
                "FUN_00116110": {
                    "1": "init_debug_sections"
                },
                "FUN_00119dd0": {
                    "1": "is_stab_section"
                },
                "FUN_00119ed0": {
                    "1": "parse_stab"
                },
                "FUN_0011a170": {
                    "1": "parse_stab"
                },
                "FUN_0011a2e0": {
                    "1": "finish_stab"
                },
                "In_Stack_00000050": {
                    "1": "rel_ptr_struct"
                },
                "In_Stack_00000058": {
                    "1": "result_struct"
                },
                "PLDAT_00127940": {
                    "1": "param_17"
                },
                "PLDAT_00127998": {
                    "1": "param_13"
                },
                "___dest": {
                    "1": "result"
                },
                "__ptr": {
                    "1": "allocation_ptr"
                },
                "__ptr_00": {
                    "1": "__result_1"
                },
                "__ptr_01": {
                    "1": "__result_2"
                },
                "__ptr_02": {
                    "1": "stab_symbols",
                    "2": "stab_data"
                },
                "__s": {
                    "1": "string_value"
                },
                "_param_15": {
                    "1": "int_param15"
                },
                "_param_41": {
                    "1": "int_param41"
                },
                "_param_42": {
                    "1": "file_name"
                },
                "_param_43": {
                    "1": "symbol_type"
                },
                "_param_44": {
                    "1": "symbol_size"
                },
                "_param_9": {
                    "1": "section_fill"
                },
                "bVar2": {
                    "1": "is_byte",
                    "2": "byte_value"
                },
                "bVar38": {
                    "1": "bool_var38"
                },
                "bVar39": {
                    "1": "zero_flag"
                },
                "bVar7": {
                    "1": "comparison_result"
                },
                "cVar2": {
                    "1": "new_temp_var2"
                },
                "cVar7": {
                    "1": "new_c_var7",
                    "2": "success"
                },
                "cVar8": {
                    "1": "char_var8"
                },
                "fp": {
                    "1": "file_pointer"
                },
                "fun_0010870e": {
                    "1": "lookup_symbol"
                },
                "fun_0010875d": {
                    "1": "fun_7"
                },
                "fun_00108863": {
                    "1": "write_stabs_in_sections_debugging_info_wrapper"
                },
                "fun_0010bbd3": {
                    "1": "fun_5"
                },
                "fun_0010bc80": {
                    "1": "is_specified_symbol_predicate"
                },
                "fun_0010be1a": {
                    "1": "fun_15"
                },
                "fun_0010be88": {
                    "1": "fun_16"
                },
                "fun_0010bf86": {
                    "1": "fun_3"
                },
                "fun_0010c892": {
                    "1": "fun_8"
                },
                "fun_0010dac0": {
                    "1": "copy_section_contents"
                },
                "fun_00112894": {
                    "1": "fun_12"
                },
                "fun_00113fb0": {
                    "1": "fun_11"
                },
                "fun_001159d0": {
                    "1": "do_something"
                },
                "fun_00115d70": {
                    "1": "do_something_else"
                },
                "fun_00115dc0": {
                    "1": "fun_4"
                },
                "fun_00116030": {
                    "1": "fun_2"
                },
                "fun_00116110": {
                    "1": "fun_10"
                },
                "fun_00119dd0": {
                    "1": "fun_9"
                },
                "fun_0011a170": {
                    "1": "fun_17"
                },
                "fun_0011a2e0": {
                    "1": "fun_18"
                },
                "iVar10": {
                    "1": "temp_var10"
                },
                "iVar11": {
                    "1": "new_i_var11"
                },
                "iVar27": {
                    "1": "iteration_count"
                },
                "in_R10": {
                    "1": "param_8",
                    "3": "merged_notes_list"
                },
                "in_stack_00000068": {
                    "1": "stab_section_count_offset"
                },
                "in_stack_00000068._4_4_": {
                    "1": "stab_section_count"
                },
                "in_stack_000000d8": {
                    "1": "prefix_len"
                },
                "in_stack_000000f8": {
                    "1": "link_offset"
                },
                "in_stack_00000140": {
                    "1": "stack_var"
                },
                "lVar14": {
                    "1": "long_var14",
                    "2": "section_count",
                    "4": "section_index"
                },
                "lVar14_1": {
                    "1": "new_temp_var14_1"
                },
                "lVar15": {
                    "1": "long_var15"
                },
                "lVar23": {
                    "1": "temp_var23"
                },
                "lVar25": {
                    "1": "section"
                },
                "lVar37": {
                    "1": "new_temp_var37",
                    "2": "section_size"
                },
                "lVar73": {
                    "1": "section_count"
                },
                "original_variable_name_1": {
                    "1": "descriptive_variable_name_1"
                },
                "original_variable_name_2": {
                    "1": "descriptive_variable_name_2"
                },
                "original_variable_name_n": {
                    "1": "descriptive_variable_name_n"
                },
                "param_1": {
                    "1": "binary_extracted",
                    "2": "binary",
                    "8": "param_7"
                },
                "param_10": {
                    "1": "data",
                    "2": "param_37"
                },
                "param_11": {
                    "1": "lma"
                },
                "param_12": {
                    "1": "symbol_length",
                    "2": "padding",
                    "3": "gap_size"
                },
                "param_13": {
                    "1": "stab_section",
                    "5": "section_name"
                },
                "param_14": {
                    "1": "param_38",
                    "2": "section_data",
                    "4": "section_sizes"
                },
                "param_15": {
                    "1": "flags",
                    "2": "param_39"
                },
                "param_16": {
                    "1": "param_22"
                },
                "param_17": {
                    "1": "section_order",
                    "2": "param_17",
                    "6": "sections"
                },
                "param_18": {
                    "1": "section_index",
                    "2": "param_43"
                },
                "param_19": {
                    "1": "param_25",
                    "2": "param_44"
                },
                "param_2": {
                    "1": "function_name",
                    "3": "in_stack_00000068",
                    "4": "param_21"
                },
                "param_20": {
                    "1": "symtab"
                },
                "param_21": {
                    "1": "swapped_entry_data",
                    "2": "debug_link_name"
                },
                "param_22": {
                    "1": "invert"
                },
                "param_23": {
                    "1": "starting_point",
                    "2": "section_offset"
                },
                "param_24": {
                    "1": "param_32"
                },
                "param_25": {
                    "1": "pl_var15"
                },
                "param_26": {
                    "1": "gap_size"
                },
                "param_27": {
                    "1": "get_string_size"
                },
                "param_28": {
                    "1": "c_var7"
                },
                "param_29": {
                    "1": "gap_start_index"
                },
                "param_3": {
                    "1": "flags",
                    "2": "param_30",
                    "3": "param_23"
                },
                "param_30": {
                    "1": "param_26",
                    "2": "merged_notes"
                },
                "param_31": {
                    "1": "alignment",
                    "2": "section_size"
                },
                "param_32": {
                    "1": "param_32",
                    "2": "section_index"
                },
                "param_33": {
                    "1": "param_39",
                    "3": "debug_link_contents"
                },
                "param_34": {
                    "1": "pldat_00127940"
                },
                "param_35": {
                    "1": "contents"
                },
                "param_36": {
                    "1": "param_39"
                },
                "param_37": {
                    "1": "is_stab"
                },
                "param_38": {
                    "1": "param_38",
                    "2": "debug_link_section_size"
                },
                "param_39": {
                    "1": "is_end_block"
                },
                "param_4": {
                    "1": "byte_value",
                    "2": "param_40"
                },
                "param_40": {
                    "1": "symbols",
                    "2": "section_sizes"
                },
                "param_41": {
                    "1": "num_stabs",
                    "2": "is_function"
                },
                "param_42": {
                    "1": "function_name",
                    "2": "filename"
                },
                "param_43": {
                    "1": "param_43",
                    "6": "symbol_type"
                },
                "param_44": {
                    "1": "symbol_binding",
                    "2": "symbol_value"
                },
                "param_45": {
                    "1": "skip_flag"
                },
                "param_46": {
                    "1": "symbol_length"
                },
                "param_47": {
                    "1": "index_value"
                },
                "param_48": {
                    "1": "symbol_name"
                },
                "param_49": {
                    "1": "symbol_type"
                },
                "param_5": {
                    "1": "param_26",
                    "2": "param_24"
                },
                "param_50": {
                    "1": "symbol_section"
                },
                "param_51": {
                    "1": "symbol_alignment"
                },
                "param_52": {
                    "1": "symbol_value"
                },
                "param_53": {
                    "1": "sort_flag"
                },
                "param_54": {
                    "1": "symbol"
                },
                "param_55": {
                    "1": "symbol_array_index"
                },
                "param_56": {
                    "1": "symbol_visibility"
                },
                "param_57": {
                    "1": "symbol_binding"
                },
                "param_58": {
                    "1": "symbol_index"
                },
                "param_59": {
                    "1": "section_name"
                },
                "param_6": {
                    "1": "param_32",
                    "2": "param_26"
                },
                "param_60": {
                    "1": "mergeable_flag"
                },
                "param_61": {
                    "1": "note_sections"
                },
                "param_62": {
                    "1": "note_section_data"
                },
                "param_63": {
                    "1": "note_section_name"
                },
                "param_64": {
                    "1": "merged_note_sections"
                },
                "param_7": {
                    "1": "param_30",
                    "3": "bfd",
                    "5": "binary_file",
                    "6": "binary"
                },
                "param_8": {
                    "1": "param_32",
                    "2": "param_31",
                    "4": "section_count",
                    "8": "num_sections"
                },
                "param_9": {
                    "1": "is_lto_compiled",
                    "2": "param_36"
                },
                "param_n": {
                    "1": "new_param_n",
                    "2": "param_n"
                },
                "pbVar30": {
                    "1": "section_pointer"
                },
                "pcVar22": {
                    "1": "last_section_char"
                },
                "pcVar3": {
                    "1": "section_entry"
                },
                "pcVar31": {
                    "2": "error_string"
                },
                "plVar15": {
                    "1": "symbol_table",
                    "2": "current_section"
                },
                "plVar15_1": {
                    "1": "new_temp_var15_1"
                },
                "plVar20": {
                    "1": "symbol_name_entry",
                    "2": "current_section"
                },
                "plVar21": {
                    "1": "pl_var28"
                },
                "plVar22": {
                    "1": "pl_var29"
                },
                "plVar25": {
                    "1": "merged_notes_list"
                },
                "plVar28": {
                    "1": "symbols",
                    "2": "section_list"
                },
                "plVar29": {
                    "1": "pl_var30"
                },
                "plVar30": {
                    "1": "cb"
                },
                "plVar33": {
                    "1": "pointer_value"
                },
                "plVar53": {
                    "1": "stabsec"
                },
                "plVar58": {
                    "1": "stabstrsec"
                },
                "plVar_X": {
                    "1": "new_variable_name"
                },
                "ppVar27": {
                    "1": "pointer_pointer_var27"
                },
                "ppcVar34": {
                    "1": "symbol_table",
                    "2": "section_names"
                },
                "ppuVar36": {
                    "1": "symbol_class_instances"
                },
                "ptVar68": {
                    "1": "param_3_cast"
                },
                "ptVar69": {
                    "1": "param_3_cast0"
                },
                "ptVar70": {
                    "1": "pv_var32"
                },
                "ptVar71": {
                    "1": "pt_var67"
                },
                "ptVar72": {
                    "1": "param_3_recast"
                },
                "puVar1": {
                    "1": "pointer_var1"
                },
                "puVar18": {
                    "1": "pu_var19"
                },
                "puVar20": {
                    "1": "pu_var21"
                },
                "puVar26": {
                    "1": "temp_array_ptr"
                },
                "puVar27": {
                    "1": "pu_var28"
                },
                "puVar29": {
                    "1": "pu_var30"
                },
                "puVar30": {
                    "1": "stab_entry_ptr"
                },
                "puVar32": {
                    "1": "stab"
                },
                "puVar33": {
                    "1": "stab_string_ptr"
                },
                "puVar37": {
                    "1": "pu_var38"
                },
                "puVar4": {
                    "1": "sections_array_ptr"
                },
                "puVar48": {
                    "1": "auxvec"
                },
                "puVar50": {
                    "1": "pu_var51"
                },
                "puVar51": {
                    "1": "symvec"
                },
                "puVar52": {
                    "1": "var_30"
                },
                "puVar54": {
                    "1": "filerndx"
                },
                "puVar55": {
                    "1": "pu_var56"
                },
                "puVar56": {
                    "1": "result"
                },
                "puVar57": {
                    "1": "sym"
                },
                "puVar62": {
                    "1": "condition_vec_offset"
                },
                "puVar63": {
                    "1": "ppc_var59"
                },
                "puVar64": {
                    "1": "ppc_var61"
                },
                "puVar65": {
                    "1": "ppc_var60"
                },
                "puVar7": {
                    "1": "pu_var8"
                },
                "puVar70": {
                    "1": "pu_var71"
                },
                "puVar81": {
                    "1": "pu_var82"
                },
                "sVar18": {
                    "1": "len"
                },
                "sVar19": {
                    "1": "new_s_var19"
                },
                "stack0x00000110": {
                    "1": "stack_temp2"
                },
                "stack0x00000140": {
                    "1": "symbol_table"
                },
                "stack0x00000148": {
                    "1": "stack_temp3"
                },
                "uVar12": {
                    "1": "flags"
                },
                "uVar13": {
                    "1": "sym_flags"
                },
                "uVar16": {
                    "1": "ulong_temp",
                    "2": "new_symbol"
                },
                "uVar17": {
                    "1": "new_temp_var17"
                },
                "uVar21": {
                    "1": "size_difference"
                },
                "uVar24": {
                    "1": "total_size"
                },
                "uVar29": {
                    "1": "counter"
                },
                "uVar30": {
                    "1": "delta"
                },
                "uVar37": {
                    "1": "i"
                },
                "uVar39": {
                    "1": "minsize"
                },
                "uVar40": {
                    "1": "minidx"
                },
                "uVar44": {
                    "1": "pu_var65"
                },
                "uVar45": {
                    "1": "u_var44"
                },
                "uVar46": {
                    "1": "u_var45"
                },
                "uVar47": {
                    "1": "u_var44"
                },
                "uVar49": {
                    "1": "pu_var65_recast"
                },
                "uVar5": {
                    "1": "undefined_var5"
                },
                "uVar50": {
                    "1": "symoff"
                },
                "uVar53": {
                    "1": "auxentry"
                },
                "uVar6": {
                    "1": "temp_var6"
                },
                "uVar9": {
                    "1": "new_u_var9"
                },
                "unaff_R14": {
                    "1": "param_47",
                    "2": "bfd_data"
                },
                "unaff_R15": {
                    "1": "symp"
                },
                "unaff_RBX": {
                    "1": "the_bfd"
                },
                "unaff_RDI": {
                    "1": "symlow"
                },
                "unaff_RSI": {
                    "1": "minsym"
                },
                "var_1": {
                    "1": "var_1"
                },
                "var_2": {
                    "1": "variable_2"
                },
                "var_n": {
                    "1": "variable_n"
                }
            },
            "called": [
                "FUN_00115dc0",
                "FUN_00104140",
                "FUN_00104400",
                "FUN_001159d0",
                "FUN_001048a0",
                "FUN_00115d70",
                "FUN_001044e0",
                "FUN_0010870e",
                "FUN_00116030",
                "FUN_00104580",
                "FUN_0010bf86",
                "FUN_0010bbd3",
                "FUN_00104240",
                "FUN_0010bc80",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_0010875d",
                "FUN_0010c892",
                "FUN_00119dd0",
                "FUN_00104270",
                "FUN_00116110",
                "FUN_00113fb0",
                "FUN_00104460",
                "FUN_00112894",
                "FUN_001045b0",
                "FUN_0011173a",
                "FUN_001043a0",
                "FUN_00104850",
                "FUN_00104520",
                "FUN_001088ae",
                "FUN_00104490",
                "FUN_00108b3e",
                "FUN_00104260",
                "FUN_00112a33",
                "FUN_00104590",
                "FUN_001126c0",
                "FUN_0010be1a",
                "FUN_001047d0",
                "FUN_00108863",
                "FUN_00104370",
                "FUN_00104330",
                "FUN_00104600",
                "FUN_00104470",
                "FUN_001043d0",
                "FUN_0010be88",
                "FUN_00104120",
                "FUN_0011a170",
                "FUN_0011a2e0",
                "FUN_00104320",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001046a0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_0010bf20",
                "FUN_001047a0",
                "FUN_001044b0",
                "FUN_00128480",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 decompile_and_improve_0010554f(void)\n\n{\n  uint *temp_ptr;\n  byte byte_value;\n  code *code_var3;\n  undefined8 *sections_array_ptr;\n  undefined init_value;\n  ushort temp_var6;\n  char success;\n  char char_var8;\n  undefined4 return_value;\n  int temp_var10;\n  int cmp_result;\n  uint temp_var12;\n  uint temp_var13;\n  long section_index;\n  long *current_section;\n  undefined8 new_symbol;\n  undefined *debug_link_buffer;\n  undefined8 new_temp_var17;\n  size_t len;\n  size_t len2;\n  long *__dest;\n  long *current_section;\n  void *allocation_ptr0;\n  void *allocation_ptr1;\n  ulong new_temp_var21;\n  char *string_var;\n  char *new_temp_var22;\n  long temp_var23;\n  ulong ulong_var24;\n  long *merged_notes_list;\n  undefined8 *new_temp_var26;\n  int new_temp_var27;\n  long *section_list;\n  ulong new_temp_var29;\n  ulong *stab_entry_ptr;\n  char *error_message;\n  undefined4 *stab_symbol_ptr;\n  undefined *temp_ptr;\n  long *merged_notes_list;\n  char **section_names;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **pointer_pointer_undefined36;\n  long section_size;\n  bool is_binary;\n  byte is_loop;\n  long binary;\n  ulong num_sections;\n  char param_36;\n  undefined4 *stab_data;\n  ulong gap_size;\n  char *section_name;\n  undefined *section_sizes;\n  uint param_39;\n  long *sections;\n  undefined8 param_1;\n  undefined8 debug_link_name;\n  long section_offset;\n  char *section_contents;\n  long current_section;\n  long *relocations;\n  ulong section_size;\n  long section_index;\n  long prefix_len;\n  void *debug_link_contents;\n  long param_234;\n  undefined8 section_name_suffix;\n  byte is_stab2;\n  byte is_stab;\n  undefined8 debug_link_section_size;\n  ushort section_attributes;\n  long *section_sizes;\n  char is_function;\n  char *filename;\n  undefined symbol_type;\n  short symbol_value;\n  \n  is_loop = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    gap_size = 0;\n    section_sizes = (undefined *)0x0;\n    sections = (long *)0x0;\n    new_temp_var29 = gap_size;\n  }\n  else {\n    section_index = (ulong)stab_section_count * 8;\n    sections = (long *)xmalloc(section_index);\n    section_sizes = sections;\n    bfd_map_over_sections(binary,get_sections,&symbol_table);\n    qsort(sections,(ulong)stab_section_count,8,compare_section_lma);\n    section_sizes = (undefined *)xmalloc(section_index);\n    is_binary = DAT_00127998 != '\\0';\n    temp_ptr = section_sizes;\n    for (; section_index != 0; section_index = section_index + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)is_loop * -2 + 1;\n    }\n    if (is_binary) {\n      new_temp_var29 = 0;\n      gap_size = 0;\n      do {\n        stab_entry_ptr = (ulong *)(section_sizes + new_temp_var29 * 8);\n        section_list = sections + new_temp_var29;\n        new_temp_var21 = gap_size;\n        do {\n          gap_size = new_temp_var21;\n          if (stab_section_count - 1 <= (uint)new_temp_var29) goto LAB_00107cd1;\n          new_temp_var29 = (ulong)((uint)new_temp_var29 + 1);\n          temp_var12 = bfd_octets_per_byte(binary,*section_list);\n          temp_var13 = bfd_octets_per_byte(binary);\n          section_index = *section_list;\n          if ((*(uint *)(section_index + 0x24) & 0x102) != 0x102) break;\n          new_temp_var21 = (ulong)temp_var13 * *(long *)(section_list[1] + 0x38);\n          ulong_var24 = (ulong)temp_var12 * *(long *)(section_index + 0x38) + *(long *)(section_index + 0x40);\n          if (new_temp_var21 <= ulong_var24) break;\n          new_temp_var21 = new_temp_var21 - ulong_var24;\n          success = bfd_set_section_size();\n          if (success == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,binary,*section_list);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *stab_entry_ptr = new_temp_var21;\n          section_list = section_list + 1;\n          stab_entry_ptr = stab_entry_ptr + 1;\n        } while (gap_size < new_temp_var21);\n      } while( true );\n    }\n    gap_size = 0;\nLAB_00107cd1:\n    new_temp_var29 = gap_size;\n    if (DAT_00127989 != '\\0') {\n      temp_var12 = bfd_octets_per_byte(binary);\n      section_index = sections[stab_section_count - 1];\n      new_temp_var21 = DAT_00127990 * (ulong)temp_var12;\n      ulong_var24 = *(long *)(section_index + 0x40) + (ulong)temp_var12 * *(long *)(section_index + 0x38);\n      if (ulong_var24 < new_temp_var21) {\n        success = bfd_set_section_size();\n        if (success == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,binary,sections[stab_section_count - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          new_temp_var29 = new_temp_var21 - ulong_var24;\n          *(ulong *)(section_sizes + (ulong)(stab_section_count - 1) * 8) = new_temp_var29;\n          if (new_temp_var29 <= gap_size) {\n            new_temp_var29 = gap_size;\n          }\n        }\n      }\n    }\n  }\n  gap_size = new_temp_var29;\n  section_list = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    stab_data = (undefined4 *)0x0;\n  }\n  else {\n    pointer_pointer_undefined36 = &PTR_sstring_vartab_00125c60;\n    stab_data = (undefined4 *)xmalloc(0x60);\n    stab_symbol_ptr = stab_data;\n    for (section_index = 0x18; section_index != 0; section_index = section_index + -1) {\n      *stab_symbol_ptr = 0;\n      stab_symbol_ptr = stab_symbol_ptr + (ulong)is_loop * -2 + 1;\n    }\n    section_name = (char *)0x0;\n    do {\n      temp_ptr = *pointer_pointer_undefined36;\n      section_index = bfd_get_section_by_name(unaff_R14,temp_ptr);\n      section_size = bfd_get_section_by_name();\n      if ((section_index != 0) && (section_size != 0)) {\n        temp_var23 = *(long *)(section_index + 0x40);\n        allocation_ptr0 = (void *)xmalloc(temp_var23);\n        success = bfd_get_section_contents(unaff_R14,section_index,allocation_ptr0,0,temp_var23);\n        if (success == '\\0') {\n          return_value = bfd_get_error();\n          bfd_errmsg(return_value);\n          file_pointerrintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(section_name);\n          free(allocation_ptr0);\n        }\n        else {\n          new_temp_var29 = *(ulong *)(section_size + 0x40);\n          allocation_ptr1 = (void *)xmalloc(new_temp_var29 + 1);\n          param_36 = bfd_get_section_contents(unaff_R14,section_size,allocation_ptr1,0);\n          if (param_36 == '\\0') {\n            return_value = bfd_get_error();\n            bfd_errmsg(return_value);\n            file_pointerrintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(section_name);\n          }\n          else {\n            *(undefined *)((long)allocation_ptr1 + new_temp_var29) = 0;\n            if ((section_name != (char *)0x0) ||\n               (section_name = (char *)start_stab_constprop_0(unaff_R14,1,section_list),\n               section_name != (char *)0x0)) {\n              current_section = 0;\n              section_offset = 0;\n              for (pvVar35 = allocation_ptr0; pvVar35 <= (void *)((long)allocation_ptr0 + temp_var23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                new_temp_var21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                byte_value = *(byte *)((long)pvVar35 + 4);\n                return_value = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                section_index = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (byte_value == 0) {\n                  section_offset = current_section;\n                  current_section = current_section + section_index;\n                }\n                else {\n                  ulong_var24 = (new_temp_var21 & 0xffffffff) + section_offset;\n                  if (ulong_var24 < new_temp_var29) {\n                    error_message = (char *)((long)allocation_ptr1 + ulong_var24);\n                    section_contents = (char *)0x0;\n                    while( true ) {\n                      len = strlen(error_message);\n                      if (((len == 0) || (new_temp_var22 = error_message + (len - 1), *new_temp_var22 != '\\')) ||\n                         ((ulong)((long)allocation_ptr0 + temp_var23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *new_temp_var22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      temp_var10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      new_temp_var21 = (ulong)(uint)(temp_var10 + (int)section_offset);\n                      if (new_temp_var29 <= new_temp_var21) break;\n                      error_message = (char *)concat(error_message,(long)allocation_ptr1 + new_temp_var21,0);\n                      *new_temp_var22 = '\\';\n                      free(section_contents);\n                      section_contents = error_message;\n                    }\n                    new_temp_var17 = *unaff_R14;\n                    new_temp_var22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    file_pointerrintf(_stderr,new_temp_var22,new_temp_var17,temp_ptr,((long)pvVar35 - (long)allocation_ptr0) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byte_value,return_value,section_index,error_message);\n                    success = parse_stab(stab_data,section_name,byte_value);\n                    if (success == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(section_contents);\n                      free(section_name);\n                      free(allocation_ptr0);\n                      free(allocation_ptr1);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    new_temp_var17 = *unaff_R14;\n                    error_message = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    file_pointerrintf(_stderr,error_message,new_temp_var17,temp_ptr,((long)pvVar35 - (long)allocation_ptr0) / 0xc,\n                            new_temp_var21 & 0xffffffff,(ulong)byte_value,((long)pvVar35 - (long)allocation_ptr0) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(allocation_ptr0);\n              goto LAB_001058eb;\n            }\n          }\n          free(allocation_ptr1);\n          free(allocation_ptr0);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      pointer_pointer_undefined36 = pointer_pointer_undefined36 + 2;\n    } while (pointer_pointer_undefined36 != (undefined **)&DAT_00125c90);\n    if ((section_name != (char *)0x0) && (success = finish_stab(), success == '\\0')) {\nLAB_00105981:\n      free(stab_data);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      section_index = 0;\n      for (current_section = section_list; current_section < section_list + num_sections; current_section = current_section + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*current_section,&symbol_table);\n        if (is_function == '-') {\n          if (((section_index == 0) && (section_index = start_stab_constprop_0(unaff_R14,0,section_list), section_index == 0))\n             || ((filename == (char *)0x0 || (*filename == '\\0')))) goto LAB_00105981;\n          error_message = (char *)0x0;\n          new_temp_var22 = filename;\n          while (((*new_temp_var22 != '\\0' && (len = strlen(new_temp_var22), new_temp_var22[len - 1] == '\\')) &&\n                 (current_section + 1 < section_list + num_sections))) {\n            string_var = (char *)xstrdup(new_temp_var22);\n            len = strlen(string_var);\n            string_var[len - 1] = '\\0';\n            new_temp_var22 = (char *)concat(string_var,*(undefined8 *)(current_section[1] + 8),0);\n            free(string_var);\n            free(error_message);\n            current_section = current_section + 1;\n            error_message = new_temp_var22;\n          }\n          save_stab(symbol_type,(int)symbol_value,section_sizes,new_temp_var22);\n          param_36 = parse_stab(stab_data,section_index,symbol_type);\n          if (param_36 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((section_index != 0) && (success = finish_stab(), success == '\\0')) goto LAB_00105981;\n    }\n    if (param_36 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (num_sections != 0)) {\n        section_sizes = (long *)0x0;\n        relocations = section_list;\n        section_index = 0;\n        section_size = num_sections;\n        prefix_len = 0;\n        new_temp_var26 = (undefined8 *)&result;\n        for (section_index = 0x22; section_index != 0; section_index = section_index + -1) {\n          *(undefined4 *)new_temp_var26 = 0;\n          new_temp_var26 = (undefined8 *)((long)new_temp_var26 + (ulong)is_loop * -8 + 4);\n        }\n        success = '\\0';\n        line_record = (int *)0x0;\n        temp_var12 = 0;\n        section_name = (char *)0x0;\n        section_contents = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= section_index) goto LAB_00105590;\n            section_index = section_list[section_index];\n            char_var8 = bfd_coff_get_syment(unaff_R14,section_index,&stack0x000000e0);\n            section_size = prefix_len;\n            if (char_var8 == '\\0') {\n              return_value = bfd_get_error();\n              bfd_errmsg(return_value);\n              error_message = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            error_message = *(char **)(section_index + 8);\n            new_temp_var26 = (undefined8 *)0x0;\n            section_index = section_index + 1;\n            prefix_len = (ulong)is_stab + 1 + prefix_len;\n            if (is_stab != 0) {\n              new_temp_var26 = &result;\n              char_var8 = bfd_coff_get_auxent(unaff_R14,section_index,0);\n              if (char_var8 == '\\0') {\n                return_value = bfd_get_error();\n                bfd_errmsg(return_value);\n                error_message = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (section_contents != (char *)section_size) break;\n            if (is_stab2 != 0x67) {\n              char_var8 = debug_set_filename(stab_data);\n              if (char_var8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            section_contents = (char *)param_234;\n            char_var8 = debug_set_filename(stab_data);\n            if (char_var8 == '\\0') goto LAB_00105981;\n          }\n          temp_var6 = section_name_suffix._6_2_;\n          if ((char)is_stab2 < '\\0') {\n            if (is_stab2 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            temp_var23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&symbol_table);\n            if (temp_var23 == 0) break;\n            char_var8 = parse_coff_symbol_constprop_0_isra_0(&symbol_table,section_index,section_size);\n          }\n          else {\n            if (is_stab2 < 100) {\n              switch(is_stab2) {\n              case 3:\n                if (section_name_suffix._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)section_name_suffix._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                line_record = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                temp_var12 = (uint)temp_var6;\n                section_name = error_message;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(is_stab2) {\n            case 100:\n              temp_var10 = strcmp(error_message,\".bb\");\n              if (temp_var10 == 0) {\n                char_var8 = debug_start_block(stab_data);\n              }\n              else {\n                temp_var10 = strcmp(error_message,\".eb\");\n                if (temp_var10 != 0) goto switchD_00106e1a_caseD_68;\n                char_var8 = debug_end_block(stab_data);\n              }\n              break;\n            case 0x65:\n              temp_var10 = strcmp(error_message,\".bf\");\n              if (temp_var10 == 0) {\n                if (section_name != (char *)0x0) {\n                  temp_var13 = (int)temp_var12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  section_size = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&symbol_table,section_size,\n                                      temp_var13 ^ (temp_var12 ^ temp_var13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,new_temp_var26,0,stab_data);\n                  if ((section_size == 0) || (success = debug_record_function(stab_data), success == '\\0'))\n                  goto LAB_00105981;\n                  if (line_record != (int *)0x0) {\n                    temp_var10 = 0;\n                    if (is_stab != 0) {\n                      temp_var10 = section_attributes - 1;\n                    }\n                    section_index = *(long *)(*(long *)(section_index + 0x20) + 0x30);\n                    while( true ) {\n                      new_temp_var27 = line_record[4];\n                      if (new_temp_var27 == 0) break;\n                      char_var8 = debug_record_line(stab_data,temp_var10 + new_temp_var27,\n                                                *(long *)(line_record + 6) + section_index);\n                      line_record = line_record + 4;\n                      if (char_var8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  temp_var12 = 0;\n                  line_record = (int *)0x0;\n                  section_name = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error_message = \"%ld: .bf without preceding function\";\n              }\n              else {\n                temp_var10 = strcmp(error_message,\".ef\");\n                if (temp_var10 != 0) goto switchD_00106e1a_caseD_68;\n                if (success != '\\0') {\n                  success = debug_end_function(stab_data);\n                  if (success == '\\0') goto LAB_00105981;\n                  success = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error_message = \"%ld: unexpected .ef\\n\";\n              }\n              new_temp_var17 = dcgettext(0,error_message,5);\n              non_fatal(new_temp_var17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (char_var8 != '\\0');\n      }\n      else {\n        error_message = \"%s: no recognized debugging information\";\nLAB_00105968:\n        new_temp_var17 = dcgettext(0,error_message,5);\n        non_fatal(new_temp_var17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (num_sections != 0) {\n        section_list = DAT_001278d0 + num_sections;\n        current_section = DAT_001278d0;\n        do {\n          temp_var12 = *(uint *)(*current_section + 0x18);\n          if ((temp_var12 & 0x1000000) != 0) {\n            *(uint *)(*current_section + 0x18) = temp_var12 & 0xfeffffff;\n          }\n          current_section = current_section + 1;\n        } while (section_list != current_section);\n      }\n    }\n    else {\n      for (section_index = *(long *)(binary + 0x90); section_index != 0; section_index = *(long *)(section_index + 8)) {\n        if (*(long *)(section_index + 0xe8) != 0) {\n          temp_ptr = (uint *)(*(long *)(section_index + 0xe8) + 0x18);\n          *temp_ptr = *temp_ptr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      section_index = xmalloc();\n      section_list = DAT_001278d0;\n      param_39 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = section_index;\n      if (num_sections == 0) {\n        new_temp_var29 = 0;\n      }\n      else {\n        new_temp_var29 = 0;\n        section_fill = 0;\n        do {\n          temp_var10 = DAT_001279c0;\n          current_section = (long *)section_list[section_fill];\n          code_var3 = (code *)current_section[4];\n          temp_var12 = *(uint *)(current_section + 3);\n          current_section = (long *)current_section[1];\n          merged_notes_list = current_section;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            new_temp_var27 = 0;\n            new_temp_var26 = DAT_001279c8;\n            while ((new_temp_var27 < temp_var10 && (error_message = (char *)new_temp_var26[5], error_message != (char *)0x0))) {\n              if (error_message != \"\") {\n                cmp_result = strcmp(error_message,(char *)current_section);\n                if (cmp_result == 0) {\n                  free(error_message);\n                  new_temp_var21 = new_temp_var29 + 1;\n                  new_temp_var26[5] = \"\";\n                  new_symbol = create_new_symbol(new_temp_var26);\n                  new_temp_var17 = DAT_001278f0;\n                  *(undefined8 *)(section_index + new_temp_var29 * 8) = new_symbol;\n                  section_size = htab_elements(new_temp_var17);\n                  if ((section_size != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                new_temp_var26 = (undefined8 *)*new_temp_var26;\n              }\n              new_temp_var27 = new_temp_var27 + 1;\n            }\n          }\n          section_size = htab_elements(DAT_001278f0);\n          new_temp_var21 = new_temp_var29;\n          if ((section_size != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (current_section != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)current_section == '_') && (*(char *)((long)current_section + 1) == '_')) &&\n                 (temp_var10 = strcmp((char *)((ulong)(*(char *)((long)current_section + 2) == '_') +\n                                          (long)current_section),\"__gnu_lto_slim\"), temp_var10 == 0)) {\n                new_temp_var17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(new_temp_var17);\n              }\n            }\n            is_specified = 0;\n            section_sizes = current_section;\n            section_size = htab_find(DAT_001278f0);\n            if (((section_size == 0) || (merged_notes_list = *(long **)(section_size + 8), current_section == merged_notes_list)) &&\n               (merged_notes_list = current_section, section_names = DAT_001278f8, (temp_var12 & 0x100) != 0)) {\n              for (; section_names != (char **)0x0; section_names = (char **)section_names[3]) {\n                temp_var10 = strcmp(*section_names,(char *)current_section);\n                if (temp_var10 == 0) {\n                  merged_notes_list = (long *)section_names[1];\n                  break;\n                }\n              }\n            }\n            current_section[1] = (long)merged_notes_list;\n            success = *(char *)merged_notes_list;\n            if (success != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            error_message = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              section_size = unaff_R14[1];\n              success = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          success = *(char *)current_section;\n          if (success == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          error_message = DAT_00127928;\n          section_size = unaff_R14[1];\n          if (*(char *)(section_size + 0x1c) == success) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((temp_var12 & 0x82) == 0 && (code_var3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              merged_notes_list = (long *)((long)merged_notes_list + 1);\n              current_section[1] = (long)merged_notes_list;\n              goto joined_r0x00106565;\n            }\n            success = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (success == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              merged_notes_list = (long *)((long)merged_notes_list + 1);\n              current_section[1] = (long)merged_notes_list;\n              len = strlen((char *)merged_notes_list);\n              section_size = len + 2;\nLAB_001066bc:\n              len = strlen(error_message);\n              current_section = (long *)xmalloc(len + section_size);\n              goto LAB_001066d0;\n            }\n            *(char *)merged_notes_list = success;\n            current_section[1] = (long)merged_notes_list;\n            new_temp_var29 = new_temp_var21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              new_temp_var29 = new_temp_var21;\n              if (error_message == (char *)0x0) goto LAB_00105b32;\n              len = strlen((char *)merged_notes_list);\n              len2 = strlen(error_message);\n              __dest = (long *)xmalloc(len2 + len + 1);\n              current_section = __dest;\n            }\n            else {\nLAB_0010668d:\n              error_message = DAT_00127928;\n              if ((*(char *)(section_size + 0x1c) != '\\0') && (success != *(char *)(section_size + 0x1c)))\n              goto joined_r0x00106565;\n              len = strlen((char *)merged_notes_list);\n              section_size = len + 2;\n              if (error_message != (char *)0x0) goto LAB_001066bc;\n              current_section = (long *)xmalloc(section_size);\nLAB_001066d0:\n              __dest = (long *)((long)current_section + 1);\n              *(char *)current_section = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            error_message = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              len = strlen(error_message);\n              __dest = (long *)((long)__dest + len);\n            }\n            strcpy((char *)__dest,(char *)merged_notes_list);\n            current_section[1] = (long)current_section;\n            merged_notes_list = current_section;\n            new_temp_var29 = new_temp_var21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((temp_var12 & 0x20) == 0) &&\n             (((temp_var12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(current_section[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_39 == 0) &&\n                (((temp_var12 & 0x82) != 0 || ((*(byte *)(current_section[4] + 0x25) & 0x10) != 0)))) ||\n               (temp_var10 = bfd_decode_symclass(current_section), temp_var10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                section_size = htab_find();\n                if (section_size == 0) goto LAB_00105c07;\n              }\n              else {\n                is_specified = is_specified & 0xffffffffffffff00;\n                section_sizes = merged_notes_list;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&symbol_table);\n                if (is_function == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((temp_var12 & 0x82) == 0) && (code_var3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)) {\n              if ((temp_var12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (section_size = *(long *)(current_section[4] + 0xd0), section_size == 0)) ||\n                   (*(long *)(section_size + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    success = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              success = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (success == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            section_size = htab_find();\n            if (section_size != 0) {\nLAB_0010687f:\n              new_temp_var17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(new_temp_var17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            is_specified = is_specified & 0xffffffffffffff00;\n            section_sizes = merged_notes_list;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&symbol_table);\n            if (is_function != '\\0') goto LAB_0010687f;\n          }\n          if ((temp_var12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              is_specified = is_specified & 0xffffffffffffff00;\n              section_sizes = merged_notes_list;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&symbol_table);\n              if (is_function != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            section_size = htab_find();\n            if (section_size == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((temp_var12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              section_size = htab_find();\n              if (section_size != 0) goto LAB_00105c2c;\n            }\n            else {\n              is_specified = is_specified & 0xffffffffffffff00;\n              section_sizes = merged_notes_list;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&symbol_table);\n              if (is_function != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            success = is_strip_section_isra_0(current_section[4]);\n            if (success == '\\0') {\n              if (((temp_var12 & 0x800002) == 0) && (code_var3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((temp_var12 & 0x82) != 0) {\n                  success = is_specified_symbol(merged_notes_list);\n                  if ((success == '\\0') &&\n                     ((section_size = htab_elements(DAT_001279f8), section_size == 0 ||\n                      (success = is_specified_symbol(merged_notes_list), success != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (temp_var13 = *(uint *)(current_section + 3), (temp_var13 & 0x200000) != 0)) ||\n                         (section_size = *current_section, section_size == 0)) ||\n                        ((*(int *)(*(long *)(section_size + 8) + 8) != 5 ||\n                         (*(long *)(section_size + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)current_section + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    temp_var13 = *(uint *)(current_section + 3);\n                  }\n                  *(uint *)(current_section + 3) = temp_var13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((temp_var12 & 1) != 0) && (success = is_specified_symbol(merged_notes_list), success != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (success = is_specified_symbol(merged_notes_list), success != '\\0'))\n                {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xff7ffffd | 0x80;\n                }\n                if (code_var3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_index + new_temp_var29 * 8) = current_section;\n              new_temp_var29 = new_temp_var29 + 1;\n            }\n          }\n          section_fill = section_fill + 1;\n        } while (num_sections != section_fill);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        new_temp_var26 = DAT_001279c8;\n        temp_var10 = DAT_001279c0;\n        for (section_size = 0; section_size < temp_var10; section_size = section_size + 1) {\n          error_message = (char *)new_temp_var26[5];\n          if (error_message == (char *)0x0) {\n            temp_var23 = new_temp_var29 * 8;\n            new_temp_var29 = new_temp_var29 + 1;\n            new_temp_var17 = create_new_symbol(new_temp_var26,binary);\n            *(undefined8 *)(section_index + temp_var23) = new_temp_var17;\n            temp_var10 = DAT_001279c0;\n          }\n          else if (error_message != \"\") {\n            new_temp_var17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(new_temp_var17,error_message);\n          }\n          new_temp_var26 = (undefined8 *)*new_temp_var26;\n        }\n      }\n      is_binary = DAT_001279a0 == '\\0';\n      *(undefined8 *)(section_index + new_temp_var29 * 8) = 0;\n      if ((is_binary) || (stab_data == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = new_temp_var29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      temp_var10 = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((temp_var10 == 5) || (temp_var10 == 2)) {\n        debug_link_contents = (void *)0x0;\n        success = write_stabs_in_sections_debugging_info_constprop_0\n                          (binary,stab_data,&stack0x000000c0,&result,&stack0x000000e0,\n                           &symbol_table);\n        if (success != '\\0') {\n          section_index = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          section_size = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((section_index == 0) || (section_size == 0)) ||\n              (success = bfd_set_section_size(section_index,debug_link_section_size), success == '\\0')) ||\n             (success = bfd_set_section_size(section_size,section_sizes), success == '\\0')) {\n            error_message = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_index + 0x7c) = 2;\n            *(undefined4 *)(section_size + 0x7c) = 0;\n            success = bfd_set_section_contents(binary,section_index,relocations,0,debug_link_section_size);\n            if ((success != '\\0') &&\n               (success = bfd_set_section_contents(binary,section_size,debug_link_contents,0,section_sizes), success != '\\0')\n               ) {\n              free(stab_data);\n              goto LAB_00105cfa;\n            }\n            error_message = \"can\\'t set debugging section contents\";\n          }\n          new_temp_var17 = dcgettext(0,error_message,5);\n          bfd_nonfatal_message(0,binary,0,new_temp_var17);\n          free(debug_link_contents);\n          free(stab_data);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        new_temp_var17 = **(undefined8 **)(binary + 8);\n        new_symbol = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,binary,0,new_symbol,new_temp_var17);\n      }\n      free(stab_data);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,DAT_001278d0);\n      temp_var10 = bfd_get_error();\n      if (temp_var10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    section_index = htab_elements(DAT_00127a18);\n    if (((section_index != 0) ||\n        ((((section_index = htab_elements(DAT_00127a28), section_index != 0 ||\n           (section_index = htab_elements(DAT_00127a08), section_index != 0)) ||\n          (section_index = htab_elements(DAT_00127a00), section_index != 0)) ||\n         ((section_index = htab_elements(DAT_001279f8), section_index != 0 ||\n          (section_index = htab_elements(DAT_001279f0), section_index != 0)))))) ||\n       ((((section_index = htab_elements(DAT_001278f0), section_index != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278c8,num_sections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,binary);\n    bfd_map_over_sections(unaff_R14,copy_section,binary);\n    for (new_temp_var26 = DAT_001279e0; sections_array_ptr = DAT_001279d8, new_temp_var26 != (undefined8 *)0x0;\n        new_temp_var26 = (undefined8 *)*new_temp_var26) {\n      success = bfd_set_section_contents(binary,new_temp_var26[5],new_temp_var26[4],0,new_temp_var26[3]);\n      if (success == '\\0') {\n        bfd_nonfatal_message(0,binary,new_temp_var26[5],0);\n        return 0;\n      }\n    }\n    for (; sections_array_ptr != (undefined8 *)0x0; sections_array_ptr = (undefined8 *)*sections_array_ptr) {\n      new_temp_var17 = *(undefined8 *)(sections_array_ptr[5] + 0x60);\n      success = bfd_set_section_contents(binary,new_temp_var17,sections_array_ptr[4],0,sections_array_ptr[3]);\n      if (success == '\\0') {\n        bfd_nonfatal_message(0,binary,new_temp_var17,0);\n        return 0;\n      }\n    }\n    if (merged_notes_list == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        new_temp_var17 = *unaff_R14;\n        new_symbol = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(new_symbol,new_temp_var17);\n      }\n    }\n    else {\n      section_list = (long *)0x0;\n      for (new_temp_var26 = *(undefined8 **)(binary + 0x90); new_temp_var26 != (undefined8 *)0x0;\n          new_temp_var26 = (undefined8 *)new_temp_var26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(new_temp_var26[0x1a] + 4) == 7 &&\n            (success = startswith_lto_priv_0_lto_priv_0(*new_temp_var26,\".gnu.build.attributes\"),\n            success != '\\0')))) {\n          if (section_list == (long *)0x0) {\n            section_list = merged_notes_list;\n          }\n          current_section = merged_notes_list;\n          if (*(undefined8 **)(*section_list + 0x60) == new_temp_var26) {\nLAB_0010625f:\n            error_message = \"error: failed to merge notes\";\n            if (section_list[1] != 0) {\n              success = bfd_set_section_contents(binary,new_temp_var26,section_list[1],0,section_list[2]);\n              if (success == '\\0') {\n                new_temp_var17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,binary,new_temp_var26,new_temp_var17);\n                return 0;\n              }\n              section_list = (long *)section_list[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              section_list = current_section;\n              if (*(undefined8 **)(*current_section + 0x60) == new_temp_var26) goto LAB_0010625f;\n              section_list = (long *)current_section[3];\n              current_section = section_list;\n            } while (section_list != (long *)0x0);\n            error_message = \"error: failed to locate merged notes\";\n          }\n          new_temp_var17 = dcgettext(0,error_message,5);\n          bfd_nonfatal_message(0,binary,new_temp_var26,new_temp_var17);\n        }\nLAB_001061be:\n      }\n      do {\n        section_list = (long *)merged_notes_list[3];\n        free((void *)merged_notes_list[1]);\n        free(merged_notes_list);\n        merged_notes_list = section_list;\n      } while (section_list != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (success = bfd_fill_in_gnu_debuglink_section(binary,debug_link_name), section_index = DAT_00127a30,\n       success != '\\0')) {\n      if (section_sizes != (undefined *)0x0) {\n        if (0x2000 < gap_size) {\n          gap_size = 0x2000;\n        }\n        section_index = 0;\n        debug_link_buffer = (undefined *)xmalloc(gap_size);\n        init_value = DAT_00127999;\n        temp_ptr = debug_link_buffer;\n        for (gap_size = gap_size & 0xffffffff; gap_size != 0; gap_size = gap_size - 1) {\n          *temp_ptr = init_value;\n          temp_ptr = temp_ptr + (ulong)is_loop * -2 + 1;\n        }\n        for (; (uint)section_index < stab_section_count; section_index = section_index + 1) {\n          new_temp_var29 = *(ulong *)(section_sizes + section_index * 8);\n          if (new_temp_var29 != 0) {\n            section_size = *(long *)(*sections + 0x40) - new_temp_var29;\n            do {\n              new_temp_var21 = 0x2000;\n              if (new_temp_var29 < 0x2001) {\n                new_temp_var21 = new_temp_var29;\n              }\n              success = bfd_set_section_contents(binary,*sections,debug_link_buffer,section_size,new_temp_var21);\n              if (success == '\\0') {\n                bfd_nonfatal_message(0,binary,*sections,0);\n                free(debug_link_buffer);\n                return 0;\n              }\n              section_size = section_size + new_temp_var21;\n              new_temp_var29 = new_temp_var29 - new_temp_var21;\n            } while (new_temp_var29 != 0);\n          }\n          sections = sections + 1;\n        }\n        free(debug_link_buffer);\n        free(section_sizes);\n      }\n      return_value = (**(code **)(*(long *)(binary + 8) + 0x140))(unaff_R14);\n      if ((char)return_value != '\\0') {\n        if (DAT_00127930 == 0) {\n          return return_value;\n        }\n        success = bfd_alt_mach_code(binary,DAT_00127930 & 0xffffffff);\n        new_temp_var29 = DAT_00127930;\n        if (success == '\\0') {\n          new_temp_var17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(new_temp_var17,new_temp_var29);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            new_temp_var17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(new_temp_var17);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127930;\n            return return_value;\n          }\n          new_temp_var17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(new_temp_var17);\n          return return_value;\n        }\n        return return_value;\n      }\n      new_temp_var17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,binary,0,new_temp_var17);\n    }\n    else {\n      new_temp_var17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,binary,0,new_temp_var17,section_index);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "decompile_and_improve_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010554f": "decompile_and_improve_0010554f",
                "__ptr": "debug_link_buffer",
                "__ptr_00": "allocation_ptr0",
                "__ptr_01": "allocation_ptr1",
                "__ptr_02": "stab_data",
                "__s": "string_var",
                "_param_15": "line_record",
                "_param_41": "is_specified",
                "_param_9": "section_fill",
                "bVar2": "byte_value",
                "bVar38": "is_binary",
                "bVar39": "is_loop",
                "cVar2": "new_temp_var2",
                "cVar7": "success",
                "cVar8": "char_var8",
                "fp": "file_pointer",
                "iVar10": "temp_var10",
                "iVar11": "cmp_result",
                "iVar27": "new_temp_var27",
                "in_R10": "merged_notes_list",
                "in_stack_00000068": "param_1",
                "in_stack_00000068._4_4_": "stab_section_count",
                "in_stack_000000d8": "prefix_len",
                "in_stack_000000f8": "section_name_suffix",
                "lVar14": "section_index",
                "lVar15": "long_var15",
                "lVar23": "temp_var23",
                "lVar25": "section",
                "lVar37": "section_size",
                "param_1": "param_7",
                "param_12": "gap_size",
                "param_13": "section_name",
                "param_14": "section_sizes",
                "param_15": "param_39",
                "param_17": "sections",
                "param_2": "param_21",
                "param_21": "debug_link_name",
                "param_23": "section_offset",
                "param_24": "section_contents",
                "param_26": "current_section",
                "param_3": "param_23",
                "param_30": "relocations",
                "param_31": "section_size",
                "param_32": "section_index",
                "param_33": "debug_link_contents",
                "param_36": "is_stab2",
                "param_37": "is_stab",
                "param_38": "debug_link_section_size",
                "param_39": "section_attributes",
                "param_4": "param_40",
                "param_40": "section_sizes",
                "param_41": "is_function",
                "param_42": "filename",
                "param_43": "symbol_type",
                "param_44": "symbol_value",
                "param_7": "binary",
                "param_8": "num_sections",
                "param_9": "param_36",
                "pcVar22": "new_temp_var22",
                "pcVar3": "code_var3",
                "pcVar31": "error_message",
                "plVar15": "current_section",
                "plVar20": "current_section",
                "plVar25": "merged_notes_list",
                "plVar28": "section_list",
                "ppcVar34": "section_names",
                "ppuVar36": "pointer_pointer_undefined36",
                "puVar1": "temp_ptr",
                "puVar26": "new_temp_var26",
                "puVar30": "stab_entry_ptr",
                "puVar32": "stab_symbol_ptr",
                "puVar33": "temp_ptr",
                "puVar4": "sections_array_ptr",
                "sVar18": "len",
                "sVar19": "len2",
                "stack0x00000110": "result",
                "stack0x00000140": "symbol_table",
                "stack0x00000148": "result",
                "uVar12": "temp_var12",
                "uVar13": "temp_var13",
                "uVar16": "new_symbol",
                "uVar17": "new_temp_var17",
                "uVar21": "new_temp_var21",
                "uVar24": "ulong_var24",
                "uVar29": "new_temp_var29",
                "uVar30": "ulong_var30",
                "uVar5": "init_value",
                "uVar6": "temp_var6",
                "uVar9": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "1": "check_input_file_format",
                    "2": "check_supported_architecture",
                    "3": "check_architecture",
                    "4": "identify_architecture",
                    "6": "check_file_architecture",
                    "7": "recognize_input_file_format"
                },
                "bfd_get_arch": {
                    "1": "get_architecture"
                },
                "bfd_get_archive_filename": {
                    "1": "get_archive_filename"
                },
                "bfd_get_mach": {
                    "1": "get_machine"
                },
                "bfd_printable_arch_mach": {
                    "1": "printable_arch_mach"
                },
                "dcgettext": {
                    "1": "translate_text"
                },
                "iVar1": {
                    "1": "arch_result",
                    "12": "architecture",
                    "2": "file_architecture",
                    "3": "architecture_type"
                },
                "non_fatal": {
                    "2": "handle_error"
                },
                "param_1": {
                    "1": "file_name"
                },
                "uVar2": {
                    "1": "arch_value",
                    "10": "architecture",
                    "2": "format",
                    "3": "machine",
                    "5": "arch"
                },
                "uVar3": {
                    "1": "printable_arch",
                    "11": "filename",
                    "2": "file_name",
                    "3": "arch_machine"
                },
                "uVar4": {
                    "1": "format_error_message",
                    "24": "error_message",
                    "5": "error_msg"
                }
            },
            "called": [
                "FUN_00104650",
                "FUN_001045a0",
                "FUN_001125fa",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 recognize_input_file_format_00105828(void)\n\n{\n  int architecture;\n  undefined4 architecture;\n  undefined8 filename;\n  undefined8 error_message;\n  \n  architecture = get_architecture();\n  if (architecture == 0) {\n    filename = get_archive_filename();\n    error_message = translate_text(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    handle_error(error_message,filename);\n  }\n  else {\n    filename = get_machine();\n    architecture = get_architecture();\n    filename = printable_arch_mach(architecture,filename);\n    error_message = translate_text(0,\"Output file cannot represent architecture `%s\\'\",5);\n    handle_error(error_message,filename);\n  }\n  return 0;\n}\n\n",
            "current_name": "recognize_input_file_format_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "recognize_input_file_format_00105828",
                "bfd_get_arch": "get_architecture",
                "bfd_get_archive_filename": "get_archive_filename",
                "bfd_get_mach": "get_machine",
                "bfd_printable_arch_mach": "printable_arch_mach",
                "dcgettext": "translate_text",
                "iVar1": "architecture",
                "non_fatal": "handle_error",
                "uVar2": "architecture",
                "uVar3": "filename",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "FUN_00104800",
                "FUN_0010551d",
                "FUN_001126c0",
                "FUN_00104400",
                "FUN_00104180",
                "FUN_001040b0",
                "FUN_001041e0",
                "FUN_00104750",
                "FUN_00114190",
                "FUN_001163d0",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_0010554f",
                "FUN_00104120",
                "FUN_00104890",
                "FUN_00113fb0",
                "FUN_00105828",
                "FUN_00115530",
                "FUN_00104440",
                "FUN_00104210",
                "FUN_00104850",
                "FUN_001048f0",
                "FUN_00104500",
                "FUN_001045f0",
                "FUN_00115f30"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = decompile_and_improve_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "FUN_00104630",
                "FUN_00104650",
                "FUN_00104860",
                "FUN_001125fa",
                "FUN_00104570",
                "FUN_001042a0",
                "FUN_00104240",
                "FUN_001152b6"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = recognize_input_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = decompile_and_improve_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "***(code ***)(***(long ***)variable + 0x158)": {
                    "1": "code_block128"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_00108072": {
                    "1": "initialize_program",
                    "2": "process_binary",
                    "3": "set_section_sizes",
                    "4": "process_and_copy_data"
                },
                "LAB_00115695": {
                    "1": "handle_section_list_error",
                    "3": "label1"
                },
                "LAB_001156b8": {
                    "1": "label3"
                },
                "LAB_0011571e": {
                    "1": "label2"
                },
                "LAB_00115860": {
                    "1": "handle_section_list_error2",
                    "2": "label2"
                },
                "LAB_00115889": {
                    "1": "handle_section_offset_error"
                },
                "PTR_": {
                    "1": ""
                },
                "_DAT_001279b0": {
                    "1": "constant_value1",
                    "2": "section_offset_value"
                },
                "_DAT_00127a40": {
                    "1": "constant_value2"
                },
                "bVar1": {
                    "1": "temp_byte",
                    "11": "byte_var",
                    "4": "flag",
                    "8": "byte_value"
                },
                "bfd_nonfatal_message": {
                    "1": "print_error_message"
                },
                "cVar3": {
                    "1": "temp_char",
                    "2": "success_flag",
                    "3": "char_variable",
                    "4": "char_var",
                    "5": "result"
                },
                "copy_private_data_0010808f": {
                    "7": "copy_private_data"
                },
                "dcgettext": {
                    "1": "get_msg",
                    "2": "get_translated_text"
                },
                "find_section_list": {
                    "6": "find_section_list"
                },
                "group_signature_isra_0": {
                    "1": "group_signature_check",
                    "2": "get_group_signature"
                },
                "lVar5": {
                    "1": "failure_message",
                    "14": "error_message",
                    "2": "error_code",
                    "3": "error_msg"
                },
                "lVar6": {
                    "1": "section_list_address",
                    "10": "section_list1",
                    "2": "section_list_pointer",
                    "4": "section_list_1",
                    "5": "section_list"
                },
                "lVar7": {
                    "1": "section_value",
                    "13": "section_offset",
                    "2": "section_list_2",
                    "5": "section_address"
                },
                "lVar8": {
                    "1": "section_info_offset",
                    "3": "section_offset",
                    "4": "section_offset2"
                },
                "process_data_00114190": {
                    "5": "process_data"
                },
                "set_alignment_00108179": {
                    "8": "set_alignment"
                },
                "uVar2": {
                    "1": "section_start",
                    "2": "undefined_var"
                },
                "uVar4": {
                    "1": "int_value",
                    "3": "uint_variable",
                    "4": "uint_var",
                    "5": "alignment_value",
                    "9": "alignment"
                },
                "unaff_R12": {
                    "1": "section_base",
                    "2": "register_r12",
                    "4": "group_signature"
                },
                "unaff_R14B": {
                    "1": "is_grouped",
                    "14": "flag",
                    "2": "register_r14_b",
                    "3": "is_flag_set"
                },
                "unaff_R15": {
                    "1": "section_info",
                    "2": "register_r15",
                    "3": "result_ptr"
                },
                "unaff_RBP": {
                    "1": "rpb",
                    "2": "base_ptr",
                    "8": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "func_params",
                    "2": "function_params",
                    "3": "parameters"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid process_and_copy_data_00108072(void)\n\n{\n  byte byte_var;\n  undefined8 undefined_var;\n  char result;\n  uint alignment;\n  long error_message;\n  long section_list1;\n  long section_offset;\n  undefined8 *parameters;\n  long base_pointer;\n  long group_signature;\n  long section_size;\n  char flag;\n  long result_ptr;\n  \n  error_message = get_translated_text(0,\"failed to set size\",5);\n  section_size = parameters[6];\n  section_list1 = find_section_list(*parameters,0,0x18);\n  if (section_list1 == 0) {\n    *(byte *)(result_ptr + 0x28) = *(byte *)(result_ptr + 0x28) | 1;\n    undefined_var = *parameters;\n    section_size = section_size + _DAT_001279b0;\n    *(long *)(result_ptr + 0x30) = section_size;\n    *(long *)(result_ptr + 0x38) = section_size;\n    section_size = parameters[7];\n    section_list1 = find_section_list(undefined_var,0,0x60);\n    if (section_list1 == 0) goto label1;\nlabel2:\n    section_offset = *(long *)(section_list1 + 0x20);\n    if ((*(byte *)(section_list1 + 0x14) & 0x40) != 0) {\n      section_offset = section_offset + section_size;\n    }\n    *(long *)(result_ptr + 0x38) = section_offset;\n    section_size = find_section_list(*parameters,0,0x200);\n    if (section_size != 0) goto handle_section_offset_error;\nlabel3:\n    alignment = *(uint *)((long)parameters + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    error_message = get_translated_text(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result_ptr + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result_ptr + 0x28) =\n         *(byte *)(result_ptr + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result_ptr;\n    parameters[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    section_offset = *(long *)(section_list1 + 0x18);\n    if ((*(byte *)(section_list1 + 0x14) & 8) == 0) {\n      section_offset = section_offset + section_size;\n    }\n    *(byte *)(result_ptr + 0x28) = *(byte *)(result_ptr + 0x28) | 1;\n    undefined_var = *parameters;\n    *(long *)(result_ptr + 0x30) = section_offset;\n    *(long *)(result_ptr + 0x38) = section_offset;\n    section_size = parameters[7];\n    section_list1 = find_section_list(undefined_var,0,0x60);\n    if (section_list1 != 0) goto label2;\nlabel1:\n    undefined_var = *parameters;\n    *(long *)(result_ptr + 0x38) = section_size + _DAT_001279b0;\n    section_size = find_section_list(undefined_var,0,0x200);\n    if (section_size == 0) goto label3;\nhandle_section_offset_error:\n    alignment = *(uint *)(section_size + 0x2c);\n    if (0x3e < alignment) {\n      set_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result_ptr + 0x7c) = alignment;\n    *(undefined4 *)(result_ptr + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result_ptr + 0x28) =\n         *(byte *)(result_ptr + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result_ptr;\n    parameters[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    section_size = parameters[0x1a];\n    section_list1 = get_group_signature(section_size,parameters[0x1c]);\n    if ((section_list1 != 0) &&\n       (section_offset = *(long *)(group_signature + 8), *(uint *)(section_list1 + 0x18) = *(uint *)(section_list1 + 0x18) | 0x20,\n       *(int *)(section_offset + 8) == 5)) {\n      *(long *)(section_size + 0xb0) = section_list1;\n      result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto label2;\n    }\n  }\n  result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nlabel2:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(result_ptr + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    display_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "process_and_copy_data_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "process_and_copy_data_00108072",
                "LAB_00115695": "label1",
                "LAB_001156b8": "label3",
                "LAB_0011571e": "label2",
                "LAB_00115860": "label2",
                "LAB_00115889": "handle_section_offset_error",
                "bVar1": "byte_var",
                "bfd_nonfatal_message": "display_error_message",
                "cVar3": "result",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_translated_text",
                "group_signature_isra_0": "get_group_signature",
                "lVar5": "error_message",
                "lVar6": "section_list1",
                "lVar7": "section_offset",
                "lVar8": "section_size",
                "set_alignment_00108179": "set_alignment",
                "uVar2": "undefined_var",
                "uVar4": "alignment",
                "unaff_R12": "group_signature",
                "unaff_R14B": "flag",
                "unaff_R15": "result_ptr",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DAT_00127a40": {
                    "1": "failure_flag",
                    "2": "error_flag"
                },
                "FUN_0010808f": {
                    "31": "copy_private_data"
                },
                "bfd_nonfatal_message": {
                    "1": "show_error_message"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "lVar1": {
                    "12": "error_message",
                    "2": "message"
                },
                "unaff_R14B": {
                    "1": "is_char_true",
                    "2": "should_copy_data",
                    "5": "is_copy_successful",
                    "7": "flag",
                    "8": "copy_successful"
                },
                "unaff_R15": {
                    "1": "data",
                    "2": "private_data",
                    "4": "data_ptr",
                    "5": "data_address",
                    "6": "base_address",
                    "9": "data_pointer"
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char copy_successful;\n  long data_pointer;\n  \n  error_message = get_error_message(0,\"failed to copy private data\",5);\n  if (copy_successful != '\\0') {\n    *(undefined4 *)(*(long *)(data_pointer + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "bfd_nonfatal_message": "print_error_message",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "unaff_R14B": "copy_successful",
                "unaff_R15": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "FUN_00108179": {
                    "1": "update_alignment",
                    "17": "set_alignment",
                    "2": "initialize_alignment",
                    "3": "process_alignment",
                    "4": "set_alignment_and_copy_data"
                },
                "cVar3": {
                    "1": "check_result",
                    "10": "result",
                    "2": "success_flag",
                    "3": "is_copy_successful"
                },
                "copy_private_data_0010808f": {
                    "9": "copy_private_data"
                },
                "data_structure": {
                    "1": "data_structure"
                },
                "dcgettext": {
                    "1": "translate_error_message",
                    "2": "get_text",
                    "4": "get_error_message"
                },
                "find_matching_value_00115d00": {
                    "3": "find_matching_value"
                },
                "group_signature_isra_0": {
                    "1": "find_matching_signature",
                    "6": "find_matching_value"
                },
                "input_value": {
                    "1": "input_value"
                },
                "lVar1": {
                    "1": "result1",
                    "2": "alignment_error",
                    "3": "matching_value",
                    "4": "value1"
                },
                "lVar2": {
                    "1": "found_value",
                    "2": "value",
                    "4": "value_2"
                },
                "lVar4": {
                    "1": "var4",
                    "2": "error_msg",
                    "20": "error_message",
                    "3": "alignment_error_message"
                },
                "lVar5": {
                    "1": "i_var5",
                    "19": "matching_value",
                    "2": "found_value"
                },
                "unaff_R12": {
                    "1": "register3",
                    "2": "register_r12",
                    "3": "r12_value",
                    "4": "r12"
                },
                "unaff_R14B": {
                    "1": "check_result",
                    "2": "r14",
                    "3": "check_flag",
                    "6": "flag"
                },
                "unaff_R15": {
                    "1": "current_structure",
                    "2": "register_r15",
                    "3": "r15_value",
                    "4": "r15"
                },
                "unaff_RBP": {
                    "1": "input2",
                    "2": "base_pointer",
                    "3": "register_bp",
                    "4": "rbp"
                },
                "unaff_RBX": {
                    "1": "input1",
                    "2": "this_pointer",
                    "3": "rbx_value",
                    "4": "base_address"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00104240",
                "FUN_0010808f"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long value1;\n  long value2;\n  char result;\n  long error_message;\n  long matching_value;\n  long base_address;\n  long rbp;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_message = get_error_message(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(base_address + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(base_address + 0x28) & 0x30;\n  *(long *)(base_address + 0x60) = r15;\n  *(undefined8 *)(base_address + 0x58) = 0;\n  if ((*(byte *)(base_address + 0x27) & 2) != 0) {\n    value1 = *(long *)(base_address + 0xd0);\n    matching_value = find_matching_value(value1,*(undefined8 *)(base_address + 0xe0));\n    if ((matching_value != 0) &&\n       (value2 = *(long *)(r12 + 8), *(uint *)(matching_value + 0x18) = *(uint *)(matching_value + 0x18) | 0x20,\n       *(int *)(value2 + 8) == 5)) {\n      *(long *)(value1 + 0xb0) = matching_value;\n      result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "cVar3": "result",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "group_signature_isra_0": "find_matching_value",
                "lVar1": "value1",
                "lVar2": "value2",
                "lVar4": "error_message",
                "lVar5": "matching_value",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "rbp",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "dealloc_memory",
                    "18": "free_memory",
                    "9": "release_memory"
                },
                "in_RAX": {
                    "1": "returned_value",
                    "3": "result",
                    "4": "return_value"
                },
                "param_7": {
                    "1": "return_val",
                    "11": "return_value"
                },
                "unaff_RBX": {
                    "1": "allocated_memory",
                    "16": "memory_block",
                    "2": "memory_to_free",
                    "4": "memory_address"
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 free_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_block);\n  return return_value;\n}\n\n",
            "current_name": "free_memory_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "1": "copy_and_set_times",
                    "10": "copy_file",
                    "2": "copy_file_with_error_handling",
                    "9": "copy_file_and_set_times"
                },
                "auVar3": {
                    "1": "result",
                    "2": "return_value"
                },
                "piVar1": {
                    "4": "error_location",
                    "5": "errno_location"
                },
                "uVar2": {
                    "7": "error_message"
                },
                "unaff_R12B": {
                    "1": "copy_needed",
                    "2": "copy_flag",
                    "20": "should_set_times",
                    "3": "copy_file"
                },
                "unaff_R13": {
                    "1": "unlink_mask",
                    "2": "file_flags",
                    "3": "flags",
                    "8": "file_permissions"
                },
                "unaff_RBP": {
                    "1": "path",
                    "18": "file_path",
                    "2": "file_name",
                    "3": "source_file"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_001040c0",
                "FUN_0011a350",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_file_00108200(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  char *file_path;\n  char should_set_times;\n  ulong file_permissions;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(error_message);\n  unlink(file_path);\n  if (should_set_times != '\\0') {\n    set_times();\n  }\n  return_value._0_8_ = file_permissions & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "current_name": "copy_file_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_file_00108200",
                "auVar3": "return_value",
                "piVar1": "errno_location",
                "uVar2": "error_message",
                "unaff_R12B": "should_set_times",
                "unaff_R13": "file_permissions",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "*piVar2": {
                    "1": "errno_value"
                },
                "FUN_00108237": {
                    "1": "close_file_and_restore_error",
                    "2": "close_file_and_restore_errno",
                    "3": "close_file_descriptor",
                    "6": "close_file_and_set_errno",
                    "8": "close_file_and_return_error"
                },
                "iVar1": {
                    "1": "saved_errno",
                    "2": "original_error_value",
                    "3": "previous_errno"
                },
                "piVar2": {
                    "1": "error_code_pointer",
                    "2": "error_pointer",
                    "3": "error_location",
                    "4": "errno_pointer"
                },
                "unaff_R12D": {
                    "2": "fd",
                    "29": "file_descriptor"
                }
            },
            "called": [
                "FUN_001043c0",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_file_and_return_error_00108237(void)\n\n{\n  int previous_errno;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  previous_errno = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = previous_errno;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_and_return_error_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_00108237",
                "iVar1": "previous_errno",
                "piVar2": "errno_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "*unaff_RBX": {
                    "1": "section_pointer"
                },
                "FUN_0010827b": {
                    "1": "process_section_match_error",
                    "2": "print_section_error",
                    "4": "handle_section_error"
                },
                "param_1": {
                    "1": "var1"
                },
                "param_2": {
                    "1": "var2"
                },
                "param_3": {
                    "1": "var3"
                },
                "param_4": {
                    "1": "var4"
                },
                "uVar1": {
                    "1": "section_name",
                    "13": "section_value",
                    "3": "section",
                    "5": "section_address"
                },
                "uVar2": {
                    "1": "error_msg",
                    "21": "error_message"
                },
                "unaff_RBX": {
                    "1": "section_name",
                    "16": "section_pointer",
                    "2": "section",
                    "7": "section_ptr"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid handle_section_error_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  \n  section_value = *section_pointer;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(error_message,section_value);\n}\n\n",
            "current_name": "handle_section_error_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "handle_section_error_0010827b",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "1": "determine_next_operation",
                    "10": "process_ebp_value",
                    "4": "process_input",
                    "8": "process_data"
                },
                "check_string_length_00113ede": {
                    "1": "calculate_string_length",
                    "11": "check_string_length"
                },
                "invert_result_001082b3": {
                    "1": "calculate_inverse_result",
                    "26": "invert_result"
                },
                "is_dwo_section_constprop_0": {
                    "1": "check_for_constprop_section",
                    "2": "check_string_section",
                    "4": "check_dwo_section",
                    "7": "check_string_length"
                },
                "string_array": {
                    "1": "str_array"
                },
                "uVar1": {
                    "1": "return_value"
                },
                "unaff_EBP": {
                    "1": "data",
                    "11": "ebp_value",
                    "2": "parameter",
                    "3": "error_code",
                    "9": "input_value"
                }
            },
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 process_ebp_value_0010829e(void)\n\n{\n  undefined8 result;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    result = check_string_length();\n    return result;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    result = invert_result();\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_ebp_value_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "process_ebp_value_0010829e",
                "invert_result_001082b3": "invert_result",
                "is_dwo_section_constprop_0": "check_string_length",
                "uVar1": "result",
                "unaff_EBP": "ebp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "FUN_001082b3": {
                    "1": "calculate_inverted_value",
                    "2": "invert_and_return_result",
                    "3": "invert_result"
                },
                "FUN_00113ede": {
                    "1": "process_char_array"
                },
                "is_dwo_section_constprop_0": {
                    "1": "check_constprop_status",
                    "2": "check_section_constprop",
                    "3": "check_dwo_section_constprop",
                    "5": "check_dwo_section"
                },
                "param_1": {
                    "1": "char_array"
                },
                "uVar1": {
                    "1": "is_dwo_section_result",
                    "18": "result",
                    "2": "is_dwo_section_constprop_0_result"
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint invert_result_001082b3(void)\n\n{\n  uint result;\n  \n  result = check_dwo_section();\n  return result ^ 1;\n}\n\n",
            "current_name": "invert_result_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "invert_result_001082b3",
                "is_dwo_section_constprop_0": "check_dwo_section",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "0": {
                    "1": "success"
                },
                "<original_function_parameter>": {
                    "1": "<new_function_parameter>"
                },
                "<original_variable_name_1>": {
                    "2": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "2": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "FUN_001082c3": {
                    "1": "initialize_program",
                    "2": "get_zero",
                    "3": "initialize_data",
                    "7": "initialize",
                    "9": "get_default_value"
                },
                "return": {
                    "1": "result"
                },
                "undefined8": {
                    "2": "uint64_t",
                    "7": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid get_default_value_001082c3(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "get_default_value_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "*(code **)(*(long *)(unaff_RBP + 8) + 0x288)": {
                    "1": "jump_table_function"
                },
                "*(long **)unaff_R13[uVar6]": {
                    "1": "current_data_value_pointer"
                },
                "*(undefined8 *)(lVar2 + 8)": {
                    "1": "specified_symbol"
                },
                "DAT_00127a28": {
                    "1": "specified_value"
                },
                "DAT_00127a48": {
                    "1": "constant_value"
                },
                "FUN_001082df": {
                    "1": "process_data",
                    "19": "process_symbols",
                    "2": "process_and_call_function"
                },
                "cVar3": {
                    "1": "symbol_match",
                    "2": "symbol_status",
                    "3": "is_valid_symbol",
                    "4": "is_specified",
                    "8": "is_specified_symbol"
                },
                "extractedFunction": {
                    "1": "process_extracted_function"
                },
                "is_specified_symbol": {
                    "1": "check_symbol"
                },
                "lVar2": {
                    "1": "current_element",
                    "12": "symbol_value",
                    "2": "symbol_ptr",
                    "3": "value",
                    "8": "symbol_address"
                },
                "param_1": {
                    "1": "param1"
                },
                "param_2": {
                    "1": "param2"
                },
                "puVar4": {
                    "1": "processed_symbols",
                    "2": "new_pointer",
                    "3": "result_ptr",
                    "4": "output_ptr"
                },
                "puVar5": {
                    "1": "new_symbol_table",
                    "2": "current_symbol"
                },
                "uVar1": {
                    "1": "loop_limit",
                    "12": "symbol_count",
                    "3": "num_elements",
                    "9": "num_symbols"
                },
                "uVar6": {
                    "1": "loop_index",
                    "2": "counter",
                    "4": "current_index",
                    "7": "index"
                },
                "unaff_R13": {
                    "1": "input_array",
                    "10": "symbol_array",
                    "5": "symbols"
                },
                "unaff_R13[uVar6]": {
                    "1": "current_data_pointer"
                },
                "unaff_RBP": {
                    "1": "stack_pointer",
                    "2": "function_context",
                    "3": "rbp",
                    "4": "stack_base",
                    "5": "base_pointer"
                },
                "unaff_RBX": {
                    "1": "symbol_table_base",
                    "15": "base_address",
                    "2": "symbol_array",
                    "3": "symbol_table"
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_symbols_001082df(void)\n\n{\n  uint symbol_count;\n  long symbol_value;\n  char is_symbol_specified;\n  long base_address;\n  undefined8 *output_ptr;\n  undefined8 *next_symbol;\n  long base_pointer;\n  ulong index;\n  undefined8 *symbol_array;\n  \n  symbol_count = *(uint *)(base_address + 0x78);\n  if (DAT_00127a48 == 7) {\n    output_ptr = symbol_array;\n    for (index = 0; index != symbol_count; index = index + 1) {\n      next_symbol = output_ptr;\n      if (((*(long **)current_data_pointer != (long *)0x0) &&\n          (symbol_value = **(long **)current_data_pointer, symbol_value != 0)) &&\n         (is_symbol_specified = check_symbol(*(undefined8 *)(symbol_value + 8),DAT_00127a28), is_symbol_specified != '\\0')) {\n        next_symbol = output_ptr + 1;\n        *output_ptr = current_data_pointer;\n      }\n      output_ptr = next_symbol;\n    }\n    *output_ptr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(base_pointer + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_symbols_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "cVar3": "is_symbol_specified",
                "is_specified_symbol": "check_symbol",
                "lVar2": "symbol_value",
                "puVar4": "output_ptr",
                "puVar5": "next_symbol",
                "uVar1": "symbol_count",
                "uVar6": "index",
                "unaff_R13": "symbol_array",
                "unaff_R13[uVar6]": "current_data_pointer",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "DAT_00119ed0": {
                    "1": "unknown_function"
                },
                "FUN_00108375": {
                    "1": "validate_and_drop_share_flag",
                    "2": "check_output_format",
                    "7": "drop_share_flag_if_not_coff",
                    "8": "check_and_drop_share_flag"
                },
                "dcgettext": {
                    "1": "translate"
                },
                "non_fatal": {
                    "1": "print_error_message"
                },
                "param_1": {
                    "1": "unused_param",
                    "10": "param_1",
                    "14": "param1"
                },
                "param_2": {
                    "1": "param2_array",
                    "11": "param2",
                    "2": "arguments",
                    "4": "param_2",
                    "5": "param_array"
                },
                "param_3": {
                    "1": "param",
                    "10": "param_3",
                    "14": "param3",
                    "2": "output_format"
                },
                "uVar1": {
                    "1": "param1_value",
                    "12": "var1",
                    "3": "input"
                },
                "uVar2": {
                    "1": "second_variable",
                    "11": "var2",
                    "2": "error_string",
                    "3": "error_msg",
                    "4": "message",
                    "7": "error_message"
                },
                "unaff_EBX": {
                    "1": "flags",
                    "12": "ebx",
                    "2": "flag",
                    "9": "ebx_value"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint check_and_drop_share_flag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  uint ebx;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    var1 = *param2;\n    ebx = ebx & 0xf7ffffff;\n    var2 = translate(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message(var2,var1,param3);\n  }\n  return ebx;\n}\n\n",
            "current_name": "check_and_drop_share_flag_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "check_and_drop_share_flag_00108375",
                "dcgettext": "translate",
                "non_fatal": "print_error_message",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "var2",
                "unaff_EBX": "ebx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "1": "handle_bfd_get_error",
                    "11": "handle_error",
                    "3": "check_bfd_error"
                },
                "bfd_get_error": {
                    "1": "get_error"
                },
                "bfd_nonfatal": {
                    "1": "make_nonfatal"
                },
                "iVar1": {
                    "1": "error_type",
                    "11": "bfd_error",
                    "3": "error_code",
                    "7": "bfd_error_code"
                },
                "param_1": {
                    "1": "argument",
                    "2": "param",
                    "24": "error_code"
                },
                "unaff_RBP": {
                    "1": "error_context",
                    "2": "bfd_handle",
                    "4": "bfd_pointer",
                    "6": "pointer"
                },
                "unaff_retaddr": {
                    "1": "ret_address",
                    "28": "return_address"
                },
                "xexit": {
                    "1": "my_exit"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_0011a110",
                "FUN_00104760"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *pointer;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  handle_bfd_nonfatal(*pointer);\n                    \n  my_exit(1);\n}\n\n",
            "current_name": "handle_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "bfd_get_error": "get_error",
                "bfd_nonfatal": "handle_bfd_nonfatal",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "unaff_RBP": "pointer",
                "unaff_retaddr": "return_address",
                "xexit": "my_exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "1": "reverse_bytes_error",
                    "11": "reverse_bytes",
                    "2": "reverse_section_bytes",
                    "6": "reverse_bytes_section"
                },
                "FUN_00119dd0": {
                    "1": "process_section"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fatal": {
                    "1": "report_fatal_error"
                },
                "uVar1": {
                    "2": "section_data",
                    "3": "section_address",
                    "4": "section_value",
                    "5": "section_length"
                },
                "uVar2": {
                    "10": "error_message",
                    "2": "error_string",
                    "4": "error_msg"
                },
                "unaff_EBP": {
                    "1": "error_msg",
                    "19": "section_length",
                    "2": "length",
                    "3": "error_status"
                },
                "unaff_RBX": {
                    "1": "byte_section",
                    "15": "section_pointer",
                    "4": "section_length",
                    "8": "section_ptr"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid reverse_bytes_001083de(void)\n\n{\n  undefined8 section_length;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  undefined4 section_length;\n  \n  section_length = *section_pointer;\n  error_message = get_error_message(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  report_fatal_error(error_message,section_length,section_length);\n}\n\n",
            "current_name": "reverse_bytes_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "reverse_bytes_001083de",
                "dcgettext": "get_error_message",
                "fatal": "report_fatal_error",
                "uVar1": "section_length",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "1": "free_memory_and_signal",
                    "2": "cleanup_and_free_memory",
                    "3": "free_and_reset",
                    "8": "free_memory"
                },
                "bfd_nonfatal_message": {
                    "2": "display_error_message"
                },
                "param_7": {
                    "1": "buffer",
                    "11": "memory_to_free",
                    "13": "memory_block",
                    "2": "pointer_to_free"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid free_memory_00108466(void)\n\n{\n  void *memory_block;\n  \n  DAT_00127a40 = 1;\n  display_error_message(0);\n  free(memory_block);\n  return;\n}\n\n",
            "current_name": "free_memory_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "free_memory_00108466",
                "bfd_nonfatal_message": "display_error_message",
                "param_7": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUNC_00116490": {
                    "1": "execute_function",
                    "2": "execute_task",
                    "4": "execute_sub_function"
                },
                "FUN_0010847a": {
                    "1": "initialize_program",
                    "2": "initialize",
                    "5": "initialize_system",
                    "6": "execute_main_function",
                    "8": "execute_initialization"
                },
                "param_1": {
                    "1": "config_data",
                    "2": "argument1",
                    "3": "input1",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "size_param",
                    "2": "argument2",
                    "3": "input2",
                    "4": "arg2"
                },
                "param_3": {
                    "1": "secondary_param_2",
                    "2": "argument_3",
                    "3": "input3",
                    "4": "arg3"
                },
                "param_4": {
                    "1": "secondary_param_3",
                    "2": "argument4",
                    "3": "input4",
                    "4": "arg4"
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid execute_initialization_0010847a(void)\n\n{\n  process_gnu_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n",
            "current_name": "execute_initialization_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "execute_initialization_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "DAT_00127a40": {
                    "2": "error_flag"
                },
                "FUN_001086af": {
                    "1": "process_attributes",
                    "10": "process_gnu_build_attribute_notes"
                },
                "__nmemb": {
                    "1": "num_of_elements",
                    "2": "length2",
                    "3": "num_elements",
                    "9": "size"
                },
                "__ptr": {
                    "1": "ptr2",
                    "3": "dynamic_memory",
                    "8": "buffer"
                },
                "array1": {
                    "1": "pu_var15"
                },
                "array2": {
                    "1": "array_2"
                },
                "bVar22": {
                    "1": "temp_byte",
                    "3": "byte_var",
                    "4": "flag"
                },
                "bVar24": {
                    "1": "loop_condition"
                },
                "bVar4": {
                    "1": "is_error",
                    "11": "flag",
                    "2": "is_true",
                    "3": "condition"
                },
                "bfd_nonfatal_message": {
                    "1": "nonfatal_message"
                },
                "bfd_set_error": {
                    "1": "set_error"
                },
                "cVar17": {
                    "1": "char_val",
                    "3": "temp_char",
                    "6": "character"
                },
                "compare_gnu_build_notes": {
                    "1": "compare_notes_function"
                },
                "compare_memory_blocks_0011a1b0": {
                    "4": "compare_memory_blocks"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "errorFunction": {
                    "1": "param_14"
                },
                "error_code1": {
                    "1": "error_code1"
                },
                "error_code2": {
                    "1": "print_error_code_2"
                },
                "error_code3": {
                    "1": "print_error_code_3"
                },
                "error_code4": {
                    "1": "print_error_code_4"
                },
                "execute_initialization_0010847a": {
                    "4": "execute_initialization"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar23": {
                    "1": "index_variable",
                    "2": "loop_counter2",
                    "3": "counter",
                    "4": "index"
                },
                "iVar6": {
                    "1": "integer_var_6",
                    "2": "counter",
                    "4": "compare_result",
                    "8": "index"
                },
                "in_RCX": {
                    "1": "initial_value",
                    "2": "input_parameter",
                    "4": "input_value",
                    "7": "input1"
                },
                "in_stack_00000030": {
                    "1": "temp15",
                    "2": "buffer_ptr",
                    "5": "output_buffer"
                },
                "in_stack_00000038": {
                    "1": "input8",
                    "2": "input6"
                },
                "input1": {
                    "1": "param_7"
                },
                "input2": {
                    "1": "report_data_input_2"
                },
                "input3": {
                    "1": "param_8"
                },
                "input4": {
                    "1": "report_data_input_4"
                },
                "lVar7": {
                    "1": "counter",
                    "10": "length",
                    "3": "error_message"
                },
                "long lVar7": {
                    "1": "size"
                },
                "non_fatal": {
                    "1": "non_fatal_error"
                },
                "note_name": {
                    "1": "build_attribute_note_name"
                },
                "note_type": {
                    "1": "build_attribute_note_type"
                },
                "output": {
                    "1": "param_10"
                },
                "outputPtr": {
                    "1": "in_stack_00000030"
                },
                "param_10": {
                    "1": "output_value3",
                    "2": "data_size",
                    "3": "output"
                },
                "param_11": {
                    "1": "param_1",
                    "3": "notes_array",
                    "8": "input_array"
                },
                "param_13": {
                    "1": "input1",
                    "2": "input7"
                },
                "param_14": {
                    "1": "note_description_data",
                    "2": "version_note",
                    "3": "input_array2"
                },
                "param_3": {
                    "1": "input1"
                },
                "param_4": {
                    "1": "input2"
                },
                "param_7": {
                    "1": "input_value1",
                    "4": "input2"
                },
                "param_8": {
                    "1": "input_3",
                    "2": "input_value2",
                    "4": "input3"
                },
                "param_9": {
                    "1": "input_param_9",
                    "4": "input4"
                },
                "paran_13": {
                    "1": "var_48"
                },
                "pmalloc": {
                    "1": "memory_allocation_function"
                },
                "print_error_message_001126c0": {
                    "3": "print_error_message"
                },
                "process_gnu_build_attribute_notes_00116490": {
                    "1": "process_attribute_notes_function"
                },
                "ptr2": {
                    "1": "ptr"
                },
                "puVar15": {
                    "1": "ptr",
                    "2": "note_ptr",
                    "3": "array_ptr"
                },
                "puVar16": {
                    "1": "new_ptr_2",
                    "2": "temp_pointer_2",
                    "3": "pointer1"
                },
                "puVar18": {
                    "1": "temp9",
                    "2": "temp_pointer_3",
                    "3": "ptr2"
                },
                "puVar19": {
                    "1": "ptr2",
                    "2": "ptr3",
                    "3": "pointer3"
                },
                "puVar21": {
                    "1": "pointer_var7",
                    "2": "temp_pointer_5"
                },
                "puVar25": {
                    "1": "loop_pointer"
                },
                "puVar5": {
                    "1": "temp_pointer_1",
                    "3": "ptr1"
                },
                "qsort": {
                    "1": "sort"
                },
                "report_data_00119ed0": {
                    "4": "report_data"
                },
                "retval": {
                    "1": "u_var10"
                },
                "sort_gnu_build_notes": {
                    "1": "sort_notes"
                },
                "sortedArray": {
                    "1": "array"
                },
                "temp1": {
                    "1": "u_var9"
                },
                "temp10": {
                    "1": "pu_var19"
                },
                "temp12": {
                    "1": "pu_var21"
                },
                "temp13": {
                    "1": "b_var22"
                },
                "temp14": {
                    "1": "i_var23"
                },
                "temp2": {
                    "1": "u_var10"
                },
                "temp3": {
                    "1": "u_var11"
                },
                "temp4": {
                    "1": "u_var12"
                },
                "temp5": {
                    "1": "u_var13"
                },
                "temp6": {
                    "1": "u_var14"
                },
                "temp7": {
                    "1": "u_var14"
                },
                "temp8": {
                    "1": "c_var17"
                },
                "temp9": {
                    "1": "pu_var18"
                },
                "uVar1": {
                    "1": "value1",
                    "14": "result"
                },
                "uVar10": {
                    "1": "temp_var6",
                    "2": "var10",
                    "4": "value2"
                },
                "uVar11": {
                    "1": "temp_var6",
                    "2": "temp5",
                    "3": "value3"
                },
                "uVar12": {
                    "1": "loop_var",
                    "2": "input2",
                    "3": "var12"
                },
                "uVar13": {
                    "1": "tmp4",
                    "2": "u_var13",
                    "3": "var13"
                },
                "uVar14": {
                    "1": "temp_var6",
                    "2": "input4",
                    "3": "var14"
                },
                "uVar15": {
                    "1": "result_var_15"
                },
                "uVar16": {
                    "1": "temp_value8"
                },
                "uVar17": {
                    "1": "result_var_17"
                },
                "uVar18": {
                    "1": "result_var_18"
                },
                "uVar19": {
                    "1": "result_var_19"
                },
                "uVar2": {
                    "1": "warning_message1",
                    "2": "temp_var1",
                    "3": "var2",
                    "7": "temp1"
                },
                "uVar20": {
                    "1": "value7",
                    "2": "u_var20"
                },
                "uVar21": {
                    "1": "result_var_21"
                },
                "uVar22": {
                    "1": "result_var_22"
                },
                "uVar23": {
                    "1": "result_var_23"
                },
                "uVar24": {
                    "1": "result_var_24"
                },
                "uVar25": {
                    "1": "result_var_25"
                },
                "uVar26": {
                    "1": "result_var_26"
                },
                "uVar27": {
                    "1": "result_var_27"
                },
                "uVar28": {
                    "1": "result_var_28"
                },
                "uVar29": {
                    "1": "result_var_29"
                },
                "uVar3": {
                    "1": "var_17",
                    "2": "temp_var2",
                    "3": "var3",
                    "7": "temp2"
                },
                "uVar30": {
                    "1": "result_var_30"
                },
                "uVar31": {
                    "1": "result_var_31"
                },
                "uVar32": {
                    "1": "result_var_32"
                },
                "uVar4": {
                    "1": "compare_result"
                },
                "uVar5": {
                    "1": "description_size"
                },
                "uVar6": {
                    "1": "note_type"
                },
                "uVar7": {
                    "1": "note_name"
                },
                "uVar8": {
                    "1": "function_output3",
                    "2": "var8",
                    "3": "temp3",
                    "5": "message"
                },
                "uVar9": {
                    "1": "result_var_9",
                    "2": "temp3",
                    "3": "min_value",
                    "4": "value1"
                },
                "ulong uVar10": {
                    "1": "max_note_size"
                },
                "ulong uVar11": {
                    "1": "current_note_size"
                },
                "ulong uVar9": {
                    "1": "min_note_size"
                },
                "unaff_R12": {
                    "1": "temp_variable_12",
                    "2": "array1",
                    "3": "current_note"
                },
                "unaff_R13": {
                    "1": "current_note_size"
                },
                "unaff_R14": {
                    "1": "ptr2",
                    "5": "function_pointers"
                },
                "unaff_R15": {
                    "1": "sort_function"
                },
                "unaff_RBP": {
                    "1": "temp_variable_13",
                    "2": "temp_value"
                },
                "unaff_RBX": {
                    "1": "temp_var11",
                    "2": "note_count",
                    "3": "loop_counter"
                },
                "unaff_RCX": {
                    "1": "input_parameter_2"
                },
                "unaff_retaddr": {
                    "1": "temp_var16",
                    "16": "return_address"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001043a0",
                "FUN_00104140",
                "FUN_001126c0",
                "FUN_00116490",
                "FUN_00104240",
                "FUN_0010847a",
                "FUN_0011a1b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong process_gnu_build_attribute_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 temp1;\n  undefined8 temp2;\n  bool flag;\n  ulong *temp_pointer;\n  int index;\n  long length;\n  undefined8 message;\n  ulong value1;\n  ulong value2;\n  ulong value3;\n  undefined *buffer;\n  ulong input1;\n  ulong var12;\n  ulong var13;\n  ulong var14;\n  ulong remaining_bytes;\n  ulong temp_value;\n  ulong *array_ptr;\n  undefined *pointer1;\n  char character;\n  undefined *pointer2;\n  undefined *pointer3;\n  ulong *current_note;\n  ulong register_variable4;\n  ulong u_var20;\n  size_t size;\n  undefined8 *function_pointers;\n  ulong *temp_pointer_5;\n  byte flag;\n  int loop_counter;\n  ulong return_address;\n  ulong input2;\n  uint input3;\n  ulong input4;\n  ulong output;\n  ulong *input_array;\n  undefined *output_buffer;\n  uint input6;\n  uint input7;\n  undefined8 *input_array2;\n  \n  flag = 0;\n  input2 = input1;\n  value1 = (**(code **)(function_pointers[1] + 0x40))();\n  value2 = (**(code **)(function_pointers[1] + 0x40))(current_note[4] + 4);\nLAB_0011662a:\n  var13 = temp_value;\n  u_var20 = register_variable4;\n  if (value2 < value1) {\n    value1 = value2;\n  }\n  do {\n    value3 = input2;\n    var12 = input2;\n    array_ptr = current_note;\n    if (current_note[2] == 0x100) {\n      if (value1 == 0) {\n        value1 = return_address;\n      }\n      var14 = *current_note;\n      current_note[7] = value1;\n      temp_value = var13;\n      register_variable4 = value2;\n      return_address = value1;\n      if (value2 == 0) goto LAB_001164af;\n    }\n    else {\n      if (value1 == 0) {\n        value1 = input4;\n      }\n      var14 = *current_note;\n      current_note[7] = value1;\n      temp_value = value2;\n      register_variable4 = u_var20;\n      input4 = value1;\n      if (value2 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    array_ptr[8] = value2;\n    if (*(char *)((array_ptr[3] - 1) + var14) != '\\0') {\n      length = get_error_message_function(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    current_note = array_ptr + 9;\n    if (remaining_bytes < 0xc) {\n      if (remaining_bytes != 0) {\n        length = get_error_message_function(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((input6 | input7 | input3) != 0) {\n        if (((input7 | input3) == 0) || (input6 == 0)) {\n          if (input7 == 0) {\n            if (input3 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (input3 == 0) goto LAB_001166f8;\n        }\n        length = get_error_message_function(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      temp1 = *function_pointers;\n      temp2 = *input_array2;\n      message = get_error_message_function(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      handle_non_fatal_error_function(message,temp1,temp2);\nLAB_0011671b:\n      size = ((long)current_note - (long)input_array >> 3) * -0x71c71c71c71c71c7;\n      sort_function(input_array,size,0x48,compare_notes_function);\n      array_ptr = input_array;\n      goto LAB_001167f9;\n    }\n    value2 = (**(code **)(function_pointers[1] + 0x40))(var12);\n    *current_note = value2;\n    value2 = (**(code **)(function_pointers[1] + 0x40))(var12 + 4);\n    array_ptr[10] = value2;\n    value1 = (**(code **)(function_pointers[1] + 0x40))(var12 + 8);\n    var14 = *current_note;\n    array_ptr[0xb] = value1;\n    value2 = array_ptr[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    array_ptr[0xf] = var13;\n    if (value2 != (value2 + 3 & 0xfffffffffffffffc)) {\n      length = get_error_message_function(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < value1 - 0x100) {\n      length = get_error_message_function(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    value3 = var13 + value2 + 0xc;\n    if (remaining_bytes < value3) {\n      length = get_error_message_function(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      length = get_error_message_function(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    array_ptr[0xc] = var12 + 0xc;\n    result = var12 + 0xc + var13;\n    array_ptr[0xd] = result;\n    remaining_bytes = remaining_bytes + (-0xc - (var13 + value2));\n    value3 = var12 + value3;\n    if (var14 != 2) {\n      if (*(char *)(var12 + 0xc) == '$') {\n        if ((*(char *)(var12 + 0xd) == '\\x01') && (*(char *)(var12 + 0xe) == '1')) {\n          value2 = process_build_attribute_notes();\n          return value2;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(var12 + 0xc) == 'G')) &&\n               (*(char *)(var12 + 0xd) == 'A')) &&\n              ((*(char *)(var12 + 0xe) == '$' && (*(char *)(var12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var12 + 0x10) == '2') {\n          value2 = process_build_attribute_notes();\n          return value2;\n        }\n        if (*(char *)(var12 + 0x10) == '3') {\n          value2 = process_build_attribute_notes();\n          return value2;\n        }\n        length = get_error_message_function(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = temp_value;\n    u_var20 = register_variable4;\n    if (value2 == 0) {\n      if (value1 == 0x100) {\n        array_ptr[0x10] = return_address;\nLAB_001164af:\n        var12 = value3;\n        value2 = u_var20;\n        array_ptr = current_note;\n        register_variable4 = u_var20;\n      }\n      else {\n        array_ptr[0x10] = input4;\nLAB_0011669e:\n        temp_value = var13;\n        var12 = value3;\n        value2 = var13;\n        array_ptr = current_note;\n        register_variable4 = u_var20;\n      }\n      goto LAB_001164bb;\n    }\n    if (value2 == 0x10) break;\n    if (0x10 < value2) {\nLAB_00116679:\n      length = get_error_message_function(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        set_error(0x11);\n        nonfatal_message(0,function_pointers,input_array2,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (value2 != 4) {\n      if (value2 == 8) {\n        value2 = process_gnu_build_attribute_notes_001086af();\n        return value2;\n      }\n      goto LAB_00116679;\n    }\n    input2 = value3;\n    value1 = (**(code **)(function_pointers[1] + 0x40))();\n    value2 = 0xffffffffffffffff;\n  } while( true );\n  input2 = value3;\n  value1 = (**(code **)(function_pointers[1] + 0x28))(result);\n  value2 = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (current_note <= array_ptr) {\n    sort_function(input_array,size,0x48,sort_notes_function);\n    buffer = (undefined *)dynamic_memory_allocation_function(output * 2);\n    input2 = 0;\n    input4 = 0;\n    pointer3 = buffer;\n    for (array_ptr = input_array; array_ptr < current_note; array_ptr = array_ptr + 9) {\n      if (array_ptr[2] != 0) {\n        pointer2 = pointer3 + 4;\n        pointer1 = pointer3 + 0xc;\n        if ((array_ptr[7] == input4) && (array_ptr[8] == input2)) {\n          (**(code **)(function_pointers[1] + 0x50))(*array_ptr,pointer3);\n          (**(code **)(function_pointers[1] + 0x50))(0,pointer2);\n          (**(code **)(function_pointers[1] + 0x50))(array_ptr[2],pointer3 + 8);\n          value1 = array_ptr[6];\n          value2 = *array_ptr;\n          pointer3 = (undefined *)array_ptr[3];\n          pointer2 = pointer1;\n          for (var13 = value2; var13 != 0; var13 = var13 - 1) {\n            *pointer2 = *pointer3;\n            pointer3 = pointer3 + (ulong)flag * -2 + 1;\n            pointer2 = pointer2 + (ulong)flag * -2 + 1;\n          }\n          if (value2 < value1) {\n            for (length = value1 - value2; length != 0; length = length + -1) {\n              *pointer2 = 0;\n              pointer2 = pointer2 + (ulong)flag * -2 + 1;\n            }\n          }\n          pointer3 = pointer1 + value1;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            character = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            character = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(character,pointer2);\n          (**(code **)(function_pointers[1] + 0x50))(array_ptr[2],pointer3 + 8);\n          value2 = *array_ptr;\n          pointer3 = (undefined *)array_ptr[3];\n          pointer2 = pointer1;\n          for (value1 = value2; value1 != 0; value1 = value1 - 1) {\n            *pointer2 = *pointer3;\n            pointer3 = pointer3 + (ulong)flag * -2 + 1;\n            pointer2 = pointer2 + (ulong)flag * -2 + 1;\n          }\n          value1 = array_ptr[6];\n          if (value2 < value1) {\n            for (length = value1 - value2; length != 0; length = length + -1) {\n              *pointer2 = 0;\n              pointer2 = pointer2 + (ulong)flag * -2 + 1;\n            }\n          }\n          length = function_pointers[1];\n          pointer1 = pointer1 + value1;\n          pointer3 = pointer1 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(array_ptr[7],pointer1);\n            (**(code **)(function_pointers[1] + 0x38))(array_ptr[8],pointer3);\n            pointer3 = pointer1 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(array_ptr[7],pointer1);\n            (**(code **)(function_pointers[1] + 0x50))(array_ptr[8],pointer1 + 4);\n          }\n          input4 = array_ptr[7];\n          input2 = array_ptr[8];\n        }\n      }\n    }\n    value1 = (long)pointer3 - (long)buffer;\n    value2 = value1;\n    pointer3 = buffer;\n    if (value1 < output) {\n      for (; output = value1, value2 != 0; value2 = value2 - 1) {\n        *output_buffer = *pointer3;\n        pointer3 = pointer3 + (ulong)flag * -2 + 1;\n        output_buffer = output_buffer + (ulong)flag * -2 + 1;\n      }\n    }\n    deallocate_memory(buffer);\nLAB_001166f8:\n    deallocate_memory(input_array);\n    return output;\n  }\n  if (array_ptr[2] != 0) {\n    value2 = array_ptr[7];\n    value1 = array_ptr[8];\n    var13 = array_ptr[2];\n    temp_pointer_5 = array_ptr;\n    loop_counter = 0;\n    if (value2 == value1) {\n      array_ptr[2] = 0;\n    }\n    else {\n      do {\n        do {\n          temp_pointer = temp_pointer_5;\n          temp_pointer_5 = temp_pointer + -9;\n          if (temp_pointer_5 < input_array) goto LAB_001167f5;\n          u_var20 = temp_pointer[-7];\n        } while (u_var20 == 0);\n        input2 = var13;\n        if ((*temp_pointer_5 != *array_ptr) ||\n           (index = memcmp((void *)temp_pointer[-6],(void *)array_ptr[3],*array_ptr), index != 0)) break;\n        var13 = temp_pointer[-2];\n        value3 = temp_pointer[-1];\n        if (value2 == var13) {\n          if (value1 == value3) {\n            array_ptr[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (value1 <= value3) {\n            array_ptr[2] = 0;\n            break;\n          }\n          if (value3 < value2) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < value3) || (value2 <= (value3 + 0xf & 0xfffffffffffffff0)))\n            goto process_data_00116852;\n          }\nLAB_001167b8:\n          if ((input2 == 0x101) == (u_var20 == 0x101)) {\n            if (value3 <= value1) {\n              value3 = value1;\n            }\n            if (var13 < value2) {\n              value2 = var13;\n            }\n            temp_pointer[-1] = value3;\n            temp_pointer[-2] = value2;\n            array_ptr[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= value2) goto LAB_001167a6;\n          if (value3 < value2) goto LAB_0010852c;\n          if (value1 < value2) {\n            if ((0xfffffffffffffff0 < value1) || (var13 <= (value1 + 0xf & 0xfffffffffffffff0)))\n            goto process_data_00116852;\n            goto LAB_001167b8;\n          }\n          if (value1 != value3) goto LAB_001167b8;\n        }\nprocess_data_00116852:\n        flag = loop_counter < 0x11;\n        var13 = input2;\n        loop_counter = loop_counter + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  array_ptr = array_ptr + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "process_gnu_build_attribute_notes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "process_gnu_build_attribute_notes_001086af",
                "__nmemb": "size",
                "__ptr": "buffer",
                "bVar22": "flag",
                "bVar4": "flag",
                "bfd_nonfatal_message": "nonfatal_message",
                "bfd_set_error": "set_error",
                "cVar17": "character",
                "compare_gnu_build_notes": "compare_notes_function",
                "dcgettext": "get_error_message_function",
                "free": "deallocate_memory",
                "iVar23": "loop_counter",
                "iVar6": "index",
                "in_RCX": "input1",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "input6",
                "lVar7": "length",
                "non_fatal": "handle_non_fatal_error_function",
                "param_10": "output",
                "param_11": "input_array",
                "param_13": "input7",
                "param_14": "input_array2",
                "param_7": "input2",
                "param_8": "input3",
                "param_9": "input4",
                "process_gnu_build_attribute_notes_00116490": "process_build_attribute_notes",
                "puVar15": "array_ptr",
                "puVar16": "pointer1",
                "puVar18": "pointer2",
                "puVar19": "pointer3",
                "puVar21": "temp_pointer_5",
                "puVar5": "temp_pointer",
                "qsort": "sort_function",
                "sort_gnu_build_notes": "sort_notes_function",
                "uVar1": "result",
                "uVar10": "value2",
                "uVar11": "value3",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "result_var_15",
                "uVar16": "result_var_16",
                "uVar18": "result_var_18",
                "uVar19": "result_var_19",
                "uVar2": "temp1",
                "uVar20": "u_var20",
                "uVar21": "result_var_21",
                "uVar3": "temp2",
                "uVar5": "description_size",
                "uVar8": "message",
                "uVar9": "value1",
                "unaff_R12": "current_note",
                "unaff_R13": "register_variable4",
                "unaff_R14": "function_pointers",
                "unaff_RBP": "temp_value",
                "unaff_RBX": "remaining_bytes",
                "unaff_retaddr": "return_address",
                "xmalloc": "dynamic_memory_allocation_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "(long)(puVar1 + 1)": {
                    "1": "updated_parameter_pointer"
                },
                "*param_3": {
                    "1": "ptr_array"
                },
                "*param_3 = (long)(puVar1 + 1)": {
                    "1": "update_pointer_to_next"
                },
                "*puVar1": {
                    "1": "next_value"
                },
                "DAT_": {
                    "1": ""
                },
                "FUN_0010870e": {
                    "1": "update_memory_address",
                    "10": "update_pointer_and_value",
                    "2": "store_value_and_update_pointer",
                    "3": "store_parameter_value"
                },
                "PTR_": {
                    "1": ""
                },
                "param_1": {
                    "1": "value_pointer",
                    "2": "dest_address",
                    "3": "pointer_to_value",
                    "4": "param1",
                    "5": "new_value"
                },
                "param_2": {
                    "1": "data_value",
                    "16": "new_value",
                    "2": "param2",
                    "6": "value"
                },
                "param_3": {
                    "1": "updated_pointer_to_pointer",
                    "2": "parameter_list",
                    "4": "pointer_to_value",
                    "5": "pointer_to_update"
                },
                "puVar1": {
                    "1": "pointer_to_value_contents",
                    "2": "pointer_to_value",
                    "7": "current_pointer"
                },
                "puVar1 + 1": {
                    "1": "next_ptr_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid update_pointer_and_value_0010870e(undefined8 new_value,undefined8 new_value,long *pointer_to_update)\n\n{\n  undefined8 *current_pointer;\n  \n  current_pointer = (undefined8 *)*pointer_to_update;\n  *current_pointer = new_value;\n  *pointer_to_update = (long)(current_pointer + 1);\n  return;\n}\n\n",
            "current_name": "update_pointer_and_value_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "new_value",
                "param_2": "new_value",
                "param_3": "pointer_to_update",
                "puVar1": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "print_error_cause",
                    "2": "print_error",
                    "25": "print_error_message"
                },
                "uVar1": {
                    "1": "error_string",
                    "24": "error_message"
                },
                "unaff_RBX": {
                    "1": "file_descriptor",
                    "17": "error_code",
                    "3": "error_cause",
                    "9": "error_flag"
                },
                "unaff_retaddr": {
                    "31": "return_address"
                }
            },
            "called": [
                "FUN_001045e0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "*param_1": {
                    "1": "record1"
                },
                "*param_2": {
                    "1": "record2"
                },
                "FUN_0010875d": {
                    "1": "compare_functions",
                    "2": "compare_values",
                    "24": "compare_records"
                },
                "iVar3": {
                    "23": "result",
                    "6": "comparison_result"
                },
                "lVar1": {
                    "1": "object1_address",
                    "2": "record1",
                    "3": "record1_ptr",
                    "4": "record1_value",
                    "6": "value1"
                },
                "lVar2": {
                    "1": "value2_pointer",
                    "2": "record2",
                    "3": "record2_ptr",
                    "4": "record2_value",
                    "6": "value2"
                },
                "param_1": {
                    "1": "data1",
                    "16": "record1",
                    "7": "record_1"
                },
                "param_2": {
                    "1": "object2",
                    "16": "record2",
                    "7": "record_2"
                },
                "uVar4": {
                    "1": "record_flag",
                    "2": "flags",
                    "20": "flag"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "value1",
                "lVar2": "value2",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "1": "check_value",
                    "10": "check_rax_value",
                    "4": "check_if_rax_equals_one_hundred",
                    "6": "check_if_rax_equals100"
                },
                "auVar1": {
                    "22": "result",
                    "5": "return_value"
                },
                "in_RAX": {
                    "1": "memory_address",
                    "2": "address",
                    "22": "input_value",
                    "4": "value"
                },
                "unaff_retaddr": {
                    "29": "return_address"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_rax_value_001087da(void)\n\n{\n  long input_value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = input_value == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "check_rax_value_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "auVar1": "result",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "0": {
                    "1": "zero"
                },
                "<original_variable_name>": {
                    "1": "<new_variable_name>"
                },
                "<original_variable_name_1>": {
                    "3": "<new_variable_name_1>"
                },
                "<original_variable_name_2>": {
                    "3": "<new_variable_name_2>"
                },
                "<original_variable_name_n>": {
                    "2": "<new_variable_name_n>"
                },
                "FUN_001087fd": {
                    "1": "get_zero_value",
                    "2": "initialize_program",
                    "3": "initialize_data",
                    "5": "get_default_value"
                },
                "return": {
                    "1": "result"
                },
                "return value": {
                    "1": "result"
                },
                "undefined8": {
                    "1": "int",
                    "5": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid get_default_value_001087fd(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "get_default_value_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "*param_1": {
                    "1": "str",
                    "7": "input_string"
                },
                "FUN_00108800": {
                    "1": "hash_string_function",
                    "20": "hash_string",
                    "4": "compute_hash"
                },
                "param_1": {
                    "1": "string_pointer",
                    "2": "data",
                    "3": "str",
                    "4": "string",
                    "9": "input_string"
                }
            },
            "called": [
                "FUN_001048f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  htab_hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "1": "find_and_handle_missing_section",
                    "2": "find_and_fatal_missing_section",
                    "3": "find_missing_section",
                    "4": "find_section_and_fatal"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "fatal": {
                    "1": "print_and_exit"
                },
                "param_1": {
                    "1": "param_1",
                    "2": "arg1"
                },
                "param_2": {
                    "1": "param_2",
                    "2": "arg2"
                },
                "param_3": {
                    "1": "param_3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "param_4",
                    "2": "arg4"
                },
                "uVar1": {
                    "1": "section_name",
                    "20": "section_address",
                    "4": "section_ptr",
                    "5": "section_pointer"
                },
                "uVar2": {
                    "1": "error_msg",
                    "2": "error_string",
                    "24": "error_message",
                    "3": "section_not_found_message"
                },
                "unaff_RBP": {
                    "1": "stack_base_pointer",
                    "17": "base_pointer",
                    "3": "stack_pointer",
                    "4": "stack_base"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid find_and_print_section_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = get_translated_message(0,\"Section %s not found\",5);\n                    \n  print_and_exit(error_message,section_address);\n}\n\n",
            "current_name": "find_and_print_section_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "find_and_print_section_00108808",
                "dcgettext": "get_translated_message",
                "fatal": "print_and_exit",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "*piVar1": {
                    "2": "errno_location"
                },
                "FUN_0010882c": {
                    "1": "set_time",
                    "18": "set_time_error",
                    "2": "print_time_error_message",
                    "3": "set_time_error_handling"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "dcgettext": {
                    "1": "get_translated_message"
                },
                "non_fatal": {
                    "1": "report_error"
                },
                "param_1": {
                    "1": "param1",
                    "3": "error_code"
                },
                "param_2": {
                    "1": "param2"
                },
                "param_3": {
                    "1": "param3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "piVar1": {
                    "1": "error_ptr",
                    "2": "errno_pointer",
                    "3": "error_code",
                    "6": "errno_ptr",
                    "8": "error_location"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar2": {
                    "1": "translated_error_msg",
                    "18": "error_message",
                    "4": "error_string",
                    "5": "error_msg"
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid set_time_error_0010882c(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = get_errno_location();\n  get_error_string(*error_location);\n  error_message = get_translated_message(0,\"%s: cannot set time: %s\",5);\n  handle_non_fatal(error_message);\n  return;\n}\n\n",
            "current_name": "set_time_error_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "set_time_error_0010882c",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_translated_message",
                "non_fatal": "handle_non_fatal",
                "piVar1": "error_location",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "*puVar1": {
                    "1": "current_block"
                },
                "*puVar2": {
                    "1": "next_block"
                },
                "FUN_00108863": {
                    "1": "dealloc_memory_blocks",
                    "11": "clear_memory",
                    "2": "deallocate_memory",
                    "3": "free_memory",
                    "9": "free_memory_blocks"
                },
                "puVar1": {
                    "1": "current_memory_block",
                    "13": "current_block",
                    "2": "data_pointer",
                    "8": "current_pointer"
                },
                "puVar2": {
                    "1": "next_data_ptr",
                    "13": "next_block",
                    "2": "next_data_pointer",
                    "9": "next_pointer"
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid clear_memory_00108863(void)\n\n{\n  undefined4 *current_block;\n  undefined4 *next_block;\n  \n  current_block = (undefined4 *)&DAT_00127740;\n  do {\n    next_block = current_block + 6;\n    free(*(void **)(current_block + 4));\n    *(undefined8 *)(current_block + 4) = 0;\n    current_block = next_block;\n  } while (next_block != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "current_block",
                "puVar2": "next_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "1": "string_compare",
                    "30": "compare_strings"
                },
                "auVar2": {
                    "1": "comparison_info",
                    "14": "result",
                    "4": "comparison_result"
                },
                "auVar2._1_7_": {
                    "1": "bool_result"
                },
                "auVar2._8_8_": {
                    "1": "undefined_value"
                },
                "auVar2[0]": {
                    "2": "is_equal"
                },
                "iVar1": {
                    "24": "comparison_result",
                    "6": "string_comparison_result"
                },
                "in_RAX": {
                    "1": "unused_register",
                    "5": "undefined_value",
                    "9": "return_value"
                },
                "param_1": {
                    "1": "first_string",
                    "29": "string1"
                },
                "param_2": {
                    "1": "second_string",
                    "29": "string2"
                }
            },
            "called": [
                "FUN_00104470"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  bool_result = 0;\n  is_equal = comparison_result == 0;\n  undefined_value = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "auVar2._1_7_": "bool_result",
                "auVar2._8_8_": "undefined_value",
                "auVar2[0]": "is_equal",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "<iVar1>": {
                    "1": "new_index"
                },
                "<lVar2>": {
                    "1": "index"
                },
                "<lVar3>": {
                    "1": "offset"
                },
                "<original_function_name>": {
                    "1": "update_data"
                },
                "<param_1>": {
                    "1": "value1"
                },
                "<param_2>": {
                    "1": "value2"
                },
                "<param_3>": {
                    "1": "value3"
                },
                "<param_4>": {
                    "1": "str"
                },
                "<uVar4>": {
                    "1": "duplicate_str"
                },
                "FUN_001088ae": {
                    "1": "update_data_and_return_index",
                    "10": "update_data_entry",
                    "14": "update_data"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar1": {
                    "1": "updated_data_entry_index",
                    "12": "new_index",
                    "2": "index",
                    "4": "current_index",
                    "5": "updated_index"
                },
                "lVar2": {
                    "1": "data_struct_index",
                    "13": "index",
                    "2": "data_entry_index",
                    "7": "current_index"
                },
                "lVar3": {
                    "1": "array_index",
                    "18": "offset",
                    "2": "current_offset"
                },
                "param_1": {
                    "1": "data_field1",
                    "19": "new_value1",
                    "3": "value1",
                    "5": "new_param1"
                },
                "param_2": {
                    "1": "data_field2",
                    "19": "new_value2",
                    "3": "value2",
                    "5": "new_param2"
                },
                "param_3": {
                    "1": "new_value1",
                    "17": "new_value3",
                    "2": "data1",
                    "5": "new_param3"
                },
                "param_4": {
                    "1": "data4",
                    "15": "new_value4",
                    "2": "new_string",
                    "5": "new_param4"
                },
                "uVar4": {
                    "1": "duplicated_address",
                    "11": "duplicated_string",
                    "3": "duplicated_data",
                    "4": "copied_string"
                },
                "xstrdup": {
                    "1": "duplicate_string"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001043d0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  index = (long)DAT_001278c0;\n  offset = index * 0x18;\n  deallocate_memory((void *)(&DAT_00127750)[index * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127744 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127748 + offset) = new_value3;\n  duplicated_string = duplicate_string(new_value4);\n  (&DAT_00127750)[index * 3] = duplicated_string;\n  new_index = DAT_001278c0 + 1;\n  DAT_001278c0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "free": "deallocate_memory",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_string",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "FUN_00104a35": {
                    "1": "copy_section",
                    "3": "list_supported_targets"
                },
                "FUN_00108916": {
                    "1": "print_help",
                    "2": "print_help_message",
                    "21": "print_usage",
                    "3": "print_usage_and_exit"
                },
                "data1": {
                    "1": "usage_text"
                },
                "data10": {
                    "1": "keep_options"
                },
                "data11": {
                    "1": "localize_options"
                },
                "data12": {
                    "1": "weak_options"
                },
                "data13": {
                    "1": "discard_options"
                },
                "data14": {
                    "1": "interleave_options"
                },
                "data15": {
                    "1": "report_bug_text"
                },
                "data16": {
                    "1": "bug_url"
                },
                "data2": {
                    "1": "binary_info"
                },
                "data3": {
                    "1": "options_text"
                },
                "data4": {
                    "1": "debugging_text"
                },
                "data5": {
                    "1": "deterministic_text"
                },
                "data6": {
                    "1": "section_options"
                },
                "data7": {
                    "1": "copy_options"
                },
                "data8": {
                    "1": "strip_options"
                },
                "data9": {
                    "1": "symbol_options"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "exit": {
                    "1": "exit_program"
                },
                "fprintf": {
                    "1": "print_formatted_message"
                },
                "list_supported_targets": {
                    "1": "list_targets",
                    "2": "print_supported_targets"
                },
                "param_1": {
                    "1": "output_stream",
                    "2": "param1",
                    "22": "output_file",
                    "4": "file"
                },
                "param_2": {
                    "1": "return_code",
                    "2": "exit_status",
                    "20": "exit_code",
                    "6": "error_code"
                },
                "pcVar2": {
                    "1": "message_ptr",
                    "13": "message",
                    "3": "localized_text",
                    "5": "localized_string",
                    "7": "text"
                },
                "uVar1": {
                    "1": "data",
                    "17": "usage_string",
                    "2": "usage_text"
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_00127600;\n  message = (char *)get_text(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  print_formatted_message(output_file,message,usage_string);\n  message = (char *)get_text(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  print_formatted_message(output_file,message);\n  message = (char *)get_text(0,\" The options are:\\n\",5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_text(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_text(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_text(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  print_formatted_message(output_file,message);\n  print_supported_targets(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)get_text(0,\"Report bugs to %s\\n\",5);\n    print_formatted_message(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "dcgettext": "get_text",
                "exit": "exit_program",
                "fprintf": "print_formatted_message",
                "list_supported_targets": "print_supported_targets",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00104a35": {
                    "1": "print_message"
                },
                "FUN_00108a2a": {
                    "1": "display_usage",
                    "23": "print_usage",
                    "3": "print_usage_and_exit"
                },
                "dcgettext": {
                    "1": "get_translated_message",
                    "2": "get_translated_text"
                },
                "exitCode": {
                    "1": "_exit_code"
                },
                "fprintf": {
                    "1": "print_formatted_text"
                },
                "list_supported_targets": {
                    "1": "list_supported_targets"
                },
                "message": {
                    "1": "_message"
                },
                "outputFile": {
                    "1": "_output_file"
                },
                "param_1": {
                    "1": "file_pointer",
                    "21": "output_file",
                    "3": "file_ptr",
                    "5": "file"
                },
                "param_2": {
                    "1": "error_flag",
                    "21": "exit_code",
                    "3": "exit_status",
                    "5": "error_code"
                },
                "pcVar2": {
                    "1": "format_string",
                    "2": "localized_string",
                    "21": "message",
                    "5": "text"
                },
                "printUsage": {
                    "1": "_print_usage"
                },
                "programName": {
                    "1": "_program_name"
                },
                "uVar1": {
                    "1": "program_version",
                    "2": "usage_message",
                    "4": "program_name",
                    "8": "version",
                    "9": "version_number"
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 version_number;\n  char *message;\n  \n  version_number = DAT_00127600;\n  message = (char *)get_translated_text(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  print_formatted_text(output_file,message,version_number);\n  message = (char *)get_translated_text(0,\" Removes symbols and sections from files\\n\",5);\n  print_formatted_text(output_file,message);\n  message = (char *)get_translated_text(0,\" The options are:\\n\",5);\n  print_formatted_text(output_file,message);\n  message = (char *)get_translated_text(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  print_formatted_text(output_file,message);\n  message = (char *)get_translated_text(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  print_formatted_text(output_file,message);\n  message = (char *)get_translated_text(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  print_formatted_text(output_file,message);\n  display_supported_targets(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)get_translated_text(0,\"Report bugs to %s\\n\",5);\n    print_formatted_text(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "current_name": "print_usage_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "dcgettext": "get_translated_text",
                "fprintf": "print_formatted_text",
                "list_supported_targets": "display_supported_targets",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "version_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "&DAT_00127740": {
                    "1": "stab_entry"
                },
                "DAT_00127740": {
                    "1": "stabs_array_start"
                },
                "DAT_00127744": {
                    "1": "stab_desc_offset"
                },
                "DAT_00127748": {
                    "1": "stab_value_offset"
                },
                "DAT_00127750": {
                    "1": "stab_names_array"
                },
                "DAT_001278c0": {
                    "1": "loop_iterations"
                },
                "FUN_00108b3e": {
                    "1": "display_stabs_entries",
                    "13": "print_last_stabs_entries",
                    "3": "print_last_stab_entries",
                    "4": "print_stab_entries",
                    "7": "print_stabs_entries"
                },
                "__format": {
                    "1": "format_msg",
                    "16": "format_string",
                    "2": "format",
                    "8": "format_str"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "bfd_get_stab_name": {
                    "1": "get_symbol_name"
                },
                "dcgettext": {
                    "1": "get_text_domain"
                },
                "fprintf": {
                    "1": "print_to_stderr"
                },
                "fputc": {
                    "1": "write_char_stderr"
                },
                "fwrite": {
                    "1": "write_to_stderr"
                },
                "iVar5": {
                    "1": "current_index",
                    "12": "counter",
                    "2": "iteration_count",
                    "3": "index",
                    "5": "count"
                },
                "lVar1": {
                    "31": "stab_name"
                },
                "lVar2": {
                    "1": "loop_index",
                    "2": "i",
                    "22": "index"
                },
                "lVar3": {
                    "1": "stab_entry_offset",
                    "28": "offset"
                },
                "param_1": {
                    "1": "param_arg1",
                    "23": "param_1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "param_file",
                    "23": "param_2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "param_return",
                    "20": "param_3",
                    "4": "param3"
                },
                "piVar4": {
                    "1": "symbol_type",
                    "12": "stab_entry",
                    "2": "stab",
                    "3": "stab_type",
                    "6": "stab_ptr"
                }
            },
            "called": [
                "FUN_00104800",
                "FUN_00104110",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_string = (char *)get_text_domain(0,\"Last stabs entries before error:\\n\",5);\n  print_to_stderr(error_output,format_string);\n  write_to_stderr(\"n_type n_desc n_value  string\\n\",1,0x1e,error_output);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stab_name = get_symbol_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          write_to_stderr(\"HdrSym\",1,6,error_output);\n        }\n        else {\n          print_to_stderr(error_output,\"%-6d\");\n        }\n      }\n      else {\n        print_to_stderr(error_output,\"%-6s\",stab_name);\n      }\n      print_to_stderr(error_output,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      print_to_stderr(error_output,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stab_entry != 0) {\n        print_to_stderr(error_output,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      write_char_stderr(10,error_output);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return param_3;\n}\n\n",
            "current_name": "print_last_stabs_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "_stderr": "error_output",
                "bfd_get_stab_name": "get_symbol_name",
                "dcgettext": "get_text_domain",
                "fprintf": "print_to_stderr",
                "fputc": "write_char_stderr",
                "fwrite": "write_to_stderr",
                "iVar5": "counter",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "*param_1": {
                    "1": "input_param"
                },
                "FUN_00108c86": {
                    "1": "extract_prefix",
                    "2": "extract_component_info",
                    "3": "parse_driver_name",
                    "7": "extract_binary_info"
                },
                "FUN_00113fb0": {
                    "1": "starts_with_lto_priv_0_lto_priv_0"
                },
                "__s": {
                    "1": "driver_name_ptr",
                    "2": "str",
                    "3": "driver_name",
                    "4": "substring",
                    "5": "input_string"
                },
                "__s1": {
                    "1": "arch_marker",
                    "2": "substring2",
                    "3": "architecture_string",
                    "5": "architecture"
                },
                "bVar8": {
                    "1": "temp_byte",
                    "3": "byte_value",
                    "4": "is_negative",
                    "9": "flag"
                },
                "cVar1": {
                    "1": "starts_with_dash",
                    "2": "starts_with",
                    "7": "startswith_result"
                },
                "iVar2": {
                    "1": "string_cmp_result",
                    "21": "comparison_result",
                    "3": "result",
                    "4": "strcmp_result"
                },
                "lVar5": {
                    "1": "position",
                    "10": "offset",
                    "2": "param_value",
                    "3": "string_length"
                },
                "param_1": {
                    "1": "driver_name_ptr",
                    "2": "binary_data",
                    "3": "input_address"
                },
                "puVar4": {
                    "1": "parsed_string",
                    "2": "new_string_ptr",
                    "5": "new_string",
                    "6": "allocated_memory"
                },
                "puVar6": {
                    "1": "decoded_data_position",
                    "2": "new_string_ptr_iterator",
                    "4": "new_string_ptr"
                },
                "sVar3": {
                    "1": "len",
                    "13": "string_length",
                    "3": "input_length",
                    "5": "name_length"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strncmp": {
                    "1": "compare_strings"
                },
                "uVar7": {
                    "1": "return_val",
                    "19": "return_value",
                    "7": "result"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 extract_binary_info_00108c86(long *input_address)\n\n{\n  char startswith_result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *allocated_memory;\n  long offset;\n  char *input_string;\n  char *architecture;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *input_address;\n  input_string = (char *)(offset + 4);\n  startswith_result = startswith_lto_priv_0_lto_priv_0(input_string,&DAT_0011b73b);\n  if (startswith_result == '\\0') {\n    startswith_result = startswith_lto_priv_0_lto_priv_0(input_string,\"bsdrv-\");\n    if (startswith_result == '\\0') {\n      startswith_result = startswith_lto_priv_0_lto_priv_0(input_string,\"rtdrv-\");\n      if (startswith_result == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      input_string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(input_string);\n  allocated_memory = (undefined2 *)allocate_memory(string_length + 8);\n  architecture = input_string + 4;\n  new_string_ptr = allocated_memory;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_string_ptr = *input_string;\n    input_string = input_string + (ulong)flag * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(allocated_memory + 1) = 0x69;\n  *allocated_memory = 0x6570;\n  comparison_result = compare_strings(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)allocated_memory + 7) = 0x36;\n    *(undefined2 *)((long)allocated_memory + 5) = 0x3833;\n  }\n  else {\n    comparison_result = compare_strings(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)allocated_memory + 7) = 0x2d;\n    }\n    else {\n      comparison_result = compare_strings(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)allocated_memory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_address = (long)allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "extract_binary_info_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "extract_binary_info_00108c86",
                "__s": "input_string",
                "__s1": "architecture",
                "bVar8": "flag",
                "cVar1": "startswith_result",
                "iVar2": "comparison_result",
                "lVar5": "offset",
                "param_1": "input_address",
                "puVar4": "allocated_memory",
                "puVar6": "new_string_ptr",
                "sVar3": "string_length",
                "strcmp": "compare_strings",
                "uVar7": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "FUN_00108d9a": {
                    "1": "check_for_redefinition",
                    "2": "check_symbol_redefined",
                    "23": "check_symbol_redefinition"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fatal": {
                    "1": "show_fatal_error"
                },
                "htab_find": {
                    "1": "find_symbol",
                    "2": "find_in_hash_table"
                },
                "htab_find_slot": {
                    "1": "find_slot"
                },
                "lVar3": {
                    "1": "symbol_lookup",
                    "2": "symbol_entry_found",
                    "4": "symbol_exists",
                    "7": "symbol_found"
                },
                "param_1": {
                    "1": "param_symbol",
                    "14": "error_message",
                    "2": "message",
                    "3": "param"
                },
                "param_2": {
                    "1": "symbol",
                    "18": "symbol_name",
                    "2": "symbol_name_1",
                    "3": "symbol1",
                    "6": "symbol_name1"
                },
                "param_3": {
                    "1": "target_symbol_name",
                    "16": "target_symbol",
                    "2": "symbol_name_2",
                    "3": "symbol2",
                    "6": "symbol_name2"
                },
                "param_4": {
                    "1": "return_val",
                    "10": "return_value",
                    "13": "result",
                    "3": "param_4"
                },
                "pcVar2": {
                    "1": "duplicate_symbol_name",
                    "2": "dup_symbol",
                    "4": "symbol_name_copy",
                    "5": "symbol_copy",
                    "6": "duplicate_symbol"
                },
                "plVar5": {
                    "1": "slot_entry",
                    "3": "symbol_entry_slot",
                    "4": "slot_ptr",
                    "7": "symbol_slot"
                },
                "ppcVar1": {
                    "1": "symbol_storage",
                    "2": "symbol_table_entry",
                    "3": "symbol_pair",
                    "4": "symbol_pointers",
                    "5": "symbol_names",
                    "6": "symbol_entry"
                },
                "strdup": {
                    "3": "duplicate_string"
                },
                "uVar4": {
                    "1": "translation",
                    "14": "error_message",
                    "2": "error_msg",
                    "5": "error_string"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240",
                "FUN_001047d0",
                "FUN_00104390",
                "FUN_001044a0",
                "FUN_00104880"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_entry;\n  char *duplicate_symbol;\n  long symbol_found;\n  undefined8 error_message;\n  long *slot_pointer;\n  \n  symbol_entry = (char **)allocate_memory(0x10);\n  duplicate_symbol = duplicate_string(symbol_name);\n  *symbol_entry = duplicate_symbol;\n  duplicate_symbol = duplicate_string(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_entry[1] = duplicate_symbol;\n  symbol_found = find_in_hash_table(error_message,symbol_entry);\n  if (symbol_found != 0) {\n    error_message = get_localized_message(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_fatal_error(error_message,error_message,symbol_name);\n  }\n  symbol_found = find_in_hash_table(DAT_001278e8,target_symbol);\n  if (symbol_found != 0) {\n    error_message = get_localized_message(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_fatal_error(error_message,error_message,target_symbol);\n  }\n  slot_pointer = (long *)find_slot_in_hash_table(DAT_001278f0,symbol_entry,1);\n  error_message = DAT_001278e8;\n  *slot_pointer = (long)symbol_entry;\n  duplicate_symbol = symbol_entry[1];\n  symbol_entry = (char **)find_slot_in_hash_table(error_message,duplicate_symbol,1);\n  *symbol_entry = duplicate_symbol;\n  return result;\n}\n\n",
            "current_name": "check_symbol_redefinition_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "dcgettext": "get_localized_message",
                "fatal": "print_fatal_error",
                "htab_find": "find_in_hash_table",
                "htab_find_slot": "find_slot_in_hash_table",
                "lVar3": "symbol_found",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "duplicate_symbol",
                "plVar5": "slot_pointer",
                "ppcVar1": "symbol_entry",
                "strdup": "duplicate_string",
                "uVar4": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "FUN_00108e76": {
                    "1": "parse_integer_from_byte_array",
                    "2": "extract_integer_from_byte_array",
                    "3": "extract_number_from_byte_array",
                    "6": "parse_integer"
                },
                "bVar1": {
                    "10": "current_char",
                    "16": "current_byte",
                    "2": "byte_value"
                },
                "iVar2": {
                    "1": "extracted_number",
                    "11": "result",
                    "2": "numeric_value",
                    "4": "parsed_number",
                    "7": "parsed_integer"
                },
                "pByte": {
                    "1": "current_byte"
                },
                "param_1": {
                    "1": "byte_sequence",
                    "2": "data",
                    "3": "input_data",
                    "4": "string_ptr",
                    "7": "byte_array"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d21c"
            ],
            "code": "\nint parse_integer_00108e76(byte **byte_array)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **byte_array;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *byte_array = *byte_array + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "current_name": "parse_integer_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "bVar1": "current_byte",
                "iVar2": "result",
                "param_1": "byte_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "FUN_00108ea1": {
                    "1": "parse_integer_param",
                    "10": "parse_number",
                    "6": "parse_integer_from_string",
                    "7": "parse_integer"
                },
                "_sch_istable": {
                    "1": "character_table"
                },
                "iVar1": {
                    "1": "int_value",
                    "2": "temp_var",
                    "4": "current_digit"
                },
                "param_1": {
                    "1": "string_pointer",
                    "2": "string",
                    "3": "input_data",
                    "6": "input",
                    "7": "string_ptr"
                },
                "param_2": {
                    "1": "output_num",
                    "3": "result_ptr",
                    "4": "output_value",
                    "5": "result",
                    "6": "output"
                },
                "pbVar2": {
                    "1": "char_ptr",
                    "10": "current_char",
                    "14": "current_byte",
                    "3": "current_char_ptr"
                },
                "pbVar3": {
                    "1": "next_byte_ptr",
                    "10": "next_char",
                    "15": "next_byte",
                    "5": "next_char_ptr"
                },
                "uVar4": {
                    "1": "parsed_ulong",
                    "2": "parsed_number",
                    "21": "result",
                    "4": "return_value"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\nulong parse_number_00108ea1(byte **string_ptr,int *output)\n\n{\n  int current_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *string_ptr;\n  result = 0;\n  if (((&character_table)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_digit = (char)*current_byte + -0x30;\n    *output = current_digit;\n    *string_ptr = next_byte;\n    if (((&character_table)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&character_table)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *string_ptr = next_byte;\n        *output = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "_sch_istable": "character_table",
                "iVar1": "current_digit",
                "param_1": "string_ptr",
                "param_2": "output",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "DAT_": {
                    "1": "<unchanged>"
                },
                "FUN_00108f05": {
                    "1": "calculate_return_value",
                    "13": "get_one",
                    "2": "initialize",
                    "4": "get_return_value"
                },
                "PTR_": {
                    "1": "<unchanged>"
                },
                "is_true": {
                    "1": ""
                },
                "return": {
                    "1": "return_value",
                    "3": "result"
                },
                "return value": {
                    "1": "success_code"
                },
                "return_value": {
                    "1": "result"
                },
                "undefined": {
                    "2": "",
                    "4": "int"
                },
                "void": {
                    "1": ""
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nint get_one_00108f05(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_one_00108f05",
                "return": "result",
                "undefined": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "1": "debug_source",
                    "2": "update_debug_source",
                    "4": "add_source_file",
                    "7": "debug_start_source"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "bVar9": {
                    "1": "byte_value",
                    "2": "zero_flag",
                    "3": "zero_byte",
                    "4": "byte_var",
                    "6": "flag"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "iVar1": {
                    "2": "filename_comparison_result",
                    "21": "comparison_result",
                    "5": "cmp_result"
                },
                "lVar5": {
                    "1": "index",
                    "23": "loop_counter",
                    "4": "counter"
                },
                "param_1": {
                    "1": "debug_source_ptr",
                    "2": "debug_context",
                    "5": "source_manager"
                },
                "param_2": {
                    "2": "file_name",
                    "29": "filename"
                },
                "pcVar7": {
                    "1": "current_file_name",
                    "13": "current_filename",
                    "3": "selected_filename",
                    "4": "default_filename"
                },
                "puVar3": {
                    "1": "filename_list",
                    "2": "current_source",
                    "3": "source_list",
                    "4": "current_node",
                    "7": "current_entry"
                },
                "puVar4": {
                    "1": "source_node",
                    "2": "previous",
                    "3": "previous_node",
                    "5": "temp_ptr",
                    "6": "previous_entry"
                },
                "puVar6": {
                    "1": "start_entry",
                    "2": "head",
                    "5": "source_list"
                },
                "puVar8": {
                    "1": "ptr2",
                    "2": "tail",
                    "3": "new_entry"
                },
                "uVar2": {
                    "16": "result",
                    "3": "success_flag",
                    "4": "success",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_001041a0",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_manager,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_entry;\n  undefined8 *previous_entry;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *new_entry;\n  byte flag;\n  \n  flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_manager + 8) == 0) {\n    result = get_error_message(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(error_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_manager + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(source_manager + 0x10);\n    new_entry = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)new_entry = 0;\n      new_entry = (undefined8 *)((long)new_entry + (ulong)flag * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    new_entry = (undefined8 *)*source_list;\n    while (previous_entry = new_entry, previous_entry != (undefined8 *)0x0) {\n      source_list = previous_entry;\n      new_entry = (undefined8 *)*previous_entry;\n    }\n    *source_list = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_manager + 0x10) = current_entry;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "debug_start_source_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "_stderr": "error_stream",
                "bVar9": "flag",
                "dcgettext": "get_error_message",
                "iVar1": "comparison_result",
                "lVar5": "loop_counter",
                "param_1": "source_manager",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_entry",
                "puVar4": "previous_entry",
                "puVar6": "source_list",
                "puVar8": "new_entry",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "2": "print_stab_error",
                    "3": "print_bad_stab_error",
                    "4": "print_bad_stab_message",
                    "9": "print_bad_stab"
                },
                "__format": {
                    "1": "localized_error_message",
                    "17": "format_string",
                    "2": "error_message",
                    "5": "error_format"
                },
                "param_1": {
                    "1": "input_string",
                    "2": "error_msg",
                    "20": "error_message",
                    "3": "stab"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_bad_stab_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_bad_stab_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "1": "print_warning_message",
                    "30": "print_warning"
                },
                "__format": {
                    "1": "format",
                    "10": "warning_format",
                    "16": "format_string",
                    "2": "warning_message_format"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "in_RAX": {
                    "1": "temporary_register",
                    "5": "result",
                    "8": "return_value"
                },
                "param_1": {
                    "1": "message_type",
                    "16": "message",
                    "2": "warning_message",
                    "3": "message1",
                    "4": "file_name"
                },
                "param_2": {
                    "1": "error_type",
                    "2": "file",
                    "3": "file_name",
                    "5": "filename",
                    "9": "source"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "code": "\n\n\nvoid print_warning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 return_value;\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(error_stream,format_string,source,message,return_value);\n  return;\n}\n\n",
            "current_name": "print_warning_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "__format": "format_string",
                "_stderr": "error_stream",
                "in_RAX": "return_value",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "1": "get_type_file",
                    "2": "parse_file_type",
                    "5": "process_file"
                },
                "auVar8": {
                    "1": "return_au_var8",
                    "17": "return_value",
                    "2": "return_val",
                    "7": "result"
                },
                "bVar7": {
                    "1": "zero_byte",
                    "3": "byte_flag",
                    "7": "byte_var",
                    "8": "byte_value"
                },
                "lVar4": {
                    "1": "loop_index",
                    "2": "loop_var",
                    "21": "loop_counter",
                    "4": "counter"
                },
                "param_1": {
                    "1": "file_meta_data",
                    "3": "file_table",
                    "4": "file_handle",
                    "5": "file_index",
                    "7": "file_number"
                },
                "param_2": {
                    "1": "type_file_number",
                    "2": "file_array",
                    "3": "type_index",
                    "4": "type_indices",
                    "6": "file_numbers"
                },
                "param_3": {
                    "1": "stdout",
                    "12": "param3",
                    "2": "param1",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "ptr2",
                    "12": "param4",
                    "2": "var2",
                    "6": "param_4"
                },
                "pcVar2": {
                    "1": "error_string",
                    "2": "err_msg",
                    "23": "error_message",
                    "4": "error_msg"
                },
                "plVar3": {
                    "1": "type_file",
                    "2": "file_data_ptr",
                    "3": "file_data",
                    "6": "result"
                },
                "pplVar6": {
                    "1": "file_data_ptr",
                    "2": "pointer_to_pointer",
                    "3": "type_array"
                },
                "uVar1": {
                    "1": "type_file_number",
                    "13": "type_index",
                    "2": "index",
                    "5": "file_index"
                },
                "uVar5": {
                    "1": "type_index_part2",
                    "2": "temp",
                    "3": "type_file_number",
                    "4": "file_number"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] process_file_00109022(long file_number,uint *file_numbers,undefined8 param3,undefined8 param4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *result;\n  long loop_counter;\n  uint type_index;\n  long **type_array;\n  byte byte_value;\n  undefined return_value [16];\n  \n  byte_value = 0;\n  type_index = *file_numbers;\n  type_index = file_numbers[1];\n  if (((int)type_index < 0) || (*(uint *)(file_number + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      type_array = (long **)(*(long *)(file_number + 0x88) + (long)(int)type_index * 8);\n      for (type_index = type_index; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*type_array == (long *)0x0) {\n          result = (long *)xmalloc(0x88);\n          *type_array = result;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)result = 0;\n            result = (long *)((long)result + (ulong)byte_value * -8 + 4);\n          }\n        }\n        type_array = (long **)*type_array;\n      }\n      if (*type_array == (long *)0x0) {\n        result = (long *)xmalloc(0x88);\n        *type_array = result;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)result = 0;\n          result = (long *)((long)result + (ulong)byte_value * -8 + 4);\n        }\n      }\n      result = *type_array + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  result = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = param4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "process_file_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "auVar8": "return_value",
                "bVar7": "byte_value",
                "lVar4": "loop_counter",
                "param_1": "file_number",
                "param_2": "file_numbers",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar2": "error_message",
                "plVar3": "result",
                "pplVar6": "type_array",
                "uVar1": "type_index",
                "uVar5": "type_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "1": "print_bad_mangled_name",
                    "2": "print_mangled_name_error",
                    "27": "print_error_message"
                },
                "__format": {
                    "1": "error_message_format",
                    "2": "error_format",
                    "20": "format_string",
                    "5": "message_format"
                },
                "param_1": {
                    "1": "error_msg",
                    "10": "message",
                    "15": "error_message",
                    "4": "mangled_name"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "1": "find_type_by_name",
                    "30": "find_named_type"
                },
                "auVar7": {
                    "1": "result_tuple",
                    "14": "result",
                    "2": "return_data",
                    "9": "return_value"
                },
                "iVar2": {
                    "2": "result",
                    "29": "comparison_result"
                },
                "lVar1": {
                    "1": "current_cu_offset",
                    "12": "current_unit",
                    "4": "current_unit_ptr"
                },
                "lVar5": {
                    "1": "ptr2",
                    "2": "current_list"
                },
                "param_1": {
                    "1": "binary",
                    "22": "compilation_unit"
                },
                "param_2": {
                    "1": "type",
                    "2": "name",
                    "28": "type_name"
                },
                "param_3": {
                    "1": "stdout",
                    "2": "var_3",
                    "3": "unused_param_1",
                    "4": "param3"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "2": "default_value",
                    "3": "arg4",
                    "4": "param_4",
                    "5": "result"
                },
                "puVar4": {
                    "1": "iter_ptr",
                    "3": "current_node",
                    "5": "current_element",
                    "8": "current_entry"
                },
                "puVar6": {
                    "1": "ptr2",
                    "2": "current_ptr"
                },
                "uVar3": {
                    "1": "debug_msg",
                    "2": "error_msg",
                    "22": "error_message"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104470",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 param_3,undefined8 result)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long entry_offset;\n  undefined8 *unit_iterator;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (entry_offset = *(long *)(compilation_unit + 0x20); entry_offset != 0; entry_offset = *(long *)(entry_offset + 8)) {\n      if (*(undefined8 **)(entry_offset + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(entry_offset + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (unit_iterator = *(undefined8 **)(current_compilation_unit + 8); unit_iterator != (undefined8 *)0x0;\n        unit_iterator = (undefined8 *)*unit_iterator) {\n      if ((undefined8 *)unit_iterator[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)unit_iterator[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = result;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_compilation_unit",
                "lVar5": "entry_offset",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_4": "result",
                "puVar4": "current_entry",
                "puVar6": "unit_iterator",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "1": "is_equal_recursive",
                    "2": "compare",
                    "20": "compare_values",
                    "5": "check_equality"
                },
                "FUN_0010922b.bVar12": {
                    "1": "byte_result"
                },
                "FUN_0010922b.cVar11": {
                    "1": "char_result"
                },
                "FUN_0010922b.iVar13": {
                    "1": "int_var"
                },
                "FUN_0010922b.lVar19": {
                    "1": "long_var_4"
                },
                "FUN_0010922b.lVar22": {
                    "1": "long_var_5"
                },
                "FUN_0010922b.lVar6": {
                    "1": "long_var_1"
                },
                "FUN_0010922b.lVar7": {
                    "1": "long_var_2"
                },
                "FUN_0010922b.lVar8": {
                    "1": "long_var_3"
                },
                "FUN_0010922b.local_48": {
                    "1": "ptr_long_3"
                },
                "FUN_0010922b.local_58": {
                    "1": "ptr_undefined8_ptr"
                },
                "FUN_0010922b.local_70": {
                    "1": "ptr_long_1"
                },
                "FUN_0010922b.param_1": {
                    "1": "param1",
                    "4": "param_1"
                },
                "FUN_0010922b.param_2": {
                    "1": "value1",
                    "2": "value_1"
                },
                "FUN_0010922b.param_3": {
                    "1": "value2",
                    "2": "value_2"
                },
                "FUN_0010922b.pcVar10": {
                    "1": "ptr_string_2"
                },
                "FUN_0010922b.pcVar9": {
                    "1": "ptr_string_1"
                },
                "FUN_0010922b.plStack_50": {
                    "1": "ptr_long_2"
                },
                "FUN_0010922b.plVar18": {
                    "1": "ptr_long_var_1"
                },
                "FUN_0010922b.plVar20": {
                    "1": "ptr_long_var_2"
                },
                "FUN_0010922b.plVar21": {
                    "1": "ptr_long_var_3"
                },
                "FUN_0010922b.ppcVar4": {
                    "1": "ptr_ptr_string_1"
                },
                "FUN_0010922b.ppcVar5": {
                    "1": "ptr_ptr_string_2"
                },
                "FUN_0010922b.pplVar3": {
                    "1": "ptr_ptr_value_2"
                },
                "FUN_0010922b.puVar16": {
                    "1": "ptr_undefined8_var_1"
                },
                "FUN_0010922b.puVar17": {
                    "1": "ptr_undefined8_var_2"
                },
                "FUN_0010922b.uVar1": {
                    "1": "type_1"
                },
                "FUN_0010922b.uVar14": {
                    "1": "undefined8_var_1"
                },
                "FUN_0010922b.uVar15": {
                    "1": "undefined8_var_2"
                },
                "FUN_0010922b.uVar2": {
                    "1": "type_2"
                },
                "FUN_0010922b_param_1": {
                    "2": "param_1"
                },
                "FUN_0010922b_param_2": {
                    "1": "arr1"
                },
                "FUN_0010922b_param_3": {
                    "1": "arr2"
                },
                "FUN_00112b6e": {
                    "1": "find_in_array",
                    "2": "find_index",
                    "5": "find_value"
                },
                "abort": {
                    "1": "abort_program"
                },
                "bVar12": {
                    "1": "byte_result",
                    "10": "is_equal",
                    "2": "result_flag",
                    "5": "return_value",
                    "6": "result"
                },
                "cVar11": {
                    "1": "char_variable_1",
                    "16": "result",
                    "2": "compare_result",
                    "5": "comparison_result"
                },
                "iVar13": {
                    "1": "int_value",
                    "15": "comparison_result",
                    "2": "temp_var"
                },
                "lVar19": {
                    "1": "iter_4_value",
                    "10": "offset",
                    "5": "index"
                },
                "lVar22": {
                    "1": "k",
                    "2": "i"
                },
                "lVar6": {
                    "1": "long_var_1",
                    "2": "size1",
                    "3": "offset1"
                },
                "lVar7": {
                    "1": "size1",
                    "2": "length_2",
                    "3": "offset2"
                },
                "lVar8": {
                    "1": "long_var_3",
                    "2": "length3"
                },
                "local_48": {
                    "1": "local_long_array2"
                },
                "local_58": {
                    "1": "local_ptr_array2",
                    "2": "linked_list",
                    "3": "ptr_list"
                },
                "local_70": {
                    "1": "local_value1_data",
                    "2": "local_ptr1"
                },
                "param_1": {
                    "1": "param",
                    "2": "param1",
                    "3": "function_pointer",
                    "4": "function_data"
                },
                "param_2": {
                    "1": "data1",
                    "4": "value_1",
                    "8": "array1"
                },
                "param_3": {
                    "1": "arr_2",
                    "4": "value2",
                    "8": "array2"
                },
                "pcVar10": {
                    "1": "ptr_char2",
                    "2": "char2",
                    "3": "char_ptr_2",
                    "5": "char_ptr2"
                },
                "pcVar9": {
                    "1": "ptr_str_1",
                    "2": "char_pointer_1",
                    "3": "char_pointer1",
                    "5": "char_ptr1"
                },
                "plStack_50": {
                    "1": "stack_ptr",
                    "2": "stack_array1"
                },
                "plVar18": {
                    "1": "data1"
                },
                "plVar20": {
                    "1": "ptr2",
                    "2": "pointer_2"
                },
                "plVar21": {
                    "1": "list3",
                    "2": "pointer_3"
                },
                "ppcVar4": {
                    "1": "ptr2",
                    "2": "ptr_ptr2"
                },
                "ppcVar5": {
                    "1": "char_array_2",
                    "2": "ptr_ptr3"
                },
                "pplVar3": {
                    "1": "pointer_to_value_1",
                    "2": "ptr_ptr1"
                },
                "puVar16": {
                    "1": "pointer_value1",
                    "2": "ptr_ptr4",
                    "4": "ptr_1",
                    "7": "ptr1"
                },
                "puVar17": {
                    "1": "ptr_to_type2",
                    "2": "ptr_ptr5",
                    "4": "ptr_2",
                    "8": "ptr2"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar1": {
                    "1": "array1_value",
                    "2": "value1_type",
                    "4": "value_1",
                    "8": "value1"
                },
                "uVar14": {
                    "1": "debug_value_1",
                    "2": "value1_real_type",
                    "3": "real_type_1",
                    "4": "real_type1",
                    "5": "type1"
                },
                "uVar15": {
                    "1": "value_ptr_2",
                    "2": "type_2",
                    "3": "real_type_2",
                    "4": "real_type2",
                    "5": "type2"
                },
                "uVar2": {
                    "1": "var2",
                    "2": "value_type_2",
                    "4": "value_2",
                    "8": "value2"
                }
            },
            "called": [
                "FUN_0010922b",
                "FUN_001040a0",
                "FUN_00104470",
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "code": "\nbyte compare_values_0010922b(long function_data,long *array1,long *array2)\n\n{\n  uint value1;\n  uint value2;\n  long **ptr_ptr1;\n  char **ptr_ptr2;\n  char **ptr_ptr3;\n  long offset1;\n  long offset2;\n  long offset3;\n  char *char_ptr1;\n  char *char_ptr2;\n  char result;\n  byte is_equal;\n  int comparison_result;\n  undefined8 type1;\n  undefined8 type2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *pointer_1;\n  long offset;\n  long *pointer_2;\n  long *pointer_3;\n  long offset;\n  long *local_ptr1;\n  undefined8 *ptr_list;\n  long *stack_array1;\n  long *pointer_6;\n  \n  pointer_1 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (pointer_1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)array1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)array2, value2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    pointer_1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  ptr_list = *(undefined8 **)(function_data + 0x58);\n  for (ptr2 = ptr_list; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == array1) && ((long *)ptr2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(function_data + 0x58) = &ptr_list;\n  stack_array1 = array1;\n  pointer_6 = array2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    pointer_1 = (long *)array1[2];\n    ptr_ptr1 = (long **)array2[2];\n    if (pointer_1 == (long *)0x0) {\n      is_equal = ptr_ptr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(function_data + 0x38) < *(uint *)((long)pointer_1 + 0xc)) &&\n       (*(uint *)((long)pointer_1 + 0xc) == *(uint *)((long)ptr_ptr1 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*pointer_1;\n    local_ptr1 = *ptr_ptr1;\n    if (((ptr2 == (undefined8 *)0x0) == (local_ptr1 == (long *)0x0)) &&\n       ((((pointer_1[2] == 0) == (ptr_ptr1[2] == (long *)0x0) &&\n         ((pointer_1[3] == 0) == (ptr_ptr1[3] == (long *)0x0))) &&\n        ((pointer_1[4] == 0) == (ptr_ptr1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((pointer_1[4] != 0) &&\n           (result = compare_values_0010922b(function_data,pointer_1[4],ptr_ptr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        pointer_3 = (long *)pointer_1[2];\n        if (pointer_3 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)pointer_1[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          pointer_1 = ptr_ptr1[3];\n          while( true ) {\n            ptr_ptr3 = (char **)*ptr2;\n            if (ptr_ptr3 == (char **)0x0) {\n              is_equal = *pointer_1 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_ptr2 = (char **)*pointer_1;\n            if (ptr_ptr2 == (char **)0x0) break;\n            if ((**ptr_ptr3 != **ptr_ptr2) || (comparison_result = compare_strings(*ptr_ptr3,*ptr_ptr2), comparison_result != 0))\n            break;\n            char_ptr1 = ptr_ptr3[1];\n            char_ptr2 = ptr_ptr2[1];\n            if ((char_ptr1 == (char *)0x0) != (char_ptr2 == (char *)0x0)) break;\n            if (char_ptr1 != (char *)0x0) {\n              offset = 0;\n              while( true ) {\n                ptr_ptr3 = *(char ***)(char_ptr1 + offset);\n                ptr_ptr2 = *(char ***)(char_ptr2 + offset);\n                if (ptr_ptr3 == (char **)0x0) break;\n                if (ptr_ptr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_ptr3 != **ptr_ptr2) ||\n                     ((((ulong)ptr_ptr3[2] ^ (ulong)ptr_ptr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_ptr3[3] != ptr_ptr2[3] ||\n                     ((((ptr_ptr3[4] == (char *)0x0) != (ptr_ptr2[4] == (char *)0x0) ||\n                       (comparison_result = compare_strings(*ptr_ptr3,*ptr_ptr2), comparison_result != 0)) ||\n                      (result = compare_values_0010922b(function_data,ptr_ptr3[1],ptr_ptr2[1]), result == '\\0')))))) ||\n                   ((ptr_ptr3[4] != (char *)0x0 &&\n                    (result = compare_values_0010922b(function_data,ptr_ptr3[4],ptr_ptr2[4]), result == '\\0'))))\n                goto LAB_00109382;\n                offset = offset + 8;\n              }\n              if (ptr_ptr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            pointer_1 = pointer_1 + 1;\n          }\n        }\n        else {\n          pointer_2 = ptr_ptr1[2];\n          for (; ptr2 = (undefined8 *)*pointer_3, ptr2 != (undefined8 *)0x0;\n              pointer_3 = pointer_3 + 1) {\n            ptr1 = (undefined8 *)*pointer_2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = compare_values_0010922b(function_data,*ptr2,*ptr1), result == '\\0'))\n            goto LAB_00109382;\n            pointer_2 = pointer_2 + 1;\n          }\n          if (*pointer_2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_ptr3 = (char **)*ptr2, ptr_ptr3 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptr_ptr2 = (char **)*local_ptr1;\n          if (ptr_ptr2 == (char **)0x0) goto LAB_00109382;\n          char_ptr1 = *ptr_ptr2;\n          char_ptr2 = *ptr_ptr3;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((ulong)ptr_ptr3[2] ^ (ulong)ptr_ptr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_ptr3 + 0x14) == '\\0') {\n            if (ptr_ptr3[3] == ptr_ptr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison_result = compare_strings(ptr_ptr3[3],ptr_ptr2[3]);\n          if (comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison_result = compare_strings(char_ptr2,char_ptr1);\n          if (((comparison_result != 0) || (ptr_ptr3[1] == (char *)0x0)) || (ptr_ptr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          type1 = debug_get_real_type_isra_0(ptr_ptr2[1],0);\n          type2 = debug_get_real_type_isra_0(ptr_ptr3[1],0);\n          result = compare_values_0010922b(function_data,type2,type1);\n          if (result == '\\0') goto LAB_00109382;\n          local_ptr1 = local_ptr1 + 1;\n        }\n        if (*local_ptr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    pointer_1 = (long *)array1[2];\n    pointer_3 = (long *)array2[2];\n    if (pointer_1 == (long *)0x0) {\n      is_equal = pointer_3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (pointer_3 == (long *)0x0) goto LAB_00109382;\n    offset = *pointer_1;\n    offset1 = *pointer_3;\n    offset = 0;\n    offset2 = pointer_1[1];\n    offset3 = pointer_3[1];\n    do {\n      char_ptr1 = *(char **)(offset + offset);\n      if (char_ptr1 == (char *)0x0) {\n        is_equal = *(long *)(offset1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(char **)(offset1 + offset);\n      if (((char_ptr2 == (char *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(long *)(offset2 + offset) != *(long *)(offset3 + offset))) break;\n      comparison_result = compare_strings(char_ptr1,char_ptr2);\n      offset = offset + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    is_equal = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    is_equal = compare_values_0010922b(function_data,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = compare_values_0010922b(function_data,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      pointer_1 = *(long **)(array1[2] + 8);\n      pointer_3 = *(long **)(array2[2] + 8);\n      if ((pointer_1 == (long *)0x0) == (pointer_3 == (long *)0x0)) {\n        if (pointer_1 == (long *)0x0) goto LAB_001097af;\n        while (((*pointer_1 != 0 && (*pointer_3 != 0)) &&\n               (result = compare_values_0010922b(function_data), result != '\\0'))) {\n          pointer_1 = pointer_1 + 1;\n          pointer_3 = pointer_3 + 1;\n        }\nLAB_0010995d:\n        if (*pointer_1 != 0) goto LAB_00109964;\n        is_equal = *pointer_3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      is_equal = compare_values_0010922b(function_data,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = compare_values_0010922b(function_data,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    is_equal = 0;\n    if (result != '\\0') {\n      is_equal = compare_values_0010922b(function_data,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = compare_values_0010922b(function_data,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = compare_values_0010922b(function_data,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      pointer_1 = *(long **)(array1[2] + 0x10);\n      pointer_3 = *(long **)(array2[2] + 0x10);\n      if ((pointer_1 == (long *)0x0) == (pointer_3 == (long *)0x0)) {\n        if (pointer_1 != (long *)0x0) {\n          while (((*pointer_1 != 0 && (*pointer_3 != 0)) &&\n                 (result = compare_values_0010922b(function_data), result != '\\0'))) {\n            pointer_1 = pointer_1 + 1;\n            pointer_3 = pointer_3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        is_equal = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    is_equal = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    pointer_1 = (long *)array2[2];\n    pointer_3 = (long *)array1[2];\n    comparison_result = compare_strings(*(char **)(*pointer_3 + 8),*(char **)(*pointer_1 + 8));\n    is_equal = 0;\n    if (comparison_result == 0) {\n      is_equal = compare_values_0010922b(function_data,pointer_3[1],pointer_1[1]);\n    }\n    break;\n  default:\n                    \n    abort_program();\n  }\nLAB_001099c1:\n  is_equal = is_equal & 1;\nLAB_001099c4:\n  *(undefined8 **)(function_data + 0x58) = ptr_list;\n  return is_equal;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  pointer_1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "compare_values_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "compare_values_0010922b",
                "abort": "abort_program",
                "bVar12": "is_equal",
                "cVar11": "result",
                "iVar13": "comparison_result",
                "lVar19": "offset",
                "lVar22": "offset",
                "lVar6": "offset1",
                "lVar7": "offset2",
                "lVar8": "offset3",
                "local_48": "pointer_6",
                "local_58": "ptr_list",
                "local_70": "local_ptr1",
                "param_1": "function_data",
                "param_2": "array1",
                "param_3": "array2",
                "pcVar10": "char_ptr2",
                "pcVar9": "char_ptr1",
                "plStack_50": "stack_array1",
                "plVar18": "pointer_1",
                "plVar20": "pointer_2",
                "plVar21": "pointer_3",
                "ppcVar4": "ptr_ptr2",
                "ppcVar5": "ptr_ptr3",
                "pplVar3": "ptr_ptr1",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "strcmp": "compare_strings",
                "uVar1": "value1",
                "uVar14": "type1",
                "uVar15": "type2",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "*param_1": {
                    "1": "source_string"
                },
                "FUN_00109a0b": {
                    "1": "copy_string_to_buffer",
                    "10": "copy_and_null_terminate_string",
                    "16": "copy_and_null_terminate",
                    "4": "copy_string"
                },
                "bVar4": {
                    "1": "counter",
                    "2": "increment_value",
                    "3": "is_negative",
                    "7": "increment",
                    "9": "offset"
                },
                "lVar2": {
                    "1": "counter",
                    "4": "count",
                    "8": "index",
                    "9": "i"
                },
                "param_1": {
                    "10": "source_string",
                    "20": "source"
                },
                "param_2": {
                    "1": "source_string_length",
                    "2": "string_length",
                    "21": "length",
                    "5": "source_length"
                },
                "puVar1": {
                    "1": "copy_buffer",
                    "16": "destination",
                    "2": "allocated_memory",
                    "6": "copied_string"
                },
                "puVar3": {
                    "1": "current_position",
                    "11": "dest_ptr",
                    "2": "current_char",
                    "3": "current_destination",
                    "6": "destination_string"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010afd5"
            ],
            "code": "\nvoid copy_and_null_terminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "bVar4": "offset",
                "lVar2": "i",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "1": "parse_unsigned_number",
                    "2": "parse_unsigned_integer",
                    "3": "parse_unsigned_long",
                    "4": "parse_numeric_input",
                    "6": "parse_numeric_string"
                },
                "__nptr": {
                    "1": "str",
                    "2": "numeric_string",
                    "3": "string",
                    "4": "current_position",
                    "7": "current_char"
                },
                "auVar4": {
                    "1": "result_container",
                    "14": "result",
                    "7": "return_value"
                },
                "param_1": {
                    "1": "string_pointer",
                    "12": "input_string",
                    "3": "input_strings",
                    "8": "string_ptr"
                },
                "param_2": {
                    "1": "numeric_overflow",
                    "2": "conversion_error",
                    "4": "error_flag_ptr",
                    "6": "overflow_flag",
                    "9": "is_overflow"
                },
                "param_3": {
                    "1": "end_of_strings",
                    "15": "end_of_string",
                    "2": "end_pointer",
                    "4": "end_of_input",
                    "8": "end_ptr"
                },
                "param_4": {
                    "1": "unused_param_4",
                    "10": "param_4",
                    "2": "unused_param",
                    "3": "unused_param_1",
                    "4": "param4"
                },
                "param_5": {
                    "1": "unknown_arg_2",
                    "2": "result",
                    "3": "unused_param_2",
                    "4": "param5",
                    "8": "param_5"
                },
                "piVar1": {
                    "1": "errno_value",
                    "18": "errno_ptr"
                },
                "uVar2": {
                    "1": "unsigned_long_value",
                    "3": "numeric_value",
                    "7": "parsed_number",
                    "9": "parsed_value"
                },
                "uVar3": {
                    "1": "error_string_ptr",
                    "25": "error_message",
                    "3": "error_string"
                }
            },
            "called": [
                "FUN_00108fe8",
                "FUN_00104240",
                "FUN_00104790",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *is_overflow,char *end_of_string,undefined8 param_4,undefined8 param_5)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (is_overflow != (undefined *)0x0) {\n    *is_overflow = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (is_overflow == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(current_char,error_message);\n    }\n    else {\n      *is_overflow = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = param_5;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "current_name": "parse_numeric_string_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "__nptr": "current_char",
                "auVar4": "result",
                "param_1": "input_string",
                "param_2": "is_overflow",
                "param_3": "end_of_string",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "FUN_00108fb9": {
                    "1": "bad_stab"
                },
                "FUN_00109a32": {
                    "1": "parse_number"
                },
                "FUN_00109ab1": {
                    "1": "parse_stab_entry",
                    "2": "parse_and_extract_values",
                    "3": "parse_parameters",
                    "4": "parse_and_extract_numbers"
                },
                "auVar4": {
                    "1": "modified_result",
                    "17": "return_value",
                    "3": "return_val",
                    "5": "result"
                },
                "bad_stab": {
                    "3": "handle_error"
                },
                "param_1": {
                    "1": "argument_list",
                    "11": "input_string",
                    "2": "input_str_ptr",
                    "3": "stab_data",
                    "4": "input_ptr"
                },
                "param_2": {
                    "1": "parsed_values",
                    "2": "output_ptr",
                    "4": "output_array",
                    "7": "output",
                    "8": "output_values"
                },
                "param_3": {
                    "1": "parse_number_param_1",
                    "2": "param3",
                    "21": "param_3"
                },
                "param_4": {
                    "1": "external_param_2",
                    "2": "param4",
                    "21": "param_4"
                },
                "param_5": {
                    "1": "param_3",
                    "2": "param5",
                    "21": "param_5"
                },
                "parse_number": {
                    "1": "get_number",
                    "2": "parse_integer"
                },
                "pcVar2": {
                    "1": "current_char_ptr",
                    "27": "current_char",
                    "3": "current_character"
                },
                "uVar1": {
                    "1": "parsed_number_1",
                    "17": "parsed_number",
                    "2": "parsed_number1",
                    "3": "parsed_num",
                    "6": "parsed_value"
                },
                "uVar3": {
                    "1": "concatenated_result",
                    "2": "concatenated_value",
                    "21": "result",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_and_extract_numbers_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_number = parse_integer(input_string,0);\n    *output_values = parsed_number;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_number = parse_integer(input_string,0,param_3);\n      output_values[1] = parsed_number;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    handle_error(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_integer(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_and_extract_numbers_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_and_extract_numbers_00109ab1",
                "auVar4": "return_value",
                "bad_stab": "handle_error",
                "param_1": "input_string",
                "param_2": "output_values",
                "parse_number": "parse_integer",
                "pcVar2": "current_char",
                "uVar1": "parsed_number",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "*__ptr": {
                    "1": "next_ptr"
                },
                "FUN_00109b2f": {
                    "1": "extract_and_free_next_item",
                    "2": "extract_and_free_next",
                    "3": "deallocate_and_return_next",
                    "7": "extract_and_free_ptr"
                },
                "__ptr": {
                    "1": "next_item_ptr",
                    "2": "next_ptr",
                    "3": "current_node",
                    "4": "ptr_value",
                    "7": "current_ptr",
                    "8": "ptr"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "binary_address",
                    "3": "ptr_address",
                    "6": "input_ptr"
                },
                "puVar1": {
                    "1": "data",
                    "2": "next_node",
                    "3": "extracted_value",
                    "4": "result",
                    "7": "return_value"
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_0010abdd",
                "FUN_0010a94e",
                "FUN_0010a83e",
                "FUN_0010aa53",
                "FUN_0010a2b9",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010a181",
                "FUN_0010e7c2",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010ebb0"
            ],
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long input_ptr)\n\n{\n  undefined8 *ptr;\n  undefined8 *return_value;\n  \n  ptr = *(undefined8 **)(input_ptr + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    return_value = (undefined8 *)ptr[1];\n    *(undefined8 *)(input_ptr + 0x60) = *ptr;\n    free(ptr);\n    return return_value;\n  }\n  return ptr;\n}\n\n",
            "current_name": "extract_and_free_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "__ptr": "ptr",
                "param_1": "input_ptr",
                "puVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "create_and_initialize_struct",
                    "10": "initialize_data_structure",
                    "2": "initialize_memory_block",
                    "3": "create_new_entry"
                },
                "param_1": {
                    "1": "entry_list_ptr",
                    "2": "entry_list",
                    "6": "data_structure"
                },
                "param_2": {
                    "1": "new_entry_name",
                    "10": "source_string",
                    "2": "string",
                    "3": "str_param",
                    "4": "string_param",
                    "6": "input_string"
                },
                "param_3": {
                    "1": "secondary_data",
                    "13": "param3",
                    "2": "param3_value",
                    "3": "value"
                },
                "param_4": {
                    "1": "entry_flag",
                    "13": "param4",
                    "2": "param4_value",
                    "5": "flag"
                },
                "param_5": {
                    "1": "status_code",
                    "13": "param5",
                    "2": "param_5"
                },
                "puVar2": {
                    "1": "new_object",
                    "2": "memory_block",
                    "3": "new_entry",
                    "8": "allocated_memory"
                },
                "uVar1": {
                    "1": "old_data",
                    "2": "temp",
                    "3": "temp_var1"
                },
                "uVar3": {
                    "1": "str_param_copy",
                    "18": "duplicated_string",
                    "3": "copied_string"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                },
                "xstrdup": {
                    "2": "duplicate_string"
                }
            },
            "called": [
                "FUN_00104390",
                "FUN_001043d0"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a2b9",
                "FUN_00109cf4",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\nundefined initialize_data_structure_00109b52(long data_structure,undefined8 source_string,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 temp_var1;\n  undefined8 *allocated_memory;\n  undefined8 duplicated_string;\n  \n  allocated_memory = (undefined8 *)allocate_memory(0x40);\n  duplicated_string = duplicate_string(source_string);\n  allocated_memory[2] = param3;\n  *(undefined (*) [16])(allocated_memory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocated_memory + 6) = ZEXT816(0);\n  temp_var1 = *(undefined8 *)(data_structure + 0x60);\n  *(undefined *)((long)allocated_memory + 0x1c) = param4;\n  *(undefined4 *)(allocated_memory + 3) = param5;\n  *(undefined8 **)(data_structure + 0x60) = allocated_memory;\n  *allocated_memory = temp_var1;\n  allocated_memory[1] = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "data_structure",
                "param_2": "source_string",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar2": "allocated_memory",
                "uVar1": "temp_var1",
                "uVar3": "duplicated_string",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "FUN_00109bbb": {
                    "1": "check_and_append_semicolon",
                    "15": "append_semicolon_to_string",
                    "2": "append_semicolon_if_not_null"
                },
                "__s": {
                    "1": "string_to_append",
                    "11": "string_pointer",
                    "2": "str_ptr",
                    "4": "string",
                    "9": "string_ptr"
                },
                "__s + sVar1": {
                    "1": "after_appending"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "input_param",
                    "3": "input_address",
                    "6": "input",
                    "7": "object_address"
                },
                "sVar1": {
                    "1": "length",
                    "23": "string_length"
                }
            },
            "called": [
                "FUN_00104270"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_string_00109bbb(long object_address)\n\n{\n  char *string_pointer;\n  size_t string_length;\n  \n  if (*(long *)(object_address + 0x60) != 0) {\n    string_pointer = *(char **)(*(long *)(object_address + 0x60) + 0x30);\n    if (string_pointer != (char *)0x0) {\n      string_length = strlen(string_pointer);\n      *(undefined2 *)(string_pointer + string_length) = 0x3b;\n    }\n    return string_pointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "__s": "string_pointer",
                "param_1": "object_address",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "*(puVar2 + 1)": {
                    "1": "new_value"
                },
                "*puVar2": {
                    "1": "new_element"
                },
                "FUN_00109be3": {
                    "1": "expand_and_insert_item",
                    "10": "expand_and_store_data",
                    "2": "expand_and_insert_value",
                    "4": "expand_and_add_to_buffer"
                },
                "param_1": {
                    "1": "item_list",
                    "2": "array_info",
                    "4": "data",
                    "7": "buffer",
                    "8": "array"
                },
                "param_1 + 0x20": {
                    "1": "stored_data"
                },
                "param_1 + 0x28": {
                    "1": "element_count"
                },
                "param_1 + 0x2c": {
                    "1": "array_size"
                },
                "param_2": {
                    "1": "input_data",
                    "16": "value",
                    "2": "new_value",
                    "3": "item",
                    "4": "data"
                },
                "param_3": {
                    "1": "data_length",
                    "2": "data",
                    "4": "status",
                    "5": "size",
                    "6": "value",
                    "7": "flag"
                },
                "puVar2": {
                    "1": "buffer_ptr",
                    "2": "new_item",
                    "3": "insertion_point",
                    "9": "new_element"
                },
                "uVar1": {
                    "1": "new_data_buffer",
                    "2": "new_data_ptr",
                    "3": "new_array_ptr",
                    "5": "new_buffer",
                    "7": "realloc_result"
                },
                "uVar3": {
                    "1": "current_item_count",
                    "23": "current_size",
                    "3": "current_index"
                }
            },
            "called": [
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "code": "\nundefined8 expand_and_store_data_00109be3(long array,undefined8 value,undefined4 flag)\n\n{\n  undefined8 realloc_result;\n  undefined8 *new_element;\n  uint current_size;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    current_size = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(array + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(array + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(array + 0x28);\n  new_element = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(array + 0x20));\n  *new_element = value;\n  *(undefined4 *)(new_element + 1) = flag;\n  *(uint *)(array + 0x28) = current_size + 1;\n  return CONCAT71((int7)((ulong)new_element >> 8),1);\n}\n\n",
            "current_name": "expand_and_store_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flag",
                "puVar2": "new_element",
                "uVar1": "realloc_result",
                "uVar3": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "resize_array_and_assign_value",
                    "2": "expand_and_update_array",
                    "3": "expand_array",
                    "4": "resize_array",
                    "7": "resize_and_initialize_array"
                },
                "auVar7": {
                    "1": "return_struct",
                    "2": "result_array",
                    "24": "return_value",
                    "4": "result"
                },
                "bVar6": {
                    "1": "zero_byte",
                    "2": "is_empty",
                    "5": "is_zero"
                },
                "lVar1": {
                    "1": "current_idx",
                    "2": "new_array_size",
                    "3": "new_ptr",
                    "5": "new_array_pointer",
                    "7": "new_array"
                },
                "lVar3": {
                    "1": "index",
                    "10": "remaining_elements",
                    "2": "loop_counter",
                    "3": "remaining",
                    "4": "remaining_bytes"
                },
                "param_1": {
                    "1": "data",
                    "2": "array_ptr",
                    "20": "array"
                },
                "param_2": {
                    "1": "param2_value",
                    "21": "value",
                    "3": "element",
                    "4": "data"
                },
                "param_3": {
                    "1": "index",
                    "18": "size",
                    "6": "array_size"
                },
                "param_4": {
                    "1": "update_flag",
                    "29": "flag"
                },
                "param_5": {
                    "1": "data",
                    "11": "result",
                    "2": "flag_ptr",
                    "7": "output"
                },
                "param_6": {
                    "1": "action",
                    "2": "param",
                    "3": "value",
                    "9": "result"
                },
                "plVar2": {
                    "1": "array_element_pointer",
                    "2": "array_entry",
                    "3": "array_ptr",
                    "4": "current_element"
                },
                "puVar4": {
                    "1": "current_position",
                    "3": "current_byte",
                    "4": "current_ptr",
                    "5": "current_element"
                },
                "uVar5": {
                    "1": "original_size",
                    "17": "current_size",
                    "5": "array_size"
                }
            },
            "called": [
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "code": "\nundefined  [16]\nresize_and_initialize_array_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 result)\n\n{\n  long new_array;\n  long *current_element;\n  long remaining_elements;\n  undefined *current_element;\n  ulong current_size;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_array = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_array;\n    current_element = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_array);\n    for (remaining_elements = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_elements != 0; remaining_elements = remaining_elements + -1) {\n      *current_element = 0;\n      current_element = current_element + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  current_element = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*current_element == 0) {\n    new_array = *(long *)(array + 0x68);\n    *current_element = new_array;\n    *(long *)(array + 0x68) = new_array + 1;\n    current_element[1] = value;\n    *(int *)(current_element + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(current_element + 2) = 0;\n    *(undefined4 *)((long)current_element + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)current_element + 0x14);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = *current_element;\n  return return_value;\n}\n\n",
            "current_name": "resize_and_initialize_array_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "auVar7": "return_value",
                "bVar6": "is_zero",
                "lVar1": "new_array",
                "lVar3": "remaining_elements",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "result",
                "plVar2": "current_element",
                "puVar4": "current_element",
                "uVar5": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "convert_and_push",
                    "2": "push_string_to_stab",
                    "6": "convert_and_push_to_string",
                    "7": "convert_and_push_string",
                    "9": "format_and_push_string"
                },
                "local_3c": {
                    "1": "buffer",
                    "13": "converted_string",
                    "3": "string_value",
                    "4": "number_string",
                    "5": "formatted_string"
                },
                "param_1": {
                    "1": "buffer",
                    "12": "output_buffer",
                    "2": "param1",
                    "3": "stab"
                },
                "param_2": {
                    "1": "integer",
                    "2": "param_value",
                    "5": "value",
                    "6": "input_number",
                    "7": "input_value"
                },
                "param_3": {
                    "1": "int_value",
                    "2": "param",
                    "3": "param3",
                    "4": "format_specifier"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109dfe",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010bba1"
            ],
            "code": "\nvoid format_and_push_string_00109cf4(undefined8 output_buffer,undefined8 input_value,undefined4 flag)\n\n{\n  char converted_string [28];\n  \n  sprintf(converted_string,\"%ld\",input_value);\n  stab_push_string(output_buffer,converted_string,input_value,0,flag);\n  return;\n}\n\n",
            "current_name": "format_and_push_string_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "format_and_push_string_00109cf4",
                "local_3c": "converted_string",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "push_defined_type_aux"
                },
                "FUN_00109d3e": {
                    "1": "push_type_into_stack",
                    "30": "push_defined_type"
                },
                "param_1": {
                    "1": "stack_pointer",
                    "2": "input",
                    "3": "destination",
                    "5": "data",
                    "6": "arg1",
                    "7": "param"
                },
                "param_2": {
                    "1": "type_index",
                    "2": "num",
                    "3": "index",
                    "4": "param2",
                    "5": "arg2",
                    "6": "count",
                    "9": "size"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type_aux"
                },
                "uVar1": {
                    "1": "default_val",
                    "12": "default_value",
                    "2": "type",
                    "3": "selected_value",
                    "5": "defined_type"
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid push_defined_type_00109d3e(undefined8 param,int size)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  push_defined_type_00109d3e_aux(param,default_value,size);\n  return;\n}\n\n",
            "current_name": "push_defined_type_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "param",
                "param_2": "size",
                "stab_push_defined_type": "push_defined_type_aux",
                "uVar1": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109c2e": {
                    "1": "process_defined_type_helper"
                },
                "FUN_00109cf4": {
                    "1": "process_defined_type_subfunc"
                },
                "FUN_00109d5c": {
                    "1": "reverse_struct_index",
                    "16": "push_defined_type"
                },
                "lVar1": {
                    "1": "index",
                    "30": "struct_index"
                },
                "param_1": {
                    "1": "data",
                    "11": "input_param",
                    "4": "input_value",
                    "5": "input_data",
                    "9": "input"
                },
                "param_2": {
                    "1": "second_param"
                },
                "param_3": {
                    "1": "third_param"
                },
                "param_4": {
                    "1": "fourth_param"
                },
                "param_5": {
                    "1": "modify_param"
                },
                "stab_get_struct_index": {
                    "3": "get_struct_index"
                },
                "stab_push_defined_type": {
                    "3": "push_defined_type"
                },
                "uVar2": {
                    "1": "push_result",
                    "26": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 push_defined_type_00109d5c(undefined8 input_param)\n\n{\n  long struct_index;\n  undefined8 result;\n  \n  struct_index = get_struct_index();\n  if (-1 < struct_index) {\n    result = push_defined_type_00109d5c(input_param,struct_index,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "push_defined_type_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "lVar1": "struct_index",
                "param_1": "input_param",
                "stab_get_struct_index": "get_struct_index",
                "stab_push_defined_type": "push_defined_type",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109d97": {
                    "1": "process_stab_entry",
                    "2": "process_param",
                    "9": "process_data"
                },
                "lVar1": {
                    "1": "incremented_value",
                    "16": "counter",
                    "3": "count",
                    "6": "current_value"
                },
                "local_40": {
                    "1": "entry_string",
                    "19": "formatted_string",
                    "2": "buffer"
                },
                "param_1": {
                    "1": "input_parameter",
                    "2": "input_value",
                    "3": "input_data",
                    "4": "param",
                    "7": "data"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109d97(long data)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    push_defined_type(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  push_string(data,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "process_data_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "process_data_00109d97",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data",
                "stab_push_defined_type": "push_defined_type",
                "stab_push_string": "push_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "FUN_00109b52": {
                    "1": "push_defined_type"
                },
                "FUN_00109cf4": {
                    "1": "push_string"
                },
                "FUN_00109dfe": {
                    "1": "parse_value",
                    "2": "process_value",
                    "3": "process_stab_entry",
                    "6": "process_data"
                },
                "lVar1": {
                    "1": "counter_value",
                    "17": "counter",
                    "5": "count"
                },
                "local_40": {
                    "1": "formatted_str",
                    "2": "format_string",
                    "4": "buffer",
                    "5": "string_buffer",
                    "6": "output_string",
                    "8": "formatted_string"
                },
                "param_1": {
                    "1": "variable_ptr",
                    "2": "input_parameter",
                    "3": "param",
                    "5": "input",
                    "8": "data"
                },
                "param_2": {
                    "1": "string"
                },
                "param_3": {
                    "1": "length"
                },
                "param_4": {
                    "1": "param"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_00109dfe(long data)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    push_defined_type(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  *(long *)(data + 0x70) = counter;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  push_string(data,formatted_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "process_data_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "process_data_00109dfe",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data",
                "stab_push_defined_type": "push_defined_type",
                "stab_push_string": "push_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "additional_data": {
                "FUN_00109e76": {
                    "1": "process_data",
                    "2": "update_string_and_push_to_stack",
                    "3": "format_and_push_string"
                },
                "lVar1": {
                    "1": "original_value",
                    "2": "incremented_value",
                    "4": "previous_value",
                    "8": "counter"
                },
                "local_5a": {
                    "1": "formatted_str",
                    "10": "formatted_string",
                    "2": "format_string",
                    "3": "stab_string",
                    "5": "output_string"
                },
                "param_1": {
                    "1": "register_address",
                    "15": "base_address",
                    "2": "ptr_to_data"
                },
                "param_2": {
                    "1": "counter",
                    "17": "value",
                    "2": "register_value",
                    "3": "count"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid format_and_push_string_00109e76(long base_address,uint value)\n\n{\n  long current_value;\n  char formatted_string [58];\n  \n  current_value = *(long *)(base_address + 0x68);\n  *(long *)(base_address + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=r%ld;%u;0;\",current_value,current_value,(ulong)value);\n  stab_push_string(base_address,formatted_string,current_value,1,value * 2);\n  return;\n}\n\n",
            "current_name": "format_and_push_string_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109e76": "format_and_push_string_00109e76",
                "lVar1": "current_value",
                "local_5a": "formatted_string",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "function3"
                },
                "FUN_00109b52": {
                    "1": "function1"
                },
                "FUN_00109cf4": {
                    "1": "function2"
                },
                "FUN_00109ed3": {
                    "1": "extract_and_format_string",
                    "12": "process_data",
                    "2": "parse_and_store_data"
                },
                "__ptr": {
                    "1": "temp_memory",
                    "2": "pointer_var",
                    "4": "temp_ptr",
                    "6": "ptr",
                    "8": "pointer"
                },
                "__s": {
                    "1": "str2",
                    "10": "formatted_string",
                    "12": "new_string",
                    "5": "new_str"
                },
                "bVar12": {
                    "1": "zero_byte",
                    "2": "is_negative",
                    "3": "flag3",
                    "4": "byte_var",
                    "5": "byte_value"
                },
                "cVar3": {
                    "1": "push_result",
                    "12": "result",
                    "2": "return_value",
                    "6": "flag"
                },
                "free": {
                    "1": "release_memory"
                },
                "lVar6": {
                    "1": "temp_variable",
                    "2": "temp_var",
                    "4": "count",
                    "5": "index",
                    "9": "counter"
                },
                "lVar9": {
                    "1": "index",
                    "2": "counter",
                    "4": "remaining_size",
                    "9": "loop_counter"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data",
                    "3": "arg1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "data",
                    "2": "input_2",
                    "3": "data_type",
                    "8": "flag"
                },
                "param_3": {
                    "1": "param_val",
                    "2": "input_3",
                    "3": "arg3",
                    "4": "type",
                    "5": "flag"
                },
                "param_4": {
                    "1": "ptr2",
                    "2": "output_array",
                    "3": "buffer"
                },
                "param_5": {
                    "1": "ulong_arr",
                    "2": "size_array",
                    "3": "size_ptr"
                },
                "pcVar4": {
                    "1": "temp_4",
                    "2": "temp_string",
                    "3": "str",
                    "4": "string_ptr",
                    "9": "string"
                },
                "puVar11": {
                    "1": "undefined_pointer",
                    "2": "byte_ptr",
                    "3": "byte_pointer",
                    "4": "ptr"
                },
                "sVar5": {
                    "1": "input_len",
                    "18": "string_length",
                    "2": "string_len",
                    "4": "str_length"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "stdio.h": {
                    "1": "<header_files>"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "size1",
                    "2": "index",
                    "3": "array_size",
                    "8": "size"
                },
                "uVar10": {
                    "1": "old_size",
                    "14": "current_size",
                    "5": "new_size"
                },
                "uVar2": {
                    "1": "updated_array_size",
                    "14": "new_size",
                    "2": "new_array_size"
                },
                "uVar7": {
                    "1": "return_val",
                    "12": "return_value",
                    "13": "result",
                    "2": "push_result"
                },
                "uVar8": {
                    "1": "update_flag",
                    "2": "flag_value",
                    "4": "flag2",
                    "6": "is_defined"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010a083",
                "FUN_0010e5db"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input_param,uint flag,undefined4 flag,long *buffer,ulong *buffer_size)\n\n{\n  ulong size;\n  ulong new_size;\n  char result;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  long counter;\n  void *pointer;\n  undefined8 result;\n  undefined is_defined;\n  long loop_counter;\n  ulong current_size;\n  undefined *ptr;\n  byte byte_value;\n  \n  byte_value = 0;\n  counter = *(long *)(input_param + 0x60);\n  if (counter != 0) {\n    size = *(ulong *)(counter + 0x10);\n    if (((long)size < 1) || (buffer == (long *)0x0)) {\n      is_defined = *(undefined *)(counter + 0x1c);\n      string = (char *)pop_type(input_param);\n      string_length = get_string_length(string);\n      new_string = (char *)allocate_memory(string_length + 2);\n      sprintf(new_string,\"%c%s\",(ulong)flag,string);\n      release_memory(string);\n      counter = 0;\n    }\n    else {\n      current_size = *buffer_size;\n      if (current_size <= size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= size; current_size = current_size * 2) {\n        }\n        counter = xrealloc(*buffer,current_size * 8);\n        new_size = *buffer_size;\n        *buffer = counter;\n        ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (current_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)byte_value * -2 + 1;\n        }\n        *buffer_size = current_size;\n      }\n      counter = *(long *)(*buffer + size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0')) {\n        pointer = (void *)pop_type(input_param);\n        release_memory(pointer);\n        result = push_defined_type(input_param,counter,flag);\n        return result;\n      }\n      counter = *(long *)(input_param + 0x68);\n      *(long *)(input_param + 0x68) = counter + 1;\n      string = (char *)pop_type(input_param);\n      string_length = get_string_length(string);\n      new_string = (char *)allocate_memory(string_length + 0x14);\n      sprintf(new_string,\"%ld=%c%s\",counter,(ulong)flag,string);\n      release_memory(string);\n      is_defined = 1;\n      *(long *)(*buffer + size * 8) = counter;\n    }\n    result = push_string(input_param,new_string,counter,is_defined,flag);\n    if (result != '\\0') {\n      release_memory(new_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "pointer",
                "__s": "new_string",
                "bVar12": "byte_value",
                "cVar3": "result",
                "free": "release_memory",
                "lVar6": "counter",
                "lVar9": "loop_counter",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "flag",
                "param_4": "buffer",
                "param_5": "buffer_size",
                "pcVar4": "string",
                "puVar11": "ptr",
                "sVar5": "string_length",
                "stab_pop_type": "pop_type",
                "stab_push_defined_type": "push_defined_type",
                "stab_push_string": "push_string",
                "strlen": "get_string_length",
                "uVar1": "size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "result",
                "uVar8": "is_defined",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "0x178": {
                    "1": "offset_1"
                },
                "0x180": {
                    "1": "offset_2"
                },
                "0x2a": {
                    "1": "constant_1"
                },
                "4": {
                    "1": "constant_2"
                },
                "DAT_00109ed3": {
                    "1": "fun_00109ed3"
                },
                "FUN_00109ed3": {
                    "1": "process_sub_function",
                    "2": "modify_stab_entry"
                },
                "FUN_0010a083": {
                    "1": "modify_stab_entry",
                    "10": "modify_stab_type",
                    "2": "modify_stab_entries",
                    "5": "modify_data",
                    "6": "modify_type"
                },
                "param_1": {
                    "1": "param",
                    "2": "base_address",
                    "3": "input_param",
                    "4": "data",
                    "7": "input"
                },
                "param_1 + 0x178": {
                    "1": "arg1_offset_178"
                },
                "param_1 + 0x180": {
                    "1": "modified_param2"
                },
                "param_2": {
                    "1": "constant",
                    "2": "index",
                    "3": "type",
                    "6": "flag"
                },
                "param_3": {
                    "1": "param_code",
                    "2": "param3",
                    "4": "value",
                    "5": "size",
                    "6": "count"
                },
                "param_4": {
                    "1": "pointer1",
                    "2": "ptr_1",
                    "8": "ptr1"
                },
                "param_5": {
                    "1": "address_ptr2",
                    "2": "size_ptr",
                    "8": "ptr2"
                },
                "stab_modify_type": {
                    "1": "update_type",
                    "2": "modify_type",
                    "4": "modify_stab_type"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a083(long input)\n\n{\n  modify_stab_type_0010a083(input,0x2a,4,input + 0x178,input + 0x180);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "0x198": {
                    "1": "offset1"
                },
                "0x1a0": {
                    "1": "offset_2"
                },
                "0x26": {
                    "1": "type_offset",
                    "2": "type"
                },
                "4": {
                    "1": "param_count",
                    "2": "size"
                },
                "FUN_00109ed3": {
                    "1": "modify_stab_subfunction",
                    "2": "process_data"
                },
                "FUN_0010a0a0": {
                    "1": "modify_parameters",
                    "3": "modify_stab_entry",
                    "4": "modify_type",
                    "7": "modify_data",
                    "8": "modify_stab_type"
                },
                "param_1": {
                    "1": "source_ptr",
                    "2": "data_address",
                    "3": "param",
                    "4": "data"
                },
                "param_1 + 0x198": {
                    "1": "param_offset_1",
                    "2": "address_1"
                },
                "param_1 + 0x1a0": {
                    "1": "ptr_address4",
                    "2": "address_2"
                },
                "param_2": {
                    "1": "size_param",
                    "2": "type_value",
                    "7": "type"
                },
                "param_3": {
                    "1": "unknown",
                    "2": "count",
                    "3": "param_3",
                    "8": "value"
                },
                "param_4": {
                    "1": "new_pointer_1",
                    "10": "ptr1",
                    "2": "ptr_data1"
                },
                "param_5": {
                    "1": "ptr_entry_2",
                    "10": "ptr2",
                    "2": "ptr_data2"
                },
                "stab_modify_type": {
                    "1": "modify_symbol_table_type",
                    "13": "modify_stab_type",
                    "7": "modify_type"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0a0(long data)\n\n{\n  modify_stab_type_0010a0a0(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "modify_stab_type_0010a0a0",
                "param_1": "data",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "*(undefined4 *)(*(long *)(input + 0x60) + 0x18)": {
                    "1": "value"
                },
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "value_ptr",
                    "2": "value"
                },
                "0x6b": {
                    "1": "constant"
                },
                "FUN_00109ed3": {
                    "1": "update_long_param",
                    "2": "modify_stab_type_helper",
                    "4": "process_data"
                },
                "FUN_0010a0bd": {
                    "1": "modify_type_in_stab_entries",
                    "15": "modify_stab_type",
                    "4": "modify_stab_entry",
                    "6": "modify_type"
                },
                "param_1": {
                    "1": "data",
                    "2": "arg",
                    "3": "arg1",
                    "4": "param"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "type",
                    "3": "value",
                    "4": "param_2",
                    "8": "param2"
                },
                "param_3": {
                    "1": "type",
                    "2": "data",
                    "3": "arg3",
                    "5": "param_3",
                    "7": "value",
                    "9": "param3"
                },
                "param_4": {
                    "1": "data_address",
                    "2": "ptr1",
                    "3": "arg4",
                    "4": "pointer",
                    "7": "param4"
                },
                "param_5": {
                    "1": "p5",
                    "2": "ptr2",
                    "3": "counter",
                    "8": "param5"
                },
                "stab_modify_type": {
                    "1": "modify_type_in_struct",
                    "3": "modify_type",
                    "5": "modify_stab_type"
                },
                "undefined4": {
                    "1": "param_3"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0bd(long entry_address)\n\n{\n  modify_stab_type_0010a0bd(entry_address,0x6b,*(param_3 *)(*(long *)(entry_address + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "entry_address",
                "stab_modify_type": "modify_stab_type",
                "undefined4": "param_3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18)": {
                    "1": "value_offset",
                    "2": "value"
                },
                "FUN_00109ed3": {
                    "1": "helper_function",
                    "2": "process_data"
                },
                "FUN_0010a0d3": {
                    "1": "modify_data",
                    "18": "modify_stab_type",
                    "4": "modify_stab_entry",
                    "6": "modify_type"
                },
                "long": {
                    "1": "pointer",
                    "2": "long_type"
                },
                "long *": {
                    "1": "long_ptr_type"
                },
                "param_1": {
                    "1": "arg",
                    "2": "input_param",
                    "3": "data",
                    "4": "param",
                    "5": "entry_address",
                    "9": "input"
                },
                "param_2": {
                    "1": "unknown",
                    "2": "param",
                    "3": "value",
                    "5": "param2",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "param_b",
                    "4": "value",
                    "5": "param3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "ptr_stab",
                    "2": "data_ptr",
                    "3": "ptr1",
                    "5": "param4"
                },
                "param_5": {
                    "1": "param_d",
                    "2": "pointer_2",
                    "3": "ptr2",
                    "5": "param_5"
                },
                "stab_modify_type": {
                    "1": "modify_stab",
                    "8": "modify_stab_type"
                },
                "uint": {
                    "1": "uint_type"
                },
                "ulong": {
                    "1": "ulong_pointer"
                },
                "ulong *": {
                    "1": "ulong_ptr_type"
                },
                "undefined4": {
                    "1": "undefined4_type",
                    "2": "value"
                },
                "undefined4 param_3": {
                    "1": "param_3"
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0d3(long_type input)\n\n{\n  modify_stab_type_0010a0d3(input,0x42,*(value *)(*(long_type *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "long": "long_type",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type",
                "undefined4": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_0010a0e9": {
                    "1": "process_arguments",
                    "2": "process_data",
                    "3": "generate_stab_entry"
                },
                "__s": {
                    "1": "cstring",
                    "2": "popped_string",
                    "3": "type_string",
                    "4": "type",
                    "5": "string",
                    "8": "input_string"
                },
                "__s_00": {
                    "1": "request",
                    "11": "formatted_string",
                    "2": "dynamic_string",
                    "3": "output_string",
                    "4": "new_string"
                },
                "param_1": {
                    "1": "request_structure",
                    "2": "data_ptr",
                    "3": "binary_address",
                    "5": "base_address"
                },
                "param_2": {
                    "1": "param_value_1",
                    "15": "value1",
                    "3": "param2",
                    "4": "value_1"
                },
                "param_3": {
                    "1": "param_value2",
                    "15": "value2",
                    "3": "param3",
                    "4": "value_2"
                },
                "sVar3": {
                    "1": "type_name_length",
                    "17": "string_length",
                    "2": "type_string_len",
                    "4": "length"
                },
                "uVar1": {
                    "1": "byte_value",
                    "2": "first_byte",
                    "3": "type",
                    "6": "type_value"
                },
                "uVar2": {
                    "1": "push_result",
                    "12": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 generate_stab_entry_0010a0e9(long base_address,undefined8 value1,undefined8 value2)\n\n{\n  undefined type_value;\n  undefined4 result;\n  char *input_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  type_value = *(undefined *)(*(long *)(base_address + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(base_address + 0x60) + 0x18);\n  input_string = (char *)stab_pop_type();\n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",input_string,value1,value2);\n  free(input_string);\n  result = stab_push_string(base_address,formatted_string,0,type_value,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "generate_stab_entry_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "generate_stab_entry_0010a0e9",
                "__s": "input_string",
                "__s_00": "formatted_string",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "uVar1": "type_value",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_0010a181": {
                    "1": "reverse_and_concatenate",
                    "2": "reverse_and_concat_strings",
                    "3": "build_string",
                    "5": "generate_string"
                },
                "__s": {
                    "1": "pop_type_result",
                    "14": "string1",
                    "2": "first_string",
                    "3": "input_string",
                    "6": "str1"
                },
                "__s_00": {
                    "1": "popped_type",
                    "14": "string2",
                    "2": "second_string",
                    "3": "additional_string",
                    "6": "str2"
                },
                "__s_01": {
                    "1": "generated_string",
                    "2": "formatted_string",
                    "5": "result_str",
                    "7": "new_string",
                    "9": "result_string"
                },
                "cVar1": {
                    "1": "flag_value",
                    "2": "char_val",
                    "3": "char1",
                    "4": "char_value",
                    "7": "flag_char"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "free": {
                    "1": "free_memory_function",
                    "2": "release_memory"
                },
                "iVar2": {
                    "1": "some_value1",
                    "3": "int_value",
                    "6": "length"
                },
                "iVar3": {
                    "1": "resulting_value",
                    "17": "result",
                    "2": "int2",
                    "3": "int_var2"
                },
                "lVar7": {
                    "1": "index",
                    "20": "counter",
                    "7": "count"
                },
                "local_41": {
                    "1": "combined_flag",
                    "15": "local_flag",
                    "2": "flag_value"
                },
                "param_1": {
                    "1": "input1",
                    "2": "base_address",
                    "3": "input_param",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "range_start",
                    "13": "start_index",
                    "3": "start_range",
                    "5": "start_value",
                    "7": "start"
                },
                "param_3": {
                    "1": "range_end",
                    "13": "end_index",
                    "3": "end_range",
                    "5": "end_value",
                    "7": "end"
                },
                "param_4": {
                    "1": "format_option",
                    "2": "byte_value",
                    "25": "flag"
                },
                "sVar5": {
                    "1": "size1",
                    "2": "len_string1",
                    "3": "length_1",
                    "5": "len1",
                    "7": "length1"
                },
                "sVar6": {
                    "1": "pop_type_param_1_length",
                    "2": "additional_length",
                    "3": "length_2",
                    "5": "len2",
                    "7": "length2"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_type_function",
                    "2": "pop_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar4": {
                    "1": "status_code",
                    "2": "return_val",
                    "23": "return_value",
                    "3": "result"
                },
                "xmalloc": {
                    "1": "dynamic_memory_allocation_function",
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 generate_string_0010a181(long arg1,long start_index,long end_index,byte flag)\n\n{\n  char flag_char;\n  int length;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  flag_char = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  string1 = (char *)pop_type();\n  local_flag = 1;\n  if (flag_char == '\\0') {\n    local_flag = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n  }\n  length = *(int *)(*(long *)(arg1 + 0x60) + 0x18);\n  string2 = (char *)pop_type(arg1);\n  length1 = string_length_function(string1);\n  length2 = string_length_function(string2);\n  result_string = (char *)allocate_memory(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(arg1 + 0x68);\n    *(long *)(arg1 + 0x68) = counter + 1;\n    formatted_string_function(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = string_length_function(result_string);\n  formatted_string_function(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start_index,end_index,string2);\n  release_memory(string1);\n  release_memory(string2);\n  result = 0;\n  if (start_index <= end_index) {\n    result = length * (((int)end_index - (int)start_index) + 1);\n  }\n  return_value = push_string_function(arg1,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    release_memory(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_string_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "generate_string_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "flag_char",
                "free": "release_memory",
                "iVar2": "length",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "arg1",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "sVar5": "length1",
                "sVar6": "length2",
                "sprintf": "formatted_string_function",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string_function",
                "strlen": "string_length_function",
                "uVar4": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_0010a2b9": {
                    "1": "create_string",
                    "2": "extract_and_format_string",
                    "3": "process_string",
                    "8": "process_data"
                },
                "__s": {
                    "1": "str",
                    "2": "string",
                    "4": "string_1",
                    "8": "string1"
                },
                "__s_00": {
                    "1": "str2",
                    "2": "new_str",
                    "4": "formatted_string",
                    "6": "new_string"
                },
                "auVar4": {
                    "1": "result_array",
                    "24": "result",
                    "3": "return_value"
                },
                "cVar1": {
                    "1": "char_val",
                    "16": "char_value",
                    "3": "char1"
                },
                "lVar3": {
                    "1": "entry_number",
                    "14": "counter",
                    "9": "count"
                },
                "param_1": {
                    "1": "binary",
                    "2": "data",
                    "3": "input_param",
                    "5": "input"
                },
                "param_2": {
                    "1": "is_new_entry",
                    "21": "flag"
                },
                "param_3": {
                    "1": "parameter1",
                    "2": "arg3",
                    "5": "param3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "param_b",
                    "2": "arg4",
                    "5": "param_4"
                },
                "sVar2": {
                    "1": "input_length",
                    "14": "string_length",
                    "2": "str_length"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_data_0010a2b9(long input,char flag,undefined8 param_3,undefined8 param4)\n\n{\n  char char_value;\n  char *string1;\n  size_t string_length;\n  char *new_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  string_length = strlen(string1);\n  new_string = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *new_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(input + 0x68);\n    *(long *)(input + 0x68) = counter + 1;\n    sprintf(new_string,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(new_string);\n  sprintf(new_string + string_length,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = stab_push_string(input,new_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_string);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "__s": "string1",
                "__s_00": "new_string",
                "auVar4": "result",
                "cVar1": "char_value",
                "lVar3": "counter",
                "param_1": "input",
                "param_2": "flag",
                "param_4": "param4",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "pop_type"
                },
                "FUN_00109b52": {
                    "1": "get_char_value"
                },
                "FUN_0010a377": {
                    "1": "combine_strings",
                    "2": "reverse_string_concatenation",
                    "3": "concatenate_strings",
                    "8": "reverse_and_push_string"
                },
                "__s": {
                    "1": "top_string",
                    "17": "string1",
                    "3": "str1",
                    "6": "string_1"
                },
                "__s_00": {
                    "1": "pop_type_result_2",
                    "17": "string2",
                    "2": "second_string",
                    "3": "str2",
                    "6": "string_2"
                },
                "__s_01": {
                    "1": "combined_str",
                    "13": "concatenated_string",
                    "4": "result_string",
                    "5": "new_string"
                },
                "cVar1": {
                    "1": "flag_char",
                    "10": "flag",
                    "2": "char1",
                    "4": "char_value"
                },
                "param_1": {
                    "1": "input_string",
                    "11": "input",
                    "2": "input_parameter",
                    "3": "input_address",
                    "4": "input_ptr"
                },
                "param_2": {
                    "1": "arg1"
                },
                "param_3": {
                    "1": "arg2"
                },
                "param_4": {
                    "1": "arg3"
                },
                "sVar3": {
                    "1": "str1_length",
                    "11": "length1",
                    "3": "len1",
                    "4": "length_string1",
                    "6": "length_1"
                },
                "sVar4": {
                    "1": "str2_length",
                    "11": "length2",
                    "2": "second_string_length",
                    "3": "len2",
                    "4": "length_string2",
                    "6": "length_2"
                },
                "uVar2": {
                    "1": "push_string_result",
                    "12": "return_value",
                    "16": "result"
                },
                "uVar5": {
                    "1": "is_null_byte_required",
                    "2": "use_default",
                    "3": "flag",
                    "5": "use_flag"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 reverse_and_push_string_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenated_string;\n  undefined use_flag;\n  \n  use_flag = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    use_flag = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)stab_pop_type(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  concatenated_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(concatenated_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = stab_push_string(input,concatenated_string,0,use_flag,0);\n  if ((char)result != '\\0') {\n    free(concatenated_string);\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_and_push_string_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "reverse_and_push_string_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "concatenated_string",
                "cVar1": "flag",
                "param_1": "input",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar2": "result",
                "uVar5": "use_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "0x60": {
                    "1": "offset"
                },
                "FUN_0010a424": {
                    "1": "extracted_function",
                    "2": "generate_string",
                    "5": "generate_formatted_string"
                },
                "__ptr": {
                    "1": "item_list",
                    "2": "allocated_memory",
                    "3": "array",
                    "4": "ptr_array",
                    "9": "dynamic_array"
                },
                "__s": {
                    "1": "return_type",
                    "10": "string2",
                    "3": "str2"
                },
                "__s_00": {
                    "1": "new_str",
                    "10": "result_string",
                    "2": "final_string",
                    "4": "new_string",
                    "5": "formatted_string"
                },
                "bVar10": {
                    "1": "type_present",
                    "2": "flag2",
                    "5": "byte_var2",
                    "6": "temp_flag"
                },
                "bVar2": {
                    "1": "should_pop",
                    "2": "result2",
                    "4": "byte_value",
                    "6": "temp_byte",
                    "8": "byte_var"
                },
                "cVar1": {
                    "1": "temp_char",
                    "2": "result1",
                    "3": "is_empty_type",
                    "6": "empty_type",
                    "9": "result"
                },
                "char": {
                    "1": "byte"
                },
                "char param_2": {
                    "1": "param_2"
                },
                "char param_4": {
                    "1": "param_4"
                },
                "free": {
                    "1": "release_memory"
                },
                "iVar3": {
                    "1": "loop_var",
                    "3": "temp_count",
                    "4": "temp_var",
                    "6": "temp_int"
                },
                "int param_3": {
                    "1": "param_3"
                },
                "lVar11": {
                    "1": "string_index",
                    "11": "loop_index",
                    "2": "loop_counter",
                    "4": "index2"
                },
                "lVar9": {
                    "1": "counter",
                    "14": "index",
                    "2": "loop_var"
                },
                "long": {
                    "1": "int64"
                },
                "long param_1": {
                    "1": "param_1"
                },
                "param_1": {
                    "1": "input1",
                    "2": "arg1",
                    "3": "input_data",
                    "5": "input_param",
                    "8": "input"
                },
                "param_2": {
                    "1": "arg_2",
                    "11": "flag",
                    "2": "arg2",
                    "9": "flag1"
                },
                "param_3": {
                    "1": "size_param",
                    "17": "count",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "has_var_args",
                    "12": "flag2",
                    "2": "arg4"
                },
                "pcVar5": {
                    "1": "pop_value",
                    "10": "string1",
                    "2": "type_name",
                    "3": "string_var1"
                },
                "sVar7": {
                    "1": "type_name_length",
                    "19": "length1",
                    "2": "len1"
                },
                "sVar8": {
                    "1": "cur_str_len",
                    "19": "length2",
                    "2": "length_var2"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_empty_type_lto_priv_0": {
                    "1": "check_empty_type"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "strlen": {
                    "1": "get_length"
                },
                "uVar12": {
                    "1": "unknown",
                    "2": "some_flag",
                    "3": "flag3",
                    "4": "undefined_var"
                },
                "uVar4": {
                    "1": "push_result",
                    "13": "result",
                    "16": "return_value"
                },
                "uVar6": {
                    "1": "popped_param",
                    "2": "pop_type_result",
                    "3": "temp_var",
                    "6": "temp_value",
                    "8": "value"
                },
                "undefined4": {
                    "1": "uint32"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00109d97",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nuint32 generate_formatted_string_0010a424(int64 input,byte flag,int count,byte flag2)\n\n{\n  byte result;\n  byte byte_var;\n  int temp_int;\n  uint32 return_value;\n  byte *string1;\n  undefined8 *dynamic_array;\n  undefined8 value;\n  byte *string2;\n  size_t length1;\n  size_t length2;\n  byte *result_string;\n  int64 index;\n  byte temp_flag;\n  int64 loop_index;\n  undefined undefined_var;\n  \n  if ((flag == '\\0') && (result = check_empty_type(), result == '\\0')) {\n    return 0;\n  }\n  temp_flag = *(byte *)(*(int64 *)(input + 0x60) + 0x1c);\n  string1 = (byte *)pop_type(input);\n  if (count < 0) {\n    dynamic_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    undefined_var = 1;\n    if (temp_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      temp_int = count + 1;\n      dynamic_array = (undefined8 *)allocate_memory((int64)temp_int * 8);\n      index = (int64)(count + -1);\n      do {\n        byte_var = 1;\n        if (temp_flag == 0) {\n          byte_var = *(byte *)(*(int64 *)(input + 0x60) + 0x1c);\n        }\n        value = pop_type(input);\n        temp_flag = byte_var & 1;\n        dynamic_array[index] = value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = check_empty_type(input);\n        if (result == '\\0') {\n          return 0;\n        }\n        byte_var = 1;\n        if (temp_flag == 0) {\n          byte_var = *(byte *)(*(int64 *)(input + 0x60) + 0x1c);\n        }\n        temp_flag = byte_var & 1;\n        value = pop_type(input);\n        dynamic_array[(int64)temp_int + -1] = value;\n        count = temp_int;\n      }\n      goto LAB_0010a582;\n    }\n    dynamic_array = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    dynamic_array = (undefined8 *)allocate_memory(8);\n    result = check_empty_type(input);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((temp_flag != 0) || (*(byte *)(*(int64 *)(input + 0x60) + 0x1c) != '\\0')) {\n      value = pop_type(input);\n      count = 1;\n      undefined_var = 1;\n      *dynamic_array = value;\n      goto LAB_0010a596;\n    }\n    value = pop_type(input);\n    count = 1;\n    *dynamic_array = value;\n  }\n  undefined_var = *(undefined *)(*(int64 *)(input + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (byte *)pop_type(input);\n  length1 = get_length(string1);\n  length2 = get_length(string2);\n  index = length1 + 10 + length2;\n  for (loop_index = 0; (int)loop_index < count; loop_index = loop_index + 1) {\n    length1 = get_length((byte *)dynamic_array[loop_index]);\n    index = index + length1;\n  }\n  result_string = (byte *)allocate_memory(index);\n  format_string(result_string,\"#%s,%s\",string1,string2);\n  index = 0;\n  release_memory(string1);\n  release_memory(string2);\n  while( true ) {\n    length1 = get_length(result_string);\n    if (count <= (int)index) break;\n    *(undefined2 *)(result_string + length1) = 0x2c;\n    string1 = (byte *)dynamic_array[index];\n    index = index + 1;\n    copy_string(result_string + length1 + 1,string1);\n    release_memory(string1);\n  }\n  *(undefined2 *)(result_string + length1) = 0x3b;\n  release_memory(dynamic_array);\n  return_value = push_string(input,result_string,0,undefined_var,0);\n  if ((byte)return_value == '\\0') {\n    return 0;\n  }\n  release_memory(result_string);\n  return return_value;\n}\n\n",
            "current_name": "generate_formatted_string_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "__ptr": "dynamic_array",
                "__s": "string2",
                "__s_00": "result_string",
                "bVar10": "temp_flag",
                "bVar2": "byte_var",
                "cVar1": "result",
                "char": "byte",
                "free": "release_memory",
                "iVar3": "temp_int",
                "lVar11": "loop_index",
                "lVar9": "index",
                "long": "int64",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "flag2",
                "pcVar5": "string1",
                "sVar7": "length1",
                "sVar8": "length2",
                "sprintf": "format_string",
                "stab_empty_type_lto_priv_0": "check_empty_type",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "strcpy": "copy_string",
                "strlen": "get_length",
                "uVar12": "undefined_var",
                "uVar4": "return_value",
                "uVar6": "value",
                "undefined4": "uint32",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_0010a69a": {
                    "1": "push_struct_to_string",
                    "5": "reverse_and_push_string",
                    "7": "process_data"
                },
                "lVar2": {
                    "1": "struct_index_result",
                    "15": "index"
                },
                "local_60": {
                    "1": "entry_string",
                    "12": "output_string",
                    "3": "temp_string",
                    "5": "string_buffer",
                    "6": "formatted_string"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "arg1",
                    "4": "struct_ptr",
                    "5": "data_buffer"
                },
                "param_2": {
                    "1": "ptr_to_something",
                    "2": "data_length",
                    "3": "param2"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "index",
                    "3": "struct_flag",
                    "5": "struct_index"
                },
                "param_4": {
                    "1": "char_val",
                    "13": "flag",
                    "2": "character",
                    "3": "char_value",
                    "7": "char_flag"
                },
                "param_5": {
                    "1": "input_u_int",
                    "16": "value",
                    "5": "uint_value"
                },
                "sVar3": {
                    "1": "previous_length",
                    "10": "string_length",
                    "12": "length",
                    "2": "string_len",
                    "4": "str_length"
                },
                "uVar1": {
                    "1": "status",
                    "27": "result",
                    "3": "return_value"
                },
                "uVar4": {
                    "1": "malloc_result",
                    "19": "allocated_memory",
                    "2": "new_memory",
                    "3": "allocated_mem",
                    "5": "allocated_ptr"
                },
                "uVar5": {
                    "1": "is_successful",
                    "2": "is_index_valid",
                    "4": "has_index",
                    "5": "is_struct_index_valid"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109c2e",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a69a(long data_buffer,undefined8 param2,int flag,char flag,uint value)\n\n{\n  undefined4 result;\n  long index;\n  size_t length;\n  undefined8 allocated_memory;\n  undefined is_struct_index_valid;\n  char output_string [48];\n  \n  if (flag == 0) {\n    output_string[0] = '\\0';\n    is_struct_index_valid = 0;\n    index = 0;\n  }\n  else {\n    index = stab_get_struct_index();\n    if (index < 0) {\n      return 0;\n    }\n    is_struct_index_valid = 1;\n    sprintf(output_string,\"%ld=\",index);\n  }\n  length = strlen(output_string);\n  sprintf(output_string + length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = stab_push_string(data_buffer,output_string,index,is_struct_index_valid,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  index = *(long *)(data_buffer + 0x60);\n  allocated_memory = xmalloc(1);\n  *(undefined8 *)(index + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data_buffer + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "process_data_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "lVar2": "index",
                "local_60": "output_string",
                "param_1": "data_buffer",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "flag",
                "param_5": "value",
                "sVar3": "length",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "is_struct_index_valid"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_0010a77a": {
                    "1": "extract_strings_from_data",
                    "2": "merge_strings",
                    "4": "combine_strings",
                    "5": "process_string",
                    "7": "concatenate_strings"
                },
                "__s": {
                    "1": "string_pointer",
                    "13": "string1",
                    "3": "string_ptr",
                    "6": "string_1"
                },
                "__s_00": {
                    "1": "pop_type_str",
                    "11": "string2",
                    "2": "pop_type_string",
                    "5": "string_2",
                    "6": "popped_string"
                },
                "__s_01": {
                    "1": "new_stab_string",
                    "12": "concatenated_string",
                    "2": "new_str",
                    "3": "merged_string",
                    "6": "new_string",
                    "7": "combined_string"
                },
                "lVar2": {
                    "1": "data",
                    "3": "ptr1",
                    "5": "struct_ptr"
                },
                "param_1": {
                    "1": "data_address",
                    "11": "input",
                    "2": "data",
                    "3": "input_address"
                },
                "sVar5": {
                    "1": "previous_length",
                    "2": "length_1",
                    "3": "popped_string_length",
                    "5": "len1",
                    "8": "length1"
                },
                "sVar6": {
                    "1": "length_string1",
                    "2": "length_2",
                    "3": "string_length",
                    "5": "len2",
                    "8": "length2"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "uVar1": {
                    "1": "byte_value",
                    "3": "char_flag",
                    "7": "flag"
                },
                "uVar3": {
                    "1": "variable_3",
                    "3": "long_value",
                    "9": "value"
                },
                "uVar4": {
                    "1": "return_code",
                    "11": "return_value",
                    "14": "result",
                    "4": "status"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 concatenate_strings_0010a77a(long input)\n\n{\n  undefined flag;\n  long struct_ptr;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenated_string;\n  \n  struct_ptr = *(long *)(input + 0x60);\n  if ((struct_ptr != 0) && (string1 = *(char **)(struct_ptr + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(struct_ptr + 0x18);\n    flag = *(undefined *)(struct_ptr + 0x1c);\n    value = *(undefined8 *)(struct_ptr + 0x10);\n    string2 = (char *)pop_type();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    concatenated_string = (char *)allocate_memory(length1 + 2 + length2);\n    sprintf(concatenated_string,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = push_string(input,concatenated_string,value,flag,result);\n    if ((char)result != '\\0') {\n      free(concatenated_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "concatenate_strings_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "concatenate_strings_0010a77a",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "concatenated_string",
                "lVar2": "struct_ptr",
                "param_1": "input",
                "sVar5": "length1",
                "sVar6": "length2",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "uVar1": "flag",
                "uVar3": "value",
                "uVar4": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "FUN_0010a83e": {
                    "1": "generate_struct_type_string",
                    "11": "process_data",
                    "3": "generate_struct_type"
                },
                "__s": {
                    "1": "str",
                    "3": "str1",
                    "5": "string",
                    "9": "string1"
                },
                "__s_00": {
                    "1": "formatted_string_ptr",
                    "3": "str2",
                    "4": "new_string",
                    "9": "string2"
                },
                "cVar3": {
                    "1": "char_val",
                    "15": "char_value",
                    "2": "char_flag",
                    "3": "flag",
                    "5": "char_var"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "param_1": {
                    "1": "input_1",
                    "3": "data_ptr",
                    "4": "input_param",
                    "6": "base_address",
                    "7": "arg1"
                },
                "param_2": {
                    "1": "metadata",
                    "2": "data_ptr",
                    "3": "param_2",
                    "9": "arg2"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "size_param",
                    "3": "length",
                    "4": "param_3",
                    "8": "arg3"
                },
                "param_4": {
                    "1": "param_b",
                    "2": "undefined_param",
                    "3": "param4",
                    "5": "param_4",
                    "9": "arg4"
                },
                "param_5": {
                    "1": "param_c",
                    "3": "value",
                    "5": "param_5",
                    "9": "arg5"
                },
                "param_6": {
                    "1": "flag1_param",
                    "2": "condition_1",
                    "3": "condition1",
                    "4": "flag_1",
                    "5": "arg6",
                    "9": "flag1"
                },
                "param_7": {
                    "1": "flag_param2",
                    "2": "condition_2",
                    "3": "condition2",
                    "4": "flag_2",
                    "5": "arg7",
                    "9": "flag2"
                },
                "sVar2": {
                    "1": "len",
                    "2": "str_len",
                    "23": "string_length",
                    "3": "str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_pop_type": {
                    "2": "pop_type"
                },
                "stab_start_struct_type_lto_priv_0": {
                    "2": "initialize_struct"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "ret_val",
                    "25": "result",
                    "3": "return_value"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_0010a69a",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_data_0010a83e(long arg1,undefined8 arg2,ulong arg3,undefined arg4,ulong arg5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n    string1 = (char *)pop_type();\n    arg5 = arg5 & 0xffffffff;\n    arg3 = arg3 & 0xffffffff;\n  }\n  result = initialize_struct(arg1,arg2,arg3,arg4,arg5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = get_string_length(string1);\n      string2 = (char *)allocate_memory(string_length + 3);\n      format_string(string2,\"~%%%s\",string1);\n      deallocate_memory(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(arg1 + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(arg1 + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)allocate_memory(0x14);\n      format_string(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(arg1 + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_value",
                "free": "deallocate_memory",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "flag1",
                "param_7": "flag2",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_start_struct_type_lto_priv_0": "initialize_struct",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "(lVar2 + 0x1c)": {
                    "1": "flag_value"
                },
                "(lVar2 + 0x20)": {
                    "1": "url_ptr"
                },
                "*(char *)(*(long *)(param_1 + 0x60) + 0x1c)": {
                    "1": "type_flag"
                },
                "*(char *)(lVar2 + 0x1c)": {
                    "1": "new_type_flag"
                },
                "*(char **)(*(long *)(param_1 + 0x60) + 0x20)": {
                    "1": "old_formatted_string"
                },
                "*(char **)(lVar2 + 0x20)": {
                    "1": "new_formatted_string"
                },
                "*(long *)(param_1 + 0x60)": {
                    "1": "base_address"
                },
                "*(undefined *)(lVar2 + 0x1c)": {
                    "1": "new_type_flag"
                },
                "*(undefined8 *)(*(long *)(param_1 + 0x60) + 0x20)": {
                    "1": "base_formatted_string"
                },
                "*paramPtr": {
                    "1": "url_ptr"
                },
                "FUN_00109b2f": {
                    "1": "get_pointer"
                },
                "FUN_0010a94e": {
                    "1": "combine_strings",
                    "2": "process_data",
                    "4": "construct_formatted_string",
                    "9": "generate_formatted_string"
                },
                "__s": {
                    "1": "popped_type",
                    "2": "string_ptr",
                    "3": "type_str",
                    "4": "type",
                    "5": "type_string",
                    "6": "string3"
                },
                "abort": {
                    "1": "abort_program"
                },
                "cVar1": {
                    "1": "character_var",
                    "2": "char_flag",
                    "3": "type_flag",
                    "4": "flag_value",
                    "8": "flag_char"
                },
                "lVar2": {
                    "1": "length_var",
                    "2": "data_ptr",
                    "3": "ptr"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param_ptr",
                    "3": "base_address",
                    "4": "arg1"
                },
                "param_2": {
                    "1": "input_string1",
                    "13": "string1",
                    "2": "data1",
                    "3": "input1"
                },
                "param_3": {
                    "1": "param_b",
                    "13": "string2",
                    "2": "password",
                    "3": "str2"
                },
                "param_4": {
                    "1": "input_value",
                    "2": "arg4",
                    "21": "flag",
                    "4": "option"
                },
                "pcVar7": {
                    "1": "formatted_str",
                    "2": "result_string",
                    "6": "new_string",
                    "9": "formatted_string"
                },
                "pcVar9": {
                    "1": "temp_str",
                    "11": "flag_string",
                    "2": "status_string",
                    "5": "flag_str"
                },
                "sVar3": {
                    "1": "size1",
                    "15": "length1",
                    "2": "length_pc_var7",
                    "4": "len1"
                },
                "sVar4": {
                    "1": "length_string1",
                    "15": "length2",
                    "4": "len2"
                },
                "sVar5": {
                    "1": "string_ptr_len",
                    "13": "length3",
                    "2": "type_length",
                    "4": "len3"
                },
                "sVar6": {
                    "1": "length_input_string2",
                    "13": "length4",
                    "2": "length3",
                    "4": "len4"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "strlen": {
                    "1": "string_length"
                },
                "uVar8": {
                    "1": "output",
                    "11": "return_value",
                    "18": "result"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 generate_formatted_string_0010a94e(long arg1,char *string1,char *string2,int flag)\n\n{\n  char flag_char;\n  long ptr;\n  char *string3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formatted_string;\n  undefined8 result;\n  char *flag_string;\n  \n  flag_char = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  string3 = (char *)pop_type();\n  formatted_string = *(char **)(*(long *)(arg1 + 0x60) + 0x20);\n  if (formatted_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = string_length(formatted_string);\n    length2 = string_length(string1);\n    length3 = string_length(string3);\n    length4 = string_length(string2);\n    formatted_string = (char *)allocate_memory(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort_program();\n      }\n    }\n    format_string(formatted_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x20),string1,flag_string,\n            string3,string2,*(long *)(arg1 + 0x60));\n    free(*(void **)(*(long *)(arg1 + 0x60) + 0x20));\n    ptr = *(long *)(arg1 + 0x60);\n    *(char **)(ptr + 0x20) = formatted_string;\n    if (flag_char != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "generate_formatted_string_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "__s": "string3",
                "abort": "abort_program",
                "cVar1": "flag_char",
                "lVar2": "ptr",
                "param_1": "arg1",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "pcVar7": "formatted_string",
                "pcVar9": "flag_string",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "strlen": "string_length",
                "uVar8": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "get_struct_ptr"
                },
                "FUN_0010aa53": {
                    "1": "create_log_entry",
                    "16": "process_data",
                    "3": "format_and_store_data",
                    "4": "parse_and_store_data"
                },
                "__s": {
                    "1": "popped_type",
                    "10": "string",
                    "6": "str"
                },
                "cVar1": {
                    "1": "previous_flag",
                    "13": "flag_value",
                    "2": "temp_char",
                    "3": "type"
                },
                "cVar3": {
                    "1": "new_char",
                    "2": "type_char",
                    "3": "flag_value",
                    "6": "flag_char"
                },
                "lVar2": {
                    "1": "data_struct_ptr_2",
                    "2": "struct_pointer",
                    "3": "data_ptr",
                    "7": "struct_ptr"
                },
                "lVar7": {
                    "1": "ptr2",
                    "2": "reallocated_ptr",
                    "3": "realloc_address",
                    "4": "realloc_result",
                    "9": "realloc_ptr"
                },
                "param_1": {
                    "1": "input_param",
                    "2": "input_data",
                    "3": "data_ptr",
                    "4": "data_struct",
                    "6": "data"
                },
                "param_2": {
                    "1": "param_val",
                    "2": "data_value",
                    "22": "value",
                    "4": "data"
                },
                "param_3": {
                    "1": "char_val",
                    "19": "flag",
                    "2": "flag_char",
                    "3": "character"
                },
                "param_4": {
                    "1": "flag_value",
                    "3": "condition",
                    "4": "type",
                    "8": "mode"
                },
                "pcVar6": {
                    "1": "allocated_memory",
                    "2": "dynamic_string",
                    "5": "formatted_string",
                    "7": "new_str",
                    "9": "new_string"
                },
                "sVar5": {
                    "1": "input_length",
                    "17": "string_length",
                    "3": "str_len",
                    "5": "str_length"
                },
                "uVar10": {
                    "1": "loop_index",
                    "2": "loop_limit",
                    "3": "last_index",
                    "8": "count"
                },
                "uVar4": {
                    "1": "loop_temp",
                    "2": "counter",
                    "3": "index",
                    "5": "loop_counter"
                },
                "uVar8": {
                    "1": "return_val",
                    "20": "result",
                    "9": "return_value"
                },
                "uVar9": {
                    "1": "loop_index",
                    "11": "index",
                    "5": "counter",
                    "6": "loop_counter"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_data_0010aa53(long data,undefined8 value,char flag,int flag)\n\n{\n  char flag_value;\n  long struct_ptr;\n  char flag_char;\n  uint loop_counter;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  long realloc_ptr;\n  undefined8 result;\n  ulong index;\n  ulong count;\n  \n  flag_value = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string = (char *)stab_pop_type();\n  string_length = strlen(string);\n  new_string = (char *)xmalloc(string_length + 0x19);\n  *new_string = flag + '0';\n  if (flag == 1) {\n    flag_char = '1';\n  }\n  else {\n    flag_char = '0';\n    if ((flag != 2) && (flag_char = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  new_string[1] = flag_char;\n  sprintf(new_string + 2,\"%ld,%s;\",value);\n  free(string);\n  struct_ptr = *(long *)(data + 0x60);\n  result = 0;\n  if ((struct_ptr != 0) && (*(long *)(struct_ptr + 0x20) != 0)) {\n    struct_ptr = *(long *)(struct_ptr + 0x28);\n    count = 0;\n    if (struct_ptr != 0) {\n      loop_counter = 0;\n      do {\n        index = (ulong)loop_counter;\n        count = (ulong)loop_counter;\n        loop_counter = loop_counter + 1;\n      } while (*(long *)(struct_ptr + index * 8) != 0);\n    }\n    realloc_ptr = xrealloc(struct_ptr,(ulong)((int)count + 2) << 3);\n    *(char **)(realloc_ptr + count * 8) = new_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)count + 1) * 8) = 0;\n    struct_ptr = *(long *)(data + 0x60);\n    *(long *)(struct_ptr + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(struct_ptr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "__s": "string",
                "cVar1": "flag_value",
                "cVar3": "flag_char",
                "lVar2": "struct_ptr",
                "lVar7": "realloc_ptr",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "flag",
                "pcVar6": "new_string",
                "sVar5": "string_length",
                "uVar10": "count",
                "uVar4": "loop_counter",
                "uVar8": "result",
                "uVar9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab1d": {
                    "1": "process_string"
                },
                "FUN_0010ab4d": {
                    "1": "append_to_data_structure",
                    "2": "append_string_with_delimiter",
                    "3": "append_string_to_buffer",
                    "4": "append_to_log"
                },
                "auVar3": {
                    "1": "output1",
                    "2": "result1",
                    "20": "result",
                    "4": "return_value"
                },
                "auVar7": {
                    "1": "output2",
                    "2": "result2",
                    "3": "return_val",
                    "5": "new_result",
                    "6": "return_value"
                },
                "lVar2": {
                    "1": "buffer_ptr2",
                    "2": "ptr2"
                },
                "param_1": {
                    "1": "resource",
                    "2": "data",
                    "3": "input_data"
                },
                "param_2": {
                    "1": "new_str",
                    "3": "new_string",
                    "4": "string_to_add",
                    "7": "input_string"
                },
                "param_3": {
                    "1": "offset",
                    "2": "unused_param",
                    "3": "param1",
                    "4": "param3",
                    "6": "param_3"
                },
                "param_4": {
                    "1": "data_to_append",
                    "2": "flag",
                    "3": "unused_param_2",
                    "4": "param4",
                    "6": "param_4"
                },
                "pcVar5": {
                    "1": "temp_buffer",
                    "10": "existing_string",
                    "2": "string_pointer"
                },
                "sVar4": {
                    "1": "new_string_len",
                    "2": "new_string_length",
                    "3": "text_length",
                    "4": "input_length",
                    "8": "string_length"
                },
                "sVar6": {
                    "1": "buffer_length",
                    "2": "string_length",
                    "7": "existing_string_length"
                },
                "uVar1": {
                    "1": "ptr_struct",
                    "2": "buffer"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] update_string_0010ab4d(long buffer_ptr,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong ptr1;\n  long ptr2;\n  undefined result [16];\n  size_t string_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  ptr1 = *(ulong *)(buffer_ptr + 0x60);\n  if ((ptr1 != 0) && (*(long *)(ptr1 + 0x20) != 0)) {\n    existing_string = *(char **)(ptr1 + 0x30);\n    string_length = strlen(input_string);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(string_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,string_length + 4 + existing_string_length);\n    }\n    string_length = strlen(existing_string);\n    sprintf(existing_string + string_length,\"%s::\",input_string);\n    ptr2 = *(long *)(buffer_ptr + 0x60);\n    *(char **)(ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param_4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = ptr1;\n  return result << 0x40;\n}\n\n",
            "current_name": "update_string_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "update_string_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "ptr2",
                "param_1": "buffer_ptr",
                "param_2": "input_string",
                "pcVar5": "existing_string",
                "sVar4": "string_length",
                "sVar6": "existing_string_length",
                "uVar1": "ptr1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "create_log_entry",
                    "8": "process_data"
                },
                "__s": {
                    "1": "str2_ptr",
                    "2": "str_ptr",
                    "3": "str3_ptr",
                    "6": "str3"
                },
                "bVar3": {
                    "1": "temp_byte",
                    "5": "byte1",
                    "7": "byte_var"
                },
                "cVar10": {
                    "1": "character_var1",
                    "20": "char1",
                    "3": "char_1",
                    "4": "char_var1"
                },
                "cVar11": {
                    "1": "character_var2",
                    "20": "char2",
                    "3": "char_2",
                    "5": "char_var2"
                },
                "lVar1": {
                    "1": "data",
                    "2": "local_var1",
                    "3": "data_ptr",
                    "4": "var1",
                    "6": "ptr1"
                },
                "local_52": {
                    "1": "byte_var",
                    "2": "local_var",
                    "3": "byte2",
                    "4": "local_flag",
                    "9": "local_byte"
                },
                "param_1": {
                    "1": "input_value",
                    "2": "input_data",
                    "3": "arg1",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "pcvar4",
                    "13": "string1",
                    "2": "message",
                    "3": "input_string",
                    "5": "string_param"
                },
                "param_3": {
                    "1": "param3",
                    "11": "length",
                    "2": "input_length",
                    "3": "size_param",
                    "5": "num1"
                },
                "param_4": {
                    "1": "arg_4",
                    "18": "flag1",
                    "2": "bool1",
                    "3": "flag_1",
                    "4": "flag1_param"
                },
                "param_5": {
                    "1": "use_colon_separator",
                    "18": "flag2",
                    "2": "bool2",
                    "3": "flag_2",
                    "4": "flag2_param"
                },
                "param_6": {
                    "1": "use_semicolon_separator",
                    "18": "flag3",
                    "2": "bool3",
                    "3": "flag_3",
                    "4": "flag3_param"
                },
                "param_7": {
                    "1": "timestamp",
                    "10": "value",
                    "2": "param7",
                    "3": "long_param",
                    "4": "num2"
                },
                "param_8": {
                    "1": "arg_8",
                    "18": "flag4",
                    "2": "bool4",
                    "3": "flag_4",
                    "4": "flag4_param"
                },
                "pcVar2": {
                    "1": "old_data",
                    "2": "str2",
                    "3": "str1_ptr",
                    "6": "ptr2"
                },
                "pcVar4": {
                    "1": "char_ptr2",
                    "2": "str3",
                    "3": "str2_ptr",
                    "6": "str2"
                },
                "sVar5": {
                    "1": "len_str1",
                    "11": "len1",
                    "2": "size1",
                    "3": "length_1",
                    "5": "length1"
                },
                "sVar6": {
                    "1": "extra_data_size",
                    "11": "len2",
                    "2": "size2",
                    "3": "length_2",
                    "5": "length2"
                },
                "sVar7": {
                    "1": "len_string1",
                    "11": "len3",
                    "2": "size3",
                    "3": "length_3",
                    "5": "length3"
                },
                "sVar8": {
                    "1": "additional_str_len",
                    "10": "len4",
                    "2": "size4",
                    "3": "length_4",
                    "5": "length4"
                },
                "uVar9": {
                    "1": "result_var",
                    "2": "return_value",
                    "26": "result"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long input_param,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *str1;\n  byte byte_var;\n  char *str2;\n  char *str3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  str3 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n  str2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byte_var = 1;\n    if (local_byte == 0) {\n      byte_var = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n    }\n    local_byte = byte_var & 1;\n    str3 = (char *)stab_pop_type(input_param);\n  }\n  ptr1 = *(long *)(input_param + 0x60);\n  if ((ptr1 == 0) || (str1 = *(char **)(ptr1 + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    len3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str3);\n    }\n    result = xrealloc(str1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    str1 = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n    len1 = strlen(str1);\n    sprintf(str1 + len1,\"%s:%s;%c%c%c\",str2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,len1);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n      len1 = strlen(str2);\n      sprintf(str2 + len1,\"%ld;%s;\",value,str3);\n      free(str3);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(input_param + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "str3",
                "bVar3": "byte_var",
                "cVar10": "char1",
                "cVar11": "char2",
                "lVar1": "ptr1",
                "local_52": "local_byte",
                "param_1": "input_param",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "str1",
                "pcVar4": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "FUN_0010abdd": {
                    "3": "process_data"
                },
                "FUN_0010add5": {
                    "1": "analyze_stab_class_method_var",
                    "12": "initialize_stab_class_method_var",
                    "2": "initialize_class_method_variables",
                    "3": "initialize_class_method_variable",
                    "7": "initialize_class_method_var"
                },
                "param_1": {
                    "1": "data",
                    "4": "class_id",
                    "7": "length"
                },
                "param_2": {
                    "1": "char_array_param",
                    "2": "data",
                    "4": "string"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "length",
                    "4": "flags"
                },
                "param_4": {
                    "1": "char_param4",
                    "2": "char1",
                    "5": "flag_1",
                    "6": "flag1"
                },
                "param_5": {
                    "1": "param_char2",
                    "2": "char2",
                    "5": "flag_2",
                    "6": "flag2"
                },
                "param_6": {
                    "1": "char_param4",
                    "2": "char3",
                    "5": "flag_3",
                    "6": "flag3"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_stab_class_method_var_0010add5(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "current_name": "initialize_stab_class_method_var_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "initialize_stab_class_method_var_0010add5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "FUN_0010abdd": {
                    "1": "process_data"
                },
                "FUN_0010adf2": {
                    "1": "initialize_class_and_method",
                    "2": "initialize_class_method_variable",
                    "22": "initialize_stab_class_method_var",
                    "3": "initialize_class_method_var"
                },
                "param_1": {
                    "1": "initial_value",
                    "2": "input_param",
                    "3": "long_param",
                    "8": "length"
                },
                "param_2": {
                    "1": "char_ptr_param",
                    "2": "data",
                    "4": "input_string",
                    "5": "string_param",
                    "8": "string"
                },
                "param_3": {
                    "1": "param3",
                    "2": "size_param",
                    "3": "flags",
                    "4": "size"
                },
                "param_4": {
                    "1": "char_value_1",
                    "2": "char_param_1",
                    "5": "flag_1",
                    "8": "flag1"
                },
                "param_5": {
                    "1": "flag_param2",
                    "2": "char_param_2",
                    "5": "flag_2",
                    "8": "flag2"
                },
                "param_6": {
                    "1": "flag_param3",
                    "2": "char_param_3",
                    "5": "flag_3",
                    "8": "flag3"
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_stab_class_method_var_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "current_name": "initialize_stab_class_method_var_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "initialize_stab_class_method_var_0010adf2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "FUN_0010ae0e": {
                    "1": "build_new_string",
                    "2": "process_data",
                    "3": "reconstruct_string"
                },
                "__ptr": {
                    "1": "dynamic_pointer",
                    "2": "void_pointer",
                    "3": "ptr3",
                    "6": "ptr",
                    "8": "temp_ptr"
                },
                "lVar1": {
                    "1": "struct_addr",
                    "10": "struct_ptr",
                    "2": "struct_address",
                    "4": "struct_pointer"
                },
                "lVar2": {
                    "1": "var2",
                    "2": "ptr_array",
                    "4": "ptr2",
                    "5": "ptr"
                },
                "lVar8": {
                    "1": "new_length",
                    "10": "total_len",
                    "2": "result_length"
                },
                "param_1": {
                    "1": "input_value",
                    "12": "input",
                    "2": "input_address",
                    "3": "input_data",
                    "6": "input_param"
                },
                "pcVar3": {
                    "1": "substring",
                    "2": "str",
                    "3": "temp_str",
                    "4": "temp_string"
                },
                "pcVar6": {
                    "1": "str2",
                    "2": "final_string",
                    "4": "result_string",
                    "5": "new_string"
                },
                "sVar4": {
                    "1": "size1",
                    "12": "len1",
                    "2": "len_str1",
                    "3": "length_1",
                    "8": "length1"
                },
                "sVar5": {
                    "1": "str_len2",
                    "12": "len2",
                    "2": "len_str2",
                    "3": "length_2",
                    "8": "length2"
                },
                "uVar10": {
                    "1": "loop_index",
                    "2": "num_elements",
                    "5": "count",
                    "7": "index"
                },
                "uVar11": {
                    "1": "temp_variable"
                },
                "uVar7": {
                    "1": "output",
                    "13": "result",
                    "16": "return_value"
                },
                "uVar9": {
                    "1": "temp_count",
                    "16": "counter",
                    "2": "loop_counter",
                    "4": "index",
                    "7": "count"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_001047c0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 reconstruct_string_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long ptr;\n  void *temp_ptr;\n  char *temp_string;\n  size_t len1;\n  size_t len2;\n  char *new_string;\n  undefined8 return_value;\n  long total_len;\n  uint counter;\n  ulong index;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (new_string = *(char **)(struct_ptr + 0x20), new_string != (char *)0x0)) {\n    len1 = strlen(*(char **)(struct_ptr + 8));\n    len2 = strlen(new_string);\n    ptr = *(long *)(struct_ptr + 0x28);\n    if (ptr == 0) {\n      total_len = len1 + len2 + 10;\n      index = 0;\n    }\n    else {\n      total_len = len1 + len2 + 0x1e;\n      index = 0;\n      while( true ) {\n        new_string = *(char **)(ptr + index * 8);\n        if (new_string == (char *)0x0) break;\n        len1 = strlen(new_string);\n        index = (ulong)((int)index + 1);\n        total_len = total_len + len1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_len = total_len + len1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_len = total_len + len1;\n    }\n    new_string = (char *)xmalloc(total_len);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(new_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(new_string);\n      sprintf(new_string + len1,\"!%u,\",index);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        index = (ulong)counter;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        temp_string = *(char **)((long)temp_ptr + index * 8);\n        if (temp_string == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(new_string,temp_string);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + index * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(new_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(new_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(new_string);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(new_string + len1) = 0x3b;\n    temp_string = *(char **)(struct_ptr + 0x38);\n    if (temp_string != (char *)0x0) {\n      strcpy(new_string + len1 + 1,temp_string);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = new_string;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "reconstruct_string_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "reconstruct_string_0010ae0e",
                "__ptr": "temp_ptr",
                "lVar1": "struct_ptr",
                "lVar2": "ptr",
                "lVar8": "total_len",
                "param_1": "input",
                "pcVar3": "temp_string",
                "pcVar6": "new_string",
                "sVar4": "len1",
                "sVar5": "len2",
                "uVar10": "index",
                "uVar7": "return_value",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "(*(int *)((long)item_ptr + 0x14) == 1)": {
                    "1": "check_condition"
                },
                "(undefined8 *)*puVar2": {
                    "1": "next_new_item"
                },
                "(undefined8 *)0x0": {
                    "1": "null"
                },
                "(undefined8 *)param_1[1]": {
                    "1": "next_item_ptr"
                },
                "*(char *)puVar5[1]": {
                    "1": "first_char"
                },
                "*(int *)(new_item_ptr + 2)": {
                    "1": "new_value_ptr"
                },
                "*(undefined8 *)param_1": {
                    "1": "item_ptr"
                },
                "*param_1": {
                    "1": "item"
                },
                "FUN_00109a0b": {
                    "1": "initialize_new_node"
                },
                "FUN_0010afd5": {
                    "1": "find_value_in_data_structure",
                    "2": "find_string",
                    "3": "find_string_in_binary",
                    "4": "find_and_free_string",
                    "8": "find_matching_string"
                },
                "FUN_00113e23": {
                    "1": "debug_make_indirect_type_isra_0"
                },
                "__s2": {
                    "1": "str",
                    "2": "new_string",
                    "3": "string_copy",
                    "4": "search_string_copy",
                    "6": "search_string"
                },
                "auVar8": {
                    "1": "return_val",
                    "13": "return_value",
                    "8": "result"
                },
                "bVar7": {
                    "1": "byte_var",
                    "3": "counter",
                    "4": "temp_byte",
                    "6": "flag",
                    "7": "loop_counter"
                },
                "debug_make_indirect_type_isra_0": {
                    "1": "create_debug_indirect_type",
                    "4": "create_indirect_type"
                },
                "free": {
                    "1": "deallocate_memory",
                    "2": "free_memory"
                },
                "free(__s2)": {
                    "1": "free(search_string_copy)"
                },
                "iVar1": {
                    "1": "compare_result",
                    "3": "result",
                    "8": "comparison_result"
                },
                "lVar4": {
                    "1": "found_value",
                    "2": "temp_value",
                    "4": "size",
                    "5": "temp_long",
                    "6": "value"
                },
                "malloc": {
                    "1": "allocate_memory"
                },
                "malloc(0x28)": {
                    "1": "allocate_memory(0x28)"
                },
                "memset": {
                    "1": "initialize_memory"
                },
                "param_1": {
                    "1": "ptr_array",
                    "2": "struct_list",
                    "3": "list_ptr",
                    "4": "list",
                    "6": "string_list"
                },
                "param_2": {
                    "1": "arg",
                    "2": "binary_address",
                    "3": "context"
                },
                "param_3": {
                    "1": "param3",
                    "10": "string",
                    "2": "string_ptr",
                    "3": "str",
                    "6": "search_string"
                },
                "param_4": {
                    "1": "input_length",
                    "10": "string_length",
                    "2": "str_length",
                    "3": "len",
                    "4": "search_string_length"
                },
                "param_5": {
                    "1": "int_param2",
                    "2": "param_5",
                    "3": "new_value",
                    "8": "type"
                },
                "param_6": {
                    "1": "result_ptr",
                    "2": "param6",
                    "3": "debug_info",
                    "4": "return_value",
                    "5": "result"
                },
                "puVar2": {
                    "1": "current_struct_ptr",
                    "10": "current_node",
                    "2": "current_element",
                    "3": "current_struct",
                    "4": "current_item"
                },
                "puVar2 = *(undefined8 **)(param_2 + 0x1a0)": {
                    "1": "new_item_ptr"
                },
                "puVar2[1]": {
                    "1": "current_struct[1]"
                },
                "puVar2[4]": {
                    "1": "current_struct[4]"
                },
                "puVar5": {
                    "1": "current_substring_item",
                    "2": "ptr2",
                    "5": "inner_node"
                },
                "puVar5[4]": {
                    "1": "value"
                },
                "puVar6": {
                    "1": "nested_element2",
                    "3": "temp_pointer",
                    "7": "temp_ptr"
                },
                "savestring": {
                    "1": "save_string"
                },
                "strcmp": {
                    "7": "compare_strings"
                },
                "strncmp": {
                    "1": "compare_n_strings"
                },
                "uVar3": {
                    "1": "debug_type",
                    "2": "type_pointer",
                    "5": "temp_value",
                    "6": "temp_var"
                },
                "xmalloc": {
                    "1": "allocate_aligned_memory",
                    "5": "allocate_memory"
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_001048f0",
                "FUN_00113e23",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16]\nfind_matching_string_0010afd5(undefined8 *string_list,long context,undefined8 string,undefined4 string_length,\n            undefined4 type,undefined8 result)\n\n{\n  int comparison_result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp;\n  long value;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte loop_counter;\n  undefined return_value [16];\n  \n  loop_counter = 0;\n  search_string = (char *)copy_string(string,string_length);\n  for (string_list = (undefined8 *)*string_list; string_list != (undefined8 *)0x0;\n      string_list = (undefined8 *)*string_list) {\n    for (current_node = (undefined8 *)string_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            comparison_result = compare_strings((char *)inner_node[1],search_string);\n            if (comparison_result == 0) {\n              value = value;\n              if (value == 0) goto LAB_0010b05b;\n              free(search_string_copy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xallocate_memory(0x28);\n      temp = *(undefined8 *)(context + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)loop_counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = type;\n      *current_node = temp;\n      current_struct[1] = search_string;\n      temp = create_indirect_type(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_struct[4] = temp;\nLAB_0010b0e7:\n      value = current_struct[4];\nLAB_0010b0eb:\n      return_value._8_8_ = result;\n      return_value._0_8_ = value;\n      return return_value;\n    }\n    if (*(char *)current_struct[1] == *search_string) {\n      comparison_result = compare_strings((char *)current_struct[1],search_string);\n      if (comparison_result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = type;\n        }\n        free(search_string_copy);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_matching_string_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "loop_counter",
                "debug_make_indirect_type_isra_0": "create_indirect_type",
                "free": "free_memory",
                "free(__s2)": "free(search_string_copy)",
                "iVar1": "comparison_result",
                "lVar4": "value",
                "malloc": "allocate_memory",
                "malloc(0x28)": "allocate_memory(0x28)",
                "param_1": "string_list",
                "param_2": "context",
                "param_3": "string",
                "param_4": "string_length",
                "param_5": "type",
                "param_6": "result",
                "puVar2": "current_node",
                "puVar2[1]": "current_struct[1]",
                "puVar2[4]": "current_struct[4]",
                "puVar5": "inner_node",
                "puVar5[4]": "value",
                "puVar6": "temp_ptr",
                "savestring": "copy_string",
                "strcmp": "compare_strings",
                "uVar3": "temp",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "FUN_0010b0fa": {
                    "1": "improve_debug_type"
                },
                "LAB_0010b1a5": {
                    "1": "label3"
                },
                "LAB_0010b2de_caseD_19": {
                    "1": "label2"
                },
                "LAB_0010b38c": {
                    "1": "label_5"
                },
                "LAB_0010b3d3": {
                    "1": "exit_label2"
                },
                "LAB_0010b406": {
                    "1": "exit_label3"
                },
                "LAB_0010b504": {
                    "1": "exit_label4"
                },
                "LAB_0010b528": {
                    "1": "label6"
                },
                "LAB_0010b6a9": {
                    "1": "label_8"
                },
                "LAB_0010b6c6": {
                    "1": "label8"
                },
                "__ptr": {
                    "1": "derived_type",
                    "2": "result_ptr",
                    "3": "pointer_result",
                    "4": "type_pointer",
                    "6": "type_ptr"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "caseD_18": {
                    "1": "case_value_18"
                },
                "caseD_19": {
                    "1": "case_value_19"
                },
                "create_debug_type_00113ce0": {
                    "4": "create_debug_type"
                },
                "dcgettext": {
                    "1": "get_text_message"
                },
                "demangle_v3_arglist_0010b6ea": {
                    "1": "demangle_arglist",
                    "3": "demangle_v3_arglist"
                },
                "extract_data_from_binary_001129f4": {
                    "4": "extract_data_from_binary"
                },
                "extract_real_type_00113b1e": {
                    "4": "extract_real_type"
                },
                "find_matching_string_0010afd5": {
                    "4": "find_matching_string"
                },
                "fprintf": {
                    "1": "write_to_file"
                },
                "get_pointer_value_00113d3a": {
                    "4": "get_pointer_value"
                },
                "iVar2": {
                    "1": "strcmp_result",
                    "27": "comparison_result"
                },
                "initialize_data_00112904": {
                    "4": "initialize_data"
                },
                "initialize_debug_type_00113b4a": {
                    "4": "initialize_debug_type"
                },
                "initialize_debug_type_00113cb9": {
                    "4": "initialize_debug_type"
                },
                "initialize_debug_type_00113df2": {
                    "4": "initialize_debug_type"
                },
                "initialize_debug_type_00113e17": {
                    "4": "initialize_debug_type"
                },
                "initialize_type_00113b71": {
                    "4": "initialize_type"
                },
                "input_array": {
                    "1": "arglist"
                },
                "lVar7": {
                    "1": "tag_length",
                    "2": "length",
                    "3": "result_value",
                    "4": "arglist_length"
                },
                "local_40": {
                    "1": "temp_array",
                    "2": "temp_buffer",
                    "5": "result_param",
                    "7": "local_buffer",
                    "9": "local_array"
                },
                "new_value": {
                    "1": "updated_value"
                },
                "param_1": {
                    "1": "input_value_1",
                    "14": "input_param1",
                    "5": "arg1",
                    "7": "input_param_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "14": "input_param2",
                    "5": "arg2",
                    "7": "input_param_2"
                },
                "param_3": {
                    "1": "type_components",
                    "2": "input_param_3",
                    "22": "input_array",
                    "4": "type_array"
                },
                "param_4": {
                    "1": "input_value1",
                    "2": "input_param_4",
                    "21": "input_value"
                },
                "param_5": {
                    "1": "param5",
                    "2": "input_param_5",
                    "27": "error_flag"
                },
                "param_6": {
                    "1": "context"
                },
                "pcVar3": {
                    "1": "output_ptr",
                    "13": "result",
                    "2": "demangled_type",
                    "4": "demangled_string"
                },
                "pcVar5": {
                    "1": "debug_type",
                    "12": "error_message",
                    "2": "string_result",
                    "5": "message"
                },
                "plVar4": {
                    "1": "type_pointer",
                    "2": "fields",
                    "3": "pointer_list",
                    "4": "long_pointer"
                },
                "sVar6": {
                    "1": "type_name_length",
                    "27": "string_length"
                },
                "stab_demangle_v3_arglist": {
                    "1": "demangle_arglist"
                },
                "string_length": {
                    "1": "string_length"
                },
                "string_list": {
                    "1": "string_list"
                },
                "strncmp": {
                    "1": "compare_strings"
                },
                "switchD_0010b158_caseD_18": {
                    "1": "switch_case_18"
                },
                "switchD_0010b2de_caseD_19": {
                    "1": "return_debug_type"
                },
                "uVar1": {
                    "1": "type_array_element",
                    "10": "array_element",
                    "2": "type",
                    "3": "component"
                },
                "update_memory_value_00113dfe": {
                    "4": "update_memory_value"
                }
            },
            "called": [
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_00113cb9",
                "FUN_00113b1e",
                "FUN_00113d3a",
                "FUN_00104050",
                "FUN_00113df2",
                "FUN_00113b4a",
                "FUN_001040e0",
                "FUN_0010b0fa",
                "FUN_00113dfe",
                "FUN_001048f0",
                "FUN_00112904",
                "FUN_00113b71",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_0010b6ea",
                "FUN_001044b0",
                "FUN_00113ce0",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * improve_debug_type_extraction_0010b0fa(undefined8 input_param1,undefined8 input_param2,uint *input_array,long input_value,\n                   undefined *error_flag)\n\n{\n  uint array_element;\n  int comparison_result;\n  char *result;\n  long *long_pointer;\n  char *error_message;\n  size_t string_length;\n  void *type_ptr;\n  long result_length;\n  undefined local_array [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    array_element = *input_array;\n    if (0x29 < array_element) break;\n    if (0x17 < array_element) {\n      switch(array_element) {\n      case 0x18:\n        goto switch_case_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)improve_debug_type_extraction_0010b0fa(input_param1,input_param2,*(undefined8 *)(input_array + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*input_array) {\n          case 0x19:\n            goto return_debug_type;\n          case 0x1a:\n            result = (char *)debug_make_volatile_type_isra_0(result);\n            return result;\n          case 0x1b:\n            result = (char *)debug_make_const_type_isra_0(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)debug_make_pointer_type_isra_0(result);\n            return result;\n          case 0x23:\n            result = (char *)debug_make_reference_type_isra_0(result);\n            return result;\n          }\n        }\n        goto label_5;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,input_array,0x14,local_array);\n        if (result == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto label9;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nlabel_3:\n          error_message = (char *)debug_make_int_type_isra_0(1,0);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_type_constprop_0(6,1);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto label_3;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)debug_make_float_type_isra_0(8);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_float_type_isra_0(4);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_float_type_isra_0(0x10);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(1,1);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nlabel_6:\n          error_message = (char *)debug_make_int_type_isra_0(4,0);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nlabel_7:\n          error_message = (char *)debug_make_int_type_isra_0(4,1);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto label_6;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto label_7;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(2,0);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(2,1);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_void_type_isra_0();\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto label_7;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(8,0);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(8,1);\n          goto label_9;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto label_8;\n          *error_flag = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nlabel_8:\n          error_message = (char *)get_text_message(0,error_message,5);\n          write_to_file(stderr,error_message);\n        }\n        error_message = (char *)0x0;\nlabel_9:\n        free(result);\n        return error_message;\n      case 0x29:\n        if (*(long *)(input_array + 4) == 0) {\n          type_ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          type_ptr = (void *)improve_debug_type_extraction_0010b0fa(input_param1,input_param2,*(long *)(input_array + 4),0,0);\n        }\n        if (type_ptr != (void *)0x0) {\n          result_length = demangle_arglist(input_param1,input_param2,*(undefined8 *)(input_array + 6),local_array);\n          if (result_length != 0) {\n            result = (char *)debug_make_function_type_isra_0(type_ptr,result_length,local_array[0]);\n            return result;\n          }\n          free(type_ptr);\n        }\n        goto label_5;\n      }\n      break;\n    }\n    if (array_element != 1) {\n      if (array_element == 4) {\n        result = (char *)cplus_demangle_print(3,input_array,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          string_length = strlen(result);\n          error_message = (char *)stab_find_tagged_type(input_param1,input_param2,result,string_length & 0xffffffff,9);\n          free(result);\n          return error_message;\n        }\nlabel9:\n        error_message = (char *)get_text_message(0,error_message,5);\n        write_to_file(stderr,error_message);\n        return result;\n      }\n      if (array_element == 0) {\n        if ((input_value == 0) ||\n           (long_pointer = (long *)debug_get_fields_isra_0(input_value), long_pointer == (long *)0x0))\n        goto switch_case_18;\n        goto label3;\n      }\n      break;\n    }\n    input_value = improve_debug_type_extraction_0010b0fa(input_param1,input_param2,*(undefined8 *)(input_array + 4),input_value,0);\n    if (input_value == 0) goto label_5;\n    input_array = *(uint **)(input_array + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result = (char *)get_text_message(0,\"Unrecognized demangle component %d\\n\",5);\n  write_to_file(stderr,result,(ulong)array_element);\nlabel_5:\n  result = (char *)0x0;\nreturn_debug_type:\n  return result;\nlabel3:\n  if (*long_pointer == 0) {\nswitch_case_18:\n    result = (char *)stab_find_tagged_type\n                               (input_param1,input_param2,*(undefined8 *)(input_array + 4),input_array[6],0);\n    return result;\n  }\n  result = *(char **)(*long_pointer + 8);\n  if (result == (char *)0x0) goto label_5;\n  error_message = (char *)debug_get_type_name_constprop_0(result);\n  if (error_message != (char *)0x0) {\n    string_length = strlen(error_message);\n    if ((input_array[6] == (uint)string_length) &&\n       (comparison_result = compare_strings(error_message,*(char **)(input_array + 4),(long)(int)input_array[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  long_pointer = long_pointer + 1;\n  goto label3;\n}\n\n",
            "current_name": "improve_debug_type_extraction_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "improve_debug_type_extraction_0010b0fa",
                "LAB_0010b1a5": "label3",
                "LAB_0010b38c": "label_5",
                "LAB_0010b3d3": "label9",
                "LAB_0010b406": "label_3",
                "LAB_0010b504": "label_6",
                "LAB_0010b528": "label_7",
                "LAB_0010b6a9": "label_8",
                "LAB_0010b6c6": "label_9",
                "__ptr": "type_ptr",
                "_stderr": "stderr",
                "caseD_18": "case_value_18",
                "caseD_19": "case_value_19",
                "dcgettext": "get_text_message",
                "fprintf": "write_to_file",
                "iVar2": "comparison_result",
                "lVar7": "result_length",
                "local_40": "local_array",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_array",
                "param_4": "input_value",
                "param_5": "error_flag",
                "pcVar3": "result",
                "pcVar5": "error_message",
                "plVar4": "long_pointer",
                "sVar6": "string_length",
                "stab_demangle_v3_arglist": "demangle_arglist",
                "strncmp": "compare_strings",
                "switchD_0010b158_caseD_18": "switch_case_18",
                "switchD_0010b2de_caseD_19": "return_debug_type",
                "uVar1": "array_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "1": "extract_arg_list",
                    "10": "demangle_arglist",
                    "12": "demangle_v3_arglist",
                    "2": "extract_v3_arglist"
                },
                "__format": {
                    "1": "format_str",
                    "10": "error_msg",
                    "18": "error_message"
                },
                "__ptr": {
                    "1": "result_list",
                    "12": "result_ptr",
                    "5": "result_array"
                },
                "lVar1": {
                    "1": "demangled_str_length",
                    "2": "demangled_result",
                    "3": "demangled_string",
                    "6": "demangled_arg",
                    "8": "demangle_result"
                },
                "local_39": {
                    "1": "arg_buffer",
                    "2": "type_buffer",
                    "3": "demangled_string",
                    "4": "demangled_name",
                    "5": "temp_buffer",
                    "7": "buffer"
                },
                "param_1": {
                    "1": "param1",
                    "23": "arg1",
                    "3": "param_1"
                },
                "param_2": {
                    "1": "arglist_param_2",
                    "23": "arg2",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "arglist_param_3",
                    "16": "arglist",
                    "4": "arglist_ptr",
                    "9": "arg_list"
                },
                "param_4": {
                    "1": "is_failure",
                    "17": "error_flag",
                    "2": "is_empty",
                    "5": "is_error"
                },
                "stab_demangle_v3_arg": {
                    "1": "demangle_v3_arg"
                },
                "uVar2": {
                    "1": "num_demangled",
                    "2": "arg_index",
                    "3": "result_count",
                    "5": "index",
                    "8": "count"
                },
                "uVar3": {
                    "1": "ptr_size",
                    "2": "array_size",
                    "4": "size",
                    "9": "capacity"
                },
                "uVar4": {
                    "1": "result_count",
                    "2": "count",
                    "4": "temp_count",
                    "7": "new_count"
                }
            },
            "called": [
                "FUN_0010b0fa",
                "FUN_001048f0",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long demangle_result;\n  ulong count;\n  ulong capacity;\n  uint new_count;\n  char buffer [9];\n  \n  capacity = 10;\n  count = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangle_result = demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (demangle_result == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)capacity <= new_count) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + count * 8) = demangle_result;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)result + count * 8) = 0;\n  return result;\n}\n\n",
            "current_name": "demangle_v3_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result",
                "lVar1": "demangle_result",
                "local_39": "buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "stab_demangle_v3_arg": "demangle_v3_arg",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "new_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "FUN_0010b800": {
                    "1": "generate_stab_type",
                    "4": "process_integer_type"
                },
                "auStack_8a": {
                    "1": "array_stack",
                    "11": "stack_array",
                    "2": "array",
                    "3": "stack_data",
                    "6": "unused_array"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "lVar4": {
                    "1": "temp_variable",
                    "2": "temp1",
                    "4": "temp_value",
                    "5": "temp_var1",
                    "7": "value"
                },
                "lVar5": {
                    "1": "mask",
                    "2": "shift_value",
                    "5": "temp_var2",
                    "7": "bit_mask"
                },
                "local_8c": {
                    "1": "local_string",
                    "2": "output_string",
                    "3": "string_buffer",
                    "5": "format_string",
                    "7": "buffer"
                },
                "non_fatal": {
                    "1": "handle_error"
                },
                "param_1": {
                    "1": "symbol_table",
                    "23": "base_address"
                },
                "param_2": {
                    "1": "bit_size",
                    "2": "type_size",
                    "28": "size"
                },
                "param_3": {
                    "1": "is_null",
                    "18": "flag",
                    "2": "condition",
                    "4": "is_negative"
                },
                "plVar1": {
                    "1": "current_pointer",
                    "2": "ptr_to_value",
                    "3": "ptr",
                    "5": "ptr_to_size"
                },
                "sVar3": {
                    "19": "string_length",
                    "3": "str_length",
                    "8": "length"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type"
                },
                "stab_push_string": {
                    "1": "push_string"
                },
                "uVar2": {
                    "25": "result",
                    "5": "return_value"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_integer_type_0010b800(long base_address,int size,char flag)\n\n{\n  long *pointer;\n  undefined8 result;\n  size_t string_length;\n  long value;\n  long bit_mask;\n  undefined2 formatted_string;\n  undefined4 stack_array [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    pointer = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *pointer;\n    if (value != 0) {\n      result = push_defined_type_to_symbol_table(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *pointer = value;\n    sprintf((char *)&formatted_string,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bit_mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&formatted_string);\n      sprintf((char *)((long)&formatted_string + string_length),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      string_length = strlen((char *)&formatted_string);\n      *(undefined2 *)((long)&formatted_string + string_length) = 0x3b30;\n      *(undefined *)((long)&formatted_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formatted_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formatted_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = push_string_to_symbol_table(base_address,&formatted_string,value,1,size);\n  }\n  else {\n    result = get_text_from_catalog(0,\"stab_int_type: bad size %u\",5);\n    handle_non_fatal_error(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_integer_type_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "process_integer_type_0010b800",
                "auStack_8a": "stack_array",
                "dcgettext": "get_text_from_catalog",
                "lVar4": "value",
                "lVar5": "bit_mask",
                "local_8c": "formatted_string",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointer",
                "sVar3": "string_length",
                "stab_push_defined_type": "push_defined_type_to_symbol_table",
                "stab_push_string": "push_string_to_symbol_table",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUN_0010b948": {
                    "1": "push_defined_type",
                    "2": "process_stab_data",
                    "8": "process_data"
                },
                "__ptr": {
                    "1": "popped_type",
                    "2": "type_ptr",
                    "3": "string_ptr",
                    "5": "type_pointer"
                },
                "cVar2": {
                    "1": "is_private",
                    "13": "is_int_type",
                    "2": "is_integer_type",
                    "3": "is_valid",
                    "5": "is_integer"
                },
                "lVar1": {
                    "1": "type_info_ptr",
                    "2": "temporary_value",
                    "3": "counter",
                    "4": "type_ptr"
                },
                "local_5a": {
                    "1": "formatted_str",
                    "12": "output_string",
                    "2": "output_buffer",
                    "3": "string_buffer",
                    "9": "formatted_string"
                },
                "param_1": {
                    "1": "param_address",
                    "2": "input_data",
                    "3": "input_address",
                    "6": "base_address"
                },
                "param_2": {
                    "1": "input_length",
                    "11": "size",
                    "2": "param_count",
                    "3": "data_size",
                    "4": "count"
                },
                "uVar3": {
                    "1": "param_val",
                    "2": "converted_count",
                    "4": "ulong_size"
                },
                "uVar4": {
                    "1": "num_elements_minus_1",
                    "3": "modified_size",
                    "4": "index",
                    "6": "size_minus_one"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_0010b800",
                "FUN_001048f0",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010b948(long base_address,uint size)\n\n{\n  long type_ptr;\n  char is_int_type;\n  void *type_pointer;\n  ulong ulong_size;\n  uint size_minus_one;\n  char output_string [50];\n  \n  size_minus_one = size - 1;\n  ulong_size = (ulong)size;\n  if ((size_minus_one < 0x10) && (type_ptr = *(long *)(base_address + 0xf8 + (ulong)size_minus_one * 8), type_ptr != 0)) {\n    stab_push_defined_type(base_address,type_ptr,ulong_size);\n    return;\n  }\n  is_int_type = stab_int_type_lto_priv_0(base_address,4,0);\n  if (is_int_type != '\\0') {\n    type_pointer = (void *)stab_pop_type(base_address);\n    type_ptr = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = type_ptr + 1;\n    if (size_minus_one < 0x10) {\n      *(long *)(base_address + 0xf8 + (ulong)size_minus_one * 8) = type_ptr;\n    }\n    sprintf(output_string,\"%ld=r%s;%u;0;\",type_ptr,type_pointer,ulong_size);\n    free(type_pointer);\n    stab_push_string(base_address,output_string,type_ptr,1,ulong_size);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "__ptr": "type_pointer",
                "cVar2": "is_int_type",
                "lVar1": "type_ptr",
                "local_5a": "output_string",
                "param_1": "base_address",
                "param_2": "size",
                "uVar3": "ulong_size",
                "uVar4": "size_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "(ulong)(uint)(iVar2 * 8)": {
                    "1": "calculated_size"
                },
                "*(char *)(param_1[0xc] + 0x1c)": {
                    "1": "flag_value"
                },
                "*(char **)(lVar3 + 0x20)": {
                    "1": "updated_message"
                },
                "*(char **)(param_1[0xc] + 0x20)": {
                    "1": "message_ptr"
                },
                "*(int *)(param_1[0xc] + 0x18)": {
                    "1": "size_value"
                },
                "*(undefined *)(lVar3 + 0x1c)": {
                    "1": "new_value"
                },
                "*(undefined8 *)*param_1": {
                    "1": "unknown_size"
                },
                "CONCAT71": {
                    "1": "bitwise_concatenation"
                },
                "FUN_00109b2f": {
                    "1": "get_array_pointer"
                },
                "FUN_0010ba08": {
                    "1": "build_warning_message",
                    "16": "generate_warning_message",
                    "2": "generate_field_string",
                    "3": "generate_struct_string"
                },
                "FUN_00119ed0": {
                    "2": "non_fatal"
                },
                "__s": {
                    "1": "popped_type",
                    "2": "pop_type_result",
                    "4": "type",
                    "5": "type_name",
                    "8": "struct_name"
                },
                "__s_00": {
                    "1": "formatted_string_var",
                    "2": "generated_message",
                    "3": "formatted_string",
                    "4": "message"
                },
                "abort": {
                    "2": "abort_execution",
                    "3": "terminate_program"
                },
                "abort()": {
                    "1": "exit_program()"
                },
                "cVar1": {
                    "1": "warning_enabled",
                    "2": "first_char",
                    "3": "flag_value",
                    "4": "flag_char",
                    "6": "flag"
                },
                "dcgettext": {
                    "1": "translate_message",
                    "2": "get_text"
                },
                "dcgettext()": {
                    "1": "translate_string()"
                },
                "free": {
                    "1": "memory_deallocation_function_stub",
                    "2": "free_memory"
                },
                "free()": {
                    "1": "deallocate_memory()"
                },
                "iVar2": {
                    "1": "var2",
                    "2": "size_value",
                    "3": "field_size",
                    "4": "struct_size"
                },
                "lVar3": {
                    "1": "param1_value",
                    "2": "length",
                    "3": "long_value",
                    "6": "local_var"
                },
                "non_fatal": {
                    "1": "handle_error",
                    "2": "handle_warning"
                },
                "non_fatal()": {
                    "1": "report_error()"
                },
                "param_1": {
                    "1": "struct_params,\n",
                    "10": "param_array",
                    "2": "pointer_array",
                    "4": "parameters"
                },
                "param_1[0xc]": {
                    "1": "struct_pointer"
                },
                "param_2": {
                    "1": "string_param",
                    "30": "field_name"
                },
                "param_3": {
                    "1": "param_1_val",
                    "10": "param_3",
                    "2": "value",
                    "4": "param3",
                    "8": "param_value"
                },
                "param_4": {
                    "1": "param_length",
                    "17": "field_size",
                    "2": "struct_size",
                    "5": "size"
                },
                "param_5": {
                    "1": "param_type",
                    "11": "flag",
                    "2": "param_5",
                    "9": "field_type"
                },
                "pcVar9": {
                    "1": "mode_str",
                    "12": "flag_string",
                    "3": "field_type_string",
                    "4": "flag_str"
                },
                "sVar4": {
                    "1": "param2_length",
                    "2": "struct_size",
                    "3": "len_param_1"
                },
                "sVar5": {
                    "1": "length2",
                    "13": "field_name_length",
                    "2": "param_2_len"
                },
                "sVar6": {
                    "1": "pop_type_result_len",
                    "2": "struct_name_length",
                    "3": "type_length"
                },
                "sprintf": {
                    "1": "string_formatting",
                    "4": "format_string"
                },
                "sprintf()": {
                    "1": "format_string()"
                },
                "stab_pop_type": {
                    "1": "function_stub",
                    "3": "pop_type"
                },
                "stab_pop_type()": {
                    "1": "pop_struct_name"
                },
                "strlen": {
                    "1": "get_string_length",
                    "2": "string_length"
                },
                "strlen()": {
                    "1": "get_string_length"
                },
                "struct": {
                    "1": "structure"
                },
                "uVar7": {
                    "1": "header",
                    "13": "warning_message",
                    "2": "translation",
                    "3": "warning_msg"
                },
                "uVar8": {
                    "1": "u_var2",
                    "13": "result",
                    "16": "return_value"
                },
                "xmalloc": {
                    "1": "memory_allocation_function_stub",
                    "5": "allocate_memory"
                },
                "xmalloc()": {
                    "1": "allocate_memory()"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00104240",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_warning_message_0010ba08(undefined8 *param_array,char *field_name,undefined8 param_3,ulong field_size,int flag)\n\n{\n  char flag;\n  int struct_size;\n  long local_var;\n  char *struct_name;\n  size_t len_param_1;\n  size_t field_name_length;\n  size_t type_length;\n  char *message;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(struct_pointer + 0x1c);\n  struct_size = *(int *)(struct_pointer + 0x18);\n  struct_name = (char *)pop_struct_name;\n  if (*(char **)(struct_pointer + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    len_param_1 = string_length(*(char **)(struct_pointer + 0x20));\n    field_name_length = string_length(field_name);\n    type_length = string_length(struct_name);\n    message = (char *)allocate_memory(len_param_1 + 0x32 + field_name_length + type_length);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort_execution;\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*param_array;\n      warning_message = get_text(0,\"%s: warning: unknown size for field `%s\\' in structure\",5);\n      handle_warning(warning_message,return_value,field_name);\n    }\n    format_string(message,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(struct_pointer + 0x20),field_name,flag_string,struct_name,\n            param_3,field_size);\n    deallocate_memory(*(void **)(struct_pointer + 0x20));\n    local_var = struct_pointer;\n    *(char **)(local_var + 0x20) = message;\n    if (flag != '\\0') {\n      *(undefined *)(local_var + 0x1c) = 1;\n    }\n    return_value = bitwise_concatenation((int7)((ulong)local_var >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT71": "bitwise_concatenation",
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "__s": "struct_name",
                "__s_00": "message",
                "abort": "terminate_program",
                "abort()": "abort_execution",
                "cVar1": "flag",
                "dcgettext": "get_text",
                "free": "deallocate_memory",
                "iVar2": "struct_size",
                "lVar3": "local_var",
                "non_fatal": "handle_warning",
                "param_1": "param_array",
                "param_1[0xc]": "struct_pointer",
                "param_2": "field_name",
                "param_4": "field_size",
                "param_5": "flag",
                "pcVar9": "flag_string",
                "sVar4": "len_param_1",
                "sVar5": "field_name_length",
                "sVar6": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_pop_type()": "pop_struct_name",
                "strlen": "string_length",
                "struct": "structure",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "*(undefined4 *)(lVar1 + 0x28)": {
                    "1": "counter"
                },
                "*(undefined8 *)(lVar1 + 0x18)": {
                    "1": "initialized_value"
                },
                "*(undefined8 *)(lVar1 + 0x20)": {
                    "1": "new_hash_flag"
                },
                "0x18": {
                    "1": "initial_value"
                },
                "0x20": {
                    "1": "max_value"
                },
                "0x28": {
                    "1": "flag"
                },
                "0x30": {
                    "2": "hash_size"
                },
                "FUN_0010bb52": {
                    "1": "create_hash_entry",
                    "2": "create_hash_func",
                    "4": "create_bfd_hash",
                    "7": "create_hash_function"
                },
                "bfd_hash_allocate": {
                    "1": "allocate_memory",
                    "9": "allocate_hash"
                },
                "bfd_hash_newfunc": {
                    "1": "create_new_func",
                    "4": "create_new_function"
                },
                "lVar1": {
                    "1": "hash_result",
                    "2": "hash_table",
                    "3": "hash",
                    "4": "hash_ptr",
                    "9": "new_hash"
                },
                "param_1": {
                    "1": "param",
                    "10": "input_value",
                    "11": "size",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "param",
                    "12": "param_2",
                    "2": "size",
                    "5": "param2"
                },
                "param_3": {
                    "1": "func_param2",
                    "12": "param_3",
                    "2": "data",
                    "5": "param3"
                }
            },
            "called": [
                "FUN_00104450",
                "FUN_00104200"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long size,undefined8 param_2,undefined8 param_3)\n\n{\n  long new_hash;\n  \n  if (((size != 0) || (size = allocate_hash(param_2,0x30), size != 0)) &&\n     (new_hash = create_new_function(size,param_2,param_3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_hash_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_function",
                "lVar1": "new_hash",
                "param_1": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "FUN_00109cf4": {
                    "1": "stab_push_defined_type"
                },
                "FUN_0010bba1": {
                    "1": "hash_lookup_and_push_defined_type",
                    "12": "lookup_and_push_defined_type",
                    "2": "lookup_defined_type",
                    "3": "find_and_push_defined_type",
                    "4": "lookup_and_push_type",
                    "5": "find_defined_type"
                },
                "lVar1": {
                    "1": "result",
                    "10": "hash_result",
                    "2": "hash_value",
                    "3": "hash_entry",
                    "5": "hash_lookup_result"
                },
                "param_1": {
                    "1": "param_address",
                    "16": "hash_table",
                    "2": "input_param",
                    "4": "base_address",
                    "5": "symbol_table"
                },
                "param_2": {
                    "1": "symbol_name",
                    "14": "key",
                    "2": "search_key",
                    "3": "type"
                },
                "param_3": {
                    "1": "type_val"
                },
                "uVar2": {
                    "1": "return_value",
                    "12": "push_result",
                    "17": "result"
                }
            },
            "called": [
                "FUN_00104560",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long hash_table,undefined8 key)\n\n{\n  long hash_result;\n  undefined8 result;\n  \n  hash_result = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    result = stab_push_defined_type(hash_table,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_push_defined_type_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "lVar1": "hash_result",
                "param_1": "hash_table",
                "param_2": "key",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "<auVar8>": {
                    "1": "return_val"
                },
                "<bVar7>": {
                    "1": "zero"
                },
                "<lVar4>": {
                    "1": "loop_counter"
                },
                "<original_function_name>": {
                    "1": "initialize_debug_info"
                },
                "<param_1>": {
                    "1": "debug_info"
                },
                "<param_2>": {
                    "1": "filename"
                },
                "<param_3>": {
                    "1": "param3"
                },
                "<param_4>": {
                    "1": "param4"
                },
                "<pcVar6>": {
                    "1": "filename_ptr"
                },
                "<puVar1>": {
                    "1": "ptr1"
                },
                "<puVar2>": {
                    "1": "ptr2"
                },
                "<puVar3>": {
                    "1": "ptr3"
                },
                "<puVar5>": {
                    "1": "ptr5"
                },
                "FUN_0010bbd3": {
                    "1": "parse_debug_info",
                    "2": "set_debug_info",
                    "26": "initialize_debug_info"
                },
                "auVar8": {
                    "1": "retval",
                    "18": "return_value",
                    "2": "return_val",
                    "8": "result"
                },
                "bVar7": {
                    "1": "byte_val",
                    "15": "flag",
                    "2": "zero_byte",
                    "6": "byte_var"
                },
                "lVar4": {
                    "1": "loop_index",
                    "13": "loop_counter",
                    "2": "loop_var",
                    "3": "loop_count",
                    "5": "counter"
                },
                "param_1": {
                    "1": "data_structure",
                    "24": "debug_info",
                    "5": "info"
                },
                "param_2": {
                    "1": "string_input",
                    "28": "filename"
                },
                "param_3": {
                    "1": "var_8",
                    "17": "param3",
                    "2": "data1",
                    "5": "param_3"
                },
                "param_4": {
                    "1": "param_b",
                    "17": "param4",
                    "2": "arg4",
                    "5": "param_4"
                },
                "pcVar6": {
                    "1": "pc_var",
                    "2": "file_name",
                    "4": "default_filename",
                    "8": "filename_ptr"
                },
                "puVar1": {
                    "1": "pointer1",
                    "2": "info_units",
                    "3": "units",
                    "7": "ptr1",
                    "8": "prev_debug_info"
                },
                "puVar2": {
                    "1": "new_debug_info1",
                    "2": "units",
                    "7": "ptr2"
                },
                "puVar3": {
                    "1": "new_units_ptr",
                    "2": "units2",
                    "7": "ptr3"
                },
                "puVar5": {
                    "1": "loop_ptr",
                    "2": "pu_var5",
                    "3": "ptr5",
                    "4": "ptr4"
                }
            },
            "called": [
                "FUN_00104300",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *prev_debug_info;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loop_counter;\n  undefined4 *ptr4;\n  char *filename_ptr;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  filename_ptr = \"\";\n  if (filename != (char *)0x0) {\n    filename_ptr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filename_ptr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  prev_debug_info = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (prev_debug_info == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *prev_debug_info = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar6": "filename_ptr",
                "puVar1": "prev_debug_info",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "ptr4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "1": "process_debug_record",
                    "12": "record_debug_function",
                    "17": "debug_record_function"
                },
                "auVar8": {
                    "1": "return_val",
                    "19": "return_value",
                    "9": "result"
                },
                "bVar7": {
                    "1": "temp_byte",
                    "13": "flag",
                    "2": "zero",
                    "5": "b_var7"
                },
                "lVar4": {
                    "1": "counter",
                    "12": "result",
                    "2": "temp_value",
                    "3": "temp_var",
                    "4": "temp"
                },
                "param_1": {
                    "1": "base_address",
                    "2": "filename",
                    "3": "context",
                    "5": "debug_info"
                },
                "param_2": {
                    "1": "file_name",
                    "2": "record",
                    "26": "filename"
                },
                "param_3": {
                    "1": "record_length",
                    "13": "line_number",
                    "5": "size"
                },
                "param_4": {
                    "1": "file_type",
                    "3": "debug_flag",
                    "6": "flags",
                    "7": "record_type",
                    "8": "flag"
                },
                "param_5": {
                    "1": "unknown1",
                    "18": "param_5",
                    "2": "arg5",
                    "6": "param5"
                },
                "param_6": {
                    "1": "result",
                    "18": "param_6",
                    "2": "arg6",
                    "6": "param6"
                },
                "pcVar6": {
                    "1": "filename_copy",
                    "2": "temp_filename",
                    "3": "filename_ptr",
                    "7": "default_filename"
                },
                "plVar2": {
                    "1": "debug_set",
                    "2": "debug_data",
                    "3": "record_ptr",
                    "4": "debug_info",
                    "7": "debug_record"
                },
                "puVar3": {
                    "1": "debug_ptr",
                    "2": "debug_entry",
                    "3": "buffer"
                },
                "puVar5": {
                    "1": "loop_ptr",
                    "2": "temp_var2",
                    "5": "pu_var5"
                },
                "uVar1": {
                    "1": "error_msg",
                    "2": "err_msg",
                    "21": "error_message",
                    "5": "result"
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long debug_info,char *filename,long line_number,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *debug_record;\n  undefined4 *debug_data;\n  long result;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (line_number != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_record = (long *)xmalloc(0x18);\n      *debug_record = line_number;\n      *(undefined (*) [16])(debug_record + 1) = ZEXT816(0);\n      debug_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = debug_record;\n      debug_record[2] = (long)debug_data;\n      ptr = debug_data;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = debug_data;\n      result = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(debug_data + 6) = param_5;\n      *(undefined8 *)(debug_data + 8) = 0xffffffffffffffff;\n      result = debug_add_to_namespace_constprop_0(result + 0x10,default_filename,3,(flag & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = debug_record;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "result",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "line_number",
                "param_4": "flag",
                "pcVar6": "default_filename",
                "plVar2": "debug_record",
                "puVar3": "debug_data",
                "puVar5": "ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "record_debug_parameter"
                },
                "FUN_0010bd62": {
                    "1": "record_parameter_debug_info",
                    "10": "record_parameter_debug",
                    "13": "record_parameter",
                    "2": "record_debug_parameter"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "bVar8": {
                    "1": "byte_value",
                    "2": "byte_var",
                    "3": "is_zero",
                    "7": "flag",
                    "8": "counter"
                },
                "dcgettext": {
                    "1": "get_debug_msg"
                },
                "lVar5": {
                    "1": "counter",
                    "14": "loop_counter",
                    "2": "index",
                    "3": "length"
                },
                "param_1": {
                    "1": "object_pointer",
                    "2": "function_pointer",
                    "3": "function",
                    "5": "function_address",
                    "6": "function_ptr",
                    "9": "function_info"
                },
                "param_2": {
                    "1": "param1_value",
                    "2": "param2",
                    "3": "param_2_value",
                    "4": "param_2",
                    "6": "param1"
                },
                "param_3": {
                    "1": "param_count",
                    "2": "param3",
                    "3": "param_value",
                    "4": "param_3",
                    "6": "param2"
                },
                "param_4": {
                    "1": "param3_value",
                    "2": "param4",
                    "3": "param_4_value",
                    "4": "param_4",
                    "6": "param3",
                    "9": "param_type"
                },
                "param_5": {
                    "1": "data",
                    "2": "param_data",
                    "3": "param_5_value",
                    "5": "param_5",
                    "6": "param4"
                },
                "puVar1": {
                    "1": "last_ptr",
                    "2": "current_pointer",
                    "4": "current_node",
                    "7": "current_ptr"
                },
                "puVar3": {
                    "1": "param_debug_info",
                    "2": "new_param",
                    "4": "record_ptr",
                    "8": "new_record"
                },
                "puVar4": {
                    "1": "iter_ptr",
                    "2": "next_node",
                    "3": "current_ptr",
                    "8": "temp_ptr"
                },
                "puVar6": {
                    "1": "last_node_ptr",
                    "2": "last_pointer",
                    "4": "last_node",
                    "7": "last_ptr"
                },
                "puVar7": {
                    "1": "loop_ptr",
                    "2": "start_pointer",
                    "4": "temp_ptr"
                },
                "uVar2": {
                    "1": "localized_string",
                    "20": "error_message",
                    "3": "debug_msg",
                    "6": "error_msg"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_info,long param1,long param_size,undefined4 param_type,undefined8 param4)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *temp_ptr;\n  byte counter;\n  \n  counter = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param_size != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      loop_counter = *(long *)(function_info + 0x18);\n      *(long *)(new_record + 2) = param1;\n      *(long *)(new_record + 4) = param_size;\n      new_record[6] = param_type;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_record + 8) = param4;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = get_debug_msg(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(error_output,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_parameter_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "_stderr": "error_output",
                "bVar8": "counter",
                "dcgettext": "get_debug_msg",
                "lVar5": "loop_counter",
                "param_1": "function_info",
                "param_2": "param1",
                "param_3": "param_size",
                "param_4": "param_type",
                "param_5": "param4",
                "puVar1": "current_ptr",
                "puVar3": "new_record",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "update_function_info",
                    "19": "debug_end_function",
                    "2": "end_function_debugging",
                    "3": "end_function",
                    "4": "end_debugging_function"
                },
                "auVar4": {
                    "1": "return_val",
                    "14": "return_value",
                    "2": "result"
                },
                "lVar1": {
                    "1": "block_pointer",
                    "12": "current_block",
                    "2": "current_block_ptr",
                    "3": "block_ptr",
                    "5": "block_info"
                },
                "param_1": {
                    "2": "function_pointer",
                    "3": "function_info_ptr",
                    "6": "function_ptr",
                    "8": "function_data",
                    "9": "function_info"
                },
                "param_2": {
                    "1": "filename",
                    "2": "new_block_address",
                    "3": "new_address",
                    "4": "new_param"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "15": "unused_param",
                    "2": "new_param_2",
                    "4": "unused"
                },
                "param_4": {
                    "1": "output_var",
                    "2": "output_param",
                    "3": "result",
                    "4": "status"
                },
                "pcVar3": {
                    "1": "error_description",
                    "12": "error_string",
                    "2": "error_message_text",
                    "5": "error_msg",
                    "7": "error_message"
                },
                "uVar2": {
                    "1": "localized_error",
                    "16": "error_message",
                    "2": "result",
                    "3": "translation",
                    "4": "error_msg"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_info,undefined8 new_param,undefined8 unused_param,undefined8 status)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_string;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_info + 8) == 0) || (current_block = *(long *)(function_info + 0x20), current_block == 0)) ||\n     (*(long *)(function_info + 0x18) == 0)) {\n    error_string = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_param;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_info + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_string = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  return_value._8_8_ = status;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "debug_end_function_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "function_info",
                "param_2": "new_param",
                "param_3": "unused_param",
                "param_4": "status",
                "pcVar3": "error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "<FUN_0010be88>": {
                    "1": "start_debug_block"
                },
                "<auVar9>": {
                    "1": "return_array"
                },
                "<bVar8>": {
                    "1": "flag"
                },
                "<param_1>": {
                    "1": "block_pointer"
                },
                "<param_2>": {
                    "1": "param_value1"
                },
                "<param_3>": {
                    "1": "param_value2"
                },
                "<param_4>": {
                    "1": "param_value3"
                },
                "<puVar1>": {
                    "1": "temp_pointer1"
                },
                "<puVar3>": {
                    "1": "allocated_pointer"
                },
                "<puVar7>": {
                    "1": "temp_pointer2"
                },
                "<uVar2>": {
                    "1": "return_value"
                },
                "FUN_0010be88": {
                    "1": "initialize_block",
                    "15": "start_debug_block",
                    "7": "debug_start_block"
                },
                "auVar9": {
                    "1": "return_value_struct",
                    "17": "return_value",
                    "2": "return_val",
                    "3": "result"
                },
                "bVar8": {
                    "1": "byte_var",
                    "10": "flag",
                    "2": "zero_byte",
                    "4": "counter"
                },
                "lVar5": {
                    "1": "memory_address",
                    "2": "current_block",
                    "3": "block_ptr",
                    "6": "block_address"
                },
                "param_1": {
                    "1": "block_data",
                    "2": "block_param",
                    "6": "block_address",
                    "7": "block"
                },
                "param_2": {
                    "1": "debug_param1",
                    "2": "debug_ptr",
                    "3": "current_block",
                    "4": "start_address",
                    "5": "param2"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "unused_ptr",
                    "3": "param_3",
                    "4": "unused_param",
                    "5": "param3"
                },
                "param_4": {
                    "1": "success_flag",
                    "2": "param_4",
                    "3": "result",
                    "7": "return_value"
                },
                "puVar1": {
                    "1": "current_block_ptr",
                    "2": "next_block_ptr",
                    "3": "current",
                    "4": "current_pointer",
                    "5": "current_ptr"
                },
                "puVar3": {
                    "1": "alloc_pointer",
                    "14": "new_block",
                    "3": "allocated_memory"
                },
                "puVar4": {
                    "1": "current_block",
                    "2": "current_ptr",
                    "7": "temp_ptr"
                },
                "puVar6": {
                    "1": "last_node",
                    "2": "previous_ptr",
                    "4": "last_ptr",
                    "5": "last_pointer"
                },
                "puVar7": {
                    "1": "current_block",
                    "2": "loop_ptr",
                    "3": "temp_ptr",
                    "4": "temp_block"
                },
                "uVar2": {
                    "1": "success",
                    "17": "result",
                    "2": "success_flag",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] start_debug_block_0010be88(long block_ptr,undefined8 param2,undefined8 param3,undefined8 return_value)\n\n{\n  undefined8 *current_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *temp_ptr;\n  long block_address;\n  undefined8 *last_pointer;\n  undefined4 *temp_block;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_ptr + 8) == 0) || (*(long *)(block_ptr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_block = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)flag * -2 + 1;\n    }\n    block_address = *(long *)(block_ptr + 0x20);\n    *(undefined8 *)(new_block + 6) = param2;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_ptr = *(undefined8 **)(block_address + 0x10);\n    last_pointer = (undefined8 *)(block_address + 0x10);\n    while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n      last_pointer = temp_ptr;\n      current_ptr = (undefined8 *)*temp_ptr;\n    }\n    *last_pointer = new_block;\n    result = 1;\n    *(undefined4 **)(block_ptr + 0x20) = new_block;\n  }\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "start_debug_block_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "auVar9": "return_value",
                "bVar8": "flag",
                "lVar5": "block_address",
                "param_1": "block_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "return_value",
                "puVar1": "current_ptr",
                "puVar3": "new_block",
                "puVar4": "temp_ptr",
                "puVar6": "last_pointer",
                "puVar7": "temp_block",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "1": "update_current_block",
                    "2": "end_block_debugging",
                    "4": "end_block",
                    "6": "debug_end_block",
                    "9": "end_debug_block"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "auVar4": {
                    "1": "output_data",
                    "2": "return_value_struct",
                    "8": "return_value"
                },
                "lVar1": {
                    "1": "block_ptr",
                    "20": "current_block",
                    "9": "current_block_ptr"
                },
                "param_1": {
                    "1": "block",
                    "16": "block_ptr",
                    "2": "block_info",
                    "6": "block_pointer"
                },
                "param_2": {
                    "1": "new_end_block_ptr",
                    "2": "new_ptr",
                    "3": "new_value",
                    "4": "new_param"
                },
                "param_3": {
                    "1": "unused_ptr",
                    "19": "unused_param",
                    "2": "unused1",
                    "3": "unused"
                },
                "param_4": {
                    "1": "unused_value",
                    "12": "return_value",
                    "2": "result",
                    "3": "return_val"
                },
                "pcVar3": {
                    "1": "debug_error_message",
                    "16": "error_message",
                    "3": "error_msg",
                    "9": "error_string"
                },
                "uVar2": {
                    "1": "localized_error",
                    "11": "error_message",
                    "2": "translation",
                    "5": "result"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] end_debug_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "end_debug_block_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "end_debug_block_0010bf20",
                "_stderr": "stderr",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "1": "add_debug_record_line",
                    "3": "debug_record_line",
                    "4": "record_line_debug_info",
                    "6": "update_debug_record_line",
                    "8": "record_debug_line"
                },
                "bVar7": {
                    "1": "bit_flag",
                    "25": "flag"
                },
                "lVar5": {
                    "1": "offset",
                    "3": "counter",
                    "4": "count",
                    "6": "i",
                    "8": "index"
                },
                "param_1": {
                    "1": "units",
                    "2": "unit_pointer",
                    "3": "record_ptr",
                    "4": "unit"
                },
                "param_2": {
                    "1": "new_param1",
                    "2": "line_record",
                    "3": "record",
                    "4": "line_number",
                    "8": "line"
                },
                "param_3": {
                    "1": "line_ptr",
                    "2": "filename",
                    "3": "line",
                    "6": "unit"
                },
                "puVar2": {
                    "1": "record_ptr",
                    "2": "unit_ptr",
                    "7": "current_unit"
                },
                "puVar4": {
                    "1": "alloc_ptr",
                    "14": "new_record",
                    "2": "new_entry",
                    "3": "allocated_memory"
                },
                "puVar6": {
                    "1": "temp_var",
                    "2": "memory_pointer",
                    "3": "temp_ptr",
                    "4": "record_ptr",
                    "7": "ptr"
                },
                "uVar1": {
                    "1": "output_value",
                    "10": "result",
                    "17": "error_message"
                },
                "uVar3": {
                    "1": "loop_index",
                    "16": "index",
                    "2": "loop_counter",
                    "3": "count",
                    "7": "counter"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_debug_line_0010bf86(long unit,undefined8 line,undefined8 unit)\n\n{\n  undefined8 error_message;\n  undefined8 *current_unit;\n  ulong index;\n  undefined4 *new_record;\n  long index;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(unit + 8) == 0) {\n    error_message = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    index = *(long *)(unit + 0x28);\n    if ((index != 0) && (*(long *)(index + 8) == *(long *)(unit + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(index + 0x10 + index * 8) == -1) {\n          current_unit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(index + 0x10 + (long)current_unit * 8) = line;\n          *(undefined8 *)(index + 0x60 + (long)current_unit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    ptr = new_record;\n    for (index = 0x2c; index != 0; index = index + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(unit + 0x10);\n    *(undefined8 *)(new_record + 4) = line;\n    *(undefined8 *)(new_record + 2) = error_message;\n    *(undefined8 *)(new_record + 0x18) = unit;\n    ptr = new_record + 6;\n    for (index = 0x48; index != 0; index = index + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(unit + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(unit + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(unit + 0x28) = new_record;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "current_name": "record_debug_line_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "bVar7": "flag",
                "lVar5": "index",
                "param_1": "unit",
                "param_2": "line",
                "param_3": "unit",
                "puVar2": "current_unit",
                "puVar4": "new_record",
                "puVar6": "ptr",
                "uVar1": "error_message",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "1": "record_variable_debugging_info",
                    "10": "record_variable",
                    "13": "debug_record_variable",
                    "5": "record_variable_debug"
                },
                "FUN_00112925": {
                    "1": "sub_function"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "auVar1": {
                    "1": "result1",
                    "11": "result",
                    "2": "temp_var",
                    "4": "return_value"
                },
                "auVar9": {
                    "1": "result_container",
                    "11": "return_value",
                    "2": "result2",
                    "4": "final_result"
                },
                "bVar8": {
                    "1": "temp_var",
                    "2": "zero",
                    "3": "byte_var",
                    "4": "byte_value",
                    "6": "b_var8"
                },
                "cVar4": {
                    "1": "is_type_pointer",
                    "14": "flag",
                    "4": "condition"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "debug_add_to_namespace_constprop_0": {
                    "1": "add_to_namespace"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "lVar5": {
                    "1": "loop_counter2",
                    "2": "loop_count",
                    "20": "loop_counter",
                    "4": "counter"
                },
                "lVar6": {
                    "1": "current_file_offset",
                    "10": "current_file",
                    "2": "file_namespace",
                    "4": "namespace_ptr"
                },
                "param_1": {
                    "1": "file_struct",
                    "2": "source_file",
                    "3": "file_data",
                    "6": "file_ptr"
                },
                "param_2": {
                    "1": "var",
                    "2": "variable_offset",
                    "3": "variable_value",
                    "4": "variable_address",
                    "5": "variable"
                },
                "param_3": {
                    "1": "file_descriptor",
                    "10": "namespace",
                    "2": "param3",
                    "3": "variable_value"
                },
                "param_4": {
                    "1": "index",
                    "11": "variable_type",
                    "2": "flag",
                    "4": "type"
                },
                "param_5": {
                    "1": "data",
                    "14": "param_5",
                    "2": "file",
                    "3": "param5",
                    "4": "value"
                },
                "param_6": {
                    "1": "userdata2",
                    "10": "param_6",
                    "15": "result",
                    "2": "return_value",
                    "3": "param6"
                },
                "piVar3": {
                    "1": "dynamic_variable",
                    "2": "new_variable",
                    "3": "dynamic_array",
                    "7": "allocated_memory"
                },
                "piVar7": {
                    "1": "temp_var_info",
                    "2": "array_ptr",
                    "6": "pi_var7"
                },
                "uVar2": {
                    "1": "success_flag",
                    "2": "success",
                    "3": "error_code",
                    "4": "result",
                    "6": "status",
                    "8": "return_value"
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file_ptr,long variable,ulong namespace,int variable_type,undefined8 param_5,\n            undefined8 result)\n\n{\n  undefined result [16];\n  undefined8 return_value;\n  int *allocated_memory;\n  char flag;\n  long loop_counter;\n  long current_file;\n  int *pi_var7;\n  byte b_var8;\n  undefined return_value [16];\n  \n  b_var8 = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = namespace;\n    return result << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (current_file = *(long *)(file_ptr + 0x10), current_file == 0)) {\n      return_value = get_error_message(0,\"debug_record_variable_0010c05d: no current file\",5);\n      print_error_message(error_output,\"%s\\n\",return_value);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file = current_file + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file = add_to_namespace(current_file,variable,2,flag);\n      if (current_file != 0) {\n        allocated_memory = (int *)xmalloc(0x18);\n        pi_var7 = allocated_memory + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *pi_var7 = 0;\n          pi_var7 = pi_var7 + (ulong)b_var8 * -2 + 1;\n        }\n        *allocated_memory = variable_type;\n        return_value = 1;\n        *(ulong *)(allocated_memory + 2) = namespace;\n        *(undefined8 *)(allocated_memory + 4) = param_5;\n        *(int **)(current_file + 0x20) = allocated_memory;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  return_value = 0;\nLAB_0010c12e:\n  return_value._8_8_ = result;\n  return_value._0_8_ = return_value;\n  return return_value;\n}\n\n",
            "current_name": "debug_record_variable_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "_stderr": "error_output",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "b_var8",
                "cVar4": "flag",
                "dcgettext": "get_error_message",
                "debug_add_to_namespace_constprop_0": "add_to_namespace",
                "fprintf": "print_error_message",
                "lVar5": "loop_counter",
                "lVar6": "current_file",
                "param_1": "file_ptr",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "variable_type",
                "param_6": "result",
                "piVar3": "allocated_memory",
                "piVar7": "pi_var7",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FIND_AND_RECORD_VARIABLES": {
                    "1": "record_variables"
                },
                "FUND_determineRecordValue": {
                    "1": "determine_record_value"
                },
                "FUN_0010c139": {
                    "1": "process_data",
                    "11": "record_variable_or_debug",
                    "2": "process_record",
                    "3": "record_or_debug_variable",
                    "5": "record_variable"
                },
                "cVar2": {
                    "1": "flag_char",
                    "2": "char_flag",
                    "3": "record_flag",
                    "6": "char_value",
                    "9": "flag"
                },
                "debug_record_variable": {
                    "1": "debug_record_variable"
                },
                "in_R10": {
                    "1": "register_a",
                    "2": "register_10",
                    "3": "in_r10",
                    "4": "register_r10"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "param1",
                    "5": "record",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "var_ptr",
                    "2": "record_data",
                    "3": "record_address",
                    "4": "record",
                    "5": "data"
                },
                "param_3": {
                    "1": "variable_value",
                    "2": "arg3",
                    "3": "param_a",
                    "6": "param_3",
                    "7": "value"
                },
                "param_4": {
                    "1": "arg_4",
                    "2": "var2",
                    "3": "param_b",
                    "5": "type"
                },
                "param_5": {
                    "1": "var4",
                    "2": "arg5",
                    "3": "param_c",
                    "6": "param_5"
                },
                "param_6": {
                    "1": "param_result",
                    "2": "arg",
                    "3": "param_d",
                    "8": "param_6"
                },
                "puVar4": {
                    "1": "allocated_variable",
                    "2": "new_pointer",
                    "3": "new_variable",
                    "5": "new_record_ptr"
                },
                "uVar1": {
                    "1": "previous_value",
                    "2": "old_pointer",
                    "3": "previous_record",
                    "4": "temp_var"
                },
                "uVar3": {
                    "1": "var3",
                    "2": "result_var",
                    "25": "result",
                    "3": "return_value"
                },
                "unaff_R15": {
                    "1": "temp_register2",
                    "2": "unaff_r15",
                    "4": "register_r15"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_0010c05d",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong record_variable_or_debug_0010c139(undefined8 param_1,long data,undefined8 value,undefined8 param_4,\n                  undefined4 param_5,undefined8 param_6)\n\n{\n  undefined8 temp_var;\n  char flag;\n  ulong result;\n  undefined8 *allocated_memory;\n  undefined8 register_r10;\n  undefined8 register_r15;\n  \n  flag = *(char *)(data + 0x60);\n  if ((flag != '\\0') && ((*(int *)(data + 0x40) != 0 || (*(char *)(data + 0x44) == '\\0')))) {\n    allocated_memory = (undefined8 *)allocate_memory(0x28);\n    temp_var = *(undefined8 *)(data + 0x78);\n    *(undefined8 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[2] = param_4;\n    *(undefined4 *)(allocated_memory + 3) = param_5;\n    allocated_memory[4] = param_6;\n    *(undefined8 **)(data + 0x78) = allocated_memory;\n    *allocated_memory = temp_var;\n    allocated_memory[1] = value;\n    return CONCAT71((int7)((ulong)register_r15 >> 8),flag) & 0xffffffff;\n  }\n  result = debug_record_variable(param_1,value,param_4,param_5,param_6,register_r10);\n  return result;\n}\n\n",
            "current_name": "record_variable_or_debug_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "record_variable_or_debug_0010c139",
                "cVar2": "flag",
                "in_R10": "register_r10",
                "param_2": "data",
                "param_3": "value",
                "puVar4": "allocated_memory",
                "uVar1": "temp_var",
                "uVar3": "result",
                "unaff_R15": "register_r15",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "*(undefined4 *)(__ptr + 3)": {
                    "2": "var3"
                },
                "FUN_0010c1c6": {
                    "1": "reverse_vars_and_free",
                    "2": "record_and_free_debug_variables",
                    "6": "reverse_and_free_records",
                    "8": "process_debug_records"
                },
                "__ptr": {
                    "1": "variable_ptr",
                    "12": "current_record",
                    "2": "current_pointer",
                    "8": "current_ptr"
                },
                "__ptr[1]": {
                    "2": "var1"
                },
                "__ptr[2]": {
                    "2": "var2"
                },
                "__ptr[4]": {
                    "2": "var4"
                },
                "cVar2": {
                    "1": "is_variable_recorded",
                    "11": "result",
                    "12": "debug_result",
                    "2": "should_continue",
                    "3": "is_valid"
                },
                "param_1": {
                    "1": "debugger_handle",
                    "3": "function_pointer",
                    "5": "debugger",
                    "7": "param1"
                },
                "param_2": {
                    "1": "record_data",
                    "2": "record_ptr",
                    "3": "context",
                    "4": "record",
                    "6": "param2"
                },
                "param_3": {
                    "1": "param",
                    "12": "param_3",
                    "2": "arg1",
                    "5": "param3"
                },
                "param_4": {
                    "1": "ptr_unknown_2",
                    "13": "param_4",
                    "2": "arg2",
                    "5": "param4"
                },
                "param_5": {
                    "1": "unused_param_3",
                    "13": "param_5",
                    "2": "arg3",
                    "7": "param5"
                },
                "param_6": {
                    "1": "ptr_unknown_4",
                    "10": "param6",
                    "13": "param_6",
                    "2": "arg4"
                },
                "ptr": {
                    "1": "ptr"
                },
                "puVar1": {
                    "1": "ptr_next",
                    "11": "next_record",
                    "12": "next_ptr",
                    "4": "next_pointer"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\nundefined process_debug_records_0010c1c6(undefined8 param1,long param2,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_ptr;\n  char debug_result;\n  undefined8 *current_record;\n  \n  current_record = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (current_record == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    debug_result = debug_record_variable\n                      (param1,var1,var2,*(undefined4 *)(current_record + 3),var4,param_6,param_5\n                      );\n    if (debug_result == '\\0') break;\n    next_ptr = (undefined8 *)*current_record;\n    free(current_record);\n    current_record = next_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_records_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "process_debug_records_0010c1c6",
                "__ptr": "current_record",
                "__ptr[1]": "var1",
                "__ptr[2]": "var2",
                "__ptr[4]": "var4",
                "cVar2": "debug_result",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "next_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "FUN_0010c218": {
                    "1": "process_debug_type",
                    "2": "update_debug_info",
                    "4": "debug_name_type",
                    "5": "process_debug_name_type"
                },
                "FUN_00112904": {
                    "1": "print_error_msg"
                },
                "FUN_00112925": {
                    "1": "add_to_namespace_info"
                },
                "ZEXT816": {
                    "1": "set_zero_padding"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "debug_add_to_namespace_constprop_0": {
                    "1": "add_to_debug_namespace"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_new_type"
                },
                "fprintf": {
                    "1": "print_error_message"
                },
                "lVar2": {
                    "1": "type_context",
                    "2": "new_type",
                    "3": "type_info",
                    "6": "type_ptr",
                    "9": "type"
                },
                "lVar4": {
                    "1": "namespace_head",
                    "2": "namespace",
                    "3": "namespace_result",
                    "5": "namespace_entry",
                    "7": "namespace_ptr"
                },
                "param_1": {
                    "1": "type_namespace",
                    "2": "file_data",
                    "4": "file_ptr",
                    "7": "file_info"
                },
                "param_1 + 0x10": {
                    "1": "current_file_ptr"
                },
                "param_1 + 8": {
                    "1": "file_type_ptr"
                },
                "param_2": {
                    "1": "file_name",
                    "11": "name_type",
                    "2": "file_id",
                    "3": "type",
                    "4": "type_id"
                },
                "param_3": {
                    "1": "flags",
                    "2": "debug_name_type",
                    "3": "name",
                    "4": "name_type"
                },
                "pauVar3": {
                    "1": "new_type",
                    "11": "type_ptr",
                    "2": "type_ptr_array",
                    "3": "type_info"
                },
                "uVar1": {
                    "1": "err_msg",
                    "20": "error_message",
                    "7": "error_msg"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010dac0"
            ],
            "code": "\n\n\nlong process_debug_name_type_0010c218(long file_info,long name_type,long name_type)\n\n{\n  undefined8 error_message;\n  long type;\n  undefined (*type_ptr) [16];\n  long namespace_ptr;\n  \n  if ((name_type != 0) && (name_type != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = get_debug_message(0,\"debug_name_type: no current file\",5);\n      print_error(standard_error,\"%s\\n\",error_message);\n    }\n    else {\n      type = create_debug_type(0x16,0);\n      if (type != 0) {\n        type_ptr = (undefined (*) [16])allocate_memory(0x10);\n        namespace_ptr = *(long *)(file_info + 0x10);\n        *type_ptr = convert_to_extended_int(0);\n        *(long *)(*type_ptr + 8) = name_type;\n        *(undefined (**) [16])(type + 0x10) = type_ptr;\n        namespace_ptr = add_to_debug_namespace(namespace_ptr + 0x10,name_type,0,3);\n        if (namespace_ptr != 0) {\n          *(long *)(namespace_ptr + 0x20) = type;\n          *(long *)*type_ptr = namespace_ptr;\n          return type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_name_type_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "process_debug_name_type_0010c218",
                "ZEXT816": "convert_to_extended_int",
                "_stderr": "standard_error",
                "dcgettext": "get_debug_message",
                "debug_add_to_namespace_constprop_0": "add_to_debug_namespace",
                "debug_make_type_constprop_0": "create_debug_type",
                "fprintf": "print_error",
                "lVar2": "type",
                "lVar4": "namespace_ptr",
                "param_1": "file_info",
                "param_2": "name_type",
                "param_3": "name_type",
                "pauVar3": "type_ptr",
                "uVar1": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUNK_0010c2d2": {
                    "1": "get_type_from_xcoff"
                },
                "FUN_00109022": {
                    "1": "find_xcoff_type"
                },
                "FUN_0010c218": {
                    "1": "make_int_type"
                },
                "FUN_0010c2d2": {
                    "1": "convert_data_type",
                    "3": "get_type_from_xcoff"
                },
                "FUN_00112904": {
                    "1": "print_error_message2"
                },
                "FUN_00113df2": {
                    "1": "print_error_message3"
                },
                "FUN_00113dfe": {
                    "1": "print_error_message"
                },
                "FUN_00113e17": {
                    "1": "reset"
                },
                "FUN_00113e23": {
                    "1": "make_indirect_type"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "lVar4": {
                    "1": "type_definition",
                    "13": "type_address",
                    "2": "data_type_ptr",
                    "7": "result"
                },
                "param_1": {
                    "1": "unknown_value",
                    "2": "context",
                    "4": "debugger",
                    "6": "param_1"
                },
                "param_2": {
                    "1": "debug_type_entry",
                    "2": "param2",
                    "3": "offset",
                    "5": "param_2",
                    "6": "type_table"
                },
                "param_3": {
                    "1": "flags",
                    "2": "param3",
                    "3": "xcoff_type",
                    "5": "param_3",
                    "6": "type_info"
                },
                "pcVar2": {
                    "1": "error_message",
                    "2": "type_string",
                    "24": "type_name",
                    "4": "data_type_string"
                },
                "plVar5": {
                    "1": "debug_type_info_ptr",
                    "2": "slot_address",
                    "3": "type_slot",
                    "4": "type_pointer",
                    "5": "found_type",
                    "8": "slot"
                },
                "uVar1": {
                    "1": "abs_xcoff_type",
                    "3": "type",
                    "5": "type_code",
                    "6": "type_index"
                },
                "uVar3": {
                    "1": "type_value",
                    "2": "type_descriptor",
                    "4": "new_type",
                    "8": "type"
                },
                "uVar6": {
                    "1": "abs_type_code",
                    "2": "neg_type_index",
                    "3": "negative_type_index",
                    "9": "index"
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00112904",
                "FUN_00113e17",
                "FUN_00104240",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong get_type_from_xcoff_0010c2d2(undefined8 param_1,long type_table,int *type_info)\n\n{\n  uint type_index;\n  char *type_name;\n  undefined8 type;\n  long type_address;\n  long *slot;\n  uint index;\n  \n  if ((*type_info == 0) && (type_index = type_info[1], (int)type_index < 0)) {\n    index = ~type_index;\n    if (index < 0x22) {\n      type_address = *(long *)(type_table + 0x90 + (ulong)index * 8);\n      if (type_address == 0) {\n        switch(index) {\n        case 1:\n          type = debug_make_int_type_isra_0(1,0);\n          type_name = \"char\";\n          break;\n        case 2:\n          type = debug_make_int_type_isra_0(2,0);\n          type_name = \"short\";\n          break;\n        case 3:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"long\";\n          break;\n        case 4:\n          type = debug_make_int_type_isra_0(1,1);\n          type_name = \"unsigned char\";\n          break;\n        case 5:\n          type = debug_make_int_type_isra_0(1,0);\n          type_name = \"signed char\";\n          break;\n        case 6:\n          type = debug_make_int_type_isra_0(2,1);\n          type_name = \"unsigned short\";\n          break;\n        case 7:\n          type = debug_make_int_type_isra_0(4,1);\n          type_name = \"unsigned int\";\n          break;\n        case 8:\n          type = debug_make_int_type_isra_0(4,1);\n          type_name = \"unsigned\";\n          break;\n        case 9:\n          type = debug_make_int_type_isra_0(4,1);\n          type_name = \"unsigned long\";\n          break;\n        case 10:\n          type = debug_make_void_type_isra_0();\n          type_name = \"void\";\n          break;\n        case 0xb:\n          type = debug_make_float_type_isra_0(4);\n          type_name = \"float\";\n          break;\n        case 0xc:\n          type = debug_make_float_type_isra_0(8);\n          type_name = \"double\";\n          break;\n        case 0xd:\n          type = debug_make_float_type_isra_0(8);\n          type_name = \"long double\";\n          break;\n        case 0xe:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"integer\";\n          break;\n        case 0xf:\n          type = debug_make_type_constprop_0(6,4);\n          type_name = \"boolean\";\n          break;\n        case 0x10:\n          type = debug_make_float_type_isra_0(4);\n          type_name = \"short real\";\n          break;\n        case 0x11:\n          type = debug_make_float_type_isra_0(8);\n          type_name = \"real\";\n          break;\n        case 0x12:\n          type_name = \"stringptr\";\n          type = 0;\n          break;\n        case 0x13:\n          type = debug_make_int_type_isra_0(1,1);\n          type_name = \"character\";\n          break;\n        case 0x14:\n          type = debug_make_type_constprop_0(6,1);\n          type_name = \"logical*1\";\n          break;\n        case 0x15:\n          type = debug_make_type_constprop_0(6,2);\n          type_name = \"logical*2\";\n          break;\n        case 0x16:\n          type = debug_make_type_constprop_0(6,4);\n          type_name = \"logical*4\";\n          break;\n        case 0x17:\n          type = debug_make_type_constprop_0(6,4);\n          type_name = \"logical\";\n          break;\n        case 0x18:\n          type = debug_make_type_constprop_0(5,8);\n          type_name = \"complex\";\n          break;\n        case 0x19:\n          type = debug_make_type_constprop_0(5,0x10);\n          type_name = \"double complex\";\n          break;\n        case 0x1a:\n          type = debug_make_int_type_isra_0(1,0);\n          type_name = \"integer*1\";\n          break;\n        case 0x1b:\n          type = debug_make_int_type_isra_0(2,0);\n          type_name = \"integer*2\";\n          break;\n        case 0x1c:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"integer*4\";\n          break;\n        case 0x1d:\n          type = debug_make_int_type_isra_0(2,0);\n          type_name = \"wchar\";\n          break;\n        case 0x1e:\n          type = debug_make_int_type_isra_0(8,0);\n          type_name = \"long long\";\n          break;\n        case 0x1f:\n          type = debug_make_int_type_isra_0(8,1);\n          type_name = \"unsigned long long\";\n          break;\n        case 0x20:\n          type = debug_make_type_constprop_0(6,8);\n          type_name = \"logical*8\";\n          break;\n        case 0x21:\n          type = debug_make_int_type_isra_0(8,0);\n          type_name = \"integer*8\";\n          break;\n        default:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"int\";\n        }\n        type_address = debug_name_type(param_1,type_name,type);\n        *(long *)(type_table + 0x90 + (ulong)index * 8) = type_address;\n        return type_address;\n      }\n      return type_address;\n    }\n    type_name = (char *)get_error_message(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(error_output,type_name,(ulong)type_index);\n  }\n  else {\n    slot = (long *)stab_find_slot(type_table);\n    if (slot != (long *)0x0) {\n      if (*slot == 0) {\n        type_address = debug_make_indirect_type_isra_0(slot,0);\n        return type_address;\n      }\n      return *slot;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "get_type_from_xcoff_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "get_type_from_xcoff_0010c2d2",
                "_stderr": "error_output",
                "dcgettext": "get_error_message",
                "lVar4": "type_address",
                "param_2": "type_table",
                "param_3": "type_info",
                "pcVar2": "type_name",
                "plVar5": "slot",
                "uVar1": "type_index",
                "uVar3": "type",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "FUN_0010c6be": {
                    "1": "find_debug_type_in_file",
                    "15": "debug_tag_type",
                    "3": "debug_tag_type_check",
                    "6": "process_debug_tag_type"
                },
                "_stderr": {
                    "1": "standard_error",
                    "2": "error_output"
                },
                "dcgettext": {
                    "1": "translate_error_message"
                },
                "iVar1": {
                    "1": "result",
                    "2": "strcmp_result",
                    "24": "comparison_result"
                },
                "lVar5": {
                    "1": "temp_address",
                    "2": "namespace_result",
                    "3": "namespace_entry",
                    "4": "file_offset",
                    "7": "namespace_address"
                },
                "param_1": {
                    "1": "file_base_address",
                    "2": "param_address",
                    "4": "file_offset",
                    "5": "file_handle",
                    "6": "file_address"
                },
                "param_2": {
                    "1": "param_b",
                    "2": "tag",
                    "20": "tag_name",
                    "5": "file_name"
                },
                "param_3": {
                    "1": "param_c",
                    "2": "type",
                    "3": "tag",
                    "4": "tag_ptr",
                    "6": "tag_pointer",
                    "8": "tag_type"
                },
                "pauVar4": {
                    "1": "type_tag_ptr",
                    "2": "tag_data",
                    "3": "allocated_memory",
                    "4": "new_tag"
                },
                "pcVar6": {
                    "1": "error_msg",
                    "2": "debug_message",
                    "28": "error_message"
                },
                "piVar3": {
                    "1": "new_type_constprop",
                    "3": "new_tag_ptr",
                    "4": "new_tag_pointer",
                    "7": "new_type"
                },
                "uVar2": {
                    "1": "localized_string",
                    "2": "translation",
                    "3": "translated_error",
                    "5": "translated_message",
                    "6": "translated_error_message"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\n\n\nint * debug_tag_type_0010c6be(long file_address,char *tag_name,int *tag_type)\n\n{\n  int comparison_result;\n  undefined8 translated_error_message;\n  int *new_type;\n  undefined (*new_tag) [16];\n  long namespace_address;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_type != (int *)0x0)) {\n    if (*(long *)(file_address + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*tag_type != 0x17) {\n        new_type = (int *)debug_make_type_constprop_0(0x17,0);\n        if (new_type == (int *)0x0) {\n          return (int *)0x0;\n        }\n        new_tag = (undefined (*) [16])xmalloc(0x10);\n        namespace_address = *(long *)(file_address + 0x10);\n        *new_tag = ZEXT816(0);\n        *(int **)(*new_tag + 8) = tag_type;\n        *(undefined (**) [16])(new_type + 4) = new_tag;\n        namespace_address = debug_add_to_namespace_constprop_0(namespace_address + 0x10,tag_name,1,3);\n        if (namespace_address == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(namespace_address + 0x20) = new_type;\n        *(long *)*new_tag = namespace_address;\n        return new_type;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_type + 4) + 8),tag_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_type;\n      }\n    }\n    translated_error_message = get_translated_message(0,error_message,5);\n    fprintf(error_output,\"%s\\n\",translated_error_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "debug_tag_type_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "_stderr": "error_output",
                "dcgettext": "get_translated_message",
                "iVar1": "comparison_result",
                "lVar5": "namespace_address",
                "param_1": "file_address",
                "param_2": "tag_name",
                "param_3": "tag_type",
                "pauVar4": "new_tag",
                "pcVar6": "error_message",
                "piVar3": "new_type",
                "uVar2": "translated_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "FUN_0010c7a0": {
                    "1": "update_class_id",
                    "19": "debug_set_class_id",
                    "3": "process_debug_info",
                    "8": "set_class_id"
                },
                "__assert_fail": {
                    "1": "assert_fail"
                },
                "__s1": {
                    "1": "current_class_name",
                    "5": "existing_class_name",
                    "8": "temp_var5"
                },
                "auVar8": {
                    "1": "var9",
                    "2": "result",
                    "24": "return_value",
                    "3": "return_val"
                },
                "cVar5": {
                    "1": "same_type",
                    "15": "is_same_type",
                    "2": "same_type_flag",
                    "7": "temp_var6"
                },
                "iVar6": {
                    "1": "class_id_incremented",
                    "2": "index",
                    "3": "count",
                    "5": "counter",
                    "7": "temp_var7"
                },
                "lVar3": {
                    "1": "temp_var_3",
                    "2": "type_info_ptr",
                    "8": "temp_var3",
                    "9": "type_info"
                },
                "param_1": {
                    "1": "type_info_ptr",
                    "14": "class_id",
                    "2": "class_info",
                    "3": "type"
                },
                "param_2": {
                    "1": "param_name",
                    "24": "class_name",
                    "3": "name"
                },
                "param_3": {
                    "1": "class_type",
                    "11": "type",
                    "2": "type_info",
                    "3": "class_id",
                    "7": "type_kind"
                },
                "param_4": {
                    "1": "unknown",
                    "2": "param4",
                    "25": "param_4"
                },
                "piVar4": {
                    "1": "type_id_ptr",
                    "2": "type_ptr",
                    "4": "type_info_ptr",
                    "8": "temp_var4"
                },
                "puVar7": {
                    "1": "current_ptr",
                    "2": "new_ptr",
                    "3": "node",
                    "5": "new_node"
                },
                "strcmp": {
                    "1": "string_compare"
                },
                "uVar1": {
                    "1": "temp_var_1",
                    "14": "result",
                    "8": "temp_var1"
                },
                "uVar2": {
                    "1": "new_id",
                    "2": "new_type_kind",
                    "3": "new_class_id",
                    "4": "type_id",
                    "8": "temp_var2"
                },
                "xmalloc": {
                    "1": "allocated_memory"
                }
            },
            "called": [
                "FUN_0010922b",
                "FUN_00104300",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_id,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint temp_var2;\n  long type_info;\n  int *temp_var4;\n  char *temp_var5;\n  char is_same_type;\n  int temp_var7;\n  undefined8 *temp_var8;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type + 4);\n  temp_var8 = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (temp_var8 = *(undefined8 **)(class_id + 0x50); temp_var8 != (undefined8 *)0x0;\n        temp_var8 = (undefined8 *)*temp_var8) {\n      temp_var4 = (int *)temp_var8[1];\n      if (*temp_var4 == *type) {\n        temp_var5 = (char *)temp_var8[2];\n        if (class_name == (char *)0x0) {\n          if (temp_var5 == (char *)0x0) {\nLAB_0010c82c:\n            is_same_type = debug_type_samep(class_id,temp_var4,type);\n            if (is_same_type != '\\0') {\n              temp_var2 = *(uint *)(*(long *)(temp_var8[1] + 0x10) + 0xc);\n              temp_var8 = (undefined8 *)(ulong)temp_var2;\n              *(uint *)(type_info + 0xc) = temp_var2;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((temp_var5 != (char *)0x0) && (*temp_var5 == *class_name)) &&\n                (temp_var7 = string_compare(temp_var5,class_name), temp_var7 == 0)) goto LAB_0010c82c;\n      }\n    }\n    temp_var7 = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = temp_var7;\n    *(int *)(type_info + 0xc) = temp_var7;\n    temp_var8 = (undefined8 *)allocated_memory(0x18);\n    result = *(undefined8 *)(class_id + 0x50);\n    temp_var8[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = temp_var8;\n    *temp_var8 = result;\n    temp_var8[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)temp_var8 >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "debug_set_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "__assert_fail": "assert_fail",
                "__s1": "temp_var5",
                "auVar8": "return_value",
                "cVar5": "is_same_type",
                "iVar6": "temp_var7",
                "lVar3": "type_info",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type",
                "piVar4": "temp_var4",
                "puVar7": "temp_var8",
                "strcmp": "string_compare",
                "uVar1": "result",
                "uVar2": "temp_var2",
                "xmalloc": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "FUN_0010be1a": {
                    "1": "create_tag"
                },
                "FUN_0010c1c6": {
                    "1": "end_function",
                    "2": "debug_tag_type"
                },
                "FUN_0010c6be": {
                    "1": "parse_type",
                    "2": "process_vars"
                },
                "FUN_0010c892": {
                    "1": "process_debug_data",
                    "2": "process_function",
                    "3": "process_tags",
                    "8": "process_debug_info",
                    "9": "process_types"
                },
                "FUN_00112904": {
                    "1": "emit_message"
                },
                "_stderr": {
                    "1": "stderr_file",
                    "3": "error_stream"
                },
                "cVar1": {
                    "1": "is_pending_vars",
                    "2": "char_flag",
                    "3": "flag",
                    "5": "is_pending_vars_emitted"
                },
                "dcgettext": {
                    "1": "fetch_unsupported_kind_message",
                    "3": "get_error_message"
                },
                "debug_end_function": {
                    "2": "end_debug_function"
                },
                "debug_make_type_constprop_0": {
                    "1": "make_type_const_prop"
                },
                "debug_tag_type": {
                    "2": "tag_type"
                },
                "fprintf": {
                    "1": "print_error"
                },
                "iVar6": {
                    "1": "int_value",
                    "2": "int_var",
                    "20": "kind"
                },
                "lVar2": {
                    "1": "result_var1",
                    "2": "type_constprop",
                    "6": "type_result",
                    "8": "type"
                },
                "lVar3": {
                    "1": "debug_tag_result",
                    "2": "type",
                    "6": "tagged_type",
                    "7": "tag"
                },
                "param_1": {
                    "1": "data",
                    "10": "arg1",
                    "3": "input_param",
                    "8": "param1"
                },
                "param_2": {
                    "1": "message_param2",
                    "10": "arg2",
                    "2": "data",
                    "8": "param2"
                },
                "param_3": {
                    "1": "parameter2"
                },
                "param_4": {
                    "1": "parameter3"
                },
                "puVar5": {
                    "1": "current_pointer",
                    "2": "current",
                    "3": "ptr_var",
                    "4": "type_list",
                    "6": "current_node"
                },
                "stab_emit_pending_vars": {
                    "1": "emit_pending_variables"
                },
                "uVar4": {
                    "1": "result_var",
                    "11": "return_value",
                    "18": "result"
                }
            },
            "called": [
                "FUN_0010c6be",
                "FUN_0010c1c6",
                "FUN_00112904",
                "FUN_00104240",
                "FUN_0010be1a",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_types_0010c892(undefined8 arg1,long arg2)\n\n{\n  char is_pending_vars_emitted;\n  long type;\n  long tag;\n  undefined8 result;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(arg2 + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      tag = ptr[1];\n      if (kind != 0) {\n        if (tag != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = get_error_message(0,\"debug_make_undefined_type: unsupported kind\",5);\n          print_error(error_stream,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tag == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      type = make_type_constprop_0(kind,0);\n      if (type == 0) goto LAB_0010c910;\n      tag = tag_type(arg1,tag,type);\n      ptr[3] = tag;\n      if (tag == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    is_pending_vars_emitted = emit_pending_vars();\n    if (is_pending_vars_emitted != '\\0') {\n      is_pending_vars_emitted = end_debug_function(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (is_pending_vars_emitted != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_types_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_types_0010c892",
                "_stderr": "error_stream",
                "cVar1": "is_pending_vars_emitted",
                "dcgettext": "get_error_message",
                "debug_end_function": "end_debug_function",
                "debug_make_type_constprop_0": "make_type_constprop_0",
                "debug_tag_type": "tag_type",
                "fprintf": "print_error",
                "iVar6": "kind",
                "lVar2": "type",
                "lVar3": "tag",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar5": "ptr",
                "stab_emit_pending_vars": "emit_pending_vars",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "FUN_0010c95e": {
                    "1": "demangle_stab",
                    "2": "improved_demangle_stab"
                },
                "__ptr": {
                    "1": "ptr_temp",
                    "2": "pointer_variable",
                    "3": "ptr_value",
                    "4": "string_ptr",
                    "5": "void_ptr",
                    "7": "ptr"
                },
                "_sch_istable": {
                    "1": "char_is_table"
                },
                "bVar1": {
                    "1": "current_char",
                    "2": "byte_var_1",
                    "3": "byte_var1",
                    "6": "byte_value"
                },
                "bVar2": {
                    "1": "byte_2",
                    "2": "byte_value2",
                    "3": "byte2",
                    "6": "next_byte"
                },
                "bVar4": {
                    "1": "is_unsigned",
                    "2": "bool_variable_1",
                    "3": "is_signed",
                    "5": "bool_var1"
                },
                "bVar5": {
                    "1": "found_s",
                    "2": "bool_var_2",
                    "3": "bool_value2",
                    "5": "bool_var2",
                    "7": "is_const"
                },
                "bVar6": {
                    "1": "bool_3",
                    "10": "is_volatile",
                    "2": "bool_var_3",
                    "3": "bool_value3",
                    "5": "bool_var3"
                },
                "byte **param_2": {
                    "1": "byte_ptr_ptr"
                },
                "cVar7": {
                    "1": "char_val",
                    "2": "error_flag",
                    "3": "char1",
                    "5": "char_value"
                },
                "copy_and_null_terminate_00109a0b": {
                    "1": "copy_and_terminate"
                },
                "create_data_structure_00113c43": {
                    "2": "create_data_structure"
                },
                "create_debug_type_00113bfa": {
                    "1": "create_debug_type"
                },
                "create_debug_type_00113ce0": {
                    "1": "create_debug_type2"
                },
                "demangle_stab_0010d882": {
                    "2": "demangle_stab"
                },
                "find_matching_string_0010afd5": {
                    "2": "find_matching_string"
                },
                "find_named_type_0010914e": {
                    "1": "find_named_type"
                },
                "get_pointer_value_00113d3a": {
                    "2": "get_pointer_value"
                },
                "improve_demangling_0010d21c": {
                    "2": "improve_demangling"
                },
                "initialize_data_00112904": {
                    "1": "initialize_data"
                },
                "initialize_debug_type_00113b4a": {
                    "1": "initialize_debug_type4"
                },
                "initialize_debug_type_00113cb9": {
                    "1": "initialize_debug_type2"
                },
                "initialize_debug_type_00113df2": {
                    "1": "initialize_debug_type3"
                },
                "initialize_debug_type_00113e17": {
                    "1": "initialize_debug_type"
                },
                "initialize_type_00113b71": {
                    "1": "initialize_type"
                },
                "lVar10": {
                    "1": "debug_type",
                    "2": "long_variable_1",
                    "3": "long1",
                    "4": "long_var",
                    "5": "type_value"
                },
                "lVar15": {
                    "1": "long_var_3",
                    "2": "long_value_2",
                    "3": "long2",
                    "5": "long_var2"
                },
                "local_40": {
                    "1": "local_string_array",
                    "3": "char_array",
                    "8": "char_ptr_array"
                },
                "local_48": {
                    "1": "ulong_val2",
                    "2": "ulong_variable_2",
                    "3": "ulong_var_2"
                },
                "local_49": {
                    "1": "is_const",
                    "2": "undefined1",
                    "3": "undefined_value",
                    "4": "undefined_var"
                },
                "long *param_3": {
                    "1": "long_ptr_ptr"
                },
                "param_1": {
                    "1": "debug_output",
                    "2": "parameter_array",
                    "4": "input_array",
                    "8": "param_array"
                },
                "param_2": {
                    "1": "byte_ptr_ptr",
                    "13": "byte_array_ptr",
                    "8": "byte_array"
                },
                "param_3": {
                    "1": "output_long",
                    "2": "result_ptr",
                    "4": "output_long_ptr",
                    "7": "long_ptr",
                    "9": "output_ptr"
                },
                "parse_identifier_0010d559": {
                    "2": "parse_identifier"
                },
                "parse_integer_00108e76": {
                    "2": "parse_integer"
                },
                "parse_number_00108ea1": {
                    "2": "parse_number"
                },
                "pbVar20": {
                    "1": "byte_array_2",
                    "2": "current_byte",
                    "3": "byte_ptr_3"
                },
                "pbVar3": {
                    "1": "byte_array_ptr",
                    "12": "byte_ptr",
                    "2": "byte_ptr1"
                },
                "pbVar9": {
                    "1": "next_position",
                    "2": "byte_pointer_variable_2",
                    "5": "next_byte_ptr",
                    "6": "byte_ptr2"
                },
                "pcVar12": {
                    "1": "signed_char",
                    "2": "char_pointer_variable",
                    "3": "type_name",
                    "4": "char_ptr1",
                    "8": "char_ptr"
                },
                "pcVar18": {
                    "1": "char_ptr_array"
                },
                "pcVar19": {
                    "1": "type_value",
                    "2": "char_pointer_variable_2",
                    "5": "char_ptr_2",
                    "7": "type_name",
                    "9": "char_ptr2"
                },
                "pcVar20": {
                    "1": "char_pointer3",
                    "3": "char_ptr3"
                },
                "ppcVar18": {
                    "1": "char_double_pointer_variable",
                    "6": "string_array",
                    "7": "char_ptr_ptr"
                },
                "print_error_message_0010911f": {
                    "1": "print_error_message"
                },
                "puVar16": {
                    "1": "type_value_ptr",
                    "2": "ulong_pointer_variable",
                    "8": "ulong_ptr"
                },
                "puVar17": {
                    "1": "undefined_ptr1",
                    "2": "undefined_pointer_variable",
                    "8": "undefined_ptr"
                },
                "sVar13": {
                    "1": "type_name_length",
                    "2": "size_t_variable",
                    "3": "size_t_var",
                    "4": "size_value",
                    "7": "string_length"
                },
                "switchD_0010c9b2_caseD_42": {
                    "1": "case42"
                },
                "switchD_0010c9b2_caseD_50": {
                    "1": "case50"
                },
                "switchD_0010c9b2_caseD_5f": {
                    "1": "case5f"
                },
                "switchD_0010cdf9_caseD_42": {
                    "1": "case42"
                },
                "switchD_0010cdf9_caseD_5f": {
                    "1": "case5f"
                },
                "switchD_0010cdf9_caseD_60": {
                    "1": "case60"
                },
                "uVar11": {
                    "1": "uint64_var1",
                    "2": "uint_var_2",
                    "3": "uint_var2",
                    "4": "result"
                },
                "uVar14": {
                    "1": "ulong_value_2",
                    "2": "parsed_number",
                    "3": "ulong_variable",
                    "5": "number",
                    "7": "ulong_var"
                },
                "uVar8": {
                    "1": "uint_var1",
                    "10": "count",
                    "2": "count_value",
                    "3": "uint1",
                    "6": "uint_var"
                },
                "update_memory_value_00113dfe": {
                    "1": "update_memory_value"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00104270",
                "FUN_00113e17",
                "FUN_00108e76",
                "FUN_00113cb9",
                "FUN_00108ea1",
                "FUN_0010911f",
                "FUN_00113d3a",
                "FUN_00113df2",
                "FUN_00113b4a",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_00113b98",
                "FUN_001048f0",
                "FUN_0010d559",
                "FUN_00112904",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113b71",
                "FUN_00113bfa",
                "FUN_0010d21c",
                "FUN_00113ce0",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010d21c"
            ],
            "code": "\nundefined8 improved_demangle_stab_0010c95e(undefined8 *param_array,byte **byte_array_ptr,long *output_ptr)\n\n{\n  byte byte_value;\n  byte next_byte;\n  byte *byte_ptr;\n  bool bool_var1;\n  bool is_const;\n  bool is_volatile;\n  char char_value;\n  uint count;\n  byte *byte_ptr2;\n  long type_value;\n  undefined8 return_value;\n  char *char_ptr;\n  size_t string_length;\n  ulong ulong_var;\n  void *ptr;\n  long long_var2;\n  ulong *ulong_ptr;\n  undefined *undefined_ptr;\n  char **char_ptr_ptr;\n  char *char_ptr2;\n  byte *byte_ptr_3;\n  undefined undefined_var;\n  ulong ulong_var2;\n  char *char_ptr_array [2];\n  \n  while( true ) {\n    byte_ptr_3 = *byte_array_ptr;\n    byte_value = *byte_ptr_3;\n    if ('T' < (char)byte_value) break;\n    if ((char)byte_value < 'A') goto case42;\n    switch(byte_value) {\n    case 0x41:\n      long_var2 = 0;\n      byte_ptr = byte_ptr_3;\n      goto LAB_0010ca26;\n    default:\n      goto case42;\n    case 0x43:\n      *byte_array_ptr = byte_ptr_3 + 1;\n      char_value = improved_demangle_stab_0010c95e(param_array,byte_array_ptr,output_ptr);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_ptr == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = debug_make_const_type_isra_0(*output_ptr);\n      *output_ptr = long_var2;\n      return 1;\n    case 0x46:\n      *byte_array_ptr = byte_ptr_3 + 1;\n      if (output_ptr == (long *)0x0) {\n        ulong_ptr = (ulong *)0x0;\n        char_ptr_ptr = (char **)0x0;\n      }\n      else {\n        ulong_ptr = &ulong_var2;\n        char_ptr_ptr = char_ptr_array;\n      }\n      char_value = stab_demangle_args(param_array,byte_array_ptr,char_ptr_ptr,ulong_ptr);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (**byte_array_ptr == 0x5f) {\n        *byte_array_ptr = *byte_array_ptr + 1;\n        char_value = improved_demangle_stab_0010c95e(param_array,byte_array_ptr,output_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_ptr == (long *)0x0) {\n          return 1;\n        }\n        long_var2 = debug_make_function_type_isra_0(*output_ptr,char_ptr_array[0],ulong_var2 & 0xff);\n        *output_ptr = long_var2;\n        return 1;\n      }\n      goto case60;\n    case 0x47:\n      *byte_array_ptr = byte_ptr_3 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_var = 0;\n      char_ptr_array[0] = (char *)0x0;\n      ulong_var2 = 0;\n      *byte_array_ptr = byte_ptr_3 + 1;\n      if (((&char_is_table)[(ulong)byte_ptr_3[1] * 2] & 4) == 0) {\n        if (byte_ptr_3[1] != 0x51) goto case60;\n        char_ptr_ptr = char_ptr_array;\n        if (output_ptr == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = stab_demangle_qualified(param_array,byte_array_ptr,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        count = stab_demangle_count(byte_array_ptr);\n        byte_ptr = *byte_array_ptr;\n        string_length = strlen((char *)byte_ptr);\n        if (string_length < count) goto case60;\n        *byte_array_ptr = byte_ptr + count;\n        if ((output_ptr != (long *)0x0) &&\n           (char_ptr_array[0] = (char *)stab_find_tagged_type(*param_array,param_array[1],byte_ptr,count,9),\n           char_ptr_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_array_ptr;\n      if (byte_value == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_array_ptr = *byte_array_ptr + 1;\n        }\n        if (**byte_array_ptr != 0x46) goto case60;\n        *byte_array_ptr = *byte_array_ptr + 1;\n        if (output_ptr == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          ulong_ptr = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &undefined_var;\n          ulong_ptr = &ulong_var2;\n        }\n        char_value = stab_demangle_args(param_array,byte_array_ptr,ulong_ptr,undefined_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array_ptr == 0x5f) {\n        *byte_array_ptr = *byte_array_ptr + 1;\n        char_value = improved_demangle_stab_0010c95e(param_array,byte_array_ptr,output_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_ptr == (long *)0x0) {\n          return 1;\n        }\n        if (byte_value != 0x4d) {\n          long_var2 = debug_make_offset_type_isra_0(char_ptr_array[0],*output_ptr);\n          *output_ptr = long_var2;\n          return 1;\n        }\n        long_var2 = debug_make_method_type_isra_0(*output_ptr,char_ptr_array[0],ulong_var2,undefined_var);\n        *output_ptr = long_var2;\n        return 1;\n      }\n      goto case60;\n    case 0x50:\n      goto case50;\n    case 0x51:\n      return_value = stab_demangle_qualified(param_array,byte_array_ptr,output_ptr);\n      return return_value;\n    case 0x52:\n      *byte_array_ptr = byte_ptr_3 + 1;\n      char_value = improved_demangle_stab_0010c95e(param_array,byte_array_ptr,output_ptr);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_ptr == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = debug_make_reference_type_isra_0(*output_ptr);\n      *output_ptr = long_var2;\n      return 1;\n    case 0x54:\n      *byte_array_ptr = byte_ptr_3 + 1;\n      char_value = stab_demangle_get_count(byte_array_ptr,&ulong_var2);\n      if (char_value != '\\0') {\n        if ((uint)ulong_var2 < *(uint *)(param_array + 5)) {\n          char_ptr_array[0] = *(char **)((ulong_var2 & 0xffffffff) * 0x10 + param_array[4]);\n          char_value = improved_demangle_stab_0010c95e(param_array,char_ptr_array,output_ptr);\n          if (char_value == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto case60;\n    }\n  }\n  if (byte_value == 0x70) {\ncase50:\n    *byte_array_ptr = byte_ptr_3 + 1;\n    char_value = improved_demangle_stab_0010c95e(param_array,byte_array_ptr,output_ptr);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (output_ptr == (long *)0x0) {\n      return 1;\n    }\n    long_var2 = debug_make_pointer_type_isra_0(*output_ptr);\n    *output_ptr = long_var2;\n    return 1;\n  }\ncase42:\n  is_volatile = false;\n  bool_var1 = false;\n  char_value = '\\0';\n  is_const = false;\n  do {\n    byte_ptr = *byte_array_ptr;\n    byte_value = *byte_ptr;\n    if (byte_value == 0x55) {\n      char_value = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_value) {\n      if (byte_value == 0x56) {\n        is_volatile = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_value) goto case60;\n      if ((char)byte_value < '_') goto LAB_0010cdfb;\n      switch(byte_value) {\n      case 0x5f:\n        goto case5f;\n      default:\n        goto case60;\n      case 0x62:\n        if (output_ptr == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array_ptr = byte_ptr + 1;\n          return 1;\n        }\n        long_var2 = debug_find_named_type(*param_array,&DAT_00120436);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_type_constprop_0(6,4);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned char\";\n        if ((char_value == '\\0') && (char_ptr2 = \"char\", bool_var1)) {\n          char_ptr2 = \"signed char\";\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(1,char_value);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = debug_find_named_type(*param_array,\"float\");\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_float_type_isra_0(4);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned int\";\n        char_ptr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long unsigned int\";\n        char_ptr = \"long int\";\nLAB_0010ced2:\n        if (char_value == '\\0') {\n          char_ptr2 = char_ptr;\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(4,char_value);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr2 = \"long double\";\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_float_type_isra_0(8);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"short unsigned int\";\n        if (char_value == '\\0') {\n          char_ptr2 = \"short int\";\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(2,char_value);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr = char_ptr_array;\n        if (output_ptr == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = stab_demangle_template(param_array,byte_array_ptr,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_ptr == (long *)0x0) {\n          return 1;\n        }\n        string_length = strlen(char_ptr_array[0]);\n        long_var2 = stab_find_tagged_type(*param_array,param_array[1],char_ptr_array[0],string_length & 0xffffffff,9);\n        *output_ptr = long_var2;\n        free(char_ptr_array[0]);\n        long_var2 = *output_ptr;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = debug_find_named_type(*param_array,&DAT_00120495);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_void_type_isra_0();\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = debug_find_named_type(*param_array,\"__wchar_t\");\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(2,1);\n          *output_ptr = long_var2;\n          *byte_array_ptr = *byte_array_ptr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output_ptr == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long long unsigned int\";\n        if (char_value == '\\0') {\n          char_ptr2 = \"long long int\";\n        }\n        long_var2 = debug_find_named_type(*param_array,char_ptr2);\n        *output_ptr = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_int_type_isra_0(8,char_value);\n          *output_ptr = long_var2;\n        }\n      }\n      *byte_array_ptr = *byte_array_ptr + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_value == 0x43) {\n      is_const = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_value != 0x53) goto LAB_0010cdc5;\n    bool_var1 = true;\nLAB_0010cd84:\n    *byte_array_ptr = byte_ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  byte_ptr2 = byte_ptr + 1;\n  *byte_array_ptr = byte_ptr2;\n  byte_value = *byte_ptr2;\n  if (byte_value == 0) goto case60;\n  if (byte_value == 0x5f) {\n    *byte_array_ptr = byte_ptr + 2;\n    char_value = improved_demangle_stab_0010c95e(param_array,byte_array_ptr,output_ptr);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (output_ptr == (long *)0x0) {\n      return 1;\n    }\n    type_value = debug_find_named_type(*param_array,\"int\");\n    if (type_value == 0) {\n      type_value = debug_make_int_type_isra_0(4,0);\n    }\n    long_var2 = debug_make_array_type_isra_0(*output_ptr,type_value,0,long_var2,0);\n    *output_ptr = long_var2;\n    return 1;\n  }\n  if (((&char_is_table)[(ulong)byte_value * 2] & 4) == 0) goto case60;\n  long_var2 = long_var2 * 10 + (long)((char)byte_value + -0x30);\n  byte_ptr = byte_ptr2;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_value < ':') {\n    if ((char)byte_value < '0') {\n      if (byte_value != 0) goto case60;\ncase5f:\n      stab_bad_demangle(byte_ptr_3);\n      if (output_ptr == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_value != 0x47) || (*byte_array_ptr = byte_ptr + 1, ((&char_is_table)[(ulong)byte_ptr[1] * 2] & 4) == 0)\n       ) goto case60;\n  }\n  byte_ptr_3 = *byte_array_ptr;\n  count = stab_demangle_count(byte_array_ptr);\n  byte_ptr = *byte_array_ptr;\n  string_length = strlen((char *)byte_ptr);\n  ulong_var = (ulong)count;\n  if (ulong_var <= string_length) {\n    *byte_array_ptr = byte_ptr + ulong_var;\n    if (output_ptr == (long *)0x0) {\n      return 1;\n    }\n    ptr = (void *)savestring(byte_ptr,ulong_var);\n    long_var2 = debug_find_named_type(*param_array,ptr);\n    *output_ptr = long_var2;\n    free(ptr);\n    if (*output_ptr == 0) {\n      long_var2 = stab_find_tagged_type(*param_array,param_array[1],byte_ptr,(int)*byte_array_ptr - (int)byte_ptr,0);\n      *output_ptr = long_var2;\njoined_r0x0010d1d8:\n      if (long_var2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_const) {\n      long_var2 = debug_make_const_type_isra_0(*output_ptr);\n      *output_ptr = long_var2;\n    }\n    if (is_volatile) {\n      long_var2 = debug_make_volatile_type_isra_0(*output_ptr);\n      *output_ptr = long_var2;\n    }\n    return 1;\n  }\ncase60:\n  stab_bad_demangle(byte_ptr_3);\n  return 0;\n}\n\n",
            "current_name": "improved_demangle_stab_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "improved_demangle_stab_0010c95e",
                "__ptr": "ptr",
                "_sch_istable": "char_is_table",
                "bVar1": "byte_value",
                "bVar2": "next_byte",
                "bVar4": "bool_var1",
                "bVar5": "is_const",
                "bVar6": "is_volatile",
                "cVar7": "char_value",
                "lVar10": "type_value",
                "lVar15": "long_var2",
                "local_40": "char_ptr_array",
                "local_48": "ulong_var2",
                "local_49": "undefined_var",
                "param_1": "param_array",
                "param_2": "byte_array_ptr",
                "param_3": "output_ptr",
                "pbVar20": "byte_ptr_3",
                "pbVar3": "byte_ptr",
                "pbVar9": "byte_ptr2",
                "pcVar12": "char_ptr",
                "pcVar18": "char_ptr_array",
                "pcVar19": "char_ptr2",
                "ppcVar18": "char_ptr_ptr",
                "puVar16": "ulong_ptr",
                "puVar17": "undefined_ptr",
                "sVar13": "string_length",
                "switchD_0010c9b2_caseD_42": "case42",
                "switchD_0010c9b2_caseD_50": "case50",
                "switchD_0010cdf9_caseD_5f": "case5f",
                "switchD_0010cdf9_caseD_60": "case60",
                "uVar11": "return_value",
                "uVar14": "ulong_var",
                "uVar8": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "&_sch_istable": {
                    "1": "character_table"
                },
                "FUN_0010d21c": {
                    "1": "improve_demangling"
                },
                "__haystack": {
                    "1": "str_haystack",
                    "23": "haystack",
                    "3": "haystack_str"
                },
                "__ptr": {
                    "1": "void_pointer",
                    "10": "ptr1",
                    "2": "pointer1",
                    "4": "ptr_var1",
                    "5": "ptr_var",
                    "6": "ptr"
                },
                "__ptr_00": {
                    "1": "ptr_00",
                    "11": "ptr2",
                    "2": "pointer2",
                    "3": "ptr00",
                    "7": "ptr_var2"
                },
                "abort": {
                    "1": "abort_program"
                },
                "bVar1": {
                    "1": "byte_var",
                    "10": "byte1",
                    "18": "byte_var1"
                },
                "bVar14": {
                    "1": "byte_4",
                    "12": "byte_var14",
                    "4": "byte14",
                    "5": "byte4",
                    "7": "byte_var4"
                },
                "bVar16": {
                    "1": "byte_var4",
                    "12": "byte_var16",
                    "4": "byte16",
                    "5": "byte5",
                    "7": "byte_var5"
                },
                "bVar17": {
                    "1": "byte_var_3",
                    "12": "byte_var17",
                    "4": "byte17",
                    "5": "byte6",
                    "7": "byte_var6"
                },
                "bVar18": {
                    "1": "byte_var6",
                    "12": "byte_var18",
                    "4": "byte18",
                    "5": "byte7",
                    "7": "byte_var7"
                },
                "bVar19": {
                    "1": "byte_var7",
                    "12": "byte_var19",
                    "4": "byte19",
                    "5": "byte8",
                    "7": "byte_var8"
                },
                "bVar3": {
                    "1": "byte_2",
                    "14": "byte_var3",
                    "4": "byte3",
                    "5": "byte2"
                },
                "bVar5": {
                    "1": "byte_3",
                    "12": "byte_var5",
                    "3": "byte_var2",
                    "4": "byte5",
                    "5": "byte3"
                },
                "cVar4": {
                    "1": "temporary_char",
                    "4": "char4",
                    "5": "char1",
                    "7": "char_var4",
                    "8": "char_var"
                },
                "concat": {
                    "1": "concatenate"
                },
                "cplus_demangle": {
                    "1": "demangle_c_plus"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar7": {
                    "1": "int_value",
                    "3": "int1",
                    "6": "int_var7",
                    "7": "int_var1",
                    "8": "int_var"
                },
                "local_3c": {
                    "1": "local_array3c",
                    "10": "local_array",
                    "2": "local_variables",
                    "3": "uint_array",
                    "4": "local_arr"
                },
                "param_1": {
                    "1": "input_1",
                    "17": "param1",
                    "2": "input1",
                    "3": "param_ptr",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "param_b",
                    "17": "param2",
                    "2": "input2",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "param_c",
                    "17": "param3",
                    "2": "arg3",
                    "3": "param_3"
                },
                "pbVar10": {
                    "1": "byte_ptr_var1",
                    "12": "byte_ptr2",
                    "3": "byte_pointer2",
                    "4": "byte_ptr_var10",
                    "5": "byte_ptr10"
                },
                "pbVar2": {
                    "1": "current_byte",
                    "2": "byte_pointer1",
                    "4": "byte_ptr_var",
                    "5": "byte_ptr2",
                    "6": "byte_ptr1",
                    "7": "byte_ptr"
                },
                "pcVar11": {
                    "1": "pc_var",
                    "2": "pointer_var1",
                    "3": "pc_var1",
                    "4": "ptr_var11"
                },
                "pcVar13": {
                    "1": "char_ptr2",
                    "2": "pointer_var2",
                    "3": "pc_var13",
                    "4": "var13"
                },
                "pcVar15": {
                    "1": "char_pointer4",
                    "2": "pointer_var3",
                    "3": "pc_var15",
                    "4": "ptr_var15"
                },
                "sVar9": {
                    "1": "size1",
                    "11": "size_var",
                    "6": "size_var9",
                    "8": "size"
                },
                "savestring": {
                    "1": "save_string"
                },
                "stab_bad_demangle": {
                    "1": "bad_demangle"
                },
                "stab_demangle_count": {
                    "1": "get_demangle_count"
                },
                "stab_demangle_get_count": {
                    "1": "get_demangle_get_count"
                },
                "stab_demangle_type_lto_priv_0": {
                    "1": "demangle_type_lto_private0"
                },
                "strstr": {
                    "1": "find_string"
                },
                "uVar12": {
                    "1": "uint_var3",
                    "2": "uint12",
                    "4": "u_var12",
                    "7": "result2"
                },
                "uVar20": {
                    "1": "temp_count_2",
                    "10": "uint_var2",
                    "2": "counter",
                    "3": "count"
                },
                "uVar21": {
                    "1": "ulong_count",
                    "13": "ulong_var",
                    "3": "ulong21",
                    "6": "ulong_var21"
                },
                "uVar6": {
                    "1": "uint_var6",
                    "21": "result",
                    "3": "return_val"
                },
                "uVar8": {
                    "1": "temp_count",
                    "3": "uint1",
                    "5": "uint_var8",
                    "6": "uint_var1",
                    "7": "uint_var"
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_0010c95e",
                "FUN_001048f0",
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_001048c0",
                "FUN_00108e76",
                "FUN_00104320",
                "FUN_00108ea1",
                "FUN_001046b0",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\nundefined4 improve_demangling_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byte_var1;\n  byte *byte_ptr;\n  byte byte_var3;\n  char char_var;\n  byte byte_var5;\n  undefined4 result;\n  int int_var;\n  uint uint_var;\n  size_t size_var;\n  byte *byte_ptr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *ptr_var11;\n  undefined8 result2;\n  char *pc_var2;\n  byte byte_var14;\n  char *pc_var3;\n  byte byte_var16;\n  byte byte_var17;\n  byte byte_var18;\n  byte byte_var19;\n  uint uint_var2;\n  ulong ulong_var;\n  uint local_array [3];\n  \n  byte_ptr = *param2;\n  *param2 = byte_ptr + 1;\n  local_array[0] = get_demangle_count(param2);\n  ulong_var = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    byte_ptr2 = *param2;\n    size_var = strlen((char *)byte_ptr2);\n    if (ulong_var <= size_var) {\n      *param2 = byte_ptr2 + ulong_var;\n      uint_var2 = 0;\n      result = get_demangle_get_count(param2,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= uint_var2) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)save_string(byte_ptr,(int)*param2 - (int)byte_ptr);\n          ptr2 = (void *)concatenate(\"NoSuchStrinG__\",ptr1,0);\n          free_memory(ptr1);\n          haystack = (char *)demangle_c_plus(ptr2,2);\n          free_memory(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (ptr_var11 = find_string(haystack,\"::NoSuchStrinG\"), pc_var2 = haystack,\n             pc_var3 = haystack, ptr_var11 != (char *)0x0)) {\n            for (; pc_var2 != ptr_var11; pc_var2 = pc_var2 + 1) {\n              if ((*pc_var2 != ' ') ||\n                 (((pc_var2[1] == '>' && (haystack < pc_var2)) && (pc_var2[-1] == '>')))) {\n                *pc_var3 = *pc_var2;\n                pc_var3 = pc_var3 + 1;\n              }\n            }\n            result2 = save_string(haystack,(int)pc_var3 - (int)haystack);\n            *param3 = result2;\n            free_memory(haystack);\n            return result;\n          }\n          bad_demangle(byte_ptr);\n          free_memory(haystack);\n          return 0;\n        }\n        byte_ptr2 = *param2;\n        if (*byte_ptr2 != 0x5a) {\n          byte_var5 = demangle_type_lto_private0(param1,param2,0);\n          if (byte_var5 == 0) {\n            return 0;\n          }\n          byte_var3 = 0;\n          byte_var14 = 0;\n          byte_var18 = 0;\n          byte_var17 = 0;\n          byte_var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_var16 = byte_var3;\n              byte_var1 = *byte_ptr2;\n              if ((byte_var14 | byte_var1 == 0) != 0) {\n                byte_var5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_var3 = byte_var5;\n              byte_var14 = byte_var5;\n            } while ('v' < (char)byte_var1);\n            if ((char)byte_var1 < 'b') {\n              if ((char)byte_var1 < 'U') {\n                if ((char)byte_var1 < 'C') goto LAB_0010d2e9;\n                ulong_var = 1L << (byte_var1 + 0xbd & 0x3f);\n                if ((ulong_var & 0x11409) == 0) {\n                  if ((ulong_var & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_var1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_var1 + 0xab)) goto LAB_0010d2e9;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var3 = byte_var16;\n              byte_var14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_var1) {\n            case 0x62:\n              byte_var3 = byte_var16;\n              byte_var18 = byte_var5;\n              break;\n            case 99:\n              byte_var3 = byte_var16;\n              byte_var19 = byte_var5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_var3 = byte_var16;\n              byte_var17 = byte_var5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort_program();\n            }\n          } while( true );\n        }\n        *param2 = byte_ptr2 + 1;\n        char_var = demangle_type_lto_private0(param1,param2,0);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  bad_demangle(byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_var16 == 0) {\n    if (byte_var19 == 0) {\n      if (byte_var18 == 0) {\n        if (byte_var17 == 0) {\n          if (byte_var5 != 0) {\n            uint_var = get_demangle_count(param2);\n            if (uint_var == 0) goto LAB_0010d280;\n            *param2 = *param2 + uint_var;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            byte_ptr2 = *param2;\n            if (((character_table)[(ulong)*byte_ptr2 * 2] & 4) == 0) break;\n            *param2 = byte_ptr2 + 1;\n          }\n          if (*byte_ptr2 == 0x2e) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((character_table)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n          byte_ptr2 = *param2;\n          if (*byte_ptr2 == 0x65) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((character_table)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_var = get_demangle_count(param2);\n        if (1 < uint_var) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      int_var = get_demangle_count(param2);\n      if (int_var == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((character_table)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uint_var2 = uint_var2 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "improve_demangling_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "&_sch_istable": "character_table",
                "FUN_0010d21c": "improve_demangling_0010d21c",
                "__haystack": "haystack",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "abort": "abort_program",
                "bVar1": "byte_var1",
                "bVar14": "byte_var14",
                "bVar16": "byte_var16",
                "bVar17": "byte_var17",
                "bVar18": "byte_var18",
                "bVar19": "byte_var19",
                "bVar3": "byte_var3",
                "bVar5": "byte_var5",
                "cVar4": "char_var",
                "concat": "concatenate",
                "cplus_demangle": "demangle_c_plus",
                "free": "free_memory",
                "iVar7": "int_var",
                "local_3c": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar10": "byte_ptr2",
                "pbVar2": "byte_ptr",
                "pcVar11": "ptr_var11",
                "pcVar13": "pc_var2",
                "pcVar15": "pc_var3",
                "sVar9": "size_var",
                "savestring": "save_string",
                "stab_bad_demangle": "bad_demangle",
                "stab_demangle_count": "get_demangle_count",
                "stab_demangle_get_count": "get_demangle_get_count",
                "stab_demangle_type_lto_priv_0": "demangle_type_lto_private0",
                "strstr": "find_string",
                "uVar12": "result2",
                "uVar20": "uint_var2",
                "uVar21": "ulong_var",
                "uVar6": "result",
                "uVar8": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "FUN_0010d559": {
                    "1": "parse_identifier"
                },
                "__nptr": {
                    "1": "nptr_var",
                    "2": "byte_ptr_2",
                    "4": "byte_ptr_3"
                },
                "__ptr": {
                    "1": "temp_void_ptr",
                    "18": "void_ptr",
                    "3": "temp_void_pointer",
                    "7": "void_pointer"
                },
                "__s1": {
                    "1": "char_ptr2",
                    "2": "string1",
                    "4": "char_ptr"
                },
                "bVar1": {
                    "1": "second_char",
                    "3": "byte_val",
                    "5": "first_byte",
                    "7": "byte_var"
                },
                "cVar3": {
                    "1": "char_var_3",
                    "10": "char_var",
                    "2": "temp_char",
                    "3": "char_val",
                    "9": "char_value"
                },
                "debug_find_named_type": {
                    "1": "find_named_type"
                },
                "debug_get_fields_isra_0": {
                    "1": "get_fields"
                },
                "debug_get_type_name_constprop_0": {
                    "1": "get_type_name"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar5": {
                    "1": "compare_result",
                    "10": "int_var",
                    "2": "integer_variable",
                    "3": "int_val",
                    "4": "comparison_result",
                    "7": "int_value"
                },
                "lVar8": {
                    "1": "long_var_8",
                    "10": "long_var",
                    "2": "result",
                    "3": "long_val",
                    "7": "long_value"
                },
                "local_40": {
                    "1": "char_array_2",
                    "2": "char_array",
                    "3": "local_string_array",
                    "5": "local_array"
                },
                "local_64": {
                    "1": "int_local",
                    "2": "counter",
                    "4": "loop_counter"
                },
                "param_1": {
                    "1": "param_1_ptr",
                    "15": "input_array",
                    "2": "array_ptr",
                    "9": "param_array"
                },
                "param_2": {
                    "1": "byte_arr_ptr",
                    "2": "input_byte_array",
                    "3": "input_byte_ptr",
                    "4": "byte_array_ptr",
                    "8": "byte_array"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "output_array",
                    "3": "output_long_ptr"
                },
                "pbVar11": {
                    "1": "new_ptr_to_string",
                    "2": "byte_ptr_11",
                    "3": "updated_byte_pointer",
                    "4": "byte_ptr_2"
                },
                "pbVar2": {
                    "1": "current_char",
                    "14": "byte_ptr",
                    "4": "current_byte",
                    "6": "byte_pointer"
                },
                "pcVar10": {
                    "1": "char_pointer_variable",
                    "14": "char_ptr",
                    "2": "temp_char_pointer",
                    "4": "char_pointer"
                },
                "plVar9": {
                    "1": "temp_long_array",
                    "14": "long_ptr",
                    "2": "temp_long_pointer",
                    "6": "long_pointer"
                },
                "ppcVar6": {
                    "1": "char_double_pointer",
                    "12": "char_ptr_ptr",
                    "2": "string_ptr_ptr"
                },
                "sVar7": {
                    "1": "size_var_7",
                    "2": "size_variable",
                    "3": "size_value",
                    "4": "size",
                    "7": "size_var",
                    "9": "string_length"
                },
                "stab_bad_demangle": {
                    "1": "bad_demangle"
                },
                "stab_demangle_count": {
                    "1": "count_demangler"
                },
                "stab_demangle_template": {
                    "1": "template_demangler"
                },
                "stab_find_tagged_type": {
                    "1": "find_tagged_type"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "type_result: , : field_result: , : string_length: ,\n: plVar9": {
                    "1": "type_field_ptr"
                },
                "uVar12": {
                    "1": "flag_value",
                    "2": "uint_var_12",
                    "4": "undefined8_var"
                },
                "uVar4": {
                    "1": "uint_var_4",
                    "10": "uint_var",
                    "2": "demangle_count",
                    "3": "uint_val",
                    "5": "uint_value"
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010911f",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_0010d21c",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 parse_identifier_0010d559(undefined8 *input_array,byte **byte_array,long *output_long_ptr)\n\n{\n  byte byte_value;\n  byte *byte_ptr;\n  char char_var;\n  uint uint_var;\n  int int_var;\n  char **char_ptr_ptr;\n  size_t string_length;\n  long long_var;\n  long *long_ptr;\n  char *char_ptr;\n  char *char_ptr;\n  void *void_ptr;\n  byte *byte_ptr_2;\n  undefined8 undefined8_var;\n  byte *byte_ptr_3;\n  int loop_counter;\n  char *local_array [2];\n  \n  byte_ptr = *byte_array;\n  byte_value = byte_ptr[1];\n  if ((char)byte_value < ':') {\n    if ((char)byte_value < '1') goto LAB_0010d5d8;\n    loop_counter = (char)byte_value + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *byte_array = byte_ptr + 1;\n    }\n    byte_ptr_2 = *byte_array + 2;\n  }\n  else {\n    if (((byte_value != 0x5f) || (((&_sch_istable)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr_3 = byte_ptr + 2;\n    long_var = strtol((char *)byte_ptr_3,(char **)0x0,10);\n    loop_counter = (int)long_var;\n    while (((&_sch_istable)[(ulong)*byte_ptr_3 * 2] & 4) != 0) {\n      byte_ptr_3 = byte_ptr_3 + 1;\n    }\n    byte_ptr_2 = byte_ptr_3 + 1;\n    if (*byte_ptr_3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_array = byte_ptr_2;\n  char_ptr_ptr = (char **)0x0;\n  if (output_long_ptr != (long *)0x0) {\n    char_ptr_ptr = local_array;\n  }\n  long_var = 0;\n  while( true ) {\n    while( true ) {\n      loop_counter = loop_counter + -1;\n      if (loop_counter == -1) {\n        if (output_long_ptr != (long *)0x0) {\n          *output_long_ptr = long_var;\n        }\n        return 1;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n      }\n      if (**byte_array != 0x74) break;\n      char_var = template_demangler(input_array,byte_array,char_ptr_ptr);\n      char_ptr = local_array[0];\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (output_long_ptr != (long *)0x0) {\n        string_length = strlen(local_array[0]);\n        long_var = find_tagged_type(*input_array,input_array[1],char_ptr,string_length & 0xffffffff,9);\n        deallocate_memory(char_ptr);\n        if (long_var == 0) {\n          return 0;\n        }\n      }\n    }\n    uint_var = count_demangler(byte_array);\n    string_length = strlen((char *)*byte_array);\n    if (string_length < uint_var) break;\n    if (output_long_ptr != (long *)0x0) {\n      if ((long_var != 0) && (long_ptr = (long *)get_fields(long_var), long_ptr != (long *)0x0))\n      {\n        char_ptr = (char *)savestring(*byte_array,uint_var);\n        for (; long_var = *long_ptr, long_var != 0; long_ptr = long_ptr + 1) {\n          long_var = *(long *)(long_var + 8);\n          if (long_var == 0) {\n            deallocate_memory(char_ptr);\n            return 0;\n          }\n          char_ptr = (char *)get_type_name(long_var);\n          if ((char_ptr != (char *)0x0) && (int_var = compare_strings(char_ptr,char_ptr), int_var == 0)) break;\n        }\n        deallocate_memory(char_ptr);\n        if (long_var != 0) goto LAB_0010d7ad;\n      }\n      undefined8_var = 9;\n      if (loop_counter == 0) {\n        void_ptr = (void *)savestring(*byte_array,uint_var);\n        long_var = find_named_type(*input_array,void_ptr);\n        deallocate_memory(void_ptr);\n        if (long_var != 0) goto LAB_0010d7ad;\n        undefined8_var = 0;\n      }\n      long_var = find_tagged_type(*input_array,input_array[1],*byte_array,uint_var,undefined8_var);\n      if (long_var == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_array = *byte_array + uint_var;\n  }\nLAB_0010d5d8:\n  bad_demangle(byte_ptr);\n  return 0;\n}\n\n",
            "current_name": "parse_identifier_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "parse_identifier_0010d559",
                "__nptr": "byte_ptr_3",
                "__ptr": "void_ptr",
                "__s1": "char_ptr",
                "bVar1": "byte_value",
                "cVar3": "char_var",
                "debug_find_named_type": "find_named_type",
                "debug_get_fields_isra_0": "get_fields",
                "debug_get_type_name_constprop_0": "get_type_name",
                "free": "deallocate_memory",
                "iVar5": "int_var",
                "lVar8": "long_var",
                "local_40": "local_array",
                "local_64": "loop_counter",
                "param_1": "input_array",
                "param_2": "byte_array",
                "param_3": "output_long_ptr",
                "pbVar11": "byte_ptr_2",
                "pbVar2": "byte_ptr",
                "pcVar10": "char_ptr",
                "plVar9": "long_ptr",
                "ppcVar6": "char_ptr_ptr",
                "sVar7": "string_length",
                "stab_bad_demangle": "bad_demangle",
                "stab_demangle_count": "count_demangler",
                "stab_demangle_template": "template_demangler",
                "stab_find_tagged_type": "find_tagged_type",
                "strcmp": "compare_strings",
                "uVar12": "undefined8_var",
                "uVar4": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "FUN_00109be3": {
                    "1": "demangle_remember_type"
                },
                "FUN_0010c95e": {
                    "1": "demangle_type_lto_priv"
                },
                "FUN_0010d7d4": {
                    "1": "process_type_information",
                    "11": "demangle_and_remember_type",
                    "2": "process_type"
                },
                "cVar2": {
                    "1": "is_demangle_successful",
                    "18": "result",
                    "2": "type_demangle_result"
                },
                "lVar4": {
                    "1": "old_types",
                    "2": "temp_variable",
                    "3": "temp"
                },
                "local_40": {
                    "1": "buffer",
                    "3": "temp_array",
                    "8": "local_array"
                },
                "param_1": {
                    "1": "arg1",
                    "2": "input1",
                    "4": "param_1",
                    "6": "input_param"
                },
                "param_2": {
                    "1": "input_param2",
                    "2": "input2",
                    "3": "param_2"
                },
                "param_3": {
                    "1": "result_ptr",
                    "2": "output_buffer",
                    "3": "output_array",
                    "5": "type_array"
                },
                "param_4": {
                    "1": "type_count_ptr",
                    "2": "param_4",
                    "3": "counter",
                    "5": "count_ptr"
                },
                "param_5": {
                    "1": "counter_2",
                    "2": "param_5",
                    "4": "capacity_ptr"
                },
                "plVar5": {
                    "1": "new_types",
                    "2": "local_memory",
                    "3": "temp_ptr",
                    "4": "temp_array"
                },
                "stab_demangle_remember_type": {
                    "1": "demangle_remember_type",
                    "2": "remember_type"
                },
                "stab_demangle_type_lto_priv_0": {
                    "1": "demangle_type",
                    "2": "demangle_type_lto_private"
                },
                "uVar1": {
                    "1": "previous_value",
                    "2": "input_value",
                    "3": "first_input",
                    "4": "value1"
                },
                "uVar3": {
                    "1": "return_val",
                    "10": "remembered_type",
                    "2": "status",
                    "4": "result",
                    "9": "return_value"
                },
                "uVar6": {
                    "1": "current_uint_value",
                    "2": "temp_count",
                    "5": "count"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00109be3",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 input_param,undefined8 *param_2,long *type_array,uint *count_ptr,uint *capacity_ptr)\n\n{\n  undefined8 value1;\n  char result;\n  undefined4 remembered_type;\n  long temp_value;\n  long *temp_array;\n  uint count;\n  long local_array [2];\n  \n  value1 = *param_2;\n  temp_array = local_array;\n  if (type_array == (long *)0x0) {\n    temp_array = (long *)0x0;\n  }\n  result = demangle_type_lto_private(input_param,param_2,temp_array);\n  if ((result != '\\0') &&\n     (remembered_type = remember_type(input_param,value1,(int)*param_2 - (int)value1),\n     (char)remembered_type != '\\0')) {\n    if (type_array == (long *)0x0) {\n      return remembered_type;\n    }\n    if (local_array[0] != 0) {\n      if (*capacity_ptr <= *count_ptr + 1) {\n        count = *capacity_ptr + 10;\n        temp_value = *type_array;\n        *capacity_ptr = count;\n        temp_value = realloc_memory(temp_value,(ulong)count << 3);\n        *type_array = temp_value;\n      }\n      count = *count_ptr;\n      *(long *)(*type_array + (ulong)count * 8) = local_array[0];\n      *count_ptr = count + 1;\n      return remembered_type;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "demangle_and_remember_type_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "cVar2": "result",
                "lVar4": "temp_value",
                "local_40": "local_array",
                "param_1": "input_param",
                "param_3": "type_array",
                "param_4": "count_ptr",
                "param_5": "capacity_ptr",
                "plVar5": "temp_array",
                "stab_demangle_remember_type": "remember_type",
                "stab_demangle_type_lto_priv_0": "demangle_type_lto_private",
                "uVar1": "value1",
                "uVar3": "remembered_type",
                "uVar6": "count",
                "xrealloc": "realloc_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "FUN_0010d882": {
                    "1": "decode_stab_entry",
                    "2": "demangle_function"
                },
                "LAB_0010d958": {
                    "1": "error_label"
                },
                "bVar7": {
                    "1": "is_remaining_args",
                    "2": "condition",
                    "4": "is_not_zero",
                    "7": "loop_condition"
                },
                "cVar3": {
                    "1": "current_char_value",
                    "18": "current_char",
                    "3": "current"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "2": "counter",
                    "7": "count"
                },
                "lVar4": {
                    "1": "temp_var",
                    "18": "allocated_memory",
                    "3": "memory_allocation"
                },
                "local_40": {
                    "1": "arg",
                    "2": "args",
                    "4": "arg_array",
                    "5": "temp_array"
                },
                "local_44": {
                    "1": "count_value_temp2",
                    "2": "outer_loop_count",
                    "4": "loop_counter"
                },
                "local_48": {
                    "1": "local_var",
                    "2": "index",
                    "3": "arg_count",
                    "4": "count"
                },
                "local_4c": {
                    "1": "status_code",
                    "2": "constant_10"
                },
                "local_50": {
                    "1": "counter",
                    "4": "arg_count",
                    "6": "index",
                    "7": "arg_index"
                },
                "param_1": {
                    "1": "input1",
                    "2": "param_1",
                    "3": "input_value",
                    "4": "param_ptr"
                },
                "param_1+param_2[32]": {
                    "1": "function_table"
                },
                "param_1+param_2[3]*16": {
                    "1": "parameter"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param_list",
                    "3": "string_array"
                },
                "param_3": {
                    "1": "arg_lengths",
                    "2": "output_pointer",
                    "3": "output_array",
                    "4": "output",
                    "6": "output_ptr"
                },
                "param_4": {
                    "1": "is_empty",
                    "2": "param_4",
                    "4": "is_end",
                    "7": "flag_ptr",
                    "8": "flag"
                },
                "param_5": {
                    "1": "counter",
                    "2": "counter_ptr",
                    "4": "count_ptr",
                    "6": "count"
                },
                "pcVar2": {
                    "1": "curr_char",
                    "13": "current_char",
                    "2": "current_symbol",
                    "4": "current_string"
                },
                "pcVar5": {
                    "1": "temp_symbol",
                    "2": "current_char_2",
                    "3": "current_string",
                    "4": "current_arg",
                    "5": "current_char"
                },
                "uVar6": {
                    "1": "local_ulong",
                    "2": "current_count",
                    "4": "symbol_index",
                    "5": "count",
                    "6": "index"
                }
            },
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "FUN_0010911f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 demangle_stab_0010d882(long param_ptr,char **string_array,long *output_ptr,undefined *flag)\n\n{\n  int count;\n  char *current_char;\n  char current_char;\n  long allocated_memory;\n  char *current_char;\n  ulong index;\n  bool loop_condition;\n  uint arg_index;\n  undefined4 base;\n  uint count;\n  int loop_count;\n  undefined8 temp_array [2];\n  \n  current_char = *string_array;\n  base = 10;\n  if (output_ptr != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_ptr = allocated_memory;\n    *flag = 0;\n  }\n  arg_index = 0;\n  while( true ) {\n    current_char = *string_array;\n    current_char = *current_char;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *string_array = current_char + 1;\n      if (current_char == 'T') {\n        loop_count = 1;\n      }\n      else {\n        current_char = stab_demangle_get_count(string_array,&loop_count);\n        if (current_char == '\\0') goto error_label;\n      }\n      current_char = stab_demangle_get_count(string_array,&count);\n      if ((current_char == '\\0') || (*(uint *)(param_ptr + 0x28) <= count)) {\nerror_label:\n        stab_bad_demangle(current_char);\n        return 0;\n      }\n      index = (ulong)count;\n      while (count = loop_count + -1, loop_condition = loop_count != 0, loop_count = count, loop_condition) {\n        temp_array[0] = *(undefined8 *)(*(long *)(param_ptr + 0x20) + index * 0x10);\n        current_char = stab_demangle_arg(param_ptr,temp_array,output_ptr,&arg_index,&base);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = stab_demangle_arg(param_ptr,string_array,output_ptr,&arg_index,&base);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_ptr == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_ptr + (ulong)arg_index * 8) = 0;\n    if (*current_char != 'e') goto LAB_0010d9fa;\n    *flag = 1;\n  }\n  current_char = current_char + 1;\n  *string_array = current_char;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_char >> 8),1);\n}\n\n",
            "current_name": "demangle_stab_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d882": "demangle_stab_0010d882",
                "LAB_0010d958": "error_label",
                "bVar7": "loop_condition",
                "cVar3": "current_char",
                "iVar1": "count",
                "lVar4": "allocated_memory",
                "local_40": "temp_array",
                "local_44": "loop_count",
                "local_48": "count",
                "local_4c": "base",
                "local_50": "arg_index",
                "param_1": "param_ptr",
                "param_2": "string_array",
                "param_3": "output_ptr",
                "param_4": "flag",
                "pcVar2": "current_char",
                "pcVar5": "current_char",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "<auVar7>": {
                    "1": "<allocated_block>"
                },
                "<bVar6>": {
                    "1": "<is_initialized>"
                },
                "<lVar3>": {
                    "1": "<adjusted_size>"
                },
                "<lVar4>": {
                    "1": "<loop_counter>"
                },
                "<param_1>": {
                    "1": "<block_pointer_ptr>"
                },
                "<param_2>": {
                    "1": "<block_size>"
                },
                "<param_3>": {
                    "1": "<param_3>"
                },
                "<param_4>": {
                    "1": "<param_4>"
                },
                "<plVar2>": {
                    "1": "<new_block>"
                },
                "<uVar1>": {
                    "1": "<error_message>"
                },
                "<uVar5>": {
                    "1": "<remaining_size>"
                },
                "FUN_0010da0b": {
                    "1": "allocate_and_initialize_array",
                    "2": "allocate_and_initialize",
                    "3": "allocate_and_initialize_memory",
                    "4": "allocate_slot",
                    "5": "allocate_and_initialize_slot",
                    "6": "allocate_and_initialize_slots"
                },
                "auVar7": {
                    "1": "new_address",
                    "21": "result",
                    "5": "return_value"
                },
                "bVar6": {
                    "1": "zero_byte",
                    "2": "temp",
                    "4": "counter",
                    "7": "flag"
                },
                "lVar3": {
                    "1": "index",
                    "11": "offset",
                    "2": "loop_counter_1",
                    "3": "remaining_slots",
                    "5": "slot_offset"
                },
                "lVar4": {
                    "1": "loop_index",
                    "2": "loop_count",
                    "3": "loop_counter_2",
                    "5": "counter",
                    "9": "loop_counter"
                },
                "param_1": {
                    "1": "memory_block_ptr",
                    "2": "pointer_to_pointer",
                    "4": "slot_list",
                    "7": "slot_ptr"
                },
                "param_2": {
                    "1": "num_slots",
                    "2": "index",
                    "26": "slot_index"
                },
                "param_3": {
                    "1": "unused_param_3",
                    "13": "param_3",
                    "2": "unknown_param_1",
                    "3": "arg3"
                },
                "param_4": {
                    "1": "var4",
                    "12": "param_4",
                    "2": "unused_param_2",
                    "3": "arg4"
                },
                "plVar2": {
                    "1": "slot_ptr_new",
                    "11": "new_slot",
                    "3": "allocated_slot",
                    "4": "allocated_memory"
                },
                "uVar1": {
                    "1": "error",
                    "22": "error_message",
                    "3": "error_msg"
                },
                "uVar5": {
                    "1": "index",
                    "14": "remaining_slots",
                    "2": "temp",
                    "3": "temp_var"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_ptr,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_ptr = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_ptr = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_ptr + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slots_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "auVar7": "result",
                "bVar6": "flag",
                "lVar3": "offset",
                "lVar4": "loop_counter",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "FUF_0010dac0": {
                    "1": "improve_coff_type"
                },
                "FUN_0010dac0": {
                    "1": "parse_debug_type",
                    "16": "parse_coff_type",
                    "4": "parse_type"
                },
                "FUN_0010dac0_param_1": {
                    "1": "file_info"
                },
                "FUN_0010dac0_param_2": {
                    "1": "symbol_table"
                },
                "FUN_0010dac0_param_3": {
                    "1": "param_3"
                },
                "FUN_0010dac0_param_4": {
                    "1": "param_4"
                },
                "FUN_0010dac0_param_5": {
                    "1": "param_5"
                },
                "FUN_0010dac0_param_6": {
                    "1": "param_6"
                },
                "FUN_0010dac0_param_7": {
                    "1": "param_7"
                },
                "FUN_0010dac0_param_8": {
                    "1": "param_8"
                },
                "FUN_0010dac0_return": {
                    "1": "type_id"
                },
                "FUN_0010e07c": {
                    "1": "parse_coff_struct_type"
                },
                "__ptr": {
                    "1": "pointer_data",
                    "2": "enum_values",
                    "7": "ptr1"
                },
                "__ptr_00": {
                    "1": "pointer2",
                    "2": "enum_values",
                    "7": "ptr2"
                },
                "allocate_and_initialize_slots_0010da0b": {
                    "2": "allocate_and_initialize_slots"
                },
                "bVar8": {
                    "1": "type_code",
                    "2": "type_shift",
                    "4": "byte_var",
                    "5": "byte_value"
                },
                "cVar2": {
                    "1": "char_val",
                    "2": "temp_var2",
                    "3": "var2",
                    "4": "result"
                },
                "create_data_structure_00113c43": {
                    "2": "create_data_structure"
                },
                "create_debug_type_00113d6e": {
                    "2": "create_debug_type"
                },
                "create_debug_type_00113e23": {
                    "2": "create_debug_type"
                },
                "get_pointer_value_00113d3a": {
                    "2": "get_pointer_value"
                },
                "iVar9": {
                    "1": "iteration",
                    "2": "loop_index",
                    "3": "int_var",
                    "5": "index",
                    "7": "loop_counter"
                },
                "initialize_data_structure_00113da9": {
                    "2": "initialize_data_structure"
                },
                "initialize_debug_type_00113df2": {
                    "2": "initialize_debug_type"
                },
                "initialize_debug_type_00113e17": {
                    "2": "initialize_debug_type"
                },
                "lVar1": {
                    "1": "coff_symbol",
                    "2": "symbol_entry",
                    "3": "var1",
                    "4": "value",
                    "6": "result"
                },
                "lVar12": {
                    "1": "temp_var12",
                    "2": "counter",
                    "3": "loop_var",
                    "5": "index"
                },
                "lVar5": {
                    "1": "result_var_5",
                    "2": "type_result",
                    "3": "var5",
                    "4": "type",
                    "5": "result"
                },
                "lVar6": {
                    "1": "temp_var7"
                },
                "local_47": {
                    "1": "enum_type_flag",
                    "2": "local_var_2",
                    "3": "byte_value",
                    "8": "local_byte"
                },
                "local_48": {
                    "1": "last_type",
                    "2": "local_var_1",
                    "8": "local_char"
                },
                "local_68": {
                    "1": "local_arr_1",
                    "11": "local_buffer",
                    "2": "buffer",
                    "3": "local_array_1"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "input1",
                    "22": "file_info"
                },
                "param_2": {
                    "1": "input2",
                    "27": "symbol_table"
                },
                "param_3": {
                    "1": "debug_type",
                    "2": "debug_info",
                    "3": "file_info",
                    "4": "name_type",
                    "6": "type_info"
                },
                "param_4": {
                    "1": "param_3",
                    "2": "type",
                    "3": "name_type",
                    "4": "param4",
                    "9": "param_4"
                },
                "param_5": {
                    "1": "input_5",
                    "23": "type_code"
                },
                "param_6": {
                    "1": "type_details",
                    "2": "input_param_6",
                    "4": "enum_info",
                    "5": "enum_values"
                },
                "param_7": {
                    "1": "is_struct_union",
                    "2": "param7",
                    "4": "param_7",
                    "6": "is_unsigned"
                },
                "param_8": {
                    "1": "debug_type",
                    "2": "input_param_8",
                    "3": "debug_info",
                    "6": "type_name"
                },
                "parse_coff_type_0010e07c": {
                    "1": "parse_coff_type"
                },
                "pcVar10": {
                    "1": "temp_var10",
                    "2": "type_name_str",
                    "3": "type_string",
                    "9": "type_name"
                },
                "plVar7": {
                    "1": "temp_var7",
                    "12": "slot_ptr",
                    "2": "slot",
                    "3": "var7"
                },
                "process_debug_name_type_0010c218": {
                    "2": "process_debug_name_type"
                },
                "report_data_00119ed0": {
                    "2": "report_data"
                },
                "tempVar8": {
                    "1": "temp_var8"
                },
                "tempVar9": {
                    "1": "temp_var9"
                },
                "uVar11": {
                    "1": "var_11",
                    "2": "mask",
                    "3": "ulong_var",
                    "6": "bit_mask"
                },
                "uVar13": {
                    "1": "modified_code",
                    "2": "temp1",
                    "4": "var13"
                },
                "uVar14": {
                    "1": "uint_var_2",
                    "2": "array_size",
                    "4": "var14"
                },
                "uVar15": {
                    "1": "alignment",
                    "2": "temp3",
                    "4": "var15"
                },
                "uVar3": {
                    "1": "temp_var_3",
                    "16": "error_code",
                    "2": "error_val",
                    "3": "var3"
                },
                "uVar4": {
                    "1": "output_var",
                    "2": "temp_var4",
                    "3": "var4",
                    "4": "result",
                    "5": "error_msg",
                    "7": "error_message"
                },
                "uVar5": {
                    "1": "temp_var6"
                },
                "uVar6": {
                    "1": "temp_var6",
                    "2": "debug_type",
                    "3": "var6"
                },
                "update_memory_value_00113dfe": {
                    "2": "update_memory_value"
                }
            },
            "called": [
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_0010da0b",
                "FUN_00113df2",
                "FUN_00104370",
                "FUN_0010c218",
                "FUN_001046a0",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_001048f0",
                "FUN_00104240",
                "FUN_0010e07c",
                "FUN_001047a0",
                "FUN_00113d6e",
                "FUN_00113e23",
                "FUN_001042b0",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nlong parse_coff_type_0010dac0(long file_info,long *symbol_table,long type_info,undefined8 param_4,uint type_code,\n                 long *enum_values,char is_unsigned,undefined8 type_name)\n\n{\n  long result;\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  long result;\n  undefined8 var6;\n  long *slot_ptr;\n  void *ptr1;\n  void *ptr2;\n  byte byte_value;\n  int loop_counter;\n  char *type_name;\n  ulong bit_mask;\n  long index;\n  uint var13;\n  uint var14;\n  undefined8 var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(file_info + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    var13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    bit_mask = (ulong)(type_code & *(uint *)(result + 0x40));\n    byte_value = (byte)*(undefined4 *)(result + 0x3c);\n    var13 = (var13 ^ type_code) & *(uint *)(result + 0x38) ^ var13;\n    if (bit_mask == 1L << (byte_value & 0x3f)) {\n      error_message = parse_coff_type_0010dac0(file_info,symbol_table,type_info,param_4,var13,enum_values,is_unsigned,type_name);\n      result = debug_make_pointer_type_isra_0(error_message);\n      return result;\n    }\n    if (bit_mask != 2L << (byte_value & 0x3f)) {\n      if (bit_mask != 3L << (byte_value & 0x3f)) {\n        error_message = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          var13);\n        non_fatal(error_message,type_code);\n        return 0;\n      }\n      var14 = 0;\n      if (enum_values != (long *)0x0) {\n        var14 = (uint)*(ushort *)(enum_values + 2);\n        slot_ptr = enum_values + 2;\n        for (loop_counter = 0; (*(short *)slot_ptr != 0 && (loop_counter != 3)); loop_counter = loop_counter + 1) {\n          *(short *)slot_ptr = *(short *)((long)slot_ptr + 2);\n          slot_ptr = (long *)((long)slot_ptr + 2);\n        }\n        *(short *)slot_ptr = 0;\n      }\n      var15 = 0;\n      error_message = type_name;\n      var6 = parse_coff_type_0010dac0(file_info,symbol_table,type_info,param_4,var13,enum_values,0);\n      result = *(long *)(type_info + 0x28);\n      if (result == 0) {\n        error_message = debug_make_int_type_isra_0(4,0,var15,error_message);\n        result = debug_name_type(type_name,\"int\",error_message);\n        *(long *)(type_info + 0x28) = result;\n      }\n      result = debug_make_array_type_isra_0(var6,result,0,(long)(int)(var14 - 1),0);\n      return result;\n    }\n    error_message = parse_coff_type_0010dac0(file_info,symbol_table,type_info,param_4,var13,enum_values,is_unsigned,type_name);\n    result = debug_make_function_type_isra_0(error_message,0,0);\n    return result;\n  }\n  if ((enum_values != (long *)0x0) && (0 < *enum_values)) {\n    slot_ptr = (long *)coff_get_slot_lto_priv_0(type_info);\n    if (*slot_ptr != 0) {\n      return *slot_ptr;\n    }\n    result = debug_make_indirect_type_isra_0(slot_ptr,0);\n    return result;\n  }\n  if (is_unsigned == '\\0') {\n    enum_values = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = debug_make_void_type_isra_0();\n    return result;\n  }\n  result = *(long *)(type_info + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    error_message = debug_make_void_type_isra_0();\n    type_name = \"void\";\n    break;\n  case 2:\n    error_message = debug_make_int_type_isra_0(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    error_message = debug_make_int_type_isra_0(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    error_message = debug_make_int_type_isra_0(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    error_message = debug_make_int_type_isra_0(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    error_message = debug_make_float_type_isra_0(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    error_message = debug_make_float_type_isra_0(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    error_message = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    error_message = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(file_info,symbol_table,type_info,error_message,enum_values,type_name);\nLAB_0010e046:\n    slot_ptr = (long *)coff_get_slot_lto_priv_0(type_info,param_4);\n    *slot_ptr = result;\n    return result;\n  case 10:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      result = enum_values[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      index = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          loop_counter = (int)index;\n          result = *(long *)(*symbol_table + symbol_table[2] * 8);\n          result = bfd_coff_get_syment(file_info,result,local_buffer);\n          index = (long)loop_counter;\n          if (result == '\\0') {\n            error_code = bfd_get_error();\n            error_message = bfd_errmsg(error_code);\n            var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(var6,error_message);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= loop_counter + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          index = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)loop_counter * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)loop_counter * 8) =\n               *(long *)(result + 0x10) + *(long *)(index + 0x30);\n          index = (long)(loop_counter + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + index * 8) = 0;\n      result = debug_make_enum_type_isra_0(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    error_message = debug_make_int_type_isra_0(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    error_message = debug_make_int_type_isra_0(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    error_message = debug_make_int_type_isra_0(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    error_message = debug_make_int_type_isra_0(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    error_message = debug_make_float_type_isra_0(0xc);\n    type_name = \"long double\";\n  }\n  result = debug_name_type(type_name,type_name,error_message);\nLAB_0010e065:\n  *(long *)(type_info + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "current_name": "parse_coff_type_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_value",
                "cVar2": "result",
                "iVar9": "loop_counter",
                "lVar1": "result",
                "lVar12": "index",
                "lVar5": "result",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "file_info",
                "param_2": "symbol_table",
                "param_3": "type_info",
                "param_5": "type_code",
                "param_6": "enum_values",
                "param_7": "is_unsigned",
                "param_8": "type_name",
                "pcVar10": "type_name",
                "plVar7": "slot_ptr",
                "uVar11": "bit_mask",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "uVar6": "var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "*puVar8": {
                    "1": "coff_entry_value"
                },
                "FUN_0010e07c": {
                    "1": "parse_coff_types",
                    "2": "parse_coff_data",
                    "6": "parse_coff_symbols",
                    "9": "parse_coff_type"
                },
                "__ptr": {
                    "1": "struct_type_list",
                    "2": "coff_types",
                    "3": "buffer"
                },
                "bfd_coff_get_auxent": {
                    "1": "get_symbol_auxdata"
                },
                "bfd_coff_get_syment": {
                    "1": "read_symbol_entry"
                },
                "bfd_errmsg": {
                    "1": "get_error_message"
                },
                "bfd_get_error": {
                    "1": "get_error_code"
                },
                "byte local_67": {
                    "1": "symbol_auxent"
                },
                "byte local_68": {
                    "1": "symbol_section"
                },
                "cVar4": {
                    "1": "symbol_status",
                    "19": "result"
                },
                "char *pcVar9": {
                    "1": "error_msg"
                },
                "char cVar4": {
                    "1": "error_code"
                },
                "dcgettext": {
                    "1": "translate_message"
                },
                "debug_make_struct_type_isra_0": {
                    "2": "make_struct_type"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar13": {
                    "1": "length",
                    "2": "i_var13",
                    "3": "type_offset",
                    "7": "offset"
                },
                "iVar14": {
                    "1": "struct_capacity",
                    "2": "allocated_size",
                    "3": "type_capacity",
                    "5": "array_size"
                },
                "int iVar13": {
                    "1": "symbol_size"
                },
                "int iVar14": {
                    "1": "buffer_size"
                },
                "int param_4": {
                    "1": "strtab_size"
                },
                "lVar1": {
                    "1": "length",
                    "2": "symbol_entry",
                    "3": "symbol_table_size",
                    "4": "symbol_table_end"
                },
                "lVar12": {
                    "1": "var4",
                    "2": "struct_count",
                    "3": "entry_index",
                    "5": "entry_count",
                    "6": "index"
                },
                "lVar14": {
                    "1": "coff_entry_alloc"
                },
                "lVar2": {
                    "1": "val2",
                    "2": "symbol_table_entry",
                    "3": "symbol",
                    "4": "symbol_entry",
                    "5": "symbol_address"
                },
                "lVar3": {
                    "1": "current_symbol",
                    "2": "num_symbols",
                    "3": "count",
                    "4": "symbol_index"
                },
                "local_56": {
                    "1": "record_length"
                },
                "local_60": {
                    "1": "aux_ent_buffer",
                    "2": "aux_data_buffer",
                    "3": "aux_info",
                    "5": "aux_buffer",
                    "6": "aux_data"
                },
                "local_67": {
                    "1": "local_byte2",
                    "2": "aux_present"
                },
                "local_68": {
                    "1": "aux_info_size_1",
                    "2": "flag1",
                    "3": "type"
                },
                "local_6a": {
                    "1": "section_number",
                    "2": "local_6a",
                    "3": "symbol_type"
                },
                "local_88": {
                    "1": "name_buffer",
                    "12": "symbol_name",
                    "2": "symbol_buffer",
                    "3": "symbol_info",
                    "5": "syment_buffer"
                },
                "local_a8": {
                    "1": "local_var",
                    "2": "local_type1",
                    "3": "local_var1"
                },
                "long *param_2": {
                    "1": "symtab_ptr"
                },
                "long lVar1": {
                    "1": "symbol_table_entry_offset"
                },
                "long lVar12": {
                    "1": "parsed_data_index"
                },
                "long lVar2": {
                    "1": "symbol_entry_offset"
                },
                "long lVar3": {
                    "1": "symbol_aux_entry_offset"
                },
                "long param_5": {
                    "1": "header_offset"
                },
                "non_fatal": {
                    "1": "handle_error"
                },
                "param_1": {
                    "1": "bfd_handle",
                    "2": "param1",
                    "21": "param_1"
                },
                "param_2": {
                    "1": "symtab",
                    "13": "symbol_table",
                    "2": "symbols"
                },
                "param_3": {
                    "1": "param_c",
                    "2": "param3",
                    "21": "param_3"
                },
                "param_4": {
                    "1": "param_d",
                    "2": "param4",
                    "21": "param_4",
                    "3": "file_type"
                },
                "param_5": {
                    "1": "total_syms",
                    "14": "param_5",
                    "2": "param5",
                    "3": "symbol_table_size",
                    "4": "num_symbols"
                },
                "param_6": {
                    "1": "memory_limit",
                    "2": "param6",
                    "20": "param_6"
                },
                "parse_coff_type_lto_priv_0": {
                    "1": "parse_type_lto_priv_0"
                },
                "pcVar9": {
                    "1": "error_format_string",
                    "3": "error_string",
                    "7": "error_format",
                    "9": "error_message"
                },
                "puVar10": {
                    "1": "pu_var10",
                    "6": "aux_info",
                    "7": "aux_data"
                },
                "puVar8": {
                    "1": "new_type",
                    "2": "parsed_data",
                    "3": "symbol_entry",
                    "4": "new_entry"
                },
                "puVar8+1": {
                    "1": "coff_entry_value1"
                },
                "puVar8+2": {
                    "1": "coff_entry_value2"
                },
                "puVar8+3": {
                    "1": "coff_entry_value3"
                },
                "puVar8+4": {
                    "1": "coff_entry_null1"
                },
                "puVar8+5": {
                    "1": "coff_entry_null"
                },
                "puVar8+6": {
                    "1": "coff_entry_offset"
                },
                "puVar8+7": {
                    "1": "coff_entry_section"
                },
                "uStack_9c": {
                    "1": "type2_hi",
                    "2": "local_type4",
                    "3": "local_var4"
                },
                "uStack_a0": {
                    "1": "local_var_3",
                    "2": "u_stack_a0",
                    "3": "local_var3"
                },
                "uStack_a4": {
                    "1": "coff_entry_u_stack_a4",
                    "2": "type_id_high",
                    "3": "local_var2"
                },
                "uVar11": {
                    "1": "record_size",
                    "2": "offset",
                    "7": "value"
                },
                "uVar5": {
                    "1": "ushort_var",
                    "17": "error_code",
                    "2": "error",
                    "5": "bfd_error_code"
                },
                "uVar6": {
                    "1": "result2",
                    "2": "type_value",
                    "3": "error_message",
                    "4": "type"
                },
                "uVar7": {
                    "1": "parse_result",
                    "2": "errmsg",
                    "5": "error_message"
                },
                "uint uVar11": {
                    "1": "symbol_type"
                },
                "undefined *puVar10": {
                    "1": "auxent_data_ptr"
                },
                "undefined local_60 [10]": {
                    "1": "auxent_data"
                },
                "undefined local_88 [30]": {
                    "1": "symbol_name"
                },
                "undefined2 local_6a": {
                    "1": "symbol_type"
                },
                "undefined4 *puVar8": {
                    "1": "coff_data_ptr"
                },
                "undefined4 local_a8": {
                    "1": "coff_type_low"
                },
                "undefined4 uStack_9c": {
                    "1": "parsed_symbol_type_high"
                },
                "undefined4 uStack_a0": {
                    "1": "parsed_symbol_type_low"
                },
                "undefined4 uStack_a4": {
                    "1": "coff_type_high"
                },
                "undefined4 uVar5": {
                    "1": "bfd_error"
                },
                "undefined8 param_1": {
                    "1": "coff_data_ptr"
                },
                "undefined8 param_3": {
                    "1": "strtab_ptr"
                },
                "undefined8 param_6": {
                    "1": "additional_data"
                },
                "undefined8 uVar6": {
                    "1": "coff_type"
                },
                "undefined8 uVar7": {
                    "1": "errmsg"
                },
                "ushort local_56": {
                    "1": "symbol_index"
                },
                "void *__ptr": {
                    "1": "parsed_data"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001045b0",
                "FUN_001046a0",
                "FUN_001048f0",
                "FUN_00113da9",
                "FUN_00104240",
                "FUN_0010dac0",
                "FUN_001042b0",
                "FUN_001047a0",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nundefined8\nparse_coff_type_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long symbol_table_end;\n  long symbol_address;\n  long symbol_index;\n  char result;\n  undefined4 error_code;\n  void *symbol_entries;\n  undefined8 type;\n  undefined8 error_message;\n  undefined4 *new_entry;\n  char *error_message;\n  undefined *aux_entry;\n  uint value;\n  long index;\n  int offset;\n  int array_size;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined symbol_name [30];\n  undefined2 symbol_type;\n  byte type;\n  byte flag2;\n  undefined aux_data [10];\n  ushort aux_value;\n  \n  array_size = 10;\n  index = 0;\n  symbol_table_end = *(long *)(param_5 + 0x18);\n  symbol_entries = (void *)allocate_memory(0x50);\n  while ((symbol_table[3] < symbol_table_end && (symbol_table[2] < symbol_table[1]))) {\n    symbol_address = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = get_symbol_entry(param_1,symbol_address,symbol_name);\n    if (result == '\\0') {\n      error_code = get_error_code();\n      type = get_error_message(error_code);\n      error_message = \"get_symbol_entry failed: %s\";\nLAB_0010e18d:\n      error_message = translate_string(0,error_message,5);\n      print_error(error_message,type);\n      release_memory(symbol_entries);\n      return 0;\n    }\n    symbol_index = symbol_table[3];\n    aux_entry = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_index + 1 + (ulong)flag2;\n    if (flag2 != 0) {\n      aux_entry = aux_data;\n      result = get_symbol_auxdata(param_1,symbol_address,0,aux_entry);\n      if (result == '\\0') {\n        error_code = get_error_code();\n        type = get_error_message(error_code);\n        error_message = \"get_symbol_auxdata failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (type == 0x12) {\n      value = (uint)aux_value;\n      offset = (int)*(undefined8 *)(symbol_address + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (type < 0x13) {\n        if ((type == 8) || (type == 0xb)) {\n          value = 0;\n          offset = ((int)*(undefined8 *)(symbol_address + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (type == 0x66) break;\n      value = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_type_lto_priv_0(param_1,symbol_table,param_3,symbol_index,symbol_type,aux_entry,1);\n    type = *(undefined8 *)(symbol_address + 8);\n    new_entry = (undefined4 *)allocate_memory(0x20);\n    local_var1 = (undefined4)type;\n    local_var2 = (undefined4)((ulong)type >> 0x20);\n    local_var3 = (undefined4)error_message;\n    local_var4 = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(new_entry + 5) = 0;\n    new_entry[6] = offset;\n    new_entry[7] = value;\n    new_entry[4] = 0;\n    *new_entry = local_var1;\n    new_entry[1] = local_var2;\n    new_entry[2] = local_var3;\n    new_entry[3] = local_var4;\n    if (array_size <= (int)index + 1) {\n      array_size = array_size + 10;\n      symbol_entries = (void *)xrealloc(symbol_entries,(long)array_size << 3,new_entry,0,param_6);\n    }\n    *(undefined4 **)((long)symbol_entries + index * 8) = new_entry;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)symbol_entries + (long)(int)index * 8) = 0;\n  type = make_struct_type(param_4 == 8,*(undefined2 *)(param_5 + 10),symbol_entries);\n  return type;\n}\n\n",
            "current_name": "parse_coff_type_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "parse_coff_type_0010e07c",
                "__ptr": "symbol_entries",
                "bfd_coff_get_auxent": "get_symbol_auxdata",
                "bfd_coff_get_syment": "get_symbol_entry",
                "bfd_errmsg": "get_error_message",
                "bfd_get_error": "get_error_code",
                "cVar4": "result",
                "dcgettext": "translate_string",
                "debug_make_struct_type_isra_0": "make_struct_type",
                "free": "release_memory",
                "iVar13": "offset",
                "iVar14": "array_size",
                "lVar1": "symbol_table_end",
                "lVar12": "index",
                "lVar2": "symbol_address",
                "lVar3": "symbol_index",
                "local_56": "aux_value",
                "local_60": "aux_data",
                "local_67": "flag2",
                "local_68": "type",
                "local_6a": "symbol_type",
                "local_88": "symbol_name",
                "local_a8": "local_var1",
                "non_fatal": "print_error",
                "param_2": "symbol_table",
                "parse_coff_type_lto_priv_0": "parse_type_lto_priv_0",
                "pcVar9": "error_message",
                "puVar10": "aux_entry",
                "puVar8": "new_entry",
                "uStack_9c": "local_var4",
                "uStack_a0": "local_var3",
                "uStack_a4": "local_var2",
                "uVar11": "value",
                "uVar5": "error_code",
                "uVar6": "type",
                "uVar7": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "(ulong)lVar7 >> 8": {
                    "1": "shifted_value"
                },
                "*(long *)(lVar1 + 0x18)": {
                    "1": "value3"
                },
                "*(long *)(lVar3 + 0x20)": {
                    "1": "item_data"
                },
                "*(ulong *)(lVar3 + lVar7)": {
                    "1": "concatenated_value"
                },
                "*(undefined4 *)(lVar3 + 8 + lVar7)": {
                    "1": "local_var3"
                },
                "**(code **)(*(long *)(*param_1 + 8) + 0x50)": {
                    "1": "function_call3"
                },
                "**(code **)(*(long *)(*param_1 + 8) + 0x68)": {
                    "1": "function_call2"
                },
                "*param_1": {
                    "1": "function_pointer1"
                },
                "*param_1 + 8": {
                    "1": "function_pointer2"
                },
                "CONCAT14": {
                    "1": "concatenate14"
                },
                "CONCAT15": {
                    "1": "concatenate15"
                },
                "CONCAT26": {
                    "1": "concatenate26"
                },
                "CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_44)))": {
                    "1": "combined_value"
                },
                "CONCAT71": {
                    "1": "concatenate71"
                },
                "FUN_0010e2f0": {
                    "1": "reverse_string_lookup",
                    "16": "process_string"
                },
                "lVar1": {
                    "1": "index",
                    "2": "hash_result",
                    "3": "value",
                    "5": "temp_long1",
                    "8": "temp_var1"
                },
                "lVar3": {
                    "1": "hash_result",
                    "2": "hash_entry",
                    "5": "temp_var2",
                    "6": "lookup_result"
                },
                "lVar3 + 0x20": {
                    "1": "temp_var4"
                },
                "lVar3 + 8 + lVar7": {
                    "1": "offset_value"
                },
                "lVar7": {
                    "1": "allocated_space",
                    "2": "temp_var3",
                    "3": "index"
                },
                "local_3c": {
                    "1": "extracted_array",
                    "4": "local_variable2",
                    "5": "local_array"
                },
                "local_44": {
                    "1": "result1",
                    "4": "local_variable1",
                    "5": "result",
                    "6": "local_var1"
                },
                "param_1": {
                    "1": "buffer",
                    "17": "hash_table",
                    "2": "param_list",
                    "5": "param_array"
                },
                "param_1[1]": {
                    "1": "buffer"
                },
                "param_1[2]": {
                    "1": "current_position"
                },
                "param_1[3]": {
                    "1": "array_length"
                },
                "param_1[4]": {
                    "1": "head1"
                },
                "param_1[5]": {
                    "1": "head2"
                },
                "param_1[6]": {
                    "1": "head3"
                },
                "param_2": {
                    "1": "extracted_data",
                    "4": "param",
                    "6": "param_flag"
                },
                "param_3": {
                    "1": "param_count",
                    "2": "index",
                    "4": "int_param",
                    "5": "param_size",
                    "6": "param_int"
                },
                "param_4": {
                    "1": "parameter_pointer",
                    "2": "parameter_long",
                    "3": "param_value",
                    "6": "data"
                },
                "param_5": {
                    "1": "key",
                    "10": "input_string",
                    "2": "str",
                    "3": "parameter_string",
                    "4": "param_string",
                    "6": "string"
                },
                "sVar6": {
                    "1": "key_length",
                    "17": "string_length",
                    "2": "string_size",
                    "6": "str_length"
                },
                "uStack_3e": {
                    "1": "undefined_stack_var3",
                    "2": "u_stack_3e",
                    "6": "stack_var3"
                },
                "uStack_3f": {
                    "1": "u_stack_param1",
                    "2": "u_stack3f",
                    "4": "stack_var2"
                },
                "uStack_40": {
                    "1": "stack_40",
                    "2": "u_stack_40",
                    "3": "stack_var2",
                    "4": "stack_var1"
                },
                "uVar2": {
                    "1": "temp_undefined4",
                    "10": "error_code",
                    "2": "temp_var2",
                    "3": "bfd_error",
                    "9": "error"
                },
                "uVar4": {
                    "1": "temp_long3",
                    "13": "error_message",
                    "2": "bfd_error_msg",
                    "5": "error_msg"
                },
                "uVar5": {
                    "1": "error_message_format",
                    "2": "error_string",
                    "3": "error_msg"
                },
                "xrealloc": {
                    "1": "reallocate_memory"
                },
                "xrealloc(param_1[1])": {
                    "1": "reallocated_val"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_00104270",
                "FUN_00104560",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_001047a0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0010ec73",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010edb4",
                "FUN_0010e5db",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010ed2c",
                "FUN_0010ebb0"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined param_flag,int param_int,undefined8 data,char *input_string)\n\n{\n  long temp_var1;\n  undefined4 error_code;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_msg;\n  size_t string_length;\n  long offset;\n  undefined4 local_var1;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined2 stack_var3;\n  undefined4 local_array [3];\n  \n  if (input_string == (char *)0x0) {\n    offset = 0;\n  }\n  else {\n    lookup_result = bfd_hash_lookup(hash_table + 7,input_string,1,1);\n    if (lookup_result == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      error_msg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(error_msg,error_message);\n      return 0;\n    }\n    offset = *(long *)(lookup_result + 0x20);\n    if (offset == -1) {\n      offset = head3;\n      temp_var1 = head2;\n      *(long *)(lookup_result + 0x20) = offset;\n      if (temp_var1 == 0) {\n        head1 = lookup_result;\n      }\n      else {\n        *(long *)(temp_var1 + 0x18) = lookup_result;\n      }\n      head2 = lookup_result;\n      string_length = strlen(input_string);\n      head3 = offset + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(offset,&local_var1);\n  stack_var2 = 0;\n  stack_var1 = param_flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)param_int,&stack_var3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(data,local_array);\n  if ((ulong)current_size < current_position + 0xcU) {\n    current_size = current_size * 2;\n    offset = reallocated_val;\n    buffer = offset;\n  }\n  offset = current_position;\n  lookup_result = buffer;\n  *(ulong *)(lookup_result + offset) = combined_value;\n  *(undefined4 *)(lookup_result + 8 + offset) = local_array[0];\n  current_position = current_position + 0xc;\n  return concatenate71((int7)((ulong)offset >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT14": "concatenate14",
                "CONCAT15": "concatenate15",
                "CONCAT26": "concatenate26",
                "CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_44)))": "combined_value",
                "CONCAT71": "concatenate71",
                "FUN_0010e2f0": "process_string_0010e2f0",
                "lVar1": "temp_var1",
                "lVar3": "lookup_result",
                "lVar7": "offset",
                "local_3c": "local_array",
                "local_44": "local_var1",
                "param_1": "hash_table",
                "param_1[1]": "buffer",
                "param_1[2]": "current_position",
                "param_1[3]": "current_size",
                "param_1[4]": "head1",
                "param_1[5]": "head2",
                "param_1[6]": "head3",
                "param_2": "param_flag",
                "param_3": "param_int",
                "param_4": "data",
                "param_5": "input_string",
                "sVar6": "string_length",
                "uStack_3e": "stack_var3",
                "uStack_3f": "stack_var2",
                "uStack_40": "stack_var1",
                "uVar2": "error_code",
                "uVar4": "error_message",
                "uVar5": "error_msg",
                "xrealloc": "reallocate_memory",
                "xrealloc(param_1[1])": "reallocated_val"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "write_symbol"
                },
                "FUN_0010e439": {
                    "1": "write_symbol_to_config",
                    "2": "set_symbol_and_write_to_stab",
                    "3": "set_param_value",
                    "4": "set_symbol_and_write"
                },
                "param_1": {
                    "1": "target_address",
                    "2": "memory_address",
                    "22": "base_address"
                },
                "param_2": {
                    "1": "new_param_value",
                    "17": "symbol_value",
                    "3": "value",
                    "4": "symbol"
                },
                "param_3": {
                    "1": "unknown_param",
                    "2": "param3"
                },
                "param_4": {
                    "1": "unknown",
                    "2": "param_4",
                    "3": "param4"
                },
                "param_5": {
                    "1": "str",
                    "2": "symbol_name",
                    "3": "string"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_stab_symbol_to_memory",
                    "2": "write_symbol_to_stab",
                    "3": "write_symbol"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_0010e451",
                "FUN_0011378f"
            ],
            "code": "\nvoid set_symbol_and_write_0010e439(long base_address,undefined8 symbol_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = symbol_value;\n  write_symbol_lto(base_address,0x84,0,0,symbol_value);\n  return;\n}\n\n",
            "current_name": "set_symbol_and_write_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_symbol_and_write_0010e439",
                "param_1": "base_address",
                "param_2": "symbol_value",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e451": {
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "current_name": "FUN_0010e451",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "FUN_0010e453": {
                    "1": "process_symbols",
                    "2": "process_symbol",
                    "3": "generate_stab_entry"
                },
                "__s": {
                    "1": "new_str",
                    "10": "formatted_string",
                    "2": "result_string",
                    "3": "formatted_symbol",
                    "7": "new_string"
                },
                "cVar2": {
                    "1": "result_char",
                    "14": "result",
                    "2": "character",
                    "5": "status"
                },
                "lVar1": {
                    "1": "loop_index",
                    "2": "array_element",
                    "6": "length"
                },
                "lVar5": {
                    "1": "additional_length",
                    "2": "type_count",
                    "3": "length",
                    "4": "counter"
                },
                "lVar7": {
                    "1": "secondary_loop_index",
                    "2": "dependency_index",
                    "4": "array_index",
                    "7": "offset",
                    "9": "index"
                },
                "param_1": {
                    "1": "data",
                    "2": "param1",
                    "3": "symbol_table",
                    "4": "input_number",
                    "7": "address"
                },
                "param_2": {
                    "1": "source_file",
                    "10": "input_string",
                    "2": "string1",
                    "4": "symbol",
                    "5": "symbol_name"
                },
                "param_3": {
                    "1": "symbols",
                    "10": "string_array",
                    "2": "output_strings"
                },
                "param_4": {
                    "1": "param4"
                },
                "param_5": {
                    "1": "param5"
                },
                "ppcVar6": {
                    "1": "string_pointer_list",
                    "2": "current_symbol",
                    "4": "current_string",
                    "5": "array_pointer"
                },
                "sVar3": {
                    "1": "length2",
                    "17": "string_length",
                    "2": "size",
                    "6": "length"
                },
                "stab_push_defined_type": {
                    "1": "push_defined_type_to_symbol_table"
                },
                "stab_push_string": {
                    "1": "push_string_to_symbol_table"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_symbol_table"
                },
                "uVar4": {
                    "1": "success_flag",
                    "12": "return_value",
                    "6": "success",
                    "9": "result"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 generate_stab_entry_0010e453(long address,char *input_string,char **string_array)\n\n{\n  long length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 return_value;\n  long counter;\n  char **array_pointer;\n  long index;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      formatted_string = (undefined2 *)allocate_memory(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = push_string_to_table(address,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    return_value = 0;\n  }\n  else {\n    counter = 10;\n    array_pointer = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      counter = string_length + 10;\n    }\n    for (; *array_pointer != (char *)0x0; array_pointer = array_pointer + 1) {\n      string_length = strlen(*array_pointer);\n      counter = counter + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)allocate_memory(counter);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(address + 0x68);\n      *(long *)(address + 0x68) = counter + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,counter);\n    }\n    index = 0;\n    while( true ) {\n      length = *(long *)((long)string_array + index);\n      string_length = strlen((char *)formatted_string);\n      if (length == 0) break;\n      index = index + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = write_symbol_to_table(address,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = push_defined_type_to_table(address,counter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_stab_entry_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "generate_stab_entry_0010e453",
                "__s": "formatted_string",
                "cVar2": "result",
                "lVar1": "length",
                "lVar5": "counter",
                "lVar7": "index",
                "param_1": "address",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "array_pointer",
                "sVar3": "string_length",
                "stab_push_defined_type": "push_defined_type_to_table",
                "stab_push_string": "push_string_to_table",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_table",
                "uVar4": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_0010e5db": {
                    "1": "extract_and_modify_symbols",
                    "2": "process_data",
                    "4": "reverse_and_modify"
                },
                "__ptr": {
                    "1": "pointer_data",
                    "2": "popped_pointer",
                    "3": "ptr_to_free",
                    "4": "pointer",
                    "6": "ptr"
                },
                "__s": {
                    "1": "str_temp",
                    "2": "str",
                    "3": "popped_string",
                    "9": "string"
                },
                "__s_00": {
                    "1": "str2",
                    "13": "modified_string",
                    "2": "new_str",
                    "8": "new_string"
                },
                "auVar4": {
                    "1": "modified_result",
                    "11": "return_value",
                    "2": "output",
                    "8": "result"
                },
                "cVar1": {
                    "1": "symbol_status",
                    "2": "char_result",
                    "3": "result",
                    "4": "write_success",
                    "6": "symbol_written"
                },
                "free": {
                    "1": "free_mem"
                },
                "fun_00109b2f": {
                    "1": "allocate_memory"
                },
                "fun_00109ed3": {
                    "1": "modify_symbol"
                },
                "fun_0010e2f0": {
                    "1": "process_symbol_type"
                },
                "iVar3": {
                    "1": "index",
                    "15": "iteration_count",
                    "2": "count",
                    "3": "iteration",
                    "5": "counter"
                },
                "in_R10": {
                    "1": "value_r10",
                    "2": "register_value",
                    "3": "value",
                    "4": "return_value"
                },
                "param_1": {
                    "1": "input1",
                    "2": "input_value",
                    "3": "input_ptr",
                    "4": "input_param"
                },
                "param_2": {
                    "1": "input2",
                    "2": "count",
                    "5": "limit",
                    "7": "iteration_limit"
                },
                "param_3": {
                    "1": "param3",
                    "2": "param_3"
                },
                "param_4": {
                    "1": "param4"
                },
                "param_5": {
                    "1": "param5"
                },
                "sVar2": {
                    "1": "symbol_length",
                    "2": "length",
                    "22": "string_length",
                    "3": "str_length"
                },
                "sprintf": {
                    "1": "format_string"
                },
                "stab_modify_type": {
                    "1": "modify_type_in_symbol_table"
                },
                "stab_pop_type": {
                    "1": "pop_type_from_symbol_table"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_privately"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109ed3",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] reverse_and_modify_0010e5db(long input_param,int iteration_limit)\n\n{\n  char symbol_written;\n  void *ptr;\n  char *string;\n  size_t string_length;\n  char *modified_string;\n  ulong return_value;\n  int iteration_count;\n  undefined return_value [16];\n  \n  iteration_count = 0;\n  do {\n    if (iteration_limit <= iteration_count) {\n      return_value = modify_type_function(input_param,0x66,0,input_param + 0x188,input_param + 400,return_value);\n      return return_value;\n    }\n    if (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)pop_type_function(input_param);\n      free_mem(ptr);\n    }\n    else {\n      string = (char *)pop_type_function(input_param);\n      string_length = get_string_length(string);\n      modified_string = (char *)allocate_mem(string_length + 3);\n      format_string(modified_string,\":t%s\",string);\n      free_mem(string);\n      symbol_written = write_symbol_function(input_param,0x80,0,0,modified_string);\n      if (symbol_written == '\\0') {\n        return_value._8_8_ = 0;\n        return_value._0_8_ = return_value;\n        return return_value << 0x40;\n      }\n      free_mem(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "reverse_and_modify_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "__ptr": "ptr",
                "__s": "string",
                "__s_00": "modified_string",
                "auVar4": "return_value",
                "cVar1": "symbol_written",
                "free": "free_mem",
                "iVar3": "iteration_count",
                "in_R10": "return_value",
                "param_1": "input_param",
                "param_2": "iteration_limit",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "stab_modify_type": "modify_type_function",
                "stab_pop_type": "pop_type_function",
                "stab_write_symbol_lto_priv_0": "write_symbol_function",
                "strlen": "get_string_length",
                "xmalloc": "allocate_mem"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "helper_function_2"
                },
                "FUN_0010e6a8": {
                    "1": "write_symbol_to_file",
                    "2": "write_symbol_lto",
                    "3": "write_symbol_to_table",
                    "6": "process_symbol"
                },
                "FUN_00119ed0": {
                    "1": "helper_function_3"
                },
                "__s": {
                    "1": "symbol_type_pop",
                    "2": "old_symbol_name",
                    "4": "pop_type",
                    "5": "symbol_type",
                    "6": "type"
                },
                "__s_00": {
                    "1": "new_str",
                    "2": "output_string",
                    "3": "new_string",
                    "8": "formatted_symbol"
                },
                "auVar10": {
                    "1": "return_val",
                    "2": "return_value_struct",
                    "5": "output",
                    "9": "result"
                },
                "fun_0010e2f0": {
                    "1": "helper_function_1"
                },
                "lVar5": {
                    "1": "hash_value",
                    "13": "hash_lookup_result",
                    "4": "symbol_lookup_result",
                    "9": "lookup_result"
                },
                "lVar8": {
                    "1": "symbol_id",
                    "10": "symbol_count",
                    "3": "counter",
                    "8": "symbol_index"
                },
                "param_1": {
                    "1": "binary_offset",
                    "10": "symbol_table",
                    "2": "binary_param"
                },
                "param_2": {
                    "1": "old_symbol",
                    "2": "symbol",
                    "20": "symbol_name",
                    "3": "input_string"
                },
                "param_3": {
                    "1": "param_ptr1",
                    "10": "param3",
                    "14": "param_3"
                },
                "param_4": {
                    "1": "var2",
                    "10": "param4",
                    "14": "param_4"
                },
                "param_5": {
                    "1": "param_5"
                },
                "sVar3": {
                    "1": "base_string_length",
                    "14": "symbol_name_length",
                    "2": "symbol_len"
                },
                "sVar4": {
                    "1": "type_name_len",
                    "2": "old_symbol_name_length",
                    "3": "pop_type_length",
                    "5": "type_length",
                    "6": "symbol_type_length"
                },
                "uVar1": {
                    "1": "temp_value_2",
                    "12": "write_result",
                    "2": "write_symbol_result",
                    "3": "write_success"
                },
                "uVar2": {
                    "1": "symbol_type_code",
                    "13": "symbol_type",
                    "2": "symbol_attributes",
                    "3": "type"
                },
                "uVar6": {
                    "1": "error_msg",
                    "2": "bfd_error_msg",
                    "6": "error_message"
                },
                "uVar7": {
                    "1": "err_format",
                    "3": "error_format",
                    "4": "error_message"
                },
                "uVar9": {
                    "1": "u_var9",
                    "16": "return_value",
                    "2": "symbol_write_status",
                    "3": "result"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104560",
                "FUN_00104240",
                "FUN_00109b2f",
                "FUN_001047a0",
                "FUN_00104390",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_symbol_0010e6a8(long symbol_table,char *symbol_name,undefined8 param_3,undefined8 param_4)\n\n{\n  uint write_result;\n  undefined4 symbol_type;\n  char *type;\n  size_t symbol_name_length;\n  size_t symbol_type_length;\n  char *formatted_symbol;\n  long hash_lookup_result;\n  undefined8 error_message;\n  undefined8 error_string;\n  long symbol_count;\n  ulong return_value;\n  undefined result [16];\n  \n  symbol_count = *(long *)(*(long *)(symbol_table + 0x60) + 0x10);\n  symbol_type = *(undefined4 *)(*(long *)(symbol_table + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  symbol_name_length = strlen(symbol_name);\n  symbol_type_length = strlen(type);\n  formatted_symbol = (char *)xmalloc(symbol_name_length + 0x14 + symbol_type_length);\n  if (symbol_count < 1) {\n    symbol_count = *(long *)(symbol_table + 0x68);\n    *(long *)(symbol_table + 0x68) = symbol_count + 1;\n    sprintf(formatted_symbol,\"%s:t%ld=%s\",symbol_name,symbol_count,type);\n  }\n  else {\n    sprintf(formatted_symbol,\"%s:t%s\",symbol_name,type);\n  }\n  free(type);\n  write_result = stab_write_symbol_lto_priv_0(symbol_table,0x80,0,0,formatted_symbol);\n  return_value = (ulong)write_result;\n  if ((char)write_result != '\\0') {\n    free(formatted_symbol);\n    hash_lookup_result = bfd_hash_lookup(symbol_table + 0x1b8,symbol_name,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = symbol_count;\n      *(undefined4 *)(hash_lookup_result + 0x28) = symbol_type;\n      goto LAB_0010e7b3;\n    }\n    symbol_type = bfd_get_error();\n    error_message = bfd_errmsg(symbol_type);\n    error_string = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(error_string,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  result._8_8_ = param_4;\n  result._0_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "process_symbol_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "process_symbol_0010e6a8",
                "__s": "type",
                "__s_00": "formatted_symbol",
                "auVar10": "result",
                "lVar5": "hash_lookup_result",
                "lVar8": "symbol_count",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "sVar3": "symbol_name_length",
                "sVar4": "symbol_type_length",
                "uVar1": "write_result",
                "uVar2": "symbol_type",
                "uVar6": "error_message",
                "uVar7": "error_string",
                "uVar9": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "1": "create_symbol_lto",
                    "2": "reverse_string_and_write_symbol",
                    "8": "reverse_and_write_symbol"
                },
                "__s": {
                    "1": "str2",
                    "2": "popped_type",
                    "3": "suffix",
                    "4": "type",
                    "5": "symbol"
                },
                "__s_00": {
                    "1": "composed_string",
                    "2": "result_string",
                    "3": "new_string",
                    "4": "combined_string",
                    "6": "concatenated_string"
                },
                "auVar3": {
                    "1": "status",
                    "26": "result",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "input1",
                    "2": "data",
                    "5": "input_param",
                    "7": "symbol"
                },
                "param_2": {
                    "1": "original_string",
                    "2": "type_string",
                    "4": "input_string",
                    "5": "prefix",
                    "8": "string1"
                },
                "param_3": {
                    "1": "unknown",
                    "2": "unknown_param",
                    "5": "param3"
                },
                "param_4": {
                    "1": "input2",
                    "2": "output",
                    "4": "param_4",
                    "6": "data"
                },
                "param_5": {
                    "1": "new_string"
                },
                "sVar1": {
                    "1": "length1",
                    "2": "input_length",
                    "4": "prefix_length"
                },
                "sVar2": {
                    "1": "len_str1",
                    "2": "suffix_length",
                    "3": "type_length",
                    "4": "symbol_length"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] reverse_and_write_symbol_0010e7c2(undefined8 symbol,char *string1,undefined8 param3,undefined8 data)\n\n{\n  char *symbol;\n  size_t string1_length;\n  size_t symbol_length;\n  char *concatenated_string;\n  undefined result [16];\n  \n  symbol = (char *)stab_pop_type();\n  string1_length = strlen(string1);\n  symbol_length = strlen(symbol);\n  concatenated_string = (char *)xmalloc(string1_length + 3 + symbol_length);\n  sprintf(concatenated_string,\"%s:T%s\",string1,symbol);\n  free(symbol);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol,0x80,0,0,concatenated_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(concatenated_string);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "current_name": "reverse_and_write_symbol_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "reverse_and_write_symbol_0010e7c2",
                "__s": "symbol",
                "__s_00": "concatenated_string",
                "auVar3": "result",
                "param_1": "symbol",
                "param_2": "string1",
                "param_3": "param3",
                "param_4": "data",
                "sVar1": "string1_length",
                "sVar2": "symbol_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "FUN_0010e842": {
                    "1": "write_symbol_to_debug_info",
                    "2": "write_lto_symbol",
                    "3": "write_symbol_to_stab",
                    "4": "write_symbol"
                },
                "__s": {
                    "1": "buffer",
                    "12": "formatted_string",
                    "2": "output_string",
                    "8": "formatted_symbol"
                },
                "auVar2": {
                    "1": "function_result",
                    "2": "return_value",
                    "25": "result"
                },
                "auVar2._0_4_": {
                    "1": "write_result"
                },
                "auVar2._8_8_": {
                    "1": "additional_info"
                },
                "param_1": {
                    "1": "symbol_info",
                    "3": "param_1",
                    "8": "symbol_table"
                },
                "param_2": {
                    "1": "original_symbol",
                    "15": "symbol_name",
                    "2": "string",
                    "6": "input_string"
                },
                "param_3": {
                    "1": "numeric_value",
                    "2": "count",
                    "3": "counter",
                    "8": "index"
                },
                "param_4": {
                    "1": "auxiliary_value",
                    "2": "value",
                    "3": "param4",
                    "8": "data",
                    "9": "param_4"
                },
                "param_5": {
                    "1": "unused_parameter",
                    "2": "param_5"
                },
                "sVar1": {
                    "1": "symbol_len",
                    "10": "symbol_length",
                    "2": "input_length",
                    "3": "input_string_length",
                    "4": "string_length",
                    "8": "symbol_name_length"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_lto_private"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] write_symbol_0010e842(undefined8 symbol_table,char *symbol_name,undefined8 index,undefined8 param_4)\n\n{\n  size_t symbol_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  symbol_length = strlen(symbol_name);\n  formatted_string = (char *)xmalloc(symbol_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",symbol_name,index);\n  write_result = write_symbol_0010e842_lto_private(symbol_table,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)write_result != '\\0') {\n    free(formatted_string);\n  }\n  additional_info = param_4;\n  return result;\n}\n\n",
            "current_name": "write_symbol_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "write_symbol_0010e842",
                "__s": "formatted_string",
                "auVar2": "result",
                "auVar2._0_4_": "write_result",
                "auVar2._8_8_": "additional_info",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "index",
                "sVar1": "symbol_length",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto_private"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "1": "calculate_and_write"
                },
                "FUN_0010e8a9": {
                    "1": "write_symbol_to_debug_info",
                    "10": "write_symbol",
                    "2": "write_symbol_to_debugger"
                },
                "__s": {
                    "1": "allocated_string",
                    "10": "formatted_string",
                    "2": "formatted_symbol",
                    "3": "new_string",
                    "4": "buffer"
                },
                "param_1": {
                    "1": "prev_symbol",
                    "12": "param_1",
                    "3": "symbol_name",
                    "7": "param1"
                },
                "param_2": {
                    "1": "debugger",
                    "13": "param_2",
                    "7": "param2"
                },
                "param_3": {
                    "1": "data",
                    "2": "string",
                    "3": "symbol",
                    "5": "value",
                    "8": "input_string"
                },
                "param_4": {
                    "1": "param_4",
                    "2": "param4"
                },
                "param_5": {
                    "1": "param_5",
                    "2": "param5"
                },
                "sVar2": {
                    "1": "input_length",
                    "2": "symbol_length",
                    "3": "value_length",
                    "7": "string_length",
                    "8": "length"
                },
                "uVar1": {
                    "31": "result"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_lto_0010e8a9(undefined8 param_1,undefined8 param_2,char *input_string)\n\n{\n  undefined4 result;\n  size_t length;\n  char *formatted_string;\n  \n  length = strlen(input_string);\n  formatted_string = (char *)xmalloc(length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",param_1,input_string);\n  result = stab_write_symbol_lto_0010e8a9_priv_0(param_2,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_lto_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "write_symbol_lto_0010e8a9",
                "__s": "formatted_string",
                "param_3": "input_string",
                "sVar2": "length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_00109b2f": {
                    "1": "xmalloc"
                },
                "FUN_0010e2f0": {
                    "1": "pop_type"
                },
                "FUN_0010e918": {
                    "1": "generate_and_write_symbol",
                    "2": "write_symbol_with_parameters",
                    "4": "write_symbol_with_params",
                    "5": "write_symbol"
                },
                "__s": {
                    "1": "old_str",
                    "12": "type",
                    "2": "popped_string",
                    "5": "symbol"
                },
                "__s_00": {
                    "1": "new_str",
                    "10": "formatted_string",
                    "2": "combined_string",
                    "3": "new_symbol"
                },
                "param_1": {
                    "1": "param_address",
                    "3": "file_descriptor",
                    "4": "param_1",
                    "9": "symbol_table"
                },
                "param_2": {
                    "1": "query",
                    "2": "input_string",
                    "4": "name",
                    "6": "symbol_name"
                },
                "param_3": {
                    "1": "param_b",
                    "14": "value",
                    "3": "param3"
                },
                "param_4": {
                    "1": "param_4",
                    "2": "param4"
                },
                "param_5": {
                    "1": "param5"
                },
                "sVar2": {
                    "1": "input_length",
                    "2": "symbol_length",
                    "3": "message_len",
                    "5": "name_length"
                },
                "sVar3": {
                    "1": "old_str_len",
                    "11": "type_length",
                    "2": "previous_symbol_length",
                    "4": "symbol_length"
                },
                "sprintf": {
                    "1": "compose_symbol"
                },
                "stab_pop_type": {
                    "1": "pop_previous_symbol",
                    "2": "pop_type"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_private_table",
                    "2": "write_symbol_lto_private"
                },
                "uVar1": {
                    "1": "write_result",
                    "2": "status",
                    "20": "result"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_0010e918(undefined8 symbol_table,char *symbol_name,undefined8 value)\n\n{\n  undefined4 result;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *formatted_string;\n  \n  type = (char *)pop_type();\n  symbol_name_length = strlen(symbol_name);\n  type_length = strlen(type);\n  formatted_string = (char *)allocate_memory(symbol_name_length + 0x14 + type_length);\n  compose_symbol(formatted_string,\"%s:c=e%s,%ld\",symbol_name,type,value);\n  free(type);\n  result = write_symbol_0010e918_lto_private(symbol_table,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "write_symbol_0010e918",
                "__s": "type",
                "__s_00": "formatted_string",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "value",
                "sVar2": "symbol_name_length",
                "sVar3": "type_length",
                "sprintf": "compose_symbol",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto_private",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "&_sch_istable": {
                    "1": "istable_pointer",
                    "4": "character_table"
                },
                "(&_sch_istable)[(ulong)*__s * 2]": {
                    "1": "table_entry_check"
                },
                "FUN_00109b2f": {
                    "1": "get_symbol_address"
                },
                "FUN_0010e2f0": {
                    "1": "update_symbol_table"
                },
                "FUN_0010e9a0": {
                    "1": "write_symbol_to_file",
                    "2": "write_formatted_symbol",
                    "3": "write_symbol_lto",
                    "4": "write_symbol_to_table",
                    "8": "write_symbol"
                },
                "__s": {
                    "1": "symbol_value_str",
                    "3": "type_string",
                    "4": "type"
                },
                "__s_00": {
                    "1": "str2",
                    "2": "temp_symbol",
                    "3": "new_type_string",
                    "4": "new_type",
                    "5": "new_symbol"
                },
                "__s_01": {
                    "1": "final_name",
                    "2": "symbol_string",
                    "3": "formatted_string",
                    "4": "final_symbol"
                },
                "_sch_istable": {
                    "1": "sch_is_table",
                    "3": "istable",
                    "6": "character_table"
                },
                "abort": {
                    "1": "terminate_process",
                    "5": "abort_execution"
                },
                "byte": {
                    "1": "byte_array"
                },
                "case 1": {
                    "1": "case1"
                },
                "case 2": {
                    "1": "case2"
                },
                "case 3": {
                    "1": "case3"
                },
                "case 4": {
                    "1": "case4"
                },
                "case 5": {
                    "1": "case5"
                },
                "default": {
                    "1": "default_case"
                },
                "free": {
                    "2": "release_memory",
                    "6": "free_memory",
                    "7": "deallocate_memory"
                },
                "free()": {
                    "1": "free_memory"
                },
                "lVar1": {
                    "1": "type_string_counter",
                    "2": "index",
                    "4": "symbol_counter",
                    "5": "count",
                    "6": "symbol_count",
                    "8": "counter"
                },
                "param_1": {
                    "1": "data",
                    "12": "symbol_table",
                    "2": "buffer"
                },
                "param_2": {
                    "1": "string1",
                    "11": "symbol_name",
                    "4": "symbol",
                    "6": "name"
                },
                "param_3": {
                    "1": "arg3",
                    "12": "type",
                    "17": "symbol_type"
                },
                "param_4": {
                    "1": "data",
                    "2": "arg4",
                    "3": "value",
                    "4": "param4",
                    "5": "param",
                    "7": "param_4"
                },
                "param_5": {
                    "1": "symbol_name"
                },
                "pcVar5": {
                    "1": "symbol_designator",
                    "2": "symbol_letter",
                    "4": "symbol_type",
                    "5": "type_string",
                    "8": "symbol_prefix"
                },
                "sVar3": {
                    "1": "module_name_length",
                    "10": "symbol_name_length",
                    "4": "symbol_length",
                    "5": "name_length"
                },
                "sVar4": {
                    "1": "length2",
                    "3": "new_symbol_length",
                    "4": "value_length",
                    "5": "symbol_length"
                },
                "size_t": {
                    "1": "size_type"
                },
                "sprintf": {
                    "1": "formatted_output",
                    "12": "format_string"
                },
                "sprintf()": {
                    "2": "format_string"
                },
                "stab_pop_type": {
                    "1": "pop_type_from_symbol_table",
                    "3": "pop_type_from_stack",
                    "6": "pop_type"
                },
                "stab_pop_type()": {
                    "1": "pop_type_from_table()"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_lto_private_function",
                    "3": "write_symbol_to_table"
                },
                "stab_write_symbol_lto_priv_0()": {
                    "1": "write_stab_symbol"
                },
                "stc_write_symbol_lto_priv_0()": {
                    "1": "write_symbol_lto()"
                },
                "strlen": {
                    "1": "calculate_string_length",
                    "2": "get_length",
                    "5": "string_length",
                    "6": "get_string_length"
                },
                "strlen()": {
                    "1": "get_length"
                },
                "uVar2": {
                    "10": "result",
                    "2": "return_value"
                },
                "uVar6": {
                    "1": "symbol_attribute",
                    "2": "flags",
                    "3": "symbol_value",
                    "7": "flag",
                    "8": "symbol_flag"
                },
                "ulong": {
                    "1": "unsigned_long"
                },
                "undefined4": {
                    "1": "unknown_type"
                },
                "undefined8": {
                    "1": "unknown_type"
                },
                "xmalloc": {
                    "1": "allocated_memory",
                    "14": "allocate_memory"
                },
                "xmalloc()": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_001040a0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nunknown_type write_symbol_0010e9a0(long symbol_table,char *symbol_name,unknown_type symbol_type,unknown_type param_4)\n\n{\n  long counter;\n  unknown_type result;\n  byte_array *type;\n  byte_array *new_symbol;\n  size_type symbol_name_length;\n  size_type symbol_length;\n  char *formatted_symbol;\n  char *symbol_prefix;\n  unknown_type symbol_flag;\n  \n  type = (byte_array *)pop_type;\n  switch(symbol_type) {\n  case 1:\n    symbol_prefix = \"G\";\n    symbol_flag = 0x20;\n    break;\n  case 2:\n    symbol_prefix = \"S\";\n    symbol_flag = 0x26;\n    break;\n  case 3:\n    symbol_prefix = \"V\";\n    symbol_flag = 0x26;\n    break;\n  case 4:\n    symbol_prefix = \"\";\n    symbol_flag = 0x80;\n    if (((character_table)[(unsigned_long)*type * 2] & 4) == 0) {\n      counter = *(long *)(symbol_table + 0x68);\n      *(long *)(symbol_table + 0x68) = counter + 1;\n      symbol_name_length = get_string_length((char *)type);\n      new_symbol = (byte_array *)allocate_memory(symbol_name_length + 0x14);\n      format_string((char *)new_symbol,\"%ld=%s\",counter,type);\n      deallocate_memory(type);\n      type = new_symbol;\n    }\n    break;\n  case 5:\n    symbol_prefix = \"r\";\n    symbol_flag = 0x40;\n    break;\n  default_case:\n                    \n    abort_execution();\n  }\n  symbol_name_length = get_string_length(symbol_name);\n  symbol_length = get_string_length((char *)type);\n  formatted_symbol = (char *)allocate_memory(symbol_name_length + 3 + symbol_length);\n  format_string(formatted_symbol,\"%s:%s%s\",symbol_name,symbol_prefix,type);\n  deallocate_memory(type);\n  result = write_symbol_0010e9a0_to_table(symbol_table,symbol_flag,0,param_4,formatted_symbol);\n  if ((char)result != '\\0') {\n    deallocate_memory(formatted_symbol);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "&_sch_istable": "character_table",
                "FUN_0010e9a0": "write_symbol_0010e9a0",
                "__s": "type",
                "__s_00": "new_symbol",
                "__s_01": "formatted_symbol",
                "_sch_istable": "character_table",
                "abort": "abort_execution",
                "byte": "byte_array",
                "default": "default_case",
                "free": "deallocate_memory",
                "lVar1": "counter",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "symbol_type",
                "pcVar5": "symbol_prefix",
                "sVar3": "symbol_name_length",
                "sVar4": "symbol_length",
                "size_t": "size_type",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_pop_type()": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_table",
                "strlen": "get_string_length",
                "uVar2": "result",
                "uVar6": "symbol_flag",
                "ulong": "unsigned_long",
                "undefined4": "unknown_type",
                "undefined8": "unknown_type",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "(char)uVar1": {
                    "1": "success"
                },
                "-(uint)(param_3 == '\\0')": {
                    "1": "check_flag"
                },
                "0x10": {
                    "1": "value"
                },
                "0x1e8": {
                    "1": "check2"
                },
                "0x1f8": {
                    "1": "check1"
                },
                "0x24": {
                    "1": "flag1"
                },
                "FUN_0010eafe": {
                    "1": "generate_symbol_name",
                    "2": "write_symbol_to_lto",
                    "3": "generate_symbol",
                    "6": "write_symbol"
                },
                "__s": {
                    "1": "top_symbol",
                    "10": "type",
                    "3": "type_name",
                    "5": "popped_string",
                    "6": "popped_type"
                },
                "__s_00": {
                    "1": "new_string",
                    "2": "result_string",
                    "5": "combined_string",
                    "7": "new_symbol"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "free()": {
                    "1": "deallocate_memory()"
                },
                "param_1": {
                    "1": "file_data",
                    "11": "symbol_table",
                    "2": "function_context",
                    "5": "context"
                },
                "param_1 + 0x10": {
                    "1": "some_value_3"
                },
                "param_1 + 0x1e8": {
                    "1": "symbol_table_offset"
                },
                "param_1 + 0x1f8": {
                    "1": "flag_ptr"
                },
                "param_2": {
                    "1": "source_file",
                    "2": "file_name",
                    "3": "input_string",
                    "5": "filename",
                    "9": "symbol_name"
                },
                "param_3": {
                    "1": "is_static",
                    "22": "flag",
                    "3": "symbol_type"
                },
                "sVar2": {
                    "1": "symbol_len",
                    "2": "file_name_length",
                    "5": "filename_length",
                    "7": "symbol_name_length"
                },
                "sVar3": {
                    "1": "pop_type_result_length",
                    "2": "type_name_length",
                    "4": "symbol_length",
                    "6": "popped_type_length",
                    "9": "type_length"
                },
                "sprintf": {
                    "1": "format_and_copy",
                    "2": "format_string"
                },
                "sprintf()": {
                    "1": "format_string()"
                },
                "stab_pop_type": {
                    "1": "pop_symbol_type",
                    "10": "pop_type",
                    "2": "pop_string_from_stack",
                    "5": "pop_type_from_symbol_table"
                },
                "stab_pop_type()": {
                    "1": "pop_symbol"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_lto",
                    "2": "write_symbol",
                    "5": "write_symbol_to_symbol_table"
                },
                "stab_write_symbol_lto_priv_0()": {
                    "1": "write_symbol_to_symbol_table"
                },
                "strlen": {
                    "1": "string_length"
                },
                "strlen()": {
                    "1": "get_string_length"
                },
                "uVar1": {
                    "1": "return_value",
                    "6": "result"
                },
                "ulong": {
                    "1": "unsigned_long"
                },
                "xmalloc": {
                    "1": "allocate_symbol_memory",
                    "21": "allocate_memory"
                },
                "xmalloc()": {
                    "1": "allocate_memory()",
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_0010eafe(long symbol_table,char *symbol_name,char flag)\n\n{\n  undefined4 result;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *new_symbol;\n  \n  if ((*(int *)(symbol_table + 0x1f8) == 0) && (*(long *)(symbol_table + 0x1e8) == -1)) {\n    type = (char *)popped_type;\n    symbol_name_length = string_length(symbol_name);\n    type_length = string_length(type);\n    new_symbol = (char *)allocate_memory(symbol_name_length + 3 + type_length);\n    format_string(new_symbol,\"%s:%c%s\",symbol_name,(unsigned_long)((-(uint)(flag == '\\0') & 0x20) + 0x46),type);\n    *(undefined8 *)(symbol_table + 0x1e8) = *(undefined8 *)(symbol_table + 0x10);\n    result = write_symbol_0010eafe_to_symbol_table(symbol_table,0x24,0,0,new_symbol);\n    if (success != '\\0') {\n      deallocate_memory(new_symbol);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "write_symbol_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "(char)uVar1": "success",
                "FUN_0010eafe": "write_symbol_0010eafe",
                "__s": "type",
                "__s_00": "new_symbol",
                "free": "deallocate_memory",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "flag",
                "sVar2": "symbol_name_length",
                "sVar3": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_pop_type()": "popped_type",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_symbol_table",
                "strlen": "string_length",
                "uVar1": "result",
                "ulong": "unsigned_long",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "FUN_0010ebb0": {
                    "1": "write_symbol_and_free",
                    "12": "write_symbol",
                    "2": "write_symbol_lto",
                    "4": "write_symbol_with_prefix"
                },
                "__s": {
                    "1": "popped_type",
                    "14": "symbol",
                    "2": "str",
                    "3": "type"
                },
                "__s_00": {
                    "1": "formatted_str",
                    "12": "new_symbol",
                    "2": "new_str",
                    "3": "new_string",
                    "4": "formatted_symbol"
                },
                "cVar1": {
                    "1": "letter",
                    "2": "char_value",
                    "4": "symbol_char",
                    "8": "character"
                },
                "param_1": {
                    "1": "data",
                    "2": "input1",
                    "3": "symbol_table",
                    "6": "param1"
                },
                "param_2": {
                    "1": "input_str1",
                    "2": "param_string",
                    "3": "param2",
                    "4": "file_name",
                    "5": "symbol_name",
                    "6": "filename"
                },
                "param_3": {
                    "1": "input_length",
                    "2": "type",
                    "3": "param3",
                    "5": "symbol_type",
                    "6": "length"
                },
                "param_4": {
                    "1": "input_arg4",
                    "2": "input2",
                    "3": "param",
                    "6": "arg4"
                },
                "sVar4": {
                    "1": "input_length",
                    "2": "param_2_length",
                    "4": "file_name_length",
                    "5": "param2_length",
                    "6": "filename_length"
                },
                "sVar5": {
                    "1": "str1_length",
                    "14": "symbol_length",
                    "2": "symbol_name_length",
                    "3": "type_length"
                },
                "stab_pop_type": {
                    "1": "pop_type"
                },
                "uVar2": {
                    "1": "decreased_length",
                    "10": "index"
                },
                "uVar3": {
                    "24": "result",
                    "3": "return_value"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_0010ebb0(undefined8 arg1,char *filename,int length,undefined8 param_4)\n\n{\n  char character;\n  uint index;\n  undefined4 result;\n  char *symbol;\n  size_t filename_length;\n  size_t symbol_length;\n  char *new_symbol;\n  \n  symbol = (char *)pop_type();\n  index = length - 1;\n  if (index < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)index * 4);\n    character = (&DAT_00121334)[index];\n    filename_length = strlen(filename);\n    symbol_length = strlen(symbol);\n    new_symbol = (char *)xmalloc(filename_length + 3 + symbol_length);\n    sprintf(new_symbol,\"%s:%c%s\",filename,(ulong)(uint)(int)character,symbol);\n    free(symbol);\n    result = stab_write_symbol_0010ebb0_lto_priv_0(arg1,result,0,param_4,new_symbol);\n    if ((char)result != '\\0') {\n      free(new_symbol);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "current_name": "write_symbol_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "write_symbol_0010ebb0",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "cVar1": "character",
                "param_1": "arg1",
                "param_2": "filename",
                "param_3": "length",
                "sVar4": "filename_length",
                "sVar5": "symbol_length",
                "stab_pop_type": "pop_type",
                "uVar2": "index",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "0x3c": {
                    "1": "index_1"
                },
                "0x3d": {
                    "1": "index_2"
                },
                "0x3f": {
                    "1": "index_3"
                },
                "0x40": {
                    "1": "temp_var_1"
                },
                "0x41": {
                    "1": "temp_var_2"
                },
                "FUN_0010e2f0": {
                    "1": "write_symbol_lto"
                },
                "FUN_0010ec73": {
                    "1": "store_and_write_symbol",
                    "10": "process_data",
                    "2": "process_param"
                },
                "cVar2": {
                    "1": "success_flag",
                    "2": "write_result",
                    "21": "result",
                    "3": "symbol_result"
                },
                "iVar1": {
                    "1": "iteration_count",
                    "17": "counter",
                    "9": "count"
                },
                "param_1": {
                    "1": "symbol_table",
                    "3": "param_array",
                    "4": "parameters",
                    "5": "array",
                    "8": "data"
                },
                "param_2": {
                    "1": "data",
                    "17": "value",
                    "2": "symbol",
                    "4": "param_value"
                },
                "param_2 - param_1[0x40]": {
                    "1": "difference"
                },
                "param_3": {
                    "1": "param",
                    "10": "size",
                    "2": "count",
                    "4": "param3",
                    "6": "index"
                },
                "param_4": {
                    "1": "address1",
                    "2": "parameter1",
                    "3": "param1",
                    "5": "param_4",
                    "7": "param4"
                },
                "param_5": {
                    "1": "buffer",
                    "2": "parameter2",
                    "3": "param_b",
                    "4": "param_5",
                    "6": "param5"
                },
                "param_6": {
                    "1": "parameter_6",
                    "2": "parameter3",
                    "3": "param_c",
                    "5": "param_6",
                    "7": "param6"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_lto_private",
                    "6": "write_symbol"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_data_0010ec73(long *data,long value,undefined8 size,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = write_symbol(data,0xc0,0,data[0x41],0,param6,param4),\n       result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "current_name": "process_data_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "cVar2": "result",
                "iVar1": "counter",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "stab_write_symbol_lto_priv_0": "write_symbol"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "*(int *)(param_1 + 0x1f8)": {
                    "1": "current_counter"
                },
                "*(long *)(param_1 + 0x208)": {
                    "1": "current_status"
                },
                "*(ulong *)(param_1 + 0x1f0)": {
                    "1": "current_size"
                },
                "0xc0": {
                    "1": "other_symbol_offset"
                },
                "0xe0": {
                    "1": "symbol_offset"
                },
                "<auVar4>": {
                    "1": "result"
                },
                "<cVar1>": {
                    "1": "write_success"
                },
                "<extraout_RDX>": {
                    "1": "extra_data"
                },
                "<iVar2>": {
                    "1": "counter"
                },
                "<in_R10>": {
                    "1": "additional_data"
                },
                "<original_function_name>": {
                    "1": "write_symbol"
                },
                "<param_1>": {
                    "1": "symbol_data"
                },
                "<param_2>": {
                    "1": "symbol_size"
                },
                "<param_3>": {
                    "1": "symbol_content"
                },
                "<uVar3>": {
                    "1": "flag"
                },
                "FUN_0010ed2c": {
                    "1": "update_max_param_and_call_other_function",
                    "2": "update_symbol_and_return",
                    "3": "update_max_and_write_symbol",
                    "5": "update_symbol_information"
                },
                "LAB_0010ed78": {
                    "1": "check_symbol_and_decrement"
                },
                "auVar4": {
                    "1": "updated_data",
                    "11": "result",
                    "12": "return_value",
                    "2": "result_data",
                    "3": "output"
                },
                "cVar1": {
                    "1": "is_successful",
                    "2": "success_flag",
                    "3": "result",
                    "8": "write_success"
                },
                "extraout_RDX": {
                    "1": "extraout_data",
                    "2": "extra_result"
                },
                "iVar2": {
                    "1": "temp_var",
                    "10": "counter",
                    "11": "count"
                },
                "in_R10": {
                    "1": "reg_data",
                    "3": "additional_data"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "symbol_table",
                    "3": "symbol_info",
                    "4": "data",
                    "6": "symbol_data"
                },
                "param_1 + 0x1f0": {
                    "1": "symbol_table_buffer"
                },
                "param_1 + 0x1f8": {
                    "1": "metadata->counter"
                },
                "param_1 + 0x200": {
                    "1": "some_offset"
                },
                "param_1 + 0x208": {
                    "1": "symbol_status"
                },
                "param_2": {
                    "1": "new_max_value",
                    "11": "new_value",
                    "2": "symbol_size",
                    "3": "size",
                    "9": "new_size"
                },
                "param_3": {
                    "1": "additional_info",
                    "2": "value",
                    "3": "additional_param",
                    "4": "extra_data"
                },
                "param_3 >> 8": {
                    "1": "shifted_input_param"
                },
                "param_4": {
                    "1": "unknown",
                    "3": "extra_data",
                    "5": "extra_param"
                },
                "param_5": {
                    "1": "string",
                    "2": "symbol_name"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_helper"
                },
                "uVar3": {
                    "1": "flags",
                    "11": "result",
                    "3": "updated_value",
                    "5": "flag"
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_symbol_information_0010ed2c(long symbol_data,ulong new_value,undefined8 extra_data)\n\n{\n  char write_success;\n  int count;\n  undefined8 extra_result;\n  ulong result;\n  undefined8 additional_data;\n  undefined return_value [16];\n  \n  if (*(ulong *)(symbol_data + 0x1f0) < new_value) {\n    *(ulong *)(symbol_data + 0x1f0) = new_value;\n  }\n  if (*(long *)(symbol_data + 0x208) == -1) {\ncheck_symbol_and_decrement:\n    if (*(int *)(symbol_data + 0x1f8) != 0) {\n      count = *(int *)(symbol_data + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)extra_data >> 8),1);\n      *(int *)(symbol_data + 0x1f8) = count;\n      if (count != 0) {\n        return_value = write_symbol_helper\n                           (symbol_data,0xe0,0,new_value - *(long *)(symbol_data + 0x200),0,additional_data);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    write_success = write_symbol_helper(symbol_data,0xc0,0,*(long *)(symbol_data + 0x208),0);\n    if (write_success != '\\0') {\n      *(undefined8 *)(symbol_data + 0x208) = 0xffffffffffffffff;\n      extra_data = extra_result;\n      goto check_symbol_and_decrement;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  return_value._0_8_ = result & 0xffffffff;\n  return_value._8_8_ = additional_data;\n  return return_value;\n}\n\n",
            "current_name": "update_symbol_information_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_symbol_information_0010ed2c",
                "LAB_0010ed78": "check_symbol_and_decrement",
                "auVar4": "return_value",
                "cVar1": "write_success",
                "extraout_RDX": "extra_result",
                "iVar2": "count",
                "in_R10": "additional_data",
                "param_1": "symbol_data",
                "param_2": "new_value",
                "param_3": "extra_data",
                "stab_write_symbol_lto_priv_0": "write_symbol_helper",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "*(long *)(param_1 + 0x200)": {
                    "1": "unused_symbol_size"
                },
                "*(long *)(param_1 + 0x210)": {
                    "1": "current_symbol"
                },
                "*(ulong *)(param_1 + 0x1f0)": {
                    "1": "max_symbol_size"
                },
                "FUB_0010edb4": {
                    "1": "write_symbol_lto"
                },
                "FUN_0010edb4": {
                    "1": "process_symbol",
                    "2": "update_symbol_lto",
                    "3": "update_symbol_information"
                },
                "cVar1": {
                    "1": "write_symbol_result",
                    "10": "success",
                    "2": "symbol_write_result",
                    "3": "success_flag",
                    "8": "write_success"
                },
                "filename_cmp": {
                    "1": "compare_filename",
                    "4": "compare_filenames"
                },
                "iVar2": {
                    "1": "compare_result",
                    "13": "filename_comparison_result",
                    "2": "filename_compare_result",
                    "4": "cmp_result",
                    "8": "filename_comparison"
                },
                "in_R10": {
                    "1": "unused_arg",
                    "2": "reserved_register",
                    "4": "extra_param"
                },
                "param_1": {
                    "1": "symbol_information",
                    "2": "base_address",
                    "4": "symbol_info",
                    "5": "symbol_table"
                },
                "param_2": {
                    "1": "new_file_name",
                    "23": "filename",
                    "3": "new_filename"
                },
                "param_3": {
                    "1": "param",
                    "16": "symbol_type",
                    "2": "param_value",
                    "3": "flags"
                },
                "param_4": {
                    "1": "symbol_address",
                    "15": "symbol_size",
                    "3": "file_size",
                    "9": "size"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_to_buffer"
                },
                "uVar3": {
                    "1": "symbol_write_return",
                    "15": "write_result",
                    "3": "symbol_write_result",
                    "5": "write_symbol_result"
                }
            },
            "called": [
                "FUN_0010e2f0",
                "FUN_001041a0"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 write_symbol_lto_0010edb4(long symbol_table,undefined8 filename,undefined4 symbol_type,ulong symbol_size)\n\n{\n  char success;\n  int filename_comparison_result;\n  undefined8 write_result;\n  undefined8 additional_data;\n  \n  if (*(long *)(symbol_table + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbol_table + 0x1f0) < symbol_size) {\n    *(ulong *)(symbol_table + 0x1f0) = symbol_size;\n  }\n  filename_comparison_result = compare_filenames(filename);\n  if (filename_comparison_result != 0) {\n    success = write_symbol_lto_0010edb4(symbol_table,0x84,0,symbol_size,filename);\n    if (success == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbol_table + 0x210) = filename;\n  }\n  write_result = write_symbol_lto_0010edb4\n                    (symbol_table,0x44,symbol_type,symbol_size - *(long *)(symbol_table + 0x200),0,additional_data);\n  return write_result;\n}\n\n",
            "current_name": "write_symbol_lto_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "write_symbol_lto_0010edb4",
                "cVar1": "success",
                "filename_cmp": "compare_filenames",
                "iVar2": "filename_comparison_result",
                "in_R10": "additional_data",
                "param_1": "symbol_table",
                "param_2": "filename",
                "param_3": "symbol_type",
                "param_4": "symbol_size",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto",
                "uVar3": "write_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "FUN_001043e0",
                "FUN_00113da9",
                "FUN_00113d3a",
                "FUN_00112b6e",
                "FUN_00109a32",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_0010d21c",
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_001129f4",
                "FUN_00109022",
                "FUN_00109be3",
                "FUN_00104550",
                "FUN_00113b71",
                "FUN_00113d6e",
                "FUN_00104700",
                "FUN_0010afd5",
                "FUN_00109a0b",
                "FUN_00109ab1",
                "FUN_001045c0",
                "FUN_00113e17",
                "FUN_001048c0",
                "FUN_00108e76",
                "FUN_001047c0",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_001040e0",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_00104510",
                "FUN_001042b0",
                "FUN_0010b6ea",
                "FUN_00104470",
                "FUN_0010ee3f",
                "FUN_00104290",
                "FUN_00113e5e",
                "FUN_00104320",
                "FUN_00113cb9",
                "FUN_00108fe8",
                "FUN_00113df2",
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00112904",
                "FUN_00108fb9",
                "FUN_00113bfa",
                "FUN_00113ce0",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "FUN_0011173a": {
                    "1": "parse_debug_information",
                    "2": "parse_stab_entry"
                },
                "__ptr": {
                    "1": "tmp_ptr",
                    "12": "ptr",
                    "2": "pointer_variable",
                    "3": "ptr_var",
                    "5": "pointer"
                },
                "_stderr": {
                    "1": "standard_error"
                },
                "bVar2": {
                    "1": "tmp_byte1",
                    "2": "byte_value",
                    "3": "temp_byte",
                    "4": "byte1",
                    "8": "byte_var2"
                },
                "bad_stab": {
                    "1": "bad_debug"
                },
                "byte": {
                    "1": "byte_value"
                },
                "cVar1": {
                    "1": "comparison_var1",
                    "2": "char_value",
                    "3": "temp_char",
                    "4": "char1",
                    "6": "char_var1"
                },
                "cVar2": {
                    "1": "byte_value"
                },
                "cVar3": {
                    "1": "char_variable3",
                    "2": "char_value2",
                    "3": "char2",
                    "5": "char_var3"
                },
                "char": {
                    "1": "char_value"
                },
                "concat": {
                    "1": "combine_strings"
                },
                "dVar18": {
                    "1": "double_var18"
                },
                "dVar19": {
                    "1": "temp_double_var",
                    "2": "double_variable19",
                    "3": "double_value",
                    "4": "double_var",
                    "5": "double_var19"
                },
                "dVar21": {
                    "1": "double21"
                },
                "dVar94": {
                    "1": "double_value"
                },
                "dcgettext": {
                    "2": "get_translation"
                },
                "debug_add_to_current_namespace_constprop_0": {
                    "1": "add_to_current_namespace"
                },
                "debug_emit_pending_vars": {
                    "1": "emit_pending_vars"
                },
                "debug_end_function": {
                    "2": "end_debug_function"
                },
                "debug_make_function_type_isra_0": {
                    "1": "make_function_type"
                },
                "debug_make_pointer_type_isra_0": {
                    "1": "make_pointer_type"
                },
                "debug_name_type": {
                    "1": "name_type"
                },
                "debug_record_function": {
                    "1": "record_debug_function"
                },
                "debug_record_line": {
                    "1": "record_line"
                },
                "debug_record_parameter": {
                    "1": "record_debug_parameter"
                },
                "debug_record_variable": {
                    "1": "record_debug_variable"
                },
                "debug_set_filename": {
                    "2": "set_debug_filename"
                },
                "debug_start_source": {
                    "2": "start_debug_source"
                },
                "debug_tag_type": {
                    "1": "tag_debug_type"
                },
                "fprintf": {
                    "2": "print_formatted"
                },
                "free": {
                    "2": "deallocate_memory"
                },
                "getenv": {
                    "1": "get_environment_variable"
                },
                "iVar5": {
                    "1": "i_var5",
                    "2": "index",
                    "3": "temp_int",
                    "5": "int_value",
                    "6": "int_var5"
                },
                "int": {
                    "1": "int_value"
                },
                "lVar10": {
                    "1": "long10",
                    "2": "long_value1",
                    "3": "long1",
                    "4": "long_var1",
                    "6": "long_var10"
                },
                "lVar11": {
                    "1": "long_value_2",
                    "2": "long_variable11",
                    "3": "long_value2",
                    "5": "long_var2",
                    "6": "long_var11"
                },
                "lVar12": {
                    "1": "long_var_3",
                    "2": "temp_long3",
                    "3": "long3",
                    "5": "long_var12"
                },
                "lVar13": {
                    "1": "tmp_long_ptr1",
                    "2": "long4",
                    "3": "long_var13",
                    "4": "long_var4"
                },
                "lVar14": {
                    "1": "long_var14"
                },
                "lVar15": {
                    "1": "long_value_6"
                },
                "lVar16": {
                    "1": "long_value_7"
                },
                "lVar17": {
                    "1": "long_value_8"
                },
                "lVar18": {
                    "1": "long_value_9"
                },
                "lVar19": {
                    "1": "long_value_10"
                },
                "lVar20": {
                    "1": "long_value_11"
                },
                "lVar21": {
                    "1": "long_value_12"
                },
                "lVar22": {
                    "1": "long_value_13"
                },
                "lVar23": {
                    "1": "long_value_14"
                },
                "lVar24": {
                    "1": "long_value_15"
                },
                "lVar25": {
                    "1": "long_value_16"
                },
                "local_36": {
                    "1": "local_long2"
                },
                "local_40": {
                    "1": "local_pointer_pointer_variable40",
                    "2": "local_long_pointer_array"
                },
                "local_40[2]": {
                    "1": "local_array_of_pointers_to_long_variables"
                },
                "local_44": {
                    "1": "local_long1"
                },
                "local_48": {
                    "1": "local_pointer_char_var48",
                    "2": "local_char_ptr"
                },
                "local_8": {
                    "1": "local_long_value"
                },
                "long": {
                    "1": "long_value"
                },
                "param_1": {
                    "1": "filename",
                    "14": "param_1",
                    "2": "param_type",
                    "3": "param",
                    "6": "param1"
                },
                "param_2": {
                    "1": "input_array",
                    "2": "stab_entry",
                    "3": "param_array",
                    "4": "debug_info",
                    "6": "param2",
                    "8": "param_2"
                },
                "param_3": {
                    "1": "param_code",
                    "3": "opcode",
                    "6": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "param_value2",
                    "11": "param_4",
                    "6": "param4"
                },
                "param_5": {
                    "1": "addr",
                    "10": "param_5",
                    "2": "value",
                    "4": "address",
                    "6": "param5"
                },
                "param_6": {
                    "1": "string",
                    "2": "filename",
                    "6": "param6",
                    "7": "name",
                    "8": "param_6"
                },
                "parse_stab_type": {
                    "1": "parse_debug_type"
                },
                "pcVar16": {
                    "1": "ptr16",
                    "2": "ptr_char2"
                },
                "pcVar8": {
                    "1": "new_ptr2",
                    "2": "pointer_character_variable8",
                    "3": "ptr_var8"
                },
                "plVar17": {
                    "1": "ptr5"
                },
                "plVar26": {
                    "1": "long_pointer_1"
                },
                "plVar27": {
                    "1": "long_pointer_2"
                },
                "plVar28": {
                    "1": "long_pointer_3"
                },
                "plVar29": {
                    "1": "long_pointer_4"
                },
                "plVar30": {
                    "1": "long_pointer_5"
                },
                "plVar31": {
                    "1": "long_pointer_6"
                },
                "plVar32": {
                    "1": "long_pointer_7"
                },
                "plVar33": {
                    "1": "long_pointer_8"
                },
                "plVar34": {
                    "1": "long_pointer_9"
                },
                "plVar35": {
                    "1": "long_pointer_10"
                },
                "plVar36": {
                    "1": "long_pointer_11"
                },
                "plVar37": {
                    "1": "long_pointer_12"
                },
                "plVar38": {
                    "1": "long_pointer_13"
                },
                "plVar39": {
                    "1": "long_pointer_14"
                },
                "plVar40": {
                    "1": "long_pointer_15"
                },
                "plVar41": {
                    "1": "long_pointer_16"
                },
                "plVar42": {
                    "1": "long_pointer_17"
                },
                "plVar43": {
                    "1": "long_pointer_18"
                },
                "plVar44": {
                    "1": "long_pointer_19"
                },
                "plVar45": {
                    "1": "long_pointer_20"
                },
                "plVar46": {
                    "1": "long_pointer_21"
                },
                "plVar47": {
                    "1": "long_pointer_22"
                },
                "plVar48": {
                    "1": "long_pointer_23"
                },
                "plVar49": {
                    "1": "long_pointer_24"
                },
                "plVar50": {
                    "1": "long_pointer_25"
                },
                "plVar51": {
                    "1": "long_pointer_26"
                },
                "plVar52": {
                    "1": "long_pointer_27"
                },
                "plVar53": {
                    "1": "long_pointer_28"
                },
                "plVar54": {
                    "1": "long_pointer_29"
                },
                "plVar55": {
                    "1": "long_pointer_30"
                },
                "plVar56": {
                    "1": "long_pointer_31"
                },
                "plVar57": {
                    "1": "long_pointer_32"
                },
                "plVar58": {
                    "1": "long_pointer_33"
                },
                "plVar59": {
                    "1": "long_pointer_34"
                },
                "plVar60": {
                    "1": "long_pointer_35"
                },
                "plVar61": {
                    "1": "long_pointer_36"
                },
                "plVar62": {
                    "1": "long_pointer_37"
                },
                "plVar63": {
                    "1": "long_pointer_38"
                },
                "plVar64": {
                    "1": "long_pointer_39"
                },
                "plVar65": {
                    "1": "long_pointer_40"
                },
                "plVar66": {
                    "1": "long_pointer_41"
                },
                "plVar67": {
                    "1": "long_pointer_42"
                },
                "plVar68": {
                    "1": "long_pointer_43"
                },
                "plVar69": {
                    "1": "long_pointer_44"
                },
                "plVar7": {
                    "1": "pointer_var7",
                    "2": "ptr_var7",
                    "3": "long_var7"
                },
                "plVar70": {
                    "1": "long_pointer_45"
                },
                "plVar71": {
                    "1": "long_pointer_46"
                },
                "plVar72": {
                    "1": "long_pointer_47"
                },
                "plVar73": {
                    "1": "long_pointer_48"
                },
                "plVar74": {
                    "1": "long_pointer_49"
                },
                "plVar75": {
                    "1": "long_pointer_50"
                },
                "plVar76": {
                    "1": "long_pointer_51"
                },
                "plVar77": {
                    "1": "long_pointer_52"
                },
                "plVar78": {
                    "1": "long_pointer_53"
                },
                "plVar79": {
                    "1": "long_pointer_54"
                },
                "plVar80": {
                    "1": "long_pointer_55"
                },
                "plVar81": {
                    "1": "long_pointer_56"
                },
                "plVar82": {
                    "1": "long_pointer_57"
                },
                "plVar83": {
                    "1": "long_pointer_58"
                },
                "plVar84": {
                    "1": "long_pointer_59"
                },
                "plVar85": {
                    "1": "long_pointer_60"
                },
                "plVar86": {
                    "1": "long_pointer_61"
                },
                "plVar87": {
                    "1": "long_pointer_62"
                },
                "plVar88": {
                    "1": "long_pointer_63"
                },
                "plVar89": {
                    "1": "long_pointer_64"
                },
                "plVar90": {
                    "1": "long_pointer_65"
                },
                "plVar91": {
                    "1": "long_pointer_66"
                },
                "plVar92": {
                    "1": "long_pointer_67"
                },
                "plVar93": {
                    "1": "long_pointer_68"
                },
                "pplVar13": {
                    "1": "ptr_to_ptr_of_ptr",
                    "2": "pointer_pointer_variable13"
                },
                "pplVar18": {
                    "1": "temp_long_ptr_ptr2",
                    "2": "pointer_pointer_long_var18"
                },
                "pplVar19": {
                    "1": "ptr_ptr19"
                },
                "pplVar20": {
                    "1": "ptr_ptr20"
                },
                "ppplVar18": {
                    "1": "long_ptr_ptr_ptr_var"
                },
                "ptr_array1": {
                    "1": "ptr_array1"
                },
                "ptr_array2": {
                    "1": "ptr_array2"
                },
                "puVar6": {
                    "1": "ptr2",
                    "2": "pointer_variable6",
                    "3": "pointer_var6",
                    "4": "ptr_var6"
                },
                "stab_emit_pending_vars": {
                    "1": "emit_pending_variables"
                },
                "strchr": {
                    "1": "find_char"
                },
                "strcmp": {
                    "2": "compare_strings"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar14": {
                    "1": "temp_u_long_var1",
                    "2": "ulong1",
                    "4": "ulong_var1",
                    "5": "ulong_var14"
                },
                "uVar15": {
                    "1": "temp_u_long_var2",
                    "2": "ulong2",
                    "5": "ulong_var2",
                    "6": "ulong_var15"
                },
                "uVar16": {
                    "1": "uint_var1"
                },
                "uVar17": {
                    "1": "u_var17",
                    "2": "uint1",
                    "3": "uint_var",
                    "6": "uint_var17"
                },
                "uVar4": {
                    "1": "var4",
                    "2": "undefined_variable4",
                    "3": "undefined1",
                    "4": "undefined_value",
                    "6": "undefined_var4"
                },
                "uVar9": {
                    "1": "undefined_var2",
                    "2": "undefined2",
                    "6": "undefined_var9"
                },
                "ulVar14": {
                    "1": "ulong_var"
                },
                "ulVar15": {
                    "1": "ulong2"
                },
                "ulong": {
                    "1": "ulong_value"
                },
                "undefined8": {
                    "1": "undefined"
                },
                "void": {
                    "1": "void_type"
                },
                "warn_stab": {
                    "1": "warn_stab"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                },
                "xstrdup": {
                    "2": "duplicate_string"
                }
            },
            "called": [
                "FUN_00104170",
                "FUN_00112996",
                "FUN_00109a0b",
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00113d3a",
                "FUN_0010be1a",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_0010c05d",
                "FUN_00104240",
                "FUN_0010bc80",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_001042b0",
                "FUN_00104390",
                "FUN_001043d0",
                "FUN_0010ee3f",
                "FUN_0010be88",
                "FUN_00104290",
                "FUN_00104270",
                "FUN_00104320",
                "FUN_00108f08",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_001048f0",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_entry_0011173a(undefined param_1,long_value *param_2,int_value param_3,int_value param_4,ulong_value param_5,\n                      char_value *param_6)\n\n{\n  char_value char_var1;\n  byte_value byte_var2;\n  void_type *ptr;\n  char_value char_var3;\n  undefined undefined_var4;\n  int_value int_var5;\n  undefined *ptr_var6;\n  long_value *long_var7;\n  char_value *ptr_var8;\n  undefined undefined_var9;\n  long_value long_var10;\n  long_value long_var11;\n  long_value long_var12;\n  long_value **pointer_pointer_variable13;\n  ulong_value ulong_var14;\n  ulong_value ulong_var15;\n  char_value *ptr_var16;\n  uint_value uint_var17;\n  long_value **pointer_pointer_long_var18;\n  double double_var19;\n  char_value *local_ptr48;\n  long_value **local_long_pointer_array [2];\n  \n  if (param_2[4] != 0) {\n    if (((param_3 == 100) && (*param_6 != '\\0')) && (param_2[5] == param_5)) goto LAB_00111a06;\n    char_var3 = set_debug_filename(param_1);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long_value)param_2 + 0x44) = 0;\n    *(undefined4 *)(param_2 + 8) = 0;\n    param_2[9] = param_2[4];\n    if (*(char_value *)(param_2 + 1) == '\\0') {\n      param_2[6] = param_2[5];\n    }\n    *(undefined4 *)(param_2 + 0x10) = 1;\n    ptr_var6 = (undefined *)allocate_memory(8);\n    param_2[0x11] = (long_value)ptr_var6;\n    *ptr_var6 = 0;\n    param_2[4] = 0;\n  }\n  get_length(param_6);\n  if (param_3 == 0x84) {\nLAB_00111ab7:\n    undefined_var4 = start_debug_source(param_1,param_6);\n    return undefined_var4;\n  }\n  if (param_3 < 0x85) {\n    if (param_3 == 0x3c) {\n      int_var5 = compare_strings(param_6,\"gcc2_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 2;\n        return 1;\n      }\n      int_var5 = compare_strings(param_6,\"gcc_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long_value)param_2 + 0x44) = 1;\n      return 1;\n    }\n    if (param_3 < 0x3d) {\n      if (param_3 == 0x24) {\n        if (*param_6 == '\\0') {\n          if (*(char_value *)(param_2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char_value *)(param_2 + 1) != '\\0') {\n            param_5 = param_5 + param_2[7];\n          }\n          char_var3 = emit_pending_variables(param_1,param_2);\n          if (char_var3 != '\\0') {\n            char_var3 = end_debug_function(param_1,param_5);\n            if (char_var3 != '\\0') {\n              *(undefined *)(param_2 + 0xc) = 0;\n              param_2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char_value *)(param_2 + 0xc) != '\\0') &&\n           ((param_5 < (ulong_value)param_2[0xd] || (param_2[0xd] == 0xffffffffffffffff)))) {\n          param_2[0xd] = param_5;\n        }\n      }\n      else if (param_3 < 0x25) {\n        if (param_3 == 0xc) {\n          return 1;\n        }\n        if (param_3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param_3 == 0x2a) {\n          return 1;\n        }\n        if (param_3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param_3 == 100) {\nLAB_00111a06:\n        if (*(char_value *)(param_2 + 0xc) != '\\0') {\n          ulong_var14 = param_5;\n          if (((*param_6 != '\\0') && (ulong_var15 = param_2[0xd], ulong_var15 != 0xffffffffffffffff)) &&\n             (ulong_var14 = ulong_var15, param_5 < ulong_var15)) {\n            ulong_var14 = param_5;\n          }\n          char_var3 = emit_pending_variables(param_1,param_2);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          char_var3 = end_debug_function(param_1,ulong_var14);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_2 + 0xc) = 0;\n          param_2[0xd] = -1;\n        }\n        if (*param_6 == '\\0') {\n          return 1;\n        }\n        ptr = (void_type *)param_2[4];\n        if (ptr == (void_type *)0x0) {\n          long_var12 = duplicate_string(param_6);\n          param_2[4] = long_var12;\n        }\n        else {\n          if (*param_6 == '/') {\n            long_var12 = duplicate_string(param_6);\n          }\n          else {\n            long_var12 = combine_strings(ptr,param_6,0);\n          }\n          param_2[4] = long_var12;\n          deallocate_memory(ptr);\n        }\n        param_2[5] = param_5;\n        return 1;\n      }\n      if (param_3 < 0x65) {\n        if (param_3 == 0x44) {\n          long_var12 = 0;\n          if (*(char_value *)(param_2 + 0xc) != '\\0') {\n            long_var12 = param_2[7];\n          }\n          undefined_var4 = record_debug_line(param_1,(long_value)param_4,long_var12 + param_5);\n          return undefined_var4;\n        }\n        if (param_3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param_3 == 0x82) {\n        long_var7 = (long_value *)allocate_memory();\n        int_var5 = *(int_value *)(param_2 + 0x10);\n        long_var10 = param_2[10];\n        long_var11 = param_2[0xb];\n        long_var7[5] = 0;\n        long_var12 = param_2[0x11];\n        *(int_value *)(long_var7 + 4) = int_var5;\n        uint_var17 = int_var5 + 1;\n        *(uint_value *)(param_2 + 0x10) = uint_var17;\n        *long_var7 = long_var11;\n        long_var7[1] = long_var10;\n        long_var7[2] = (long_value)param_6;\n        long_var7[3] = param_5;\n        param_2[10] = (long_value)long_var7;\n        param_2[0xb] = (long_value)long_var7;\n        long_var12 = xrealloc(long_var12,(ulong_value)uint_var17 << 3);\n        uint_var17 = *(uint_value *)(long_var7 + 4);\n        param_2[0x11] = long_var12;\n        *(undefined *)(long_var12 + (ulong_value)uint_var17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    ptr_var8 = find_char(param_6,0x3a);\n    if ((ptr_var8 != (char_value *)0x0) && ((ptr_var8[1] & 0xdfU) == 0x46)) {\n      if (*(char_value *)(param_2 + 0xc) != '\\0') {\n        ulong_var14 = param_2[0xd];\n        ulong_var15 = param_5;\n        if ((ulong_var14 != 0xffffffffffffffff) && (ulong_var15 = ulong_var14, param_5 < ulong_var14)) {\n          ulong_var15 = param_5;\n        }\n        char_var3 = emit_pending_variables(param_1,param_2);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        char_var3 = end_debug_function(param_1,ulong_var15);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        param_2[0xd] = -1;\n      }\n      if (*(char_value *)(param_2 + 1) != '\\0') {\n        param_2[7] = param_5;\n      }\n      *(undefined *)(param_2 + 0xc) = 1;\n    }\n    local_ptr48 = find_char(param_6,0x3a);\n    if (local_ptr48 == (char_value *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_ptr48[1] == ':') goto code_r0x00111cc7;\n    if (*param_6 == '$') {\n      char_var3 = param_6[1];\n      ptr_var16 = \"eh_throw\";\n      if (char_var3 != 'e') {\n        if (char_var3 < 'f') {\n          if ((char_var3 != 'X') && (char_var3 != '_')) {\nLAB_00111d1a:\n            undefined_var9 = get_translation(0,\"unknown C++ encoded name\",5);\n            warn_debug(param_6,undefined_var9);\n          }\n        }\n        else {\n          ptr_var16 = \"this\";\n          if (char_var3 == 't') goto LAB_00111d62;\n          if (char_var3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptr_var16 = (char_value *)0x0;\n      if ((param_6 != local_ptr48) && ((*param_6 != ' ' || (local_ptr48 != param_6 + 1)))) {\n        ptr_var16 = (char_value *)savestring(param_6,(int_value)local_ptr48 - (int_value)param_6);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_ptr48[1];\n    ptr_var8 = local_ptr48 + 1;\n    if (((byte_value)(*(ushort *)(&_sch_istable + (ulong_value)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    ptr_var8 = local_ptr48 + 2;\n    char_var3 = local_ptr48[1];\n    switch(char_var3) {\n    case 'C':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      ptr_var8 = \"debug_record_label: not implemented\";\n      if (long_var12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      char_var3 = record_debug_function(param_1,ptr_var16,long_var12,char_var3 == 'F',param_5);\n      if (char_var3 != '\\0') {\n        do {\n          if (*local_ptr48 != ';') {\n            return 1;\n          }\n          local_ptr48 = local_ptr48 + 1;\n          long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char_value *)0x0) goto LAB_0011208f;\n      long_var10 = param_2[3];\n      long_var7 = (long_value *)param_2[2];\n      char_var3 = *(char_value *)(*(long_value *)(*param_2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param_3 == 0x24) {\n        local_ptr48 = ptr_var8;\n        do {\n          if (*local_ptr48 != ';') {\n            return 1;\n          }\n          local_ptr48 = local_ptr48 + 1;\n          long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      break;\n    case 'S':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var3 = local_ptr48[2];\n      if (char_var3 == 't') {\n        ptr_var8 = local_ptr48 + 3;\n      }\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,ptr_var16,&local_ptr48,local_long_pointer_array);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char_value *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char_value *)(param_2 + 0x35);\n      long_var7 = (long_value *)tag_debug_type(param_1,ptr_var16,long_var12);\n      if (long_var7 == (long_value *)0x0) {\n        return 0;\n      }\n      if (local_long_pointer_array[0] != (long_value **)0x0) {\n        *local_long_pointer_array[0] = long_var7;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      pointer_pointer_variable13 = (long_value **)(param_2 + 0x34);\n      pointer_pointer_long_var18 = (long_value **)param_2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      ptr_var8 = local_ptr48 + 3;\n      if (((local_ptr48[2] != '\\0') && (ptr_var8 = local_ptr48 + 4, local_ptr48[3] == 'n')) &&\n         (ptr_var8 = local_ptr48 + 5, ptr_var16 = local_ptr48 + 4, local_ptr48 = ptr_var8, *ptr_var16 == '0')) {\n        for (; ptr_var8 = local_ptr48, *local_ptr48 != '\\0'; local_ptr48 = local_ptr48 + 1) {\n          if (*local_ptr48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      break;\n    case 'c':\n      if (local_ptr48[2] == '=') {\n        ptr_var8 = local_ptr48 + 4;\n        char_var3 = local_ptr48[3];\n        local_ptr48 = ptr_var8;\n        if (char_var3 == 'i') {\n          long_var12 = strtol(ptr_var8,(char_value **)0x0,10);\n          if (ptr_var16 == (char_value *)0x0) {\n            return 0;\n          }\n          long_var10 = add_to_current_namespace(param_1,ptr_var16,4);\n          if (long_var10 != 0) {\n            *(long_value *)(long_var10 + 0x20) = (long_value)(int_value)long_var12;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'r') {\n          double_var19 = strtod(ptr_var8,(char_value **)0x0);\n          if (ptr_var16 == (char_value *)0x0) {\n            return 0;\n          }\n          long_var12 = add_to_current_namespace(param_1,ptr_var16,5);\n          if (long_var12 != 0) {\n            *(double *)(long_var12 + 0x20) = double_var19;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'e') {\n          long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n          if (long_var12 == 0) {\n            return 0;\n          }\n          ptr_var8 = local_ptr48;\n          if (*local_ptr48 == ',') {\n            long_var10 = strtol(local_ptr48,(char_value **)0x0,10);\n            if (ptr_var16 == (char_value *)0x0) {\n              return 0;\n            }\n            long_var11 = add_to_current_namespace(param_1,ptr_var16,6);\n            if (long_var11 != 0) {\n              long_var7 = (long_value *)allocate_memory(0x10);\n              *long_var7 = long_var12;\n              long_var7[1] = (long_value)(int_value)long_var10;\n              *(long_value **)(long_var11 + 0x20) = long_var7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_ptr48[2] == 'F') {\n        local_ptr48 = local_ptr48 + 3;\n        long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n        if (long_var12 == 0) {\n          return 0;\n        }\n        undefined_var9 = make_function_type(long_var12,0,0);\n        long_var12 = make_pointer_type(undefined_var9);\n      }\n      else {\n        local_ptr48 = ptr_var8;\n        long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      }\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 1;\n      break;\n    case 'r':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 5;\nLAB_001123e8:\n      char_var3 = stab_record_variable(param_1,param_2,ptr_var16,long_var12,undefined_var9,param_5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,ptr_var16,&local_ptr48,local_long_pointer_array);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char_value *)0x0) {\n        return 1;\n      }\n      long_var7 = (long_value *)name_debug_type(param_1,ptr_var16,long_var12);\n      if (long_var7 == (long_value *)0x0) {\n        return 0;\n      }\n      if (local_long_pointer_array[0] == (long_value **)0x0) {\n        return 1;\n      }\n      *local_long_pointer_array[0] = long_var7;\n      return 1;\n    case 'v':\n      local_ptr48 = ptr_var8;\n      long_var12 = parse_debug_type(param_1,param_2,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n    }\n    char_var3 = record_debug_parameter(param_1,ptr_var16,long_var12,undefined_var9,param_5);\n    goto joined_r0x001123f8;\n  }\n  if (param_3 == 0xe0) {\n    if ((*(char_value *)((long_value)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    char_var3 = emit_pending_variables(param_1,param_2);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    char_var3 = debug_end_block(param_1,param_2[7] + param_2[6] + param_5);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    param_2 = param_2 + 0xe;\n    *(int_value *)param_2 = *(int_value *)param_2 + -1;\n    ptr_var8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int_value *)param_2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param_3) {\n      if (param_3 == 0xe2) {\n        ptr_var8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        ptr_var8 = \"debug_end_common_block: not implemented\";\n        if (param_3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var9 = get_translation(0,ptr_var8,5);\n      print_formatted(standard_error,\"%s\\n\",undefined_var9);\n      return 0;\n    }\n    if (param_3 != 0xc0) {\n      if (param_3 == 0xc2) {\n        int_var5 = *(int_value *)(param_2 + 0x10);\n        *(uint_value *)(param_2 + 0x10) = int_var5 + 1U;\n        long_var12 = xrealloc(param_2[0x11],(ulong_value)(int_var5 + 1U) << 3);\n        ptr_var6 = (undefined *)param_2[0xb];\n        param_2[0x11] = long_var12;\n        while( true ) {\n          if (ptr_var6 == (undefined *)0x0) {\n            undefined_var9 = get_translation(0,\"Undefined N_EXCL\",5);\n            warn_debug(param_6,undefined_var9);\n            *(undefined *)(param_2[0x11] + (ulong_value)(*(int_value *)(param_2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param_5 == ptr_var6[3]) && (int_var5 = compare_strings((char_value *)ptr_var6[2],param_6), int_var5 == 0))\n          break;\n          ptr_var6 = (undefined *)*ptr_var6;\n        }\n        *(undefined *)(long_var12 + (ulong_value)(*(int_value *)(param_2 + 0x10) - 1) * 8) = ptr_var6[5];\n        return 1;\n      }\n      if (param_3 == 0xa2) {\n        long_var12 = param_2[10];\n        if (long_var12 != 0) {\n          long_var10 = *(long_value *)(long_var12 + 8);\n          uint_var17 = *(uint_value *)(long_var12 + 0x20);\n          param_2[10] = long_var10;\n          if ((uint_var17 < *(uint_value *)(param_2 + 0x10)) &&\n             (*(undefined *)(long_var12 + 0x28) = *(undefined *)(param_2[0x11] + (ulong_value)uint_var17 * 8),\n             long_var10 != 0)) {\n            param_6 = *(char_value **)(long_var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param_6 = (char_value *)param_2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char_value *)((long_value)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char_value *)(param_2 + 0xc) != '\\0') {\n      char_var3 = debug_start_block(param_1,param_2[7] + param_2[6] + param_5);\n      if (char_var3 == '\\0') {\n        return 0;\n      }\n      char_var3 = emit_pending_variables(param_1,param_2);\n      if (char_var3 != '\\0') {\n        *(int_value *)(param_2 + 0xe) = *(int_value *)(param_2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    ptr_var8 = \"N_LBRAC not within function\\n\";\n  }\n  ptr_var8 = (char_value *)get_translation(0,ptr_var8,5);\n  print_formatted(standard_error,ptr_var8);\n  return 0;\ncode_r0x00111cc7:\n  local_ptr48 = local_ptr48 + 2;\n  local_ptr48 = find_char(local_ptr48,0x3a);\n  if (local_ptr48 == (char_value *)0x0) {\n    ptr_var8 = (char_value *)0x0;\nswitchD_00111de5_caseD_44:\n    local_ptr48 = ptr_var8;\n    bad_debug(param_6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pointer_pointer_long_var18 == (long_value **)0x0) {\nLAB_001122f0:\n    if (char_var3 != 't') {\n      return 1;\n    }\n    long_var7 = (long_value *)name_debug_type(param_1,ptr_var16,long_var7);\n    if (long_var7 != (long_value *)0x0) {\n      if (local_long_pointer_array[0] == (long_value **)0x0) {\n        return 1;\n      }\n      *local_long_pointer_array[0] = long_var7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char_value *)pointer_pointer_long_var18[1] == *ptr_var16) &&\n     (int_var5 = compare_strings((char_value *)pointer_pointer_long_var18[1],ptr_var16), int_var5 == 0)) {\n    pointer_pointer_long_var18[3] = long_var7;\n    *pointer_pointer_variable13 = *pointer_pointer_long_var18;\n    goto LAB_001122f0;\n  }\n  pointer_pointer_variable13 = pointer_pointer_long_var18;\n  pointer_pointer_long_var18 = (long_value **)*pointer_pointer_long_var18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var10 < 1) {\nLAB_0011208f:\n    undefined_var9 = 1;\nLAB_001121c4:\n    char_var3 = record_debug_variable(param_1,ptr_var16,long_var12,undefined_var9,param_5);\njoined_r0x001123f8:\n    if (char_var3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  ptr_var8 = *(char_value **)(*long_var7 + 8);\n  if ((char_var3 != '\\0') && (char_var3 == *ptr_var8)) {\n    ptr_var8 = ptr_var8 + 1;\n  }\n  if ((*ptr_var8 == *ptr_var16) && (int_var5 = compare_strings(ptr_var8,ptr_var16), int_var5 == 0)) {\n    param_5 = *(long_value *)(*long_var7 + 0x10) + *(long_value *)(*(long_value *)(*long_var7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var10 = long_var10 + -1;\n  long_var7 = long_var7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "parse_stab_entry_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "parse_stab_entry_0011173a",
                "__ptr": "ptr",
                "_stderr": "standard_error",
                "bVar2": "byte_var2",
                "bad_stab": "bad_debug",
                "byte": "byte_value",
                "cVar1": "char_var1",
                "cVar3": "char_var3",
                "char": "char_value",
                "concat": "combine_strings",
                "dVar19": "double_var19",
                "dcgettext": "get_translation",
                "debug_add_to_current_namespace_constprop_0": "add_to_current_namespace",
                "debug_end_function": "end_debug_function",
                "debug_make_function_type_isra_0": "make_function_type",
                "debug_make_pointer_type_isra_0": "make_pointer_type",
                "debug_name_type": "name_debug_type",
                "debug_record_function": "record_debug_function",
                "debug_record_line": "record_debug_line",
                "debug_record_parameter": "record_debug_parameter",
                "debug_record_variable": "record_debug_variable",
                "debug_set_filename": "set_debug_filename",
                "debug_start_source": "start_debug_source",
                "debug_tag_type": "tag_debug_type",
                "fprintf": "print_formatted",
                "free": "deallocate_memory",
                "iVar5": "int_var5",
                "int": "int_value",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "lVar12": "long_var12",
                "lVar13": "long_var4",
                "lVar18": "long18",
                "local_40": "local_long_pointer_array",
                "local_48": "local_ptr48",
                "long": "long_value",
                "parse_stab_type": "parse_debug_type",
                "pcVar16": "ptr_var16",
                "pcVar8": "ptr_var8",
                "plVar7": "long_var7",
                "pplVar13": "pointer_pointer_variable13",
                "pplVar18": "pointer_pointer_long_var18",
                "puVar6": "ptr_var6",
                "stab_emit_pending_vars": "emit_pending_variables",
                "strchr": "find_char",
                "strcmp": "compare_strings",
                "strlen": "get_length",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "uVar17": "uint_var17",
                "uVar4": "undefined_var4",
                "uVar9": "undefined_var9",
                "ulong": "ulong_value",
                "undefined8": "undefined",
                "void": "void_type",
                "warn_stab": "warn_debug",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "(param_1 + 0x40)": {
                    "1": "pointer_to_data_array_address"
                },
                "(param_1 + 0x48)": {
                    "1": "loop_counter_address"
                },
                "(ulong)uVar1 + 0xc": {
                    "1": "comparison_index"
                },
                "(ulong)uVar1 + 2": {
                    "1": "array_index"
                },
                "(undefined4 *)(param_1 + 0x48)": {
                    "1": "counter_ptr"
                },
                "(undefined8 *)(param_1 + 0x40)": {
                    "1": "current_pointer_ptr"
                },
                "(undefined8 *)0x0": {
                    "2": "null"
                },
                "*(int *)(param_1 + 0x48)": {
                    "1": "loop_counter"
                },
                "*(uint *)(param_1 + 0x48)": {
                    "1": "counter"
                },
                "*(undefined8 *)(puVar2[1] + 8)": {
                    "1": "function_argument"
                },
                "*(undefined8 **)(param_1 + 0x40)": {
                    "1": "current_pointer"
                },
                "*puVar2": {
                    "1": "next_pointer"
                },
                "-1": {
                    "1": "invalid"
                },
                "0": {
                    "1": "zero"
                },
                "FUN_0010edb4": {
                    "1": "function1"
                },
                "FUN_00112502": {
                    "1": "check_threshold_and_return_status",
                    "2": "check_condition",
                    "3": "check_param",
                    "4": "process_data"
                },
                "cVar4": {
                    "1": "line_result",
                    "18": "result",
                    "2": "flag"
                },
                "param_1": {
                    "1": "input_array",
                    "2": "data",
                    "3": "arg1",
                    "7": "data_ptr"
                },
                "param_2": {
                    "1": "base_address",
                    "2": "data",
                    "3": "param_ptr",
                    "6": "param"
                },
                "param_3": {
                    "1": "line_number",
                    "2": "desired_value",
                    "3": "arg3",
                    "5": "limit",
                    "7": "threshold"
                },
                "param_4": {
                    "1": "param_4"
                },
                "puVar2": {
                    "1": "data",
                    "2": "array_pointer",
                    "3": "ptr",
                    "5": "array_ptr",
                    "6": "ptr_array"
                },
                "stab_lineno_lto_priv_0": {
                    "1": "helper_function",
                    "3": "check_line_number"
                },
                "uVar1": {
                    "1": "array_len",
                    "19": "index",
                    "6": "counter"
                },
                "uVar3": {
                    "1": "var",
                    "2": "temp_var",
                    "3": "temp_value",
                    "5": "result"
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f",
                "FUN_001135a5"
            ],
            "code": "\nundefined process_data_00112502(long data_ptr,undefined8 param,ulong threshold)\n\n{\n  uint index;\n  undefined8 *ptr_array;\n  undefined8 result;\n  char result;\n  \n  do {\n    ptr_array = *(undefined8 **)(data_ptr + 0x40);\n    if (ptr_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data_ptr + 0x48), index < 10 && (ptr_array[(ulong)index + 2] != -1))) {\n      if (threshold <= (ulong)ptr_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = check_line_number(param,*(undefined8 *)(ptr_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data_ptr + 0x48) = *(int *)(data_ptr + 0x48) + 1;\n    }\n    result = *ptr_array;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    *(undefined8 *)(data_ptr + 0x40) = result;\n  } while( true );\n}\n\n",
            "current_name": "process_data_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "process_data_00112502",
                "cVar4": "result",
                "param_1": "data_ptr",
                "param_2": "param",
                "param_3": "threshold",
                "puVar2": "ptr_array",
                "stab_lineno_lto_priv_0": "check_line_number",
                "uVar1": "index",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "*param_1": {
                    "1": "formats_array"
                },
                "*plVar2": {
                    "1": "current_format"
                },
                "FUN_0011256b": {
                    "1": "print_formatted_list",
                    "30": "print_matching_formats"
                },
                "__format": {
                    "1": "message_format",
                    "15": "format_string",
                    "2": "error_format",
                    "3": "format_message"
                },
                "_stderr": {
                    "1": "stderr",
                    "5": "standard_error"
                },
                "_stdout": {
                    "1": "stdout_stream",
                    "7": "standard_output"
                },
                "fputc": {
                    "1": "print_new_line"
                },
                "param_1": {
                    "1": "formatted_list",
                    "3": "matching_formats",
                    "6": "formats",
                    "8": "format_strings",
                    "9": "format_list"
                },
                "plVar2": {
                    "1": "format_pointer",
                    "15": "current_format",
                    "2": "current_format_string"
                },
                "uVar1": {
                    "1": "matching_formats",
                    "2": "default_format",
                    "4": "data"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001045e0",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *format_list)\n\n{\n  undefined8 data;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  data = DAT_00127600;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,data);\n  for (current_format = format_list; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(format_list);\n  print_new_line(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fputc": "print_new_line",
                "param_1": "format_list",
                "plVar2": "current_format",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "DAT_00127a50": {
                    "1": "formatted_string"
                },
                "DAT_00127a58": {
                    "1": "maximum_length"
                },
                "FUN_001125fa": {
                    "1": "construct_modified_filename",
                    "2": "generate_formatted_string",
                    "4": "get_modified_filename",
                    "5": "get_formatted_string"
                },
                "__assert_fail": {
                    "1": "assert_failure"
                },
                "__s": {
                    "1": "formatted_string",
                    "2": "result_string",
                    "3": "original_filename",
                    "4": "original_string",
                    "5": "input_string",
                    "8": "filename"
                },
                "param_1": {
                    "1": "binary_info",
                    "13": "arguments",
                    "2": "args",
                    "4": "input_params"
                },
                "ppcVar2": {
                    "1": "target_pointer",
                    "2": "archive_filename_ptr",
                    "7": "archive_filename"
                },
                "sVar3": {
                    "1": "file_pointer_length",
                    "2": "archive_length",
                    "3": "archive_len",
                    "6": "length1"
                },
                "sVar4": {
                    "1": "array2_length",
                    "2": "input_length",
                    "3": "filename_len",
                    "4": "filename_length",
                    "6": "length2"
                },
                "uVar1": {
                    "1": "new_length",
                    "12": "total_length",
                    "2": "modified_string_length",
                    "3": "total_len"
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00104300",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_001152b6"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive_filename;\n  size_t archive_filename_length;\n  size_t length2;\n  char *filename;\n  \n  if (arguments == (char **)0x0) {\n                    \n    assert_failure(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive_filename = (char **)arguments[0x1d];\n  filename = *arguments;\n  if ((archive_filename != (char **)0x0) && ((*(byte *)((long)archive_filename + 0x49) & 0x10) == 0)) {\n    archive_filename_length = strlen(*archive_filename);\n    length2 = strlen(filename);\n    total_length = archive_filename_length + 3 + length2;\n    if (DAT_00127a58 < total_length) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (total_length >> 1) + total_length;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    filename = DAT_00127a50;\n  }\n  return filename;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_failure",
                "__s": "filename",
                "param_1": "arguments",
                "ppcVar2": "archive_filename",
                "sVar3": "archive_filename_length",
                "sVar4": "length2",
                "uVar1": "total_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "FUN_001126c0": {
                    "1": "print_error_details",
                    "11": "print_error",
                    "16": "print_error_message",
                    "2": "print_bfd_error_message"
                },
                "iVar1": {
                    "1": "bfd_error_code",
                    "3": "error_code",
                    "4": "bfd_error",
                    "9": "error"
                },
                "in_AL": {
                    "1": "is_error",
                    "14": "flag",
                    "2": "input_flag",
                    "4": "condition"
                },
                "local_100": {
                    "1": "buf_size",
                    "2": "size1",
                    "6": "buffer_size",
                    "9": "buffer_size1"
                },
                "local_48": {
                    "1": "param14",
                    "2": "param12",
                    "3": "error8_copy"
                },
                "local_58": {
                    "1": "param7_copy",
                    "2": "error_param7_copy",
                    "3": "error_code7_copy"
                },
                "local_68": {
                    "1": "param12",
                    "2": "error_param6_copy",
                    "3": "error6_copy"
                },
                "local_78": {
                    "1": "error_code13",
                    "2": "param9",
                    "3": "error5_copy"
                },
                "local_88": {
                    "1": "flags2",
                    "2": "error_param4_copy",
                    "3": "error4_copy"
                },
                "local_98": {
                    "1": "error_code3_backup",
                    "2": "param7",
                    "3": "error3_copy"
                },
                "local_a8": {
                    "1": "local_arg4",
                    "2": "error_code2",
                    "3": "error_code2_copy"
                },
                "local_b8": {
                    "1": "temp1",
                    "2": "error_param1_copy",
                    "3": "error_code1_copy"
                },
                "local_c0": {
                    "1": "localized_err_msg2",
                    "10": "param14_copy",
                    "3": "local_param14"
                },
                "local_c8": {
                    "1": "localized_err_msg1",
                    "10": "param13_copy",
                    "3": "param3"
                },
                "local_e8": {
                    "1": "stack_array",
                    "10": "local_buffer",
                    "4": "local_array",
                    "5": "buffer"
                },
                "local_f0": {
                    "1": "stack_var",
                    "2": "local_var4",
                    "3": "ptr2",
                    "6": "local_buffer"
                },
                "local_f8": {
                    "1": "temp1",
                    "2": "local_ptr_1",
                    "3": "stack_pointer"
                },
                "local_fc": {
                    "1": "buffer_size_2",
                    "2": "size2",
                    "9": "buffer_size2"
                },
                "param_1": {
                    "1": "message_code",
                    "11": "error_code1",
                    "3": "error_param1",
                    "4": "error_code",
                    "5": "error1"
                },
                "param_10": {
                    "1": "archive_ptr",
                    "12": "archive",
                    "2": "archive_file",
                    "3": "error_flag"
                },
                "param_11": {
                    "1": "error_data",
                    "3": "param11",
                    "4": "error_flag"
                },
                "param_12": {
                    "1": "error_message_param",
                    "10": "error_message",
                    "3": "error_message_format",
                    "8": "format_string"
                },
                "param_13": {
                    "1": "cause_of_error_unknown",
                    "17": "param13",
                    "2": "param_13",
                    "4": "param1"
                },
                "param_14": {
                    "1": "error_message2",
                    "17": "param14",
                    "2": "param_14",
                    "4": "param2"
                },
                "param_2": {
                    "1": "machine",
                    "12": "error_code2",
                    "3": "error_param2",
                    "4": "param2",
                    "5": "error2"
                },
                "param_3": {
                    "1": "error_3",
                    "12": "error_code3",
                    "3": "error_param3",
                    "4": "param3",
                    "5": "error3"
                },
                "param_4": {
                    "1": "flags",
                    "12": "error_code4",
                    "3": "error_param4",
                    "4": "param4",
                    "5": "error4"
                },
                "param_5": {
                    "1": "arg5",
                    "12": "error_code5",
                    "3": "error_param5",
                    "4": "param5",
                    "5": "error5"
                },
                "param_6": {
                    "1": "dynamic",
                    "12": "error_code6",
                    "3": "error_param6",
                    "4": "param6",
                    "5": "error6"
                },
                "param_7": {
                    "1": "error_7",
                    "12": "error_code7",
                    "3": "error_param7",
                    "4": "param7",
                    "5": "error7"
                },
                "param_8": {
                    "1": "error_8",
                    "12": "error_code8",
                    "3": "error_param8",
                    "4": "param8",
                    "5": "error8"
                },
                "param_9": {
                    "1": "file_name",
                    "10": "archive_filename",
                    "3": "archive_file",
                    "4": "filename",
                    "5": "archive_file_name"
                },
                "uVar2": {
                    "1": "error_details",
                    "15": "error_message",
                    "2": "error_string",
                    "4": "error_msg"
                }
            },
            "called": [
                "FUN_00104800",
                "FUN_00104370",
                "FUN_001045e0",
                "FUN_001125fa",
                "FUN_00104770",
                "FUN_00104240",
                "FUN_001047a0",
                "FUN_001044b0",
                "FUN_00104310"
            ],
            "calling": [
                "FUN_0010551d",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104d25",
                "FUN_00107880",
                "FUN_001086af",
                "FUN_0010808f",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid print_error_message_001126c0(undefined4 error_code1,undefined4 error_code2,undefined4 error_code3,undefined4 error_code4,\n                 undefined4 error_code5,undefined4 error_code6,undefined4 error_code7,undefined4 error_code8,\n                 long archive_filename,long archive,long *error_flag,char *error_message,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 error_message;\n  undefined4 buffer_size1;\n  undefined4 buffer_size2;\n  undefined *stack_pointer;\n  undefined *local_buffer;\n  undefined local_buffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code1_copy;\n  undefined4 error_code2_copy;\n  undefined4 error_code3_copy;\n  undefined4 error_code4_copy;\n  undefined4 error_code5_copy;\n  undefined4 error_code6_copy;\n  undefined4 error_code7_copy;\n  undefined4 error_code8_copy;\n  \n  if (flag != '\\0') {\n    error_code1_copy = error_code1;\n    error_code2_copy = error_code2;\n    error_code3_copy = error_code3;\n    error_code4_copy = error_code4;\n    error_code5_copy = error_code5;\n    error_code6_copy = error_code6;\n    error_code7_copy = error_code7;\n    error_code8_copy = error_code8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (archive != 0) {\n    if (archive_filename == 0) {\n      archive_filename = bfd_get_archive_filename(archive);\n    }\n    if ((error_flag != (long *)0x0) && (*error_flag != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archive_filename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archive_filename);\nLAB_001127c1:\n  if (error_message != (char *)0x0) {\n    stack_pointer = &stack0x00000008;\n    local_buffer = local_buffer;\n    buffer_size1 = 0x20;\n    buffer_size2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,error_message,&buffer_size1);\n  }\n  fprintf(_stderr,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "iVar1": "error",
                "in_AL": "flag",
                "local_100": "buffer_size1",
                "local_48": "error_code8_copy",
                "local_58": "error_code7_copy",
                "local_68": "error_code6_copy",
                "local_78": "error_code5_copy",
                "local_88": "error_code4_copy",
                "local_98": "error_code3_copy",
                "local_a8": "error_code2_copy",
                "local_b8": "error_code1_copy",
                "local_c0": "param14_copy",
                "local_c8": "param13_copy",
                "local_e8": "local_buffer",
                "local_f0": "local_buffer",
                "local_f8": "stack_pointer",
                "local_fc": "buffer_size2",
                "param_1": "error_code1",
                "param_10": "archive",
                "param_11": "error_flag",
                "param_12": "error_message",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "error_code2",
                "param_3": "error_code3",
                "param_4": "error_code4",
                "param_5": "error_code5",
                "param_6": "error_code6",
                "param_7": "error_code7",
                "param_8": "error_code8",
                "param_9": "archive_filename",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "0x0": {
                    "1": "null"
                },
                "0x4000": {
                    "1": "s_ifdir"
                },
                "FUN_0011283f": {
                    "1": "validate_and_get_directory",
                    "3": "check_directory_permissions",
                    "4": "check_directory_permission",
                    "9": "check_directory_access"
                },
                "iVar1": {
                    "1": "access_status",
                    "19": "access_result"
                },
                "param_1": {
                    "1": "path_to_check",
                    "12": "directory_path",
                    "2": "filename",
                    "7": "file_path",
                    "9": "path"
                },
                "param_2": {
                    "1": "current_directory",
                    "10": "directory_path",
                    "6": "directory",
                    "7": "default_directory"
                },
                "sStack_a8": {
                    "1": "stat_result",
                    "2": "stat_buffer",
                    "3": "stat_info",
                    "5": "file_info",
                    "8": "file_stat"
                }
            },
            "called": [
                "FUN_001044f0",
                "FUN_00104740"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *directory_path)\n\n{\n  int access_result;\n  stat file_stats;\n  \n  if ((directory_path == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stats);\n      if ((access_result == 0) && ((file_stats.st_mode & 0xf000) == 0x4000)) {\n        directory_path = directory_path;\n      }\n    }\n  }\n  return directory_path;\n}\n\n",
            "current_name": "check_directory_access_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "iVar1": "access_result",
                "param_1": "directory_path",
                "param_2": "directory_path",
                "sStack_a8": "file_stats"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "1": "initialize_data",
                    "14": "initialize_data_structure",
                    "2": "allocate_and_initialize_memory",
                    "3": "create_data_structure"
                },
                "bVar4": {
                    "1": "temp_byte",
                    "10": "byte_value",
                    "2": "offset",
                    "3": "byte_var",
                    "4": "byte_counter"
                },
                "lVar3": {
                    "1": "iteration_count",
                    "22": "loop_counter",
                    "5": "counter"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "data_1",
                    "3": "input1",
                    "4": "data"
                },
                "param_2": {
                    "1": "default_value",
                    "11": "flag",
                    "2": "data_2",
                    "3": "input2",
                    "4": "data2"
                },
                "param_3": {
                    "1": "input_value1",
                    "2": "value_3",
                    "3": "input3",
                    "4": "data3",
                    "5": "param3"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "value_4",
                    "3": "input4",
                    "4": "data4",
                    "5": "param4"
                },
                "puVar1": {
                    "1": "data",
                    "14": "data_structure",
                    "2": "array_ptr",
                    "3": "allocated_memory"
                },
                "puVar2": {
                    "1": "current_block",
                    "2": "current_position",
                    "3": "current_pointer",
                    "4": "pointer",
                    "5": "temp_ptr"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 data,undefined flag,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *data_structure;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  data_structure = (undefined8 *)allocate_memory(0x1b0);\n  temp_ptr = data_structure;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_value * -8 + 4);\n  }\n  *data_structure = data;\n  *(undefined *)(data_structure + 1) = flag;\n  data_structure[2] = param3;\n  data_structure[3] = param4;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  temp_ptr = (undefined8 *)allocate_memory(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return data_structure;\n}\n\n",
            "current_name": "initialize_data_structure_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "bVar4": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_structure",
                "puVar2": "temp_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "allocate_and_initialize_data",
                    "12": "initialize_data",
                    "2": "initialize_memory",
                    "3": "initialize_memory_block",
                    "9": "initialize_data_structure"
                },
                "param_1": {
                    "1": "source",
                    "12": "value1",
                    "2": "input_value1",
                    "4": "data1"
                },
                "param_2": {
                    "1": "input2",
                    "12": "value2",
                    "2": "input_value2",
                    "4": "data2"
                },
                "puVar1": {
                    "1": "data_block",
                    "2": "new_data_structure",
                    "4": "data_pointer",
                    "8": "allocated_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_00113da9",
                "FUN_0010c892",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113df2",
                "FUN_0010c218",
                "FUN_0010b0fa",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113bfa",
                "FUN_00113e23",
                "FUN_00113d6e",
                "FUN_00113ce0"
            ],
            "code": "\nvoid initialize_data_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocated_memory;\n  \n  allocated_memory = (undefined4 *)allocate_memory(0x18);\n  *allocated_memory = value1;\n  allocated_memory[1] = value2;\n  *(undefined (*) [16])(allocated_memory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "current_name": "initialize_data_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "*(undefined (**) [16])(*pauVar2 + 8)": {
                    "1": "assign_array_ptr_to_first_element_ptr"
                },
                "*(undefined8 *)(puVar1 + 2)": {
                    "1": "assign_value_to_element"
                },
                "**(undefined8 **)(*pauVar2 + 8)": {
                    "1": "assign_new_array_to_first_element"
                },
                "*pauVar2": {
                    "1": "first_element_of_existing_array"
                },
                "0x0": {
                    "1": "null_ptr"
                },
                "FUN_00112925": {
                    "1": "initialize_structure",
                    "15": "initialize_memory",
                    "4": "initialize_array",
                    "9": "initialize_data_structure"
                },
                "ZEXT816": {
                    "1": "zero_array"
                },
                "bVar5": {
                    "1": "bit_variable",
                    "10": "flag",
                    "2": "byte_var",
                    "3": "temp_byte",
                    "4": "byte_value"
                },
                "lVar3": {
                    "1": "loop_variable",
                    "21": "loop_counter",
                    "4": "iteration",
                    "5": "counter"
                },
                "param_1": {
                    "1": "memory_pointer",
                    "2": "data_structure_ptr",
                    "3": "array_ptr",
                    "5": "array_pointer",
                    "6": "memory_array"
                },
                "param_2": {
                    "1": "param",
                    "13": "value",
                    "2": "param2_value",
                    "3": "value1",
                    "5": "param_value"
                },
                "param_3": {
                    "1": "param_b",
                    "13": "param3",
                    "2": "param_value2",
                    "3": "param3_value"
                },
                "param_4": {
                    "1": "param_c",
                    "13": "param4",
                    "2": "param_value3",
                    "3": "param4_value"
                },
                "pauVar2": {
                    "1": "existing_structure",
                    "10": "existing_array",
                    "2": "temp_array",
                    "4": "existing_memory"
                },
                "puVar1": {
                    "1": "new_data_ptr",
                    "2": "data",
                    "3": "memory",
                    "4": "array",
                    "5": "allocated_memory",
                    "6": "memory_ptr"
                },
                "puVar1[5]": {
                    "1": "assign_param3_to5th_element"
                },
                "puVar1[6]": {
                    "1": "assign_param4_to6th_element"
                },
                "puVar4": {
                    "1": "current_position",
                    "2": "current_pointer",
                    "3": "current_ptr",
                    "4": "current_element",
                    "5": "current_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c218",
                "FUN_00112996",
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010bc80"
            ],
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**memory_array) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *memory_ptr;\n  undefined (*existing_array) [16];\n  long loop_counter;\n  undefined4 *current_memory;\n  byte flag;\n  \n  flag = 0;\n  memory_ptr = (undefined4 *)allocate_memory(0x28);\n  current_memory = memory_ptr;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_memory = 0;\n    current_memory = current_memory + (ulong)flag * -2 + 1;\n  }\n  existing_array = *memory_array;\n  *(undefined8 *)(memory_ptr + 2) = value;\n  assign_param3_to5th_element = param3;\n  assign_param4_to6th_element = param4;\n  if (existing_array == (undefined (*) [16])0x0) {\n    existing_array = (undefined (*) [16])allocate_memory(0x10);\n    *existing_array = zero_extend(0);\n    *memory_array = existing_array;\n    *(undefined (**) [16])(*existing_array + 8) = existing_array;\n  }\n  **(undefined8 **)(*existing_array + 8) = memory_ptr;\n  *(undefined4 **)(*existing_array + 8) = memory_ptr;\n  return memory_ptr;\n}\n\n",
            "current_name": "initialize_memory_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "ZEXT816": "zero_extend",
                "bVar5": "flag",
                "lVar3": "loop_counter",
                "param_1": "memory_array",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_array",
                "puVar1": "memory_ptr",
                "puVar1[5]": "assign_param3_to5th_element",
                "puVar1[6]": "assign_param4_to6th_element",
                "puVar4": "current_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112996": {
                    "1": "add_value_to_namespace",
                    "14": "add_to_current_namespace",
                    "2": "add_to_debug_namespace",
                    "3": "add_debug_to_namespace",
                    "5": "add_to_namespace"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "dcgettext": {
                    "2": "get_error_message"
                },
                "lVar2": {
                    "1": "pointer_offset",
                    "16": "offset",
                    "2": "file_offset",
                    "3": "temp_var"
                },
                "param_1": {
                    "1": "file_data_ptr",
                    "2": "file_descriptor",
                    "4": "debug_info",
                    "5": "file_ptr",
                    "6": "namespace_ptr"
                },
                "param_2": {
                    "1": "param_address",
                    "10": "param_2",
                    "2": "data_1",
                    "7": "param2"
                },
                "param_3": {
                    "1": "var",
                    "11": "param_3",
                    "2": "data_2",
                    "8": "param3"
                },
                "uVar1": {
                    "1": "return_value",
                    "29": "result"
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long namespace_ptr,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(namespace_ptr + 8) != 0) && (*(long *)(namespace_ptr + 0x10) != 0)) {\n    offset = *(long *)(namespace_ptr + 0x10) + 0x10;\n    if (*(long *)(namespace_ptr + 0x20) != 0) {\n      offset = *(long *)(namespace_ptr + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(offset,param_2,param_3,3);\n    return result;\n  }\n  result = get_error_message(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(error_output_stream,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "add_to_current_namespace_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "_stderr": "error_output_stream",
                "dcgettext": "get_error_message",
                "lVar2": "offset",
                "param_1": "namespace_ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "((undefined8 *)*puVar1)[1]": {
                    "1": "second_element_of_pointer_to_nested_array"
                },
                "(int *)0x0": {
                    "1": "null_pointer"
                },
                "(param_1 != piVar2) && (param_1 = piVar2, piVar2 != (int *)0x0)": {
                    "1": "loop_condition"
                },
                "(undefined8 *)*puVar1": {
                    "1": "ptr_to_value_array"
                },
                "(undefined8 *)*puVar1)[1]": {
                    "1": "value"
                },
                "*((undefined8 *)nested_array_address + 1)": {
                    "1": "second_element"
                },
                "*(*(int ***)(undefined8 *)*puVar1)": {
                    "1": "ptr_to_int_ptr"
                },
                "*(undefined8 *)(**(long **)(param_1 + 4) + 8)": {
                    "1": "dereferenced_value"
                },
                "**(int ***)(undefined8 *)*puVar1": {
                    "1": "pointer_to_current_list_element"
                },
                "**(long **)(param_1 + 4)": {
                    "1": "ptr_to_long_ptr"
                },
                "*param_1": {
                    "1": "value_at_index_0"
                },
                "FUN_001129f4": {
                    "1": "reverse_and_extract",
                    "2": "extract_value_from_binary",
                    "3": "extract_data_from_binary"
                },
                "param_1": {
                    "1": "data",
                    "15": "input_array",
                    "2": "array",
                    "3": "binary_data"
                },
                "param_1 != piVar2": {
                    "1": "input_pointer_not_equal_to_current_array"
                },
                "piVar2": {
                    "1": "temp_array_ptr",
                    "6": "current_ptr",
                    "7": "current_pointer"
                },
                "puVar1": {
                    "1": "ptr_to_second_element",
                    "2": "ptr_to_data_array",
                    "3": "data_ptr",
                    "4": "pointer",
                    "7": "array_pointer"
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "code": "\nundefined8 extract_data_from_binary_001129f4(int *input_array)\n\n{\n  undefined8 *array_pointer;\n  int *current_pointer;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    array_pointer = (undefined8 *)(input_array + 4);\n    current_pointer = **(int ***)(undefined8 *)*array_pointer;\n  } while ((input_array != current_pointer) && (input_array = current_pointer, current_pointer != (int *)0x0));\n  return ((undefined8 *)*array_pointer)[1];\n}\n\n",
            "current_name": "extract_data_from_binary_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "extract_data_from_binary_001129f4",
                "param_1": "input_array",
                "piVar2": "current_pointer",
                "puVar1": "array_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "FUN_0010bd62": {
                    "2": "debug_name_type"
                },
                "FUN_0010c05d": {
                    "2": "debug_tag_type"
                },
                "FUN_0010c218": {
                    "1": "coff_get_adjacent_slot"
                },
                "FUN_0010c6be": {
                    "1": "coff_get_slot_name"
                },
                "FUN_0010da0b": {
                    "1": "name_type_record"
                },
                "FUN_00112a33": {
                    "1": "record_debug_data",
                    "15": "record_debug_info",
                    "3": "process_debug_record",
                    "7": "record_debug_information"
                },
                "coffSlot": {
                    "1": "slot"
                },
                "coff_get_slot_lto_priv_0": {
                    "1": "get_slot_lto_private_coff",
                    "4": "get_slot"
                },
                "debug_name_type": {
                    "1": "get_name_type_debug",
                    "2": "get_name_type",
                    "4": "name_type"
                },
                "debug_record_parameter": {
                    "2": "record_parameter_debug",
                    "7": "record_parameter"
                },
                "debug_record_variable": {
                    "2": "record_variable_debug",
                    "7": "record_variable"
                },
                "debug_tag_type": {
                    "1": "tag_debug_type",
                    "2": "get_tag_type",
                    "5": "tag_type"
                },
                "false": {
                    "1": "false"
                },
                "lVar2": {
                    "1": "debug_type_result",
                    "11": "type",
                    "2": "debug_result",
                    "4": "result",
                    "5": "type_value",
                    "6": "type_result"
                },
                "param_1": {
                    "1": "unknown_param_1",
                    "12": "arg1",
                    "6": "param1",
                    "7": "param_1"
                },
                "param_2": {
                    "1": "object_ptr",
                    "12": "arg2",
                    "2": "param_2",
                    "5": "param2"
                },
                "param_3": {
                    "1": "symbol_address",
                    "12": "arg3",
                    "6": "param3",
                    "8": "param_3"
                },
                "param_4": {
                    "1": "debug_param",
                    "2": "debug_code",
                    "3": "param4",
                    "7": "debug_type"
                },
                "param_5": {
                    "1": "variable_data",
                    "2": "debug_data",
                    "4": "arg4",
                    "5": "param5",
                    "6": "arg5"
                },
                "param_6": {
                    "1": "debug_info2",
                    "4": "arg5",
                    "6": "param6",
                    "7": "arg6"
                },
                "param_7": {
                    "1": "unknown_param_7",
                    "2": "flags",
                    "3": "arg6",
                    "5": "arg7",
                    "6": "param_7"
                },
                "plVar3": {
                    "1": "coff_slot_ptr",
                    "2": "type_slot",
                    "3": "type_pointer",
                    "5": "slot_ptr",
                    "6": "coff_slot",
                    "7": "slot"
                },
                "switchD_00112a73_caseD_2": {
                    "1": "case2"
                },
                "true": {
                    "1": "true"
                },
                "uVar1": {
                    "1": "success",
                    "26": "result",
                    "4": "return_value"
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010bd62",
                "FUN_0010da0b"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool record_debug_info_00112a33(undefined8 arg1,long arg2,undefined8 arg3,byte debug_type,undefined8 arg5\n                 ,undefined8 arg6,uint param7)\n\n{\n  undefined result;\n  long type;\n  long *slot;\n  \n  if (debug_type < 0x12) {\n    if (debug_type != 0) {\n      switch(debug_type) {\n      case 1:\n        result = record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,4,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto case2;\n      case 3:\n        result = record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,(param7 & 0xff) + 2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,5,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = record_parameter\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,1,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type = tag_type(arg5,*(undefined8 *)(arg2 + 8));\n        if (type == 0) {\n          return false;\n        }\n        slot = (long *)get_slot(arg1,arg3);\n        *slot = type;\n        break;\n      case 0xd:\n        type = name_type(arg5,*(undefined8 *)(arg2 + 8));\n        return type != 0;\n      case 0x11:\n        result = record_parameter\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (debug_type == 0x7f) {\ncase2:\n    result = record_variable\n                      (arg5,*(undefined8 *)(arg2 + 8),arg6,1,\n                       *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "record_debug_info_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "coff_get_slot_lto_priv_0": "get_slot",
                "debug_name_type": "name_type",
                "debug_record_parameter": "record_parameter",
                "debug_record_variable": "record_variable",
                "debug_tag_type": "tag_type",
                "lVar2": "type",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "debug_type",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "param7",
                "plVar3": "slot",
                "switchD_00112a73_caseD_2": "case2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "1": "find_debug_real_type",
                    "3": "find_circular_debug_info"
                },
                "F_UNK_00112b6e": {
                    "1": "check_debug_circular_information"
                },
                "__format": {
                    "1": "type_format",
                    "16": "format_string",
                    "2": "debug_info_format",
                    "5": "error_message_format"
                },
                "_stderr": {
                    "1": "error_output"
                },
                "bVar5": {
                    "1": "circular_check",
                    "25": "is_circular"
                },
                "iVar1": {
                    "1": "input_value",
                    "10": "array_length",
                    "2": "value",
                    "3": "array_value",
                    "8": "array_size"
                },
                "local_10": {
                    "1": "original_input_array",
                    "2": "current_input_array",
                    "3": "temp_input_array",
                    "6": "current_array"
                },
                "local_18": {
                    "1": "current_debug_info",
                    "2": "visited_debug_info",
                    "3": "debug_info_stack"
                },
                "param_1": {
                    "31": "input_array"
                },
                "param_2": {
                    "1": "debug_info_list",
                    "17": "debug_info",
                    "2": "debug_information",
                    "9": "debug_info_array"
                },
                "piVar3": {
                    "1": "result_ptr",
                    "12": "result",
                    "15": "result_array"
                },
                "plVar4": {
                    "1": "current_node",
                    "16": "current_debug_info",
                    "3": "current_info",
                    "4": "debug_info_ptr"
                },
                "uVar2": {
                    "1": "circular_type_name",
                    "19": "type_name"
                }
            },
            "called": [
                "FUN_001129f4",
                "FUN_00104240",
                "FUN_00112b6e",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nint * find_circular_debug_info_00112b6e(int *input_array,long *debug_info)\n\n{\n  int array_length;\n  undefined8 type_name;\n  char *format_string;\n  int *result_array;\n  long *current_debug_info;\n  bool is_circular;\n  long *debug_info_stack;\n  int *current_array;\n  \n  array_length = *input_array;\n  if ((array_length != 1) && (1 < array_length - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      type_name = debug_get_type_name_constprop_0\n                        (input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(error_output,format_string,type_name);\n      return (int *)0x0;\n    }\n  }\n  debug_info_stack = debug_info;\n  current_array = input_array;\n  if (array_length - 0x16U < 2) {\n    result_array = (int *)find_circular_debug_info_00112b6e((*(undefined8 **)(input_array + 4))[1],&debug_info_stack);\n    return result_array;\n  }\n  result_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result_array) {\n    return input_array;\n  }\n  if (result_array == (int *)0x0) {\n    return input_array;\n  }\n  result_array = (int *)find_circular_debug_info_00112b6e(result_array,&debug_info_stack);\n  return result_array;\n}\n\n",
            "current_name": "find_circular_debug_info_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "find_circular_debug_info_00112b6e",
                "__format": "format_string",
                "_stderr": "error_output",
                "bVar5": "is_circular",
                "iVar1": "array_length",
                "local_10": "current_array",
                "local_18": "debug_info_stack",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result_array",
                "plVar4": "current_debug_info",
                "uVar2": "type_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00112c1f": {
                    "1": "process_data_type",
                    "2": "reconstruct_type"
                },
                "bVar14": {
                    "1": "is_equal",
                    "10": "bool_var",
                    "2": "var14",
                    "3": "bool_value",
                    "7": "bool_var14"
                },
                "bVar15": {
                    "1": "bool_var"
                },
                "cVar15": {
                    "1": "flag4"
                },
                "cVar5": {
                    "1": "temp_char",
                    "2": "char_value",
                    "6": "char_var5",
                    "7": "flag",
                    "9": "char_var"
                },
                "cVar6": {
                    "1": "flag1"
                },
                "iVar10": {
                    "1": "var10"
                },
                "iVar17": {
                    "1": "flag6"
                },
                "iVar18": {
                    "1": "flag7"
                },
                "iVar9": {
                    "1": "integer",
                    "2": "int_value",
                    "5": "int_var",
                    "6": "int_var9"
                },
                "lVar2": {
                    "1": "var_value",
                    "2": "local_var2",
                    "5": "var2"
                },
                "local_3c": {
                    "1": "count",
                    "2": "local_var_3c",
                    "3": "local_value",
                    "6": "local_var3c",
                    "9": "local_var"
                },
                "param_1": {
                    "1": "input_param1",
                    "13": "param_address",
                    "2": "param",
                    "4": "param1",
                    "7": "base_address"
                },
                "param_2": {
                    "1": "input_param2",
                    "10": "param2",
                    "12": "param_value",
                    "6": "param_2"
                },
                "param_3": {
                    "1": "debug_type",
                    "14": "param_array",
                    "2": "param_3",
                    "3": "type_array"
                },
                "param_4": {
                    "1": "param_length",
                    "2": "data",
                    "4": "param_data",
                    "5": "param_4",
                    "7": "param4"
                },
                "piVar6": {
                    "1": "int_var6",
                    "2": "ptr6",
                    "3": "pointer_var6"
                },
                "piVar7": {
                    "1": "pointer5"
                },
                "plVar1": {
                    "1": "pointer_value1",
                    "2": "ptr_array",
                    "3": "pointer1",
                    "8": "pointer_var1"
                },
                "puVar11": {
                    "1": "pointer6"
                },
                "puVar3": {
                    "1": "pointer_var2",
                    "2": "ptr3",
                    "3": "pointer2",
                    "4": "ptr_var3",
                    "7": "pointer_var3"
                },
                "puVar4": {
                    "1": "pointer_to_var4",
                    "2": "ptr4",
                    "3": "pointer3",
                    "4": "ptr_var4",
                    "7": "pointer_var4"
                },
                "puVar5": {
                    "1": "pointer4"
                },
                "uVar10": {
                    "1": "output_var3",
                    "2": "u_var10",
                    "3": "var10"
                },
                "uVar11": {
                    "1": "updated_var11",
                    "2": "return_value2",
                    "4": "var11"
                },
                "uVar12": {
                    "1": "var2",
                    "2": "u_var12",
                    "5": "var12"
                },
                "uVar13": {
                    "1": "u_variable13",
                    "2": "u_var13",
                    "3": "uint_var",
                    "5": "var13"
                },
                "uVar14": {
                    "1": "var14"
                },
                "uVar16": {
                    "1": "flag5"
                },
                "uVar7": {
                    "1": "var2",
                    "10": "result",
                    "7": "return_value"
                },
                "uVar8": {
                    "1": "string1",
                    "2": "var2",
                    "3": "value1",
                    "4": "var8"
                },
                "uVar9": {
                    "1": "value2"
                }
            },
            "called": [
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_0010a69a",
                "FUN_001040a0",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010adf2",
                "FUN_0010ae0e",
                "FUN_0010a0e9",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a77a",
                "FUN_0010a0d3",
                "FUN_00104240",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_00109dfe",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_00104300",
                "FUN_0010a181",
                "FUN_00112c1f",
                "FUN_0010a083",
                "FUN_0010a0bd",
                "FUN_0010ab4d",
                "FUN_00109bbb",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010bba1",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001135a5"
            ],
            "code": "\n\n\nundefined8 reconstruct_type_00112c1f(ulong param_address,undefined8 param_value,int *param_array,long param4)\n\n{\n  long *pointer_var1;\n  long var2;\n  undefined8 *pointer_var3;\n  undefined8 *pointer_var4;\n  char char_var;\n  int *int_var;\n  undefined8 result;\n  undefined8 var8;\n  int int_var9;\n  undefined4 var10;\n  undefined8 var11;\n  ulong var12;\n  uint var13;\n  bool bool_var;\n  uint local_var;\n  \n  var12 = param_address;\nLAB_00112c39:\n  if (param_array != (int *)0x0) {\n    int_var9 = *param_array;\n    if (int_var9 - 0x16U < 2) {\n      do {\n        pointer_var1 = *(long **)(param_array + 4);\n        var13 = *(uint *)(param_address + 0x30);\n        var12 = (ulong)var13;\n        var2 = *pointer_var1;\n        if (*(uint *)(var2 + 0x10) == var13) {\n          if (int_var9 == 0x16) {\n            result = stab_typedef_type_lto_priv_0(param_value,*(undefined8 *)(var2 + 8));\n            return result;\n          }\nLAB_00112c94:\n          int_var = (int *)debug_get_real_type_isra_0(param_array,0);\n          if (int_var == (int *)0x0) goto LAB_00112dd6;\n          if ((*int_var - 7U < 4) && (*(long *)(int_var + 4) != 0)) {\n            if ((*(uint *)(*(long *)(int_var + 4) + 0xc) <= *(uint *)(param_address + 0x38)) &&\n               (char_var = debug_set_class_id_lto_priv_0\n                                  (param_address,*(undefined8 *)(**(long **)(param_array + 4) + 8),int_var),\n               char_var == '\\0')) {\n              return 0;\n            }\n            var13 = *(uint *)(*(long *)(int_var + 4) + 0xc);\n          }\n          else {\n            var13 = 0;\n          }\n          int_var9 = *int_var;\n          result = *(undefined8 *)(**(long **)(param_array + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (int_var9 == 0x17) {\n          if (var2 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = var13;\n          param4 = *pointer_var1;\n          param_array = (int *)pointer_var1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = var13;\n        }\n        param_array = (int *)pointer_var1[1];\n        if (param_array == (int *)0x0) goto LAB_00112dd6;\n        int_var9 = *param_array;\n        param4 = 0;\n      } while (int_var9 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param_address + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(int_var9) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(param_value);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(param_value,param_array[1],*(undefined *)(param_array + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(param_value,param_array[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(param_value,param_array[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(param_value,param_array[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param_array + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_array + 4) + 0xc) <= *(uint *)(param_address + 0x38)) &&\n           (char_var = debug_set_class_id_lto_priv_0(param_address,result,param_array), char_var == '\\0')) {\n          return 0;\n        }\n        var2 = *(long *)(param_array + 4);\n        if (*(int *)(param_address + 0x30) == *(int *)(var2 + 8)) {\n          var13 = *(uint *)(var2 + 0xc);\n          if (var13 <= *(uint *)(param_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          int_var9 = *param_array;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(param_value,result,var13,int_var9);\n          return result;\n        }\n        *(int *)(var2 + 8) = *(int *)(param_address + 0x30);\n      }\n      var10 = 0;\n      if (*(long *)(param_array + 4) != 0) {\n        var10 = *(undefined4 *)(*(long *)(param_array + 4) + 0xc);\n      }\n      char_var = stab_start_struct_type_lto_priv_0(param_value,result,var10,*param_array == 7,param_array[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_array + 4) != (long *)0x0) && (var12 = 0, **(long **)(param_array + 4) != 0)) {\n        while( true ) {\n          pointer_var4 = *(undefined8 **)(**(long **)(param_array + 4) + var12 * 8);\n          if (pointer_var4 == (undefined8 *)0x0) break;\n          char_var = reconstruct_type_00112c1f(param_address,param_value,pointer_var4[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = stab_struct_field_lto_priv_0\n                            (param_value,*pointer_var4,*(undefined4 *)(pointer_var4 + 3),\n                             *(undefined4 *)((long)pointer_var4 + 0x1c),*(undefined4 *)(pointer_var4 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          var12 = (ulong)((int)var12 + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(param_value);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param_array + 4) == 0) {\n        var13 = 0;\n        int_var = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_array + 4) + 0xc) <= *(uint *)(param_address + 0x38)) &&\n           (var12 = param_address, char_var = debug_set_class_id_lto_priv_0(param_address,result,param_array),\n           char_var == '\\0')) {\n          return 0;\n        }\n        var2 = *(long *)(param_array + 4);\n        var13 = *(uint *)(var2 + 0xc);\n        if (*(int *)(param_address + 0x30) == *(int *)(var2 + 8)) {\n          if (var13 <= *(uint *)(param_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          int_var9 = *param_array;\n          goto LAB_00112ed2;\n        }\n        int_var = *(int **)(var2 + 0x20);\n        *(int *)(var2 + 8) = *(int *)(param_address + 0x30);\n        if (((int_var != (int *)0x0) && (param_array != int_var)) &&\n           (var12 = param_address, char_var = reconstruct_type_00112c1f(param_address,param_value,int_var,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = stab_start_class_type_lto_priv_0\n                        (param_value,result,var13,*param_array == 9,param_array[1],int_var != (int *)0x0,\n                         param_array == int_var,var12);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_array + 4) != (long *)0x0) {\n        var13 = 0;\n        if (**(long **)(param_array + 4) != 0) {\n          while (pointer_var4 = *(undefined8 **)(**(long **)(param_array + 4) + (ulong)var13 * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = reconstruct_type_00112c1f(param_address,param_value,pointer_var4[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointer_var4 + 0x14) == '\\0') {\n              char_var = stab_struct_field_lto_priv_0(param_value,*pointer_var4,*(undefined4 *)(pointer_var4 + 3));\n            }\n            else {\n              char_var = stab_class_static_member_lto_priv_0(param_value,*pointer_var4,pointer_var4[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            var13 = var13 + 1;\n          }\n        }\n        var13 = 0;\n        if (*(long *)(*(long *)(param_array + 4) + 0x10) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_array + 4) + 0x10) + (ulong)var13 * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = reconstruct_type_00112c1f(param_address,param_value,*pointer_var4,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = stab_class_baseclass_lto_priv_0\n                              (param_value,*(undefined4 *)(pointer_var4 + 1),\n                               *(undefined *)((long)pointer_var4 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            var13 = var13 + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(param_array + 4) + 0x18) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_array + 4) + 0x18) + (ulong)local_var * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = stab_class_start_method_lto_priv_0(param_value,*pointer_var4);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            var13 = 0;\n            while (pointer_var3 = *(undefined8 **)(pointer_var4[1] + (ulong)var13 * 8),\n                  pointer_var3 != (undefined8 *)0x0) {\n              if ((pointer_var3[4] != 0) &&\n                 (char_var = reconstruct_type_00112c1f(param_address,param_value,pointer_var3[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = reconstruct_type_00112c1f(param_address,param_value,pointer_var3[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (pointer_var3[3] == -1) {\n                char_var = stab_class_static_method_variant_lto_priv_0\n                                  (param_value,*pointer_var3,*(undefined4 *)(pointer_var3 + 2),\n                                   *(undefined *)((long)pointer_var3 + 0x14),\n                                   *(undefined *)((long)pointer_var3 + 0x15));\n              }\n              else {\n                char_var = stab_class_method_variant_lto_priv_0(param_value);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              var13 = var13 + 1;\n            }\n            char_var = stab_class_end_method_lto_priv_0(param_value);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(param_value);\n      return result;\n    case 0xb:\n      pointer_var4 = *(undefined8 **)(param_array + 4);\n      if (pointer_var4 == (undefined8 *)0x0) {\n        var8 = 0;\n        var11 = 0;\n      }\n      else {\n        var8 = pointer_var4[1];\n        var11 = *pointer_var4;\n      }\n      result = stab_enum_type_lto_priv_0(param_value,result,var11,var8);\n      return result;\n    case 0xc:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(param_value);\n      return result;\n    case 0xd:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      var12 = 0;\n      if (*(long *)(*(long *)(param_array + 4) + 8) == 0) {\n        var12 = 0xffffffff;\n      }\n      else {\n        while (var2 = *(long *)(*(long *)(*(long *)(param_array + 4) + 8) + var12 * 8), var2 != 0) {\n          var12 = var12 + 1;\n          char_var = reconstruct_type_00112c1f(param_address,param_value,var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        var12 = var12 & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (param_value,var12,*(undefined *)(*(long *)(param_array + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(param_value);\n      return result;\n    case 0xf:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (param_value,*(undefined8 *)(*(long *)(param_array + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_array + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = reconstruct_type_00112c1f(param_address,param_value,*(undefined8 *)(*(long *)(param_array + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      var2 = *(long *)(param_array + 4);\n      result = stab_array_type_lto_priv_0\n                        (param_value,*(undefined8 *)(var2 + 0x10),*(undefined8 *)(var2 + 0x18),\n                         *(undefined *)(var2 + 0x20));\n      return result;\n    case 0x11:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(param_value,*(undefined *)(*(long *)(param_array + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = reconstruct_type_00112c1f(param_address,param_value,*(undefined8 *)(*(long *)(param_array + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(param_value);\n      return result;\n    case 0x13:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      var12 = 0;\n      if (*(long *)(*(long *)(param_array + 4) + 0x10) == 0) {\n        var12 = 0xffffffff;\n      }\n      else {\n        while (var2 = *(long *)(*(long *)(*(long *)(param_array + 4) + 0x10) + var12 * 8), var2 != 0)\n        {\n          var12 = var12 + 1;\n          char_var = reconstruct_type_00112c1f(param_address,param_value,var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_array + 4) + 8) != 0) &&\n         (char_var = reconstruct_type_00112c1f(param_address,param_value,*(long *)(*(long *)(param_array + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (param_value,*(long *)(*(long *)(param_array + 4) + 8) != 0,var12 & 0xffffffff,\n                         *(undefined *)(*(long *)(param_array + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(param_value);\n      return result;\n    case 0x15:\n      char_var = reconstruct_type_00112c1f(param_address,param_value,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(param_value);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(param_array + 4) == param_array;\n  param_array = *(int **)**(undefined8 **)(param_array + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(param_value);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "reconstruct_type_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "reconstruct_type_00112c1f",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "iVar9": "int_var9",
                "lVar2": "var2",
                "local_3c": "local_var",
                "param_1": "param_address",
                "param_2": "param_value",
                "param_3": "param_array",
                "param_4": "param4",
                "piVar6": "int_var",
                "plVar1": "pointer_var1",
                "puVar3": "pointer_var3",
                "puVar4": "pointer_var4",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar7": "result",
                "uVar8": "var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "*puVar4": {
                    "1": "pointer_var3"
                },
                "*puVar5": {
                    "1": "pointer_var4"
                },
                "FUN_00108f05": {
                    "1": "abort"
                },
                "FUN_0010e6a8": {
                    "1": "process_debug_data"
                },
                "FUN_0010e7c2": {
                    "1": "debug_write_const_prop2"
                },
                "FUN_0010e842": {
                    "1": "debug_write_lineno_const_prop"
                },
                "FUN_0010e8a9": {
                    "1": "stab_variable_lto_priv"
                },
                "FUN_0010e918": {
                    "1": "process_debug_info"
                },
                "FUN_0010e9a0": {
                    "1": "process_debug_info_2"
                },
                "FUN_0010eafe": {
                    "1": "process_debug_char"
                },
                "FUN_0010ebb0": {
                    "1": "debug_write_block_const_prop"
                },
                "FUN_00112502": {
                    "1": "debug_write_type"
                },
                "FUN_00112c1f": {
                    "1": "stab_type_def_lto_priv"
                },
                "FUN_001135a5": {
                    "1": "process_code",
                    "2": "process_data",
                    "5": "write_debug_info",
                    "8": "process_debug_info"
                },
                "FUN_00113a4d": {
                    "1": "stab_function_parameter_lto_priv"
                },
                "abort": {
                    "1": "abort_program"
                },
                "cVar2": {
                    "1": "char_val",
                    "18": "result",
                    "2": "char_value",
                    "3": "success"
                },
                "debug_write_block_constprop_0": {
                    "1": "write_block_info",
                    "3": "write_block"
                },
                "debug_write_linenos_constprop_0": {
                    "1": "debug_write_linenos",
                    "4": "write_line_numbers"
                },
                "debug_write_type_constprop_0": {
                    "1": "write_type"
                },
                "iVar1": {
                    "1": "counter",
                    "2": "loop_counter",
                    "22": "index"
                },
                "param_1": {
                    "1": "input1",
                    "15": "arg1",
                    "2": "input_param1",
                    "3": "output_buffer",
                    "6": "param1"
                },
                "param_2": {
                    "1": "data",
                    "15": "arg2",
                    "2": "input_buffer",
                    "6": "param2"
                },
                "param_3": {
                    "1": "data",
                    "13": "arg3",
                    "2": "input_param3",
                    "6": "param3"
                },
                "puVar4": {
                    "1": "current_var1",
                    "2": "pointer_var1",
                    "3": "current_node",
                    "7": "ptr1"
                },
                "puVar5": {
                    "1": "next_pointer",
                    "2": "function_node",
                    "4": "current_block",
                    "7": "ptr2"
                },
                "stab_end_function_lto_priv_0": {
                    "1": "process_end_function",
                    "3": "end_function"
                },
                "stab_float_constant_lto_priv_0": {
                    "1": "write_float_constant",
                    "3": "process_float_constant"
                },
                "stab_function_parameter_lto_priv_0": {
                    "1": "write_parameter_info",
                    "3": "process_function_parameter"
                },
                "stab_int_constant_lto_priv_0": {
                    "1": "write_int_constant",
                    "3": "process_int_constant"
                },
                "stab_start_function_lto_priv_0": {
                    "1": "process_start_function",
                    "3": "start_function"
                },
                "stab_tag_lto_priv_0": {
                    "1": "write_tag_info",
                    "3": "process_tag"
                },
                "stab_typdef_lto_priv_0": {
                    "1": "process_type_def",
                    "2": "process_typedef"
                },
                "stab_typed_constant_lto_priv_0": {
                    "1": "stab_typed_constant",
                    "3": "process_typed_constant"
                },
                "stab_variable_lto_priv_0": {
                    "1": "stab_variable",
                    "3": "process_variable"
                },
                "uVar3": {
                    "1": "output",
                    "20": "return_value",
                    "9": "result"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_001040a0",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e918",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_0010ebb0"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "code": "\nundefined8 process_debug_info_001135a5(undefined8 arg1,undefined8 arg2,long arg3)\n\n{\n  int index;\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(arg3 + 0x14)) {\n                    \n    abort_program();\n  }\n  switch(*(undefined4 *)(arg3 + 0x14)) {\n  case 0:\n    result = debug_write_type(arg1,arg2,*(undefined8 *)(arg3 + 0x20),arg3);\n    if (result != '\\0') {\n      return_value = process_typedef(arg2,*(undefined8 *)(arg3 + 8));\n      return return_value;\n    }\n    break;\n  case 1:\n    result = debug_write_type(arg1,arg2,*(undefined8 *)(arg3 + 0x20),arg3);\n    if (result != '\\0') {\n      return_value = process_tag(arg2,*(undefined8 *)(arg3 + 8));\n      return return_value;\n    }\n    break;\n  case 2:\n    result = debug_write_type\n                      (arg1,arg2,*(undefined8 *)(*(long *)(arg3 + 0x20) + 8),0);\n    if (result != '\\0') {\n      return_value = process_variable\n                        (arg2,*(undefined8 *)(arg3 + 8),**(undefined4 **)(arg3 + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(arg3 + 0x20) + 4));\n      return return_value;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(arg3 + 0x20);\n    index = *(int *)(arg3 + 0x18);\n    return_value = *(undefined8 *)(arg3 + 8);\n    result = write_line_numbers(arg1,arg2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = debug_write_type(arg1,arg2,*ptr2,0), result != '\\0')) &&\n       (result = start_function(arg2,return_value,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = debug_write_type(arg1,arg2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_function_parameter(arg2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          return_value = end_function(arg2);\n          return return_value;\n        }\n        result = write_block(arg1,arg2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    return_value = process_int_constant\n                      (arg2,*(undefined8 *)(arg3 + 8),*(undefined8 *)(arg3 + 0x20));\n    return return_value;\n  case 5:\n    return_value = process_float_constant\n                      (*(undefined8 *)(arg3 + 0x20),arg2,*(undefined8 *)(arg3 + 8));\n    return return_value;\n  case 6:\n    result = debug_write_type(arg1,arg2,**(undefined8 **)(arg3 + 0x20),0);\n    if (result != '\\0') {\n      return_value = process_typed_constant\n                        (arg2,*(undefined8 *)(arg3 + 8),\n                         *(undefined8 *)(*(long *)(arg3 + 0x20) + 8));\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_debug_info_001135a5",
                "abort": "abort_program",
                "cVar2": "result",
                "debug_write_block_constprop_0": "write_block",
                "debug_write_linenos_constprop_0": "write_line_numbers",
                "debug_write_type_constprop_0": "debug_write_type",
                "iVar1": "index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "stab_end_function_lto_priv_0": "end_function",
                "stab_float_constant_lto_priv_0": "process_float_constant",
                "stab_function_parameter_lto_priv_0": "process_function_parameter",
                "stab_int_constant_lto_priv_0": "process_int_constant",
                "stab_start_function_lto_priv_0": "start_function",
                "stab_tag_lto_priv_0": "process_tag",
                "stab_typdef_lto_priv_0": "process_typedef",
                "stab_typed_constant_lto_priv_0": "process_typed_constant",
                "stab_variable_lto_priv_0": "process_variable",
                "uVar3": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "FUN_0011378f": {
                    "1": "process_binary",
                    "2": "extract_and_improve",
                    "6": "decompile_and_improve"
                },
                "__dest": {
                    "1": "dest_str",
                    "11": "destination",
                    "2": "temp_dest",
                    "4": "destination_string"
                },
                "auVar1": {
                    "1": "hash_value",
                    "12": "temp_array",
                    "2": "temporary_buffer",
                    "3": "temp_var"
                },
                "bVar12": {
                    "1": "temp_bool",
                    "11": "flag",
                    "3": "byte_var",
                    "4": "byte_variable",
                    "5": "temp_byte"
                },
                "bfd_errmsg": {
                    "1": "bfd_error_message"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "bfd_hash_table_init": {
                    "1": "init_bfd_hash_table"
                },
                "cVar2": {
                    "1": "check",
                    "11": "result",
                    "2": "result_char",
                    "3": "temp_char",
                    "4": "char_var",
                    "5": "status"
                },
                "debug_write_linenos_constprop_0": {
                    "1": "write_linenos_helper"
                },
                "debug_write_name_constprop_0": {
                    "1": "write_name_helper"
                },
                "lVar7": {
                    "1": "counter",
                    "13": "loop_counter",
                    "2": "loop_index"
                },
                "local_1e8": {
                    "1": "value_array",
                    "2": "symbol_table",
                    "3": "symbol_array"
                },
                "local_1f0": {
                    "1": "value7",
                    "2": "local_variable_5",
                    "3": "var_1f0"
                },
                "local_1f8": {
                    "1": "loop_counter",
                    "2": "local_variable_4",
                    "3": "var_1f8"
                },
                "local_220": {
                    "1": "temp_array3",
                    "2": "local_array2"
                },
                "local_228": {
                    "1": "local_result_1",
                    "2": "flag",
                    "3": "var_228"
                },
                "local_238": {
                    "1": "local_array_1",
                    "2": "local_array",
                    "4": "temp_array_2"
                },
                "local_248": {
                    "1": "value1",
                    "2": "local_variable_3",
                    "3": "var_248",
                    "7": "local_var1"
                },
                "local_250": {
                    "1": "xmalloc_result",
                    "2": "buffer",
                    "3": "malloc_size"
                },
                "local_258": {
                    "1": "local_input_array_1",
                    "2": "param_1_copy"
                },
                "local_58": {
                    "1": "local_var_3",
                    "2": "local_var9",
                    "3": "var_58"
                },
                "local_60": {
                    "1": "struct_temp11",
                    "2": "local_var6",
                    "3": "var_60"
                },
                "local_68": {
                    "1": "var_8",
                    "2": "local_var5",
                    "3": "var_68"
                },
                "local_78": {
                    "1": "symbol_4"
                },
                "local_a0": {
                    "1": "local_a0",
                    "2": "temp_array_4"
                },
                "long": {
                    "1": "long"
                },
                "long *": {
                    "1": "pointer_to_long"
                },
                "long *param_3": {
                    "1": "pointer_to_symbol_address"
                },
                "non_fatal": {
                    "1": "handle_non_fatal_error"
                },
                "param_1": {
                    "1": "input_array_1",
                    "2": "symbol_table",
                    "3": "input1"
                },
                "param_2": {
                    "1": "ptr2",
                    "2": "stats",
                    "3": "input2"
                },
                "param_3": {
                    "1": "param_address",
                    "2": "buffer_size",
                    "3": "output1"
                },
                "param_4": {
                    "1": "param_d",
                    "3": "output2"
                },
                "param_5": {
                    "1": "new_param_5",
                    "3": "output3"
                },
                "param_6": {
                    "1": "var6_ptr",
                    "2": "compilation_unit",
                    "3": "output4"
                },
                "plVar11": {
                    "1": "pointer_var_5",
                    "2": "pointer_variable_5"
                },
                "puVar10": {
                    "1": "outer_pointer",
                    "2": "temp_ptr_4",
                    "3": "pointer_variable_4"
                },
                "puVar11": {
                    "1": "pointer_variable_5"
                },
                "puVar5": {
                    "1": "temp_pointer_2",
                    "2": "buffer",
                    "3": "pointer_variable",
                    "5": "temp_ptr"
                },
                "puVar8": {
                    "1": "array_iterator",
                    "2": "temp_ptr_2",
                    "3": "ptr2"
                },
                "puVar9": {
                    "1": "temp_array_ptr",
                    "2": "ptr3",
                    "3": "pointer_array"
                },
                "sVar6": {
                    "1": "len",
                    "11": "string_length",
                    "2": "size_variable",
                    "3": "str_length",
                    "5": "length"
                },
                "stab_start_compilation_unit_lto_priv_0": {
                    "1": "start_compilation_unit_helper"
                },
                "stab_start_source_lto_priv_0": {
                    "1": "start_source_helper"
                },
                "stab_write_symbol_lto_priv_0": {
                    "1": "write_symbol_helper"
                },
                "strcpy": {
                    "1": "string_copy"
                },
                "string_hash_newfunc_lto_priv_0": {
                    "1": "string_hash_new_func"
                },
                "strlen": {
                    "1": "string_length"
                },
                "uStack_23c": {
                    "1": "local_var_3",
                    "2": "stack_var3",
                    "3": "var_23c",
                    "4": "local_var4"
                },
                "uStack_240": {
                    "1": "symbol_2",
                    "2": "stack_var2",
                    "3": "var_240",
                    "4": "local_var3"
                },
                "uStack_244": {
                    "1": "local_var_3",
                    "2": "stack_var1",
                    "3": "var_244",
                    "4": "local_var2"
                },
                "uStack_4c": {
                    "1": "temp_var9",
                    "2": "stack_var7",
                    "3": "var_4c"
                },
                "uStack_50": {
                    "1": "stack50",
                    "2": "stack_var6",
                    "3": "var_50"
                },
                "uStack_54": {
                    "1": "var_11",
                    "2": "stack_var5",
                    "3": "var_54"
                },
                "uStack_70": {
                    "1": "temp_var6",
                    "2": "stack_var4",
                    "3": "var_70"
                },
                "uVar3": {
                    "1": "unsigned_variable_1",
                    "12": "error_code",
                    "5": "error",
                    "6": "result"
                },
                "uVar4": {
                    "1": "temp_var_2",
                    "13": "error_message",
                    "2": "temp_var",
                    "3": "bfd_errmsg_result",
                    "4": "error_msg"
                },
                "undefined4": {
                    "1": "result"
                },
                "undefined8 *": {
                    "1": "pointer_to_undefined8"
                },
                "undefined8 *param_1": {
                    "1": "pointer_to_symbol_table"
                },
                "undefined8 *param_2": {
                    "1": "pointer_to_compilation_unit"
                },
                "undefined8 *param_4": {
                    "1": "pointer_to_symbol_size"
                },
                "undefined8 *param_5": {
                    "1": "pointer_to_source_file_list"
                },
                "undefined8 *param_6": {
                    "1": "pointer_to_compilation_unit_count"
                },
                "unique0x100000e9": {
                    "1": "unique_val1"
                },
                "unique0x100000ed": {
                    "1": "unique_val2"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00104270",
                "FUN_0010e451",
                "FUN_001135a5",
                "FUN_00104370",
                "FUN_00104100",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "FUN_0010bb52",
                "FUN_001047a0",
                "FUN_00104830",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nresult\ndecompile_and_improve_0011378f(undefined8 *input1,undefined8 *input2,long *output1,undefined8 *param_4,\n            undefined8 *source_file_list,undefined8 *param_6)\n\n{\n  undefined temp_array [16];\n  char result;\n  result error_code;\n  undefined8 error_message;\n  undefined *temp_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *pointer_variable_2;\n  result *pointer_variable_3;\n  char *destination;\n  undefined8 *pointer_variable_4;\n  long *pointer_array_2;\n  byte flag;\n  undefined8 *local_variable_1;\n  long malloc_size;\n  result local_var1;\n  result local_var2;\n  result local_var3;\n  result local_var4;\n  undefined temp_array_2 [16];\n  undefined8 var_228;\n  undefined string_buffer [40];\n  undefined8 var_1f8;\n  undefined8 var_1f0;\n  result symbol_array [82];\n  undefined temp_array_4 [40];\n  undefined local_variable_11 [8];\n  undefined8 var_70;\n  undefined8 var_68;\n  result var_60;\n  result var_58;\n  result var_54;\n  result var_50;\n  result var_4c;\n  \n  flag = 0;\n  local_var1 = 0;\n  local_var2 = 0;\n  local_var3 = 500;\n  local_var4 = 0;\n  local_variable_1 = input1;\n  malloc_size = allocate_memory(500);\n  var_228 = 1;\n  temp_array_2 = ZEXT816(0);\n  result = init_bfd_hash_table(string_buffer,string_hash_new_func,0x30);\n  if ((result == '\\0') ||\n     (result = init_bfd_hash_table(temp_array_4,string_hash_new_func,0x30), result == '\\0')) {\n    error_code = get_bfd_error();\n    error_message = bfd_error_message(error_code);\n    handle_non_fatal_error(\"init_bfd_hash_table_failed: %s\",error_message);\n  }\n  else {\n    var_1f8 = 0;\n    unique_val1 = 0xffffffff;\n    local_variable_11 = (undefined  [8])0xffffffffffffffff;\n    unique_val2 = 0xffffffff;\n    pointer_variable_3 = symbol_array;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *pointer_variable_3 = 0;\n      pointer_variable_3 = pointer_variable_3 + (ulong)flag * -2 + 1;\n    }\n    var_68 = 0;\n    var_60 = 0;\n    var_1f0 = 1;\n    var_58 = 0;\n    var_54 = 0;\n    var_50 = 0xffffffff;\n    var_4c = 0xffffffff;\n    result = write_symbol_helper(&local_variable_1,0,0,0,0);\n    temp_array = _local_variable_11;\n    if (result != '\\0') {\n      local_variable_11._4_4_ = local_var2;\n      local_variable_11._0_4_ = local_var1;\n      var_70 = temp_array._8_8_;\n      result = write_symbol_helper(&local_variable_1,100,0,0,*input1);\n      if (result != '\\0') {\n        *(int *)(input2 + 6) = *(int *)(input2 + 6) + 1;\n        input2[10] = 0;\n        pointer_variable_4 = (undefined8 *)*input2;\n        *(result *)(input2 + 7) = *(result *)((long)input2 + 0x34);\n        for (; pointer_variable_4 != (undefined8 *)0x0; pointer_variable_4 = (undefined8 *)*pointer_variable_4) {\n          input2[8] = pointer_variable_4[2];\n          *(result *)(input2 + 9) = 0;\n          result = start_compilation_unit_helper(&local_variable_1,*(undefined8 *)(pointer_variable_4[1] + 8))\n          ;\n          if (result == '\\0') {\n            return 0;\n          }\n          pointer_array_2 = (long *)pointer_variable_4[1];\n          if (pointer_array_2 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)pointer_array_2[2] != (undefined8 *)0x0) {\n                for (pointer_variable_2 = *(undefined8 **)(undefined8 *)pointer_array_2[2]; pointer_variable_2 != (undefined8 *)0x0;\n                    pointer_variable_2 = (undefined8 *)*pointer_variable_2) {\n                  result = write_name_helper(input2,&local_variable_1);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              pointer_array_2 = (long *)*pointer_array_2;\n              if (pointer_array_2 == (long *)0x0) break;\n              result = start_source_helper(&local_variable_1,pointer_array_2[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = write_linenos_helper(input2,&local_variable_1,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var_4c,var_50) == -1) &&\n           (error_code = write_symbol_helper(&local_variable_1,100,0,var_68,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(input1[1] + 0x50))(var_228,malloc_size + 8);\n          *output1 = malloc_size;\n          *param_4 = CONCAT44(local_var2,local_var1);\n          *param_6 = var_228;\n          temp_ptr = (undefined *)allocate_memory();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *source_file_list = temp_ptr;\n          for (loop_counter = temp_array_2._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            string_copy(destination,*(char **)(loop_counter + 8));\n            string_length = string_length(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "decompile_and_improve_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011378f": "decompile_and_improve_0011378f",
                "__dest": "destination",
                "auVar1": "temp_array",
                "bVar12": "flag",
                "bfd_errmsg": "bfd_error_message",
                "bfd_get_error": "get_bfd_error",
                "bfd_hash_table_init": "init_bfd_hash_table",
                "cVar2": "result",
                "debug_write_linenos_constprop_0": "write_linenos_helper",
                "debug_write_name_constprop_0": "write_name_helper",
                "lVar7": "loop_counter",
                "local_1e8": "symbol_array",
                "local_1f0": "var_1f0",
                "local_1f8": "var_1f8",
                "local_220": "string_buffer",
                "local_228": "var_228",
                "local_238": "temp_array_2",
                "local_248": "local_var1",
                "local_250": "malloc_size",
                "local_258": "local_variable_1",
                "local_58": "var_58",
                "local_60": "var_60",
                "local_68": "var_68",
                "local_78": "local_variable_11",
                "local_a0": "temp_array_4",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_5": "source_file_list",
                "plVar11": "pointer_array_2",
                "puVar10": "pointer_variable_4",
                "puVar5": "temp_ptr",
                "puVar8": "pointer_variable_2",
                "puVar9": "pointer_variable_3",
                "sVar6": "string_length",
                "stab_start_compilation_unit_lto_priv_0": "start_compilation_unit_helper",
                "stab_start_source_lto_priv_0": "start_source_helper",
                "stab_write_symbol_lto_priv_0": "write_symbol_helper",
                "strcpy": "string_copy",
                "string_hash_newfunc_lto_priv_0": "string_hash_new_func",
                "strlen": "string_length",
                "uStack_23c": "local_var4",
                "uStack_240": "local_var3",
                "uStack_244": "local_var2",
                "uStack_4c": "var_4c",
                "uStack_50": "var_50",
                "uStack_54": "var_54",
                "uStack_70": "var_70",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "undefined4": "result",
                "unique0x100000e9": "unique_val1",
                "unique0x100000ed": "unique_val2",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "FUN_00112502": {
                    "1": "process_data"
                },
                "FUN_00113a4d": {
                    "1": "process_debug_records",
                    "3": "process_debugging_info",
                    "4": "process_debug_symbols",
                    "7": "process_debug_data",
                    "9": "process_debug_info"
                },
                "arg1": {
                    "2": "arg1"
                },
                "arg2": {
                    "2": "arg2"
                },
                "arg3": {
                    "2": "arg3"
                },
                "auVar4": {
                    "1": "debug_line_status",
                    "2": "line_result",
                    "3": "symbol_info",
                    "7": "debug_result"
                },
                "cVar1": {
                    "1": "is_debug_written",
                    "2": "success",
                    "21": "result"
                },
                "data": {
                    "2": "data"
                },
                "data_ptr": {
                    "1": "data"
                },
                "debug_write_linenos_constprop_0": {
                    "1": "write_debug_line_numbers",
                    "2": "write_linenos",
                    "3": "write_line_numbers"
                },
                "debug_write_name_constprop_0": {
                    "1": "print_debug_info",
                    "2": "write_debug_name",
                    "5": "write_name"
                },
                "extra_data": {
                    "2": "extra_data"
                },
                "new_value": {
                    "2": "new_value"
                },
                "param": {
                    "1": "extra_param"
                },
                "param4": {
                    "1": "param4"
                },
                "param_1": {
                    "1": "debugger_param",
                    "29": "arg1"
                },
                "param_2": {
                    "1": "data_param",
                    "29": "arg2"
                },
                "param_3": {
                    "1": "threshold",
                    "25": "arg3",
                    "3": "symbol_data"
                },
                "param_3 + 0x10": {
                    "1": "size"
                },
                "param_3 + 0x18": {
                    "1": "data_ptr"
                },
                "param_3 + 0x20": {
                    "1": "arg3"
                },
                "param_3 + 0x28": {
                    "1": "symbol_data"
                },
                "param_3 + 8": {
                    "1": "value"
                },
                "param_4": {
                    "1": "extra_param",
                    "2": "extra_data",
                    "25": "arg4",
                    "3": "param4"
                },
                "param_5": {
                    "1": "threshold_param",
                    "27": "arg5",
                    "3": "extra_data"
                },
                "process_data_0010ec73": {
                    "1": "process_data_in_loop",
                    "2": "process_data"
                },
                "process_data_00112502": {
                    "7": "process_data"
                },
                "process_debug_info_001135a5": {
                    "1": "process_debug_info_internal",
                    "6": "process_debug_info"
                },
                "puVar3": {
                    "1": "symbol_list",
                    "19": "ptr",
                    "2": "current_symbol",
                    "3": "pointer"
                },
                "size": {
                    "3": "size"
                },
                "stab_end_block_lto_priv_0": {
                    "1": "end_debug_block",
                    "3": "end_block"
                },
                "stab_start_block_lto_priv_0": {
                    "1": "start_block_lto",
                    "5": "start_block"
                },
                "symbol_data": {
                    "2": "symbol_data"
                },
                "threshold": {
                    "1": "new_threshold"
                },
                "uVar2": {
                    "1": "end_block_result",
                    "24": "return_value",
                    "6": "result"
                },
                "update_symbol_information_0010ed2c": {
                    "1": "update_symbols",
                    "4": "update_symbol_information"
                },
                "value": {
                    "1": "new_value",
                    "2": "value"
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_001135a5"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_001135a5"
            ],
            "code": "\nundefined8\nprocess_debug_info_00113a4d(undefined8 arg1,undefined8 arg2,long arg3,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr;\n  undefined debug_result [16];\n  \n  result = write_line_numbers(arg1,arg2,*(undefined8 *)(arg3 + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(arg3 + 0x28) == 0 && (*(long *)(arg3 + 8) != 0)) ||\n      (result = start_block(arg2,*(undefined8 *)(arg3 + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(arg3 + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(arg3 + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = write_name(arg1,arg2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(arg3 + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_debug_info_00113a4d(arg1,arg2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    debug_result = write_line_numbers(arg1,arg2,*(undefined8 *)(arg3 + 0x20));\n    if (debug_result[0] != '\\0') {\n      if ((*(long *)(arg3 + 0x28) == 0) && (*(long *)(arg3 + 8) != 0)) {\n        return debug_result._0_8_;\n      }\n      return_value = end_block\n                        (arg2,*(undefined8 *)(arg3 + 0x20),debug_result._8_8_,arg5);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_debug_info_00113a4d",
                "auVar4": "debug_result",
                "cVar1": "result",
                "debug_write_linenos_constprop_0": "write_line_numbers",
                "debug_write_name_constprop_0": "write_name",
                "param": "extra_param",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "puVar3": "ptr",
                "stab_end_block_lto_priv_0": "end_block",
                "stab_start_block_lto_priv_0": "start_block",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00113b1e": {
                    "1": "process_data",
                    "11": "extract_real_type",
                    "3": "get_real_type",
                    "4": "extract_real_value"
                },
                "auVar1": {
                    "1": "result1",
                    "2": "default_output",
                    "3": "default_result"
                },
                "auVar4": {
                    "1": "result_if_valid",
                    "10": "result",
                    "2": "modified_result"
                },
                "debug_get_real_type_isra_0": {
                    "1": "get_real_type"
                },
                "param_1": {
                    "1": "data_address",
                    "11": "input_value",
                    "5": "input",
                    "8": "input_param"
                },
                "param_2": {
                    "1": "ptr_to_value",
                    "10": "unused_param",
                    "2": "type",
                    "4": "debug_info"
                },
                "param_3": {
                    "1": "param_value_1",
                    "2": "output_param",
                    "9": "default_value"
                },
                "param_4": {
                    "1": "unknown",
                    "2": "result_value",
                    "3": "output_value"
                },
                "piVar2": {
                    "1": "type_info_ptr",
                    "13": "real_type",
                    "2": "real_type_pointer",
                    "3": "debug_type",
                    "6": "real_type_ptr"
                },
                "uVar3": {
                    "1": "dereferenced_pointer",
                    "11": "result",
                    "2": "extracted_value",
                    "3": "result_value",
                    "6": "real_value"
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16] extract_real_type_00113b1e(long input_value,undefined8 unused_param,ulong default_value,undefined8 result_param)\n\n{\n  undefined default_result [16];\n  int *real_type;\n  undefined8 result;\n  undefined result [16];\n  \n  if (input_value != 0) {\n    real_type = (int *)get_real_type(input_value,0);\n    if ((real_type == (int *)0x0) || (3 < *real_type - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(real_type + 4);\n    }\n    result._8_8_ = result_param;\n    result._0_8_ = result;\n    return result;\n  }\n  default_result._8_8_ = 0;\n  default_result._0_8_ = default_value;\n  return default_result << 0x40;\n}\n\n",
            "current_name": "extract_real_type_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "extract_real_type_00113b1e",
                "auVar1": "default_result",
                "auVar4": "result",
                "debug_get_real_type_isra_0": "get_real_type",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "result_param",
                "piVar2": "real_type",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "create_constprop_type"
                },
                "<original_parameter_name_1>": {
                    "1": "param"
                },
                "<original_variable_name_1>": {
                    "1": "result"
                },
                "FUN_00112904": {
                    "1": "initialize_debug"
                },
                "FUN_00113b4a": {
                    "1": "decompile_make_type_constprop",
                    "5": "initialize_type",
                    "7": "initialize_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_const_object"
                },
                "lVar1": {
                    "1": "debug_struct_ptr",
                    "2": "type_constprop_ptr",
                    "3": "type_ptr",
                    "5": "type_pointer",
                    "6": "debug_type",
                    "7": "result"
                },
                "param_1": {
                    "1": "input_parameter",
                    "23": "input_value",
                    "3": "value"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113b4a(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_const_object(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "initialize_debug_type_00113b4a",
                "debug_make_type_constprop_0": "create_const_object",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "set_struct_values"
                },
                "FUN_00113b71": {
                    "1": "extract_value_from_parameter",
                    "2": "create_type_instance",
                    "5": "initialize_debug_type",
                    "7": "initialize_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_struct_with_type"
                },
                "lVar1": {
                    "1": "instance_ptr",
                    "2": "debug_type",
                    "3": "debug_type_pointer",
                    "4": "type_pointer"
                },
                "param_1": {
                    "1": "input_data",
                    "19": "input_value",
                    "2": "input_parameter",
                    "6": "value"
                },
                "param_2": {
                    "1": "flag2",
                    "2": "unused_param"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_type_00113b71(long input_value)\n\n{\n  long type_pointer;\n  \n  if (input_value != 0) {\n    type_pointer = create_struct_with_type(0x14,0);\n    if (type_pointer == 0) {\n      type_pointer = 0;\n    }\n    else {\n      *(long *)(type_pointer + 0x10) = input_value;\n    }\n    return type_pointer;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_type_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_type_00113b71",
                "debug_make_type_constprop_0": "create_struct_with_type",
                "lVar1": "type_pointer",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_variables"
                },
                "FUN_00113b98": {
                    "1": "create_debug_entry",
                    "10": "create_debug_type",
                    "2": "create_type_constprop"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_debug_type"
                },
                "lVar1": {
                    "1": "debug_object",
                    "11": "debug_type",
                    "2": "type_constprop",
                    "3": "type_result",
                    "4": "result"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "input_param1",
                    "4": "input_param_1",
                    "5": "input_1",
                    "9": "input1"
                },
                "param_2": {
                    "1": "offset1",
                    "2": "input_param2",
                    "4": "value2",
                    "5": "input_2",
                    "9": "input2"
                },
                "param_3": {
                    "1": "param3",
                    "2": "input_param3",
                    "4": "value3",
                    "5": "input_3",
                    "9": "input3"
                },
                "param_4": {
                    "1": "value_4",
                    "2": "undefined_param",
                    "3": "input_param_4",
                    "5": "input_4",
                    "9": "input4"
                },
                "plVar2": {
                    "1": "new_object",
                    "2": "object_pointer",
                    "4": "debug_data",
                    "9": "allocated_memory"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_debug_type_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  \n  if ((input1 != 0) && (debug_type = create_debug_type_00113b98(0x13,0), debug_type != 0)) {\n    allocated_memory = (long *)allocate_memory(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input2;\n    allocated_memory[2] = input3;\n    *(undefined *)(allocated_memory + 3) = input4;\n    *(long **)(debug_type + 0x10) = allocated_memory;\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_debug_type_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "create_debug_type_00113b98",
                "debug_make_type_constprop_0": "create_debug_type",
                "lVar1": "debug_type",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "*plVar2": {
                    "1": "allocated_data"
                },
                "FUN_00113bfa": {
                    "1": "create_debugged_type",
                    "2": "create_debug_object",
                    "3": "allocate_and_store_values",
                    "6": "create_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "get_type_const"
                },
                "lVar1": {
                    "1": "ptr",
                    "2": "type_const",
                    "4": "result",
                    "7": "debug_type"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "value_1",
                    "3": "input_value_1",
                    "5": "value1",
                    "7": "input_1"
                },
                "param_2": {
                    "1": "data_value_2",
                    "2": "value_2",
                    "3": "input_value_2",
                    "5": "value2",
                    "7": "input_2"
                },
                "plVar2": {
                    "1": "type_instance_ptr",
                    "13": "allocated_memory",
                    "2": "debug_type_ptr"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_debug_type_00113bfa(long input_1,long input_2)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  \n  if (((input_1 != 0) && (input_2 != 0)) &&\n     (debug_type = get_type_const(0x12,0), debug_type != 0)) {\n    allocated_memory = (long *)allocate_memory(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(long **)(debug_type + 0x10) = allocated_memory;\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_debug_type_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "create_debug_type_00113bfa",
                "debug_make_type_constprop_0": "get_type_const",
                "lVar1": "debug_type",
                "param_1": "input_1",
                "param_2": "input_2",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00113c43": {
                    "1": "initialize_debug_object",
                    "2": "create_debug_type",
                    "4": "create_data_structure"
                },
                "auVar3": {
                    "1": "result_struct",
                    "11": "return_value",
                    "12": "result"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_debug_type"
                },
                "lVar1": {
                    "1": "debug_instance",
                    "2": "type_ptr",
                    "3": "debug_type",
                    "4": "type"
                },
                "param_1": {
                    "1": "source_ptr",
                    "2": "input_param1",
                    "3": "input_param_1",
                    "4": "value1",
                    "6": "input1"
                },
                "param_2": {
                    "1": "arg_2",
                    "2": "input_param2",
                    "3": "input_param_2",
                    "4": "value2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "value_3",
                    "2": "input_param3",
                    "3": "param3",
                    "4": "value3",
                    "5": "input3",
                    "6": "input_3"
                },
                "param_4": {
                    "1": "arg_4",
                    "2": "data4",
                    "3": "param4",
                    "4": "value4",
                    "5": "input4",
                    "6": "input_4"
                },
                "param_5": {
                    "1": "value_5",
                    "2": "param_5",
                    "3": "input_param_5",
                    "4": "value5",
                    "5": "input5",
                    "6": "input_5"
                },
                "param_6": {
                    "1": "data6",
                    "2": "input_param6",
                    "3": "input_param_6",
                    "4": "value6",
                    "5": "input6",
                    "6": "input_6"
                },
                "plVar2": {
                    "1": "new_object",
                    "2": "dynamic_array",
                    "4": "allocated_memory"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16]\ncreate_data_structure_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long type;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    type = create_debug_type(0x10,0);\n    if (type != 0) {\n      allocated_memory = (long *)allocate_memory(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input_1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input_2;\n      allocated_memory[2] = input_3;\n      allocated_memory[3] = input_4;\n      *(undefined *)(allocated_memory + 4) = input_5;\n      *(long **)(type + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  type = 0;\nLAB_00113caa:\n  result._8_8_ = input_6;\n  result._0_8_ = type;\n  return result;\n}\n\n",
            "current_name": "create_data_structure_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "create_data_structure_00113c43",
                "auVar3": "result",
                "debug_make_type_constprop_0": "create_debug_type",
                "lVar1": "type",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "0x10": {
                    "3": "offset"
                },
                "0xe": {
                    "1": "debug_type",
                    "2": "constant_value"
                },
                "FUN_00112904": {
                    "1": "initialize_type_object"
                },
                "FUN_00113cb9": {
                    "1": "create_constprop",
                    "2": "extract_value_from_binary",
                    "4": "initialize_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "set_debug_value",
                    "3": "create_debug_type"
                },
                "lVar1": {
                    "1": "new_object",
                    "12": "result",
                    "2": "debug_type",
                    "3": "type_pointer"
                },
                "param_1": {
                    "1": "object_value",
                    "2": "input",
                    "22": "input_value",
                    "4": "value"
                },
                "param_2": {
                    "1": "unused_parameter"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113cb9(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_debug_type(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "initialize_debug_type_00113cb9",
                "debug_make_type_constprop_0": "create_debug_type",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00113ce0": {
                    "1": "extract_data_and_create_structure",
                    "2": "process_parameters",
                    "4": "process_data",
                    "5": "create_debug_type"
                },
                "auVar3": {
                    "1": "debug_object",
                    "17": "return_value",
                    "2": "result_array",
                    "8": "result"
                },
                "debug_make_type_constprop_0": {
                    "1": "make_type_constprop"
                },
                "lVar1": {
                    "1": "type_value",
                    "2": "type",
                    "4": "type_constant",
                    "7": "debug_type"
                },
                "param_1": {
                    "1": "input1",
                    "2": "value1",
                    "4": "input_value1",
                    "5": "input_1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "param_value",
                    "4": "input_value2",
                    "5": "input_param2"
                },
                "param_3": {
                    "1": "input_param",
                    "2": "undefined_value",
                    "4": "input_value3",
                    "5": "input_3"
                },
                "param_4": {
                    "1": "auxiliary_value1",
                    "2": "unused_param",
                    "3": "input_param4",
                    "4": "input_4"
                },
                "param_5": {
                    "1": "auxiliary_value2",
                    "2": "unused_param2",
                    "3": "input_param5",
                    "4": "input_5"
                },
                "plVar2": {
                    "1": "variable_data_ptr",
                    "10": "allocated_memory",
                    "2": "debug_ptr"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16]\ncreate_debug_type_00113ce0(long input_param1,long input_param2,undefined input_param3,undefined8 input_4,undefined8 input_5)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_param1 != 0) {\n    debug_type = make_type_constprop(0xd,0);\n    if (debug_type != 0) {\n      allocated_memory = (long *)allocate_memory(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param2;\n      *(undefined *)(allocated_memory + 2) = input_param3;\n      *(long **)(debug_type + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  debug_type = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_5;\n  return_value._0_8_ = debug_type;\n  return return_value;\n}\n\n",
            "current_name": "create_debug_type_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "create_debug_type_00113ce0",
                "auVar3": "return_value",
                "debug_make_type_constprop_0": "make_type_constprop",
                "lVar1": "debug_type",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_4",
                "param_5": "input_5",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "log_debug"
                },
                "FUN_00113d3a": {
                    "1": "get_linked_value",
                    "3": "initialize_pointer",
                    "4": "get_pointer",
                    "5": "get_pointer_value"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_debug_type"
                },
                "lVar1": {
                    "1": "type",
                    "3": "type_pointer",
                    "4": "pointer_value"
                },
                "param_1": {
                    "1": "parameter",
                    "2": "type_id",
                    "3": "pointer",
                    "4": "input_value",
                    "7": "input_pointer",
                    "9": "input"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nlong get_pointer_value_00113d3a(long input)\n\n{\n  long type_ptr;\n  \n  if (input != 0) {\n    type_ptr = *(long *)(input + 8);\n    if (type_ptr == 0) {\n      type_ptr = create_debug_type(0xc,0);\n      if (type_ptr == 0) {\n        type_ptr = 0;\n      }\n      else {\n        *(long *)(type_ptr + 0x10) = input;\n        *(long *)(input + 8) = type_ptr;\n      }\n    }\n    return type_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "get_pointer_value_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "get_pointer_value_00113d3a",
                "debug_make_type_constprop_0": "create_debug_type",
                "lVar1": "type_ptr",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00113d6e": {
                    "1": "allocate_and_store",
                    "2": "create_object",
                    "3": "create_and_store_debug_type",
                    "4": "allocate_and_store_data",
                    "7": "create_debug_type"
                },
                "lVar1": {
                    "1": "object_pointer",
                    "2": "allocated_address",
                    "4": "result",
                    "9": "debug_type"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "data_1",
                    "3": "input_1",
                    "4": "input1",
                    "8": "input_param_1"
                },
                "param_2": {
                    "1": "input_value2",
                    "2": "data_2",
                    "3": "input_value_2",
                    "4": "input2",
                    "8": "input_param_2"
                },
                "puVar2": {
                    "1": "new_object",
                    "15": "allocated_memory",
                    "3": "debug_type_ptr",
                    "4": "allocated_ptr"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nlong create_debug_type_00113d6e(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  long debug_type;\n  undefined8 *allocated_memory;\n  \n  debug_type = debug_make_type_constprop_0(0xb,0);\n  if (debug_type != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_param_1;\n    allocated_memory[1] = input_param_2;\n    *(undefined8 **)(debug_type + 0x10) = allocated_memory;\n  }\n  return debug_type;\n}\n\n",
            "current_name": "create_debug_type_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "create_debug_type_00113d6e",
                "lVar1": "debug_type",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "1": "initialize_debug_type",
                    "2": "initialize_buffer",
                    "3": "initialize_structure",
                    "8": "initialize_data_structure"
                },
                "auVar5": {
                    "1": "return_val",
                    "14": "result",
                    "2": "return_data",
                    "5": "return_value"
                },
                "bVar4": {
                    "1": "byte_value",
                    "2": "increment",
                    "3": "temp_byte",
                    "4": "byte_counter"
                },
                "lVar2": {
                    "1": "index",
                    "24": "loop_counter",
                    "4": "counter"
                },
                "param_1": {
                    "1": "input_length",
                    "2": "input_size",
                    "4": "input_byte",
                    "5": "byte_offset",
                    "6": "byte_value",
                    "7": "byte_count"
                },
                "param_2": {
                    "1": "new_value1",
                    "12": "param2",
                    "2": "unused_param",
                    "7": "param_2"
                },
                "param_3": {
                    "1": "input2",
                    "2": "initial_value",
                    "3": "param_3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "auxiliary_value",
                    "12": "param4",
                    "3": "param_4"
                },
                "puVar1": {
                    "1": "alloc_ptr",
                    "10": "allocated_memory",
                    "2": "buffer",
                    "3": "memory_block"
                },
                "puVar3": {
                    "1": "ptr2",
                    "2": "current_element",
                    "3": "array_pointer",
                    "4": "ptr",
                    "6": "current_ptr"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16] initialize_data_structure_00113da9(byte byte_count,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *allocated_memory;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte byte_counter;\n  undefined result [16];\n  \n  byte_counter = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byte_count);\n  if (result._0_8_ != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    current_ptr = allocated_memory + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)byte_counter * -8 + 4);\n    }\n    *allocated_memory = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = allocated_memory;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "auVar5": "result",
                "bVar4": "byte_counter",
                "lVar2": "loop_counter",
                "param_1": "byte_count",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocated_memory",
                "puVar3": "current_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "apply_constant_property",
                    "3": "perform_operation",
                    "4": "set_debug_type"
                },
                "FUN_00113df2": {
                    "1": "set_function_type",
                    "2": "initialize_constant_property",
                    "3": "make_type_constprop",
                    "4": "initialize_debug",
                    "5": "initialize_debug_type"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "arg",
                    "3": "input_value",
                    "5": "value"
                },
                "param_2": {
                    "1": "value_to_set",
                    "2": "property"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid initialize_debug_type_00113df2(undefined4 value)\n\n{\n  debug_make_type_constprop_0(4,value);\n  return;\n}\n\n",
            "current_name": "initialize_debug_type_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00112904": {
                    "1": "initialize_value"
                },
                "FUN_00113dfe": {
                    "1": "update_type_value",
                    "2": "update_debug_type",
                    "4": "update_memory_value"
                },
                "lVar1": {
                    "1": "memory_address",
                    "2": "debug_type_pointer",
                    "4": "type_pointer"
                },
                "param_1": {
                    "1": "struct_pointer",
                    "2": "arg1",
                    "4": "input_value",
                    "6": "value",
                    "9": "type"
                },
                "param_2": {
                    "1": "value_to_write",
                    "11": "value",
                    "14": "new_value",
                    "2": "data"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid update_memory_value_00113dfe(undefined4 type,undefined new_value)\n\n{\n  long type_pointer;\n  \n  type_pointer = debug_make_type_constprop_0(3,type);\n  if (type_pointer != 0) {\n    *(undefined *)(type_pointer + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_value_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "update_memory_value_00113dfe",
                "lVar1": "type_pointer",
                "param_1": "type",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "<original_function_name>": {
                    "1": "initialize_debug_type_constant_propagation"
                },
                "<original_parameter_name_1>": {
                    "1": "param1"
                },
                "<original_parameter_name_2>": {
                    "1": "param2"
                },
                "FUN_00112904": {
                    "1": "call_function_with_params",
                    "2": "initialize_variables"
                },
                "FUN_00113e17": {
                    "1": "propagate_constant_type",
                    "2": "initialize_const_property",
                    "3": "initialize_debug",
                    "4": "initialize_constant_properties"
                },
                "param_1": {
                    "1": "input1",
                    "15": "arg1",
                    "2": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "15": "arg2",
                    "2": "param2"
                },
                "undefined4 param_1": {
                    "1": "param1"
                },
                "undefined4 param_2": {
                    "1": "param2"
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid initialize_debug_type_00113e17(void)\n\n{\n  debug_make_type_constprop_0(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_debug_type_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_debug_type_00113e17"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00113e23": {
                    "1": "allocate_and_store_debug_type",
                    "2": "create_const_type",
                    "4": "create_debug_type"
                },
                "debug_make_type_constprop_0": {
                    "1": "create_type"
                },
                "lVar1": {
                    "1": "type",
                    "2": "type_id",
                    "5": "debug_type",
                    "8": "result"
                },
                "param_1": {
                    "1": "input_value1",
                    "2": "data1",
                    "4": "input_param1",
                    "5": "input_param_1",
                    "6": "input_1"
                },
                "param_2": {
                    "1": "input_value_2",
                    "2": "data2",
                    "4": "input_param2",
                    "5": "value2",
                    "6": "input_2"
                },
                "puVar2": {
                    "1": "type_instance_ptr",
                    "14": "allocated_memory",
                    "2": "data_pointer",
                    "4": "allocated_ptr"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010afd5"
            ],
            "code": "\nlong create_debug_type_00113e23(undefined8 input_1,undefined8 input_2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = create_type(1,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)allocate_memory(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "current_name": "create_debug_type_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "create_debug_type_00113e23",
                "debug_make_type_constprop_0": "create_type",
                "lVar1": "result",
                "param_1": "input_1",
                "param_2": "input_2",
                "puVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "FUN_00113e5e": {
                    "1": "check_type_and_demangle",
                    "2": "extract_type_from_binary",
                    "4": "parse_type",
                    "7": "demangle_type"
                },
                "cVar1": {
                    "1": "is_valid_type",
                    "2": "starts_with_type",
                    "4": "result",
                    "5": "startswith_result"
                },
                "local_20": {
                    "1": "current_position",
                    "2": "current_input",
                    "3": "current_string",
                    "4": "temp_string"
                },
                "local_20[0]": {
                    "1": "current_param",
                    "2": "current_string"
                },
                "param_1": {
                    "1": "output_type",
                    "2": "buffer",
                    "3": "output",
                    "4": "output_buffer",
                    "5": "input_string",
                    "7": "result"
                },
                "param_2": {
                    "1": "ptr_to_char_array",
                    "2": "string_array",
                    "4": "input_string"
                },
                "param_3": {
                    "1": "length_of_array",
                    "2": "size",
                    "5": "length",
                    "6": "string_length",
                    "7": "offset"
                },
                "stab_demangle_type_lto_priv_0": {
                    "1": "demangle_type"
                },
                "startswith_lto_priv_0_lto_priv_0": {
                    "1": "is_type_starts_with"
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 demangle_type_00113e5e(undefined8 result,char **input_string,long offset)\n\n{\n  char startswith_result;\n  char *temp_string [2];\n  \n  current_string = *input_string;\n  *input_string = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)current_string < 5) ||\n      (startswith_result = is_type_starts_with(current_string,\"type\"), startswith_result == '\\0')) ||\n     ((current_string[4] != '$' && (current_string[4] != '.')))) {\n    if (*current_string != '_') {\n      return 1;\n    }\n    if (current_string[1] != '_') {\n      return 1;\n    }\n    if (current_string[2] != 'o') {\n      return 1;\n    }\n    if (current_string[3] != 'p') {\n      return 1;\n    }\n    current_string = current_string + 4;\n  }\n  else {\n    current_string = current_string + 5;\n  }\n  startswith_result = demangle_type_00113e5e(result,temp_string,0);\n  if (startswith_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "demangle_type_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "demangle_type_00113e5e",
                "cVar1": "startswith_result",
                "local_20": "temp_string",
                "local_20[0]": "current_string",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "offset",
                "stab_demangle_type_lto_priv_0": "demangle_type",
                "startswith_lto_priv_0_lto_priv_0": "is_type_starts_with"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "FUN_00113ede": {
                    "1": "check_if_string_ends_with_suffix",
                    "2": "check_suffix",
                    "3": "check_string_suffix",
                    "7": "check_string_length"
                },
                "__s": {
                    "1": "str_ptr",
                    "10": "input_string",
                    "3": "str",
                    "4": "current_string",
                    "8": "string"
                },
                "param_1": {
                    "1": "str_array",
                    "10": "string_array",
                    "2": "input_strings",
                    "3": "string",
                    "5": "input_string",
                    "6": "strings"
                },
                "sVar1": {
                    "2": "str_length",
                    "25": "string_length",
                    "4": "length"
                },
                "uVar2": {
                    "1": "is_startswith",
                    "13": "result",
                    "2": "is_suffix_match",
                    "4": "is_match",
                    "5": "startswith_result"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *input_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  input_string = *string_array;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(input_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_string_length_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "__s": "input_string",
                "param_1": "string_array",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "1": "create_and_initialize_hashtable",
                    "4": "initialize_hashtable",
                    "5": "create_hashtable",
                    "7": "initialize_hash_table",
                    "9": "create_hash_table"
                },
                "free": {
                    "1": "free_memory",
                    "21": "release_memory",
                    "8": "deallocate_memory"
                },
                "htab_create_alloc": {
                    "1": "initialize_hashtable",
                    "2": "create_hashtable_with_alloc",
                    "4": "allocate_hashtable",
                    "5": "create_hashtable",
                    "6": "create_hash_table",
                    "8": "allocate_hash_table"
                },
                "htab_eq_string": {
                    "1": "compare_strings_in_hashtable",
                    "13": "compare_strings",
                    "2": "string_equality_function",
                    "5": "is_equal_string",
                    "6": "compare_string"
                },
                "htab_hash_string": {
                    "1": "compute_hash_value",
                    "2": "calculate_hash",
                    "25": "hash_string"
                },
                "xcalloc": {
                    "1": "allocate_memory_zero",
                    "28": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104720",
                "FUN_001284f0",
                "FUN_001284f8",
                "FUN_00128500",
                "FUN_001280f0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid create_hash_table_00113f20(void)\n\n{\n  allocate_hash_table(0x10,hash_string,compare_strings,0,allocate_memory,release_memory);\n  return;\n}\n\n",
            "current_name": "create_hash_table_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "create_hash_table_00113f20",
                "free": "release_memory",
                "htab_create_alloc": "allocate_hash_table",
                "htab_eq_string": "compare_strings",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "1": "check_file_stat",
                    "12": "check_file",
                    "2": "check_file_info",
                    "3": "check_file_properties",
                    "4": "check_file_status"
                },
                "__errno_location": {
                    "1": "get_error_flag"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "iVar1": {
                    "23": "status",
                    "3": "stat_result",
                    "5": "result"
                },
                "non_fatal": {
                    "1": "print_warning"
                },
                "param_1": {
                    "12": "filename",
                    "19": "file_path"
                },
                "pcVar4": {
                    "1": "error_msg",
                    "12": "error_reason",
                    "2": "error_description",
                    "3": "reason",
                    "4": "str_error"
                },
                "piVar2": {
                    "1": "err_num",
                    "2": "error_ptr",
                    "3": "error_location",
                    "5": "error",
                    "9": "errno_ptr"
                },
                "sStack_a8": {
                    "12": "file_stat",
                    "5": "file_status",
                    "6": "file_info",
                    "8": "file_stats"
                },
                "stat": {
                    "1": "get_file_status"
                },
                "uVar3": {
                    "1": "warning_msg",
                    "14": "error_message",
                    "3": "error_string",
                    "4": "error_msg",
                    "7": "message"
                }
            },
            "called": [
                "FUN_001044f0",
                "FUN_00104966",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  get_file_status file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = get_file_status(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = get_error_flag();\n      if (*errno_ptr == 2) {\n        error_message = get_text(0,\"\\'%s\\': No such file\",5);\n        print_error_message(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = get_text(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = get_text(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = get_text(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message(error_message,file_path);\n    }\n    else {\n      error_message = get_text(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "check_file_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "__errno_location": "get_error_flag",
                "dcgettext": "get_text",
                "iVar1": "status",
                "non_fatal": "print_error_message",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stat",
                "stat": "get_file_status",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUN_00113fb0": {
                    "1": "reverse_string_compare",
                    "13": "compare_strings",
                    "14": "string_comparison",
                    "3": "string_compare"
                },
                "__n": {
                    "1": "str_length",
                    "19": "length",
                    "2": "length_of_string2"
                },
                "auVar2": {
                    "1": "comparison_result_array",
                    "19": "result",
                    "2": "return_value",
                    "4": "comparison_result"
                },
                "extraout_var": {
                    "1": "extra_out_var",
                    "2": "extra_variable",
                    "4": "extra_output",
                    "7": "extra_var"
                },
                "iVar1": {
                    "1": "string_comparison",
                    "2": "string_comparison_result",
                    "22": "comparison_result",
                    "3": "result"
                },
                "in_RAX": {
                    "2": "return_address",
                    "3": "return_value"
                },
                "param_1": {
                    "1": "input_string1",
                    "20": "string1",
                    "4": "input_string",
                    "5": "str1"
                },
                "param_2": {
                    "1": "input_string2",
                    "20": "string2",
                    "4": "comparison_string",
                    "5": "str2"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001040e0"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00113ede",
                "FUN_00108c86",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] string_comparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 extra_var;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extra_var,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "string_comparison_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "extra_var",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "1": "parse_section_flag",
                    "30": "parse_section_flags"
                },
                "auVar8": {
                    "1": "result_container",
                    "6": "result_struct",
                    "7": "result"
                },
                "iVar1": {
                    "1": "strcmp_result",
                    "11": "comparison_result",
                    "15": "result",
                    "2": "compare_result"
                },
                "iVar6": {
                    "1": "int_value",
                    "2": "comparison_result",
                    "4": "section_flag_index",
                    "6": "flag_index"
                },
                "param_1": {
                    "1": "section_flag",
                    "11": "section_flags",
                    "2": "flags",
                    "3": "flag_string",
                    "5": "input_string"
                },
                "param_2": {
                    "1": "var_2",
                    "10": "param_2",
                    "16": "param2",
                    "2": "unused_param2"
                },
                "param_3": {
                    "1": "var_3",
                    "10": "param_3",
                    "16": "param3",
                    "2": "arg3"
                },
                "param_4": {
                    "1": "section_flag",
                    "16": "param4",
                    "2": "unused_param4",
                    "7": "param_4"
                },
                "pcVar3": {
                    "1": "delimiter_pos",
                    "14": "comma_position",
                    "3": "delimiter",
                    "4": "comma_ptr"
                },
                "pcVar4": {
                    "1": "next_position",
                    "2": "next_flag_string",
                    "8": "next_section_flag",
                    "9": "next_flag"
                },
                "sVar5": {
                    "1": "flags_len",
                    "13": "flag_length",
                    "2": "string_length",
                    "4": "section_flag_length"
                },
                "uVar2": {
                    "1": "localized_error",
                    "4": "message",
                    "5": "error_string",
                    "8": "error_message"
                },
                "uVar7": {
                    "1": "section_flag",
                    "11": "section_flags",
                    "3": "result",
                    "4": "flags",
                    "5": "parsed_flags"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_flag;\n  size_t flag_length;\n  int flag_index;\n  uint section_flags;\n  undefined return_value [16];\n  \n  section_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      flag_index = (int)flag_length;\n      next_flag = (char *)0x0;\n    }\n    else {\n      next_flag = comma_position + 1;\n      flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)flag_index;\n    result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",section_flags,flag_length);\n      if (result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",section_flags,flag_length);\n              if (result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",section_flags,flag_length);\n                if (result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (result != 0) {\n                              comma_position = (char *)xmalloc((long)(flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(error_message,comma_position);\n                              error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(error_message,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_flag;\n  } while (next_flag != (char *)0x0);\n  return_value._4_4_ = 0;\n  return_value._0_4_ = section_flags;\n  return_value._8_8_ = param4;\n  return return_value;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "return_value",
                "iVar1": "result",
                "iVar6": "flag_index",
                "param_1": "section_flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_flag",
                "sVar5": "flag_length",
                "uVar2": "error_message",
                "uVar7": "section_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "FUN_00114190": {
                    "1": "analyze_entry",
                    "2": "process_data"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "fatal": {
                    "1": "handle_error"
                },
                "fnmatch": {
                    "1": "match_patterns"
                },
                "iVar4": {
                    "1": "index_variable",
                    "10": "comparison_result",
                    "11": "temp_var4",
                    "2": "result",
                    "3": "index_var"
                },
                "param_1": {
                    "1": "data",
                    "18": "input_array",
                    "5": "input_string"
                },
                "param_2": {
                    "1": "option_flag",
                    "16": "flag",
                    "2": "is_comparison"
                },
                "param_3": {
                    "1": "option",
                    "2": "mask",
                    "3": "search_flags",
                    "5": "options",
                    "7": "flags"
                },
                "plVar2": {
                    "1": "pointer_var2",
                    "12": "temp_var2",
                    "2": "temp_pointer",
                    "5": "pattern"
                },
                "pplVar3": {
                    "1": "return_value_ptr",
                    "12": "temp_var3",
                    "5": "result"
                },
                "pplVar6": {
                    "1": "current_item",
                    "2": "current_match",
                    "8": "temp_var6"
                },
                "pplVar7": {
                    "1": "nested_ptr_array2",
                    "2": "previous_match",
                    "3": "current_node",
                    "5": "temp_var7"
                },
                "pplVar8": {
                    "1": "next_matched_pattern",
                    "2": "next_pointer",
                    "3": "next_node",
                    "5": "temp_var8"
                },
                "strcmp": {
                    "1": "compare_strings"
                },
                "uVar1": {
                    "1": "u_value1",
                    "13": "temp_var1",
                    "2": "flags",
                    "3": "temp_var"
                },
                "uVar5": {
                    "1": "temp_var",
                    "11": "error_message",
                    "2": "error_msg"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104bba",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_00104340",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00116110",
                "FUN_00115b70",
                "FUN_00114c20",
                "FUN_00108072",
                "FUN_00115530"
            ],
            "code": "\nlong ** process_data_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint temp_var1;\n  long *temp_var2;\n  long **temp_var3;\n  int temp_var4;\n  undefined8 error_message;\n  long **temp_var6;\n  long **temp_var7;\n  long **temp_var8;\n  \n  temp_var7 = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      temp_var6 = (long **)*temp_var7;\n      if (temp_var6 == (long **)0x0) {\n        return (long **)0x0;\n      }\n      temp_var7 = (long **)0x0;\n    }\n    else {\n      temp_var2 = DAT_00127900[1];\n      if (*(char *)temp_var2 == '!') {\n        temp_var4 = match_patterns((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        temp_var6 = temp_var7;\n        if (temp_var4 == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      temp_var4 = match_patterns((char *)temp_var2,(char *)input_array,0);\n      if (temp_var4 != 0) goto LAB_001141e5;\n      temp_var6 = (long **)*temp_var7;\n      if (temp_var6 == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)temp_var6 + 0x14)) != 0) {\n      temp_var2 = temp_var6[1];\n      if (*(char *)temp_var2 == '!') {\n        temp_var4 = match_patterns((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        if (temp_var4 == 0) {\nLAB_0011438e:\n          *(undefined *)(temp_var6 + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        temp_var4 = match_patterns((char *)temp_var2,(char *)input_array,0);\n        if ((temp_var7 == (long **)0x0) && (temp_var4 == 0)) {\n          temp_var8 = (long **)*temp_var6;\n          temp_var7 = temp_var6;\n          if (temp_var8 == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    temp_var8 = (long **)*temp_var6;\n    temp_var6 = temp_var7;\n    if (temp_var8 != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    temp_var4 = compare_strings((char *)DAT_00127900[1],(char *)input_array);\n    if (temp_var4 == 0) {\nLAB_001143cd:\n      temp_var1 = *(uint *)((long)temp_var7 + 0x14);\n      if ((((temp_var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((temp_var1 & 2) != 0)))) {\n        error_message = get_translated_text(0,\"error: %s both copied and removed\",5);\n                    \n        handle_error(error_message,input_array);\n      }\n      if ((((temp_var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = get_translated_text(0,\"error: %s both sets and alters VMA\",5);\n                    \n        handle_error(error_message,input_array);\n      }\n      if ((((temp_var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)temp_var7 + 0x14) = temp_var1 | flags;\n        return temp_var7;\n      }\n      error_message = get_translated_text(0,\"error: %s both sets and alters LMA\",5);\n                    \n      handle_error(error_message,input_array);\n    }\n    temp_var7 = (long **)*temp_var7;\n    if (temp_var7 == (long **)0x0) goto LAB_001142a9;\n    temp_var4 = compare_strings((char *)temp_var7[1],(char *)input_array);\n    if (temp_var4 == 0) goto LAB_001143cd;\n    temp_var8 = (long **)*temp_var7;\n    temp_var6 = (long **)0x0;\n    if (temp_var8 == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      temp_var7 = temp_var6;\n      if (flag == '\\0') {\n        while (temp_var6 = temp_var8, temp_var3 = temp_var7, temp_var8 = temp_var6,\n              (flags & *(uint *)((long)temp_var6 + 0x14)) != 0) {\n          temp_var2 = temp_var6[1];\n          if (*(char *)temp_var2 == '!') {\n            temp_var4 = match_patterns((char *)((long)temp_var2 + 1),(char *)input_array,0);\n            if (temp_var4 == 0) goto LAB_0011438e;\n            temp_var8 = (long **)*temp_var6;\n            if ((long **)*temp_var6 == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            temp_var4 = match_patterns((char *)temp_var2,(char *)input_array,0);\n            if ((temp_var7 == (long **)0x0) && (temp_var4 == 0)) {\n              temp_var7 = temp_var6;\n              temp_var8 = (long **)*temp_var6;\n              if ((long **)*temp_var6 == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              temp_var8 = (long **)*temp_var6;\n              if ((long **)*temp_var6 == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        temp_var4 = compare_strings((char *)temp_var8[1],(char *)input_array);\n        temp_var3 = temp_var6;\n        temp_var7 = temp_var8;\n        if (temp_var4 == 0) goto LAB_001143cd;\n      }\n      temp_var6 = temp_var3;\n      temp_var8 = (long **)*temp_var8;\n      temp_var7 = temp_var6;\n    } while (temp_var8 != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      temp_var6 = (long **)allocate_memory(0x30);\n      *(undefined (*) [16])(temp_var6 + 3) = (undefined  [16])0x0;\n      *(undefined *)(temp_var6 + 2) = 0;\n      *(uint *)((long)temp_var6 + 0x14) = flags;\n      temp_var6[5] = (long *)0x0;\n      temp_var7 = temp_var6;\n      *temp_var6 = (long *)DAT_00127900;\n      DAT_00127900 = temp_var7;\n      temp_var6[1] = input_array;\n      return temp_var6;\n    }\n  }\nLAB_00114212:\n  if (temp_var7 == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(temp_var7 + 2) = 1;\n  return temp_var7;\n}\n\n",
            "current_name": "process_data_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "process_data_00114190",
                "dcgettext": "get_translated_text",
                "fatal": "handle_error",
                "fnmatch": "match_patterns",
                "iVar4": "temp_var4",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "temp_var2",
                "pplVar3": "temp_var3",
                "pplVar6": "temp_var6",
                "pplVar7": "temp_var7",
                "pplVar8": "temp_var8",
                "strcmp": "compare_strings",
                "uVar1": "temp_var1",
                "uVar5": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "DAT_00127a40": {
                    "1": "file_error"
                },
                "FUN_00114460": {
                    "1": "read_and_process_file_lines",
                    "13": "read_and_process_file",
                    "2": "read_file_and_process_lines",
                    "3": "load_and_process_file",
                    "9": "parse_file"
                },
                "__n": {
                    "31": "file_size"
                },
                "__ptr": {
                    "1": "file_data",
                    "19": "buffer",
                    "3": "file_content",
                    "8": "file_buffer"
                },
                "__stream": {
                    "10": "file",
                    "21": "file_stream"
                },
                "bVar8": {
                    "1": "byte_val",
                    "2": "byte_value",
                    "22": "current_byte"
                },
                "iVar1": {
                    "1": "line_num",
                    "16": "line_number",
                    "2": "line_counter",
                    "8": "line_count"
                },
                "param_1": {
                    "31": "file_path"
                },
                "param_2": {
                    "1": "hash_table_ptr",
                    "2": "hash_map",
                    "21": "hash_table",
                    "3": "htab"
                },
                "param_3": {
                    "1": "data",
                    "11": "file_data",
                    "2": "file_data_ptr",
                    "3": "file_contents",
                    "9": "file_content"
                },
                "pbVar10": {
                    "1": "buffer_ptr",
                    "2": "current_char",
                    "6": "current_position",
                    "8": "current_ptr"
                },
                "pbVar11": {
                    "1": "char_ptr2",
                    "2": "new_line_ptr",
                    "3": "next_char",
                    "4": "next_position",
                    "5": "line_start"
                },
                "pbVar12": {
                    "1": "buffer_position",
                    "2": "current_line_ptr",
                    "3": "start_ptr",
                    "4": "line_end",
                    "9": "line_start"
                },
                "pbVar7": {
                    "1": "line_ptr",
                    "2": "current_line",
                    "3": "ptr",
                    "7": "current_char"
                },
                "pbVar9": {
                    "1": "next_position",
                    "17": "next_byte",
                    "2": "next_char_ptr",
                    "3": "next_char",
                    "4": "next_ptr"
                },
                "pcVar3": {
                    "1": "errno_str",
                    "15": "error_message",
                    "2": "error_description",
                    "4": "error_msg"
                },
                "piVar2": {
                    "1": "error_num",
                    "2": "errno_location",
                    "3": "error_number_ptr",
                    "6": "error_code"
                },
                "ppbVar6": {
                    "1": "slot_address",
                    "3": "hash_table_entry",
                    "5": "slot",
                    "8": "hash_table_slot",
                    "9": "hash_slot"
                },
                "sVar5": {
                    "1": "read_bytes",
                    "26": "bytes_read",
                    "4": "read_size"
                },
                "uVar4": {
                    "1": "localized_error",
                    "2": "error_msg",
                    "3": "translated_msg",
                    "4": "error_message",
                    "7": "translated_message"
                }
            },
            "called": [
                "FUN_00104210",
                "FUN_00113f50",
                "FUN_00104160",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104750",
                "FUN_00104130",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_process_file_00114460(char *file_path,undefined8 hash_table,byte **file_data)\n\n{\n  int line_number;\n  int *error_code;\n  char *error_message;\n  undefined8 translated_message;\n  size_t file_size;\n  byte *buffer;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  byte *current_ptr;\n  byte *line_start;\n  byte *line_start;\n  \n  file_size = get_file_size();\n  if (file_size == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(file_path,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      error_code = __errno_location();\n      error_message = strerror(*error_code);\n      translated_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translated_message,file_path,error_message);\n    }\n    bytes_read = fread(buffer,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_number = ferror(file_stream), line_number != 0)) {\n      translated_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translated_message,file_path);\n    }\n    line_number = 1;\n    fclose(file_stream);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_ptr = line_start, current_byte != 0) {\n      for (; current_byte = *current_ptr, line_start = current_ptr, current_byte != 10; current_ptr = current_ptr + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_byte = current_ptr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_ptr = 0;\n            next_byte = current_ptr + 1;\n            if (current_ptr[1] == 10) {\n              next_byte = current_ptr + 2;\n              line_start = current_ptr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_ptr = 0;\n      if (current_ptr[1] == 0xd) {\n        line_start = current_ptr + 1;\n        next_byte = current_ptr + 2;\n      }\n      else {\n        next_byte = current_ptr + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_ptr = line_start, current_byte == 9))) {\n        current_ptr = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_ptr;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_ptr[1];\n        current_ptr = current_ptr + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_ptr[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_ptr[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_ptr[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_ptr[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_ptr[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_ptr[6];\n          current_char = current_ptr + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          translated_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translated_message,file_path,line_number);\n        }\n      }\nLAB_00114599:\n      *current_ptr = 0;\n      if (line_start < current_ptr) {\n        hash_slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *hash_slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_byte;\n      current_byte = line_start[1];\n    }\n    *file_data = buffer;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_file_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file_stream",
                "bVar8": "current_byte",
                "iVar1": "line_number",
                "param_1": "file_path",
                "param_2": "hash_table",
                "param_3": "file_data",
                "pbVar10": "current_ptr",
                "pbVar11": "line_start",
                "pbVar12": "line_start",
                "pbVar7": "current_char",
                "pbVar9": "next_byte",
                "pcVar3": "error_message",
                "piVar2": "error_code",
                "ppbVar6": "hash_slot",
                "sVar5": "bytes_read",
                "uVar4": "translated_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "DAT_001264b0": {
                    "1": "long_section_mode_flag"
                },
                "DAT_001264b4": {
                    "1": "section_mode"
                },
                "DAT_0012799c": {
                    "1": "alignment_option"
                },
                "DAT_001279a4": {
                    "1": "selected_format"
                },
                "DAT_001279e9": {
                    "1": "copy_debug_info_flag"
                },
                "DAT_001279eb": {
                    "1": "internal_stat_flag"
                },
                "DAT_00127a30": {
                    "1": "debug_link_flag"
                },
                "DAT_00127a40": {
                    "1": "error_flag"
                },
                "DAT_00127a48": {
                    "1": "archive_copy_option"
                },
                "FUNC_00114e50": {
                    "1": "calculate_hash"
                },
                "FUNK_00114690": {
                    "1": "extract_and_copy_archive"
                },
                "FUN_00104d25": {
                    "1": "reversing_function"
                },
                "FUN_00114690": {
                    "1": "process_input_file",
                    "2": "process_binary",
                    "3": "copy_archive_files"
                },
                "__ptr": {
                    "1": "undefined8_pointer_var"
                },
                "bVar1": {
                    "1": "byte_value",
                    "13": "byte_var1",
                    "2": "bfd_flags",
                    "5": "byte_var"
                },
                "bVar25": {
                    "1": "is_long_format",
                    "2": "section_mode_flag",
                    "5": "bool_var25",
                    "7": "bool_var1"
                },
                "bVar26": {
                    "1": "byte_var",
                    "4": "byte_var26",
                    "6": "byte_var2"
                },
                "bfd_check_format": {
                    "1": "check_input_format"
                },
                "bfd_fdopenw": {
                    "1": "fd_open_output_file"
                },
                "bfd_nonfatal_message": {
                    "1": "print_bfd_nonfatal_message"
                },
                "bfd_openr": {
                    "1": "open_input_file"
                },
                "bfd_openw": {
                    "1": "open_output_file"
                },
                "bfd_stat": {
                    "1": "get_file_status"
                },
                "cVar2": {
                    "1": "temp_char_var1",
                    "2": "char_var",
                    "3": "check_result",
                    "7": "char_var1",
                    "8": "char_var2"
                },
                "cVar3": {
                    "1": "copy_object_result",
                    "4": "copy_result",
                    "8": "char_var2"
                },
                "check_file_00113f50": {
                    "1": "check_file"
                },
                "chmod": {
                    "1": "change_file_permissions"
                },
                "concat": {
                    "1": "concat_strings"
                },
                "copy_archive_001052a2": {
                    "1": "copy_archive_file"
                },
                "create_temp_directory_0011a0e0": {
                    "1": "create_temp_directory"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "execute_function_00114d50": {
                    "1": "execute_function"
                },
                "fatal": {
                    "1": "report_fatal_error"
                },
                "free": {
                    "1": "release_memory"
                },
                "get_file_size": {
                    "1": "calculate_file_size"
                },
                "iVar4": {
                    "1": "temp_int_var1",
                    "3": "int_var",
                    "5": "int_var1",
                    "6": "int_var4"
                },
                "iVar5": {
                    "1": "int_var_2",
                    "2": "status",
                    "4": "bfd_stat_result",
                    "5": "int_var2",
                    "6": "int_var5"
                },
                "lStack_98": {
                    "1": "read_buffer_size",
                    "2": "long_stack_var1",
                    "3": "stack_var2",
                    "4": "long_stack_var"
                },
                "lVar13": {
                    "1": "input_file_size",
                    "10": "file_size",
                    "5": "long_var13",
                    "6": "long_var2"
                },
                "lVar21": {
                    "1": "chunk_size",
                    "3": "bytes_written",
                    "5": "long_var21",
                    "6": "long_var3"
                },
                "lVar8": {
                    "1": "read_result",
                    "2": "long_var",
                    "6": "bytes_read",
                    "8": "long_var1"
                },
                "local_158": {
                    "1": "local_stat_struct",
                    "2": "file_stat",
                    "3": "stat_struct1",
                    "4": "stat_struct"
                },
                "local_198": {
                    "1": "output_file_path_ptr",
                    "2": "current_output_file"
                },
                "local_1a0": {
                    "1": "output_file_path_ptr",
                    "2": "output_file",
                    "3": "output_file_ptr",
                    "5": "output_bfd"
                },
                "local_c8": {
                    "1": "temporary_directories",
                    "3": "temp_dir_array",
                    "4": "void_ptr_array"
                },
                "local_c8 [3]": {
                    "1": "void_pointer_array1"
                },
                "make_tempdir": {
                    "1": "create_temp_directory"
                },
                "non_fatal": {
                    "1": "report_non_fatal_error"
                },
                "param_1": {
                    "1": "input_file_name",
                    "18": "input_file_path",
                    "2": "file_path",
                    "9": "input_file"
                },
                "param_2": {
                    "1": "file_output",
                    "18": "output_file_path",
                    "2": "output_path",
                    "9": "output_file"
                },
                "param_3": {
                    "1": "fd",
                    "30": "file_descriptor"
                },
                "param_4": {
                    "1": "bfd_options",
                    "2": "stat_data",
                    "4": "stat_buffer",
                    "6": "stat_struct"
                },
                "param_5": {
                    "1": "arch_name",
                    "2": "bfd_format",
                    "4": "bfd_options",
                    "5": "target_format"
                },
                "param_6": {
                    "1": "file_header",
                    "2": "section",
                    "7": "section_size"
                },
                "param_7": {
                    "1": "flags",
                    "3": "copy_flag",
                    "5": "copy_flags",
                    "6": "flag"
                },
                "pcVar15": {
                    "1": "char_var15",
                    "2": "pointer_char_var15",
                    "6": "temp_dir_path"
                },
                "pcVar16": {
                    "1": "archive_member_path"
                },
                "pcVar17": {
                    "1": "current_file_name",
                    "2": "current_path"
                },
                "pcVar18": {
                    "1": "char_var4",
                    "2": "pointer_char_var18",
                    "5": "temp_file_path"
                },
                "pcVar19": {
                    "1": "matching_formats"
                },
                "pcVar20": {
                    "1": "close_function_pointer",
                    "2": "code_pointer_var20",
                    "4": "close_function"
                },
                "pcVar23": {
                    "1": "char_ptr2",
                    "2": "string_var3"
                },
                "piVar10": {
                    "1": "is_error",
                    "2": "errno_location",
                    "3": "int_ptr"
                },
                "ppcVar16": {
                    "1": "archive_file",
                    "2": "current_file"
                },
                "ppcVar19": {
                    "1": "archive_file",
                    "2": "pointer_pointer_char_var19"
                },
                "ppcVar20": {
                    "1": "code_ptr"
                },
                "ppcVar23": {
                    "1": "error_message3"
                },
                "ppcVar6": {
                    "1": "double_pointer_char_var6",
                    "2": "archived_files"
                },
                "ppcVar9": {
                    "1": "error_location"
                },
                "ppvVar16": {
                    "1": "input_archives"
                },
                "ppvVar19": {
                    "1": "output_archives"
                },
                "ppvVar6": {
                    "1": "archived_files"
                },
                "print_error_message_001126c0": {
                    "1": "print_error_message"
                },
                "print_matching_formats_0011256b": {
                    "1": "print_matching_formats"
                },
                "printf": {
                    "1": "print_formatted_string"
                },
                "psVar24": {
                    "1": "stats",
                    "2": "stat_ptr1",
                    "7": "stat_ptr"
                },
                "puVar14": {
                    "1": "input_file_descriptor",
                    "2": "input_file_ptr",
                    "4": "input_bfd"
                },
                "puVar19": {
                    "1": "char_double_ptr_2"
                },
                "puVar9": {
                    "1": "undefined_pointer",
                    "2": "undefined8_ptr"
                },
                "pvVar7": {
                    "1": "pointer_void_var7",
                    "10": "buffer",
                    "2": "void_pointer_var7",
                    "3": "void_ptr"
                },
                "report_and_exit_00119dd0": {
                    "1": "report_and_exit"
                },
                "report_data_00119ed0": {
                    "1": "report_data"
                },
                "rmdir": {
                    "1": "delete_directory"
                },
                "set_times": {
                    "1": "set_file_times"
                },
                "stat": {
                    "1": "stat_struct"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uStack_b0": {
                    "1": "ulong_stack_var1",
                    "2": "u_stack_b0",
                    "3": "stack_var1",
                    "4": "uint_stack_var"
                },
                "uVar11": {
                    "1": "undefined_var11",
                    "2": "error_message",
                    "5": "undefined8_var1"
                },
                "uVar12": {
                    "1": "temp_ulong_var2",
                    "2": "unsigned_var2",
                    "5": "error_message",
                    "6": "undefined8_var2"
                },
                "uVar22": {
                    "1": "temporary_uint_var1",
                    "2": "unsigned_var3",
                    "3": "uint_var1",
                    "4": "uint_var22"
                },
                "uVar25": {
                    "1": "add_flag"
                },
                "unlink": {
                    "1": "delete_file"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104820",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104690",
                "FUN_0011256b",
                "FUN_00104810",
                "FUN_001040b0",
                "FUN_00104780",
                "FUN_00114d50",
                "FUN_00104908",
                "FUN_00104370",
                "FUN_001043c0",
                "FUN_00104900",
                "FUN_00104240",
                "FUN_0011a0e0",
                "FUN_001041b0",
                "FUN_00119ed0",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104d25",
                "FUN_001043a0",
                "FUN_00113f50",
                "FUN_001048f0",
                "FUN_001048d0",
                "FUN_00104500",
                "FUN_001041f0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid copy_archive_files_00114690(undefined8 input_file_path,undefined8 output_file_path,int file_descriptor,undefined8 stat_struct,\n                 undefined8 target_format,long section_size,undefined8 flag)\n\n{\n  byte byte_var1;\n  char char_var2;\n  char char_var3;\n  int int_var4;\n  int int_var5;\n  char **string_array_var1;\n  void *buffer;\n  long long_var1;\n  undefined8 *temp_ptr;\n  int *int_pointer1;\n  undefined8 undefined8_var1;\n  undefined8 undefined8_var2;\n  long file_size;\n  undefined8 *input_bfd;\n  char *temp_dir_path;\n  char **pointer_pointer_char_var16;\n  char *pointer_char_var17;\n  char *temp_file_path;\n  undefined8 *undefined8_pointer_var;\n  char **pointer_pointer_char_var19;\n  code *close_function;\n  long long_var3;\n  uint uint_var22;\n  char *pointer_char_var23;\n  stat_struct *stat_ptr;\n  bool bool_var;\n  byte byte_var2;\n  undefined8 *output_bfd;\n  long *current_output_file;\n  stat_struct stat_struct;\n  void *temp_directories [3];\n  uint uint_stack_var;\n  long long_stack_var;\n  \n  byte_var2 = 0;\n  file_size = calculate_file_size();\n  if (file_size < 1) {\n    if (file_size == 0) {\n      undefined8_var2 = get_error_message(0,\"error: the input file \\'%s\\' is empty\",5);\n      report_non_fatal_error(undefined8_var2,input_file_path);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  input_bfd = (undefined8 *)open_input_file(input_file_path,target_format);\n  if ((input_bfd == (undefined8 *)0x0) || (int_var5 = get_file_status(input_bfd,stat_struct), int_var5 != 0)) {\n    print_bfd_nonfatal_message(input_file_path,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)input_bfd + 0x44) = *(uint *)((long)input_bfd + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)input_bfd + 0x44) = *(uint *)((long)input_bfd + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)input_bfd + 0x44) = *(uint *)((long)input_bfd + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)input_bfd + 0x44) = *(uint *)((long)input_bfd + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)input_bfd + 0x44) = *(uint *)((long)input_bfd + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)input_bfd + 0x44) = *(uint *)((long)input_bfd + 0x44) | 0x40000;\n  }\n  char_var2 = check_input_format(input_bfd,2);\n  if (char_var2 != '\\0') {\n    if (section_size == 0) {\n      char_var2 = '\\0';\n      section_size = *(long *)input_bfd[1];\n    }\n    if (file_descriptor < 0) {\n      output_bfd = (undefined8 *)open_output_file(output_file_path,section_size);\n    }\n    else {\n      output_bfd = (undefined8 *)fd_open_output_file(output_file_path,section_size,file_descriptor);\n    }\n    if (output_bfd != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        undefined8_var2 = *input_bfd;\n        undefined8_var1 = get_error_message(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        report_non_fatal_error(undefined8_var1,undefined8_var2);\n        DAT_00127a30 = 0;\n      }\n      set_long_section_mode(output_bfd,input_bfd,DAT_001264b4);\n      current_output_file = output_bfd + 0x1f;\n      if ((*(byte *)((long)input_bfd + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        undefined8_var2 = get_error_message(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_bfd_nonfatal_message(0,input_bfd,0,undefined8_var2);\n        return;\n      }\n      temp_dir_path = (char *)create_temp_directory(*output_bfd);\n      if (temp_dir_path == (char *)0x0) {\n        int_pointer1 = __errno_location();\n        temp_dir_path = get_error_string(*int_pointer1);\n        undefined8_var2 = get_error_message(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        report_fatal_error(undefined8_var2,temp_dir_path);\n      }\n      if (DAT_00127a48 == 7) {\n        byte_var1 = *(byte *)((long)input_bfd + 0x49);\n        uint_var22 = 0;\n      }\n      else {\n        byte_var1 = *(byte *)((long)input_bfd + 0x49);\n        uint_var22 = byte_var1 >> 3 & 1;\n      }\n      bool_var = _DAT_001264b0 != 0;\n      *(byte *)((long)output_bfd + 0x49) =\n           byte_var1 & 0x10 | (byte)(uint_var22 << 3) | *(byte *)((long)output_bfd + 0x49) & 0xe7;\n      if (bool_var) {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x2000;\n      }\n      undefined8_pointer_var = (undefined8 *)0x0;\n      pointer_pointer_char_var16 = (char **)open_input_file_next_archived_file(input_bfd,0);\n      char_var3 = bfd_set_format(output_bfd,*(byte *)(input_bfd + 9) & 7);\n      if (char_var3 == '\\0') {\n        DAT_00127a40 = 1;\n        print_bfd_nonfatal_message(0,output_bfd,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (pointer_pointer_char_var16 != (char **)0x0))) {\n        temp_file_path = *pointer_pointer_char_var16;\n        pointer_char_var17 = temp_file_path;\n        if (*temp_file_path == '/') {\nLAB_0010527d:\n          undefined8_var2 = get_error_message(0,\"illegal pathname found in archive member: %s\",5);\n          report_non_fatal_error(undefined8_var2,temp_file_path);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointer_char_var17 != '\\0') {\n          pointer_char_var23 = pointer_char_var17;\n          if ((*pointer_char_var17 == '.') && (pointer_char_var23 = pointer_char_var17 + 1, pointer_char_var17[1] == '.')) {\n            pointer_char_var23 = pointer_char_var17 + 2;\n            if ((pointer_char_var17[2] == '\\0') || (pointer_char_var17[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointer_char_var23 != '\\0' && (*pointer_char_var23 != '/')); pointer_char_var23 = pointer_char_var23 + 1) {\n          }\n          pointer_char_var17 = pointer_char_var23;\n          if (*pointer_char_var23 == '/') {\n            copy_archive_file();\n            return;\n          }\n        }\n        temp_file_path = (char *)concat_strings(temp_dir_path,&DAT_0011b47d);\n        int_var5 = stat_struct(temp_file_path,&stat_struct);\n        temp_ptr = undefined8_pointer_var;\n        if (-1 < int_var5) {\n          file_size = create_temp_directory(temp_file_path);\n          release_memory(temp_file_path);\n          if (file_size == 0) {\n            int_pointer1 = __errno_location();\n            temp_file_path = get_error_string(*int_pointer1);\n            undefined8_var2 = get_error_message(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            report_non_fatal_error(undefined8_var2,temp_file_path);\n            goto LAB_00104e93;\n          }\n          temp_ptr = (undefined8 *)allocate_memory(0x18);\n          temp_file_path = *pointer_pointer_char_var16;\n          *temp_ptr = undefined8_pointer_var;\n          temp_ptr[2] = 0;\n          temp_ptr[1] = file_size;\n          temp_file_path = (char *)concat_strings(file_size,&DAT_0011b47d,temp_file_path);\n        }\n        int_var5 = 0;\n        if (DAT_001279eb != '\\0') {\n          stat_ptr = &stat_struct;\n          for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n            *(undefined4 *)&stat_ptr->st_dev = 0;\n            stat_ptr = (stat_struct *)((long)stat_ptr + (ulong)byte_var2 * -8 + 4);\n          }\n          pointer_pointer_char_var19 = (char **)pointer_pointer_char_var16[0x1d];\n          if ((char **)pointer_pointer_char_var16[0x1d] == (char **)0x0) {\n            pointer_pointer_char_var19 = pointer_pointer_char_var16;\n          }\n          int_var5 = (**(code **)(pointer_pointer_char_var19[1] + 0x1e8))(pointer_pointer_char_var16,&stat_struct);\n          if (int_var5 != 0) {\n            pointer_char_var17 = *pointer_pointer_char_var16;\n            undefined8_var2 = get_error_message(0,\"internal stat_struct error on %s\",5);\n            report_non_fatal_error(undefined8_var2,pointer_char_var17);\n          }\n        }\n        undefined8_pointer_var = (undefined8 *)allocate_memory(0x18);\n        undefined8_pointer_var[1] = temp_file_path;\n        *undefined8_pointer_var = temp_ptr;\n        undefined8_pointer_var[2] = 0;\n        char_var3 = check_input_format(pointer_pointer_char_var16,1);\n        if (char_var3 == '\\0') {\n          undefined8_var2 = get_error_message(0,\"Unable to recognise the format of file\",5);\n          print_bfd_nonfatal_message(0,pointer_pointer_char_var16,0,undefined8_var2);\n          pointer_pointer_char_var19 = (char **)open_output_file(temp_file_path,section_size);\n          if (pointer_pointer_char_var19 == (char **)0x0) {\nLAB_00104e80:\n            print_bfd_nonfatal_message(temp_file_path,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          string_array_var1 = (char **)pointer_pointer_char_var16[0x1d];\n          if ((char **)pointer_pointer_char_var16[0x1d] == (char **)0x0) {\n            string_array_var1 = pointer_pointer_char_var16;\n          }\n          int_var4 = (**(code **)(string_array_var1[1] + 0x1e8))(pointer_pointer_char_var16);\n          file_size = long_stack_var;\n          if (int_var4 == 0) {\n            if (long_stack_var < 0) {\n              bfd_get_archive_filename(pointer_pointer_char_var16);\n              undefined8_var2 = get_error_message(0,\"stat_struct returns negative size for `%s\\'\",5);\n              report_non_fatal_error(undefined8_var2);\n            }\n            else {\n              int_var4 = bfd_seek(pointer_pointer_char_var16,0,0);\n              if (int_var4 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointer_char_var17 = *pointer_pointer_char_var19;\n                  undefined8_var2 = bfd_get_archive_filename(pointer_pointer_char_var16);\n                  pointer_char_var23 = (char *)get_error_message(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  print_formatted_string(pointer_char_var23,undefined8_var2,pointer_char_var17);\n                }\n                buffer = (void *)allocate_memory(0x2000);\n                for (; file_size != 0; file_size = file_size - long_var3) {\n                  long_var3 = 0x2000;\n                  if (file_size < 0x2001) {\n                    long_var3 = file_size;\n                  }\n                  long_var1 = bfd_bread(buffer,long_var3,pointer_pointer_char_var16);\n                  string_array_var1 = pointer_pointer_char_var16;\n                  if ((long_var3 != long_var1) ||\n                     (long_var1 = bfd_bwrite(buffer,long_var3,pointer_pointer_char_var19), string_array_var1 = pointer_pointer_char_var19,\n                     long_var3 != long_var1)) {\n                    print_bfd_nonfatal_message(0,string_array_var1,0,0);\n                    release_memory(buffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                change_file_permissions(*pointer_pointer_char_var19,uint_stack_var | 0x100);\n                release_memory(buffer);\n                char_var3 = bfd_close_all_done(pointer_pointer_char_var19);\n                if (char_var3 == '\\0') {\n                  print_bfd_nonfatal_message(temp_file_path,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8_var2 = bfd_get_archive_filename(pointer_pointer_char_var16);\n              bfd_nonreport_fatal_error(undefined8_var2);\n            }\n          }\n          else {\n            print_bfd_nonfatal_message(0,pointer_pointer_char_var16,0,0);\n          }\nLAB_00104f00:\n          char_var3 = bfd_close_all_done(pointer_pointer_char_var19);\n          if (char_var3 == '\\0') {\n            print_bfd_nonfatal_message(temp_file_path,0,0,0);\n          }\nLAB_00104ec9:\n          delete_file(temp_file_path);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (char_var2 == '\\0') {\n            pointer_pointer_char_var19 = (char **)open_output_file(temp_file_path,*(undefined8 *)pointer_pointer_char_var16[1]);\n          }\n          else {\n            pointer_pointer_char_var19 = (char **)open_output_file(temp_file_path,section_size);\n          }\n          if (pointer_pointer_char_var19 == (char **)0x0) goto LAB_00104e80;\n          char_var3 = copy_object(pointer_pointer_char_var16,pointer_pointer_char_var19,flag);\n          if (char_var3 == '\\0') {\n            int_var4 = bfd_get_arch(pointer_pointer_char_var16);\n            if (int_var4 == 0) goto LAB_00104d75;\n            char_var3 = bfd_close_all_done(pointer_pointer_char_var19);\n            if (char_var3 == '\\0') {\n              print_bfd_nonfatal_message(temp_file_path,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var3 = bfd_close(pointer_pointer_char_var19);\n          if (char_var3 == '\\0') {\n            print_bfd_nonfatal_message(temp_file_path,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (int_var5 == 0)) {\n            set_file_times(temp_file_path,&stat_struct);\n          }\n          file_size = open_input_file(temp_file_path,section_size);\n          undefined8_pointer_var[2] = file_size;\n          *current_output_file = file_size;\n          current_output_file = (long *)(file_size + 0xf0);\n          pointer_pointer_char_var19 = (char **)open_input_file_next_archived_file(input_bfd);\n          bfd_close(pointer_pointer_char_var16);\n          pointer_pointer_char_var16 = pointer_pointer_char_var19;\n        }\n      }\n      *current_output_file = 0;\n      buffer = (void *)xstrdup(*output_bfd);\n      if (DAT_00127a40 == 0) {\n        close_function = bfd_close;\n      }\n      else {\n        close_function = bfd_close_all_done;\n      }\n      char_var2 = (*close_function)(output_bfd);\n      if (char_var2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_bfd_nonfatal_message(buffer,0,0,0);\n      }\n      release_memory(buffer);\n      buffer = (void *)xstrdup(*input_bfd);\n      char_var2 = bfd_close(input_bfd);\n      if (char_var2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_bfd_nonfatal_message(buffer,0,0,0);\n      }\n      release_memory(buffer);\nLAB_00114b4b:\n      while (undefined8_pointer_var != (undefined8 *)0x0) {\n        if (undefined8_pointer_var[2] == 0) {\n          delete_directory((char *)undefined8_pointer_var[1]);\n        }\n        else {\n          bfd_close();\n          delete_file((char *)undefined8_pointer_var[1]);\n        }\n        release_memory((void *)undefined8_pointer_var[1]);\n        input_bfd = (undefined8 *)*undefined8_pointer_var;\n        release_memory(undefined8_pointer_var);\n        undefined8_pointer_var = input_bfd;\n      }\n      delete_directory(temp_dir_path);\n      release_memory(temp_dir_path);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    print_bfd_nonfatal_message(output_file_path,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  char_var2 = check_input_format_matches(input_bfd,1,temp_directories);\n  if (char_var2 == '\\0') {\n    int_var5 = bfd_get_error();\n    char_var2 = check_input_format_matches(input_bfd,3,&stat_struct);\n    if (char_var2 == '\\0') {\n      int_var4 = bfd_get_error();\n      if (int_var5 != int_var4) {\n        bfd_set_error(int_var5);\n      }\n      print_bfd_nonfatal_message(input_file_path,0,0,0);\n      if (int_var5 == 0xd) {\n        list_matching_formats(temp_directories[0]);\n      }\n      if (int_var4 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      list_matching_formats(stat_struct.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (int_var5 == 0xd) {\n      release_memory(temp_directories[0]);\n    }\n  }\n  if (section_size == 0) {\n    section_size = *(long *)input_bfd[1];\n  }\n  if (file_descriptor < 0) {\n    file_size = open_output_file(output_file_path,section_size);\n  }\n  else {\n    file_size = fd_open_output_file(output_file_path,section_size,file_descriptor);\n  }\n  if (file_size == 0) goto LAB_00105231;\n  set_long_section_mode(file_size,input_bfd,DAT_001264b4);\n  char_var2 = copy_object(input_bfd,file_size,flag);\n  if (char_var2 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    char_var2 = bfd_close(file_size);\n    goto LAB_001147d5;\n  }\n  char_var2 = bfd_close_all_done(file_size);\nLAB_001147d5:\n  if (char_var2 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_bfd_nonfatal_message(output_file_path,0,0,0);\n    return;\n  }\n  char_var2 = bfd_close(input_bfd);\n  if (char_var2 == '\\0') {\n    DAT_00127a40 = 1;\n    print_bfd_nonfatal_message(input_file_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "copy_archive_files_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "copy_archive_files_00114690",
                "__ptr": "undefined8_pointer_var",
                "bVar1": "byte_var1",
                "bVar25": "bool_var",
                "bVar26": "byte_var2",
                "bfd_check_format": "check_input_format",
                "bfd_fdopenw": "fd_open_output_file",
                "bfd_nonfatal_message": "print_bfd_nonfatal_message",
                "bfd_openr": "open_input_file",
                "bfd_openw": "open_output_file",
                "bfd_stat": "get_file_status",
                "cVar2": "char_var2",
                "cVar3": "char_var3",
                "chmod": "change_file_permissions",
                "concat": "concat_strings",
                "copy_archive_001052a2": "copy_archive_file",
                "dcgettext": "get_error_message",
                "fatal": "report_fatal_error",
                "free": "release_memory",
                "get_file_size": "calculate_file_size",
                "iVar4": "int_var4",
                "iVar5": "int_var5",
                "lStack_98": "long_stack_var",
                "lVar13": "file_size",
                "lVar21": "long_var3",
                "lVar8": "long_var1",
                "local_158": "stat_struct",
                "local_198": "current_output_file",
                "local_1a0": "output_bfd",
                "local_c8": "temp_directories",
                "make_tempdir": "create_temp_directory",
                "non_fatal": "report_non_fatal_error",
                "param_1": "input_file_path",
                "param_2": "output_file_path",
                "param_3": "file_descriptor",
                "param_4": "stat_struct",
                "param_5": "target_format",
                "param_6": "section_size",
                "param_7": "flag",
                "pcVar15": "temp_dir_path",
                "pcVar16": "archive_member_path",
                "pcVar17": "pointer_char_var17",
                "pcVar18": "temp_file_path",
                "pcVar19": "temporary_char_ptr_var4",
                "pcVar20": "close_function",
                "pcVar23": "pointer_char_var23",
                "piVar10": "int_pointer1",
                "ppcVar16": "pointer_pointer_char_var16",
                "ppcVar19": "pointer_pointer_char_var19",
                "ppcVar6": "string_array_var1",
                "printf": "print_formatted_string",
                "psVar24": "stat_ptr",
                "puVar14": "input_bfd",
                "puVar9": "temp_ptr",
                "pvVar7": "buffer",
                "rmdir": "delete_directory",
                "set_times": "set_file_times",
                "stat": "stat_struct",
                "strerror": "get_error_string",
                "uStack_b0": "uint_stack_var",
                "uVar11": "undefined8_var1",
                "uVar12": "undefined8_var2",
                "uVar22": "uint_var22",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "additional_data": {
                "FUN_00114b84": {
                    "1": "delete_directory",
                    "16": "remove_directory",
                    "2": "remove_directory_and_free",
                    "9": "remove_and_free_directory"
                },
                "param_9": {
                    "30": "directory_path"
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_00104230"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "code": "\nvoid remove_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "current_name": "remove_directory_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directory_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "&DAT_0011b499": {
                    "1": "target_section_name"
                },
                "DAT_0011b499": {
                    "1": "section_header",
                    "2": "expected_section_name",
                    "3": "magic_string"
                },
                "DAT_001278d8": {
                    "1": "success_flag",
                    "3": "is_initialized",
                    "4": "flag"
                },
                "FUN_00113fb0": {
                    "1": "starts_with_match",
                    "2": "compare_strings",
                    "3": "startswith_lto_priv_0_lto_priv_0",
                    "6": "starts_with_lto_priv_0_lto_priv_0"
                },
                "FUN_00114190": {
                    "1": "find_section_entry",
                    "2": "process_section_list",
                    "8": "find_section_list"
                },
                "FUN_00114c20": {
                    "1": "process_section_list",
                    "2": "process_binary",
                    "3": "process_sections",
                    "5": "find_and_process_sections",
                    "6": "process_section"
                },
                "PTR_FUN_00114190": {
                    "1": "process_sections"
                },
                "cVar1": {
                    "1": "starts_with_address",
                    "2": "starts_with_flag",
                    "3": "startswith_result",
                    "4": "starts_with_result",
                    "6": "starts_with_match"
                },
                "char": {
                    "1": "character"
                },
                "param_1": {
                    "1": "section_start",
                    "2": "input_data",
                    "3": "input_string",
                    "4": "binary_address"
                },
                "param_2": {
                    "1": "search_pattern",
                    "2": "str2"
                },
                "param_3": {
                    "1": "block_size",
                    "2": "uint_param"
                },
                "pcVar2": {
                    "1": "char_pointer",
                    "2": "section_data",
                    "3": "next_section",
                    "4": "section_ptr",
                    "8": "section_address"
                }
            },
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid process_section_00114c20(long binary_address)\n\n{\n  character starts_with_match;\n  character *section_address;\n  \n  find_section_list(binary_address,1,1);\n  starts_with_match = startswith_lto_priv_0_lto_priv_0(binary_address,&DAT_0011b499);\n  if (starts_with_match != '\\0') {\n    section_address = (character *)(binary_address + 5);\n    if (*(character *)(binary_address + 4) != 'a') {\n      section_address = (character *)(binary_address + 4);\n    }\n    if (*section_address != '\\0') {\n      find_section_list(section_address,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "current_name": "process_section_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c20": "process_section_00114c20",
                "cVar1": "starts_with_match",
                "char": "character",
                "param_1": "binary_address",
                "pcVar2": "section_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "0x3d": {
                    "1": "equal_sign"
                },
                "FUN_001053b5": {
                    "1": "perform_cleanup",
                    "2": "do_something"
                },
                "FUN_00114c80": {
                    "1": "extract_parameter",
                    "13": "parse_parameter",
                    "2": "parse_assignment",
                    "3": "parse_query_string"
                },
                "FUN_0011a480": {
                    "1": "process_data",
                    "2": "process_string"
                },
                "auVar3": {
                    "1": "new_data_array",
                    "14": "result",
                    "2": "parsed_values",
                    "4": "parsed_data"
                },
                "dcgettext": {
                    "1": "localize_text",
                    "14": "get_error_message",
                    "2": "get_text"
                },
                "fatal": {
                    "1": "terminate_execution",
                    "3": "handle_error",
                    "8": "handle_fatal_error"
                },
                "param_1": {
                    "1": "string",
                    "2": "query_string",
                    "25": "input_string"
                },
                "param_2": {
                    "1": "param2_value",
                    "2": "default_value",
                    "4": "value",
                    "7": "value_1"
                },
                "param_3": {
                    "1": "param_b",
                    "2": "param_3",
                    "3": "value2",
                    "5": "value_2",
                    "8": "error_message"
                },
                "param_4": {
                    "1": "param4_value",
                    "2": "data",
                    "3": "value3",
                    "5": "value_3"
                },
                "pcVar1": {
                    "1": "equals_sign_position",
                    "11": "equal_sign_position",
                    "3": "equal_sign",
                    "5": "equal_sign_pos",
                    "7": "equal_sign_ptr"
                },
                "strchr": {
                    "1": "find_equals_sign",
                    "2": "find_equal_sign"
                },
                "uVar2": {
                    "1": "error_msg",
                    "13": "substring",
                    "2": "key"
                },
                "xmalloc": {
                    "16": "allocate_memory"
                },
                "xstrndup": {
                    "2": "duplicate_substring",
                    "4": "copy_substring",
                    "6": "duplicate_string"
                }
            },
            "called": [
                "FUN_0011a480",
                "FUN_001053b5",
                "FUN_00104290",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 value_1,undefined8 error_message,undefined8 value_3)\n\n{\n  char *equal_sign_position;\n  undefined8 substring;\n  undefined result [16];\n  \n  equal_sign_position = find_equal_sign(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)allocate_memory(0x30);\n    substring = duplicate_string(input_string,(long)equal_sign_position - (long)input_string);\n    result._0_8_[2] = equal_sign_position + 1;\n    result._0_8_[1] = substring;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value_1;\n    result._8_8_ = value_3;\n    return result;\n  }\n  substring = get_error_message(0,\"bad format for %s\",5);\n                    \n  handle_fatal_error(substring,error_message);\n}\n\n",
            "current_name": "parse_parameter_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "auVar3": "result",
                "dcgettext": "get_error_message",
                "fatal": "handle_fatal_error",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_message",
                "param_4": "value_3",
                "pcVar1": "equal_sign_position",
                "strchr": "find_equal_sign",
                "uVar2": "substring",
                "xmalloc": "allocate_memory",
                "xstrndup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "0x2f": {
                    "1": "forward_slash"
                },
                "FUN_00114cf0": {
                    "1": "allocate_path_memory",
                    "2": "create_file_path",
                    "6": "extract_file_name"
                },
                "bVar6": {
                    "1": "reverse",
                    "13": "found_slash",
                    "2": "is_first_slash",
                    "3": "slash_found",
                    "6": "is_slash"
                },
                "lVar2": {
                    "1": "file_name_length",
                    "2": "remaining_length",
                    "3": "i",
                    "4": "length",
                    "8": "index"
                },
                "lVar3": {
                    "1": "file_name_length",
                    "2": "path_length",
                    "3": "filename_length",
                    "4": "offset",
                    "8": "prefix_length"
                },
                "lVar4": {
                    "1": "last_slash_index",
                    "2": "filename_length",
                    "3": "file_name_length",
                    "4": "slash_offset",
                    "9": "slash_index"
                },
                "param_1": {
                    "1": "full_path",
                    "11": "file_path",
                    "14": "path",
                    "2": "input_path",
                    "3": "filepath"
                },
                "pcVar1": {
                    "1": "last_separator",
                    "2": "last_forward_slash",
                    "28": "last_slash"
                },
                "pcVar5": {
                    "1": "file_name",
                    "11": "new_path",
                    "2": "filename"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104390",
                "FUN_001042c0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "code": "\nvoid extract_filename_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long index;\n  long prefix_length;\n  long slash_index;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)allocate_memory(9);\n    prefix_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)path;\n    last_slash = (char *)allocate_memory(slash_index + 0xb);\n    prefix_length = slash_index + 1;\n    new_path = last_slash;\n    for (index = slash_index; index != 0; index = index + -1) {\n      *new_path = *path;\n      path = path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "extract_filename_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "extract_filename_00114cf0",
                "bVar6": "found_slash",
                "lVar2": "index",
                "lVar3": "prefix_length",
                "lVar4": "slash_index",
                "param_1": "path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "additional_data": {
                "(***(code **)(*(long *)(*(long *)(param_1 + 8) + 0x380) + 0x78))(param_1,param_3 != 0)": {
                    "1": "call_function"
                },
                "(uint)*(byte *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x71)": {
                    "1": "value1"
                },
                "*(*(long *)(param_1 + 8) + 8)": {
                    "1": "ptr1"
                },
                "*(*(long *)(param_2 + 8) + 8)": {
                    "1": "ptr2"
                },
                "FUN_0010540e": {
                    "1": "process_subfunction",
                    "2": "execute_function",
                    "3": "sub_function",
                    "5": "execute_sub_function"
                },
                "FUN_00114d50": {
                    "1": "execute_conditional_call",
                    "15": "execute_function",
                    "2": "process_data"
                },
                "byte": {
                    "1": "byte_var",
                    "2": "byte_value"
                },
                "bytePointer": {
                    "1": "pointer_to_byte"
                },
                "byteValue": {
                    "1": "value_to_check"
                },
                "code": {
                    "1": "function_code",
                    "2": "function_to_execute"
                },
                "functionPointer": {
                    "1": "pointer_to_function"
                },
                "param_1": {
                    "1": "source_address",
                    "2": "data_structure1",
                    "3": "input_param1",
                    "4": "arg1",
                    "5": "input1"
                },
                "param_1_0540e": {
                    "1": "input_param_1_sub_func"
                },
                "param_2": {
                    "1": "address2",
                    "2": "arg_2",
                    "4": "arg2",
                    "5": "input2"
                },
                "param_2_0540e": {
                    "1": "input_param_2_sub_func"
                },
                "param_3": {
                    "1": "input_3",
                    "10": "flag",
                    "2": "condition_flag",
                    "3": "arg3",
                    "4": "condition"
                },
                "param_3 != 0": {
                    "1": "is_flag_set"
                },
                "param_3_0540e": {
                    "1": "status_code_sub_func"
                }
            },
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid execute_function_00114d50(long input1,long input2,uint flag)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte_value *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_to_execute **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,flag != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "byte": "byte_value",
                "code": "function_to_execute",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "FUN_00114d60": {
                    "1": "read_file_and_save_contents",
                    "3": "read_file_and_store_data",
                    "4": "read_file_contents",
                    "5": "read_and_store_file_contents",
                    "7": "read_file_and_store_content"
                },
                "__errno_location": {
                    "1": "get_errno_location"
                },
                "__stream": {
                    "16": "file_stream",
                    "3": "file",
                    "9": "file_pointer"
                },
                "dcgettext": {
                    "1": "translate_error_message"
                },
                "fatal": {
                    "1": "handle_error"
                },
                "fclose": {
                    "1": "close_file"
                },
                "ferror": {
                    "1": "check_file_error"
                },
                "fread": {
                    "1": "read_file"
                },
                "fwrite": {
                    "1": "write_file"
                },
                "iVar1": {
                    "1": "eof_status",
                    "10": "eof_indicator",
                    "2": "is_eof",
                    "3": "end_of_file",
                    "6": "eof_flag"
                },
                "lVar7": {
                    "1": "current_offset",
                    "13": "current_size",
                    "5": "total_bytes_read",
                    "6": "current_position"
                },
                "lVar8": {
                    "1": "current_size",
                    "11": "max_size",
                    "13": "buffer_size",
                    "3": "allocated_size"
                },
                "param_1": {
                    "1": "data_address",
                    "17": "file_info",
                    "2": "filename",
                    "3": "input_file",
                    "5": "file_path"
                },
                "pcVar3": {
                    "1": "error_msg",
                    "16": "error_message",
                    "2": "err_msg",
                    "7": "error_string"
                },
                "piVar2": {
                    "1": "error_flag_ptr",
                    "10": "errno_location",
                    "2": "error_code",
                    "3": "error_number",
                    "5": "error_location",
                    "7": "errno_ptr"
                },
                "sVar6": {
                    "22": "bytes_read",
                    "9": "read_size"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "uVar4": {
                    "1": "error_message_1",
                    "2": "localized_error_message",
                    "3": "error_format_string",
                    "4": "error_format",
                    "5": "error_msg",
                    "7": "error_string"
                },
                "uVar5": {
                    "1": "temp_variable",
                    "2": "temp_value",
                    "4": "buffer",
                    "7": "allocated_memory"
                }
            },
            "called": [
                "FUN_00104750",
                "FUN_00104390",
                "FUN_0010543c"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_file_and_store_content_00114d60(long file_info)\n\n{\n  int eof_indicator;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_string;\n  FILE *file_stream;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long current_size;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_info + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    errno_location = get_errno_location();\n    error_message = get_error_string(*errno_location);\n    allocated_memory = *(undefined8 *)(file_info + 0x10);\n    error_string = translate_error_message(0,\"cannot open: %s: %s\",5);\n                    \n    handle_error(error_string,allocated_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  current_size = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_info + 0x20) = allocated_memory;\n  while( true ) {\n    eof_indicator = feof(file_stream);\n    if (eof_indicator != 0) {\n      *(long *)(file_info + 0x18) = current_size;\n      close_file(file_stream);\n      return;\n    }\n    if (current_size == buffer_size) {\n      buffer_size = current_size * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_info + 0x20),buffer_size);\n      *(undefined8 *)(file_info + 0x20) = allocated_memory;\n    }\n    bytes_read = read_file((void *)(*(long *)(file_info + 0x20) + current_size),1,buffer_size - current_size,file_stream);\n    eof_indicator = check_file_error(file_stream);\n    if (eof_indicator != 0) break;\n    current_size = current_size + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_info + 0x10);\n  error_string = translate_error_message(0,\"%s: read_file failed\",5);\n                    \n  handle_error(error_string,allocated_memory);\n}\n\n",
            "current_name": "read_file_and_store_content_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_file_and_store_content_00114d60",
                "__errno_location": "get_errno_location",
                "__stream": "file_stream",
                "dcgettext": "translate_error_message",
                "fatal": "handle_error",
                "fclose": "close_file",
                "ferror": "check_file_error",
                "fread": "read_file",
                "iVar1": "eof_indicator",
                "lVar7": "current_size",
                "lVar8": "buffer_size",
                "param_1": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "sVar6": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "error_string",
                "uVar5": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                "FUN_00114dc7": {
                    "1": "read_and_process_file",
                    "10": "read_and_resize_buffer",
                    "2": "read_and_process_data",
                    "3": "read_and_store_file_data"
                },
                "dcgettext": {
                    "1": "get_translated_text"
                },
                "fatal": {
                    "1": "handle_fatal_error",
                    "2": "print_fatal_error"
                },
                "fclose": {
                    "2": "close_file"
                },
                "feof": {
                    "1": "check_for_end_of_file"
                },
                "ferror": {
                    "1": "check_for_error"
                },
                "fread": {
                    "2": "read_from_file"
                },
                "iVar1": {
                    "1": "error_indicator",
                    "17": "error",
                    "2": "file_error",
                    "4": "error_flag"
                },
                "param_1": {
                    "2": "param1"
                },
                "param_2": {
                    "2": "param2"
                },
                "param_3": {
                    "2": "param3"
                },
                "param_4": {
                    "2": "param4"
                },
                "sVar4": {
                    "1": "read_bytes",
                    "22": "bytes_read",
                    "6": "read_size"
                },
                "uVar2": {
                    "22": "error_message",
                    "5": "error_string"
                },
                "uVar3": {
                    "1": "message_pointer",
                    "2": "error_context",
                    "3": "message",
                    "4": "error_message",
                    "5": "translated_error_message"
                },
                "unaff_R12": {
                    "1": "offset_2",
                    "2": "current_pos",
                    "3": "start_position",
                    "4": "start_pos",
                    "5": "current_position",
                    "9": "start_offset"
                },
                "unaff_R14": {
                    "1": "new_data_end",
                    "11": "end_offset",
                    "3": "buffer_size",
                    "5": "end_pos",
                    "6": "end_position"
                },
                "unaff_RBP": {
                    "1": "buffer_offset",
                    "14": "buffer",
                    "2": "base_pointer",
                    "3": "buffer_ptr",
                    "7": "buffer_pointer"
                },
                "unaff_RBX": {
                    "1": "file_stream",
                    "18": "file",
                    "5": "file_ptr",
                    "7": "file_pointer"
                },
                "xrealloc": {
                    "1": "reallocate_memory",
                    "2": "resize_buffer"
                }
            },
            "called": [
                "FUN_00104210",
                "FUN_001044d0",
                "FUN_00104160",
                "FUN_00119dd0",
                "FUN_00104130",
                "FUN_00104240",
                "FUN_00114dc7",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 translated_error_message;\n  size_t bytes_read;\n  FILE *file;\n  long buffer;\n  long start_offset;\n  long end_offset;\n  \n  while( true ) {\n    bytes_read = read_from_file((void *)(*(long *)(buffer + 0x20) + start_offset),1,end_offset - start_offset,\n                  file);\n    error = check_for_error(file);\n    if (error != 0) {\n      translated_error_message = *(undefined8 *)(buffer + 0x10);\n      error_message = get_error_message(0,\"%s: read_from_file failed\",5);\n                    \n      print_fatal_error(error_message,translated_error_message);\n    }\n    start_offset = start_offset + bytes_read;\n    error = check_for_end_of_file(file);\n    if (error != 0) break;\n    if (start_offset == end_offset) {\n      end_offset = start_offset * 2;\n      translated_error_message = resize_buffer(*(undefined8 *)(buffer + 0x20),end_offset);\n      *(undefined8 *)(buffer + 0x20) = translated_error_message;\n    }\n  }\n  *(long *)(buffer + 0x18) = start_offset;\n  close_file(file);\n  return;\n}\n\n",
            "current_name": "read_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "dcgettext": "get_error_message",
                "fatal": "print_fatal_error",
                "fclose": "close_file",
                "feof": "check_for_end_of_file",
                "ferror": "check_for_error",
                "fread": "read_from_file",
                "iVar1": "error",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "translated_error_message",
                "unaff_R12": "start_offset",
                "unaff_R14": "end_offset",
                "unaff_RBP": "buffer",
                "unaff_RBX": "file",
                "xrealloc": "resize_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "additional_data": {
                "\"big endian\"": {
                    "1": "\"big_endian\""
                },
                "\"endianness unknown\"": {
                    "1": "\"unknown_endianness\""
                },
                "\"little endian\"": {
                    "1": "\"little_endian\""
                },
                "0": {
                    "2": "domain"
                },
                "5": {
                    "1": "category"
                },
                "DCI_00000000": {
                    "1": "big_endian_msg"
                },
                "DCI_00000004": {
                    "1": "little_endian_msg"
                },
                "DCI_00000008": {
                    "1": "unknown_endianness_msg"
                },
                "FUN_00114e00": {
                    "1": "determine_endianness",
                    "10": "get_endianness",
                    "12": "print_endianness",
                    "3": "get_endianness_string",
                    "5": "check_endianness"
                },
                "big endian": {
                    "1": "big_endian"
                },
                "dcgettext": {
                    "1": "display_message",
                    "2": "print_message",
                    "3": "print_endianness",
                    "8": "translate"
                },
                "endianness unknown": {
                    "1": "unknown_endianness"
                },
                "little endian": {
                    "1": "little_endian"
                },
                "param_1": {
                    "1": "endian_type",
                    "22": "endianness",
                    "3": "endianness_value",
                    "4": "endianness_type"
                }
            },
            "called": [
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid print_endianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    translate(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    translate(0,\"little endian\",5);\n    return;\n  }\n  translate(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "print_endianness_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114e00": "print_endianness_00114e00",
                "dcgettext": "translate",
                "param_1": "endianness"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "FUN_001125fa",
                "FUN_001126c0",
                "FUN_00104240",
                "FUN_00107976",
                "FUN_00104500",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = recognize_input_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = decompile_and_improve_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = decompile_and_improve_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "&local_48": {
                    "1": "output_section_name_address"
                },
                "*(CODE **)(*(long *)(param_3 + 8) + 0x158)": {
                    "1": "function_pointer"
                },
                "*(int *)(*(long *)(param_1 + 8) + 8)": {
                    "1": "int_var3"
                },
                "*(int *)(*(long *)(param_3 + 8) + 8)": {
                    "1": "int_var2"
                },
                "*(int *)(param_2[0x1a] + 4)": {
                    "1": "int_var1"
                },
                "*(uint *)((long)param_2 + 0x24)": {
                    "1": "section_flags_param2"
                },
                "BUILT_TIME_FUNCTION": {
                    "1": "time_function"
                },
                "DAT_001264b8": {
                    "1": "data2"
                },
                "DAT_001264bc": {
                    "1": "data_validation"
                },
                "DAT_001278f8": {
                    "1": "section_data"
                },
                "DAT_0012790c": {
                    "1": "data_condition"
                },
                "DAT_00127918": {
                    "1": "some_data"
                },
                "DAT_00127920": {
                    "1": "section_flag_not_null"
                },
                "DAT_001279b0": {
                    "1": "data3"
                },
                "DAT_00127a3c": {
                    "1": "division_factor"
                },
                "DAT_00127a48": {
                    "1": "data4"
                },
                "FUN_00108072": {
                    "2": "process_data"
                },
                "FUN_00115530": {
                    "1": "process_binary",
                    "11": "process_section",
                    "3": "process_sections",
                    "4": "create_output_section"
                },
                "bVar14": {
                    "1": "is_section_flags_updated",
                    "2": "update_flag",
                    "3": "check_flag",
                    "5": "is_flag_set"
                },
                "bfd_convert_section_setup": {
                    "1": "setup_converted_section",
                    "3": "convert_section_setup"
                },
                "bfd_make_section_anyway_with_flags": {
                    "1": "create_section_with_flags",
                    "2": "make_section_with_flags"
                },
                "bfd_nonfatal_message": {
                    "1": "nonfatal_message"
                },
                "bfd_set_section_size": {
                    "2": "set_section_size"
                },
                "cVar4": {
                    "1": "char_var4",
                    "13": "is_strip_section",
                    "2": "section_flag",
                    "4": "result"
                },
                "check_new_section_flags": {
                    "2": "check_section_flags"
                },
                "check_strip_section_001159d0": {
                    "1": "check_if_strip_section",
                    "2": "is_strip_section"
                },
                "copy_private_data_0010808f": {
                    "1": "copy_data",
                    "3": "copy_private_data"
                },
                "crypto_sign_sections": {
                    "1": "check_section"
                },
                "dcgettext": {
                    "1": "get_translated_string1"
                },
                "drop_share_flag_if_not_coff_00115f30": {
                    "1": "drop_share_flag"
                },
                "find_section_list": {
                    "1": "find_section_list",
                    "2": "search_section_list"
                },
                "group_signature_isra_0": {
                    "1": "get_section_signature"
                },
                "iVar5": {
                    "1": "strcmp_result",
                    "2": "int_var",
                    "20": "comparison_result",
                    "3": "string_comparison_result"
                },
                "is_strip_section_isra_0": {
                    "1": "check_if_strip_section"
                },
                "lVar1": {
                    "1": "address_variable",
                    "2": "section_list_address",
                    "3": "section_list",
                    "5": "section_address"
                },
                "lVar9": {
                    "1": "section_flag",
                    "2": "section",
                    "3": "section_list_entry",
                    "4": "section_flags"
                },
                "local_40": {
                    "1": "align_size",
                    "2": "section_size_arr",
                    "3": "section_size_array",
                    "4": "size_array",
                    "6": "section_sizes"
                },
                "local_40[]": {
                    "1": "section_size_values"
                },
                "local_48": {
                    "1": "section_name_ptr",
                    "2": "original_section_name",
                    "4": "new_section_name"
                },
                "local_50": {
                    "1": "error_var",
                    "2": "error_code",
                    "21": "error_message"
                },
                "param_1": {
                    "1": "param_1_address",
                    "2": "param_address",
                    "3": "address",
                    "5": "param1",
                    "9": "section_address"
                },
                "param_2": {
                    "1": "input_data",
                    "2": "section_info",
                    "4": "param2",
                    "5": "input_array"
                },
                "param_3": {
                    "1": "output_param",
                    "17": "output_format",
                    "4": "param3",
                    "8": "flags"
                },
                "pcVar10": {
                    "1": "output_section_address",
                    "2": "current_section",
                    "3": "error_message",
                    "4": "new_section_name",
                    "6": "output_section"
                },
                "pcVar11": {
                    "1": "temp_var9",
                    "2": "pc_var11",
                    "4": "temp_section_name"
                },
                "pcVar12": {
                    "1": "pc_var12_additional_name",
                    "2": "temp_pointer_2"
                },
                "pcVar2": {
                    "1": "string_variable",
                    "12": "section_name",
                    "2": "current_section",
                    "4": "current_section_name"
                },
                "pcVar4": {
                    "1": "flag"
                },
                "ppcVar3": {
                    "1": "section_list_ptr_array",
                    "18": "section_list",
                    "2": "section_list_pointer"
                },
                "process_data_00114190": {
                    "1": "process_data_with_flags"
                },
                "sVar7": {
                    "1": "length_pc_var10",
                    "2": "source_length",
                    "4": "len1",
                    "5": "length_1",
                    "7": "length1"
                },
                "sVar8": {
                    "1": "size_result_2",
                    "2": "destination_length",
                    "4": "len2",
                    "5": "length_2",
                    "7": "length2"
                },
                "set_alignment_00108179": {
                    "1": "set_alignment"
                },
                "setup_section_cold": {
                    "1": "setup_section_cold"
                },
                "strcat": {
                    "1": "concatenate_strings"
                },
                "strcmp": {
                    "3": "compare_strings"
                },
                "strcpy": {
                    "2": "copy_string"
                },
                "strlen": {
                    "1": "get_string_length"
                },
                "uVar13": {
                    "1": "section_flag",
                    "2": "updated_flags",
                    "3": "new_flags",
                    "4": "flags",
                    "5": "section_flags",
                    "7": "temp_flags"
                },
                "uVar6": {
                    "1": "section_flags_update",
                    "2": "flags",
                    "3": "updated_flags"
                },
                "xmalloc": {
                    "3": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001159d0",
                "FUN_001047c0",
                "FUN_00104190",
                "FUN_001040f0",
                "FUN_00108072",
                "FUN_00104100",
                "FUN_00114190",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_00104390",
                "FUN_00115f30",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_section_00115530(long section_address,char **input_array,long output_format)\n\n{\n  long section_address;\n  char *section_name;\n  char **section_list;\n  char is_strip_section;\n  int comparison_result;\n  uint updated_flags;\n  size_t length1;\n  size_t length2;\n  long section_flags;\n  char *output_section;\n  char *temp_section_name;\n  char *section_data;\n  uint temp_flags;\n  bool is_flag_set;\n  long error_message;\n  char *new_section_name;\n  long section_sizes [2];\n  \n  is_strip_section = check_if_strip_section(input_array);\n  if (is_strip_section != '\\0') {\n    return;\n  }\n  output_section = *input_array;\n  temp_flags = *(uint *)((long)input_array + 0x24);\n  new_section_name = output_section;\n  section_list = DAT_001278f8;\n  if (*(int *)(*(long *)(section_address + 8) + 8) != *(int *)(*(long *)(output_format + 8) + 8)) {\n    temp_flags = temp_flags & *(uint *)(*(long *)(section_address + 8) + 0x18) &\n             *(uint *)(*(long *)(output_format + 8) + 0x18);\n  }\n  for (; section_list != (char **)0x0; section_list = (char **)section_list[3]) {\n    comparison_result = compare_strings(*section_list,output_section);\n    if (comparison_result == 0) {\n      if (*(uint *)(section_list + 2) != 0xffffffff) {\n        temp_flags = *(uint *)(section_list + 2);\n      }\n      if (output_section != section_list[1]) {\n        new_section_name = section_list[1];\n        temp_flags = check_section_flags(temp_flags,output_format);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (output_section = DAT_00127918, (*(byte *)((long)input_array + 0x24) & 1) != 0)) ||\n     (output_section = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    length1 = calculate_string_length(output_section);\n    length2 = calculate_string_length(new_section_name);\n    section_data = (char *)allocate_memory(length1 + 1 + length2);\n    output_section = copy_string(section_data,output_section);\n    new_section_name = concatenate_strings(output_section,new_section_name);\n  }\n  section_flags = search_section_list(*input_array,0,0x80);\n  is_flag_set = false;\n  if (section_flags == 0) {\n    if ((DAT_00127a48 == 4) && ((temp_flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(section_address + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(input_array[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(output_format + 8) + 8) == 5) {\n            is_flag_set = (temp_flags & 0x2000000) == 0;\n            updated_flags = ~((-(uint)((temp_flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)input_array + 0x24) = *(uint *)((long)input_array + 0x24) & updated_flags;\n          }\n          else {\n            updated_flags = 0xfdfffefd;\n          }\n          temp_flags = temp_flags & updated_flags;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = compare_strings(*input_array,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    temp_flags = check_section_flags(temp_flags & 0x104 | *(uint *)(section_flags + 0x28),output_format,*input_array);\n  }\n  is_strip_section = convert_section_setup(section_address,input_array,output_format,output_section_name_address,section_sizes);\n  if (is_strip_section == '\\0') {\n    output_section = (char *)0x0;\n    error_message = get_error_message(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  output_section = (char *)make_section_with_flags(output_format,new_section_name,temp_flags);\n  if (output_section == (char *)0x0) {\n    error_message = get_error_message(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      section_sizes[0] = 0;\n      goto LAB_001158e7;\n    }\n    is_strip_section = set_section_size(output_section,section_sizes[0]);\n    if (is_strip_section == '\\0') {\n      initialize_section();\n      return;\n    }\n  }\n  else {\n    section_sizes[0] = ((((long)DAT_00127a3c - 1U) + section_sizes[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    is_strip_section = set_section_size(output_section);\n    if (is_strip_section == '\\0') {\n      initialize_section();\n      return;\n    }\n  }\n  error_message = 0;\n  section_data = input_array[6];\n  section_flags = search_section_list(*input_array,0,0x18);\n  if (section_flags == 0) {\n    output_section[0x28] = output_section[0x28] | 1;\n    temp_section_name = *input_array;\n    section_data = section_data + _DAT_001279b0;\n    *(char **)(output_section + 0x30) = section_data;\n    *(char **)(output_section + 0x38) = section_data;\n    section_data = input_array[7];\n    section_flags = search_section_list(temp_section_name,0,0x60);\n    if (section_flags == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_section_name = *(char **)(section_flags + 0x20);\n    if ((*(byte *)(section_flags + 0x14) & 0x40) != 0) {\n      temp_section_name = temp_section_name + (long)section_data;\n    }\n    *(char **)(output_section + 0x38) = temp_section_name;\n    section_flags = search_section_list(*input_array,0,0x200);\n    if (section_flags != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp_flags = *(uint *)((long)input_array + 0x7c);\n    if (temp_flags < 0x3f) goto LAB_001156c4;\n    error_message = get_error_message(0,\"failed to set alignment\",5);\n    *(undefined4 *)(output_section + 0xb4) = *(undefined4 *)((long)input_array + 0xb4);\n    output_section[0x28] = output_section[0x28] & 0xcfU | *(byte *)(input_array + 5) & 0x30;\n    input_array[0xc] = output_section;\n    input_array[0xb] = (char *)0x0;\n    if ((*(byte *)((long)input_array + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    is_strip_section = (**(code **)(*(long *)(output_format + 8) + 0x158))(section_address,input_array,output_format,output_section);\n    if (is_strip_section == '\\0') {\n      copy_private_data();\n      return;\n    }\n  }\n  else {\n    temp_section_name = *(char **)(section_flags + 0x18);\n    if ((*(byte *)(section_flags + 0x14) & 8) == 0) {\n      temp_section_name = temp_section_name + (long)section_data;\n    }\n    output_section[0x28] = output_section[0x28] | 1;\n    section_name = *input_array;\n    *(char **)(output_section + 0x30) = temp_section_name;\n    *(char **)(output_section + 0x38) = temp_section_name;\n    section_data = input_array[7];\n    section_flags = search_section_list(section_name,0,0x60);\n    if (section_flags != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_section_name = *input_array;\n    *(char **)(output_section + 0x38) = section_data + _DAT_001279b0;\n    section_flags = search_section_list(temp_section_name,0,0x200);\n    if (section_flags == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp_flags = *(uint *)(section_flags + 0x2c);\n    if (0x3e < temp_flags) {\n      set_section_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(output_section + 0x7c) = temp_flags;\n    *(undefined4 *)(output_section + 0xb4) = *(undefined4 *)((long)input_array + 0xb4);\n    output_section[0x28] = output_section[0x28] & 0xcfU | *(byte *)(input_array + 5) & 0x30;\n    input_array[0xc] = output_section;\n    input_array[0xb] = (char *)0x0;\n    if ((*(byte *)((long)input_array + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    section_data = input_array[0x1a];\n    section_flags = get_section_signature(section_data,input_array[0x1c]);\n    if ((section_flags == 0) ||\n       (section_address = *(long *)(section_address + 8), *(uint *)(section_flags + 0x18) = *(uint *)(section_flags + 0x18) | 0x20,\n       *(int *)(section_address + 8) != 5)) goto LAB_00115700;\n    *(long *)(section_data + 0xb0) = section_flags;\n    is_strip_section = (**(code **)(*(long *)(output_format + 8) + 0x158))(section_address,input_array,output_format,output_section);\n    if (is_strip_section == '\\0') {\n      copy_private_data();\n      return;\n    }\n  }\n  if (is_flag_set) {\n    *(undefined4 *)(*(long *)(output_section + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  display_nonfatal_message(0,output_format,output_section,error_message);\n  return;\n}\n\n",
            "current_name": "process_section_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "&local_48": "output_section_name_address",
                "FUN_00115530": "process_section_00115530",
                "bVar14": "is_flag_set",
                "bfd_convert_section_setup": "convert_section_setup",
                "bfd_make_section_anyway_with_flags": "make_section_with_flags",
                "bfd_nonfatal_message": "display_nonfatal_message",
                "bfd_set_section_size": "set_section_size",
                "cVar4": "is_strip_section",
                "check_new_section_flags": "check_section_flags",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "find_section_list": "search_section_list",
                "group_signature_isra_0": "get_section_signature",
                "iVar5": "comparison_result",
                "is_strip_section_isra_0": "check_if_strip_section",
                "lVar1": "section_address",
                "lVar9": "section_flags",
                "local_40": "section_sizes",
                "local_48": "new_section_name",
                "local_50": "error_message",
                "param_1": "section_address",
                "param_2": "input_array",
                "param_3": "output_format",
                "pcVar10": "output_section",
                "pcVar11": "temp_section_name",
                "pcVar12": "section_data",
                "pcVar2": "section_name",
                "ppcVar3": "section_list",
                "sVar7": "length1",
                "sVar8": "length2",
                "set_alignment_00108179": "set_section_alignment",
                "setup_section_cold": "initialize_section",
                "strcat": "concatenate_strings",
                "strcmp": "compare_strings",
                "strcpy": "copy_string",
                "strlen": "calculate_string_length",
                "uVar13": "temp_flags",
                "uVar6": "updated_flags",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "FUN_00108200": {
                    "1": "non_fatal"
                },
                "FUN_00115970": {
                    "1": "copy_and_update_file",
                    "18": "copy_and_set_times",
                    "2": "copy_file",
                    "3": "copy_and_delete_file"
                },
                "FUN_00115a90": {
                    "1": "simple_copy"
                },
                "auVar6": {
                    "1": "function_result",
                    "12": "return_value",
                    "2": "result_data",
                    "9": "result"
                },
                "param_1": {
                    "1": "src_file",
                    "15": "source_file",
                    "2": "source_filepath",
                    "4": "source_path",
                    "7": "source_file_path"
                },
                "param_2": {
                    "1": "source_file",
                    "15": "destination_file",
                    "2": "destination_filepath",
                    "4": "destination_path",
                    "7": "destination_file_path"
                },
                "param_3": {
                    "1": "permission_flags",
                    "17": "buffer_size",
                    "8": "file_permissions"
                },
                "param_4": {
                    "1": "file_metadata",
                    "14": "file_size",
                    "2": "file_timestamps",
                    "3": "file_permissions"
                },
                "param_5": {
                    "1": "update_times",
                    "12": "set_times_flag",
                    "2": "preserve_times",
                    "9": "should_set_times"
                },
                "param_6": {
                    "1": "original_return_value",
                    "10": "result",
                    "2": "file_size",
                    "6": "error_code",
                    "7": "return_value"
                },
                "pcVar3": {
                    "1": "error_msg",
                    "24": "error_message",
                    "4": "error_string"
                },
                "piVar2": {
                    "1": "errno_ptr",
                    "16": "errno_location",
                    "2": "errno_location_ptr",
                    "5": "error_location"
                },
                "uVar1": {
                    "1": "result",
                    "2": "copy_status",
                    "28": "copy_result"
                },
                "uVar4": {
                    "1": "localized_error_msg",
                    "12": "error_string",
                    "2": "error",
                    "3": "error_description",
                    "4": "error_message"
                },
                "uVar5": {
                    "1": "copy_result_ulong",
                    "3": "bytes_copied",
                    "5": "unlink_result",
                    "6": "copy_success",
                    "9": "copy_size"
                }
            },
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_set_times_00115970(char *source_file,char *destination_file,undefined4 buffer_size,undefined8 file_size,char set_times_flag,\n            undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_string;\n  ulong copy_size;\n  undefined return_value [16];\n  \n  if (destination_file == source_file) {\n    copy_size = 0;\n  }\n  else {\n    copy_result = simple_copy(buffer_size,destination_file,file_size);\n    copy_size = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      error_string = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(error_string,destination_file,error_message);\n    }\n    unlink(source_file);\n  }\n  if (set_times_flag != '\\0') {\n    set_times(destination_file,file_size);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = copy_size;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_set_times_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_set_times_00115970",
                "auVar6": "return_value",
                "param_1": "source_file",
                "param_2": "destination_file",
                "param_3": "buffer_size",
                "param_4": "file_size",
                "param_5": "set_times_flag",
                "param_6": "result",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "uVar1": "copy_result",
                "uVar4": "error_string",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "DAT_00127a18": {
                    "1": "specified_sym2"
                },
                "DAT_00127a28": {
                    "1": "specified_sym1"
                },
                "DAT_00127a48": {
                    "1": "flag"
                },
                "FUN_001159d0": {
                    "1": "check_section",
                    "18": "check_strip_section",
                    "2": "check_strip_section_and_group_signature"
                },
                "FUN_00115b70": {
                    "1": "check_specified_symbol",
                    "2": "is_specified_symbol_present",
                    "8": "is_specified_symbol"
                },
                "FUN_00115d00": {
                    "1": "check_group_signature",
                    "2": "group_signature",
                    "3": "get_group_signature",
                    "4": "group_signature_isra_0"
                },
                "FUN_00115d70": {
                    "1": "check_strip_section_recursive",
                    "2": "is_strip_section_1",
                    "6": "is_strip_section_1_isra_0"
                },
                "cVar2": {
                    "1": "symbol_status",
                    "2": "symbol_check_result",
                    "3": "is_specified",
                    "5": "symbol_check",
                    "6": "is_symbol_specified"
                },
                "group_signature_isra_0": {
                    "1": "find_group_signature",
                    "2": "calculate_group_signature",
                    "3": "get_group_signature"
                },
                "is_specified_symbol": {
                    "1": "is_specified_symbol",
                    "2": "is_symbol_specified"
                },
                "is_strip_section_1_isra_0": {
                    "1": "is_strip_section_present",
                    "5": "is_strip_section"
                },
                "lVar4": {
                    "1": "section_entry",
                    "12": "group_signature",
                    "2": "signature_result",
                    "4": "group_signature_result",
                    "5": "signature"
                },
                "lVar5": {
                    "1": "temp_addr",
                    "10": "current_group_signature",
                    "8": "current_signature"
                },
                "param_1": {
                    "1": "section_header",
                    "2": "input_address",
                    "6": "param",
                    "8": "section_address"
                },
                "param_2": {
                    "1": "symbol_ptr",
                    "2": "section_size"
                },
                "uVar1": {
                    "1": "section_base_address",
                    "10": "symbol",
                    "2": "result",
                    "7": "symbol_address"
                },
                "uVar3": {
                    "1": "section_result",
                    "11": "result",
                    "2": "strip_section_result",
                    "3": "status",
                    "5": "section_status"
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\nundefined4 check_strip_section_001159d0(long section_address)\n\n{\n  undefined8 symbol;\n  char is_symbol_specified;\n  undefined4 result;\n  long group_signature;\n  long current_group_signature;\n  \n  result = is_strip_section();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return result;\n    }\n    group_signature = get_group_signature(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol = *(undefined8 *)(group_signature + 8), DAT_00127a48 != 7 ||\n         (is_symbol_specified = is_symbol_specified(symbol,DAT_00127a28), is_symbol_specified != '\\0')) &&\n        (is_symbol_specified = is_symbol_specified(symbol,DAT_00127a18), is_symbol_specified == '\\0')))) {\n      group_signature = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_group_signature = group_signature;\n      do {\n        if (current_group_signature == 0) {\n          return 1;\n        }\n        is_symbol_specified = is_strip_section(current_group_signature);\n        if (is_symbol_specified == '\\0') {\n          return result;\n        }\n        current_group_signature = *(long *)(*(long *)(current_group_signature + 0xd0) + 0xc0);\n      } while (group_signature != current_group_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_strip_section_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "cVar2": "is_symbol_specified",
                "group_signature_isra_0": "get_group_signature",
                "is_specified_symbol": "is_symbol_specified",
                "is_strip_section_1_isra_0": "is_strip_section",
                "lVar4": "group_signature",
                "lVar5": "current_group_signature",
                "param_1": "section_address",
                "uVar1": "symbol",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00115a90": {
                    "1": "reliable_copy",
                    "19": "copy_file",
                    "2": "copy_file_contents"
                },
                "_Var3": {
                    "1": "src_file_position",
                    "11": "seek_result",
                    "2": "file_position",
                    "3": "current_position",
                    "8": "file_offset"
                },
                "__fd": {
                    "1": "file_descriptor_destination",
                    "16": "destination_file_descriptor",
                    "2": "output_fd",
                    "3": "destination_fd"
                },
                "iVar1": {
                    "1": "read_error_code",
                    "11": "original_errno",
                    "2": "error_code",
                    "3": "original_error_code",
                    "6": "errno_value"
                },
                "iVar2": {
                    "1": "bytes_copied",
                    "10": "read_result",
                    "2": "bytes_read",
                    "4": "read_bytes"
                },
                "local_2038": {
                    "30": "buffer"
                },
                "param_1": {
                    "1": "file_descriptor_src",
                    "17": "source_file_descriptor",
                    "4": "source_fd",
                    "5": "file_descriptor"
                },
                "param_2": {
                    "1": "file_path_dest",
                    "11": "destination_file_path",
                    "2": "destination_filename",
                    "3": "destination_file",
                    "4": "destination_path"
                },
                "param_3": {
                    "1": "file_dst_stats",
                    "2": "file_permission_info",
                    "3": "stat_buffer"
                },
                "piVar6": {
                    "1": "error_location_pointer",
                    "2": "error_code_pointer",
                    "3": "errno_ptr",
                    "7": "errno_pointer",
                    "9": "errno_location"
                },
                "sVar5": {
                    "1": "num_bytes_written",
                    "10": "write_result",
                    "20": "bytes_written"
                },
                "uVar4": {
                    "1": "read_bytes",
                    "11": "bytes_read",
                    "2": "result",
                    "3": "read_result",
                    "7": "bytes_copied"
                }
            },
            "called": [
                "FUN_00104730",
                "FUN_001043c0",
                "FUN_00108237",
                "FUN_001041c0",
                "FUN_00104410",
                "FUN_001046c0",
                "FUN_001040b0",
                "FUN_001042e0"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_file_00115a90(int source_file_descriptor,char *destination_file_path,long stat_buffer)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  __off_t seek_result;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (seek_result = lseek(source_file_descriptor,0,0), seek_result == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = simple_copy_cold();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(stat_buffer + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "_Var3": "seek_result",
                "__fd": "destination_file_descriptor",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "stat_buffer",
                "piVar6": "errno_location",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                "FUN_00115b70": {
                    "1": "check_section_properties",
                    "2": "validate_section",
                    "3": "check_section_options",
                    "6": "check_section"
                },
                "handle_section_error_0010827b": {
                    "5": "handle_section_error"
                },
                "iVar2": {
                    "1": "section_match",
                    "10": "comparison_result",
                    "2": "section_comparison",
                    "3": "section_name_comparison",
                    "4": "section_comparison_result"
                },
                "iVar3": {
                    "1": "section_match_index",
                    "13": "section_type",
                    "2": "option",
                    "3": "section_index",
                    "4": "section_flag"
                },
                "lVar4": {
                    "1": "section_list_1_result",
                    "3": "section_match1",
                    "4": "remove_section",
                    "6": "section_list_1"
                },
                "lVar5": {
                    "1": "section_check_result_2",
                    "2": "section2",
                    "3": "section_match2",
                    "4": "copy_section",
                    "7": "section_list_2"
                },
                "param_1": {
                    "1": "binary_file_path",
                    "6": "section_names",
                    "9": "section_name"
                },
                "pcVar1": {
                    "1": "current_path",
                    "12": "section_name",
                    "14": "current_section",
                    "4": "current_section_name"
                },
                "plVar7": {
                    "1": "section_entry",
                    "2": "section_ptr",
                    "3": "section_data",
                    "5": "section_list"
                },
                "process_data_00114190": {
                    "5": "process_data"
                },
                "process_ebp_value_0010829e": {
                    "5": "process_ebp_value"
                },
                "report_and_exit_00119dd0": {
                    "5": "report_and_exit"
                },
                "uVar6": {
                    "1": "function_result",
                    "21": "result",
                    "3": "return_value",
                    "6": "error_message"
                }
            },
            "called": [
                "FUN_0010827b",
                "FUN_00119dd0",
                "FUN_00114190",
                "FUN_0010829e",
                "FUN_00104240",
                "FUN_00104470"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 check_section_match_00115b70(char **section_name)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long section_list_1;\n  long section_list_2;\n  undefined8 result;\n  long *section_list;\n  \n  section_list_1 = find_section_list(*section_name,0,4);\n  if (section_list_1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      section_list_1 = find_section_list(*section_name,0,1);\n      section_list_2 = find_section_list(*section_name,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          current_section = *section_name;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_section);\n        }\n        if (section_list_1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_name;\n          section_list = DAT_001279d8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section = *section_name;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = process_ebp_value();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = is_dwo_section_constprop_0(section_name);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = invert_result_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_section_match_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115b70": "check_section_match_00115b70",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "param_1": "section_name",
                "pcVar1": "current_section",
                "plVar7": "section_list",
                "process_ebp_value_0010829e": "process_ebp_value",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "additional_data": {
                "*(byte *)(*(long *)(*(long *)(*(long *)(param_2 + 8) + 0x380) + 0x340) + 5)": {
                    "1": "binary_divisor"
                },
                "*(int *)(*(long *)(param_2 + 0x110) + 0xd40)": {
                    "1": "binary_condition"
                },
                "*(int *)(*(long *)(param_2 + 8) + 8)": {
                    "1": "binary_header_value"
                },
                "*(int *)(param_1 + 0x28)": {
                    "1": "input_condition"
                },
                "*(long *)(DAT_001278d0 + (ulong)(uVar1 - 1) * 8)": {
                    "1": "matching_value"
                },
                "*(uint *)(param_1 + 0x2c)": {
                    "1": "input_count"
                },
                "*(ulong *)(*(long *)(param_2 + 0x110) + 0x88)": {
                    "1": "binary_capacity"
                },
                "0x110": {
                    "1": "constant_3"
                },
                "0x28": {
                    "1": "constant_1"
                },
                "0x2c": {
                    "1": "constant_2"
                },
                "FUN_001082c3": {
                    "1": "get_data"
                },
                "FUN_00115d00": {
                    "1": "find_value_based_on_conditions",
                    "2": "get_matching_value",
                    "5": "find_value",
                    "8": "find_matching_value"
                },
                "lVar2": {
                    "1": "found_data",
                    "22": "result",
                    "6": "matching_value"
                },
                "param_1": {
                    "1": "data",
                    "13": "input_value",
                    "2": "input1",
                    "3": "input_param"
                },
                "param_2": {
                    "1": "data",
                    "2": "input2",
                    "3": "data_param",
                    "5": "binary_data",
                    "6": "data_structure"
                },
                "uVar1": {
                    "1": "value_check",
                    "2": "counter",
                    "4": "value",
                    "8": "count"
                }
            },
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "code": "\nlong find_matching_value_00115d00(long input_value,long data_structure)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(data_structure + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(data_structure + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(data_structure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data_structure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "find_matching_value_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "data_structure",
                "uVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "FUN_00115d70": {
                    "1": "check_symbol_existence",
                    "2": "find_symbol_in_table",
                    "4": "check_symbol_in_table"
                },
                "lVar1": {
                    "1": "found_value",
                    "12": "result",
                    "3": "symbol_entry"
                },
                "local_10": {
                    "1": "property_exists",
                    "2": "is_symbol_found",
                    "3": "symbol_found",
                    "4": "symbol_exists",
                    "5": "is_present",
                    "6": "is_found"
                },
                "local_18": {
                    "1": "symbol_address",
                    "2": "current_symbol",
                    "3": "symbol_copy"
                },
                "param_1": {
                    "1": "symbol_1",
                    "22": "symbol",
                    "3": "key"
                },
                "param_2": {
                    "1": "param_b",
                    "13": "symbol_table"
                }
            },
            "called": [
                "FUN_00104580",
                "FUN_0011a170",
                "FUN_001047d0"
            ],
            "calling": [
                "FUN_001159d0",
                "FUN_001082df",
                "FUN_0010554f"
            ],
            "code": "\nundefined check_symbol_in_table_00115d70(undefined8 symbol,undefined8 table)\n\n{\n  long result;\n  undefined8 symbol_copy;\n  undefined is_found;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(table,symbol);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    symbol_copy = symbol;\n    htab_traverse(table,is_specified_symbol_predicate,&symbol_copy);\n  }\n  return is_found;\n}\n\n",
            "current_name": "check_symbol_in_table_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "check_symbol_in_table_00115d70",
                "lVar1": "result",
                "local_10": "is_found",
                "local_18": "symbol_copy",
                "param_1": "symbol",
                "param_2": "table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "(*UNRECOVERED_JUMPTABLE)": {
                    "1": "call_jump_to_address"
                },
                "*UNRECOVERED_JUMPTABLE": {
                    "1": "jump_to_address"
                },
                "*puVar7": {
                    "1": "next_filtered_reloc"
                },
                "*puVar8": {
                    "1": "current_filtered_reloc"
                },
                "DAT_001278d0": {
                    "1": "reloc_type_flag"
                },
                "DAT_00127a28": {
                    "1": "symbol",
                    "2": "symbol_data"
                },
                "DAT_00127a40": {
                    "1": "fatal_error"
                },
                "DAT_00127a48": {
                    "1": "symbol_type",
                    "2": "section_type"
                },
                "FUN_001082df": {
                    "1": "bfd_nonfatal",
                    "2": "xexit"
                },
                "FUN_001126c0": {
                    "1": "bfd_nonfatal",
                    "2": "is_specified_symbol"
                },
                "FUN_00114190": {
                    "1": "get_specified_symbol"
                },
                "FUN_00115dc0": {
                    "1": "find_and_process_sections",
                    "11": "process_binary_function",
                    "12": "process_binary"
                },
                "FUN_00115f50": {
                    "2": "skip_section"
                },
                "FUN_0011a110": {
                    "3": "find_section_list"
                },
                "UNRECOVERED_JUMPTABLE": {
                    "1": "jump_table_function",
                    "15": "jump_table",
                    "2": "jmp_table",
                    "8": "jumptable"
                },
                "bfd_alloc": {
                    "1": "alloc_bfd"
                },
                "bfd_canonicalize_reloc": {
                    "2": "canonicalize_reloc"
                },
                "bfd_get_error": {
                    "1": "get_bfd_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_relocation_upper_bound",
                    "2": "get_reloc_upper_bound"
                },
                "bfd_nonfatal": {
                    "1": "nonfatal"
                },
                "bfd_nonfatal_message": {
                    "1": "nonfatal_message"
                },
                "byte": {
                    "1": "section_byte"
                },
                "cVar1": {
                    "1": "section_skip_flag",
                    "11": "section_skipped",
                    "2": "section_flag",
                    "4": "skip_result",
                    "7": "skip_section_result"
                },
                "code": {
                    "1": "jumptable"
                },
                "dcgettext": {
                    "1": "get_locale_text"
                },
                "find_section_list": {
                    "1": "find_section_list"
                },
                "fun_00115f50": {
                    "1": "skip_section"
                },
                "iVar2": {
                    "1": "result",
                    "15": "error",
                    "2": "bfd_error_code",
                    "4": "bfd_error",
                    "7": "error_code"
                },
                "is_specified_symbol": {
                    "1": "is_specified_symbol"
                },
                "lVar4": {
                    "1": "section_result",
                    "13": "section_list",
                    "2": "reloc_size",
                    "3": "section_size",
                    "5": "section_list_result"
                },
                "param_1": {
                    "1": "file_descriptor",
                    "18": "param1",
                    "2": "param"
                },
                "param_2": {
                    "1": "binary_data",
                    "15": "param2",
                    "2": "param2_array",
                    "3": "section_headers"
                },
                "param_3": {
                    "1": "data",
                    "17": "param3",
                    "2": "section_count"
                },
                "puVar5": {
                    "1": "reloc_table_ptr",
                    "10": "reloc_array",
                    "2": "reloc",
                    "4": "reloc_list",
                    "7": "reloc_table"
                },
                "puVar7": {
                    "1": "filtered_reloc_data",
                    "2": "reloc_array_ptr"
                },
                "puVar8": {
                    "1": "reloc_array_ptr",
                    "2": "current_reloc"
                },
                "skip_section": {
                    "1": "check_section",
                    "2": "skip_section"
                },
                "uParam_3": {
                    "1": "reloc_upper_bound"
                },
                "uStack_38": {
                    "1": "helper_stack",
                    "2": "u_stack_38",
                    "4": "stack_variable",
                    "8": "stack_var"
                },
                "uVar3": {
                    "1": "param2_c",
                    "3": "message",
                    "6": "result",
                    "9": "reloc_count"
                },
                "uVar6": {
                    "1": "reloc_length",
                    "2": "count",
                    "20": "reloc_count"
                },
                "uVar9": {
                    "1": "iteration",
                    "10": "index",
                    "2": "counter",
                    "7": "loop_counter"
                },
                "xexit": {
                    "1": "exit_with_error",
                    "2": "exit_program"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_00115f50",
                "FUN_001047b0",
                "FUN_0011a110",
                "FUN_00104250",
                "FUN_00114190",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00104240",
                "FUN_00104760",
                "FUN_00104840"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_binary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char section_skipped;\n  int error;\n  undefined8 reloc_count;\n  long section_list;\n  undefined8 *reloc_array;\n  ulong reloc_count;\n  jumptable *jump_table;\n  undefined8 *relocated_symbols;\n  undefined8 *current_reloc;\n  ulong index;\n  undefined8 stack_var;\n  \n  section_skipped = skip_section(param1,param2,0);\n  if (section_skipped != '\\0') {\n    return;\n  }\n  reloc_count = param2[0xc];\n  if ((((*(section_byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (section_list = find_section_list(*param2,0,0x100), section_list == 0)) {\n    section_list = get_reloc_upper_bound(param1,param2);\n    if (section_list < 0) {\n      if ((section_list != -1) || (error = get_bfd_error(), error != 5)) {\n        DAT_00127a40 = 1;\n        reloc_count = 0;\nLAB_00108315:\n        nonfatal_message(0,param1,param2,reloc_count,stack_var);\n        return;\n      }\n    }\n    else if (section_list != 0) {\n      reloc_array = (undefined8 *)param2[0xe];\n      if (reloc_array == (undefined8 *)0x0) {\n        reloc_array = (undefined8 *)alloc_bfd(param3);\n        if (reloc_array == (undefined8 *)0x0) {\n          nonfatal(0);\n                    \n          exit_program(1);\n        }\n        reloc_count = canonicalize_reloc(param1,param2,reloc_array,DAT_001278d0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a40 = 1;\n          reloc_count = gettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        relocated_symbols = reloc_array;\n        for (index = 0; index != reloc_count; index = index + 1) {\n          current_reloc = relocated_symbols;\n          if (((*(long **)reloc_array[index] != (long *)0x0) &&\n              (section_list = **(long **)reloc_array[index], section_list != 0)) &&\n             (section_skipped = check_symbol(*(undefined8 *)(section_list + 8),DAT_00127a28), section_skipped != '\\0'))\n          {\n            current_reloc = relocated_symbols + 1;\n            *relocated_symbols = reloc_array[index];\n          }\n          relocated_symbols = current_reloc;\n        }\n        *relocated_symbols = 0;\n        reloc_count = (long)relocated_symbols - (long)reloc_array >> 3;\n      }\n      jump_table = *(jumptable **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_array = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_array = (undefined8 *)0x0;\n  jump_table = *(jumptable **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,reloc_count,reloc_array,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_binary_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "alloc_bfd",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_bfd_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_nonfatal": "nonfatal",
                "bfd_nonfatal_message": "nonfatal_message",
                "byte": "section_byte",
                "cVar1": "section_skipped",
                "code": "jumptable",
                "dcgettext": "gettext",
                "iVar2": "error",
                "is_specified_symbol": "check_symbol",
                "lVar4": "section_list",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar5": "reloc_array",
                "puVar7": "relocated_symbols",
                "puVar8": "current_reloc",
                "uStack_38": "stack_var",
                "uVar3": "reloc_count",
                "uVar6": "reloc_count",
                "uVar9": "index",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "DCGETTEXT": {
                    "1": "get_localized_msg"
                },
                "FUN_00108375": {
                    "1": "non_fatal"
                },
                "FUN_00115f30": {
                    "1": "check_and_drop_share_flag",
                    "13": "drop_share_flag_if_not_coff",
                    "2": "drop_share_flag_if_needed",
                    "3": "remove_share_flag",
                    "6": "remove_share_flag_if_not_coff"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "non_fatal": {
                    "1": "report_error"
                },
                "param_1": {
                    "2": "input_flags",
                    "21": "flags",
                    "4": "flag"
                },
                "param_2": {
                    "1": "data",
                    "11": "params",
                    "3": "args",
                    "4": "pointers",
                    "5": "arguments"
                },
                "param_3": {
                    "1": "option",
                    "14": "output_format",
                    "2": "context",
                    "3": "value",
                    "4": "data",
                    "5": "output"
                },
                "uVar1": {
                    "1": "param_1_copy",
                    "2": "flag_value",
                    "3": "param1_value",
                    "6": "first_param"
                },
                "uVar2": {
                    "1": "ptr2",
                    "2": "note_msg",
                    "4": "error_string",
                    "6": "var2",
                    "7": "message"
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "code": "\nuint drop_share_flag_if_not_coff_00115f30(uint flags,undefined8 *params,undefined8 output_format)\n\n{\n  undefined8 var1;\n  undefined8 message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    var1 = *params;\n    flags = flags & 0xf7ffffff;\n    message = get_error_message(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    report_error(message,var1,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "dcgettext": "get_error_message",
                "non_fatal": "report_error",
                "param_1": "flags",
                "param_2": "params",
                "param_3": "output_format",
                "uVar1": "var1",
                "uVar2": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                ".gnu.build.attributes": {
                    "1": "build_attr_section",
                    "3": "gnu_build_attributes"
                },
                "CONCAT31": {
                    "1": "concatenation_2"
                },
                "CONCAT71": {
                    "1": "result_1"
                },
                "DAT_0012790c": {
                    "1": "dat_flag"
                },
                "DAT_001279d8": {
                    "1": "linked_list_start"
                },
                "DAT_00127a20": {
                    "1": "alt_flag"
                },
                "DAT_00127a40": {
                    "1": "is_initialized"
                },
                "FUN_00115f50": {
                    "1": "strip_section_check",
                    "2": "check_for_duplicates",
                    "3": "check_build_attributes",
                    "4": "check_duplicate_section",
                    "8": "check_section_and_attributes"
                },
                "__s1": {
                    "1": "arg",
                    "2": "str",
                    "3": "string1",
                    "4": "section_name",
                    "9": "current_string"
                },
                "auVar4": {
                    "1": "is_strip_flag",
                    "2": "comparison_result",
                    "3": "comparison_result_array",
                    "4": "temp_array"
                },
                "byte": {
                    "1": "auxiliary_byte"
                },
                "extraout_EDX": {
                    "1": "extra_flag"
                },
                "is_strip_section_isra_0": {
                    "1": "strip_section_check",
                    "2": "check_strip_section",
                    "6": "is_strip_section"
                },
                "param_1": {
                    "1": "index",
                    "2": "input_parameter",
                    "3": "section_header",
                    "5": "arg1"
                },
                "param_1+8": {
                    "1": "attr_data_header"
                },
                "param_2": {
                    "1": "arg_ptr",
                    "2": "string_array",
                    "3": "input_array",
                    "4": "strings",
                    "5": "arguments"
                },
                "param_3": {
                    "1": "is_executable",
                    "16": "flag",
                    "5": "arg3"
                },
                "plVar3": {
                    "1": "array_element",
                    "2": "ptr_array",
                    "3": "linked_list_ptr",
                    "4": "linked_list"
                },
                "startswitch_lto_priv_0_lto_priv_0": {
                    "1": "starts_with"
                },
                "startswith_lto_priv_0_lto_priv_0": {
                    "1": "check_lto_attributes"
                },
                "startwith_lto_priv_0_lto_priv_0": {
                    "1": "startswith"
                },
                "strcmp": {
                    "4": "compare_strings"
                },
                "strncmp": {
                    "1": "startswith_lto_priv_0_lto_priv_0"
                },
                "uVar1": {
                    "1": "compare_result",
                    "12": "comparison_result",
                    "3": "result",
                    "6": "string_comparison_result",
                    "8": "strcmp_result"
                },
                "uVar2": {
                    "1": "comparison_flag",
                    "2": "temp",
                    "3": "comparison_result"
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_001159d0",
                "FUN_00104470"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_section_and_attributes_00115f50(long arg1,char **arguments,char flag)\n\n{\n  char *current_string;\n  uint comparison_result;\n  undefined4 comparison_result;\n  undefined4 extra_output;\n  long *linked_list;\n  undefined temp_array [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  temp_array = is_strip_section(arguments);\n  if (temp_array[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      current_string = *arguments;\n      linked_list = DAT_001279d8;\n      do {\n        comparison_result = compare_strings(current_string,(char *)linked_list[1]);\n        temp_array._4_4_ = 0;\n        temp_array._0_4_ = comparison_result;\n        temp_array._8_4_ = extra_output;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        linked_list = (long *)*linked_list;\n      } while (linked_list != (long *)0x0);\n    }\n    comparison_result = temp_array._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (temp_array._8_4_ = comparison_result, temp_array._0_8_ = *(long *)(arg1 + 8),\n         *(int *)(*(long *)(arg1 + 8) + 8) != 5)) ||\n        ((temp_array._0_8_ = (ulong)arguments[0x1a], *(int *)(arguments[0x1a] + 4) != 7 ||\n         (temp_array = check_lto_attributes(*arguments,\"gnu_build_attributes\"),\n         temp_array[0] == '\\0')))) && ((*(auxiliary_byte *)((long)arguments + 0x27) & 2) == 0)) {\n      return (uint)concatenation_1(temp_array._1_7_,arguments[8] == (char *)0x0) |\n             concatenation_2(temp_array._9_3_,arguments[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_section_and_attributes_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                ".gnu.build.attributes": "gnu_build_attributes",
                "CONCAT31": "concatenation_2",
                "CONCAT71": "concatenation_1",
                "FUN_00115f50": "check_section_and_attributes_00115f50",
                "__s1": "current_string",
                "auVar4": "temp_array",
                "byte": "auxiliary_byte",
                "extraout_EDX": "extra_output",
                "is_strip_section_isra_0": "is_strip_section",
                "param_1": "arg1",
                "param_2": "arguments",
                "param_3": "flag",
                "plVar3": "linked_list",
                "startswith_lto_priv_0_lto_priv_0": "check_lto_attributes",
                "strcmp": "compare_strings",
                "uVar1": "comparison_result",
                "uVar2": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "(lVar2 != 0)": {
                    "1": "is_entry_nonzero"
                },
                "(lVar2 != lVar3)": {
                    "1": "is_entry_neq_val2"
                },
                "(lVar2 != lVar4)": {
                    "1": "is_entry_neq_val1"
                },
                "(lVar2 != lVar6)": {
                    "1": "is_entry_neq_fwrite"
                },
                "(plVar1 != (long *)0x0)": {
                    "1": "is_entry_valid"
                },
                "*(uint *)(lVar2 + 0x18)": {
                    "1": "update_flags"
                },
                "FUN_00116030": {
                    "1": "process_relocation_entries",
                    "2": "process_reloc_table",
                    "3": "process_relocs",
                    "5": "process_reloc",
                    "7": "process_relocation"
                },
                "_DAT_00128568": {
                    "1": "val2"
                },
                "_DAT_00128680": {
                    "1": "some_value"
                },
                "__ptr": {
                    "1": "reloc_ptr_buffer",
                    "18": "reloc_buffer",
                    "2": "reloc_entries",
                    "4": "reloc_data"
                },
                "_fwrite": {
                    "1": "fwrite_address"
                },
                "bfd_canonicalize_reloc": {
                    "2": "canonicalize_reloc"
                },
                "bfd_get_error": {
                    "2": "get_bfd_error"
                },
                "bfd_get_reloc_upper_bound": {
                    "2": "get_reloc_upper_bound"
                },
                "bfd_nonfatal": {
                    "1": "handle_nonfatal_error"
                },
                "extraout_RAX": {
                    "1": "new_return_value",
                    "2": "return_value_2",
                    "3": "result",
                    "5": "return_value"
                },
                "free": {
                    "1": "deallocate_memory"
                },
                "iVar3": {
                    "1": "file_error"
                },
                "iVar5": {
                    "19": "error_code",
                    "3": "error",
                    "8": "bfd_error"
                },
                "in_RAX": {
                    "1": "original_return_value",
                    "10": "result",
                    "13": "return_value",
                    "3": "return_val"
                },
                "lVar1": {
                    "1": "upper_bound"
                },
                "lVar2": {
                    "1": "entry_value",
                    "14": "reloc_value",
                    "2": "reloc_entry_value",
                    "3": "reloc_entry"
                },
                "lVar3": {
                    "1": "constant_value_1",
                    "2": "constant1",
                    "3": "l_var3"
                },
                "lVar4": {
                    "1": "static_addr",
                    "2": "value_2",
                    "4": "l_var4"
                },
                "lVar5": {
                    "1": "dat_00128680"
                },
                "lVar6": {
                    "1": "xfwrite_func",
                    "2": "reloc_write_func",
                    "3": "fwrite_address",
                    "5": "upper_bound",
                    "6": "fwrite"
                },
                "lVar6 != -1": {
                    "1": "is_upper_bound_minus_one"
                },
                "lVar6 < 0": {
                    "1": "is_upper_bound_negative"
                },
                "lVar7": {
                    "1": "canonicalize_result",
                    "11": "reloc_count",
                    "2": "reloc_entries_count"
                },
                "lVar7 != 0": {
                    "1": "has_entries"
                },
                "lVar7 < 0": {
                    "1": "is_l_var7_negative"
                },
                "lVar8": {
                    "1": "iteration_index",
                    "2": "loop_index",
                    "3": "count",
                    "4": "index",
                    "7": "i",
                    "9": "reloc_index"
                },
                "param_1": {
                    "1": "param_ptr",
                    "2": "input_file",
                    "3": "bfd_handle",
                    "4": "param_1"
                },
                "param_2": {
                    "1": "data_length",
                    "2": "size",
                    "3": "param_size",
                    "4": "param_2"
                },
                "plVar1": {
                    "1": "current_pointer",
                    "11": "reloc_entry",
                    "2": "current_reloc",
                    "5": "reloc_ptr"
                },
                "plVar9": {
                    "1": "reloc_entry"
                },
                "uStack_28": {
                    "1": "unused_result",
                    "2": "empty_return_value",
                    "3": "return_value",
                    "5": "stack_variable"
                },
                "xexit": {
                    "1": "perform_exit"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001047b0",
                "FUN_001048f0",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_00128450",
                "FUN_00104760",
                "FUN_00104840",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *param_1,long param_2)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long l_var3;\n  long l_var4;\n  int error_code;\n  undefined8 return_value;\n  long fwrite;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 return_value;\n  long reloc_index;\n  undefined8 stack_variable;\n  \n  if (*(long *)(param_2 + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite = get_reloc_upper_bound();\n  if (fwrite < 0) {\n    if ((fwrite != -1) || (error_code = get_bfd_error(), error_code != 5)) {\n      handle_bfd_nonfatal(*param_1);\n                    \n      exit_program(1);\n    }\n  }\n  else if (fwrite != 0) {\n    reloc_buffer = (void *)allocate_memory();\n    reloc_count = canonicalize_reloc(param_1,param_2,reloc_buffer);\n    l_var4 = _DAT_00128680;\n    l_var3 = _DAT_00128568;\n    fwrite = fwrite_address;\n    if (reloc_count < 0) {\n      handle_bfd_nonfatal(*param_1);\n                    \n      exit_program(1);\n    }\n    if (reloc_count != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != fwrite)) &&\n           ((reloc_value != l_var4 && (reloc_value != l_var3)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (reloc_count != reloc_index);\n    }\n    deallocate_memory(reloc_buffer);\n    return return_value;\n  }\n  return stack_variable;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "_fwrite": "fwrite_address",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_bfd_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_nonfatal": "handle_bfd_nonfatal",
                "extraout_RAX": "return_value",
                "free": "deallocate_memory",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar1": "reloc_upper_bound",
                "lVar2": "reloc_value",
                "lVar3": "l_var3",
                "lVar4": "l_var4",
                "lVar6": "fwrite",
                "lVar7": "reloc_count",
                "lVar8": "reloc_index",
                "plVar1": "reloc_entry",
                "uStack_28": "stack_variable",
                "xexit": "exit_program",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "FUN_00116110": {
                    "1": "extract_section_data",
                    "10": "process_section",
                    "5": "reverse_section",
                    "8": "reverse_section_contents"
                },
                "__ptr": {
                    "1": "ptr1",
                    "10": "buffer",
                    "2": "buffer_ptr",
                    "3": "section_contents",
                    "9": "allocated_memory"
                },
                "bVar20": {
                    "1": "temp_byte2",
                    "2": "temp_var20",
                    "3": "flag2",
                    "6": "flag",
                    "7": "skip_flag"
                },
                "bfd_convert_section_contents": {
                    "1": "convert_section_contents"
                },
                "bfd_get_full_section_contents": {
                    "1": "get_full_section_contents"
                },
                "bfd_nonfatal_message": {
                    "1": "nonfatal_message"
                },
                "bfd_set_section_contents": {
                    "1": "set_section_contents"
                },
                "bfd_set_section_size": {
                    "1": "set_section_size"
                },
                "cVar6": {
                    "1": "temp_var6",
                    "2": "error_flag",
                    "6": "status",
                    "9": "result"
                },
                "dcgettext": {
                    "1": "get_error_code"
                },
                "fatal": {
                    "1": "print_error_message"
                },
                "find_section_list": {
                    "1": "find_section_list"
                },
                "free": {
                    "1": "free_memory"
                },
                "iVar10": {
                    "1": "temp_var6",
                    "2": "loop_iterations",
                    "3": "temp_var10"
                },
                "iVar4": {
                    "1": "half_index",
                    "2": "int_var1",
                    "3": "count1",
                    "5": "counter1"
                },
                "iVar5": {
                    "1": "temp_i_var5",
                    "2": "counter_2",
                    "3": "count2",
                    "5": "counter2"
                },
                "lVar13": {
                    "1": "remaining_len",
                    "2": "long_var3",
                    "4": "remaining_size",
                    "5": "remaining_bytes"
                },
                "lVar3": {
                    "1": "size1",
                    "2": "long_var1",
                    "5": "section_offset",
                    "6": "section_size",
                    "8": "section_index"
                },
                "lVar8": {
                    "1": "length_2",
                    "2": "long_var2",
                    "3": "inner_loop_index",
                    "5": "loop_counter"
                },
                "local_30": {
                    "1": "data",
                    "11": "section_data",
                    "2": "content",
                    "4": "section_contents"
                },
                "local_38": {
                    "1": "size3",
                    "18": "section_size",
                    "2": "ulong_var6",
                    "4": "section_length"
                },
                "param_1": {
                    "1": "binary",
                    "2": "input_param1",
                    "3": "param1",
                    "4": "input_section",
                    "6": "input_binary",
                    "7": "input_file"
                },
                "param_2": {
                    "1": "param_b",
                    "2": "input_param2",
                    "3": "section_header",
                    "4": "section_headers",
                    "6": "section_info",
                    "8": "section_data"
                },
                "param_3": {
                    "1": "output_handle",
                    "2": "input_param3",
                    "3": "output_bfd",
                    "5": "output_file",
                    "6": "output_section"
                },
                "puVar12": {
                    "1": "temp_pu_var12",
                    "2": "pointer",
                    "3": "byte_pointer",
                    "5": "temp_pointer",
                    "6": "temp_ptr"
                },
                "puVar14": {
                    "1": "ptr3",
                    "2": "buffer_ptr",
                    "4": "ptr2"
                },
                "puVar15": {
                    "1": "ptr2",
                    "2": "buffer_ptr2",
                    "4": "ptr3"
                },
                "pvVar16": {
                    "1": "copy_destination",
                    "2": "section_contents",
                    "3": "ptr4"
                },
                "skip_section": {
                    "1": "check_section_and_attributes"
                },
                "uVar1": {
                    "1": "temp_var",
                    "4": "byte_value",
                    "5": "temp1",
                    "8": "temp_byte"
                },
                "uVar11": {
                    "1": "outer_loop_counter",
                    "2": "outer_loop_index",
                    "3": "offset"
                },
                "uVar17": {
                    "1": "section_data_offset",
                    "2": "temp_var17"
                },
                "uVar18": {
                    "1": "unit_size",
                    "2": "temp_var18",
                    "3": "alignment"
                },
                "uVar19": {
                    "1": "start_index",
                    "2": "temp_offset",
                    "3": "temp_var19"
                },
                "uVar2": {
                    "1": "temp_var",
                    "2": "temp_var1",
                    "3": "temp_value",
                    "5": "temp2",
                    "9": "temp_var2"
                },
                "uVar7": {
                    "1": "undefined_var3",
                    "12": "error_message",
                    "2": "temp3",
                    "4": "error_msg"
                },
                "uVar9": {
                    "1": "temp_var6",
                    "2": "loop_counter",
                    "3": "inner_loop_index"
                }
            },
            "called": [
                "FUN_00104440",
                "FUN_00115f50",
                "FUN_001048f0",
                "FUN_00104330",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001042f0",
                "FUN_001083de",
                "FUN_00104390",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_section_00116110(undefined8 input_file,undefined8 *section_data,undefined8 output_section)\n\n{\n  undefined temp_var1;\n  undefined8 temp_var2;\n  long section_index;\n  int temp_var4;\n  int temp_var5;\n  char result;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long loop_counter;\n  ulong inner_loop_index;\n  int temp_var10;\n  ulong offset;\n  undefined *temp_ptr;\n  long remaining_bytes;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  void *ptr4;\n  ulong temp_var17;\n  ulong division_factor;\n  ulong temp_var19;\n  byte skip_flag;\n  ulong section_size;\n  void *section_data;\n  \n  skip_flag = 0;\n  result = check_section_and_attributes(input_file,section_data,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_data[8];\n  section_index = section_data[0xc];\n  if (((*(byte *)((long)section_data + 0x25) & 1) == 0) || ((*(byte *)(section_index + 0x25) & 1) == 0)) {\n    remaining_bytes = find_section_list(*section_data,0,0x80);\n    if (remaining_bytes == 0) {\n      return;\n    }\n    if ((*(byte *)(remaining_bytes + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_size);\n    ptr3 = buffer;\n    if (7 < section_size) {\n      for (division_factor = section_size >> 3; division_factor != 0; division_factor = division_factor - 1) {\n        *ptr3 = 0;\n        ptr3 = ptr3 + (ulong)skip_flag * -2 + 1;\n      }\n    }\n    ptr2 = ptr3;\n    if ((section_size & 4) != 0) {\n      ptr2 = (undefined8 *)((long)ptr3 + (ulong)skip_flag * -8 + 4);\n      *(undefined4 *)ptr3 = 0;\n    }\n    ptr3 = ptr2;\n    if ((section_size & 2) != 0) {\n      ptr3 = (undefined8 *)((long)ptr2 + (ulong)skip_flag * -4 + 2);\n      *(undefined2 *)ptr2 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)ptr3 = 0;\n    }\n    result = set_section_contents(output_section,section_index,buffer,0);\n    if (result != '\\0') {\n      free_memory(buffer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    nonfatal_message(0,output_section,section_index,0);\n    free_memory(buffer);\n    return;\n  }\n  section_data = (void *)0x0;\n  result = get_full_section_contents(input_file,section_data,&section_data);\n  if ((result == '\\0') ||\n     (result = convert_section_contents(input_file,section_data,output_section,&section_data,&section_size),\n     temp_var10 = DAT_00127908, result == '\\0')) {\n    set_section_size(section_index,0);\n    DAT_00127a40 = 1;\n    nonfatal_message(0,input_file,section_data,0);\n    free_memory(section_data);\n    return;\n  }\n  temp_var4 = DAT_001264b8;\n  temp_var5 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    division_factor = (ulong)DAT_00127908;\n    if (section_size % division_factor != 0) {\n      temp_var2 = *section_data;\n      error_message = get_error_code(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_message(error_message,temp_var2,temp_var10);\n    }\n    temp_var10 = DAT_00127908 / 2;\n    offset = 0;\n    while (temp_var19 = offset, temp_var4 = DAT_001264b8, temp_var5 = DAT_001264bc, temp_var19 < section_size) {\n      offset = division_factor + temp_var19;\n      temp_var17 = offset;\n      for (inner_loop_index = 0; inner_loop_index < (ulong)(long)temp_var10; inner_loop_index = inner_loop_index + 1) {\n        temp_var17 = temp_var17 - 1;\n        temp_ptr = (undefined *)(temp_var19 + inner_loop_index + (long)section_data);\n        temp_var1 = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)section_data + temp_var17);\n        *(undefined *)((long)section_data + temp_var17) = temp_var1;\n      }\n    }\n  }\n  DAT_001264b8 = temp_var4;\n  DAT_001264bc = temp_var5;\n  if (-1 < temp_var5) {\n    division_factor = (ulong)DAT_00127a3c;\n    temp_var10 = (int)((ulong)section_data[7] % division_factor);\n    offset = ((long)temp_var5 - (long)temp_var10) + (long)section_data;\n    if (temp_var5 < temp_var10) {\n      offset = offset + division_factor;\n    }\n    remaining_bytes = (section_size + (long)section_data) - offset;\n    ptr4 = section_data;\n    for (; offset < section_size + (long)section_data; offset = offset + division_factor) {\n      for (loop_counter = 0; ((int)loop_counter < temp_var4 && (loop_counter != remaining_bytes)); loop_counter = loop_counter + 1) {\n        *(undefined *)((long)ptr4 + loop_counter) = *(undefined *)(offset + loop_counter);\n      }\n      ptr4 = (void *)((long)ptr4 + loop_counter);\n      remaining_bytes = remaining_bytes - division_factor;\n    }\n    section_size = ((((division_factor - 1) + section_size) - (long)temp_var5) / division_factor) * (long)temp_var4;\n    division_factor = *(ulong *)(section_index + 0x38) / division_factor;\n    *(ulong *)(section_index + 0x38) = division_factor;\n    if (temp_var5 < temp_var10) {\n      *(ulong *)(section_index + 0x38) = division_factor + 1;\n      result = set_section_contents(output_section,section_index,section_data,0,section_size);\n      if (result == '\\0') {\n        free_memory_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = set_section_contents(output_section,section_index,section_data,0,section_size);\n  if (result == '\\0') {\n    free_memory_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free_memory(section_data);\n  return;\n}\n\n",
            "current_name": "process_section_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "__ptr": "buffer",
                "bVar20": "skip_flag",
                "bfd_convert_section_contents": "convert_section_contents",
                "bfd_get_full_section_contents": "get_full_section_contents",
                "bfd_nonfatal_message": "nonfatal_message",
                "bfd_set_section_contents": "set_section_contents",
                "bfd_set_section_size": "set_section_size",
                "cVar6": "result",
                "dcgettext": "get_error_code",
                "fatal": "print_error_message",
                "free": "free_memory",
                "iVar10": "temp_var10",
                "iVar4": "temp_var4",
                "iVar5": "temp_var5",
                "lVar13": "remaining_bytes",
                "lVar3": "section_index",
                "lVar8": "loop_counter",
                "local_30": "section_data",
                "local_38": "section_size",
                "param_1": "input_file",
                "param_2": "section_data",
                "param_3": "output_section",
                "puVar12": "temp_ptr",
                "puVar14": "ptr2",
                "puVar15": "ptr3",
                "pvVar16": "ptr4",
                "skip_section": "check_section_and_attributes",
                "uVar1": "temp_var1",
                "uVar11": "offset",
                "uVar17": "temp_var17",
                "uVar18": "division_factor",
                "uVar19": "temp_var19",
                "uVar2": "temp_var2",
                "uVar7": "error_message",
                "uVar9": "inner_loop_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "DAT_001264c0": {
                    "1": "constant_value_2"
                },
                "DAT_001278d0": {
                    "1": "constant_value"
                },
                "DAT_00127a40": {
                    "1": "constant_value_3"
                },
                "F0RE511639D0": {
                    "1": "process_gnu_build_attribute_notes"
                },
                "FUN_001163d0": {
                    "1": "process_build_attribute_notes",
                    "28": "process_gnu_build_attribute_notes"
                },
                "PTR_00119ed0": {
                    "1": "report_data_function"
                },
                "UVar25": {
                    "1": "var25"
                },
                "__nmemb": {
                    "1": "length2",
                    "2": "note_count",
                    "3": "num_elements",
                    "6": "count"
                },
                "__ptr": {
                    "1": "ptr_temp",
                    "2": "temp_buffer",
                    "3": "reloc_buffer",
                    "6": "buffer",
                    "7": "ptr"
                },
                "__ptr_00": {
                    "1": "pointer_param_2"
                },
                "bVar26": {
                    "1": "byte_value",
                    "2": "byte_var26",
                    "7": "byte_var"
                },
                "bVar4": {
                    "1": "is_equal",
                    "2": "is_valid",
                    "5": "is_true",
                    "6": "flag",
                    "7": "condition"
                },
                "bfd_canonicalize_reloc": {
                    "1": "canonicalize_reloc"
                },
                "bfd_get_reloc_upper_bound": {
                    "1": "get_reloc_upper_bound"
                },
                "bfd_nonfatal_message": {
                    "1": "print_message"
                },
                "bfd_set_error": {
                    "1": "set_error"
                },
                "cVar19": {
                    "1": "var_char",
                    "2": "char_var19",
                    "3": "temp_char",
                    "4": "char1",
                    "8": "char_var"
                },
                "compare_gnu_build_notes": {
                    "1": "compare_notes"
                },
                "dcgettext": {
                    "1": "gettext"
                },
                "iVar21": {
                    "1": "var13",
                    "2": "loop_index",
                    "5": "var21"
                },
                "iVar6": {
                    "1": "i_var6",
                    "2": "temp_var6",
                    "3": "comparison_result",
                    "4": "var6",
                    "7": "index"
                },
                "lVar8": {
                    "1": "len",
                    "11": "length",
                    "2": "var8",
                    "5": "error_code"
                },
                "local_60": {
                    "1": "local_var60",
                    "2": "ptr8",
                    "3": "notes_array",
                    "4": "note_array",
                    "5": "local_ptr"
                },
                "local_68": {
                    "1": "updated_section_size",
                    "2": "result_size",
                    "3": "local_var3",
                    "5": "local_var4"
                },
                "local_70": {
                    "1": "last_section_offset",
                    "2": "local_var_3",
                    "3": "local_var2",
                    "6": "local_var3"
                },
                "local_88": {
                    "1": "temp_variable_1",
                    "2": "value1",
                    "9": "local_var1"
                },
                "non_fatal": {
                    "1": "print_warning"
                },
                "param_1": {
                    "1": "input_reloc_section",
                    "10": "input1",
                    "2": "section_name",
                    "3": "input_1",
                    "4": "param1"
                },
                "param_2": {
                    "1": "param_section_header",
                    "10": "input2",
                    "2": "input_param_2",
                    "3": "input_2",
                    "4": "param2"
                },
                "param_3": {
                    "1": "input_parameter_3",
                    "2": "input_3",
                    "4": "param3",
                    "8": "input3"
                },
                "param_4": {
                    "1": "output_data",
                    "2": "data",
                    "4": "param4",
                    "6": "output_buffer",
                    "8": "input4"
                },
                "process_data_00116852": {
                    "1": "process_data_3"
                },
                "process_data_00119ed0": {
                    "1": "report_data"
                },
                "process_gnu_build_attribute_notes_001086af": {
                    "1": "process_notes_function_2"
                },
                "process_gnu_build_attribute_notes_00116490": {
                    "1": "process_data"
                },
                "puVar11": {
                    "1": "ptr_temp_2"
                },
                "puVar17": {
                    "1": "temp_var17",
                    "2": "notes_ptr",
                    "5": "ptr2"
                },
                "puVar18": {
                    "1": "ptr2",
                    "2": "ptr18",
                    "5": "ptr3"
                },
                "puVar20": {
                    "1": "tmp_pointer",
                    "2": "ptr2",
                    "5": "ptr4"
                },
                "puVar22": {
                    "1": "input_data",
                    "2": "ptr22",
                    "5": "ptr5"
                },
                "puVar23": {
                    "1": "temp_ptr7",
                    "2": "ptr23",
                    "5": "ptr6"
                },
                "puVar25": {
                    "1": "note_ptr",
                    "2": "ptr_var25",
                    "5": "ptr7"
                },
                "puVar26": {
                    "1": "ptr_data"
                },
                "puVar5": {
                    "1": "var_ptr",
                    "2": "ptr5",
                    "5": "ptr1",
                    "6": "temp_ptr"
                },
                "qsort": {
                    "1": "qsort_function"
                },
                "sort_gnu_build_notes": {
                    "1": "sort_notes"
                },
                "uStack_80": {
                    "1": "stack_var",
                    "2": "local_var_2",
                    "6": "local_var2"
                },
                "uVar1": {
                    "1": "temp_var_1",
                    "2": "temp_var1",
                    "27": "result"
                },
                "uVar10": {
                    "1": "temp_var6",
                    "2": "temp_var10",
                    "3": "var5",
                    "7": "var10"
                },
                "uVar11": {
                    "1": "temp_result_3",
                    "2": "temp_var11",
                    "3": "temp3",
                    "7": "var11"
                },
                "uVar12": {
                    "1": "temp_var_12",
                    "2": "temp_var12",
                    "3": "temp4",
                    "7": "var12"
                },
                "uVar13": {
                    "1": "aligned_name_length",
                    "2": "aligned_size",
                    "3": "var8",
                    "7": "var13"
                },
                "uVar14": {
                    "1": "var10",
                    "2": "temp_var14",
                    "3": "var9",
                    "7": "var14"
                },
                "uVar15": {
                    "1": "temp_var11",
                    "2": "temp_var15",
                    "3": "var10",
                    "7": "var15"
                },
                "uVar16": {
                    "1": "temp_var12",
                    "2": "temp_var16",
                    "3": "var11",
                    "5": "remaining_size",
                    "7": "var16"
                },
                "uVar19": {
                    "1": "note_character"
                },
                "uVar2": {
                    "1": "section_name1",
                    "2": "value1",
                    "6": "var2",
                    "7": "var1"
                },
                "uVar21": {
                    "1": "loop_counter"
                },
                "uVar24": {
                    "1": "unsigned_result_13",
                    "2": "var12",
                    "7": "var24"
                },
                "uVar3": {
                    "1": "section_type1",
                    "2": "section_header",
                    "6": "var3",
                    "7": "var2"
                },
                "uVar4": {
                    "1": "b_var4"
                },
                "uVar7": {
                    "1": "temp_var_3",
                    "2": "var4",
                    "3": "message",
                    "7": "var7"
                },
                "uVar9": {
                    "1": "unsigned_result_5",
                    "2": "temp_var9",
                    "3": "temp1",
                    "7": "var9"
                },
                "xdcalloc": {
                    "1": "xmalloc_function"
                }
            },
            "called": [
                "FUN_001047b0",
                "FUN_001048f0",
                "FUN_00104918",
                "FUN_00104240",
                "FUN_00119ed0",
                "FUN_00104390",
                "FUN_00104840"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong process_gnu_build_attribute_notes_001163d0(undefined8 *input1,undefined8 *input2,ulong input3,undefined *input4)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool condition;\n  ulong *temp_ptr;\n  int index;\n  undefined8 error_message;\n  long length;\n  void *ptr;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr_2;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong var16;\n  ulong *note_ptr;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  int var21;\n  undefined *ptr5;\n  ulong *ptr6;\n  ulong var24;\n  size_t count;\n  ulong *ptr7;\n  byte byte_var;\n  ulong local_var1;\n  ulong local_var2;\n  ulong local_var3;\n  ulong local_var4;\n  ulong *local_ptr;\n  \n  byte_var = 0;\n  length = get_reloc_upper_bound();\n  local_var4 = input3;\n  if (0 < length) {\n    ptr = (void *)xmalloc(length);\n    length = canonicalize_reloc(input1,input2,ptr,DAT_001278d0);\n    free(ptr);\n    if (length != 0) {\n      if (_DAT_001264c0 == 0) {\n        var1 = *input1;\n        var2 = *input2;\n        error_message = gettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_warning(error_message,var1,var2);\n      }\n      local_ptr = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_ptr = (ulong *)xcalloc(input3 / 0xc,0x48,input3 % 0xc);\n  local_var1 = 0;\n  local_var3 = 0;\n  var16 = input3;\n  var15 = 0;\n  ptr6 = local_ptr;\n  var14 = 0;\n  ptr5 = input4;\n  while (0xb < var16) {\n    var10 = (**(code **)(input1[1] + 0x40))(ptr5);\n    *ptr6 = var10;\n    var10 = (**(code **)(input1[1] + 0x40))(ptr5 + 4);\n    ptr6[1] = var10;\n    var11 = (**(code **)(input1[1] + 0x40))(ptr5 + 8);\n    var10 = *ptr6;\n    ptr6[2] = var11;\n    var12 = ptr6[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    ptr6[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      length = gettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      length = gettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (var16 < result) {\n      length = gettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      length = gettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr6[3] = (ulong)(ptr5 + 0xc);\n    ptr6[4] = (ulong)(ptr5 + var13 + 0xc);\n    var16 = var16 + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (ptr5[0xc] == '$') {\n        if ((ptr5[0xd] == '\\x01') && (ptr5[0xe] == '1')) {\n          var16 = process_data();\n          return var16;\n        }\n      }\n      else if ((((4 < var10) && (ptr5[0xc] == 'G')) && (ptr5[0xd] == 'A')) &&\n              ((ptr5[0xe] == '$' && (ptr5[0xf] == '\\x01')))) {\n        if (ptr5[0x10] == '2') {\n          var16 = process_data();\n          return var16;\n        }\n        if (ptr5[0x10] == '3') {\n          var16 = process_data();\n          return var16;\n        }\n        length = gettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        ptr6[7] = local_var1;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        ptr6[7] = local_var3;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(input1[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            var16 = process_data_2();\n            return var16;\n          }\n        }\n        length = gettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(input1[1] + 0x28))(ptr5 + var13 + 0xc);\n      var12 = (**(code **)(input1[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (ptr6[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = local_var1;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var24 = var12;\n        local_var1 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = local_var3;\n        }\n        var10 = *ptr6;\n        ptr6[7] = var11;\n        var9 = var12;\n        local_var3 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr6[8] = var12;\n    if (*(char *)((ptr6[3] - 1) + var10) != '\\0') {\n      length = gettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = ptr6 + 9;\n    var15 = var9;\n    var14 = var24;\n    ptr5 = ptr5 + result;\n  }\n  if (var16 == 0) {\n    var1 = *input1;\n    var2 = *input2;\n    error_message = gettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_warning(error_message,var1,var2);\n    count = ((long)ptr6 - (long)local_ptr >> 3) * -0x71c71c71c71c71c7;\n    qsort_function(local_ptr,count,0x48,compare_notes);\n    for (note_ptr = local_ptr; note_ptr < ptr6; note_ptr = note_ptr + 9) {\n      var16 = note_ptr[2];\n      if (var16 != 0) {\n        var15 = note_ptr[7];\n        var14 = note_ptr[8];\n        ptr7 = note_ptr;\n        var21 = 0;\n        if (var15 == var14) {\n          note_ptr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              temp_ptr = ptr7;\n              ptr7 = temp_ptr + -9;\n              if (ptr7 < local_ptr) goto LAB_001167f5;\n              var10 = temp_ptr[-7];\n            } while (var10 == 0);\n            if ((*ptr7 != *note_ptr) ||\n               (index = memcmp((void *)temp_ptr[-6],(void *)note_ptr[3],*note_ptr), index != 0)) break;\n            var12 = temp_ptr[-2];\n            var11 = temp_ptr[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                note_ptr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                note_ptr[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_data_3;\n              }\nLAB_001167b8:\n              if ((var16 == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                temp_ptr[-1] = var11;\n                temp_ptr[-2] = var15;\n                note_ptr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_data_3;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nprocess_data_3:\n            condition = var21 < 0x11;\n            var21 = var21 + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort_function(local_ptr,count,0x48,sort_notes);\n    ptr_2 = (undefined *)xmalloc(input3 * 2);\n    local_var2 = 0;\n    local_var3 = 0;\n    ptr5 = ptr_2;\n    for (note_ptr = local_ptr; note_ptr < ptr6; note_ptr = note_ptr + 9) {\n      if (note_ptr[2] != 0) {\n        ptr3 = ptr5 + 0xc;\n        if ((note_ptr[7] == local_var3) && (note_ptr[8] == local_var2)) {\n          (**(code **)(input1[1] + 0x50))(*note_ptr,ptr5);\n          (**(code **)(input1[1] + 0x50))(0,ptr5 + 4);\n          (**(code **)(input1[1] + 0x50))(note_ptr[2],ptr5 + 8);\n          var15 = note_ptr[6];\n          var16 = *note_ptr;\n          ptr5 = (undefined *)note_ptr[3];\n          ptr4 = ptr3;\n          for (var14 = var16; var14 != 0; var14 = var14 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          if (var16 < var15) {\n            for (length = var15 - var16; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + var15;\n        }\n        else {\n          (**(code **)(input1[1] + 0x50))();\n          if (*(int *)(input1[1] + 8) == 5) {\n            char_var = (*(char *)(input1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(input1[1] + 0x50))(char_var,ptr5 + 4);\n          (**(code **)(input1[1] + 0x50))(note_ptr[2],ptr5 + 8);\n          var16 = *note_ptr;\n          ptr5 = (undefined *)note_ptr[3];\n          ptr4 = ptr3;\n          for (var15 = var16; var15 != 0; var15 = var15 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          var15 = note_ptr[6];\n          if (var16 < var15) {\n            for (length = var15 - var16; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length = input1[1];\n          ptr3 = ptr3 + var15;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(input1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(note_ptr[7],ptr3);\n            (**(code **)(input1[1] + 0x38))(note_ptr[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(note_ptr[7],ptr3);\n            (**(code **)(input1[1] + 0x50))(note_ptr[8],ptr3 + 4);\n          }\n          local_var3 = note_ptr[7];\n          local_var2 = note_ptr[8];\n        }\n      }\n    }\n    var15 = (long)ptr5 - (long)ptr_2;\n    var16 = var15;\n    ptr5 = ptr_2;\n    local_var4 = input3;\n    if (var15 < input3) {\n      for (; local_var4 = var15, var16 != 0; var16 = var16 - 1) {\n        *input4 = *ptr5;\n        ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n        input4 = input4 + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free(ptr_2);\n  }\n  else {\n    length = gettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      set_error(0x11);\n      print_message(0,input1,input2,length);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_ptr);\n  return local_var4;\n}\n\n",
            "current_name": "process_gnu_build_attribute_notes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "process_gnu_build_attribute_notes_001163d0",
                "__nmemb": "count",
                "__ptr": "ptr",
                "__ptr_00": "ptr_2",
                "bVar26": "byte_var",
                "bVar4": "condition",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_nonfatal_message": "print_message",
                "bfd_set_error": "set_error",
                "cVar19": "char_var",
                "compare_gnu_build_notes": "compare_notes",
                "dcgettext": "gettext",
                "iVar21": "var21",
                "iVar6": "index",
                "lVar8": "length",
                "local_60": "local_ptr",
                "local_68": "local_var4",
                "local_70": "local_var3",
                "local_88": "local_var1",
                "non_fatal": "print_warning",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "process_data_00116852": "process_data_3",
                "process_gnu_build_attribute_notes_001086af": "process_data_2",
                "process_gnu_build_attribute_notes_00116490": "process_data",
                "puVar17": "note_ptr",
                "puVar18": "ptr3",
                "puVar20": "ptr4",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "puVar25": "ptr7",
                "puVar5": "temp_ptr",
                "qsort": "qsort_function",
                "sort_gnu_build_notes": "sort_notes",
                "uStack_80": "local_var2",
                "uVar1": "result",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "var16",
                "uVar2": "var1",
                "uVar24": "var24",
                "uVar3": "var2",
                "uVar7": "error_message",
                "uVar9": "var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "FUN_00116490": {
                    "1": "improved_gnu_build_attribute_note"
                },
                "__nmemb": {
                    "1": "num_of_elements",
                    "2": "num_members",
                    "3": "num_elements"
                },
                "__ptr": {
                    "1": "description_ptr",
                    "2": "ptr_var",
                    "3": "buffer",
                    "4": "ptr"
                },
                "_ptr": {
                    "1": "pointer_var"
                },
                "bVar16": {
                    "1": "var16"
                },
                "bVar17": {
                    "1": "var17"
                },
                "bVar18": {
                    "1": "var18"
                },
                "bVar19": {
                    "1": "var19"
                },
                "bVar20": {
                    "1": "var20"
                },
                "bVar21": {
                    "1": "var21",
                    "4": "byte_flag",
                    "9": "byte_var"
                },
                "bVar22": {
                    "1": "var22"
                },
                "bVar23": {
                    "1": "var23"
                },
                "bVar24": {
                    "1": "var24"
                },
                "bVar25": {
                    "1": "var25"
                },
                "bVar26": {
                    "1": "var26"
                },
                "bVar27": {
                    "1": "var27"
                },
                "bVar28": {
                    "1": "var28"
                },
                "bVar29": {
                    "1": "var29"
                },
                "bVar30": {
                    "1": "var30"
                },
                "bVar31": {
                    "1": "var31"
                },
                "bVar32": {
                    "1": "var32"
                },
                "bVar33": {
                    "1": "var33"
                },
                "bVar34": {
                    "1": "var34"
                },
                "bVar35": {
                    "1": "var35"
                },
                "bVar36": {
                    "1": "var36"
                },
                "bVar37": {
                    "1": "var37"
                },
                "bVar38": {
                    "1": "var38"
                },
                "bVar39": {
                    "1": "var39"
                },
                "bVar4": {
                    "1": "is_flag_set",
                    "2": "bool_flag",
                    "3": "bool_var",
                    "7": "flag"
                },
                "bVar40": {
                    "1": "var40"
                },
                "bVar41": {
                    "1": "var41"
                },
                "bVar42": {
                    "1": "var42"
                },
                "bVar43": {
                    "1": "var43"
                },
                "bVar44": {
                    "1": "var44"
                },
                "bVar45": {
                    "1": "var45"
                },
                "bVar46": {
                    "1": "var46"
                },
                "bVar47": {
                    "1": "var47"
                },
                "bVar48": {
                    "1": "var48"
                },
                "bVar49": {
                    "1": "var49"
                },
                "bVar50": {
                    "1": "var50"
                },
                "bVar51": {
                    "1": "var51"
                },
                "bVar52": {
                    "1": "var52"
                },
                "bVar53": {
                    "1": "var53"
                },
                "bVar54": {
                    "1": "var54"
                },
                "bVar55": {
                    "1": "var55"
                },
                "bVar56": {
                    "1": "var56"
                },
                "bVar57": {
                    "1": "var57"
                },
                "bVar58": {
                    "1": "var58"
                },
                "bVar59": {
                    "1": "var59"
                },
                "bVar60": {
                    "1": "var60"
                },
                "bVar61": {
                    "1": "var61"
                },
                "bVar62": {
                    "1": "var62"
                },
                "bVar63": {
                    "1": "var63"
                },
                "bVar64": {
                    "1": "var64"
                },
                "bVar65": {
                    "1": "var65"
                },
                "bVar66": {
                    "1": "var66"
                },
                "bVar67": {
                    "1": "var67"
                },
                "bVar68": {
                    "1": "var68"
                },
                "bVar69": {
                    "1": "var69"
                },
                "bVar70": {
                    "1": "var70"
                },
                "bVar71": {
                    "1": "var71"
                },
                "bVar72": {
                    "1": "var72"
                },
                "bVar73": {
                    "1": "var73"
                },
                "bVar74": {
                    "1": "var74"
                },
                "bVar75": {
                    "1": "var75"
                },
                "bool bVar4": {
                    "1": "boolean_flag"
                },
                "byte bVar21": {
                    "1": "byte_var"
                },
                "cVar15": {
                    "1": "var15"
                },
                "cVar16": {
                    "1": "temp_char",
                    "12": "char_var",
                    "2": "char_var16"
                },
                "char cVar16": {
                    "1": "character_var"
                },
                "compare_gnu_build_notes": {
                    "1": "compare_notes"
                },
                "dcgettext": {
                    "1": "get_message"
                },
                "free": {
                    "1": "release_memory"
                },
                "iVar22": {
                    "1": "loop_index",
                    "2": "counter2",
                    "3": "int_var2"
                },
                "iVar6": {
                    "1": "new_var6",
                    "2": "counter",
                    "4": "index",
                    "5": "int_var"
                },
                "in_R11": {
                    "1": "value_in_r11",
                    "2": "r11_value",
                    "3": "in_register_r11"
                },
                "in_RAX": {
                    "1": "temp_value_3",
                    "2": "rax_value",
                    "3": "in_register_ax",
                    "5": "note_type"
                },
                "in_stack_00000020": {
                    "1": "temp9",
                    "2": "allocated_size",
                    "5": "stack_var1"
                },
                "in_stack_00000028": {
                    "1": "stack_var_2",
                    "2": "stack_ptr1",
                    "3": "stack_var2"
                },
                "in_stack_00000030": {
                    "1": "ptr2",
                    "2": "stack_pointer2",
                    "3": "stack_var3"
                },
                "in_stack_00000038": {
                    "1": "excess_data",
                    "2": "flag2",
                    "3": "stack_var4"
                },
                "in_stack_00000040": {
                    "1": "flags",
                    "2": "flag3",
                    "3": "stack_var5"
                },
                "in_stack_00000048": {
                    "1": "pointer13",
                    "2": "stack_ptr3",
                    "3": "stack_var6"
                },
                "int iVar22": {
                    "1": "integer_var_2"
                },
                "int iVar6": {
                    "1": "integer_var"
                },
                "lVar7": {
                    "1": "long_var_1",
                    "2": "loop_var",
                    "3": "long_var",
                    "4": "length"
                },
                "long lVar7": {
                    "1": "loop_var"
                },
                "long param_4": {
                    "1": "input_param_4"
                },
                "memcmp": {
                    "1": "compare"
                },
                "non_fatal": {
                    "1": "print_warning_message"
                },
                "param_1": {
                    "1": "input1",
                    "2": "param",
                    "6": "input_param",
                    "8": "param1"
                },
                "param_2": {
                    "1": "input2",
                    "2": "size_param",
                    "5": "size"
                },
                "param_3": {
                    "1": "attribute_name",
                    "5": "param3",
                    "7": "note_name"
                },
                "param_4": {
                    "1": "param_desc",
                    "3": "note_data",
                    "5": "arg4",
                    "6": "param4"
                },
                "param_7": {
                    "1": "input2",
                    "2": "result",
                    "5": "param_7",
                    "8": "param7"
                },
                "param_8": {
                    "1": "arg5",
                    "2": "flag1",
                    "4": "param_8",
                    "7": "param8"
                },
                "param_9": {
                    "1": "exc_data_value",
                    "4": "param_9",
                    "8": "param9"
                },
                "process_data_00116852": {
                    "1": "process_data"
                },
                "puVar14": {
                    "1": "new_pointer2",
                    "2": "pointer2",
                    "3": "ptr14"
                },
                "puVar15": {
                    "1": "note_data",
                    "2": "pointer_var3",
                    "3": "ptr15"
                },
                "puVar17": {
                    "1": "temp_pointer_2",
                    "2": "pointer4",
                    "3": "pointer_var4"
                },
                "puVar18": {
                    "1": "pointer_var_5",
                    "2": "ptr2",
                    "3": "ptr_var5"
                },
                "puVar19": {
                    "1": "pointer_var_6",
                    "3": "pointer_var6"
                },
                "puVar20": {
                    "1": "ptr3",
                    "3": "ptr20"
                },
                "puVar5": {
                    "1": "pointer_var1",
                    "2": "pointer_var",
                    "3": "ptr_var"
                },
                "qsort": {
                    "1": "sort_list"
                },
                "size_t __nmemb": {
                    "1": "size_var"
                },
                "sort_gnu_build_notes": {
                    "1": "sort_notes"
                },
                "uVar1": {
                    "1": "output1",
                    "3": "result1",
                    "7": "temp_var1",
                    "9": "var1"
                },
                "uVar10": {
                    "1": "undefined_var_6",
                    "2": "temp_var6",
                    "6": "var10"
                },
                "uVar11": {
                    "1": "temp_var11",
                    "2": "temp_var12",
                    "6": "var11"
                },
                "uVar12": {
                    "1": "temp3",
                    "2": "temp_var9",
                    "6": "var12"
                },
                "uVar13": {
                    "1": "temp_value_15",
                    "2": "temp_var9",
                    "6": "var13"
                },
                "uVar14": {
                    "1": "var14"
                },
                "uVar2": {
                    "1": "output2",
                    "3": "result2",
                    "7": "temp_var2",
                    "9": "var2"
                },
                "uVar21": {
                    "1": "temp_byte"
                },
                "uVar3": {
                    "1": "variable3",
                    "3": "result3",
                    "7": "temp_var3",
                    "9": "var3"
                },
                "uVar4": {
                    "1": "var4"
                },
                "uVar5": {
                    "1": "temp_result"
                },
                "uVar6": {
                    "1": "var6"
                },
                "uVar7": {
                    "1": "var7"
                },
                "uVar8": {
                    "1": "result1",
                    "3": "result4",
                    "8": "var8"
                },
                "uVar9": {
                    "1": "temp_var9",
                    "2": "temp_var6",
                    "6": "var9"
                },
                "uint in_stack_00000038": {
                    "1": "stack_var_1"
                },
                "uint in_stack_00000040": {
                    "1": "stack_var_2"
                },
                "uint param_8": {
                    "1": "input_param_8"
                },
                "ulong *in_stack_00000028": {
                    "1": "stack_pointer_var_1"
                },
                "ulong *puVar14": {
                    "1": "pointer_var_3"
                },
                "ulong *puVar19": {
                    "1": "pointer_var_7"
                },
                "ulong *puVar20": {
                    "1": "pointer_var_8"
                },
                "ulong *puVar5": {
                    "1": "pointer_var"
                },
                "ulong *unaff_R12": {
                    "1": "unaffected_pointer_var_1"
                },
                "ulong in_R11": {
                    "1": "register_var_2"
                },
                "ulong in_RAX": {
                    "1": "register_var_1"
                },
                "ulong in_stack_00000020": {
                    "1": "register_var_3"
                },
                "ulong param_2": {
                    "1": "input_param_2"
                },
                "ulong param_3": {
                    "1": "input_param_3"
                },
                "ulong param_7": {
                    "1": "input_param_7"
                },
                "ulong param_9": {
                    "1": "input_param_9"
                },
                "ulong uVar10": {
                    "1": "result_6"
                },
                "ulong uVar11": {
                    "1": "result_7"
                },
                "ulong uVar12": {
                    "1": "result_8"
                },
                "ulong uVar13": {
                    "1": "result_9"
                },
                "ulong uVar3": {
                    "1": "result_3"
                },
                "ulong uVar9": {
                    "1": "result_5"
                },
                "ulong unaff_R13": {
                    "1": "unaffected_var_3"
                },
                "ulong unaff_RBP": {
                    "1": "unaffected_var_2"
                },
                "ulong unaff_RBX": {
                    "1": "unaffected_var_1"
                },
                "ulong unaff_retaddr": {
                    "1": "unaffected_var_4"
                },
                "unaff_R11": {
                    "1": "note_start_offset"
                },
                "unaff_R12": {
                    "1": "temp_ptr7",
                    "2": "register_r12",
                    "5": "unaffected_r12"
                },
                "unaff_R13": {
                    "1": "note_data",
                    "2": "register_r13",
                    "5": "unaffected_r13"
                },
                "unaff_R14": {
                    "1": "pointer_var24",
                    "2": "register_r14",
                    "4": "unaffected_r14"
                },
                "unaff_RAX": {
                    "1": "temp1"
                },
                "unaff_RBP": {
                    "1": "reg_rbp",
                    "2": "unaff_rbp",
                    "5": "unaffected_rbp"
                },
                "unaff_RBX": {
                    "1": "data_remaining",
                    "2": "unaff_rbx",
                    "3": "note_size",
                    "5": "unaffected_rbx"
                },
                "unaff_retaddr": {
                    "1": "retaddr_value",
                    "2": "ret_address",
                    "6": "return_address"
                },
                "undefined *__ptr": {
                    "1": "pointer_var_2"
                },
                "undefined *in_stack_00000030": {
                    "1": "stack_pointer_var_2"
                },
                "undefined *puVar15": {
                    "1": "pointer_var_4"
                },
                "undefined *puVar17": {
                    "1": "pointer_var_5"
                },
                "undefined *puVar18": {
                    "1": "pointer_var_6"
                },
                "undefined8 *in_stack_00000048": {
                    "1": "stack_pointer_var_3"
                },
                "undefined8 *unaff_R14": {
                    "1": "unaffected_pointer_var_2"
                },
                "undefined8 param_1": {
                    "1": "input_param_1"
                },
                "undefined8 uVar1": {
                    "1": "result_1"
                },
                "undefined8 uVar2": {
                    "1": "result_2"
                },
                "undefined8 uVar8": {
                    "1": "result_4"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001086af"
            ],
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "code": "\nulong process_gnu_build_attribute_notes_00116490(undefined8 arg1,ulong note_type,ulong note_name,long param4)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *ptr_var;\n  int int_var;\n  long length;\n  undefined8 var8;\n  ulong note_type;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr;\n  ulong var13;\n  ulong unaffected_rbx;\n  ulong unaffected_rbp;\n  ulong *ptr_var2;\n  undefined *ptr_var3;\n  char char_var;\n  undefined *ptr_var4;\n  undefined *ptr_var5;\n  ulong in_register_r11;\n  ulong *unaffected_r12;\n  ulong *ptr_var6;\n  ulong unaffected_r13;\n  size_t num_elements;\n  undefined8 *unaffected_r14;\n  ulong *ptr_var7;\n  byte byte_var;\n  int int_var2;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stack_var1;\n  ulong *stack_var2;\n  undefined *stack_var3;\n  uint stack_var4;\n  uint stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  length = param4;\n  var10 = unaffected_rbp;\n  var13 = unaffected_r13;\n  if (note_type == 0) {\n    if (note_type == 0x100) {\n      unaffected_r12[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = unaffected_r13;\n      var13 = unaffected_r13;\n      return_address = var11;\n    }\n    else {\n      unaffected_r12[7] = param9;\nLAB_0011669e:\n      var10 = unaffected_rbp;\n      var9 = unaffected_rbp;\n    }\nLAB_001164bb:\n    unaffected_r12[8] = var9;\n    if (*(char *)((unaffected_r12[3] - 1) + note_name) != '\\0') {\n      length = get_message(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_var6 = unaffected_r12 + 9;\n    if (0xb < unaffected_rbx) {\n      var9 = (**(code **)(unaffected_r14[1] + 0x40))(length);\n      *ptr_var6 = var9;\n      var9 = (**(code **)(unaffected_r14[1] + 0x40))(length + 4);\n      unaffected_r12[10] = var9;\n      note_type = (**(code **)(unaffected_r14[1] + 0x40))(length + 8);\n      note_name = *ptr_var6;\n      unaffected_r12[0xb] = note_type;\n      note_type = unaffected_r12[10];\n      var9 = note_name + 3 & 0xfffffffffffffffc;\n      unaffected_r12[0xf] = var9;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = get_message(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_type - 0x100) {\n        length = get_message(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + note_type + 0xc;\n      if (unaffected_rbx < var11) {\n        length = get_message(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_name < 2) {\n        length = get_message(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaffected_r12[0xc] = length + 0xc;\n      in_register_r11 = length + 0xc + var9;\n      unaffected_r12[0xd] = in_register_r11;\n      unaffected_rbx = unaffected_rbx + (-0xc - (var9 + note_type));\n      param4 = length + var11;\n      unaffected_rbp = var10;\n      unaffected_r12 = ptr_var6;\n      unaffected_r13 = var13;\n      if (note_name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            var10 = process_gnu_build_attribute_notes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < note_name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            var10 = process_gnu_build_attribute_notes_00116490();\n            return var10;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            var10 = process_gnu_build_attribute_notes_00116490();\n            return var10;\n          }\n          length = get_message(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaffected_rbx != 0) {\n      length = get_message(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_var4 | stack_var5 | param8) == 0) {\n      var1 = *unaffected_r14;\n      var2 = *stack_var6;\n      var8 = get_message(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_warning_message(var8,var1,var2);\nLAB_0011671b:\n      num_elements = ((long)ptr_var6 - (long)stack_var2 >> 3) * -0x71c71c71c71c71c7;\n      sort_list(stack_var2,num_elements,0x48,compare_notes);\n      for (ptr_var2 = stack_var2; ptr_var2 < ptr_var6; ptr_var2 = ptr_var2 + 9) {\n        var10 = ptr_var2[2];\n        if (var10 != 0) {\n          var13 = ptr_var2[7];\n          var9 = ptr_var2[8];\n          ptr_var7 = ptr_var2;\n          int_var2 = 0;\n          if (var13 == var9) {\n            ptr_var2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr_var = ptr_var7;\n                ptr_var7 = ptr_var + -9;\n                if (ptr_var7 < stack_var2) goto LAB_001167f5;\n                var11 = ptr_var[-7];\n              } while (var11 == 0);\n              if ((*ptr_var7 != *ptr_var2) ||\n                 (int_var = compare((void *)ptr_var[-6],(void *)ptr_var2[3],*ptr_var2), int_var != 0))\n              break;\n              var3 = ptr_var[-2];\n              var12 = ptr_var[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr_var2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr_var2[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto process_data;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr_var[-1] = var12;\n                  ptr_var[-2] = var13;\n                  ptr_var2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_data;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nprocess_data:\n              flag = int_var2 < 0x11;\n              int_var2 = int_var2 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      sort_list(stack_var2,num_elements,0x48,sort_notes);\n      ptr = (undefined *)allocate_memory(stack_var1 * 2);\n      param7 = 0;\n      param9 = 0;\n      ptr_var5 = ptr;\n      for (ptr_var2 = stack_var2; ptr_var2 < ptr_var6; ptr_var2 = ptr_var2 + 9) {\n        if (ptr_var2[2] != 0) {\n          ptr_var4 = ptr_var5 + 4;\n          ptr_var3 = ptr_var5 + 0xc;\n          if ((ptr_var2[7] == param9) && (ptr_var2[8] == param7)) {\n            (**(code **)(unaffected_r14[1] + 0x50))(*ptr_var2,ptr_var5);\n            (**(code **)(unaffected_r14[1] + 0x50))(0,ptr_var4);\n            (**(code **)(unaffected_r14[1] + 0x50))(ptr_var2[2],ptr_var5 + 8);\n            var13 = ptr_var2[6];\n            var10 = *ptr_var2;\n            ptr_var5 = (undefined *)ptr_var2[3];\n            ptr_var4 = ptr_var3;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr_var4 = *ptr_var5;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *ptr_var4 = 0;\n                ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr_var5 = ptr_var3 + var13;\n          }\n          else {\n            (**(code **)(unaffected_r14[1] + 0x50))();\n            if (*(int *)(unaffected_r14[1] + 8) == 5) {\n              char_var = (*(char *)(unaffected_r14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(unaffected_r14[1] + 0x50))(char_var,ptr_var4);\n            (**(code **)(unaffected_r14[1] + 0x50))(ptr_var2[2],ptr_var5 + 8);\n            var10 = *ptr_var2;\n            ptr_var5 = (undefined *)ptr_var2[3];\n            ptr_var4 = ptr_var3;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr_var4 = *ptr_var5;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = ptr_var2[6];\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *ptr_var4 = 0;\n                ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = unaffected_r14[1];\n            ptr_var3 = ptr_var3 + var13;\n            ptr_var5 = ptr_var3 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(unaffected_r14[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(ptr_var2[7],ptr_var3);\n              (**(code **)(unaffected_r14[1] + 0x38))(ptr_var2[8],ptr_var5);\n              ptr_var5 = ptr_var3 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(ptr_var2[7],ptr_var3);\n              (**(code **)(unaffected_r14[1] + 0x50))(ptr_var2[8],ptr_var3 + 4);\n            }\n            param9 = ptr_var2[7];\n            param7 = ptr_var2[8];\n          }\n        }\n      }\n      var13 = (long)ptr_var5 - (long)ptr;\n      var10 = var13;\n      ptr_var5 = ptr;\n      if (var13 < stack_var1) {\n        for (; stack_var1 = var13, var10 != 0; var10 = var10 - 1) {\n          *stack_var3 = *ptr_var5;\n          ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n          stack_var3 = stack_var3 + (ulong)byte_var * -2 + 1;\n        }\n      }\n      release_memory(ptr);\nLAB_001166f8:\n      release_memory(stack_var2);\n      return stack_var1;\n    }\n    if (((stack_var5 | param8) == 0) || (stack_var4 == 0)) {\n      if (stack_var5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = get_message(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      var11 = (**(code **)(unaffected_r14[1] + 0x28))(in_register_r11);\n      var9 = (**(code **)(unaffected_r14[1] + 0x28))(unaffected_r12[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (unaffected_r12[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        note_name = *unaffected_r12;\n        unaffected_r12[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        note_name = *unaffected_r12;\n        unaffected_r12[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        var11 = (**(code **)(unaffected_r14[1] + 0x40))(in_register_r11);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        var10 = process_gnu_build_attribute_notes_001086af();\n        return var10;\n      }\n    }\n    length = get_message(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaffected_r14,stack_var6,length);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_data_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_data_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "process_gnu_build_attribute_notes_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "process_gnu_build_attribute_notes_00116490",
                "__nmemb": "num_elements",
                "__ptr": "ptr",
                "_ptr": "pointer_var",
                "bVar21": "byte_var",
                "bVar4": "flag",
                "cVar16": "char_var",
                "compare_gnu_build_notes": "compare_notes",
                "dcgettext": "get_message",
                "free": "release_memory",
                "iVar22": "int_var2",
                "iVar6": "int_var",
                "in_R11": "in_register_r11",
                "in_RAX": "note_type",
                "in_stack_00000020": "stack_var1",
                "in_stack_00000028": "stack_var2",
                "in_stack_00000030": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "lVar7": "length",
                "memcmp": "compare",
                "non_fatal": "print_warning_message",
                "param_1": "arg1",
                "param_2": "note_type",
                "param_3": "note_name",
                "param_4": "param4",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "process_data_00116852": "process_data",
                "puVar14": "ptr_var2",
                "puVar15": "ptr_var3",
                "puVar17": "ptr_var4",
                "puVar18": "ptr_var5",
                "puVar19": "ptr_var6",
                "puVar20": "ptr_var7",
                "puVar5": "ptr_var",
                "qsort": "sort_list",
                "sort_gnu_build_notes": "sort_notes",
                "uVar1": "var1",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar5": "temp_result",
                "uVar8": "var8",
                "uVar9": "var9",
                "unaff_R12": "unaffected_r12",
                "unaff_R13": "unaffected_r13",
                "unaff_R14": "unaffected_r14",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "  : __ptr: ": {
                    "1": "dynamic_memory"
                },
                "  : bVar14: ": {
                    "1": "byte_var"
                },
                "  : cVar10: ": {
                    "1": "char_var"
                },
                "  : lVar7: ": {
                    "1": "loop_var"
                },
                "  : puVar9: ": {
                    "1": "dest_pointer"
                },
                "  : sVar1: ": {
                    "1": "current_array_size"
                },
                "  : unaff_R13: ": {
                    "1": "unaffected_array"
                },
                "FUN_00116852": {
                    "1": "reversed_build_notes",
                    "2": "process_binary_data",
                    "4": "process_data"
                },
                "__ptr": {
                    "1": "buffer",
                    "2": "allocated_memory"
                },
                "bVar14": {
                    "1": "temp_byte",
                    "2": "byte_flag",
                    "4": "flag",
                    "8": "byte_var"
                },
                "cVar10": {
                    "1": "temporary_character",
                    "5": "temp_char",
                    "6": "char_var"
                },
                "iVar3": {
                    "1": "comp_result",
                    "10": "comparison_result",
                    "2": "compare_result"
                },
                "in_R10": {
                    "1": "loop_index",
                    "15": "counter",
                    "2": "index"
                },
                "in_R11": {
                    "1": "loop_element",
                    "2": "note_type",
                    "5": "flag"
                },
                "in_R13": {
                    "1": "array_pointer"
                },
                "in_R14": {
                    "1": "note_end"
                },
                "in_R15": {
                    "1": "original_array_size"
                },
                "in_RBP": {
                    "1": "data_pointer"
                },
                "in_RBX": {
                    "1": "original_length"
                },
                "in_RCX": {
                    "1": "entries",
                    "2": "data_end",
                    "4": "input_array",
                    "6": "array_size"
                },
                "lVar7": {
                    "1": "temp_var_3",
                    "2": "loop_index",
                    "5": "loop_counter"
                },
                "param_10": {
                    "1": "parameter10",
                    "2": "param3",
                    "4": "output_size",
                    "5": "result",
                    "6": "param_10"
                },
                "param_11": {
                    "1": "input_data",
                    "2": "sorted_array",
                    "3": "param_11",
                    "4": "input_array"
                },
                "param_12": {
                    "1": "temp_memory",
                    "2": "param_12",
                    "3": "result_array",
                    "4": "output_array",
                    "7": "output_buffer"
                },
                "param_13": {
                    "1": "param_13_value",
                    "2": "param6",
                    "3": "context",
                    "7": "param_13"
                },
                "param_14": {
                    "1": "param14",
                    "2": "sort_array_size",
                    "3": "num_notes",
                    "4": "array_length",
                    "5": "param_14"
                },
                "param_7": {
                    "1": "some_param",
                    "10": "param_7",
                    "2": "param_7_value",
                    "4": "param7"
                },
                "param_9": {
                    "1": "param_9_size",
                    "10": "param_9",
                    "2": "param_9_value",
                    "4": "param9"
                },
                "pcVar2": {
                    "1": "callback_function",
                    "4": "function_ptr",
                    "7": "function_pointer"
                },
                "psVar13": {
                    "1": "ptr_array",
                    "2": "current_array_element"
                },
                "puVar11": {
                    "1": "pointer_var2",
                    "2": "ptr2",
                    "4": "temp_ptr2"
                },
                "puVar12": {
                    "1": "temp_memory3",
                    "2": "ptr3",
                    "3": "temp_ptr3"
                },
                "puVar13": {
                    "1": "pointer4"
                },
                "puVar9": {
                    "1": "dest_ptr",
                    "2": "ptr1",
                    "4": "temp_ptr1"
                },
                "sVar1": {
                    "1": "current_note_type",
                    "2": "temp_size",
                    "4": "array_element"
                },
                "uVar4": {
                    "1": "index",
                    "2": "temp_var",
                    "3": "increment",
                    "6": "counter"
                },
                "uVar5": {
                    "1": "temp_variable_1",
                    "2": "temp_var1",
                    "3": "temp_value1"
                },
                "uVar5 <= unaff_RBX": {
                    "1": "is_note_size_valid"
                },
                "uVar6": {
                    "1": "length_2",
                    "2": "temp_var2",
                    "3": "temp_value2"
                },
                "uVar8": {
                    "1": "record_length",
                    "2": "temp_var3"
                },
                "unaff_R1": {
                    "1": "comparison_result"
                },
                "unaff_R11": {
                    "1": "note_type"
                },
                "unaff_R13": {
                    "1": "end_array",
                    "2": "start",
                    "3": "array_pointer"
                },
                "unaff_R14": {
                    "1": "note_entries",
                    "2": "current_pointer"
                },
                "unaff_R14[2]": {
                    "1": "current_element_length"
                },
                "unaff_R14[3]": {
                    "1": "current_element_data"
                },
                "unaff_R14[7]": {
                    "1": "note_size"
                },
                "unaff_R14[8]": {
                    "1": "current_element_end"
                },
                "unaff_R15": {
                    "1": "temp1",
                    "2": "unaff_r15",
                    "4": "max_value"
                },
                "unaff_R15 <= (uVar5 + 0xf & 0xfffffffffffffff0)": {
                    "1": "is_note_size_aligned"
                },
                "unaff_RBP": {
                    "1": "current_item",
                    "2": "current"
                },
                "unaff_RBP[2]": {
                    "1": "matching_element_found"
                },
                "unaff_RBX": {
                    "1": "original_size",
                    "5": "min_value"
                },
                "unaff_RCX": {
                    "1": "array_pointer"
                }
            },
            "called": [
                "FUN_00116852",
                "FUN_001048f0",
                "FUN_00104140",
                "FUN_00104420",
                "FUN_0011a250",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong process_data_00116852(void)\n\n{\n  size_t array_element;\n  code *function_pointer;\n  int comparison_result;\n  uint counter;\n  undefined *malloc_pointer;\n  size_t *array_size;\n  ulong temp_value1;\n  ulong temp_value2;\n  long loop_counter;\n  ulong temp_var3;\n  size_t min_value;\n  size_t *current_element;\n  undefined *temp_ptr1;\n  char char_var;\n  undefined *temp_ptr2;\n  ulong counter;\n  undefined *temp_ptr3;\n  size_t flag;\n  size_t *array_pointer;\n  size_t *current_pointer;\n  size_t max_value;\n  size_t *current_array_element;\n  byte byte_var;\n  size_t param_7;\n  size_t param_9;\n  ulong param_10;\n  size_t *input_array;\n  undefined *output_buffer;\n  long param_13;\n  size_t param_14;\n  \n  byte_var = 0;\ncode_r0x00116852:\n  counter = (int)counter + 1;\n  if (0x10 < (int)counter) goto LAB_001167f5;\nLAB_00116863:\n  current_pointer = current_pointer + -9;\n  do {\n    if (array_pointer <= current_pointer) {\n      array_element = current_element_length;\n      if (array_element == 0) goto LAB_00116863;\n      temp_var3 = (ulong)counter;\n      if ((*current_pointer == *current_element) &&\n         (comparison_result = memcmp((void *)current_element_data,(void *)current_element[3],*current_element), comparison_result == 0)) {\n        temp_value2 = note_size;\n        temp_value1 = note_address;\n        counter = temp_var3 & 0xffffffff;\n        if (max_value == temp_value2) {\n          if (min_value != temp_value1) goto LAB_001167a6;\n          note_found_flag = 0;\n        }\n        else {\n          if (max_value < temp_value2) {\n            if (temp_value1 < max_value) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < temp_value1) || (max_value <= (temp_value1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_value < max_value) {\n              if ((0xfffffffffffffff0 < min_value) ||\n                 (temp_value2 <= (min_value + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_value == temp_value1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_value <= temp_value1) {\n              note_found_flag = 0;\n              goto LAB_001167f5;\n            }\n            if (temp_value1 < max_value) goto LAB_0010852c;\n          }\n          if ((flag == 0x101) != (array_element == 0x101)) goto code_r0x00116852;\n          if (temp_value1 <= min_value) {\n            temp_value1 = min_value;\n          }\n          if (temp_value2 < max_value) {\n            max_value = temp_value2;\n          }\n          note_address = temp_value1;\n          note_size = max_value;\n          note_found_flag = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_pointer = current_element;\n        current_element = current_pointer + 9;\n        if (array_size <= current_element) {\n          qsort(input_array,param_14,0x48,sort_gnu_build_notes);\n          malloc_pointer = (undefined *)xmalloc(param_10 * 2);\n          param_7 = 0;\n          temp_ptr3 = malloc_pointer;\n          for (current_array_element = input_array; current_array_element < array_size; current_array_element = current_array_element + 9) {\n            if (current_array_element[2] != 0) {\n              temp_ptr2 = temp_ptr3 + 4;\n              temp_ptr1 = temp_ptr3 + 0xc;\n              function_pointer = *(code **)(*(long *)(param_13 + 8) + 0x50);\n              if ((current_array_element[7] == param_9) && (current_array_element[8] == param_7)) {\n                (*function_pointer)(*current_array_element,temp_ptr3);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(0,temp_ptr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(current_array_element[2],temp_ptr3 + 8);\n                temp_value2 = current_array_element[6];\n                temp_var3 = *current_array_element;\n                temp_ptr3 = (undefined *)current_array_element[3];\n                temp_ptr2 = temp_ptr1;\n                for (temp_value1 = temp_var3; temp_value1 != 0; temp_value1 = temp_value1 - 1) {\n                  *temp_ptr2 = *temp_ptr3;\n                  temp_ptr3 = temp_ptr3 + (ulong)byte_var * -2 + 1;\n                  temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                }\n                if (temp_var3 < temp_value2) {\n                  for (loop_counter = temp_value2 - temp_var3; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_ptr2 = 0;\n                    temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                temp_ptr3 = temp_ptr1 + temp_value2;\n              }\n              else {\n                (*function_pointer)();\n                if (*(int *)(*(long *)(param_13 + 8) + 8) == 5) {\n                  char_var = (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  char_var = '\\b';\n                }\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(char_var,temp_ptr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(current_array_element[2],temp_ptr3 + 8);\n                temp_var3 = *current_array_element;\n                temp_ptr3 = (undefined *)current_array_element[3];\n                temp_ptr2 = temp_ptr1;\n                for (temp_value2 = temp_var3; temp_value2 != 0; temp_value2 = temp_value2 - 1) {\n                  *temp_ptr2 = *temp_ptr3;\n                  temp_ptr3 = temp_ptr3 + (ulong)byte_var * -2 + 1;\n                  temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                }\n                temp_value2 = current_array_element[6];\n                if (temp_var3 < temp_value2) {\n                  for (loop_counter = temp_value2 - temp_var3; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_ptr2 = 0;\n                    temp_ptr2 = temp_ptr2 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                loop_counter = *(long *)(param_13 + 8);\n                temp_ptr1 = temp_ptr1 + temp_value2;\n                temp_ptr3 = temp_ptr1 + 8;\n                if ((*(int *)(loop_counter + 8) == 5) &&\n                   (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_counter + 0x38))(current_array_element[7],temp_ptr1);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x38))(current_array_element[8],temp_ptr3);\n                  temp_ptr3 = temp_ptr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loop_counter + 0x50))(current_array_element[7],temp_ptr1);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x50))(current_array_element[8],temp_ptr1 + 4);\n                }\n                param_9 = current_array_element[7];\n                param_7 = current_array_element[8];\n              }\n            }\n          }\n          temp_value2 = (long)temp_ptr3 - (long)malloc_pointer;\n          temp_var3 = temp_value2;\n          temp_ptr3 = malloc_pointer;\n          if (temp_value2 < param_10) {\n            for (; param_10 = temp_value2, temp_var3 != 0; temp_var3 = temp_var3 - 1) {\n              *output_buffer = *temp_ptr3;\n              temp_ptr3 = temp_ptr3 + (ulong)byte_var * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n            }\n          }\n          free(malloc_pointer);\n          free(input_array);\n          return param_10;\n        }\n        flag = current_pointer[0xb];\n      } while (flag == 0);\n      max_value = current_pointer[0x10];\n      min_value = current_pointer[0x11];\n      counter = 0;\n      if (max_value != min_value) break;\n      current_pointer[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_data_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "__ptr": "malloc_pointer",
                "bVar14": "byte_var",
                "cVar10": "char_var",
                "iVar3": "comparison_result",
                "in_R10": "counter",
                "in_R11": "flag",
                "in_RCX": "array_size",
                "lVar7": "loop_counter",
                "param_11": "input_array",
                "param_12": "output_buffer",
                "pcVar2": "function_pointer",
                "psVar13": "current_array_element",
                "puVar11": "temp_ptr2",
                "puVar12": "temp_ptr3",
                "puVar9": "temp_ptr1",
                "sVar1": "array_element",
                "uVar4": "counter",
                "uVar5": "temp_value1",
                "uVar6": "temp_value2",
                "uVar8": "temp_var3",
                "unaff_R1": "comparison_result",
                "unaff_R13": "array_pointer",
                "unaff_R14": "current_pointer",
                "unaff_R14[2]": "current_element_length",
                "unaff_R14[3]": "current_element_data",
                "unaff_R14[7]": "note_size",
                "unaff_R14[8]": "note_address",
                "unaff_R15": "max_value",
                "unaff_RBP": "current_element",
                "unaff_RBP[2]": "note_found_flag",
                "unaff_RBX": "min_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116aa0": {
            "additional_data": {
                "FUNC_00116b90": {
                    "1": "execute_command",
                    "2": "process_data"
                },
                "FUN_00116aa0": {
                    "1": "start_main_wrapper",
                    "2": "start_main_process",
                    "4": "start_main",
                    "8": "start_main_loop"
                },
                "auStack_8": {
                    "1": "auxiliary_stack",
                    "3": "stack_frame",
                    "6": "stack"
                },
                "param_1": {
                    "1": "unused_param",
                    "12": "arg1",
                    "3": "entry_point",
                    "4": "argc",
                    "5": "param1"
                },
                "param_2": {
                    "1": "param_stack",
                    "12": "arg2",
                    "2": "command_line_args",
                    "4": "argv",
                    "5": "param2"
                },
                "processEntry": {
                    "1": "start_main_execution",
                    "2": "start_main",
                    "4": "start_main_loop"
                }
            },
            "called": [
                "FUN_00116b90",
                "FUN_00128040"
            ],
            "calling": [],
            "code": "\nvoid start_main_loop_00116aa0 start_main_loop_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "start_main_loop_00116aa0",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116aa0": "start_main_loop_00116aa0",
                "auStack_8": "stack",
                "param_1": "arg1",
                "param_2": "arg2",
                "processEntry": "start_main_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "FUN_00128070"
            ],
            "calling": [
                "FUN_00116b40"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "FUN_00128468"
            ],
            "calling": [
                "FUN_00116b80"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b40": {
            "additional_data": {
                "FUNC_00116ad0": {
                    "1": "clean_up_memory",
                    "11": "perform_cleanup",
                    "2": "execute_initialization",
                    "3": "cleanup",
                    "4": "cleanup_resources"
                },
                "FUN_00116b40": {
                    "1": "initialize_data",
                    "16": "initialize_program",
                    "2": "initialize_system",
                    "4": "initialize",
                    "6": "initialize_application"
                },
                "PTR_LOOP_00126468": {
                    "1": "loop_pointer"
                }
            },
            "called": [
                "FUN_00116ad0",
                "FUN_00104910"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00116b40(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  deregister_tm_clones();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_program_00116b40",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116b40": "initialize_program_00116b40"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116b80": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "current_name": "FUN_00116b80",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "FUN_00119970",
                "FUN_00113fe0",
                "FUN_00108898",
                "FUN_00104220",
                "FUN_00104280",
                "FUN_001044e0",
                "FUN_001041d0",
                "FUN_001040b0",
                "FUN_0011a390",
                "FUN_001046f0",
                "FUN_001043c0",
                "FUN_00104750",
                "FUN_001045d0",
                "FUN_00104240",
                "FUN_001041a0",
                "FUN_00114c20",
                "FUN_001284f8",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_001048b0",
                "FUN_001044c0",
                "FUN_0011a480",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_00108916",
                "FUN_00114cf0",
                "FUN_00113f50",
                "FUN_00104210",
                "FUN_001199d0",
                "FUN_00104660",
                "FUN_00114460",
                "FUN_001040d0",
                "FUN_00104720",
                "FUN_001046e0",
                "FUN_001054af",
                "FUN_001045c0",
                "FUN_00113f20",
                "FUN_001126c0",
                "FUN_00104760",
                "FUN_00104430",
                "FUN_00104610",
                "FUN_00108c86",
                "FUN_001044a0",
                "FUN_00114c80",
                "FUN_00104370",
                "FUN_00108a2a",
                "FUN_00119940",
                "FUN_00108800",
                "FUN_00114190",
                "FUN_00115970",
                "FUN_00104080",
                "FUN_00104510",
                "FUN_001042b0",
                "FUN_00104470",
                "FUN_00104790",
                "FUN_00114d60",
                "FUN_00104680",
                "FUN_001043d0",
                "FUN_001042d0",
                "FUN_00104640",
                "FUN_00104290",
                "FUN_001044f0",
                "FUN_00104710",
                "FUN_00104130",
                "FUN_001284f0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00104160",
                "FUN_001043b0",
                "FUN_00104150",
                "FUN_00108d9a",
                "FUN_001047a0",
                "FUN_00114690",
                "FUN_00104540",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00116aa0"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = create_symbol_htab();\n  DAT_00127a10 = create_symbol_htab();\n  DAT_00127a28 = create_symbol_htab();\n  DAT_00127a08 = create_symbol_htab();\n  DAT_00127a00 = create_symbol_htab();\n  DAT_001279f8 = create_symbol_htab();\n  DAT_001279f0 = create_symbol_htab();\n  DAT_001278f0 = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  DAT_001278e8 = create_symbol_htab();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = init_section_add(_optarg,DAT_001279e0,\"--add-section\");\n    section_add_load_file(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = parse_vma(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = init_section_add(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = parse_vma(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = parse_vma(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = init_section_add(_optarg,DAT_001279d8,\"--update-section\");\n    section_add_load_file(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "FUN_00119940": {
                    "1": "check_and_fatal_if_bad_number",
                    "2": "check_and_print_error_message",
                    "4": "check_and_fatal",
                    "6": "check_and_fatal_error"
                },
                "bfd_scan_vma": {
                    "1": "scan_vma"
                },
                "local_20": {
                    "1": "locales",
                    "12": "scan_result",
                    "2": "scanned_addresses",
                    "3": "buffer"
                },
                "local_20[0]": {
                    "1": "scan_result"
                },
                "param_1": {
                    "1": "param_address",
                    "3": "memory_address",
                    "4": "vma_address",
                    "6": "address",
                    "7": "input_value"
                },
                "param_2": {
                    "1": "error_message_param",
                    "14": "error_message",
                    "2": "bad_number",
                    "7": "message"
                },
                "uVar1": {
                    "1": "localized_error",
                    "2": "translated_error_message",
                    "4": "translated_message",
                    "7": "error_message"
                }
            },
            "called": [
                "FUN_00104920",
                "FUN_00104070"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid check_and_fatal_error_00119940(undefined8 input_value,undefined8 error_message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  scan_vma(input_value,scan_result,0);\n  if (*scan_result == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(error_message,error_message,input_value);\n}\n\n",
            "current_name": "check_and_fatal_error_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "check_and_fatal_error_00119940",
                "bfd_scan_vma": "scan_vma",
                "local_20": "scan_result",
                "local_20[0]": "scan_result",
                "param_1": "input_value",
                "param_2": "error_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "FUN_00119970": {
                    "15": "print_version_info",
                    "2": "print_program_info",
                    "4": "print_version_information",
                    "7": "print_binutils_info"
                },
                "dcgettext": {
                    "1": "get_localized_string"
                },
                "message1": {
                    "1": "message2"
                },
                "param_1": {
                    "1": "version_info",
                    "18": "version",
                    "3": "version_string",
                    "4": "program_name"
                },
                "pcVar1": {
                    "1": "copyright",
                    "2": "copyright_text",
                    "3": "copyright_message",
                    "7": "message"
                },
                "printf": {
                    "1": "print_formatted"
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_001042a0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_version_info_00119970(undefined8 version)\n\n{\n  char *message;\n  \n  print_formatted(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)get_localized_string(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  print_formatted(message);\n  message = (char *)get_localized_string(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  print_formatted(message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "dcgettext": "get_localized_string",
                "param_1": "version",
                "pcVar1": "message",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "ARCH_UNKNOWN": {
                    "1": "unknown_arch"
                },
                "DAT_001278e0": {
                    "1": "modified_directory"
                },
                "FUN_00104943": {
                    "1": "display_target_info"
                },
                "FUN_0011283f": {
                    "1": "try_find_dir"
                },
                "FUN_001199d0": {
                    "1": "print_bfd_header_info",
                    "2": "display_targets",
                    "3": "print_bfd_header_version"
                },
                "FUN_00119f70": {
                    "1": "print_arch_mach"
                },
                "STR_0011b4a1": {
                    "1": "padding_string"
                },
                "__errno_location": {
                    "1": "get_error_code"
                },
                "_stderr": {
                    "1": "stderr"
                },
                "_stdout": {
                    "1": "stdout_stream",
                    "2": "standard_output"
                },
                "abort": {
                    "1": "terminate"
                },
                "arch_length": {
                    "1": "arch_mach_length"
                },
                "close": {
                    "2": "close_file"
                },
                "dcgettext": {
                    "1": "get_header_message"
                },
                "do_display_target": {
                    "1": "print_target_information",
                    "4": "display_target"
                },
                "for_loop_variable": {
                    "1": "formatted_string_length"
                },
                "fprint": {
                    "1": "print_formatted"
                },
                "fprintf": {
                    "1": "print_error"
                },
                "fputc": {
                    "1": "print_character"
                },
                "fputs": {
                    "1": "print_string"
                },
                "free": {
                    "1": "free_memory"
                },
                "getenv": {
                    "2": "get_environment_variable"
                },
                "iVAR2": {
                    "1": "temp_file_descriptor"
                },
                "iVar1": {
                    "1": "max_column_number",
                    "2": "column_width",
                    "3": "max_columns",
                    "8": "columns"
                },
                "iVar10": {
                    "1": "length_iteration"
                },
                "iVar11": {
                    "1": "display_index"
                },
                "iVar2": {
                    "1": "counter",
                    "2": "arch_index",
                    "4": "target_index"
                },
                "iVar3": {
                    "1": "temp_file_descriptor_counter",
                    "2": "strcmp_result",
                    "4": "cmp_result",
                    "5": "comparison_result"
                },
                "iVar9": {
                    "1": "arch_machine_iteration",
                    "2": "target_iterator"
                },
                "lVar10": {
                    "1": "outer_loop_counter",
                    "2": "loop_index_1",
                    "3": "length"
                },
                "lVar11": {
                    "1": "start_index",
                    "2": "loop_index_2",
                    "3": "index"
                },
                "local70": {
                    "1": "temp_file_descriptor"
                },
                "local_70": {
                    "1": "loop_index",
                    "3": "counter"
                },
                "mkstemps": {
                    "1": "create_temporary_file"
                },
                "pData": {
                    "1": "formatted_string_length"
                },
                "pcVar12": {
                    "1": "arch_mach_name_array"
                },
                "pcVar4": {
                    "1": "header",
                    "2": "gettext_string",
                    "5": "header_format",
                    "7": "header_message"
                },
                "pcVar6": {
                    "1": "temp_path",
                    "2": "temporary_dir",
                    "6": "temp_file_path",
                    "9": "temp_dir"
                },
                "piVar8": {
                    "1": "errno",
                    "2": "error",
                    "3": "error_code",
                    "4": "errno_ptr",
                    "8": "error_number"
                },
                "ppcVar12": {
                    "1": "arch_info",
                    "10": "arch_mach_array",
                    "2": "arch_mach_ptr"
                },
                "printf": {
                    "1": "print",
                    "2": "print_formatted"
                },
                "sVar5": {
                    "1": "arch_length",
                    "13": "header_length",
                    "2": "length",
                    "4": "string_length"
                },
                "strcpy": {
                    "3": "copy_string"
                },
                "strerror": {
                    "1": "get_error_string"
                },
                "strlen": {
                    "1": "string_length"
                },
                "strtol": {
                    "1": "convert_to_long"
                },
                "try_dir_lto_priv_0": {
                    "1": "try_directory"
                },
                "uVar13": {
                    "1": "counter",
                    "10": "max_arch_length",
                    "2": "max_name_length",
                    "3": "max_string_length",
                    "4": "max_length",
                    "5": "max_arch_mach_length"
                },
                "uVar14": {
                    "1": "length2",
                    "2": "str_length",
                    "3": "string_length",
                    "6": "arch_length"
                },
                "uVar7": {
                    "1": "arch_machine",
                    "15": "result",
                    "2": "temp_result",
                    "3": "temp_path"
                },
                "unintialized_variable": {
                    "1": "formatted_string_length"
                },
                "unlink": {
                    "2": "delete_file"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_00104890",
                "FUN_00104030",
                "FUN_001040c0",
                "FUN_001042a0",
                "FUN_00104620",
                "FUN_001040b0",
                "FUN_00104943",
                "FUN_00104040",
                "FUN_0011283f",
                "FUN_00104100",
                "FUN_001043c0",
                "FUN_00119f70",
                "FUN_001048f0",
                "FUN_001045a0",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid print_bfd_header_version_001199d0(void)\n\n{\n  int columns;\n  int target_index;\n  int comparison_result;\n  char *header_message;\n  size_t header_length;\n  char *temp_dir;\n  undefined8 result;\n  int *error_number;\n  int arch_index;\n  long length;\n  long index;\n  char **arch_mach_array;\n  uint max_arch_length;\n  ulong arch_length;\n  int counter;\n  \n  header_message = (char *)get_header_message(0,\"BFD header file version %s\\n\",5);\n  print_formatted(header_message,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    header_message = get_environment_variable(\"TMPDIR\");\n    result = try_directory_lto_private(header_message,0);\n    header_message = get_environment_variable(\"TMP\");\n    result = try_directory_lto_private(header_message,result);\n    header_message = get_environment_variable(\"TEMP\");\n    result = try_directory_lto_private(header_message,result);\n    result = try_directory_lto_private(&DAT_0011b39a,result);\n    result = try_directory_lto_private(\"/var/tmp\",result);\n    header_message = (char *)try_directory_lto_private(&DAT_00120324,result);\n    if (header_message == (char *)0x0) {\n      header_message = \".\";\n    }\n    header_length = string_length(header_message);\n    temp_dir = (char *)allocate_memory((int)header_length + 2);\n    DAT_001278e0 = copy_string(temp_dir,header_message);\n    DAT_001278e0[header_length & 0xffffffff] = '/';\n    DAT_001278e0[(int)header_length + 1] = '\\0';\n  }\n  header_message = DAT_001278e0;\n  header_length = string_length(DAT_001278e0);\n  length = (long)(int)header_length;\n  temp_dir = (char *)allocate_memory(length + 9);\n  copy_string(temp_dir,header_message);\n  *(undefined2 *)(temp_dir + length) = 0x6363;\n  *(undefined4 *)(temp_dir + length + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_dir + length + 2) + 3) = 0x585858;\n  temp_dir[length + 8] = '\\0';\n  target_index = create_temporary_file(temp_dir,0);\n  if (target_index == -1) {\n    error_number = get_error_code();\n    temp_dir = get_error_string(*error_number);\n    print_error(error_output,\"Cannot create temporary file in %s: %s\\n\",header_message,temp_dir);\n                    \n    terminate_program();\n  }\n  target_index = close_file(target_index);\n  if (target_index != 0) {\n                    \n    terminate_program();\n  }\n  max_arch_length = 0;\n  target_index = 2;\n  bfd_iterate_over_targets(display_target);\n  delete_file(temp_dir);\n  free_memory(temp_dir);\n  counter = 0;\n  do {\n    header_message = (char *)bfd_printable_arch_mach(target_index);\n    header_length = string_length(header_message);\n    if ((int)max_arch_length < (int)(uint)header_length) {\n      max_arch_length = (uint)header_length;\n    }\n    target_index = target_index + 1;\n  } while (target_index != 0x57);\n  header_message = get_environment_variable(\"COLUMNS\");\n  target_index = counter;\n  if (header_message != (char *)0x0) {\n    length = convert_to_long(header_message,(char **)0x0,10);\n    columns = (int)length;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    counter = target_index;\n    if (-1 < counter) {\n      return;\n    }\n    index = (long)counter;\n    arch_index = (columns - max_arch_length) + -1;\n    length = index;\n    do {\n      target_index = (int)length;\n      if (-1 < target_index) break;\n      header_length = string_length(*(char **)(length * 0x60));\n      length = length + 1;\n      arch_index = (arch_index - (int)header_length) + -1;\n    } while (-1 < arch_index);\n    print_formatted(\"\\n%*s\",(ulong)(max_arch_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(index * 0x60);\n        ((ulong)(uint)(target_index - counter) + index) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      print_formatted(\"%s \",*arch_mach_array);\n    }\n    arch_index = 2;\n    putc(10,standard_output);\n    do {\n      header_message = (char *)bfd_printable_arch_mach(arch_index,0);\n      comparison_result = strcmp(header_message,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        result = bfd_printable_arch_mach(arch_index,0);\n        print_formatted(\"%*s \",(ulong)max_arch_length,result);\n        arch_mach_array = (char **)(index * 0x60);\n        comparison_result = counter;\n        while (target_index != comparison_result) {\n          if (*(char *)((long)arch_mach_array + (ulong)(arch_index - 2) + 8) == '\\0') {\n            header_length = string_length(*arch_mach_array);\n            for (arch_length = header_length & 0xffffffff; (int)arch_length != 0; arch_length = (ulong)((int)arch_length - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            print_string(*arch_mach_array,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (target_index != comparison_result) {\n            putc(0x20,standard_output);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        putc(10,standard_output);\n      }\n      arch_index = arch_index + 1;\n    } while (arch_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_bfd_header_version_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001199d0": "print_bfd_header_version_001199d0",
                "__errno_location": "get_error_code",
                "_stderr": "error_output",
                "_stdout": "standard_output",
                "abort": "terminate_program",
                "close": "close_file",
                "dcgettext": "get_header_message",
                "do_display_target": "display_target",
                "fprint": "print_formatted",
                "fprintf": "print_error",
                "fputs": "print_string",
                "free": "free_memory",
                "getenv": "get_environment_variable",
                "iVar1": "columns",
                "iVar2": "target_index",
                "iVar3": "comparison_result",
                "iVar9": "arch_index",
                "lVar10": "length",
                "lVar11": "index",
                "local_70": "counter",
                "mkstemps": "create_temporary_file",
                "pcVar12": "arch_mach_name_array",
                "pcVar4": "header_message",
                "pcVar6": "temp_dir",
                "piVar8": "error_number",
                "ppcVar12": "arch_mach_array",
                "printf": "print_formatted",
                "sVar5": "header_length",
                "strcpy": "copy_string",
                "strerror": "get_error_string",
                "strlen": "string_length",
                "strtol": "convert_to_long",
                "try_dir_lto_priv_0": "try_directory_lto_private",
                "uVar13": "max_arch_length",
                "uVar14": "arch_length",
                "uVar7": "result",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "<FUN_00119dd0>": {
                    "1": "<report_and_exit>"
                },
                "<in_AL>": {
                    "1": "<condition>"
                },
                "<local_18>": {
                    "1": "<arg8_copy>"
                },
                "<local_28>": {
                    "1": "<arg7_copy>"
                },
                "<local_38>": {
                    "1": "<arg6_copy>"
                },
                "<local_48>": {
                    "1": "<arg5_copy>"
                },
                "<local_58>": {
                    "1": "<arg4_copy>"
                },
                "<local_68>": {
                    "1": "<arg3_copy>"
                },
                "<local_78>": {
                    "1": "<arg2_copy>"
                },
                "<local_88>": {
                    "1": "<arg1_copy>"
                },
                "<local_90>": {
                    "1": "<local_param_14>"
                },
                "<local_98>": {
                    "1": "<local_param_13>"
                },
                "<local_a0>": {
                    "1": "<local_param_12>"
                },
                "<local_a8>": {
                    "1": "<local_param_11>"
                },
                "<local_b0>": {
                    "1": "<local_param_10>"
                },
                "<local_b8>": {
                    "1": "<local_buffer>"
                },
                "<local_c8>": {
                    "1": "<local_buffer_ptr>"
                },
                "<local_d0>": {
                    "1": "<buffer_ptr>"
                },
                "<local_d4>": {
                    "1": "<buffer_size>"
                },
                "<local_d8>": {
                    "1": "<char_count>"
                },
                "<param_10>": {
                    "1": "<param_10>"
                },
                "<param_11>": {
                    "1": "<param_11>"
                },
                "<param_12>": {
                    "1": "<param_12>"
                },
                "<param_13>": {
                    "1": "<param_13>"
                },
                "<param_14>": {
                    "1": "<param_14>"
                },
                "<param_1>": {
                    "1": "<arg1>"
                },
                "<param_2>": {
                    "1": "<arg2>"
                },
                "<param_3>": {
                    "1": "<arg3>"
                },
                "<param_4>": {
                    "1": "<arg4>"
                },
                "<param_5>": {
                    "1": "<arg5>"
                },
                "<param_6>": {
                    "1": "<arg6>"
                },
                "<param_7>": {
                    "1": "<arg7>"
                },
                "<param_8>": {
                    "1": "<arg8>"
                },
                "<param_9>": {
                    "1": "<param_9>"
                },
                "FUN_00119dd0": {
                    "1": "process_data",
                    "18": "report_and_exit",
                    "2": "execute_report_and_exit",
                    "3": "execute_function"
                },
                "FUN_00119e70": {
                    "1": "process_data",
                    "2": "process_report"
                },
                "in_AL": {
                    "1": "is_error",
                    "11": "flag",
                    "4": "input_flag",
                    "5": "condition"
                },
                "local_18": {
                    "1": "input_param_8",
                    "2": "arg8_copy",
                    "3": "input8_copy"
                },
                "local_28": {
                    "1": "value7",
                    "2": "arg7",
                    "3": "input7_copy"
                },
                "local_38": {
                    "1": "local_arg6",
                    "2": "arg6_copy",
                    "3": "input6_copy"
                },
                "local_48": {
                    "1": "var10",
                    "2": "local_param5",
                    "3": "input5_copy"
                },
                "local_58": {
                    "1": "local_length",
                    "2": "local_param4",
                    "3": "input4_copy"
                },
                "local_68": {
                    "1": "arg_3_copy",
                    "2": "local3",
                    "3": "input3_copy"
                },
                "local_78": {
                    "1": "var_l",
                    "2": "local2",
                    "3": "input2_copy"
                },
                "local_88": {
                    "1": "input_param1_copy",
                    "2": "local1",
                    "3": "input1_copy"
                },
                "local_90": {
                    "1": "var14",
                    "2": "report_param14_copy",
                    "3": "var5"
                },
                "local_98": {
                    "1": "var13",
                    "2": "report_param13_copy",
                    "3": "var4"
                },
                "local_a0": {
                    "1": "param_d",
                    "2": "param12",
                    "3": "var3"
                },
                "local_a8": {
                    "1": "local_param_b",
                    "2": "report_param11_copy",
                    "3": "var2"
                },
                "local_b0": {
                    "1": "var10",
                    "2": "param10_copy",
                    "3": "var1"
                },
                "local_b8": {
                    "1": "local_data_buffer",
                    "3": "temp_buffer",
                    "4": "buffer",
                    "7": "local_buffer",
                    "9": "local_array"
                },
                "local_c8": {
                    "1": "buffer_ptr",
                    "15": "local_buffer",
                    "2": "local_array_pointer",
                    "5": "buffer"
                },
                "local_d0": {
                    "1": "source",
                    "4": "stack_pointer",
                    "9": "buffer"
                },
                "local_d4": {
                    "1": "initial_value",
                    "2": "size",
                    "3": "buffer_size"
                },
                "local_d8": {
                    "1": "size1",
                    "10": "size",
                    "2": "length",
                    "3": "stack_size",
                    "9": "buffer_size"
                },
                "param_1": {
                    "1": "buffer",
                    "2": "input_param1",
                    "4": "report_param1",
                    "6": "input1"
                },
                "param_10": {
                    "1": "param_b",
                    "2": "param_10",
                    "3": "report_param10",
                    "6": "param10"
                },
                "param_11": {
                    "1": "param_b",
                    "2": "param_11",
                    "3": "report_param11",
                    "6": "param3"
                },
                "param_12": {
                    "1": "data4",
                    "2": "param_12",
                    "3": "report_param12",
                    "6": "param12"
                },
                "param_13": {
                    "1": "param_ptr5",
                    "2": "param_13",
                    "3": "report_param13",
                    "6": "param13"
                },
                "param_14": {
                    "1": "data6",
                    "2": "param_14",
                    "3": "report_param14",
                    "6": "param14"
                },
                "param_2": {
                    "1": "arg_2",
                    "2": "input_param2",
                    "4": "report_param2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "param_three",
                    "2": "input_param3",
                    "4": "report_param3",
                    "6": "input3"
                },
                "param_4": {
                    "1": "data4",
                    "2": "input_param4",
                    "4": "report_param4",
                    "6": "input4"
                },
                "param_5": {
                    "1": "param_five",
                    "2": "input_param5",
                    "4": "report_param5",
                    "6": "arg5"
                },
                "param_6": {
                    "1": "option6",
                    "2": "input_param6",
                    "4": "report_param6",
                    "6": "arg6"
                },
                "param_7": {
                    "1": "data7",
                    "2": "param7",
                    "4": "report_param7",
                    "6": "input7"
                },
                "param_8": {
                    "1": "arg_8",
                    "2": "input_param8",
                    "4": "report_param8",
                    "6": "input8"
                },
                "param_9": {
                    "1": "result1",
                    "2": "param_9",
                    "4": "report_param9",
                    "6": "param1"
                },
                "report": {
                    "1": "generate_report"
                },
                "xexit": {
                    "1": "exit_program"
                }
            },
            "called": [
                "FUN_00119e70",
                "FUN_00104760"
            ],
            "calling": [
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00104920",
                "FUN_00114dc7",
                "FUN_0010da0b",
                "FUN_0010543c",
                "FUN_0010827b",
                "FUN_001053b5",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00108d9a",
                "FUN_00114460",
                "FUN_00115b70",
                "FUN_00114690",
                "FUN_00104ad6",
                "FUN_0010554f"
            ],
            "code": "\nvoid report_and_exit_00119dd0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 param1,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 buffer_size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 var1;\n  undefined8 var2;\n  undefined8 var3;\n  undefined8 var4;\n  undefined8 var5;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = arg1;\n    input2_copy = arg2;\n    input3_copy = arg3;\n    input4_copy = arg4;\n    input5_copy = arg5;\n    input6_copy = arg6;\n    input7_copy = arg7;\n    input8_copy = arg8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_array;\n  buffer_size = 0x30;\n  var1 = param10;\n  var2 = param11;\n  var3 = param12;\n  var4 = param13;\n  var5 = param14;\n  generate_report(param1,&size);\n                    \n  exit_program(1);\n}\n\n",
            "current_name": "report_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "var5",
                "local_98": "var4",
                "local_a0": "var3",
                "local_a8": "var2",
                "local_b0": "var1",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_size",
                "local_d8": "size",
                "param_1": "arg1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "param1",
                "report": "generate_report",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "DAT_00127600": {
                    "1": "program_name"
                },
                "FUN_00119e70": {
                    "1": "print_formatted_message",
                    "29": "print_error_message"
                },
                "__gnuc_va_list": {
                    "1": "variadic_arguments",
                    "2": "variable_arguments"
                },
                "_stderr": {
                    "1": "standard_error_stream",
                    "18": "standard_error",
                    "2": "stderr"
                },
                "_stdout": {
                    "1": "standard_output_stream",
                    "17": "standard_output",
                    "2": "stdout"
                },
                "fflush": {
                    "2": "flush_standard_output"
                },
                "fprintf": {
                    "1": "print_formatted"
                },
                "param_1": {
                    "13": "message",
                    "2": "message_format",
                    "7": "format_string",
                    "9": "error_message"
                },
                "param_2": {
                    "1": "variable_arguments",
                    "13": "args",
                    "2": "arg_list"
                },
                "put": {
                    "1": "output_character"
                },
                "putc": {
                    "1": "write_char",
                    "2": "print_new_line",
                    "6": "write_character"
                },
                "putchar": {
                    "1": ""
                },
                "vfprintf": {
                    "1": "format_variable_arguments"
                }
            },
            "called": [
                "FUN_001045e0",
                "FUN_00104480",
                "FUN_00104770",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *message,variable_arguments arguments)\n\n{\n  flush_standard_output(standard_output);\n  print_error(standard_error,\"%s: \",DAT_00127600);\n  format_error_message(standard_error,message,arguments);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "variable_arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "fprintf": "print_error",
                "param_1": "message",
                "param_2": "arguments",
                "put": "output_character",
                "putc": "write_character",
                "vfprintf": "format_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119e70": {
                    "1": "process_data"
                },
                "FUN_00119ed0": {
                    "1": "process_report",
                    "2": "report_function",
                    "25": "report_data"
                },
                "in_AL": {
                    "1": "is_enabled",
                    "16": "flag",
                    "4": "condition"
                },
                "local_18": {
                    "1": "var_8",
                    "2": "data8_copy"
                },
                "local_28": {
                    "1": "temp_input_param7",
                    "2": "local_data7"
                },
                "local_38": {
                    "1": "temp_input_param6",
                    "2": "data6_copy"
                },
                "local_48": {
                    "1": "input5_copy",
                    "2": "local_data5"
                },
                "local_58": {
                    "1": "temp_input_param4",
                    "2": "data4_copy"
                },
                "local_68": {
                    "1": "report_data3",
                    "2": "local_data3"
                },
                "local_78": {
                    "1": "report_data2",
                    "2": "input_param2"
                },
                "local_88": {
                    "1": "result1",
                    "2": "local_data1"
                },
                "local_90": {
                    "1": "local_param5",
                    "2": "source_data5_copy",
                    "3": "local_param14",
                    "5": "param14"
                },
                "local_98": {
                    "1": "placeholder5",
                    "2": "param13_copy",
                    "3": "local_param13",
                    "5": "param13"
                },
                "local_a0": {
                    "1": "value12",
                    "2": "source_data3_copy",
                    "3": "local_param12",
                    "5": "param12"
                },
                "local_a8": {
                    "1": "ptr_data3",
                    "2": "report_param3",
                    "3": "local_param11",
                    "5": "param11"
                },
                "local_b0": {
                    "1": "temp_output_param2",
                    "2": "report_param2",
                    "3": "local_param10",
                    "5": "param10"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "11": "local_buffer",
                    "2": "buffer"
                },
                "local_c8": {
                    "1": "local_array2",
                    "5": "buffer",
                    "9": "local_buffer"
                },
                "local_d0": {
                    "1": "local_pointer",
                    "2": "buffer_pointer",
                    "3": "buffer_ptr",
                    "4": "stack_pointer"
                },
                "local_d4": {
                    "1": "local_variable1",
                    "2": "count"
                },
                "local_d8": {
                    "1": "size1",
                    "2": "local_size",
                    "5": "length",
                    "6": "buffer_size",
                    "7": "size"
                },
                "param_1": {
                    "1": "result1",
                    "2": "report_param1",
                    "3": "input_1",
                    "4": "data1",
                    "6": "input1"
                },
                "param_10": {
                    "1": "input_value_1",
                    "2": "source_data1",
                    "3": "report_param2",
                    "5": "param10"
                },
                "param_11": {
                    "1": "param_11_a8",
                    "2": "source_data2",
                    "3": "report_param3",
                    "5": "param_b"
                },
                "param_12": {
                    "1": "report_param_4",
                    "2": "data4",
                    "3": "report_param4",
                    "5": "param_c"
                },
                "param_13": {
                    "1": "data13",
                    "2": "source_data4",
                    "3": "report_param5",
                    "5": "param_d"
                },
                "param_14": {
                    "1": "value_5",
                    "2": "data6",
                    "3": "report_param6",
                    "5": "param14"
                },
                "param_2": {
                    "1": "sensor_id",
                    "2": "report_param2",
                    "3": "input_param2",
                    "4": "data2",
                    "6": "input2"
                },
                "param_3": {
                    "1": "report_param_3",
                    "2": "report_param3",
                    "3": "input_3",
                    "4": "data3",
                    "6": "input3"
                },
                "param_4": {
                    "1": "buffer_4",
                    "2": "report_param4",
                    "3": "input_4",
                    "4": "data4",
                    "6": "input4"
                },
                "param_5": {
                    "1": "value5",
                    "2": "report_param5",
                    "3": "arg5",
                    "4": "data5",
                    "6": "input5"
                },
                "param_6": {
                    "1": "buffer_6",
                    "2": "report_param6",
                    "3": "input_param6",
                    "4": "data6",
                    "6": "input6"
                },
                "param_7": {
                    "1": "value7",
                    "2": "report_param7",
                    "3": "input_7",
                    "4": "data7",
                    "6": "input7"
                },
                "param_8": {
                    "1": "data_param8",
                    "2": "report_param8",
                    "3": "input_8",
                    "4": "data8",
                    "6": "input8"
                },
                "param_9": {
                    "1": "input9",
                    "2": "report_param9",
                    "3": "report_param1",
                    "5": "data"
                },
                "undefined *local_c8": {
                    "1": "pointer2"
                },
                "undefined *local_d0": {
                    "1": "pointer1"
                },
                "undefined local_b8 [8]": {
                    "1": "buffer"
                },
                "undefined4 local_18": {
                    "1": "variable15"
                },
                "undefined4 local_28": {
                    "1": "variable14"
                },
                "undefined4 local_38": {
                    "1": "variable13"
                },
                "undefined4 local_48": {
                    "1": "variable12"
                },
                "undefined4 local_58": {
                    "1": "variable11"
                },
                "undefined4 local_68": {
                    "1": "variable10"
                },
                "undefined4 local_78": {
                    "1": "variable9"
                },
                "undefined4 local_88": {
                    "1": "variable8"
                },
                "undefined4 local_d4": {
                    "1": "variable2"
                },
                "undefined4 local_d8": {
                    "1": "variable1"
                },
                "undefined4 param_1": {
                    "1": "local_param1"
                },
                "undefined4 param_2": {
                    "1": "local_param2"
                },
                "undefined4 param_3": {
                    "1": "local_param3"
                },
                "undefined4 param_4": {
                    "1": "local_param4"
                },
                "undefined4 param_5": {
                    "1": "local_param5"
                },
                "undefined4 param_6": {
                    "1": "local_param6"
                },
                "undefined4 param_7": {
                    "1": "local_param7"
                },
                "undefined4 param_8": {
                    "1": "local_param8"
                },
                "undefined8 local_90": {
                    "1": "variable7"
                },
                "undefined8 local_98": {
                    "1": "variable6"
                },
                "undefined8 local_a0": {
                    "1": "variable5"
                },
                "undefined8 local_a8": {
                    "1": "variable4"
                },
                "undefined8 local_b0": {
                    "1": "variable3"
                },
                "undefined8 param_10": {
                    "1": "input_param2"
                },
                "undefined8 param_11": {
                    "1": "input_param3"
                },
                "undefined8 param_12": {
                    "1": "input_param4"
                },
                "undefined8 param_13": {
                    "1": "input_param5"
                },
                "undefined8 param_14": {
                    "1": "input_param6"
                },
                "undefined8 param_9": {
                    "1": "input_param1"
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_0010882c",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_00108200",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_00105828",
                "FUN_0011378f",
                "FUN_001152b6",
                "FUN_00113f50",
                "FUN_0010e2f0",
                "FUN_00107880",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104cc1",
                "FUN_0010e07c",
                "FUN_001086af",
                "FUN_00114690",
                "FUN_00104ad6",
                "FUN_0010554f"
            ],
            "code": "\nvoid report_data_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 count;\n  undefined *stack_pointer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input_param1;\n  undefined4 input_param2;\n  undefined4 input_param3;\n  undefined4 input_param4;\n  undefined4 input_param5;\n  undefined4 input_param6;\n  undefined4 input_param7;\n  undefined4 input_param8;\n  \n  if (flag != '\\0') {\n    input_param1 = input1;\n    input_param2 = input2;\n    input_param3 = input3;\n    input_param4 = input4;\n    input_param5 = input5;\n    input_param6 = input6;\n    input_param7 = input7;\n    input_param8 = input8;\n  }\n  stack_pointer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  count = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  report(data,&size);\n  return;\n}\n\n",
            "current_name": "report_data_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "in_AL": "flag",
                "local_18": "input_param8",
                "local_28": "input_param7",
                "local_38": "input_param6",
                "local_48": "input_param5",
                "local_58": "input_param4",
                "local_68": "input_param3",
                "local_78": "input_param2",
                "local_88": "input_param1",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "stack_pointer",
                "local_d4": "count",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_001053d5": {
                    "1": "fun1",
                    "2": "get_endian_string"
                },
                "FUN_00114e00": {
                    "1": "bfd_close_all_done",
                    "2": "nonfatal"
                },
                "FUN_00119f70": {
                    "1": "process_data",
                    "2": "print_bfd_info",
                    "3": "process_binary"
                },
                "FUN_0011a110": {
                    "1": "print_architecture",
                    "2": "bfd_openw"
                },
                "__format": {
                    "1": "printf_format_str",
                    "2": "print_format",
                    "24": "format_string"
                },
                "bfd_close_all_done": {
                    "1": "close_bfd_all_done",
                    "2": "close_output_file"
                },
                "bfd_get_error": {
                    "1": "get_error_code",
                    "3": "get_bfd_error"
                },
                "bfd_nonfatal": {
                    "1": "handle_error",
                    "3": "handle_nonfatal_error"
                },
                "bfd_openw": {
                    "1": "open_bfd_write",
                    "2": "open_output_file"
                },
                "bfd_printable_arch_mach": {
                    "1": "printable_arch_mach",
                    "2": "get_printable_arch_mach"
                },
                "bfd_set_format": {
                    "2": "set_bfd_format",
                    "3": "set_file_format"
                },
                "cVar2": {
                    "1": "error_check",
                    "2": "format_result",
                    "3": "result",
                    "4": "success_flag"
                },
                "dcgettext": {
                    "1": "get_text"
                },
                "endian_string": {
                    "1": "convert_endian"
                },
                "iVar3": {
                    "1": "iteration",
                    "2": "architecture_index",
                    "6": "counter",
                    "7": "index"
                },
                "lVar6": {
                    "1": "new_var1",
                    "2": "memory_size",
                    "3": "data_size",
                    "4": "allocated_size",
                    "6": "allocation_size",
                    "7": "buffer_size"
                },
                "lVar8": {
                    "1": "buffer",
                    "2": "realloc_addr",
                    "5": "allocated_memory"
                },
                "param_1": {
                    "1": "input_data",
                    "10": "header",
                    "14": "header_data",
                    "2": "header_info"
                },
                "param_2": {
                    "1": "file_params",
                    "2": "data",
                    "3": "file_data"
                },
                "printf": {
                    "2": "print_output"
                },
                "uVar1": {
                    "1": "header_length",
                    "2": "header_value",
                    "4": "header_format",
                    "5": "endian_header",
                    "6": "format"
                },
                "uVar4": {
                    "1": "formatted_endian_header",
                    "2": "header_endian_string",
                    "3": "endian_data",
                    "4": "endian_string_1",
                    "6": "endian_header"
                },
                "uVar5": {
                    "1": "endian_string_var2",
                    "2": "data_endian_string",
                    "3": "endian_format",
                    "4": "endian_string_2",
                    "6": "endian_string2",
                    "7": "endian_data"
                },
                "uVar7": {
                    "1": "binary_data",
                    "2": "header",
                    "3": "printable_arch",
                    "4": "header_value",
                    "6": "arch_mach"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001053d5",
                "FUN_00104360",
                "FUN_00104900",
                "FUN_0011a110",
                "FUN_001045a0",
                "FUN_00114e00",
                "FUN_00104690",
                "FUN_001042a0",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_00104500"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 process_binary_00119f70(undefined8 *header_data,undefined8 *binary_info)\n\n{\n  undefined4 format;\n  char success_flag;\n  int index;\n  undefined8 endian_string1;\n  undefined8 endian_data;\n  char *format_string;\n  long buffer_size;\n  undefined8 arch_mach;\n  long allocated_memory;\n  \n  index = *(int *)((long)binary_info + 0xc) + 1;\n  *(int *)((long)binary_info + 0xc) = index;\n  if ((ulong)binary_info[2] < (ulong)((long)index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < index) {\n      buffer_size = (long)index * 0xc0;\n    }\n    allocated_memory = xrealloc(binary_info[3]);\n    binary_info[3] = allocated_memory;\n    memset((void *)(allocated_memory + binary_info[2]),0,buffer_size - binary_info[2]);\n    binary_info[2] = buffer_size;\n  }\n  format = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binary_info + 0xc) * 0x60 + binary_info[3] + -0x60) = *header_data;\n  endian_string1 = convert_endian(format);\n  endian_data = convert_endian(*(undefined4 *)(header_data + 2));\n  arch_mach = *header_data;\n  format_string = (char *)get_translated_string(0,\"%s\\n (header %s, data %s)\\n\",5);\n  print_output(format_string,arch_mach,endian_data,endian_string1);\n  buffer_size = open_output_file(*binary_info,*header_data);\n  if (buffer_size == 0) {\n    handle_nonfatal_error(*binary_info);\n    *(undefined4 *)(binary_info + 1) = 1;\n  }\n  else {\n    index = 2;\n    success_flag = set_file_format(buffer_size,1);\n    if (success_flag == '\\0') {\n      index = get_bfd_error();\n      if (index != 5) {\n        handle_nonfatal_error(*header_data);\n        *(undefined4 *)(binary_info + 1) = 1;\n      }\n    }\n    else {\n      do {\n        success_flag = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,index,0);\n        if (success_flag != '\\0') {\n          arch_mach = get_printable_arch_mach(index,0);\n          print_output(\"  %s\\n\",arch_mach);\n          *(undefined *)\n           ((long)*(int *)((long)binary_info + 0xc) * 0x60 + binary_info[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    close_output_file(buffer_size);\n  }\n  return *(undefined4 *)(binary_info + 1);\n}\n\n",
            "current_name": "process_binary_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "process_binary_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "close_output_file",
                "bfd_get_error": "get_bfd_error",
                "bfd_nonfatal": "handle_nonfatal_error",
                "bfd_openw": "open_output_file",
                "bfd_printable_arch_mach": "get_printable_arch_mach",
                "bfd_set_format": "set_file_format",
                "cVar2": "success_flag",
                "dcgettext": "get_translated_string",
                "endian_string": "convert_endian",
                "iVar3": "index",
                "lVar6": "buffer_size",
                "lVar8": "allocated_memory",
                "param_1": "header_data",
                "param_2": "binary_info",
                "printf": "print_output",
                "uVar1": "format",
                "uVar4": "endian_string1",
                "uVar5": "endian_data",
                "uVar7": "arch_mach"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUN_001081e9": {
                    "1": "initialize_template"
                },
                "FUN_00114cf0": {
                    "1": "delete_directory",
                    "2": "remove_directory"
                },
                "FUN_0011a0e0": {
                    "1": "generate_temp_directory",
                    "27": "create_temp_directory",
                    "3": "create_temporary_directory"
                },
                "__template": {
                    "1": "directory_path",
                    "14": "template_path",
                    "2": "template_directory_path",
                    "3": "directory_template",
                    "5": "template"
                },
                "_template": {
                    "1": "template"
                },
                "free": {
                    "1": "free_memory",
                    "2": "free_temp_directory",
                    "3": "release_memory"
                },
                "mkdtemp": {
                    "1": "create_temp_directory_path",
                    "10": "make_temp_directory",
                    "2": "make_temporary_directory"
                },
                "pcVar1": {
                    "1": "temp_dir_result",
                    "12": "temp_directory_path",
                    "2": "temporary_directory_path",
                    "3": "temp_dir_path",
                    "5": "temp_directory"
                },
                "template_in_dir": {
                    "1": "get_template_path",
                    "2": "get_template_directory_path",
                    "3": "get_directory_template",
                    "9": "get_template_directory"
                }
            },
            "called": [
                "FUN_00104670",
                "FUN_001081e9",
                "FUN_00114cf0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temp_directory_path;\n  \n  template_path = (char *)get_template_directory();\n  temp_directory_path = make_temp_directory(template_path);\n  if (temp_directory_path == (char *)0x0) {\n    release_memory(template_path);\n  }\n  return temp_directory_path;\n}\n\n",
            "current_name": "create_temp_directory_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_path",
                "_template": "template",
                "free": "release_memory",
                "mkdtemp": "make_temp_directory",
                "pcVar1": "temp_directory_path",
                "template_in_dir": "get_template_directory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "FUN_0010871c": {
                    "1": "initialize"
                },
                "FUN_0011a110": {
                    "1": "print_bfd_error",
                    "24": "print_error_message",
                    "6": "print_error"
                },
                "_stderr": {
                    "1": "stderr",
                    "2": "standard_error"
                },
                "_stdout": {
                    "1": "stdout"
                },
                "iVar1": {
                    "1": "error_type",
                    "2": "bfd_error",
                    "21": "error",
                    "3": "error_code",
                    "4": "error_status"
                },
                "in_R10": {
                    "1": "unknown",
                    "2": "unknown_cause",
                    "5": "additional_info"
                },
                "param_1": {
                    "1": "filename",
                    "2": "error_code",
                    "3": "file_name",
                    "4": "error_description",
                    "8": "error_message",
                    "9": "error_type"
                },
                "stdout": {
                    "1": "standard_output"
                },
                "uVar2": {
                    "2": "error_message_text",
                    "21": "error_message",
                    "3": "error_string",
                    "5": "error_msg"
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001047a0",
                "FUN_0010871c"
            ],
            "calling": [
                "FUN_001053d5",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00119f70",
                "FUN_001083b7"
            ],
            "code": "\n\n\nvoid print_error_message_0011a110(long error_type)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_type != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00127600,error_type,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00127600,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_type",
                "stdout": "standard_output",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "FUN_0011a170": {
                    "1": "fnmatch_with_pattern",
                    "10": "pattern_match",
                    "2": "match_and_set_flag",
                    "9": "match_pattern"
                },
                "__pattern": {
                    "1": "pattern_string",
                    "2": "pattern_start",
                    "22": "current_pattern",
                    "5": "pattern"
                },
                "iVar1": {
                    "1": "fnmatch_result",
                    "11": "result",
                    "18": "match_result"
                },
                "param_1": {
                    "1": "pattern1",
                    "2": "pattern_ptr",
                    "28": "pattern"
                },
                "param_2": {
                    "1": "target_ptr",
                    "12": "string",
                    "2": "text",
                    "5": "input",
                    "7": "input_string"
                }
            },
            "called": [
                "FUN_00104340"
            ],
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nint pattern_match_0011a170(char **pattern,char **string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "pattern_match_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "CONCAT44": {
                    "1": "concatenate_44"
                },
                "FIND_MINIMUM_LENGTH": {
                    "1": "find_minimum_length"
                },
                "FUN_0011a1b0": {
                    "1": "compare_memory_ranges",
                    "2": "compare_and_return_result",
                    "4": "compare_memory_blocks"
                },
                "auVar5": {
                    "1": "output_result",
                    "12": "return_value",
                    "5": "output",
                    "7": "result"
                },
                "auVar5._0_8_": {
                    "1": "updated_result"
                },
                "auVar5._8_8_": {
                    "1": "updated_value_2"
                },
                "extraout_var": {
                    "1": "extra_out_var",
                    "2": "extra_result",
                    "4": "extra_var"
                },
                "iVar3": {
                    "18": "comparison_result",
                    "6": "result",
                    "7": "memcmp_result"
                },
                "memcmp": {
                    "1": "compare_memory"
                },
                "param_1": {
                    "1": "source_array",
                    "2": "data_1",
                    "3": "buffer1",
                    "4": "data1",
                    "5": "array1"
                },
                "param_2": {
                    "1": "input_array_2",
                    "2": "data_2",
                    "3": "buffer2",
                    "4": "block2",
                    "5": "array2"
                },
                "param_3": {
                    "1": "size_1",
                    "2": "length1",
                    "3": "size1",
                    "4": "param3",
                    "6": "param1"
                },
                "param_4": {
                    "1": "target_array_size",
                    "2": "length2",
                    "3": "size2",
                    "4": "param4",
                    "6": "param_4"
                },
                "uVar1": {
                    "1": "input1_value8",
                    "2": "block1_size",
                    "3": "size1"
                },
                "uVar2": {
                    "1": "array2_length",
                    "2": "block2_size",
                    "3": "buffer2_size"
                },
                "uVar4": {
                    "1": "concatenated_result",
                    "10": "combined_result",
                    "2": "comparison_result",
                    "3": "final_result",
                    "9": "result"
                },
                "ulong": {
                    "1": "unsigned_long"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [
                "FUN_00104420",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_memory_blocks_0011a1b0(unsigned_long *array1,unsigned_long *array2,undefined8 param_3,undefined8 param_4)\n\n{\n  unsigned_long buffer1_size;\n  unsigned_long buffer2_size;\n  int comparison_result;\n  undefined4 extra_var;\n  unsigned_long combined_result;\n  undefined return_value [16];\n  \n  combined_result = *array1;\n  if (*array2 <= *array1) {\n    combined_result = *array2;\n  }\n  comparison_result = compare_memory((void *)(array1[3] + 3),(void *)(array2[3] + 3),combined_result - 3);\n  combined_result = concatenate_44(extra_var,comparison_result);\n  if (comparison_result == 0) {\n    buffer1_size = array1[8];\n    if (buffer1_size < array2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      buffer2_size = array2[8];\n      if (buffer2_size < array1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (array2[7] <= array1[7]) {\n          if (buffer2_size < buffer1_size) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (buffer2_size <= buffer1_size) {\n              if (array1[2] == 0x100) {\n                combined_result = (unsigned_long)-(uint)(array2[2] != 0x100);\n              }\n              else {\n                combined_result = (unsigned_long)(array2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  updated_value_2 = param_4;\n  updated_result = combined_result;\n  return return_value;\n}\n\n",
            "current_name": "compare_memory_blocks_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_44",
                "FUN_0011a1b0": "compare_memory_blocks_0011a1b0",
                "auVar5": "return_value",
                "auVar5._0_8_": "updated_result",
                "auVar5._8_8_": "updated_value_2",
                "extraout_var": "extra_var",
                "iVar3": "comparison_result",
                "memcmp": "compare_memory",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "buffer1_size",
                "uVar2": "buffer2_size",
                "uVar4": "combined_result",
                "ulong": "unsigned_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "*(char *)(param_1[3] + 3)": {
                    "1": "record1_char",
                    "2": "char1"
                },
                "*(char *)(param_2[3] + 3)": {
                    "1": "record_b_field_3_byte_3_value",
                    "2": "char2"
                },
                "*param_1": {
                    "1": "record1_length"
                },
                "*param_1[3]": {
                    "1": "record_a_field_3_byte_3"
                },
                "*param_2": {
                    "1": "record2_length"
                },
                "*param_2[3]": {
                    "1": "record_b_field_3_byte_3"
                },
                "*record1": {
                    "1": "record1_value3"
                },
                "*record2": {
                    "1": "record2_value3"
                },
                "1": {
                    "1": "array1[0]"
                },
                "2": {
                    "1": "array1[1]"
                },
                "3": {
                    "1": "array1[2]"
                },
                "4": {
                    "1": "record_size"
                },
                "7": {
                    "1": "array1[6]"
                },
                "8": {
                    "1": "array1[7]"
                },
                "FUN_001087fd": {
                    "1": "get_current_time"
                },
                "FUN_0011a250": {
                    "1": "compare_parameters",
                    "2": "compare_ulong_arrays",
                    "24": "compare_records",
                    "3": "compare_params"
                },
                "char": {
                    "1": "record1_char"
                },
                "char_variable_0": {
                    "1": "record_1_char"
                },
                "char_variable_1": {
                    "1": "record_2_char"
                },
                "int": {
                    "1": "record_comparison"
                },
                "param_1": {
                    "1": "file1_params",
                    "2": "record_1",
                    "21": "record1",
                    "3": "array1"
                },
                "param_1[2]": {
                    "1": "record1_value_2",
                    "2": "record1_value2"
                },
                "param_1[3]": {
                    "1": "record1_fourth_element",
                    "2": "record1_field3",
                    "4": "record1_data"
                },
                "param_1[7]": {
                    "1": "first_param_value_7",
                    "2": "record1_value7",
                    "3": "record1_size"
                },
                "param_1[8]": {
                    "1": "first_param_value_8",
                    "2": "record1_field8",
                    "3": "record1_value2"
                },
                "param_2": {
                    "1": "record_b",
                    "2": "record_2",
                    "21": "record2",
                    "3": "array2"
                },
                "param_2[2]": {
                    "1": "record2_field2",
                    "2": "record2_value2"
                },
                "param_2[3]": {
                    "1": "record2_value3",
                    "2": "record2_field3",
                    "4": "record2_data"
                },
                "param_2[7]": {
                    "1": "record_b_field_7",
                    "2": "record2_field7",
                    "3": "record2_value1"
                },
                "param_2[8]": {
                    "1": "record2_data",
                    "2": "record2_value",
                    "3": "record2_value2"
                },
                "record1": {
                    "1": "record1"
                },
                "record1[2]": {
                    "1": "record1_val2",
                    "2": "record1_flag"
                },
                "record1[3]": {
                    "1": "record1_ptr"
                },
                "record1[7]": {
                    "1": "record1_size",
                    "2": "record1_field7",
                    "3": "record1_value1"
                },
                "record1[8]": {
                    "1": "record1_value",
                    "2": "record1_field8",
                    "3": "record1_value2"
                },
                "record2": {
                    "1": "record2"
                },
                "record2[2]": {
                    "1": "record2_date",
                    "2": "record2_field2"
                },
                "record2[3]": {
                    "1": "record2_data"
                },
                "record2[7]": {
                    "1": "record2_field7"
                },
                "record2[8]": {
                    "1": "record2_field8"
                },
                "record_1[2]": {
                    "1": "record_1_type"
                },
                "record_1[7]": {
                    "1": "record_1_size"
                },
                "record_1[8]": {
                    "1": "record_1_value"
                },
                "record_2[2]": {
                    "1": "record_2_type"
                },
                "record_2[7]": {
                    "1": "record_2_size"
                },
                "record_2[8]": {
                    "1": "record_2_value"
                },
                "return": {
                    "1": "comparison_result"
                },
                "uVar1": {
                    "1": "record1_third_element",
                    "2": "record1_type",
                    "3": "record1_flag",
                    "4": "record1_field2"
                },
                "undefined8": {
                    "1": "return_value"
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nrecord_comparison compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1_value2;\n  if (record1_field2 == record2_value2) {\n    if (record2_size <= record1_size) {\n      if (record1_size <= record2_size) {\n        if (record2_value2 < record1_value2) {\n          comparison_result -1;\n        }\n        if (record2_value2 <= record1_value2) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(record1_char *)(record1_data + 3) != *(record1_char *)(record2_data + 3)) {\n              comparison_result (record_comparison)*(record1_char *)(record1_data + 3) - (record_comparison)*(record1_char *)(record2_data + 3);\n            }\n          }\n          comparison_result 0;\n        }\n      }\n      comparison_result 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2_value2 != 0)))) {\n    comparison_result 1;\n  }\n  comparison_result -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "char": "record1_char",
                "int": "record_comparison",
                "param_1": "record1",
                "param_1[2]": "record1_value2",
                "param_1[3]": "record1_data",
                "param_1[7]": "record1_size",
                "param_1[8]": "record1_value2",
                "param_2": "record2",
                "param_2[2]": "record2_value2",
                "param_2[3]": "record2_data",
                "param_2[7]": "record2_size",
                "param_2[8]": "record2_value2",
                "return": "comparison_result",
                "uVar1": "record1_field2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "FUN_0011a2e0": {
                    "1": "copy_section_data",
                    "2": "extract_section_from_binary",
                    "3": "update_section_info",
                    "6": "extract_section_data"
                },
                "PTR_FUN_00108808": {
                    "1": "initialize_section_subfunction"
                },
                "bfd_get_section_by_name": {
                    "1": "get_section_by_name"
                },
                "dcgettext": {
                    "1": "get_error_message"
                },
                "fatal": {
                    "2": "handle_fatal_error"
                },
                "lVar3": {
                    "1": "extracted_data",
                    "2": "new_section",
                    "3": "section_info",
                    "4": "section_ptr",
                    "8": "section_data"
                },
                "lVar4": {
                    "1": "section_id",
                    "2": "section_index",
                    "3": "section_address",
                    "7": "section_ptr",
                    "8": "section_name"
                },
                "lVar5": {
                    "1": "section_name"
                },
                "param_1": {
                    "1": "input_data",
                    "2": "binary_data",
                    "3": "source_section",
                    "5": "section_info",
                    "6": "source_data"
                },
                "param_2": {
                    "1": "param_binary_handle",
                    "2": "binary_info",
                    "3": "binary_address",
                    "4": "binary_file",
                    "6": "binary_data",
                    "7": "binary"
                },
                "uVar1": {
                    "1": "section_data_size",
                    "2": "section_data",
                    "4": "section_address"
                },
                "uVar2": {
                    "1": "section_not_found_errmsg",
                    "2": "section_error_message",
                    "3": "section_not_found_message",
                    "5": "error_message"
                }
            },
            "called": [
                "FUN_00108808",
                "FUN_00104400"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_data_0011a2e0(long source_data,long binary)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long section_data;\n  long section_name;\n  \n  section_data = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_name = *(long *)(source_data + 0x20);\n  *(undefined8 *)(section_data + 8) = *(undefined8 *)(source_data + 8);\n  *(undefined8 *)(section_data + 0x10) = *(undefined8 *)(source_data + 0x10);\n  *(undefined4 *)(section_data + 0x18) = *(undefined4 *)(source_data + 0x18);\n  if (section_name == 0) {\n    section_name = 0x128598;\n  }\n  else {\n    section_name = get_section_by_name(binary);\n    if (section_name == 0) {\n      section_address = *(undefined8 *)(source_data + 0x20);\n      error_message = get_error_string(0,\"Section %s not found\",5);\n                    \n      handle_fatal_error(error_message,section_address);\n    }\n  }\n  *(long *)(section_data + 0x20) = section_name;\n  return section_data;\n}\n\n",
            "current_name": "extract_section_data_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_data_0011a2e0",
                "bfd_get_section_by_name": "get_section_by_name",
                "dcgettext": "get_error_string",
                "fatal": "handle_fatal_error",
                "lVar3": "section_data",
                "lVar4": "section_name",
                "param_1": "source_data",
                "param_2": "binary",
                "uVar1": "section_address",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "FUN_0011a350": {
                    "1": "set_time_of_file",
                    "2": "set_file_timestamps",
                    "23": "set_file_time",
                    "4": "set_file_timestamp"
                },
                "iVar1": {
                    "1": "status",
                    "29": "result"
                },
                "local_28": {
                    "1": "inode_time",
                    "4": "backup_time"
                },
                "local_38": {
                    "1": "timespec_buffer",
                    "13": "access_time",
                    "2": "access_time_sec",
                    "3": "modification_time"
                },
                "local_48": {
                    "1": "temp5"
                },
                "param_1": {
                    "1": "path",
                    "2": "file_name",
                    "24": "file_path"
                },
                "param_2": {
                    "1": "metadata",
                    "2": "file_metadata",
                    "21": "file_info",
                    "5": "file_info_ptr"
                },
                "pcVar3": {
                    "1": "error_message_ptr",
                    "11": "error_message",
                    "2": "err_msg",
                    "6": "error_msg",
                    "8": "error_string"
                },
                "piVar2": {
                    "1": "error_info",
                    "10": "errno_ptr",
                    "2": "error_code",
                    "3": "error_ptr"
                },
                "uStack_1c": {
                    "1": "backup_create_time_stamp"
                },
                "uStack_20": {
                    "1": "time_stamp3"
                },
                "uStack_24": {
                    "1": "inode"
                },
                "uStack_2c": {
                    "1": "stack_variable3",
                    "2": "modification_time_nsec",
                    "3": "creation_time",
                    "4": "create_time"
                },
                "uStack_30": {
                    "1": "creation_time",
                    "12": "change_time",
                    "2": "modification_time_sec"
                },
                "uStack_34": {
                    "1": "timestamp_5",
                    "2": "access_time_nsec",
                    "6": "mod_time"
                },
                "uVar4": {
                    "1": "translated_error_msg",
                    "2": "translated_message",
                    "3": "localized_error_msg",
                    "5": "localized_error_message"
                }
            },
            "called": [
                "FUN_0010882c",
                "FUN_00104060"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "code": "\nvoid set_file_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 localized_error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 create_time;\n  undefined4 backup_time;\n  undefined4 backup_modification_time;\n  undefined4 backup_change_time;\n  undefined4 backup_create_time_stamp;\n  \n  backup_time = *(undefined4 *)(file_info + 0x58);\n  backup_modification_time = *(undefined4 *)(file_info + 0x5c);\n  backup_change_time = *(undefined4 *)(file_info + 0x60);\n  backup_create_time_stamp = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  create_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    localized_error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(localized_error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "iVar1": "result",
                "local_28": "backup_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "uStack_1c": "backup_create_time_stamp",
                "uStack_20": "backup_change_time",
                "uStack_24": "backup_modification_time",
                "uStack_2c": "create_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "localized_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "*plVar4": {
                    "1": "next_function_pointer"
                },
                "FUN_0011a390": {
                    "1": "execute_function_list",
                    "10": "execute_functions",
                    "3": "execute_callbacks",
                    "4": "execute_function_chain"
                },
                "code": {
                    "1": "function"
                },
                "lVar1": {
                    "1": "counter1",
                    "14": "index",
                    "7": "current_index"
                },
                "lVar2": {
                    "1": "temp_count",
                    "10": "previous_index",
                    "8": "prev_index"
                },
                "lVar3": {
                    "1": "temp_count2",
                    "12": "temp_index",
                    "2": "temp_index2",
                    "6": "current_index"
                },
                "plVar4": {
                    "1": "callback_list_ptr",
                    "2": "function_pointer_list",
                    "3": "function_chain",
                    "4": "function_pointers",
                    "7": "function_list"
                },
                "uVar5": {
                    "1": "function_index",
                    "2": "counter",
                    "3": "iteration_count",
                    "4": "index",
                    "5": "count"
                },
                "void": {
                    "1": "void"
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_functions_0011a390(void)\n\n{\n  long index;\n  long previous_index;\n  long temp_index;\n  long *function_list;\n  uint count;\n  \n  function_list = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(function *)function_list[index + 2])();\n        previous_index = index + -1;\n        if (-1 < (int)previous_index) {\n          temp_index = previous_index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(function *)function_list[index + 1])();\n                        previous_index = index + -2;\n                      }\n                      (*(function *)function_list[previous_index + 2])();\n                      previous_index = previous_index + -1;\n                    }\n                    (*(function *)function_list[previous_index + 2])();\n                    previous_index = previous_index + -1;\n                  }\n                  (*(function *)function_list[previous_index + 2])();\n                  previous_index = previous_index + -1;\n                }\n                (*(function *)function_list[previous_index + 2])();\n                previous_index = previous_index + -1;\n              }\n              (*(function *)function_list[previous_index + 2])();\n              previous_index = previous_index + -1;\n            }\n            (*(function *)function_list[previous_index + 2])();\n            temp_index = previous_index + -1;\n            if ((int)(previous_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(function *)function_list[temp_index + 2])();\n            index = temp_index + -1;\n            (*(function *)function_list[temp_index + 1])();\n            (*(function *)function_list[temp_index])();\n            (*(function *)function_list[index])();\n            (*(function *)function_list[temp_index + -2])();\n            (*(function *)function_list[temp_index + -3])();\n            (*(function *)function_list[temp_index + -4])();\n            (*(function *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "code": "function",
                "lVar1": "index",
                "lVar2": "previous_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "1": "copy_string_to_dynamic_memory",
                    "19": "copy_string",
                    "2": "copy_and_null_terminate_string",
                    "4": "copy_string_with_null_terminator"
                },
                "__dest": {
                    "1": "destination_memory",
                    "15": "destination_string",
                    "3": "new_string",
                    "4": "destination",
                    "8": "copied_string"
                },
                "__n": {
                    "1": "length",
                    "2": "str_length",
                    "23": "string_length",
                    "4": "source_length"
                },
                "param_1": {
                    "19": "source_string",
                    "4": "source",
                    "8": "input_string"
                },
                "param_2": {
                    "1": "source_length",
                    "26": "max_length"
                }
            },
            "called": [
                "FUN_00104540",
                "FUN_00104390",
                "FUN_00104380"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_0011a480(char *source_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *destination_string;\n  \n  string_length = strnlen(source_string,max_length);\n  destination_string = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)destination_string + string_length) = 0;\n  memcpy(destination_string,source_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "__dest": "destination_string",
                "__n": "string_length",
                "param_1": "source_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a4b4": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0011a4b4",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104000",
            "FUN_00104020",
            "FUN_00104920",
            "FUN_00104943",
            "FUN_00104966",
            "FUN_00104a35",
            "FUN_00104ad6",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104d1c",
            "FUN_001052a2",
            "FUN_001053b5",
            "FUN_001053d5",
            "FUN_0010540e",
            "FUN_0010543c",
            "FUN_001054af",
            "FUN_0010554f",
            "FUN_00105828",
            "FUN_0010808f",
            "FUN_001081e9",
            "FUN_00108200",
            "FUN_00108237",
            "FUN_0010827b",
            "FUN_001082b3",
            "FUN_001082c3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083b7",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108b3e",
            "FUN_00108c86",
            "FUN_00108d9a",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_00109a0b",
            "FUN_00109a32",
            "FUN_00109ab1",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_00109cf4",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109e76",
            "FUN_00109ed3",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a424",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a83e",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010ab4d",
            "FUN_0010abdd",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010ae0e",
            "FUN_0010afd5",
            "FUN_0010b6ea",
            "FUN_0010b800",
            "FUN_0010b948",
            "FUN_0010ba08",
            "FUN_0010bb52",
            "FUN_0010bba1",
            "FUN_0010bbd3",
            "FUN_0010bc80",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0010c05d",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c218",
            "FUN_0010c2d2",
            "FUN_0010c6be",
            "FUN_0010c7a0",
            "FUN_0010c892",
            "FUN_0010d21c",
            "FUN_0010d559",
            "FUN_0010d7d4",
            "FUN_0010d882",
            "FUN_0010da0b",
            "FUN_0010e07c",
            "FUN_0010e2f0",
            "FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112502",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_001126c0",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_00112996",
            "FUN_001129f4",
            "FUN_00112a33",
            "FUN_001135a5",
            "FUN_0011378f",
            "FUN_00113b1e",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113e5e",
            "FUN_00113ede",
            "FUN_00113f20",
            "FUN_00113f50",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114190",
            "FUN_00114b84",
            "FUN_00114c20",
            "FUN_00114c80",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_001159d0",
            "FUN_00115a90",
            "FUN_00115d00",
            "FUN_00115d70",
            "FUN_00115dc0",
            "FUN_00115f30",
            "FUN_00115f50",
            "FUN_00116030",
            "FUN_00116852",
            "FUN_00116aa0",
            "FUN_00116b40",
            "FUN_00119940",
            "FUN_00119970",
            "FUN_001199d0",
            "FUN_00119dd0",
            "FUN_00119e70",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a2e0",
            "FUN_0011a350",
            "FUN_0011a390",
            "FUN_0011a480"
        ],
        [
            "FUN_00104cc1",
            "FUN_00104d25",
            "FUN_00104ea2",
            "FUN_0010551d",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00116110"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_0010b0fa",
            "FUN_0010c95e",
            "FUN_0010dac0",
            "FUN_00112b6e",
            "FUN_00112c1f",
            "FUN_00113a4d"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1260404
}