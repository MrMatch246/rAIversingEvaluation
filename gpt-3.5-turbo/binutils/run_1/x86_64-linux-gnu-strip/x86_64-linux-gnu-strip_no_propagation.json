{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_memory_with_param_00113dfe",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "lVar1": "result"
            },
            "code": "\nvoid updateMemoryWithParam_00113dfe(undefined4 dataPointer,undefined newValue)\n\n{\n  long result;\n  \n  result = FUN_00112904(3,dataPointer);\n  if (result != 0) {\n    *(undefined *)(result + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "update_memory_with_param_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_to_ptr_0010ab4d",
                "param_1": "sourceAddress",
                "param_2": "stringToAppend",
                "param_3": "placeholder1",
                "param_4": "placeholder2",
                "uVar1": "sourcePointer",
                "lVar2": "tempVariable",
                "auVar3": "returnValue",
                "sVar4": "stringLength1",
                "pcVar5": "destinationPointer",
                "sVar6": "stringLength2",
                "auVar7": "returnValue2"
            },
            "code": "\nundefined  [16] appendStringToPtr_0010ab4d(long sourceAddress,char *stringToAppend,undefined8 placeholder1,undefined8 placeholder2)\n\n{\n  ulong sourcePointer;\n  long tempVariable;\n  undefined returnValue [16];\n  size_t stringLength1;\n  char *destinationPointer;\n  size_t stringLength2;\n  undefined returnValue2 [16];\n  \n  sourcePointer = *(ulong *)(sourceAddress + 0x60);\n  if ((sourcePointer != 0) && (*(long *)(sourcePointer + 0x20) != 0)) {\n    destinationPointer = *(char **)(sourcePointer + 0x30);\n    stringLength1 = strlen(stringToAppend);\n    if (destinationPointer == (char *)0x0) {\n      destinationPointer = (char *)xmalloc(stringLength1 + 3);\n      *destinationPointer = '\\0';\n    }\n    else {\n      stringLength2 = strlen(destinationPointer);\n      destinationPointer = (char *)xrealloc(destinationPointer,stringLength1 + 4 + stringLength2);\n    }\n    stringLength1 = strlen(destinationPointer);\n    sprintf(destinationPointer + stringLength1,\"%s::\",stringToAppend);\n    tempVariable = *(long *)(sourceAddress + 0x60);\n    *(char **)(tempVariable + 0x30) = destinationPointer;\n    returnValue2._1_7_ = (undefined7)((ulong)tempVariable >> 8);\n    returnValue2[0] = 1;\n    returnValue2._8_8_ = placeholder2;\n    return returnValue2;\n  }\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = sourcePointer;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "xrealloc",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_string_to_ptr_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "update_current_file_0010c218",
                "param_1": "fileInfo",
                "param_2": "type",
                "param_3": "name",
                "uVar1": "errorString",
                "lVar2": "newPointer",
                "pauVar3": "dynamicArray",
                "lVar4": "offset"
            },
            "code": "\n\n\nlong updateCurrentFile_0010c218(long fileInfo,long type,long name)\n\n{\n  undefined8 errorString;\n  long newPointer;\n  undefined (*dynamicArray) [16];\n  long offset;\n  \n  if ((type != 0) && (name != 0)) {\n    if ((*(long *)(fileInfo + 8) == 0) || (*(long *)(fileInfo + 0x10) == 0)) {\n      errorString = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorString);\n    }\n    else {\n      newPointer = FUN_00112904(0x16,0);\n      if (newPointer != 0) {\n        dynamicArray = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(fileInfo + 0x10);\n        *dynamicArray = ZEXT816(0);\n        *(long *)(*dynamicArray + 8) = name;\n        *(undefined (**) [16])(newPointer + 0x10) = dynamicArray;\n        offset = FUN_00112925(offset + 0x10,type,0,3);\n        if (offset != 0) {\n          *(long *)(offset + 0x20) = newPointer;\n          *(long *)*dynamicArray = offset;\n          return newPointer;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "update_current_file_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = FUN_00113f20();\n  DAT_00127a10 = FUN_00113f20();\n  DAT_00127a28 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_00127a00 = FUN_00113f20();\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278e8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = FUN_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    FUN_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = FUN_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = FUN_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    FUN_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "htab_find_slot",
                "FUN_00113f50",
                "getopt_long",
                "FUN_0011a390",
                "FUN_00108c86",
                "mkstemp",
                "FUN_00108d9a",
                "strncasecmp",
                "fseek",
                "FUN_00114460",
                "ftell",
                "strcmp",
                "FUN_00108898",
                "FUN_00119dd0",
                "dup",
                "FUN_00108a2a",
                "FUN_00114c20",
                "getc",
                "FUN_00114190",
                "xmalloc",
                "unlink_if_ordinary",
                "htab_create_alloc",
                "xrealloc",
                "strtol",
                "bfd_errmsg",
                "textdomain",
                "fopen",
                "strlen",
                "strcpy",
                "FUN_00114cf0",
                "bfd_scan_arch",
                "close",
                "FUN_0011a480",
                "FUN_00114690",
                "FUN_00113fe0",
                "memcpy",
                "free",
                "dcgettext",
                "FUN_00113fb0",
                "FUN_00119940",
                "xstrdup",
                "filename_cmp",
                "xcalloc",
                "strerror",
                "FUN_001126c0",
                "bfd_init",
                "FUN_001054af",
                "fread",
                "FUN_00108800",
                "fprintf",
                "FUN_00119970",
                "bfd_set_default_target",
                "strncpy",
                "bfd_get_error",
                "htab_elements",
                "FUN_001199d0",
                "FUN_00114d60",
                "strcasecmp",
                "FUN_00108916",
                "bfd_set_error_program_name",
                "malloc",
                "stat",
                "strchr",
                "FUN_00119ed0",
                "FUN_00115970",
                "strtoul",
                "FUN_00114c80",
                "memmove",
                "ferror",
                "free",
                "__errno_location",
                "fclose",
                "setlocale",
                "bindtextdomain",
                "xmalloc_set_program_name",
                "FUN_00113f20",
                "xexit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "debug_start_block_0010be88",
                "param_1": "block_info",
                "param_2": "start_block",
                "param_3": "unknown_param_3",
                "param_4": "unknown_param_4",
                "puVar1": "ptr1",
                "uVar2": "result",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "lVar5": "length",
                "puVar6": "ptr6",
                "puVar7": "ptr7",
                "bVar8": "byte_val",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_start_block_0010be88(long block_info,undefined8 start_block,undefined8 unknown_param_3,undefined8 unknown_param_4)\n\n{\n  undefined8 *ptr1;\n  undefined8 result;\n  undefined4 *ptr3;\n  undefined8 *ptr4;\n  long length;\n  undefined8 *ptr6;\n  undefined4 *ptr7;\n  byte byte_val;\n  undefined return_value [16];\n  \n  byte_val = 0;\n  if ((*(long *)(block_info + 8) == 0) || (*(long *)(block_info + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block_0010be88: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    ptr3 = (undefined4 *)xmalloc(0x30);\n    ptr7 = ptr3;\n    for (length = 0xc; length != 0; length = length + -1) {\n      *ptr7 = 0;\n      ptr7 = ptr7 + (ulong)byte_val * -2 + 1;\n    }\n    length = *(long *)(block_info + 0x20);\n    *(undefined8 *)(ptr3 + 6) = start_block;\n    *(undefined8 *)(ptr3 + 8) = 0xffffffffffffffff;\n    *(long *)(ptr3 + 2) = length;\n    ptr1 = *(undefined8 **)(length + 0x10);\n    ptr6 = (undefined8 *)(length + 0x10);\n    while (ptr4 = ptr1, ptr4 != (undefined8 *)0x0) {\n      ptr6 = ptr4;\n      ptr1 = (undefined8 *)*ptr4;\n    }\n    *ptr6 = ptr3;\n    result = 1;\n    *(undefined4 **)(block_info + 0x20) = ptr3;\n  }\n  return_value._8_8_ = unknown_param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010e6a8",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "format_and_generate_output_0010ba08",
                "param_1": "inputParams",
                "param_2": "fieldName",
                "param_3": "paramValue",
                "param_4": "structSize",
                "param_5": "flag",
                "cVar1": "charValue",
                "iVar2": "intValue",
                "lVar3": "longValue",
                "__s": "errorMessage",
                "sVar4": "inputStrLen",
                "sVar5": "fieldNameLen",
                "sVar6": "errorMsgLen",
                "__s_00": "outputStr",
                "uVar7": "msgTemplate",
                "uVar8": "returnValue",
                "pcVar9": "flagStr",
                "xmalloc": "dynamicMemoryAllocation",
                "dcgettext": "getTranslatedText",
                "sprintf": "formatString",
                "free": "releaseMemory",
                "abort": "terminateWithAbort",
                "strlen": "getStringLength",
                "CONCAT71": "concatenate"
            },
            "code": "\nundefined8\nformatAndGenerateOutput_0010ba08(undefined8 *inputParams,char *fieldName,undefined8 paramValue,ulong structSize,int flag)\n\n{\n  char charValue;\n  int intValue;\n  long longValue;\n  char *errorMessage;\n  size_t inputStrLen;\n  size_t fieldNameLen;\n  size_t errorMsgLen;\n  char *outputStr;\n  undefined8 msgTemplate;\n  undefined8 returnValue;\n  char *flagStr;\n  \n  charValue = *(char *)(inputParams[0xc] + 0x1c);\n  intValue = *(int *)(inputParams[0xc] + 0x18);\n  errorMessage = (char *)FUN_00109b2f();\n  if (*(char **)(inputParams[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    inputStrLen = strlen(*(char **)(inputParams[0xc] + 0x20));\n    fieldNameLen = strlen(fieldName);\n    errorMsgLen = strlen(errorMessage);\n    outputStr = (char *)xmalloc(inputStrLen + 0x32 + fieldNameLen + errorMsgLen);\n    if (flag == 1) {\n      flagStr = \"/1\";\n    }\n    else {\n      flagStr = \"/0\";\n      if ((flag != 2) && (flagStr = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((structSize == 0) && (structSize = (ulong)(uint)(intValue * 8), structSize == 0)) {\n      returnValue = *(undefined8 *)*inputParams;\n      msgTemplate = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(msgTemplate,returnValue,fieldName);\n    }\n    sprintf(outputStr,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(inputParams[0xc] + 0x20),fieldName,flagStr,errorMessage,\n            paramValue,structSize);\n    free(*(void **)(inputParams[0xc] + 0x20));\n    longValue = inputParams[0xc];\n    *(char **)(longValue + 0x20) = outputStr;\n    if (charValue != '\\0') {\n      *(undefined *)(longValue + 0x1c) = 1;\n    }\n    returnValue = concatenate((int7)((ulong)longValue >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_generate_output_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "update_data_with_param_0010aa53",
                "param_1": "dataStructPtr",
                "param_2": "newValue",
                "param_3": "charValue",
                "param_4": "flag",
                "cVar1": "charVar",
                "__s": "stringPtr",
                "sVar5": "stringLength",
                "pcVar6": "newStringPtr",
                "cVar3": "flagChar",
                "lVar2": "structPtr",
                "uVar8": "returnValue",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar4": "loopVar",
                "lVar7": "reallocPtr"
            },
            "code": "\nundefined8 updateDataWithParam_0010aa53(long dataStructPtr,undefined8 newValue,char charValue,int flag)\n\n{\n  char charVar;\n  long structPtr;\n  char flagChar;\n  uint loopVar;\n  char *stringPtr;\n  size_t stringLength;\n  char *newStringPtr;\n  long reallocPtr;\n  undefined8 returnValue;\n  ulong temp1;\n  ulong temp2;\n  \n  charVar = *(char *)(*(long *)(dataStructPtr + 0x60) + 0x1c);\n  stringPtr = (char *)FUN_00109b2f();\n  stringLength = strlen(stringPtr);\n  newStringPtr = (char *)xmalloc(stringLength + 0x19);\n  *newStringPtr = charValue + '0';\n  if (flag == 1) {\n    flagChar = '1';\n  }\n  else {\n    flagChar = '0';\n    if ((flag != 2) && (flagChar = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  newStringPtr[1] = flagChar;\n  sprintf(newStringPtr + 2,\"%ld,%s;\",newValue);\n  free(stringPtr);\n  structPtr = *(long *)(dataStructPtr + 0x60);\n  returnValue = 0;\n  if ((structPtr != 0) && (*(long *)(structPtr + 0x20) != 0)) {\n    structPtr = *(long *)(structPtr + 0x28);\n    temp2 = 0;\n    if (structPtr != 0) {\n      loopVar = 0;\n      do {\n        temp1 = (ulong)loopVar;\n        temp2 = (ulong)loopVar;\n        loopVar = loopVar + 1;\n      } while (*(long *)(structPtr + temp1 * 8) != 0);\n    }\n    reallocPtr = xrealloc(structPtr,(ulong)((int)temp2 + 2) << 3);\n    *(char **)(reallocPtr + temp2 * 8) = newStringPtr;\n    *(undefined8 *)(reallocPtr + (ulong)((int)temp2 + 1) * 8) = 0;\n    structPtr = *(long *)(dataStructPtr + 0x60);\n    *(long *)(structPtr + 0x28) = reallocPtr;\n    if (charVar != '\\0') {\n      *(undefined *)(structPtr + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_with_param_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_debug_info_0011173a",
                "param_2": "debugInfo",
                "param_3": "opcode",
                "param_5": "address",
                "param_6": "symbol",
                "cVar1": "char1",
                "bVar2": "byte1",
                "__ptr": "ptr",
                "cVar3": "char2",
                "uVar4": "var1",
                "iVar5": "var2",
                "puVar6": "ptrVar",
                "plVar7": "ptrVar2",
                "pcVar8": "strVar",
                "uVar9": "var3",
                "lVar10": "len1",
                "lVar11": "len2",
                "lVar12": "var4",
                "lVar13": "ptrVar3",
                "uVar14": "var5",
                "uVar15": "var6",
                "pcVar16": "strVar2",
                "uVar17": "var7",
                "dVar19": "doubleVar",
                "local_48": "localPtr1",
                "local_40": "localPtrArr"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parseDebugInfo_0011173a(undefined8 param_1,long *debugInfo,int opcode,int param_4,ulong address,\n                      char *symbol)\n\n{\n  char char1;\n  byte byte1;\n  void *ptr;\n  char char2;\n  undefined var1;\n  int var2;\n  undefined8 *ptrVar;\n  long *ptrVar2;\n  char *strVar;\n  undefined8 var3;\n  long len1;\n  long len2;\n  long var4;\n  long **ppptrVar3;\n  ulong var5;\n  ulong var6;\n  char *strVar2;\n  uint var7;\n  long **pplVar18;\n  double doubleVar;\n  char *localPtr1;\n  long **localPtrArr [2];\n  \n  if (debugInfo[4] != 0) {\n    if (((opcode == 100) && (*symbol != '\\0')) && (debugInfo[5] == address)) goto LAB_00111a06;\n    char2 = FUN_0010bbd3(param_1);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugInfo + 0x44) = 0;\n    *(undefined4 *)(debugInfo + 8) = 0;\n    debugInfo[9] = debugInfo[4];\n    if (*(char *)(debugInfo + 1) == '\\0') {\n      debugInfo[6] = debugInfo[5];\n    }\n    *(undefined4 *)(debugInfo + 0x10) = 1;\n    ptrVar = (undefined8 *)xmalloc(8);\n    debugInfo[0x11] = (long)ptrVar;\n    *ptrVar = 0;\n    debugInfo[4] = 0;\n  }\n  strlen(symbol);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    var1 = FUN_00108f08(param_1,symbol);\n    return var1;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      var2 = strcmp(symbol,\"gcc2_compiled.\");\n      if (var2 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 2;\n        return 1;\n      }\n      var2 = strcmp(symbol,\"gcc_compiled.\");\n      if (var2 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugInfo + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*symbol == '\\0') {\n          if (*(char *)(debugInfo + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugInfo + 1) != '\\0') {\n            address = address + debugInfo[7];\n          }\n          char2 = FUN_0010c1c6(param_1,debugInfo);\n          if (char2 != '\\0') {\n            char2 = FUN_0010be1a(param_1,address);\n            if (char2 != '\\0') {\n              *(undefined *)(debugInfo + 0xc) = 0;\n              debugInfo[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugInfo + 0xc) != '\\0') &&\n           ((address < (ulong)debugInfo[0xd] || (debugInfo[0xd] == 0xffffffffffffffff)))) {\n          debugInfo[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debugInfo + 0xc) != '\\0') {\n          var5 = address;\n          if (((*symbol != '\\0') && (var6 = debugInfo[0xd], var6 != 0xffffffffffffffff)) &&\n             (var5 = var6, address < var6)) {\n            var5 = address;\n          }\n          char2 = FUN_0010c1c6(param_1,debugInfo);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          char2 = FUN_0010be1a(param_1,var5);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugInfo + 0xc) = 0;\n          debugInfo[0xd] = -1;\n        }\n        if (*symbol == '\\0') {\n          return 1;\n        }\n        ptr = (void *)debugInfo[4];\n        if (ptr == (void *)0x0) {\n          var4 = xstrdup(symbol);\n          debugInfo[4] = var4;\n        }\n        else {\n          if (*symbol == '/') {\n            var4 = xstrdup(symbol);\n          }\n          else {\n            var4 = concat(ptr,symbol,0);\n          }\n          debugInfo[4] = var4;\n          free(ptr);\n        }\n        debugInfo[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          var4 = 0;\n          if (*(char *)(debugInfo + 0xc) != '\\0') {\n            var4 = debugInfo[7];\n          }\n          var1 = FUN_0010bf86(param_1,(long)param_4,var4 + address);\n          return var1;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        ptrVar2 = (long *)xmalloc();\n        var2 = *(int *)(debugInfo + 0x10);\n        len1 = debugInfo[10];\n        len2 = debugInfo[0xb];\n        ptrVar2[5] = 0;\n        var4 = debugInfo[0x11];\n        *(int *)(ptrVar2 + 4) = var2;\n        var7 = var2 + 1;\n        *(uint *)(debugInfo + 0x10) = var7;\n        *ptrVar2 = len2;\n        ptrVar2[1] = len1;\n        ptrVar2[2] = (long)symbol;\n        ptrVar2[3] = address;\n        debugInfo[10] = (long)ptrVar2;\n        debugInfo[0xb] = (long)ptrVar2;\n        var4 = xrealloc(var4,(ulong)var7 << 3);\n        var7 = *(uint *)(ptrVar2 + 4);\n        debugInfo[0x11] = var4;\n        *(undefined8 *)(var4 + (ulong)var7 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    strVar = strchr(symbol,0x3a);\n    if ((strVar != (char *)0x0) && ((strVar[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugInfo + 0xc) != '\\0') {\n        var5 = debugInfo[0xd];\n        var6 = address;\n        if ((var5 != 0xffffffffffffffff) && (var6 = var5, address < var5)) {\n          var6 = address;\n        }\n        char2 = FUN_0010c1c6(param_1,debugInfo);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        char2 = FUN_0010be1a(param_1,var6);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        debugInfo[0xd] = -1;\n      }\n      if (*(char *)(debugInfo + 1) != '\\0') {\n        debugInfo[7] = address;\n      }\n      *(undefined *)(debugInfo + 0xc) = 1;\n    }\n    localPtr1 = strchr(symbol,0x3a);\n    if (localPtr1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localPtr1[1] == ':') goto code_r0x00111cc7;\n    if (*symbol == '$') {\n      char2 = symbol[1];\n      strVar2 = \"eh_throw\";\n      if (char2 != 'e') {\n        if (char2 < 'f') {\n          if ((char2 != 'X') && (char2 != '_')) {\nLAB_00111d1a:\n            var3 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(symbol,var3);\n          }\n        }\n        else {\n          strVar2 = \"this\";\n          if (char2 == 't') goto LAB_00111d62;\n          if (char2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      strVar2 = (char *)0x0;\n      if ((symbol != localPtr1) && ((*symbol != ' ' || (localPtr1 != symbol + 1)))) {\n        strVar2 = (char *)FUN_00109a0b(symbol,(int)localPtr1 - (int)symbol);\n      }\n    }\nLAB_00111d62:\n    byte1 = localPtr1[1];\n    strVar = localPtr1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte1 * 2) >> 2) & 1 |\n        (byte1 == 0x2d || byte1 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte1 == 0) goto switchD_00111de5_caseD_44;\n    strVar = localPtr1 + 2;\n    char2 = localPtr1[1];\n    switch(char2) {\n    case 'C':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      strVar = \"debug_record_label: not implemented\";\n      if (var4 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      char2 = FUN_0010bc80(param_1,strVar2,var4,char2 == 'F',address);\n      if (char2 != '\\0') {\n        do {\n          if (*localPtr1 != ';') {\n            return 1;\n          }\n          localPtr1 = localPtr1 + 1;\n          var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n        } while (var4 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      if (strVar2 == (char *)0x0) goto LAB_0011208f;\n      len1 = debugInfo[3];\n      ptrVar2 = (long *)debugInfo[2];\n      char2 = *(char *)(*(long *)(*debugInfo + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localPtr1 = strVar;\n        do {\n          if (*localPtr1 != ';') {\n            return 1;\n          }\n          localPtr1 = localPtr1 + 1;\n          var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n        } while (var4 != 0);\n        return 0;\n      }\n    case 'R':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 2;\n      break;\n    case 'S':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char2 = localPtr1[2];\n      if (char2 == 't') {\n        strVar = localPtr1 + 3;\n      }\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,strVar2,&localPtr1,localPtrArr);\n      if (var4 == 0) {\n        return 0;\n      }\n      if (strVar2 == (char *)0x0) {\n        return 1;\n      }\n      char1 = *(char *)(debugInfo + 0x35);\n      ptrVar2 = (long *)FUN_0010c6be(param_1,strVar2,var4);\n      if (ptrVar2 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrArr[0] != (long **)0x0) {\n        *localPtrArr[0] = ptrVar2;\n      }\n      if (char1 != '\\0') goto LAB_001122f0;\n      ppptrVar3 = (long **)(debugInfo + 0x34);\n      pplVar18 = (long **)debugInfo[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      strVar = localPtr1 + 3;\n      if (((localPtr1[2] != '\\0') && (strVar = localPtr1 + 4, localPtr1[3] == 'n')) &&\n         (strVar = localPtr1 + 5, strVar2 = localPtr1 + 4, localPtr1 = strVar, *strVar2 == '0')) {\n        for (; strVar = localPtr1, *localPtr1 != '\\0'; localPtr1 = localPtr1 + 1) {\n          if (*localPtr1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 4;\n      break;\n    case 'c':\n      if (localPtr1[2] == '=') {\n        strVar = localPtr1 + 4;\n        char2 = localPtr1[3];\n        localPtr1 = strVar;\n        if (char2 == 'i') {\n          var4 = strtol(strVar,(char **)0x0,10);\n          if (strVar2 == (char *)0x0) {\n            return 0;\n          }\n          len1 = FUN_00112996(param_1,strVar2,4);\n          if (len1 != 0) {\n            *(long *)(len1 + 0x20) = (long)(int)var4;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'r') {\n          doubleVar = strtod(strVar,(char **)0x0);\n          if (strVar2 == (char *)0x0) {\n            return 0;\n          }\n          var4 = FUN_00112996(param_1,strVar2,5);\n          if (var4 != 0) {\n            *(double *)(var4 + 0x20) = doubleVar;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'e') {\n          var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n          if (var4 == 0) {\n            return 0;\n          }\n          strVar = localPtr1;\n          if (*localPtr1 == ',') {\n            len1 = strtol(localPtr1,(char **)0x0,10);\n            if (strVar2 == (char *)0x0) {\n              return 0;\n            }\n            len2 = FUN_00112996(param_1,strVar2,6);\n            if (len2 != 0) {\n              ptrVar2 = (long *)xmalloc(0x10);\n              *ptrVar2 = var4;\n              ptrVar2[1] = (long)(int)len1;\n              *(long **)(len2 + 0x20) = ptrVar2;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localPtr1[2] == 'F') {\n        localPtr1 = localPtr1 + 3;\n        var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n        if (var4 == 0) {\n          return 0;\n        }\n        var3 = FUN_00113ce0(var4,0,0);\n        var4 = FUN_00113d3a(var3);\n      }\n      else {\n        localPtr1 = strVar;\n        var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      }\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 1;\n      break;\n    case 'r':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 5;\nLAB_001123e8:\n      char2 = FUN_0010c139(param_1,debugInfo,strVar2,var4,var3,address);\n      goto joined_r0x001123f8;\n    case 't':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,strVar2,&localPtr1,localPtrArr);\n      if (var4 == 0) {\n        return 0;\n      }\n      if (strVar2 == (char *)0x0) {\n        return 1;\n      }\n      ptrVar2 = (long *)FUN_0010c218(param_1,strVar2,var4);\n      if (ptrVar2 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrArr[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrArr[0] = ptrVar2;\n      return 1;\n    case 'v':\n      localPtr1 = strVar;\n      var4 = FUNC_0010ee3f(param_1,debugInfo,0,&localPtr1,0);\n      if (var4 == 0) {\n        return 0;\n      }\n      var3 = 3;\n    }\n    char2 = FUN_0010bd62(param_1,strVar2,var4,var3,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    char2 = FUN_0010c1c6(param_1,debugInfo);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    char2 = FUN_0010bf20(param_1,debugInfo[7] + debugInfo[6] + address);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    debugInfo = debugInfo + 0xe;\n    *(int *)debugInfo = *(int *)debugInfo + -1;\n    strVar = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugInfo) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        strVar = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        strVar = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      var3 = dcgettext(0,strVar,5);\n      fprintf(_stderr,\"%s\\n\",var3);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        var2 = *(int *)(debugInfo + 0x10);\n        *(uint *)(debugInfo + 0x10) = var2 + 1U;\n        var4 = xrealloc(debugInfo[0x11],(ulong)(var2 + 1U) << 3);\n        ptrVar = (undefined8 *)debugInfo[0xb];\n        debugInfo[0x11] = var4;\n        while( true ) {\n          if (ptrVar == (undefined8 *)0x0) {\n            var3 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(symbol,var3);\n            *(undefined8 *)(debugInfo[0x11] + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptrVar[3]) && (var2 = strcmp((char *)ptrVar[2],symbol), var2 == 0))\n          break;\n          ptrVar = (undefined8 *)*ptrVar;\n        }\n        *(undefined8 *)(var4 + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = ptrVar[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        var4 = debugInfo[10];\n        if (var4 != 0) {\n          len1 = *(long *)(var4 + 8);\n          var7 = *(uint *)(var4 + 0x20);\n          debugInfo[10] = len1;\n          if ((var7 < *(uint *)(debugInfo + 0x10)) &&\n             (*(undefined8 *)(var4 + 0x28) = *(undefined8 *)(debugInfo[0x11] + (ulong)var7 * 8),\n             len1 != 0)) {\n            symbol = *(char **)(len1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        symbol = (char *)debugInfo[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugInfo + 0xc) != '\\0') {\n      char2 = FUN_0010be88(param_1,debugInfo[7] + debugInfo[6] + address);\n      if (char2 == '\\0') {\n        return 0;\n      }\n      char2 = FUN_0010c1c6(param_1,debugInfo);\n      if (char2 != '\\0') {\n        *(int *)(debugInfo + 0xe) = *(int *)(debugInfo + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    strVar = \"N_LBRAC not within function\\n\";\n  }\n  strVar = (char *)dcgettext(0,strVar,5);\n  fprintf(_stderr,strVar);\n  return 0;\ncode_r0x00111cc7:\n  localPtr1 = localPtr1 + 2;\n  localPtr1 = strchr(localPtr1,0x3a);\n  if (localPtr1 == (char *)0x0) {\n    strVar = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localPtr1 = strVar;\n    FUN_00108fb9(symbol);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (char2 != 't') {\n      return 1;\n    }\n    ptrVar2 = (long *)FUN_0010c218(param_1,strVar2,ptrVar2);\n    if (ptrVar2 != (long *)0x0) {\n      if (localPtrArr[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrArr[0] = ptrVar2;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *strVar2) &&\n     (var2 = strcmp((char *)pplVar18[1],strVar2), var2 == 0)) {\n    pplVar18[3] = ptrVar2;\n    *ppptrVar3 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ppptrVar3 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (len1 < 1) {\nLAB_0011208f:\n    var3 = 1;\nLAB_001121c4:\n    char2 = FUN_0010c05d(param_1,strVar2,var4,var3,address);\njoined_r0x001123f8:\n    if (char2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  strVar = *(char **)(*ptrVar2 + 8);\n  if ((char2 != '\\0') && (char2 == *strVar)) {\n    strVar = strVar + 1;\n  }\n  if ((*strVar == *strVar2) && (var2 = strcmp(strVar,strVar2), var2 == 0)) {\n    address = *(long *)(*ptrVar2 + 0x10) + *(long *)(*(long *)(*ptrVar2 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  len1 = len1 + -1;\n  ptrVar2 = ptrVar2 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c05d",
                "xstrdup",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "fprintf",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_0010c139",
                "strcmp",
                "FUN_00113d3a",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "xmalloc",
                "FUN_0010bbd3",
                "strchr",
                "xrealloc",
                "FUN_0010c1c6",
                "FUN_0010c6be",
                "strtod",
                "FUN_00112996",
                "strtol",
                "strlen",
                "FUN_0010bf86",
                "FUN_0010be1a",
                "free",
                "FUN_0010bc80",
                "FUN_0010be88",
                "concat",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "perform_relocations_00115dc0",
                "param_1": "bfdHandle",
                "param_2": "parameters",
                "param_3": "paramSize",
                "cVar1": "result",
                "iVar2": "error",
                "uVar3": "relocationCount",
                "lVar4": "upperBound",
                "puVar5": "relocArray",
                "uVar6": "numOfRelocs",
                "UNRECOVERED_JUMPTABLE": "recoveredJumpTable",
                "puVar7": "p1",
                "puVar8": "p2",
                "uVar9": "i",
                "uStack_38": "unknownVar"
            },
            "code": "\nvoid performRelocations_00115dc0(undefined8 bfdHandle,undefined8 *parameters,long paramSize)\n\n{\n  char result;\n  int error;\n  undefined8 relocationCount;\n  long upperBound;\n  undefined8 *relocArray;\n  ulong numOfRelocs;\n  code *recoveredJumpTable;\n  undefined8 *p1;\n  undefined8 *p2;\n  ulong i;\n  undefined8 unknownVar;\n  \n  result = FUN_00115f50(bfdHandle,parameters,0);\n  if (result != '\\0') {\n    return;\n  }\n  relocationCount = parameters[0xc];\n  if ((((*(byte *)(paramSize + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (upperBound = FUN_00114190(*parameters,0,0x100), upperBound == 0)) {\n    upperBound = bfd_get_reloc_upper_bound(bfdHandle,parameters);\n    if (upperBound < 0) {\n      if ((upperBound != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a40 = 1;\n        relocationCount = 0;\nLAB_00108315:\n        FUN_001126c0(0,bfdHandle,parameters,relocationCount,unknownVar);\n        return;\n      }\n    }\n    else if (upperBound != 0) {\n      relocArray = (undefined8 *)parameters[0xe];\n      if (relocArray == (undefined8 *)0x0) {\n        relocArray = (undefined8 *)bfd_alloc(paramSize);\n        if (relocArray == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        numOfRelocs = bfd_canonicalize_reloc(bfdHandle,parameters,relocArray,DAT_001278d0);\n        if ((long)numOfRelocs < 0) {\n          DAT_00127a40 = 1;\n          relocationCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        numOfRelocs = (ulong)*(uint *)(parameters + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        p1 = relocArray;\n        for (i = 0; i != numOfRelocs; i = i + 1) {\n          p2 = p1;\n          if (((*(long **)relocArray[i] != (long *)0x0) &&\n              (upperBound = **(long **)relocArray[i], upperBound != 0)) &&\n             (result = FUN_00115d70(*(undefined8 *)(upperBound + 8),DAT_00127a28), result != '\\0')) {\n            p2 = p1 + 1;\n            *p1 = relocArray[i];\n          }\n          p1 = p2;\n        }\n        *p1 = 0;\n        numOfRelocs = (long)p1 - (long)relocArray >> 3;\n      }\n      recoveredJumpTable = *(code **)(*(long *)(paramSize + 8) + 0x288);\n      if (numOfRelocs == 0) {\n        numOfRelocs = 0;\n        relocArray = (undefined8 *)0x0;\n      }\n      else {\n        numOfRelocs = numOfRelocs & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  numOfRelocs = 0;\n  relocArray = (undefined8 *)0x0;\n  recoveredJumpTable = *(code **)(*(long *)(paramSize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*recoveredJumpTable)(paramSize,relocationCount,relocArray,numOfRelocs);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_0011a110",
                "FUN_001082df",
                "bfd_get_error",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "FUN_001126c0",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "perform_relocations_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_process_tokens_0010d559",
                "param_1": "inputParams",
                "param_2": "byteStream",
                "param_3": "outputSize",
                "bVar1": "currentByte",
                "pbVar2": "bytePointer",
                "cVar3": "result",
                "uVar4": "tokenLength",
                "iVar5": "comparisonResult",
                "ppcVar6": "tempStringArray",
                "sVar7": "stringLength",
                "lVar8": "accumulator",
                "plVar9": "pointerArray",
                "pcVar10": "tempString",
                "__s1": "tempString2",
                "__ptr": "tempPointer",
                "pbVar11": "newBytePointer",
                "uVar12": "specialValue",
                "__nptr": "numberPointer",
                "local_64": "counter",
                "local_40": "outputStringArray"
            },
            "code": "\nundefined8 parseAndProcessTokens_0010d559(undefined8 *inputParams,byte **byteStream,long *outputSize)\n\n{\n  byte currentByte;\n  byte *bytePointer;\n  char result;\n  uint tokenLength;\n  int comparisonResult;\n  char **tempStringArray;\n  size_t stringLength;\n  long accumulator;\n  long *pointerArray;\n  char *tempString;\n  char *tempString2;\n  void *tempPointer;\n  byte *newBytePointer;\n  undefined8 specialValue;\n  byte *numberPointer;\n  int counter;\n  char *outputStringArray [2];\n  \n  bytePointer = *byteStream;\n  currentByte = bytePointer[1];\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '1') goto LAB_0010d5d8;\n    counter = (char)currentByte + -0x30;\n    if (bytePointer[2] == 0x5f) {\n      *byteStream = bytePointer + 1;\n    }\n    newBytePointer = *byteStream + 2;\n  }\n  else {\n    if (((currentByte != 0x5f) || (((&_sch_istable)[(ulong)bytePointer[2] * 2] & 4) == 0)) ||\n       (bytePointer[2] == 0x30)) goto LAB_0010d5d8;\n    numberPointer = bytePointer + 2;\n    accumulator = strtol((char *)numberPointer,(char **)0x0,10);\n    counter = (int)accumulator;\n    while (((&_sch_istable)[(ulong)*numberPointer * 2] & 4) != 0) {\n      numberPointer = numberPointer + 1;\n    }\n    newBytePointer = numberPointer + 1;\n    if (*numberPointer != 0x5f) goto LAB_0010d5d8;\n  }\n  *byteStream = newBytePointer;\n  tempStringArray = (char **)0x0;\n  if (outputSize != (long *)0x0) {\n    tempStringArray = outputStringArray;\n  }\n  accumulator = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (outputSize != (long *)0x0) {\n          *outputSize = accumulator;\n        }\n        return 1;\n      }\n      if (**byteStream == 0x5f) {\n        *byteStream = *byteStream + 1;\n      }\n      if (**byteStream != 0x74) break;\n      result = FUN_0010d21c(inputParams,byteStream,tempStringArray);\n      tempString = outputStringArray[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (outputSize != (long *)0x0) {\n        stringLength = strlen(outputStringArray[0]);\n        accumulator = FUN_0010afd5(*inputParams,inputParams[1],tempString,stringLength & 0xffffffff,9);\n        free(tempString);\n        if (accumulator == 0) {\n          return 0;\n        }\n      }\n    }\n    tokenLength = FUN_00108e76(byteStream);\n    stringLength = strlen((char *)*byteStream);\n    if (stringLength < tokenLength) break;\n    if (outputSize != (long *)0x0) {\n      if ((accumulator != 0) && (pointerArray = (long *)FUN_00113b1e(accumulator), pointerArray != (long *)0x0)) {\n        tempString = (char *)FUN_00109a0b(*byteStream,tokenLength);\n        for (; accumulator = *pointerArray, accumulator != 0; pointerArray = pointerArray + 1) {\n          accumulator = *(long *)(accumulator + 8);\n          if (accumulator == 0) {\n            free(tempString);\n            return 0;\n          }\n          tempString2 = (char *)FUN_001129f4(accumulator);\n          if ((tempString2 != (char *)0x0) && (comparisonResult = strcmp(tempString2,tempString), comparisonResult == 0)) break;\n        }\n        free(tempString);\n        if (accumulator != 0) goto LAB_0010d7ad;\n      }\n      specialValue = 9;\n      if (counter == 0) {\n        tempPointer = (void *)FUN_00109a0b(*byteStream,tokenLength);\n        accumulator = FUN_0010914e(*inputParams,tempPointer);\n        free(tempPointer);\n        if (accumulator != 0) goto LAB_0010d7ad;\n        specialValue = 0;\n      }\n      accumulator = FUN_0010afd5(*inputParams,inputParams[1],*byteStream,tokenLength,specialValue);\n      if (accumulator == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byteStream = *byteStream + tokenLength;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(bytePointer);\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010d21c",
                "strcmp",
                "FUN_0010911f",
                "FUN_00113b1e",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "strtol",
                "FUN_001129f4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_and_process_tokens_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMsg",
                "param_2": "arguments"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMsg,__gnuc_va_list arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_00127600);\n  vfprintf(_stderr,errorMsg,arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "putc",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_integer_from_bytes_00108e76",
                "param_1": "byteStream",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint extractIntegerFromBytes_00108e76(byte **byteStream)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **byteStream;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *byteStream = *byteStream + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_integer_from_bytes_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "param_2": "ptr_to_something",
                "param_3": "ptr_to_something_else",
                "lVar1": "new_hash",
                "bfd_hash_allocate": "allocate_new_hash",
                "bfd_hash_newfunc": "initialize_new_hash"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 ptr_to_something,undefined8 ptr_to_something_else)\n\n{\n  long new_hash;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(ptr_to_something,0x30), input_value != 0)) &&\n     (new_hash = bfd_hash_newfunc(input_value,ptr_to_something,ptr_to_something_else), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_value_thunk_0010e439",
                "param_1": "base_address",
                "param_2": "new_value"
            },
            "code": "\nvoid set_param_value_thunk_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  FUN_0010e2f0(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_value_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "validate_and_get_directory_0011283f",
                "param_1": "directory_path",
                "param_2": "default_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_stats"
            },
            "code": "\nchar * validate_and_get_directory_0011283f(char *directory_path,char *default_directory)\n\n{\n  int access_result;\n  stat file_stats;\n  \n  if ((default_directory == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stats);\n      if ((access_result == 0) && ((file_stats.st_mode & 0xf000) == 0x4000)) {\n        default_directory = directory_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "validate_and_get_directory_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_handle_errors_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorPointer",
                "iVar1": "errorCode"
            },
            "code": "\nundefined8 closeFileAndHandleErrors_00108237(void)\n\n{\n  int errorCode;\n  int *errorPointer;\n  int fileDescriptor;\n  \n  errorPointer = __errno_location();\n  errorCode = *errorPointer;\n  close(fileDescriptor);\n  *errorPointer = errorCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_handle_errors_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00108237"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_2": "filename",
                "param_4": "flag",
                "uVar1": "result",
                "plVar2": "debugRecordData",
                "puVar3": "debugSetData",
                "lVar4": "tempVar",
                "puVar5": "tempPtr",
                "pcVar6": "filePtr",
                "bVar7": "flagByte",
                "auVar8": "returnData"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long param_1,char *filename,long param_3,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 result;\n  long *debugRecordData;\n  undefined4 *debugSetData;\n  long tempVar;\n  undefined4 *tempPtr;\n  char *filePtr;\n  byte flagByte;\n  undefined returnData [16];\n  \n  flagByte = 0;\n  filePtr = \"\";\n  if (filename != (char *)0x0) {\n    filePtr = filename;\n  }\n  if (param_3 != 0) {\n    if (*(long *)(param_1 + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      debugRecordData = (long *)xmalloc(0x18);\n      *debugRecordData = param_3;\n      *(undefined (*) [16])(debugRecordData + 1) = ZEXT816(0);\n      debugSetData = (undefined4 *)xmalloc(0x30);\n      *(long **)(param_1 + 0x18) = debugRecordData;\n      debugRecordData[2] = (long)debugSetData;\n      tempPtr = debugSetData;\n      for (tempVar = 0xc; tempVar != 0; tempVar = tempVar + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)flagByte * -2 + 1;\n      }\n      *(undefined4 **)(param_1 + 0x20) = debugSetData;\n      tempVar = *(long *)(param_1 + 0x10);\n      *(undefined8 *)(debugSetData + 6) = param_5;\n      *(undefined8 *)(debugSetData + 8) = 0xffffffffffffffff;\n      tempVar = FUN_00112925(tempVar + 0x10,filePtr,3,(flag & 0xff) + 1);\n      if (tempVar != 0) {\n        *(long **)(tempVar + 0x20) = debugRecordData;\n        result = CONCAT71((int7)((ulong)tempVar >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  returnData._8_8_ = param_6;\n  returnData._0_8_ = result;\n  return returnData;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107880",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "extract_filename_00114cf0",
                "param_1": "path",
                "pcVar1": "last_slash",
                "lVar2": "length",
                "lVar3": "offset",
                "lVar4": "slash_offset",
                "pcVar5": "new_path",
                "bVar6": "found_slash"
            },
            "code": "\nvoid extract_filename_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long length;\n  long offset;\n  long slash_offset;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    offset = 0;\n  }\n  else {\n    slash_offset = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(slash_offset + 0xb);\n    offset = slash_offset + 1;\n    new_path = last_slash;\n    for (length = slash_offset; length != 0; length = length + -1) {\n      *new_path = *path;\n      path = path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + offset) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + offset) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "extract_filename_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "data",
                "param_2": "startRange",
                "param_3": "endRange",
                "param_4": "flag",
                "cVar1": "charValue",
                "iVar2": "count",
                "iVar3": "result",
                "uVar4": "returnValue",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "combinedString",
                "lVar7": "index",
                "local_41": "localFlag"
            },
            "code": "\nundefined4 processData_0010a181(long data,long startRange,long endRange,byte flag)\n\n{\n  char charValue;\n  int count;\n  int result;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  long index;\n  byte localFlag;\n  \n  charValue = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (charValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  count = *(int *)(*(long *)(data + 0x60) + 0x18);\n  string2 = (char *)FUN_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combinedString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *combinedString = '\\0';\n    index = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    index = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = index + 1;\n    sprintf(combinedString,\"%ld=@S;\",index);\n    localFlag = flag;\n  }\n  length1 = strlen(combinedString);\n  sprintf(combinedString + length1,\"ar%s;%ld;%ld;%s\",string1,startRange,endRange,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (startRange <= endRange) {\n    result = count * (((int)endRange - (int)startRange) + 1);\n  }\n  returnValue = FUN_00109b52(data,combinedString,index,localFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(combinedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_supported_architectures_001199d0",
                "pcVar4": "header",
                "iVar1": "num_columns",
                "iVar2": "arch_idx",
                "iVar3": "cmp_result",
                "pcVar6": "temp_file",
                "uVar7": "result",
                "piVar8": "errno_location",
                "iVar9": "target_idx",
                "lVar10": "loop_var1",
                "lVar11": "loop_var2",
                "ppcVar12": "arch_list",
                "uVar13": "max_len",
                "uVar14": "len",
                "local_70": "loop_var3",
                "sVar5": "string_len"
            },
            "code": "\n\n\nvoid print_supported_architectures_001199d0(void)\n\n{\n  int num_columns;\n  int arch_idx;\n  int cmp_result;\n  char *header;\n  size_t string_len;\n  char *temp_file;\n  undefined8 result;\n  int *errno_location;\n  int target_idx;\n  long loop_var1;\n  long loop_var2;\n  char **arch_list;\n  uint max_len;\n  ulong len;\n  int loop_var3;\n  \n  header = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    header = getenv(\"TMPDIR\");\n    result = FUN_0011283f(header,0);\n    header = getenv(\"TMP\");\n    result = FUN_0011283f(header,result);\n    header = getenv(\"TEMP\");\n    result = FUN_0011283f(header,result);\n    result = FUN_0011283f(&DAT_0011b39a,result);\n    result = FUN_0011283f(\"/var/tmp\",result);\n    header = (char *)FUN_0011283f(&DAT_00120324,result);\n    if (header == (char *)0x0) {\n      header = \".\";\n    }\n    string_len = strlen(header);\n    temp_file = (char *)xmalloc((int)string_len + 2);\n    DAT_001278e0 = strcpy(temp_file,header);\n    DAT_001278e0[string_len & 0xffffffff] = '/';\n    DAT_001278e0[(int)string_len + 1] = '\\0';\n  }\n  header = DAT_001278e0;\n  string_len = strlen(DAT_001278e0);\n  loop_var1 = (long)(int)string_len;\n  temp_file = (char *)xmalloc(loop_var1 + 9);\n  strcpy(temp_file,header);\n  *(undefined2 *)(temp_file + loop_var1) = 0x6363;\n  *(undefined4 *)(temp_file + loop_var1 + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_file + loop_var1 + 2) + 3) = 0x585858;\n  temp_file[loop_var1 + 8] = '\\0';\n  arch_idx = mkstemps(temp_file,0);\n  if (arch_idx == -1) {\n    errno_location = __errno_location();\n    temp_file = strerror(*errno_location);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",header,temp_file);\n                    \n    abort();\n  }\n  arch_idx = close(arch_idx);\n  if (arch_idx != 0) {\n                    \n    abort();\n  }\n  max_len = 0;\n  arch_idx = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(temp_file);\n  free(temp_file);\n  loop_var3 = 0;\n  do {\n    header = (char *)bfd_printable_arch_mach(arch_idx);\n    string_len = strlen(header);\n    if ((int)max_len < (int)(uint)string_len) {\n      max_len = (uint)string_len;\n    }\n    arch_idx = arch_idx + 1;\n  } while (arch_idx != 0x57);\n  header = getenv(\"COLUMNS\");\n  arch_idx = loop_var3;\n  if (header != (char *)0x0) {\n    loop_var1 = strtol(header,(char **)0x0,10);\n    num_columns = (int)loop_var1;\n    if (num_columns != 0) goto LAB_00119b11;\n  }\n  num_columns = 0x50;\nLAB_00119b11:\n  do {\n    loop_var3 = arch_idx;\n    if (-1 < loop_var3) {\n      return;\n    }\n    loop_var2 = (long)loop_var3;\n    target_idx = (num_columns - max_len) + -1;\n    loop_var1 = loop_var2;\n    do {\n      arch_idx = (int)loop_var1;\n      if (-1 < arch_idx) break;\n      string_len = strlen(*(char **)(loop_var1 * 0x60));\n      loop_var1 = loop_var1 + 1;\n      target_idx = (target_idx - (int)string_len) + -1;\n    } while (-1 < target_idx);\n    printf(\"\\n%*s\",(ulong)(max_len + 1),&DAT_0011b4a1);\n    for (arch_list = (char **)(loop_var2 * 0x60);\n        ((ulong)(uint)(arch_idx - loop_var3) + loop_var2) * 0x60 - (long)arch_list != 0;\n        arch_list = arch_list + 0xc) {\n      printf(\"%s \",*arch_list);\n    }\n    target_idx = 2;\n    putc(10,_stdout);\n    do {\n      header = (char *)bfd_printable_arch_mach(target_idx,0);\n      cmp_result = strcmp(header,\"UNKNOWN!\");\n      if (cmp_result != 0) {\n        result = bfd_printable_arch_mach(target_idx,0);\n        printf(\"%*s \",(ulong)max_len,result);\n        arch_list = (char **)(loop_var2 * 0x60);\n        cmp_result = loop_var3;\n        while (arch_idx != cmp_result) {\n          if (*(char *)((long)arch_list + (ulong)(target_idx - 2) + 8) == '\\0') {\n            string_len = strlen(*arch_list);\n            for (len = string_len & 0xffffffff; (int)len != 0; len = (ulong)((int)len - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*arch_list,_stdout);\n          }\n          cmp_result = cmp_result + 1;\n          if (arch_idx != cmp_result) {\n            putc(0x20,_stdout);\n          }\n          arch_list = arch_list + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      target_idx = target_idx + 1;\n    } while (target_idx != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strerror",
                "mkstemps",
                "bfd_printable_arch_mach",
                "FUN_00119f70",
                "strlen",
                "strcpy",
                "getenv",
                "fprintf",
                "__errno_location",
                "free",
                "bfd_iterate_over_targets",
                "unlink",
                "FUN_0011283f",
                "abort",
                "close",
                "FUN_00104943",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_supported_architectures_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_0010847a"
            },
            "code": "\nvoid initialize_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "extract_string_from_binary_0010d21c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "byte1",
                "pbVar2": "bytePtr1",
                "bVar3": "byte1",
                "cVar4": "char1",
                "bVar5": "byte2",
                "uVar6": "result",
                "iVar7": "index",
                "uVar8": "length",
                "sVar9": "strLength",
                "pbVar10": "bytePtr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "var11",
                "uVar12": "temp",
                "pcVar13": "var13",
                "bVar14": "byte3",
                "pcVar15": "var15",
                "bVar16": "byte4",
                "bVar17": "byte5",
                "bVar18": "byte6",
                "bVar19": "byte7",
                "uVar20": "counter",
                "uVar21": "ulongValue",
                "local_3c": "localArray"
            },
            "code": "\nundefined4 extractStringFromBinary_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byte1;\n  byte *bytePtr1;\n  byte byte1;\n  char char1;\n  byte byte2;\n  undefined4 result;\n  int index;\n  uint length;\n  size_t strLength;\n  byte *bytePtr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 temp;\n  char *var13;\n  byte byte3;\n  char *var15;\n  byte byte4;\n  byte byte5;\n  byte byte6;\n  byte byte7;\n  uint counter;\n  ulong ulongValue;\n  uint localArray [3];\n  \n  bytePtr1 = *param2;\n  *param2 = bytePtr1 + 1;\n  localArray[0] = FUN_00108e76(param2);\n  ulongValue = (ulong)localArray[0];\n  if (localArray[0] != 0) {\n    bytePtr2 = *param2;\n    strLength = strlen((char *)bytePtr2);\n    if (ulongValue <= strLength) {\n      *param2 = bytePtr2 + ulongValue;\n      counter = 0;\n      result = FUN_00108ea1(param2,localArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (localArray[0] <= counter) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)FUN_00109a0b(bytePtr1,(int)*param2 - (int)bytePtr1);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            temp = FUN_00109a0b(haystack,(int)var15 - (int)haystack);\n            *param3 = temp;\n            free(haystack);\n            return result;\n          }\n          FUN_0010911f(bytePtr1);\n          free(haystack);\n          return 0;\n        }\n        bytePtr2 = *param2;\n        if (*bytePtr2 != 0x5a) {\n          byte2 = FUN_0010c95e(param1,param2,0);\n          if (byte2 == 0) {\n            return 0;\n          }\n          byte1 = 0;\n          byte3 = 0;\n          byte6 = 0;\n          byte5 = 0;\n          byte7 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte4 = byte1;\n              byte1 = *bytePtr2;\n              if ((byte3 | byte1 == 0) != 0) {\n                byte2 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte1 = byte2;\n              byte3 = byte2;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongValue = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongValue & 0x11409) == 0) {\n                  if ((ulongValue & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byte1 = byte4;\n              byte3 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte1 = byte4;\n              byte6 = byte2;\n              break;\n            case 99:\n              byte1 = byte4;\n              byte7 = byte2;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte1 = byte4;\n              byte5 = byte2;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = bytePtr2 + 1;\n        char1 = FUN_0010c95e(param1,param2,0);\n        if (char1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(bytePtr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte4 == 0) {\n    if (byte7 == 0) {\n      if (byte6 == 0) {\n        if (byte5 == 0) {\n          if (byte2 != 0) {\n            length = FUN_00108e76(param2);\n            if (length == 0) goto LAB_0010d280;\n            *param2 = *param2 + length;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            bytePtr2 = *param2;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *param2 = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *param2;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        length = FUN_00108e76(param2);\n        if (1 < length) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      index = FUN_00108e76(param2);\n      if (index == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "free",
                "strstr",
                "abort",
                "FUN_0010911f",
                "cplus_demangle",
                "FUN_00108e76",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_string_from_binary_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hashtable_001054af",
                "param_1": "arg1",
                "param_2": "arg2",
                "in_RAX": "temp_result"
            },
            "code": "\nvoid cleanup_hashtable_001054af(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined8 temp_result;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,arg2,temp_result);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hashtable_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_and_initialize_structure_0010c139",
                "param_1": "ptr_to_structure",
                "param_2": "ptr_to_data",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "param_5": "parameter_5",
                "param_6": "parameter_6",
                "uVar1": "old_ptr",
                "cVar2": "value_1",
                "uVar3": "result",
                "puVar4": "new_ptr",
                "in_R10": "register_10",
                "unaff_R15": "register_15"
            },
            "code": "\nulong allocate_and_initialize_structure_0010c139(undefined8 ptr_to_structure,long ptr_to_data,undefined8 parameter_3,undefined8 parameter_4,\n                  undefined4 parameter_5,undefined8 parameter_6)\n\n{\n  undefined8 old_ptr;\n  char value_1;\n  ulong result;\n  undefined8 *new_ptr;\n  undefined8 register_10;\n  undefined8 register_15;\n  \n  value_1 = *(char *)(ptr_to_data + 0x60);\n  if ((value_1 != '\\0') && ((*(int *)(ptr_to_data + 0x40) != 0 || (*(char *)(ptr_to_data + 0x44) == '\\0')))) {\n    new_ptr = (undefined8 *)xmalloc(0x28);\n    old_ptr = *(undefined8 *)(ptr_to_data + 0x78);\n    *(undefined8 *)((long)new_ptr + 0x1c) = 0;\n    new_ptr[2] = parameter_4;\n    *(undefined4 *)(new_ptr + 3) = parameter_5;\n    new_ptr[4] = parameter_6;\n    *(undefined8 **)(ptr_to_data + 0x78) = new_ptr;\n    *new_ptr = old_ptr;\n    new_ptr[1] = parameter_3;\n    return CONCAT71((int7)((ulong)register_15 >> 8),value_1) & 0xffffffff;\n  }\n  result = FUN_0010c05d(ptr_to_structure,parameter_3,parameter_4,parameter_5,parameter_6,register_10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_structure_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_0010e439",
                "param_1": "objPtr",
                "param_2": "paramValue"
            },
            "code": "\nvoid setParam_0010e439(long objPtr,undefined8 paramValue)\n\n{\n  *(undefined8 *)(objPtr + 0x210) = paramValue;\n  FUN_0010e2f0(objPtr,0x84,0,0,paramValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "set_param_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010abdd",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010e6a8",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_00109dfe",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_00113fb0",
                "FUN_00116b90",
                "FUN_0010abdd",
                "FUN_0010a181",
                "FUN_00113ede",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00115530",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_00104ad6",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "retrieve_data_00109d3e",
                "param_1": "output",
                "param_2": "index",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid retrieveData_00109d3e(undefined8 output,int index)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (index - 1U < 8) {\n    defaultValue = *(undefined8 *)(&DAT_00121360 + (ulong)(index - 1U) * 8);\n  }\n  FUN_00109cf4(output,defaultValue,index);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "retrieve_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_conditions_00112502",
                "param_1": "input_ptr",
                "param_2": "value",
                "param_3": "threshold",
                "uVar1": "counter",
                "puVar2": "func_ptr_array",
                "uVar3": "curr_func_ptr",
                "cVar4": "result"
            },
            "code": "\nundefined check_conditions_00112502(long input_ptr,undefined8 value,ulong threshold)\n\n{\n  uint counter;\n  undefined8 *func_ptr_array;\n  undefined8 curr_func_ptr;\n  char result;\n  \n  do {\n    func_ptr_array = *(undefined8 **)(input_ptr + 0x40);\n    if (func_ptr_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(input_ptr + 0x48), counter < 10 && (func_ptr_array[(ulong)counter + 2] != -1))) {\n      if (threshold <= (ulong)func_ptr_array[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(value,*(undefined8 *)(func_ptr_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(input_ptr + 0x48) = *(int *)(input_ptr + 0x48) + 1;\n    }\n    curr_func_ptr = *func_ptr_array;\n    *(undefined4 *)(input_ptr + 0x48) = 0;\n    *(undefined8 *)(input_ptr + 0x40) = curr_func_ptr;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "check_conditions_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_file_00104cc1",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "line",
                "unaff_R13": "filePointer",
                "unaff_R14": "lineStart",
                "unaff_R15": "lineEnd",
                "param_7": "errorMessage",
                "param_8": "outputPointer",
                "param_9": "inputPointer",
                "uVar1": "translatedMessage",
                "ppbVar2": "hashSlotPointer",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "pbVar5": "initialLine",
                "code_r0x00104cc1": "processLine"
            },
            "code": "\nvoid processFile_00104cc1(void)\n\n{\n  undefined8 translatedMessage;\n  byte **hashSlotPointer;\n  byte *currentChar;\n  byte nextChar;\n  byte *currentLine;\n  byte *initialLine;\n  int lineNumber;\n  byte *line;\n  undefined8 filePointer;\n  byte *lineStart;\n  byte *lineEnd;\n  undefined8 errorMessage;\n  undefined8 *outputPointer;\n  byte *inputPointer;\n  \nprocessLine:\n  inputPointer = line;\n  translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(translatedMessage,errorMessage,lineNumber);\n  initialLine = currentLine;\n  line = inputPointer;\nLAB_00114599:\n  do {\n    *line = 0;\n    if (lineEnd < line) {\n      hashSlotPointer = (byte **)htab_find_slot();\n      *hashSlotPointer = lineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = initialLine;\n    if (lineStart[1] == 0) {\n      *outputPointer = filePointer;\n      return;\n    }\n    for (; nextChar = *currentChar, lineStart = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          currentLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            currentLine = currentChar + 2;\n            lineStart = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      lineStart = currentChar + 1;\n      currentLine = currentChar + 2;\n    }\n    else {\n      currentLine = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *initialLine;\n    lineEnd = initialLine;\n    while ((nextChar == 0x20 || (line = lineEnd, nextChar == 9))) {\n      initialLine = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      nextChar = *initialLine;\n    }\n    do {\n      initialLine = currentLine;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = line[1];\n      line = line + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = line[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = line[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = line[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = line[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = line[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = line[6];\n      currentChar = line + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto processLine;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_file_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0011173a",
                "FUN_0010b6ea",
                "FUN_00109c2e",
                "FUN_00109be3",
                "FUN_0010e07c",
                "FUN_0010e2f0",
                "FUN_0010dac0",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_initialize_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "buffer",
                "plVar2": "allocatedPointer"
            },
            "code": "\nlong allocateAndInitialize_00113bfa(long input1,long input2)\n\n{\n  long buffer;\n  long *allocatedPointer;\n  \n  if (((input1 != 0) && (input2 != 0)) && (buffer = FUN_00112904(0x12,0), buffer != 0)) {\n    allocatedPointer = (long *)xmalloc(0x10);\n    *allocatedPointer = input1;\n    allocatedPointer[1] = input2;\n    *(long **)(buffer + 0x10) = allocatedPointer;\n    return buffer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "uVar1": "param_2_value",
                "uVar2": "error_message",
                "unaff_EBX": "ebx_value"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00108375(undefined8 param_1,undefined8 *param_2,undefined8 param_3)\n\n{\n  undefined8 param_2_value;\n  undefined8 error_message;\n  uint ebx_value;\n  \n  if (*(int *)(param_2[1] + 8) != 2) {\n    param_2_value = *param_2;\n    ebx_value = ebx_value & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(error_message,param_2_value,param_3);\n  }\n  return ebx_value;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_counter_and_print_00109e76",
                "param_1": "ptr",
                "param_2": "value",
                "lVar1": "oldCounter",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateCounterAndPrint_00109e76(long ptr,uint value)\n\n{\n  long oldCounter;\n  char formattedString [58];\n  \n  oldCounter = *(long *)(ptr + 0x68);\n  *(long *)(ptr + 0x68) = oldCounter + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",oldCounter,oldCounter,(ulong)value);\n  FUN_00109b52(ptr,formattedString,oldCounter,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_counter_and_print_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "status",
                "param_2": "type",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "nextIndex",
                "lVar2": "currentIndex",
                "lVar3": "entryOffset",
                "uVar4": "newString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 status,undefined4 type,undefined8 value1,undefined8 value2)\n\n{\n  int nextIndex;\n  long currentIndex;\n  long entryOffset;\n  undefined8 newString;\n  \n  currentIndex = (long)DAT_001278c0;\n  entryOffset = currentIndex * 0x18;\n  free((void *)(&DAT_00127750)[currentIndex * 3]);\n  *(undefined4 *)(&DAT_00127740 + entryOffset) = status;\n  *(undefined4 *)(&DAT_00127744 + entryOffset) = type;\n  *(undefined8 *)(&DAT_00127748 + entryOffset) = value1;\n  newString = xstrdup(value2);\n  (&DAT_00127750)[currentIndex * 3] = newString;\n  nextIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = nextIndex % 0x10;\n  return (long)nextIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "search_and_free_0010afd5",
                "param_1": "list",
                "param_2": "data",
                "param_3": "str1",
                "param_4": "str2",
                "param_5": "flag",
                "param_6": "result",
                "iVar1": "comparisonResult",
                "__s2": "searchString",
                "puVar2": "currentItem",
                "uVar3": "temp",
                "lVar4": "value",
                "puVar5": "sublist",
                "puVar6": "indicator",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nsearchAndFree_0010afd5(undefined8 *list,long data,undefined8 str1,undefined4 str2,\n            undefined4 flag,undefined8 result)\n\n{\n  int comparisonResult;\n  char *searchString;\n  undefined8 *currentItem;\n  undefined8 temp;\n  long value;\n  undefined8 *sublist;\n  undefined4 *indicator;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  searchString = (char *)FUN_00109a0b(str1,str2);\n  for (list = (undefined8 *)*list; list != (undefined8 *)0x0;\n      list = (undefined8 *)*list) {\n    for (currentItem = (undefined8 *)list[1]; currentItem != (undefined8 *)0x0;\n        currentItem = (undefined8 *)*currentItem) {\n      if ((undefined8 *)currentItem[2] != (undefined8 *)0x0) {\n        for (sublist = *(undefined8 **)(undefined8 *)currentItem[2]; sublist != (undefined8 *)0x0;\n            sublist = (undefined8 *)*sublist) {\n          if ((*(int *)((long)sublist + 0x14) == 1) && (*(char *)sublist[1] == *searchString)) {\n            comparisonResult = strcmp((char *)sublist[1],searchString);\n            if (comparisonResult == 0) {\n              value = sublist[4];\n              if (value == 0) goto LAB_0010b05b;\n              free(searchString);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentItem = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (currentItem == (undefined8 *)0x0) {\n      currentItem = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(data + 0x1a0);\n      indicator = (undefined4 *)((long)currentItem + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *indicator = 0;\n        indicator = indicator + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(currentItem + 2) = flag;\n      *currentItem = temp;\n      currentItem[1] = searchString;\n      temp = FUN_00113e23(currentItem + 3,searchString);\n      *(undefined8 **)(data + 0x1a0) = currentItem;\n      currentItem[4] = temp;\nLAB_0010b0e7:\n      value = currentItem[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = result;\n      returnValue._0_8_ = value;\n      return returnValue;\n    }\n    if (*(char *)currentItem[1] == *searchString) {\n      comparisonResult = strcmp((char *)currentItem[1],searchString);\n      if (comparisonResult == 0) {\n        if (*(int *)(currentItem + 2) == 0) {\n          *(undefined4 *)(currentItem + 2) = flag;\n        }\n        free(searchString);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentItem = (undefined8 *)*currentItem;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "strcmp",
                "FUN_00109a0b",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "search_and_free_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "cplus_demangle_init_info",
                "FUN_00113bfa",
                "FUN_001129f4",
                "FUN_00113df2",
                "FUN_00108fb9",
                "cplus_demangle_mangled_name",
                "strcmp",
                "FUN_00113d3a",
                "FUN_00109022",
                "FUN_00108fe8",
                "xmalloc",
                "strspn",
                "xrealloc",
                "strcat",
                "FUN_00113e5e",
                "FUN_00113e17",
                "strtol",
                "FUN_0010d559",
                "FUN_00113c43",
                "strlen",
                "FUN_00112b6e",
                "strcpy",
                "FUN_00113b4a",
                "strstr",
                "FUN_00109ab1",
                "concat",
                "FUN_0010afd5",
                "FUN_00113fb0",
                "dcgettext",
                "FUN_00113dfe",
                "fprintf",
                "strncmp",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00113cb9",
                "FUN_0010911f",
                "sprintf",
                "malloc",
                "FUN_0010ee3f",
                "strchr",
                "FUN_0010d21c",
                "FUN_00113b71",
                "FUN_00108e76",
                "FUN_0010b6ea",
                "FUN_0010c2d2",
                "FUN_00113da9",
                "FUN_00113d6e",
                "free",
                "FUN_00112904",
                "FUN_0010d882",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00109a0b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00116b90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_symbol_table_00108b3e",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "returnValue",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "symbol",
                "iVar5": "counter"
            },
            "code": "\n\n\nundefined8 printSymbolTable_00108b3e(undefined8 buffer,undefined8 size,undefined8 returnValue)\n\n{\n  char *formatString;\n  long stabName;\n  long index;\n  long offset;\n  int *symbol;\n  int counter;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    symbol = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*symbol);\n      if (stabName == 0) {\n        if (*symbol == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*symbol != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_symbol_table_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a083(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x2a,4,dataPointer + 0x178,dataPointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "lVar1": "newArraySize",
                "plVar2": "ptrToElement",
                "lVar3": "remainingSize",
                "puVar4": "ptrToZero",
                "uVar5": "currentSize",
                "bVar6": "isZero",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeArray_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long newArraySize;\n  long *ptrToElement;\n  long remainingSize;\n  undefined *ptrToZero;\n  ulong currentSize;\n  byte isZero;\n  undefined returnValue [16];\n  \n  isZero = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    newArraySize = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newArraySize;\n    ptrToZero = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newArraySize);\n    for (remainingSize = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *ptrToZero = 0;\n      ptrToZero = ptrToZero + (ulong)isZero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  ptrToElement = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*ptrToElement == 0) {\n    newArraySize = *(long *)(array + 0x68);\n    *ptrToElement = newArraySize;\n    *(long *)(array + 0x68) = newArraySize + 1;\n    ptrToElement[1] = value;\n    *(int *)(ptrToElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(ptrToElement + 2) = 0;\n    *(undefined4 *)((long)ptrToElement + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)ptrToElement + 0x14);\n  }\n  returnValue._8_8_ = data;\n  returnValue._0_8_ = *ptrToElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "validate_and_display_error_message_001053b5",
                "uVar1": "error_message",
                "dcgettext": "get_error_message"
            },
            "code": "\nvoid validate_and_display_error_message_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(error_message);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "validate_and_display_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "validate_and_invoke_function_00112996",
                "param_1": "function_info",
                "param_2": "arg_1",
                "param_3": "arg_2",
                "uVar1": "error_message",
                "lVar2": "memory_address"
            },
            "code": "\n\n\nundefined8 validate_and_invoke_function_00112996(long function_info,undefined8 arg_1,undefined8 arg_2)\n\n{\n  undefined8 error_message;\n  long memory_address;\n  \n  if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x10) != 0)) {\n    memory_address = *(long *)(function_info + 0x10) + 0x10;\n    if (*(long *)(function_info + 0x20) != 0) {\n      memory_address = *(long *)(function_info + 0x20) + 0x28;\n    }\n    error_message = FUN_00112925(memory_address,arg_1,arg_2,3);\n    return error_message;\n  }\n  error_message = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "validate_and_invoke_function_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "type_info",
                "param_2": "class_name",
                "param_3": "type_kind",
                "uVar1": "result",
                "uVar2": "type_id",
                "lVar3": "type_info_ptr",
                "piVar4": "type_kind_ptr",
                "__s1": "type_name_ptr",
                "cVar5": "char_check_result",
                "iVar6": "counter",
                "puVar7": "current_element",
                "auVar8": "output"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long type_info,char *class_name,int *type_kind,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint type_id;\n  long type_info_ptr;\n  int *type_kind_ptr;\n  char *type_name_ptr;\n  char char_check_result;\n  int counter;\n  undefined8 *current_element;\n  undefined output [16];\n  \n  if (3 < *type_kind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info_ptr = *(long *)(type_kind + 4);\n  current_element = (undefined8 *)(ulong)*(uint *)(type_info_ptr + 0xc);\n  if (*(uint *)(type_info_ptr + 0xc) <= *(uint *)(type_info + 0x38)) {\n    for (current_element = *(undefined8 **)(type_info + 0x50); current_element != (undefined8 *)0x0;\n        current_element = (undefined8 *)*current_element) {\n      type_kind_ptr = (int *)current_element[1];\n      if (*type_kind_ptr == *type_kind) {\n        type_name_ptr = (char *)current_element[2];\n        if (class_name == (char *)0x0) {\n          if (type_name_ptr == (char *)0x0) {\nLAB_0010c82c:\n            char_check_result = FUN_0010922b(type_info,type_kind_ptr,type_kind);\n            if (char_check_result != '\\0') {\n              type_id = *(uint *)(*(long *)(current_element[1] + 0x10) + 0xc);\n              current_element = (undefined8 *)(ulong)type_id;\n              *(uint *)(type_info_ptr + 0xc) = type_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((type_name_ptr != (char *)0x0) && (*type_name_ptr == *class_name)) &&\n                (counter = strcmp(type_name_ptr,class_name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(type_info + 0x34) + 1;\n    *(int *)(type_info + 0x34) = counter;\n    *(int *)(type_info_ptr + 0xc) = counter;\n    current_element = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(type_info + 0x50);\n    current_element[2] = class_name;\n    *(undefined8 **)(type_info + 0x50) = current_element;\n    *current_element = result;\n    current_element[1] = type_kind;\n  }\nLAB_0010c884:\n  output._1_7_ = (undefined7)((ulong)current_element >> 8);\n  output[0] = 1;\n  output._8_8_ = param_4;\n  return output;\n}\n\n",
            "called": [
                "xmalloc",
                "strcmp",
                "FUN_0010922b",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param",
                "param_2": "array1",
                "param_3": "array2",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "ptrArray1",
                "ppcVar4": "ptrChar1",
                "ppcVar5": "ptrChar2",
                "lVar6": "longVar1",
                "lVar7": "longVar2",
                "lVar8": "longVar3",
                "pcVar9": "charPtr1",
                "pcVar10": "charPtr2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparisonResult",
                "uVar14": "value1",
                "uVar15": "value2",
                "puVar16": "ptrValue1",
                "puVar17": "ptrValue2",
                "plVar18": "ptrArray1",
                "lVar19": "index",
                "plVar20": "ptrArray2",
                "plVar21": "ptrArray1",
                "lVar22": "longVar4",
                "local_70": "localArray1",
                "local_58": "localPtrValue",
                "plStack_50": "ptrStack",
                "local_48": "localArray2"
            },
            "code": "\nbyte checkEquality_0010922b(long param,long *array1,long *array2)\n\n{\n  uint value1;\n  uint value2;\n  long **ptrArray1;\n  char **ptrChar1;\n  char **ptrChar2;\n  long longVar1;\n  long longVar2;\n  long longVar3;\n  char *charPtr1;\n  char *charPtr2;\n  char result;\n  byte isEqual;\n  int comparisonResult;\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 *ptrValue1;\n  undefined8 *ptrValue2;\n  long *ptrArray1;\n  long index;\n  long *ptrArray2;\n  long *ptrArray1;\n  long longVar4;\n  long *localArray1;\n  undefined8 *localPtrValue;\n  long *ptrStack;\n  long *localArray2;\n  \n  ptrArray1 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptrArray1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)array1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)array2, value2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    ptrArray1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  localPtrValue = *(undefined8 **)(param + 0x58);\n  for (ptrValue2 = localPtrValue; ptrValue2 != (undefined8 *)0x0; ptrValue2 = (undefined8 *)*ptrValue2) {\n    if (((long *)ptrValue2[1] == array1) && ((long *)ptrValue2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param + 0x58) = &localPtrValue;\n  ptrStack = array1;\n  localArray2 = array2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptrArray1 = (long *)array1[2];\n    ptrArray1 = (long **)array2[2];\n    if (ptrArray1 == (long *)0x0) {\n      isEqual = ptrArray1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrArray1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param + 0x38) < *(uint *)((long)ptrArray1 + 0xc)) &&\n       (*(uint *)((long)ptrArray1 + 0xc) == *(uint *)((long)ptrArray1 + 0xc))) goto LAB_001097af;\n    ptrValue2 = (undefined8 *)*ptrArray1;\n    localArray1 = *ptrArray1;\n    if (((ptrValue2 == (undefined8 *)0x0) == (localArray1 == (long *)0x0)) &&\n       ((((ptrArray1[2] == 0) == (ptrArray1[2] == (long *)0x0) &&\n         ((ptrArray1[3] == 0) == (ptrArray1[3] == (long *)0x0))) &&\n        ((ptrArray1[4] == 0) == (ptrArray1[4] == (long *)0x0))))) {\n      if (ptrValue2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptrArray1[4] != 0) &&\n           (result = checkEquality_0010922b(param,ptrArray1[4],ptrArray1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptrArray1 = (long *)ptrArray1[2];\n        if (ptrArray1 == (long *)0x0) {\nLAB_00109540:\n          ptrValue2 = (undefined8 *)ptrArray1[3];\n          if (ptrValue2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptrArray1 = ptrArray1[3];\n          while( true ) {\n            ptrChar2 = (char **)*ptrValue2;\n            if (ptrChar2 == (char **)0x0) {\n              isEqual = *ptrArray1 == 0;\n              goto LAB_001099c4;\n            }\n            ptrChar1 = (char **)*ptrArray1;\n            if (ptrChar1 == (char **)0x0) break;\n            if ((**ptrChar2 != **ptrChar1) || (comparisonResult = strcmp(*ptrChar2,*ptrChar1), comparisonResult != 0))\n            break;\n            charPtr1 = ptrChar2[1];\n            charPtr2 = ptrChar1[1];\n            if ((charPtr1 == (char *)0x0) != (charPtr2 == (char *)0x0)) break;\n            if (charPtr1 != (char *)0x0) {\n              longVar4 = 0;\n              while( true ) {\n                ptrChar2 = *(char ***)(charPtr1 + longVar4);\n                ptrChar1 = *(char ***)(charPtr2 + longVar4);\n                if (ptrChar2 == (char **)0x0) break;\n                if (ptrChar1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrChar2 != **ptrChar1) ||\n                     ((((ulong)ptrChar2[2] ^ (ulong)ptrChar1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrChar2[3] != ptrChar1[3] ||\n                     ((((ptrChar2[4] == (char *)0x0) != (ptrChar1[4] == (char *)0x0) ||\n                       (comparisonResult = strcmp(*ptrChar2,*ptrChar1), comparisonResult != 0)) ||\n                      (result = checkEquality_0010922b(param,ptrChar2[1],ptrChar1[1]), result == '\\0')))))) ||\n                   ((ptrChar2[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(param,ptrChar2[4],ptrChar1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                longVar4 = longVar4 + 8;\n              }\n              if (ptrChar1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptrValue2 = ptrValue2 + 1;\n            ptrArray1 = ptrArray1 + 1;\n          }\n        }\n        else {\n          ptrArray2 = ptrArray1[2];\n          for (; ptrValue2 = (undefined8 *)*ptrArray1, ptrValue2 != (undefined8 *)0x0;\n              ptrArray1 = ptrArray1 + 1) {\n            ptrValue1 = (undefined8 *)*ptrArray2;\n            if ((((ptrValue1 == (undefined8 *)0x0) ||\n                 (((ptrValue2[1] ^ ptrValue1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptrValue2 + 2) != *(int *)(ptrValue1 + 2))) ||\n               (result = checkEquality_0010922b(param,*ptrValue2,*ptrValue1), result == '\\0'))\n            goto LAB_00109382;\n            ptrArray2 = ptrArray2 + 1;\n          }\n          if (*ptrArray2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrChar2 = (char **)*ptrValue2, ptrChar2 != (char **)0x0; ptrValue2 = ptrValue2 + 1) {\n          ptrChar1 = (char **)*localArray1;\n          if (ptrChar1 == (char **)0x0) goto LAB_00109382;\n          charPtr1 = *ptrChar1;\n          charPtr2 = *ptrChar2;\n          if ((*charPtr2 != *charPtr1) ||\n             ((((ulong)ptrChar2[2] ^ (ulong)ptrChar1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrChar2 + 0x14) == '\\0') {\n            if (ptrChar2[3] == ptrChar1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparisonResult = strcmp(ptrChar2[3],ptrChar1[3]);\n          if (comparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          comparisonResult = strcmp(charPtr2,charPtr1);\n          if (((comparisonResult != 0) || (ptrChar2[1] == (char *)0x0)) || (ptrChar1[1] == (char *)0x0))\n          goto LAB_00109382;\n          value1 = FUN_00112b6e(ptrChar1[1],0);\n          value2 = FUN_00112b6e(ptrChar2[1],0);\n          result = checkEquality_0010922b(param,value2,value1);\n          if (result == '\\0') goto LAB_00109382;\n          localArray1 = localArray1 + 1;\n        }\n        if (*localArray1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptrArray1 = (long *)array1[2];\n    ptrArray1 = (long *)array2[2];\n    if (ptrArray1 == (long *)0x0) {\n      isEqual = ptrArray1 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrArray1 == (long *)0x0) goto LAB_00109382;\n    longVar4 = *ptrArray1;\n    longVar1 = *ptrArray1;\n    index = 0;\n    longVar2 = ptrArray1[1];\n    longVar3 = ptrArray1[1];\n    do {\n      charPtr1 = *(char **)(longVar4 + index);\n      if (charPtr1 == (char *)0x0) {\n        isEqual = *(long *)(longVar1 + index) == 0;\n        goto LAB_001099c1;\n      }\n      charPtr2 = *(char **)(longVar1 + index);\n      if (((charPtr2 == (char *)0x0) || (*charPtr1 != *charPtr2)) ||\n         (*(long *)(longVar2 + index) != *(long *)(longVar3 + index))) break;\n      comparisonResult = strcmp(charPtr1,charPtr2);\n      index = index + 8;\n    } while (comparisonResult == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = checkEquality_0010922b(param,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = checkEquality_0010922b(param,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      ptrArray1 = *(long **)(array1[2] + 8);\n      ptrArray1 = *(long **)(array2[2] + 8);\n      if ((ptrArray1 == (long *)0x0) == (ptrArray1 == (long *)0x0)) {\n        if (ptrArray1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptrArray1 != 0 && (*ptrArray1 != 0)) &&\n               (result = checkEquality_0010922b(param), result != '\\0'))) {\n          ptrArray1 = ptrArray1 + 1;\n          ptrArray1 = ptrArray1 + 1;\n        }\nLAB_0010995d:\n        if (*ptrArray1 != 0) goto LAB_00109964;\n        isEqual = *ptrArray1 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptrValue2 = (undefined8 *)array2[2];\n    ptrValue1 = (undefined8 *)array1[2];\n    isEqual = 0;\n    if ((ptrValue1[1] == ptrValue2[1]) && (ptrValue1[2] == ptrValue2[2])) {\nLAB_00109862:\n      isEqual = checkEquality_0010922b(param,*ptrValue1,*ptrValue2);\n    }\n    break;\n  case 0x10:\n    ptrValue2 = (undefined8 *)array2[2];\n    ptrValue1 = (undefined8 *)array1[2];\n    isEqual = 0;\n    if (((ptrValue1[2] == ptrValue2[2]) && (ptrValue1[3] == ptrValue2[3])) &&\n       (*(char *)(ptrValue1 + 4) == *(char *)(ptrValue2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptrValue2 = (undefined8 *)array2[2];\n    ptrValue1 = (undefined8 *)array1[2];\n    isEqual = 0;\n    if (*(char *)(ptrValue1 + 1) == *(char *)(ptrValue2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(param,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = checkEquality_0010922b(param,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = checkEquality_0010922b(param,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(param,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      ptrArray1 = *(long **)(array1[2] + 0x10);\n      ptrArray1 = *(long **)(array2[2] + 0x10);\n      if ((ptrArray1 == (long *)0x0) == (ptrArray1 == (long *)0x0)) {\n        if (ptrArray1 != (long *)0x0) {\n          while (((*ptrArray1 != 0 && (*ptrArray1 != 0)) &&\n                 (result = checkEquality_0010922b(param), result != '\\0'))) {\n            ptrArray1 = ptrArray1 + 1;\n            ptrArray1 = ptrArray1 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptrArray1 = (long *)array2[2];\n    ptrArray1 = (long *)array1[2];\n    comparisonResult = strcmp(*(char **)(*ptrArray1 + 8),*(char **)(*ptrArray1 + 8));\n    isEqual = 0;\n    if (comparisonResult == 0) {\n      isEqual = checkEquality_0010922b(param,ptrArray1[1],ptrArray1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param + 0x58) = localPtrValue;\n  return isEqual;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  ptrArray1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_files_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "checkResult",
                "iVar2": "archType",
                "iVar3": "statResult",
                "ppcVar4": "tempPtr",
                "lVar5": "readResult",
                "uVar6": "errorMsg",
                "__format": "formatString",
                "puVar7": "tempDir",
                "piVar8": "errnoPtr",
                "uVar9": "errorMsg2",
                "in_RAX": "pathPointer",
                "pcVar10": "currentChar",
                "ppcVar11": "currentPath",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunc",
                "lVar15": "bytesToRead",
                "pcVar16": "pathname",
                "psVar17": "statBuf",
                "unaff_R14": "file1Struct",
                "unaff_R15": "file2Struct",
                "bVar18": "zeroByte",
                "unaff_retaddr": "returnAddr",
                "in_stack_00000008": "arg1Ptr",
                "in_stack_00000010": "arg2Ptr",
                "in_stack_00000018": "arg3Ptr",
                "in_stack_00000020": "arg4Ptr",
                "in_stack_00000028": "arg5",
                "in_stack_00000030": "arg6",
                "in_stack_000000f8": "arg7",
                "in_stack_00000110": "arg8"
            },
            "code": "\nvoid extractAndCopyFiles_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char checkResult;\n  int archType;\n  int statResult;\n  char **tempPtr;\n  long readResult;\n  undefined8 errorMsg;\n  char *formatString;\n  undefined8 *tempDir;\n  int *errnoPtr;\n  undefined8 errorMsg2;\n  long pathPointer;\n  char *currentChar;\n  char **currentPath;\n  long fileSize;\n  void *buffer;\n  code *closeFunc;\n  long bytesToRead;\n  char *pathname;\n  stat *statBuf;\n  undefined8 *file1Struct;\n  char **file2Struct;\n  byte zeroByte;\n  undefined8 returnAddr;\n  undefined8 *arg1Ptr;\n  long *arg2Ptr;\n  char *arg3Ptr;\n  undefined8 *arg4Ptr;\n  undefined8 arg5;\n  undefined8 arg6;\n  uint arg7;\n  long arg8;\n  \n  zeroByte = 0;\n  currentChar = (char *)(pathPointer + 1);\n  do {\n    if (*currentChar == '/') {\n      extractAndCopyFiles_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(arg3Ptr,&DAT_0011b47d);\n      statResult = stat(currentChar,(stat *)&stack0x00000050);\n      tempDir = file1Struct;\n      if (-1 < statResult) {\n        fileSize = FUN_0011a0e0(currentChar);\n        free(currentChar);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currentChar = strerror(*errnoPtr);\n          errorMsg2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorMsg2,currentChar);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        currentChar = *file2Struct;\n        *tempDir = file1Struct;\n        tempDir[2] = 0;\n        tempDir[1] = fileSize;\n        currentChar = (char *)concat(fileSize,&DAT_0011b47d,currentChar);\n      }\n      statResult = 0;\n      if (DAT_001279eb != '\\0') {\n        statBuf = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statBuf->st_dev = 0;\n          statBuf = (stat *)((long)statBuf + (ulong)zeroByte * -8 + 4);\n        }\n        currentPath = (char **)file2Struct[0x1d];\n        if ((char **)file2Struct[0x1d] == (char **)0x0) {\n          currentPath = file2Struct;\n        }\n        statResult = (**(code **)(currentPath[1] + 0x1e8))(file2Struct,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          pathname = *file2Struct;\n          errorMsg2 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorMsg2,pathname);\n        }\n      }\n      file1Struct = (undefined8 *)xmalloc(0x18);\n      file1Struct[1] = currentChar;\n      *file1Struct = tempDir;\n      file1Struct[2] = 0;\n      checkResult = bfd_check_format(file2Struct,1);\n      if (checkResult == '\\0') {\n        errorMsg2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,file2Struct,0,errorMsg2);\n        currentPath = (char **)bfd_openw(currentChar,arg5);\n        if (currentPath == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        tempPtr = (char **)file2Struct[0x1d];\n        if ((char **)file2Struct[0x1d] == (char **)0x0) {\n          tempPtr = file2Struct;\n        }\n        archType = (**(code **)(tempPtr[1] + 0x1e8))(file2Struct,&stack0x000000e0);\n        fileSize = arg8;\n        if (archType == 0) {\n          if (arg8 < 0) {\n            errorMsg2 = FUN_001125fa(file2Struct);\n            errorMsg = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(errorMsg,errorMsg2);\n          }\n          else {\n            archType = bfd_seek(file2Struct,0,0);\n            if (archType == 0) {\n              if (DAT_001279e9 != '\\0') {\n                pathname = *currentPath;\n                errorMsg2 = FUN_001125fa(file2Struct);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,errorMsg2,pathname);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesToRead) {\n                bytesToRead = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesToRead = fileSize;\n                }\n                readResult = bfd_bread(buffer,bytesToRead,file2Struct);\n                tempPtr = file2Struct;\n                if ((bytesToRead != readResult) ||\n                   (readResult = bfd_bwrite(buffer,bytesToRead,currentPath), tempPtr = currentPath, bytesToRead != readResult\n                   )) {\n                  FUN_001126c0(0,tempPtr,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*currentPath,arg7 | 0x100);\n              free(buffer);\n              checkResult = bfd_close_all_done(currentPath);\n              if (checkResult == '\\0') {\n                FUN_001126c0(currentChar,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg2 = FUN_001125fa(file2Struct);\n            FUN_0011a110(errorMsg2);\n          }\n        }\n        else {\n          FUN_001126c0(0,file2Struct,0,0);\n        }\nLAB_00104f00:\n        checkResult = bfd_close_all_done(currentPath);\n        if (checkResult == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (arg6._7_1_ == '\\0') {\n          currentPath = (char **)bfd_openw(currentChar,*(undefined8 *)file2Struct[1]);\n        }\n        else {\n          currentPath = (char **)bfd_openw(currentChar,arg5);\n        }\n        if (currentPath == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        checkResult = FUNC_00114e50(file2Struct,currentPath,returnAddr);\n        if (checkResult == '\\0') {\n          archType = bfd_get_arch(file2Struct);\n          if (archType == 0) goto LAB_00104d75;\n          checkResult = bfd_close_all_done(currentPath);\n          if (checkResult == '\\0') {\n            FUN_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        checkResult = bfd_close(currentPath);\n        if (checkResult == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (statResult == 0)) {\n          FUN_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentChar,arg5);\n        file1Struct[2] = fileSize;\n        *arg2Ptr = fileSize;\n        arg2Ptr = (long *)(fileSize + 0xf0);\n        currentPath = (char **)bfd_openr_next_archived_file(arg4Ptr,file2Struct);\n        bfd_close(file2Struct);\n        file2Struct = currentPath;\n      }\n      if ((DAT_00127a40 != 0) || (file2Struct == (char **)0x0)) {\n        *arg2Ptr = 0;\n        buffer = (void *)xstrdup(*arg1Ptr);\n        if (DAT_00127a40 == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        checkResult = (*closeFunc)(arg1Ptr);\n        if (checkResult == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*arg4Ptr);\n        checkResult = bfd_close(arg4Ptr);\n        if (checkResult == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currentChar = *file2Struct;\n      param3 = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    pathname = currentChar;\n    if ((*currentChar == '.') && (pathname = currentChar + 1, currentChar[1] == '.')) {\n      pathname = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        errorMsg2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorMsg2,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (file1Struct != (undefined8 *)0x0) {\n          if (file1Struct[2] == 0) {\n            rmdir((char *)file1Struct[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)file1Struct[1]);\n          }\n          free((void *)file1Struct[1]);\n          tempDir = (undefined8 *)*file1Struct;\n          free(file1Struct);\n          file1Struct = tempDir;\n        }\n        rmdir(arg3Ptr);\n        free(arg3Ptr);\n        return;\n      }\n    }\n    for (; (currentChar = pathname, *pathname != '\\0' && (*pathname != '/')); pathname = pathname + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_files_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "process_data_0010e453",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "suffixList",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "size",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "tempSize",
                "ppcVar6": "currentSuffix",
                "lVar7": "currentOffset"
            },
            "code": "\nundefined8 processData_0010e453(long data,char *prefix,char **suffixList)\n\n{\n  long length;\n  char result;\n  size_t size;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long tempSize;\n  char **currentSuffix;\n  long currentOffset;\n  \n  if (suffixList == (char **)0x0) {\n    if (prefix != (char *)0x0) {\n      size = strlen(prefix);\n      formattedString = (undefined2 *)xmalloc(size + 10);\n      sprintf((char *)formattedString,\"xe%s:\",prefix);\nLAB_0010e578:\n      result = FUN_00109b52(data,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    tempSize = 10;\n    currentSuffix = suffixList;\n    if (prefix != (char *)0x0) {\n      size = strlen(prefix);\n      tempSize = size + 10;\n    }\n    for (; *currentSuffix != (char *)0x0; currentSuffix = currentSuffix + 1) {\n      size = strlen(*currentSuffix);\n      tempSize = tempSize + 0x14 + size;\n    }\n    formattedString = (undefined2 *)xmalloc(tempSize);\n    if (prefix == (char *)0x0) {\n      *formattedString = 0x65;\n      tempSize = 0;\n    }\n    else {\n      tempSize = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = tempSize + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",prefix,tempSize);\n    }\n    currentOffset = 0;\n    while( true ) {\n      length = *(long *)((long)suffixList + currentOffset);\n      size = strlen((char *)formattedString);\n      if (length == 0) break;\n      currentOffset = currentOffset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + size),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + size) = 0x3b;\n    if (prefix == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(data,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = FUN_00109cf4(data,tempSize,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_if_valid_00109d5c",
                "param_1": "inputParam",
                "lVar1": "returnValue",
                "uVar2": "result"
            },
            "code": "\nundefined8 checkIfValid_00109d5c(undefined8 inputParam)\n\n{\n  long returnValue;\n  undefined8 result;\n  \n  returnValue = FUN_00109c2e();\n  if (-1 < returnValue) {\n    result = FUN_00109cf4(inputParam,returnValue,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_if_valid_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_and_check_params_0010ed2c",
                "param_1": "pData",
                "param_2": "newValue",
                "param_3": "otherParam",
                "extraout_RDX": "additionalData",
                "uVar3": "flag",
                "in_R10": "extraParam",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] updateAndCheckParams_0010ed2c(long pData,ulong newValue,undefined8 otherParam)\n\n{\n  char cVar1;\n  int iVar2;\n  undefined8 additionalData;\n  ulong flag;\n  undefined8 extraParam;\n  undefined result [16];\n  \n  if (*(ulong *)(pData + 0x1f0) < newValue) {\n    *(ulong *)(pData + 0x1f0) = newValue;\n  }\n  if (*(long *)(pData + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(pData + 0x1f8) != 0) {\n      iVar2 = *(int *)(pData + 0x1f8) + -1;\n      flag = CONCAT71((int7)((ulong)otherParam >> 8),1);\n      *(int *)(pData + 0x1f8) = iVar2;\n      if (iVar2 != 0) {\n        result = FUN_0010e2f0(pData,0xe0,0,newValue - *(long *)(pData + 0x200),0,extraParam);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    cVar1 = FUN_0010e2f0(pData,0xc0,0,*(long *)(pData + 0x208),0);\n    if (cVar1 != '\\0') {\n      *(undefined8 *)(pData + 0x208) = 0xffffffffffffffff;\n      otherParam = additionalData;\n      goto LAB_0010ed78;\n    }\n  }\n  flag = 0;\nLAB_0010edae:\n  result._0_8_ = flag & 0xffffffff;\n  result._8_8_ = extraParam;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_and_check_params_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_return_0011a1b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "size1",
                "param_4": "size2",
                "uVar1": "input1Var1",
                "uVar2": "input2Var1",
                "iVar3": "comparisonResult",
                "extraout_var": "extraOutput",
                "uVar4": "combinedResult",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareAndReturn_0011a1b0(ulong *input1,ulong *input2,undefined8 size1,undefined8 size2)\n\n{\n  ulong input1Var1;\n  ulong input2Var1;\n  int comparisonResult;\n  undefined4 extraOutput;\n  ulong combinedResult;\n  undefined result [16];\n  \n  combinedResult = *input1;\n  if (*input2 <= *input1) {\n    combinedResult = *input2;\n  }\n  comparisonResult = memcmp((void *)(input1[3] + 3),(void *)(input2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraOutput,comparisonResult);\n  if (comparisonResult == 0) {\n    input1Var1 = input1[8];\n    if (input1Var1 < input2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      input2Var1 = input2[8];\n      if (input2Var1 < input1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (input2Var1 < input1Var1) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (input2Var1 <= input1Var1) {\n              if (input1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = size2;\n  result._0_8_ = combinedResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_return_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_build_attribute_notes_001163d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "isTrue",
                "puVar5": "var5",
                "iVar6": "var6",
                "uVar7": "var7",
                "lVar8": "var8",
                "__ptr": "ptr",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr_00": "ptr2",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "var16",
                "puVar17": "ptr3",
                "puVar18": "ptr4",
                "cVar19": "charVar",
                "puVar20": "ptr5",
                "iVar21": "var21",
                "puVar22": "ptr6",
                "puVar23": "ptr7",
                "uVar24": "var24",
                "__nmemb": "nmemb",
                "puVar25": "ptr8",
                "bVar26": "byteVar",
                "local_88": "var_local_88",
                "uStack_80": "var_uStack_80",
                "local_70": "var_local_70",
                "local_68": "var_local_68",
                "local_60": "var_local_60"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong processBuildAttributeNotes_001163d0(undefined8 *param1,undefined8 *param2,ulong param3,undefined *param4)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool isTrue;\n  ulong *var5;\n  int var6;\n  undefined8 var7;\n  long var8;\n  void *ptr;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr2;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong var16;\n  ulong *ptr3;\n  undefined *ptr4;\n  char charVar;\n  undefined *ptr5;\n  int var21;\n  undefined *ptr6;\n  ulong *ptr7;\n  ulong var24;\n  size_t nmemb;\n  ulong *ptr8;\n  byte byteVar;\n  ulong var_local_88;\n  ulong var_uStack_80;\n  ulong var_local_70;\n  ulong var_local_68;\n  ulong *var_local_60;\n  \n  byteVar = 0;\n  var8 = bfd_get_reloc_upper_bound();\n  var_local_68 = param3;\n  if (0 < var8) {\n    ptr = (void *)xmalloc(var8);\n    var8 = bfd_canonicalize_reloc(param1,param2,ptr,DAT_001278d0);\n    free(ptr);\n    if (var8 != 0) {\n      if (_DAT_001264c0 == 0) {\n        var2 = *param1;\n        var3 = *param2;\n        var7 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(var7,var2,var3);\n      }\n      var_local_60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  var_local_60 = (ulong *)xcalloc(param3 / 0xc,0x48,param3 % 0xc);\n  var_local_88 = 0;\n  var_local_70 = 0;\n  var16 = param3;\n  var15 = 0;\n  ptr7 = var_local_60;\n  var14 = 0;\n  ptr6 = param4;\n  while (0xb < var16) {\n    var10 = (**(code **)(param1[1] + 0x40))(ptr6);\n    *ptr7 = var10;\n    var10 = (**(code **)(param1[1] + 0x40))(ptr6 + 4);\n    ptr7[1] = var10;\n    var11 = (**(code **)(param1[1] + 0x40))(ptr6 + 8);\n    var10 = *ptr7;\n    ptr7[2] = var11;\n    var12 = ptr7[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    ptr7[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (var16 < result) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr7[3] = (ulong)(ptr6 + 0xc);\n    ptr7[4] = (ulong)(ptr6 + var13 + 0xc);\n    var16 = var16 + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (ptr6[0xc] == '$') {\n        if ((ptr6[0xd] == '\\x01') && (ptr6[0xe] == '1')) {\n          var16 = FUN_00116490();\n          return var16;\n        }\n      }\n      else if ((((4 < var10) && (ptr6[0xc] == 'G')) && (ptr6[0xd] == 'A')) &&\n              ((ptr6[0xe] == '$' && (ptr6[0xf] == '\\x01')))) {\n        if (ptr6[0x10] == '2') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        if (ptr6[0x10] == '3') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        var8 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        ptr7[7] = var_local_88;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        ptr7[7] = var_local_70;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(param1[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            var16 = FUN_001086af();\n            return var16;\n          }\n        }\n        var8 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(param1[1] + 0x28))(ptr6 + var13 + 0xc);\n      var12 = (**(code **)(param1[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (ptr7[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = var_local_88;\n        }\n        var10 = *ptr7;\n        ptr7[7] = var11;\n        var24 = var12;\n        var_local_88 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = var_local_70;\n        }\n        var10 = *ptr7;\n        ptr7[7] = var11;\n        var9 = var12;\n        var_local_70 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr7[8] = var12;\n    if (*(char *)((ptr7[3] - 1) + var10) != '\\0') {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr7 = ptr7 + 9;\n    var15 = var9;\n    var14 = var24;\n    ptr6 = ptr6 + result;\n  }\n  if (var16 == 0) {\n    var2 = *param1;\n    var3 = *param2;\n    var7 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(var7,var2,var3);\n    nmemb = ((long)ptr7 - (long)var_local_60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(var_local_60,nmemb,0x48,FUN_0011a1b0);\n    for (ptr3 = var_local_60; ptr3 < ptr7; ptr3 = ptr3 + 9) {\n      var16 = ptr3[2];\n      if (var16 != 0) {\n        var15 = ptr3[7];\n        var14 = ptr3[8];\n        ptr8 = ptr3;\n        var21 = 0;\n        if (var15 == var14) {\n          ptr3[2] = 0;\n        }\n        else {\n          do {\n            do {\n              var5 = ptr8;\n              ptr8 = var5 + -9;\n              if (ptr8 < var_local_60) goto LAB_001167f5;\n              var10 = var5[-7];\n            } while (var10 == 0);\n            if ((*ptr8 != *ptr3) ||\n               (var6 = memcmp((void *)var5[-6],(void *)ptr3[3],*ptr3), var6 != 0)) break;\n            var12 = var5[-2];\n            var11 = var5[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                ptr3[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                ptr3[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((var16 == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                var5[-1] = var11;\n                var5[-2] = var15;\n                ptr3[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nFUN_00116852:\n            isTrue = var21 < 0x11;\n            var21 = var21 + 1;\n          } while (isTrue);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(var_local_60,nmemb,0x48,FUN_0011a250);\n    ptr2 = (undefined *)xmalloc(param3 * 2);\n    var_uStack_80 = 0;\n    var_local_70 = 0;\n    ptr6 = ptr2;\n    for (ptr3 = var_local_60; ptr3 < ptr7; ptr3 = ptr3 + 9) {\n      if (ptr3[2] != 0) {\n        ptr4 = ptr6 + 0xc;\n        if ((ptr3[7] == var_local_70) && (ptr3[8] == var_uStack_80)) {\n          (**(code **)(param1[1] + 0x50))(*ptr3,ptr6);\n          (**(code **)(param1[1] + 0x50))(0,ptr6 + 4);\n          (**(code **)(param1[1] + 0x50))(ptr3[2],ptr6 + 8);\n          var15 = ptr3[6];\n          var16 = *ptr3;\n          ptr6 = (undefined *)ptr3[3];\n          ptr5 = ptr4;\n          for (var14 = var16; var14 != 0; var14 = var14 - 1) {\n            *ptr5 = *ptr6;\n            ptr6 = ptr6 + (ulong)byteVar * -2 + 1;\n            ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n          }\n          if (var16 < var15) {\n            for (var8 = var15 - var16; var8 != 0; var8 = var8 + -1) {\n              *ptr5 = 0;\n              ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          ptr6 = ptr4 + var15;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            charVar = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(charVar,ptr6 + 4);\n          (**(code **)(param1[1] + 0x50))(ptr3[2],ptr6 + 8);\n          var16 = *ptr3;\n          ptr6 = (undefined *)ptr3[3];\n          ptr5 = ptr4;\n          for (var15 = var16; var15 != 0; var15 = var15 - 1) {\n            *ptr5 = *ptr6;\n            ptr6 = ptr6 + (ulong)byteVar * -2 + 1;\n            ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n          }\n          var15 = ptr3[6];\n          if (var16 < var15) {\n            for (var8 = var15 - var16; var8 != 0; var8 = var8 + -1) {\n              *ptr5 = 0;\n              ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          var8 = param1[1];\n          ptr4 = ptr4 + var15;\n          ptr6 = ptr4 + 8;\n          if ((*(int *)(var8 + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(var8 + 0x38))(ptr3[7],ptr4);\n            (**(code **)(param1[1] + 0x38))(ptr3[8],ptr6);\n            ptr6 = ptr4 + 0x10;\n          }\n          else {\n            (**(code **)(var8 + 0x50))(ptr3[7],ptr4);\n            (**(code **)(param1[1] + 0x50))(ptr3[8],ptr4 + 4);\n          }\n          var_local_70 = ptr3[7];\n          var_uStack_80 = ptr3[8];\n        }\n      }\n    }\n    var15 = (long)ptr6 - (long)ptr2;\n    var16 = var15;\n    ptr6 = ptr2;\n    var_local_68 = param3;\n    if (var15 < param3) {\n      for (; var_local_68 = var15, var16 != 0; var16 = var16 - 1) {\n        *param4 = *ptr6;\n        ptr6 = ptr6 + (ulong)byteVar * -2 + 1;\n        param4 = param4 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(ptr2);\n  }\n  else {\n    var8 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (var8 != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,param1,param2,var8);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(var_local_60);\n  return var_local_68;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "xcalloc",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_information_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageMessage",
                "pcVar2": "localizedText"
            },
            "code": "\nvoid printUsageInformation_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageMessage;\n  char *localizedText;\n  \n  usageMessage = DAT_00127600;\n  localizedText = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,localizedText,usageMessage);\n  localizedText = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  FUN_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_information_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_supported_architecture_00108c86",
                "param_1": "input_ptr",
                "cVar1": "first_check_result",
                "iVar2": "comparison_result",
                "sVar3": "input_length",
                "puVar4": "new_string_ptr",
                "lVar5": "input_offset",
                "__s": "input_string",
                "__s1": "architecture_string",
                "puVar6": "new_string_ptr_iterator",
                "uVar7": "result",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_supported_architecture_00108c86(long *input_ptr)\n\n{\n  char first_check_result;\n  int comparison_result;\n  size_t input_length;\n  undefined2 *new_string_ptr;\n  long input_offset;\n  char *input_string;\n  char *architecture_string;\n  undefined2 *new_string_ptr_iterator;\n  undefined8 result;\n  byte flag;\n  \n  flag = 0;\n  input_offset = *input_ptr;\n  input_string = (char *)(input_offset + 4);\n  first_check_result = FUN_00113fb0(input_string,&DAT_0011b73b);\n  if (first_check_result == '\\0') {\n    first_check_result = FUN_00113fb0(input_string,\"bsdrv-\");\n    if (first_check_result == '\\0') {\n      first_check_result = FUN_00113fb0(input_string,\"rtdrv-\");\n      if (first_check_result == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(input_offset + 6);\n      result = 0xc;\n    }\n    else {\n      input_string = (char *)(input_offset + 6);\n      result = 0xb;\n    }\n  }\n  else {\n    result = 10;\n  }\n  input_length = strlen(input_string);\n  new_string_ptr = (undefined2 *)xmalloc(input_length + 8);\n  architecture_string = input_string + 4;\n  new_string_ptr_iterator = new_string_ptr;\n  for (input_offset = input_length + 1; input_offset != 0; input_offset = input_offset + -1) {\n    *(char *)new_string_ptr_iterator = *input_string;\n    input_string = input_string + (ulong)flag * -2 + 1;\n    new_string_ptr_iterator = (undefined2 *)((long)new_string_ptr_iterator + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(new_string_ptr + 1) = 0x69;\n  *new_string_ptr = 0x6570;\n  comparison_result = strcmp(architecture_string,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_string_ptr + 7) = 0x36;\n    *(undefined2 *)((long)new_string_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture_string,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_string_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture_string,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_string_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string_ptr;\n  return result;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "xmalloc",
                "strcmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_supported_architecture_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_and_return_status_001053d5",
                "unaff_R12": "ptrToStatus",
                "unaff_R14": "ptrToBFD",
                "bfd_close_all_done": "closeAllBFDDone"
            },
            "code": "\nundefined4 closeBFDAndReturnStatus_001053d5(void)\n\n{\n  long ptrToStatus;\n  undefined8 *ptrToBFD;\n  \n  FUN_0011a110(*ptrToBFD);\n  *(undefined4 *)(ptrToStatus + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptrToStatus + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "close_bfd_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_memory_permissions_00104bba",
                "in_EAX": "eaxValue",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid checkAndSetMemoryPermissions_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_set_memory_permissions_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "remainingLength",
                "puVar3": "destPointer",
                "bVar4": "isIncrement"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long remainingLength;\n  undefined *destPointer;\n  byte isIncrement;\n  \n  isIncrement = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPointer = destination;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destPointer = *source;\n    source = source + (ulong)isIncrement * -2 + 1;\n    destPointer = destPointer + (ulong)isIncrement * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0011173a",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_array",
                "param_2": "slot_index",
                "uVar1": "slot_index_error",
                "plVar2": "new_slot",
                "lVar3": "slot_offset",
                "lVar4": "counter",
                "uVar5": "temp_var",
                "bVar6": "flag",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_array,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 slot_index_error;\n  long *new_slot;\n  long slot_offset;\n  long counter;\n  ulong temp_var;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  temp_var = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)temp_var; temp_var = temp_var - 0x10) {\n      if (*slot_array == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_array = new_slot;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_array = (long **)*slot_array;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_array == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_array = new_slot;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    return_value._8_8_ = param_4;\n    return_value._0_8_ = *slot_array + slot_index + slot_offset + 1;\n    return return_value;\n  }\n  slot_index_error = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(slot_index_error,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "allocate_and_initialize_memory_00112894",
                "param_1": "input_param",
                "param_2": "flag",
                "puVar1": "allocated_memory",
                "puVar2": "current_position",
                "lVar3": "loop_counter",
                "bVar4": "increment",
                "xmalloc": "allocate_memory"
            },
            "code": "\nundefined8 *\nallocate_and_initialize_memory_00112894(undefined8 input_param,undefined flag,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *allocated_memory;\n  undefined8 *current_position;\n  long loop_counter;\n  byte increment;\n  \n  increment = 0;\n  allocated_memory = (undefined8 *)xmalloc(0x1b0);\n  current_position = allocated_memory;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)current_position = 0;\n    current_position = (undefined8 *)((long)current_position + (ulong)increment * -8 + 4);\n  }\n  *allocated_memory = input_param;\n  *(undefined *)(allocated_memory + 1) = flag;\n  allocated_memory[2] = param_3;\n  allocated_memory[3] = param_4;\n  *(undefined4 *)(allocated_memory + 0x10) = 1;\n  current_position = (undefined8 *)xmalloc(8);\n  allocated_memory[0xd] = 0xffffffffffffffff;\n  allocated_memory[0x11] = current_position;\n  *current_position = 0;\n  return allocated_memory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "get_next_ptr_00109b2f",
                "param_1": "ptr_list",
                "__ptr": "current_ptr",
                "puVar1": "next_ptr"
            },
            "code": "\nundefined8 * get_next_ptr_00109b2f(long ptr_list)\n\n{\n  undefined8 *current_ptr;\n  undefined8 *next_ptr;\n  \n  current_ptr = *(undefined8 **)(ptr_list + 0x60);\n  if (current_ptr != (undefined8 *)0x0) {\n    next_ptr = (undefined8 *)current_ptr[1];\n    *(undefined8 *)(ptr_list + 0x60) = *current_ptr;\n    free(current_ptr);\n    return next_ptr;\n  }\n  return current_ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a181",
                "FUN_0010a83e",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "get_next_ptr_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "find_and_handle_redefinitions_00108d9a",
                "param_1": "output",
                "param_2": "symbolName1",
                "param_3": "symbolName2",
                "param_4": "returnValue",
                "ppcVar1": "symbolPairArray",
                "pcVar2": "symbolNameCopy",
                "lVar3": "symbolFound",
                "uVar4": "errorMessage",
                "plVar5": "slotPtr"
            },
            "code": "\nundefined8 findAndHandleRedefinitions_00108d9a(undefined8 output,char *symbolName1,char *symbolName2,undefined8 returnValue)\n\n{\n  char **symbolPairArray;\n  char *symbolNameCopy;\n  long symbolFound;\n  undefined8 errorMessage;\n  long *slotPtr;\n  \n  symbolPairArray = (char **)xmalloc(0x10);\n  symbolNameCopy = strdup(symbolName1);\n  *symbolPairArray = symbolNameCopy;\n  symbolNameCopy = strdup(symbolName2);\n  errorMessage = DAT_001278f0;\n  symbolPairArray[1] = symbolNameCopy;\n  symbolFound = htab_find(errorMessage,symbolPairArray);\n  if (symbolFound != 0) {\n    errorMessage = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(errorMessage,output,symbolName1);\n  }\n  symbolFound = htab_find(DAT_001278e8,symbolName2);\n  if (symbolFound != 0) {\n    errorMessage = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(errorMessage,output,symbolName2);\n  }\n  slotPtr = (long *)htab_find_slot(DAT_001278f0,symbolPairArray,1);\n  errorMessage = DAT_001278e8;\n  *slotPtr = (long)symbolPairArray;\n  symbolNameCopy = symbolPairArray[1];\n  symbolPairArray = (char **)htab_find_slot(errorMessage,symbolNameCopy,1);\n  *symbolPairArray = symbolNameCopy;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "htab_find_slot",
                "strdup",
                "FUN_00119dd0",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "find_and_handle_redefinitions_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "format_data_0010e9a0",
                "param_1": "dataPtr",
                "param_2": "text",
                "param_3": "dataType",
                "param_4": "param",
                "lVar1": "count",
                "uVar2": "result",
                "__s": "randomString",
                "__s_00": "tempString",
                "sVar3": "textLength",
                "sVar4": "randomStringLength",
                "__s_01": "formattedData",
                "pcVar5": "dataTypeString",
                "uVar6": "formatSpecifier"
            },
            "code": "\nundefined4 formatData_0010e9a0(long dataPtr,char *text,undefined4 dataType,undefined8 param)\n\n{\n  long count;\n  undefined4 result;\n  byte *randomString;\n  byte *tempString;\n  size_t textLength;\n  size_t randomStringLength;\n  char *formattedData;\n  char *dataTypeString;\n  undefined8 formatSpecifier;\n  \n  randomString = (byte *)FUN_00109b2f();\n  switch(dataType) {\n  case 1:\n    dataTypeString = \"G\";\n    formatSpecifier = 0x20;\n    break;\n  case 2:\n    dataTypeString = \"S\";\n    formatSpecifier = 0x26;\n    break;\n  case 3:\n    dataTypeString = \"V\";\n    formatSpecifier = 0x26;\n    break;\n  case 4:\n    dataTypeString = \"\";\n    formatSpecifier = 0x80;\n    if (((&_sch_istable)[(ulong)*randomString * 2] & 4) == 0) {\n      count = *(long *)(dataPtr + 0x68);\n      *(long *)(dataPtr + 0x68) = count + 1;\n      textLength = strlen((char *)randomString);\n      tempString = (byte *)xmalloc(textLength + 0x14);\n      sprintf((char *)tempString,\"%ld=%s\",count,randomString);\n      free(randomString);\n      randomString = tempString;\n    }\n    break;\n  case 5:\n    dataTypeString = \"r\";\n    formatSpecifier = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  textLength = strlen(text);\n  randomStringLength = strlen((char *)randomString);\n  formattedData = (char *)xmalloc(textLength + 3 + randomStringLength);\n  sprintf(formattedData,\"%s:%s%s\",text,dataTypeString,randomString);\n  free(randomString);\n  result = FUN_0010e2f0(dataPtr,formatSpecifier,0,param,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_data_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_matching_options_0010827b",
                "unaff_RBX": "options",
                "uVar1": "section",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleMatchingOptions_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *options;\n  \n  section = *options;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,section);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_matching_options_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "print_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedMessage"
            },
            "code": "\nvoid printErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "print_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "create_string_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid createStringHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareString,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_string_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108d9a",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_and_check_00108179",
                "unaff_RBX": "currentObject",
                "unaff_RBP": "framePointer",
                "unaff_R12": "functionPointer",
                "unaff_R14B": "isReversed",
                "unaff_R15": "newObject",
                "lVar1": "objectAddress",
                "lVar2": "var2",
                "cVar3": "charVar",
                "lVar4": "errorMessage",
                "lVar5": "result",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nvoid setAlignmentAndCheck_00108179(void)\n\n{\n  long objectAddress;\n  long var2;\n  char charVar;\n  long errorMessage;\n  long result;\n  long currentObject;\n  long framePointer;\n  long functionPointer;\n  char isReversed;\n  long newObject;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(newObject + 0xb4) = *(undefined4 *)(currentObject + 0xb4);\n  *(byte *)(newObject + 0x28) =\n       *(byte *)(newObject + 0x28) & 0xcf | *(byte *)(currentObject + 0x28) & 0x30;\n  *(long *)(currentObject + 0x60) = newObject;\n  *(undefined8 *)(currentObject + 0x58) = 0;\n  if ((*(byte *)(currentObject + 0x27) & 2) != 0) {\n    objectAddress = *(long *)(currentObject + 0xd0);\n    result = FUN_00115d00(objectAddress,*(undefined8 *)(currentObject + 0xe0));\n    if ((result != 0) &&\n       (var2 = *(long *)(functionPointer + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(var2 + 8) == 5)) {\n      *(long *)(objectAddress + 0xb0) = result;\n      charVar = (**(code **)(*(long *)(framePointer + 8) + 0x158))();\n      if (charVar == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(framePointer + 8) + 0x158))();\n  if (charVar == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (isReversed != '\\0') {\n    *(undefined4 *)(*(long *)(newObject + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_and_check_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "validate_type_file_00109022",
                "param_1": "file_count",
                "param_2": "type_indexes",
                "param_3": "unused_ptr",
                "param_4": "return_ptr",
                "uVar1": "type_index",
                "pcVar2": "error_msg",
                "plVar3": "type_file_ptr",
                "lVar4": "loop_counter",
                "uVar5": "file_number",
                "pplVar6": "type_file_ptrs",
                "bVar7": "zero_byte",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] validate_type_file_00109022(long file_count,uint *type_indexes,undefined8 unused_ptr,undefined8 return_ptr)\n\n{\n  uint type_index;\n  char *error_msg;\n  long *type_file_ptr;\n  long loop_counter;\n  uint file_number;\n  long **type_file_ptrs;\n  byte zero_byte;\n  undefined result [16];\n  \n  zero_byte = 0;\n  file_number = *type_indexes;\n  type_index = type_indexes[1];\n  if (((int)file_number < 0) || (*(uint *)(file_count + 0x80) <= file_number)) {\n    error_msg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_msg,(ulong)file_number);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      type_file_ptrs = (long **)(*(long *)(file_count + 0x88) + (long)(int)file_number * 8);\n      for (file_number = type_index; 0xf < (int)file_number; file_number = file_number - 0x10) {\n        if (*type_file_ptrs == (long *)0x0) {\n          type_file_ptr = (long *)xmalloc(0x88);\n          *type_file_ptrs = type_file_ptr;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)type_file_ptr = 0;\n            type_file_ptr = (long *)((long)type_file_ptr + (ulong)zero_byte * -8 + 4);\n          }\n        }\n        type_file_ptrs = (long **)*type_file_ptrs;\n      }\n      if (*type_file_ptrs == (long *)0x0) {\n        type_file_ptr = (long *)xmalloc(0x88);\n        *type_file_ptrs = type_file_ptr;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)type_file_ptr = 0;\n          type_file_ptr = (long *)((long)type_file_ptr + (ulong)zero_byte * -8 + 4);\n        }\n      }\n      type_file_ptr = *type_file_ptrs + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_msg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_msg,(ulong)type_index);\n  }\n  type_file_ptr = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = return_ptr;\n  result._0_8_ = type_file_ptr;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_type_file_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "filePtr",
                "param_2": "variableId",
                "param_3": "value",
                "param_4": "type",
                "param_6": "result",
                "auVar1": "tempVar1",
                "uVar2": "returnValue",
                "piVar3": "newPtr",
                "cVar4": "useParam4",
                "lVar5": "counter",
                "lVar6": "currentPtr",
                "piVar7": "tempPtr",
                "bVar8": "isParam2Zero",
                "auVar9": "tempVar2"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariable_0010c05d(long filePtr,long variableId,ulong value,int type,undefined8 param_5,\n            undefined8 result)\n\n{\n  undefined tempVar1 [16];\n  undefined8 returnValue;\n  int *newPtr;\n  char useParam4;\n  long counter;\n  long currentPtr;\n  int *tempPtr;\n  byte isParam2Zero;\n  undefined tempVar2 [16];\n  \n  isParam2Zero = 0;\n  if (variableId == 0) {\n    tempVar1._8_8_ = 0;\n    tempVar1._0_8_ = value;\n    return tempVar1 << 0x40;\n  }\n  if (value != 0) {\n    if ((*(long *)(filePtr + 8) == 0) || (currentPtr = *(long *)(filePtr + 0x10), currentPtr == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (type - 1U < 2) {\n        currentPtr = currentPtr + 0x10;\n        useParam4 = (type == 1) + '\\x01';\n      }\n      else if (*(long *)(filePtr + 0x20) == 0) {\n        currentPtr = currentPtr + 0x10;\n        useParam4 = '\\0';\n      }\n      else {\n        currentPtr = *(long *)(filePtr + 0x20) + 0x28;\n        useParam4 = '\\0';\n      }\n      currentPtr = FUN_00112925(currentPtr,variableId,2,useParam4);\n      if (currentPtr != 0) {\n        newPtr = (int *)xmalloc(0x18);\n        tempPtr = newPtr + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *tempPtr = 0;\n          tempPtr = tempPtr + (ulong)isParam2Zero * -2 + 1;\n        }\n        *newPtr = type;\n        returnValue = 1;\n        *(ulong *)(newPtr + 2) = value;\n        *(undefined8 *)(newPtr + 4) = param_5;\n        *(int **)(currentPtr + 0x20) = newPtr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  tempVar2._8_8_ = result;\n  tempVar2._0_8_ = returnValue;\n  return tempVar2;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c139",
                "FUN_0010c1c6",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "print_formatted_value_00109d97",
                "param_1": "value",
                "lVar1": "currentValue",
                "local_40": "formatString"
            },
            "code": "\nvoid printFormattedValue_00109d97(long value)\n\n{\n  long currentValue;\n  char formatString [40];\n  \n  if (*(long *)(value + 0x70) != 0) {\n    FUN_00109cf4(value,*(long *)(value + 0x70),0);\n    return;\n  }\n  currentValue = *(long *)(value + 0x68);\n  *(long *)(value + 0x68) = currentValue + 1;\n  sprintf(formatString,\"%ld=%ld\",currentValue,currentValue);\n  FUN_00109b52(value,formatString,currentValue,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "print_formatted_value_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "reverse_gnu_build_attribute_note_001086af",
                "param_7": "input",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "bVar4": "flag",
                "puVar5": "ptrVar1",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "tempVar3",
                "uVar9": "tempVar4",
                "uVar10": "tempVar5",
                "uVar11": "tempVar6",
                "__ptr": "dynamicArray",
                "in_RCX": "rcxValue",
                "uVar12": "tempVar7",
                "uVar13": "tempVar8",
                "uVar14": "tempVar9",
                "unaff_RBX": "rbxValue",
                "unaff_RBP": "rbpValue",
                "puVar15": "arrayPtr1",
                "puVar16": "arrayPtr2",
                "cVar17": "charVar",
                "puVar18": "arrayPtr3",
                "puVar19": "arrayPtr4",
                "unaff_R12": "rbxPtr",
                "unaff_R13": "rbpPtr",
                "uVar20": "tempVar10",
                "__nmemb": "numElements",
                "unaff_R14": "contextPtr",
                "puVar21": "arrayPtr5",
                "bVar22": "byteVar",
                "iVar23": "iterationCount",
                "unaff_retaddr": "returnAddress",
                "param_9": "noteSize",
                "param_10": "descriptionSize",
                "param_11": "notesArray",
                "in_stack_00000030": "stackVar1",
                "in_stack_00000038": "stackVar2",
                "param_13": "stackVar3",
                "param_14": "stackVar4"
            },
            "code": "\nulong reverseGnuBuildAttributeNote_001086af(void)\n\n{\n  ulong result;\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  bool flag;\n  ulong *ptrVar1;\n  int index;\n  long length;\n  undefined8 tempVar3;\n  ulong tempVar4;\n  ulong tempVar5;\n  ulong tempVar6;\n  undefined *dynamicArray;\n  ulong rcxValue;\n  ulong tempVar7;\n  ulong tempVar8;\n  ulong tempVar9;\n  ulong rbxValue;\n  ulong rbpValue;\n  ulong *arrayPtr1;\n  undefined *arrayPtr2;\n  char charVar;\n  undefined *arrayPtr3;\n  undefined *arrayPtr4;\n  ulong *rbxPtr;\n  ulong rbpPtr;\n  ulong tempVar10;\n  size_t numElements;\n  undefined8 *contextPtr;\n  ulong *arrayPtr5;\n  byte byteVar;\n  int iterationCount;\n  ulong returnAddress;\n  ulong input;\n  uint param_8;\n  ulong noteSize;\n  ulong descriptionSize;\n  ulong *notesArray;\n  undefined *stackVar1;\n  uint stackVar2;\n  uint stackVar3;\n  undefined8 *stackVar4;\n  \n  byteVar = 0;\n  input = rcxValue;\n  tempVar4 = (**(code **)(contextPtr[1] + 0x40))();\n  tempVar5 = (**(code **)(contextPtr[1] + 0x40))(rbxPtr[4] + 4);\nLAB_0011662a:\n  tempVar8 = rbpValue;\n  tempVar10 = rbpPtr;\n  if (tempVar5 < tempVar4) {\n    tempVar4 = tempVar5;\n  }\n  do {\n    tempVar6 = input;\n    tempVar7 = input;\n    arrayPtr1 = rbxPtr;\n    if (rbxPtr[2] == 0x100) {\n      if (tempVar4 == 0) {\n        tempVar4 = returnAddress;\n      }\n      tempVar9 = *rbxPtr;\n      rbxPtr[7] = tempVar4;\n      rbpValue = tempVar8;\n      rbpPtr = tempVar5;\n      returnAddress = tempVar4;\n      if (tempVar5 == 0) goto LAB_001164af;\n    }\n    else {\n      if (tempVar4 == 0) {\n        tempVar4 = noteSize;\n      }\n      tempVar9 = *rbxPtr;\n      rbxPtr[7] = tempVar4;\n      rbpValue = tempVar5;\n      rbpPtr = tempVar10;\n      noteSize = tempVar4;\n      if (tempVar5 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    arrayPtr1[8] = tempVar5;\n    if (*(char *)((arrayPtr1[3] - 1) + tempVar9) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    rbxPtr = arrayPtr1 + 9;\n    if (rbxValue < 0xc) {\n      if (rbxValue != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stackVar2 | stackVar3 | param_8) != 0) {\n        if (((stackVar3 | param_8) == 0) || (stackVar2 == 0)) {\n          if (stackVar3 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      tempVar1 = *contextPtr;\n      tempVar2 = *stackVar4;\n      tempVar3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(tempVar3,tempVar1,tempVar2);\nLAB_0011671b:\n      numElements = ((long)rbxPtr - (long)notesArray >> 3) * -0x71c71c71c71c71c7;\n      qsort(notesArray,numElements,0x48,FUN_0011a1b0);\n      arrayPtr1 = notesArray;\n      goto LAB_001167f9;\n    }\n    tempVar5 = (**(code **)(contextPtr[1] + 0x40))(tempVar7);\n    *rbxPtr = tempVar5;\n    tempVar5 = (**(code **)(contextPtr[1] + 0x40))(tempVar7 + 4);\n    arrayPtr1[10] = tempVar5;\n    tempVar4 = (**(code **)(contextPtr[1] + 0x40))(tempVar7 + 8);\n    tempVar9 = *rbxPtr;\n    arrayPtr1[0xb] = tempVar4;\n    tempVar5 = arrayPtr1[10];\n    tempVar8 = tempVar9 + 3 & 0xfffffffffffffffc;\n    arrayPtr1[0xf] = tempVar8;\n    if (tempVar5 != (tempVar5 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < tempVar4 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    tempVar6 = tempVar8 + tempVar5 + 0xc;\n    if (rbxValue < tempVar6) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (tempVar9 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    arrayPtr1[0xc] = tempVar7 + 0xc;\n    result = tempVar7 + 0xc + tempVar8;\n    arrayPtr1[0xd] = result;\n    rbxValue = rbxValue + (-0xc - (tempVar8 + tempVar5));\n    tempVar6 = tempVar7 + tempVar6;\n    if (tempVar9 != 2) {\n      if (*(char *)(tempVar7 + 0xc) == '$') {\n        if ((*(char *)(tempVar7 + 0xd) == '\\x01') && (*(char *)(tempVar7 + 0xe) == '1')) {\n          tempVar5 = FUN_00116490();\n          return tempVar5;\n        }\n      }\n      else if ((((4 < tempVar9) && (*(char *)(tempVar7 + 0xc) == 'G')) &&\n               (*(char *)(tempVar7 + 0xd) == 'A')) &&\n              ((*(char *)(tempVar7 + 0xe) == '$' && (*(char *)(tempVar7 + 0xf) == '\\x01')))) {\n        if (*(char *)(tempVar7 + 0x10) == '2') {\n          tempVar5 = FUN_00116490();\n          return tempVar5;\n        }\n        if (*(char *)(tempVar7 + 0x10) == '3') {\n          tempVar5 = FUN_00116490();\n          return tempVar5;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    tempVar8 = rbpValue;\n    tempVar10 = rbpPtr;\n    if (tempVar5 == 0) {\n      if (tempVar4 == 0x100) {\n        arrayPtr1[0x10] = returnAddress;\nLAB_001164af:\n        tempVar7 = tempVar6;\n        tempVar5 = tempVar10;\n        arrayPtr1 = rbxPtr;\n        rbpPtr = tempVar10;\n      }\n      else {\n        arrayPtr1[0x10] = noteSize;\nLAB_0011669e:\n        rbpValue = tempVar8;\n        tempVar7 = tempVar6;\n        tempVar5 = tempVar8;\n        arrayPtr1 = rbxPtr;\n        rbpPtr = tempVar10;\n      }\n      goto LAB_001164bb;\n    }\n    if (tempVar5 == 0x10) break;\n    if (0x10 < tempVar5) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,contextPtr,stackVar4,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (tempVar5 != 4) {\n      if (tempVar5 == 8) {\n        tempVar5 = reverseGnuBuildAttributeNote_001086af();\n        return tempVar5;\n      }\n      goto LAB_00116679;\n    }\n    input = tempVar6;\n    tempVar4 = (**(code **)(contextPtr[1] + 0x40))();\n    tempVar5 = 0xffffffffffffffff;\n  } while( true );\n  input = tempVar6;\n  tempVar4 = (**(code **)(contextPtr[1] + 0x28))(result);\n  tempVar5 = (**(code **)(contextPtr[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (rbxPtr <= arrayPtr1) {\n    qsort(notesArray,numElements,0x48,FUN_0011a250);\n    dynamicArray = (undefined *)xmalloc(descriptionSize * 2);\n    input = 0;\n    noteSize = 0;\n    arrayPtr4 = dynamicArray;\n    for (arrayPtr1 = notesArray; arrayPtr1 < rbxPtr; arrayPtr1 = arrayPtr1 + 9) {\n      if (arrayPtr1[2] != 0) {\n        arrayPtr3 = arrayPtr4 + 4;\n        arrayPtr2 = arrayPtr4 + 0xc;\n        if ((arrayPtr1[7] == noteSize) && (arrayPtr1[8] == input)) {\n          (**(code **)(contextPtr[1] + 0x50))(*arrayPtr1,arrayPtr4);\n          (**(code **)(contextPtr[1] + 0x50))(0,arrayPtr3);\n          (**(code **)(contextPtr[1] + 0x50))(arrayPtr1[2],arrayPtr4 + 8);\n          tempVar4 = arrayPtr1[6];\n          tempVar5 = *arrayPtr1;\n          arrayPtr4 = (undefined *)arrayPtr1[3];\n          arrayPtr3 = arrayPtr2;\n          for (tempVar8 = tempVar5; tempVar8 != 0; tempVar8 = tempVar8 - 1) {\n            *arrayPtr3 = *arrayPtr4;\n            arrayPtr4 = arrayPtr4 + (ulong)byteVar * -2 + 1;\n            arrayPtr3 = arrayPtr3 + (ulong)byteVar * -2 + 1;\n          }\n          if (tempVar5 < tempVar4) {\n            for (length = tempVar4 - tempVar5; length != 0; length = length + -1) {\n              *arrayPtr3 = 0;\n              arrayPtr3 = arrayPtr3 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          arrayPtr4 = arrayPtr2 + tempVar4;\n        }\n        else {\n          (**(code **)(contextPtr[1] + 0x50))();\n          if (*(int *)(contextPtr[1] + 8) == 5) {\n            charVar = (*(char *)(contextPtr[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar = '\\b';\n          }\n          (**(code **)(contextPtr[1] + 0x50))(charVar,arrayPtr3);\n          (**(code **)(contextPtr[1] + 0x50))(arrayPtr1[2],arrayPtr4 + 8);\n          tempVar5 = *arrayPtr1;\n          arrayPtr4 = (undefined *)arrayPtr1[3];\n          arrayPtr3 = arrayPtr2;\n          for (tempVar4 = tempVar5; tempVar4 != 0; tempVar4 = tempVar4 - 1) {\n            *arrayPtr3 = *arrayPtr4;\n            arrayPtr4 = arrayPtr4 + (ulong)byteVar * -2 + 1;\n            arrayPtr3 = arrayPtr3 + (ulong)byteVar * -2 + 1;\n          }\n          tempVar4 = arrayPtr1[6];\n          if (tempVar5 < tempVar4) {\n            for (length = tempVar4 - tempVar5; length != 0; length = length + -1) {\n              *arrayPtr3 = 0;\n              arrayPtr3 = arrayPtr3 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          length = contextPtr[1];\n          arrayPtr2 = arrayPtr2 + tempVar4;\n          arrayPtr4 = arrayPtr2 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(contextPtr[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(arrayPtr1[7],arrayPtr2);\n            (**(code **)(contextPtr[1] + 0x38))(arrayPtr1[8],arrayPtr4);\n            arrayPtr4 = arrayPtr2 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(arrayPtr1[7],arrayPtr2);\n            (**(code **)(contextPtr[1] + 0x50))(arrayPtr1[8],arrayPtr2 + 4);\n          }\n          noteSize = arrayPtr1[7];\n          input = arrayPtr1[8];\n        }\n      }\n    }\n    tempVar4 = (long)arrayPtr4 - (long)dynamicArray;\n    tempVar5 = tempVar4;\n    arrayPtr4 = dynamicArray;\n    if (tempVar4 < descriptionSize) {\n      for (; descriptionSize = tempVar4, tempVar5 != 0; tempVar5 = tempVar5 - 1) {\n        *stackVar1 = *arrayPtr4;\n        arrayPtr4 = arrayPtr4 + (ulong)byteVar * -2 + 1;\n        stackVar1 = stackVar1 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(dynamicArray);\nLAB_001166f8:\n    free(notesArray);\n    return descriptionSize;\n  }\n  if (arrayPtr1[2] != 0) {\n    tempVar5 = arrayPtr1[7];\n    tempVar4 = arrayPtr1[8];\n    tempVar8 = arrayPtr1[2];\n    arrayPtr5 = arrayPtr1;\n    iterationCount = 0;\n    if (tempVar5 == tempVar4) {\n      arrayPtr1[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptrVar1 = arrayPtr5;\n          arrayPtr5 = ptrVar1 + -9;\n          if (arrayPtr5 < notesArray) goto LAB_001167f5;\n          tempVar10 = ptrVar1[-7];\n        } while (tempVar10 == 0);\n        input = tempVar8;\n        if ((*arrayPtr5 != *arrayPtr1) ||\n           (index = memcmp((void *)ptrVar1[-6],(void *)arrayPtr1[3],*arrayPtr1), index != 0)) break;\n        tempVar8 = ptrVar1[-2];\n        tempVar6 = ptrVar1[-1];\n        if (tempVar5 == tempVar8) {\n          if (tempVar4 == tempVar6) {\n            arrayPtr1[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (tempVar4 <= tempVar6) {\n            arrayPtr1[2] = 0;\n            break;\n          }\n          if (tempVar6 < tempVar5) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < tempVar6) || (tempVar5 <= (tempVar6 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((input == 0x101) == (tempVar10 == 0x101)) {\n            if (tempVar6 <= tempVar4) {\n              tempVar6 = tempVar4;\n            }\n            if (tempVar8 < tempVar5) {\n              tempVar5 = tempVar8;\n            }\n            ptrVar1[-1] = tempVar6;\n            ptrVar1[-2] = tempVar5;\n            arrayPtr1[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (tempVar8 <= tempVar5) goto LAB_001167a6;\n          if (tempVar6 < tempVar5) goto LAB_0010852c;\n          if (tempVar4 < tempVar5) {\n            if ((0xfffffffffffffff0 < tempVar4) || (tempVar8 <= (tempVar4 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (tempVar4 != tempVar6) goto LAB_001167b8;\n        }\nFUN_00116852:\n        flag = iterationCount < 0x11;\n        tempVar8 = input;\n        iterationCount = iterationCount + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  arrayPtr1 = arrayPtr1 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_error",
                "FUN_00119ed0",
                "FUN_0011a1b0",
                "FUN_0010847a",
                "FUN_00116490",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "reverse_gnu_build_attribute_note_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "execute_initialization_0010add5"
            },
            "code": "\nvoid executeInitialization_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_two_values_00113e17"
            },
            "code": "\nvoid initializeTwoValues_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_two_values_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructure",
                "param_2": "sourceString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "tempVar1",
                "puVar2": "allocatedMemory",
                "uVar3": "copiedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructure,undefined8 sourceString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 tempVar1;\n  undefined8 *allocatedMemory;\n  undefined8 copiedString;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  copiedString = xstrdup(sourceString);\n  allocatedMemory[2] = param3;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  tempVar1 = *(undefined8 *)(dataStructure + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = param4;\n  *(undefined4 *)(allocatedMemory + 3) = param5;\n  *(undefined8 **)(dataStructure + 0x60) = allocatedMemory;\n  *allocatedMemory = tempVar1;\n  allocatedMemory[1] = copiedString;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010e453",
                "FUN_0010a69a",
                "FUN_00109ed3",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_int_00109a32",
                "param_1": "input_string",
                "param_2": "error_flag",
                "param_3": "end_of_string",
                "param_4": "returned_value_1",
                "param_5": "returned_value_2",
                "__nptr": "current_char",
                "piVar1": "error_pointer",
                "uVar2": "parsed_value",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_unsigned_int_00109a32(char **input_string,undefined *error_flag,char *end_of_string,undefined8 returned_value_1,undefined8 returned_value_2)\n\n{\n  char *current_char;\n  int *error_pointer;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    error_pointer = __errno_location();\n    *error_pointer = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*error_pointer == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(current_char,error_message);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = returned_value_2;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00108fe8",
                "__errno_location",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "parse_unsigned_int_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "check_debug_tag_type_0010c6be",
                "param_1": "file_ptr",
                "param_2": "tag_name",
                "param_3": "debug_tag_ptr",
                "iVar1": "result",
                "uVar2": "message",
                "piVar3": "new_debug_tag_ptr",
                "pauVar4": "tag_ptr",
                "lVar5": "file_offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * check_debug_tag_type_0010c6be(long file_ptr,char *tag_name,int *debug_tag_ptr)\n\n{\n  int result;\n  undefined8 message;\n  int *new_debug_tag_ptr;\n  undefined (*tag_ptr) [16];\n  long file_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (debug_tag_ptr != (int *)0x0)) {\n    if (*(long *)(file_ptr + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*debug_tag_ptr != 0x17) {\n        new_debug_tag_ptr = (int *)FUN_00112904(0x17,0);\n        if (new_debug_tag_ptr == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tag_ptr = (undefined (*) [16])xmalloc(0x10);\n        file_offset = *(long *)(file_ptr + 0x10);\n        *tag_ptr = ZEXT816(0);\n        *(int **)(*tag_ptr + 8) = debug_tag_ptr;\n        *(undefined (**) [16])(new_debug_tag_ptr + 4) = tag_ptr;\n        file_offset = FUN_00112925(file_offset + 0x10,tag_name,1,3);\n        if (file_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(file_offset + 0x20) = new_debug_tag_ptr;\n        *(long *)*tag_ptr = file_offset;\n        return new_debug_tag_ptr;\n      }\n      result = strcmp(*(char **)(**(long **)(debug_tag_ptr + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (result == 0) {\n        return debug_tag_ptr;\n      }\n    }\n    message = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "check_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "result",
                "uVar2": "count",
                "uVar3": "size",
                "uVar4": "increment",
                "local_39": "type_buffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long result;\n  ulong count;\n  ulong size;\n  uint increment;\n  char type_buffer [9];\n  \n  size = 10;\n  count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = FUN_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,type_buffer);\n    if (result == 0) {\n      if (type_buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      increment = (int)count + 1;\n      if ((uint)size <= increment) {\n        size = (ulong)((uint)size + 10);\n        result_ptr = (void *)xrealloc(result_ptr,size << 3);\n      }\n      *(long *)((long)result_ptr + count * 8) = result;\n      count = (ulong)increment;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "free",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_data_0011a2e0",
                "param_1": "binary_data",
                "param_2": "section_data",
                "uVar1": "section_base",
                "uVar2": "error_message",
                "lVar3": "extracted_data",
                "lVar4": "section_result"
            },
            "code": "\nlong extract_section_data_0011a2e0(long binary_data,long section_data)\n\n{\n  undefined8 section_base;\n  undefined8 error_message;\n  long extracted_data;\n  long section_result;\n  \n  extracted_data = (**(code **)(*(long *)(section_data + 8) + 0x208))(section_data);\n  section_result = *(long *)(binary_data + 0x20);\n  *(undefined8 *)(extracted_data + 8) = *(undefined8 *)(binary_data + 8);\n  *(undefined8 *)(extracted_data + 0x10) = *(undefined8 *)(binary_data + 0x10);\n  *(undefined4 *)(extracted_data + 0x18) = *(undefined4 *)(binary_data + 0x18);\n  if (section_result == 0) {\n    section_result = 0x128598;\n  }\n  else {\n    section_result = bfd_get_section_by_name(section_data);\n    if (section_result == 0) {\n      section_base = *(undefined8 *)(binary_data + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(error_message,section_base);\n    }\n  }\n  *(long *)(extracted_data + 0x20) = section_result;\n  return extracted_data;\n}\n\n",
            "called": [
                "FUN_00108808",
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_data_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "format_and_send_data_0010e8a9",
                "param_1": "dataPrefix",
                "param_2": "dataPostfix",
                "param_3": "data",
                "uVar1": "result",
                "sVar2": "dataLength",
                "__s": "formattedData"
            },
            "code": "\nundefined4 formatAndSendData_0010e8a9(undefined8 dataPrefix,undefined8 dataPostfix,char *data)\n\n{\n  undefined4 result;\n  size_t dataLength;\n  char *formattedData;\n  \n  dataLength = strlen(data);\n  formattedData = (char *)xmalloc(dataLength + 0x14);\n  sprintf(formattedData,\"%s:c=f%g\",dataPrefix,data);\n  result = FUN_0010e2f0(dataPostfix,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "analyze_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionFlag",
                "sVar4": "flagLength",
                "iVar1": "comparisonResult",
                "pcVar3": "delimiterPosition",
                "iVar5": "delimiterIndex",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "supportedFlags",
                "auVar6": "returnValues",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] analyzeSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *delimiterPosition;\n  char *currentFlag;\n  char *sectionFlag;\n  size_t flagLength;\n  int delimiterIndex;\n  uint sectionFlags;\n  char *supportedFlags;\n  undefined returnValues [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    sectionFlag = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionFlag == (char *)0x0) {\n                returnValues._4_4_ = 0;\n                returnValues._0_4_ = sectionFlags;\n                returnValues._8_8_ = returnAddress;\n                return returnValues;\n              }\n              delimiterPosition = strchr(sectionFlag,0x2c);\n              if (delimiterPosition == (char *)0x0) {\n                flagLength = strlen(sectionFlag);\n                delimiterIndex = (int)flagLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = delimiterPosition + 1;\n                delimiterIndex = (int)delimiterPosition - (int)sectionFlag;\n              }\n              flagLength = (size_t)delimiterIndex;\n              comparisonResult = strncasecmp(supportedFlags,sectionFlag,flagLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              sectionFlag = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionFlag,flagLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            sectionFlag = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionFlag,flagLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          sectionFlag = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionFlag,flagLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        sectionFlag = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionFlag,flagLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionFlag,flagLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        sectionFlag = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionFlag,flagLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          sectionFlag = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionFlag,flagLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            sectionFlag = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionFlag,flagLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              sectionFlag = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionFlag,flagLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                sectionFlag = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionFlag,flagLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  sectionFlag = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionFlag,flagLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    sectionFlag = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionFlag,flagLength);\n                    if (comparisonResult != 0) {\n                      delimiterPosition = (char *)xmalloc((long)(delimiterIndex + 1));\n                      strncpy(delimiterPosition,sectionFlag,flagLength);\n                      delimiterPosition[flagLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,delimiterPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    sectionFlag = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strncasecmp",
                "strncpy",
                "strchr",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "analyze_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_value_is_equal_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfValueIsEqual_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_value_is_equal_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "stdout_stream",
                "param_4": "stderr_stream",
                "lVar1": "current_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_element",
                "lVar5": "current_element_list",
                "puVar6": "current_unit_element",
                "auVar7": "return_value"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 stdout_stream,undefined8 stderr_stream)\n\n{\n  long current_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_element;\n  long current_element_list;\n  undefined8 *current_unit_element;\n  undefined return_value [16];\n  \n  current_unit = *(long *)(compilation_unit + 8);\n  if (current_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (current_element_list = *(long *)(compilation_unit + 0x20); current_element_list != 0; current_element_list = *(long *)(current_element_list + 8)) {\n      if (*(undefined8 **)(current_element_list + 0x28) != (undefined8 *)0x0) {\n        for (current_element = (undefined8 *)**(undefined8 **)(current_element_list + 0x28); current_element != (undefined8 *)0x0;\n            current_element = (undefined8 *)*current_element) {\n          if (*(int *)((long)current_element + 0x14) == 0) {\n            if (*(char *)current_element[1] == *type_name) {\n              comparison_result = strcmp((char *)current_element[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_unit_element = *(undefined8 **)(current_unit + 8); current_unit_element != (undefined8 *)0x0;\n        current_unit_element = (undefined8 *)*current_unit_element) {\n      if ((undefined8 *)current_unit_element[2] != (undefined8 *)0x0) {\n        for (current_element = *(undefined8 **)(undefined8 *)current_unit_element[2]; current_element != (undefined8 *)0x0;\n            current_element = (undefined8 *)*current_element) {\n          if (*(int *)((long)current_element + 0x14) == 0) {\n            if (*(char *)current_element[1] == *type_name) {\n              comparison_result = strcmp((char *)current_element[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  return_value._8_8_ = stderr_stream;\n  return_value._0_8_ = error_message;\n  return return_value;\nLAB_00109216:\n  error_message = current_element[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_parameter_value_0010829e",
                "unaff_EBP": "parameterValue",
                "uVar1": "returnValue"
            },
            "code": "\nundefined8 checkParameterValue_0010829e(void)\n\n{\n  undefined8 returnValue;\n  int parameterValue;\n  \n  if (parameterValue == 5) {\n    returnValue = FUN_00113ede();\n    return returnValue;\n  }\n  if ((parameterValue != 4) && (parameterValue == 6)) {\n    returnValue = FUN_001082b3();\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_parameter_value_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "display_binary_information_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedNumber",
                "iVar1": "defaultValue",
                "iVar9": "maxValue",
                "uStack000000000000000c": "indentationLevel",
                "unaff_R15D": "loopCounter",
                "uVar11": "archIndex",
                "param_7": "iterationCounter",
                "param_11": "archInfo",
                "param_13": "binaryData"
            },
            "code": "\n\n\nvoid displayBinaryInformation_00104943(void)\n\n{\n  int defaultValue;\n  int iVar2;\n  char *inputString;\n  long convertedNumber;\n  size_t sVar4;\n  char *pcVar5;\n  undefined8 uVar6;\n  int iVar7;\n  long lVar8;\n  int maxValue;\n  uint loopCounter;\n  ulong uVar10;\n  uint archIndex;\n  int iterationCounter;\n  uint indentationLevel;\n  undefined8 archInfo;\n  long binaryData;\n  \n  convertedNumber = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)convertedNumber;\n  maxValue = iterationCounter;\n  indentationLevel = loopCounter;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    iterationCounter = maxValue;\n    if (archInfo._4_4_ <= iterationCounter) {\n      return;\n    }\n    lVar8 = (long)iterationCounter;\n    iVar7 = (defaultValue - indentationLevel) + -1;\n    convertedNumber = lVar8;\n    do {\n      maxValue = (int)convertedNumber;\n      if (archInfo._4_4_ <= maxValue) break;\n      sVar4 = strlen(*(char **)(binaryData + convertedNumber * 0x60));\n      convertedNumber = convertedNumber + 1;\n      iVar7 = (iVar7 - (int)sVar4) + -1;\n    } while (-1 < iVar7);\n    printf(\"\\n%*s\",(ulong)(indentationLevel + 1),&DAT_0011b4a1);\n    for (convertedNumber = lVar8 * 0x60; ((ulong)(uint)(maxValue - iterationCounter) + lVar8) * 0x60 - convertedNumber != 0;\n        convertedNumber = convertedNumber + 0x60) {\n      printf(\"%s \",*(undefined8 *)(binaryData + convertedNumber));\n    }\n    iVar7 = 2;\n    putc(10,_stdout);\n    do {\n      pcVar5 = (char *)bfd_printable_arch_mach(iVar7,0);\n      iVar2 = strcmp(pcVar5,\"UNKNOWN!\");\n      if (iVar2 != 0) {\n        uVar6 = bfd_printable_arch_mach(iVar7,0);\n        printf(\"%*s \",(ulong)indentationLevel,uVar6);\n        archIndex = iVar7 - 2;\n        convertedNumber = lVar8 * 0x60;\n        iVar2 = iterationCounter;\n        while (maxValue != iVar2) {\n          pcVar5 = *(char **)(binaryData + convertedNumber);\n          if (*(char *)((long)(char **)(binaryData + convertedNumber) + (ulong)archIndex + 8) == '\\0') {\n            sVar4 = strlen(pcVar5);\n            for (uVar10 = sVar4 & 0xffffffff; (int)uVar10 != 0; uVar10 = (ulong)((int)uVar10 - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(pcVar5,_stdout);\n          }\n          iVar2 = iVar2 + 1;\n          if (maxValue != iVar2) {\n            putc(0x20,_stdout);\n          }\n          convertedNumber = convertedNumber + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      iVar7 = iVar7 + 1;\n    } while (iVar7 != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "display_binary_information_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_new_entry_00113e23",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "puVar2": "newEntry"
            },
            "code": "\nlong createNewEntry_00113e23(undefined8 input1,undefined8 input2)\n\n{\n  long result;\n  undefined8 *newEntry;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    newEntry = (undefined8 *)xmalloc(0x10);\n    *newEntry = input1;\n    newEntry[1] = input2;\n    *(undefined8 **)(result + 0x10) = newEntry;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_new_entry_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "stab",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 stab)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stab);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "iVar1": "intValue",
                "pbVar2": "currentChar",
                "pbVar3": "nextChar",
                "uVar4": "result"
            },
            "code": "\nulong parseNumber_00108ea1(byte **inputPtr,int *outputPtr)\n\n{\n  int intValue;\n  byte *currentChar;\n  byte *nextChar;\n  ulong result;\n  \n  currentChar = *inputPtr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*currentChar * 2] & 4) != 0) {\n    nextChar = currentChar + 1;\n    intValue = (char)*currentChar + -0x30;\n    *outputPtr = intValue;\n    *inputPtr = nextChar;\n    if (((&_sch_istable)[(ulong)currentChar[1] * 2] & 4) != 0) {\n      do {\n        currentChar = nextChar;\n        intValue = intValue * 10 + -0x30 + (int)(char)*currentChar;\n        nextChar = currentChar + 1;\n      } while (((&_sch_istable)[(ulong)currentChar[1] * 2] & 4) != 0);\n      if (currentChar[1] == 0x5f) {\n        nextChar = currentChar + 2;\n        *inputPtr = nextChar;\n        *outputPtr = intValue;\n      }\n    }\n    result = CONCAT71((int7)((ulong)nextChar >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "initialize_memory_00108072",
                "lVar5": "errorMessage",
                "lVar8": "size",
                "lVar6": "allocationResult",
                "lVar7": "alignment",
                "unaff_RBX": "parameters",
                "unaff_R14B": "flag",
                "unaff_R15": "memoryAddress",
                "bVar1": "byteVariable",
                "uVar2": "unaff_RBXValue",
                "cVar3": "charVariable",
                "uVar4": "uintVariable"
            },
            "code": "\n\n\nvoid initializeMemory_00108072(void)\n\n{\n  byte byteVariable;\n  undefined8 unaff_RBXValue;\n  char charVariable;\n  uint uintVariable;\n  long errorMessage;\n  long allocationResult;\n  long alignment;\n  undefined8 *parameters;\n  long unaff_RBP;\n  long unaff_R12;\n  long size;\n  char flag;\n  long memoryAddress;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  size = parameters[6];\n  allocationResult = FUN_00114190(*parameters,0,0x18);\n  if (allocationResult == 0) {\n    *(byte *)(memoryAddress + 0x28) = *(byte *)(memoryAddress + 0x28) | 1;\n    unaff_RBXValue = *parameters;\n    size = size + _DAT_001279b0;\n    *(long *)(memoryAddress + 0x30) = size;\n    *(long *)(memoryAddress + 0x38) = size;\n    size = parameters[7];\n    allocationResult = FUN_00114190(unaff_RBXValue,0,0x60);\n    if (allocationResult == 0) goto LAB_00115695;\nLAB_00115860:\n    alignment = *(long *)(allocationResult + 0x20);\n    if ((*(byte *)(allocationResult + 0x14) & 0x40) != 0) {\n      alignment = alignment + size;\n    }\n    *(long *)(memoryAddress + 0x38) = alignment;\n    size = FUN_00114190(*parameters,0,0x200);\n    if (size != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVariable = *(uint *)((long)parameters + 0x7c);\n    if (uintVariable < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(memoryAddress + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(memoryAddress + 0x28) =\n         *(byte *)(memoryAddress + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = memoryAddress;\n    parameters[0xb] = 0;\n    byteVariable = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    alignment = *(long *)(allocationResult + 0x18);\n    if ((*(byte *)(allocationResult + 0x14) & 8) == 0) {\n      alignment = alignment + size;\n    }\n    *(byte *)(memoryAddress + 0x28) = *(byte *)(memoryAddress + 0x28) | 1;\n    unaff_RBXValue = *parameters;\n    *(long *)(memoryAddress + 0x30) = alignment;\n    *(long *)(memoryAddress + 0x38) = alignment;\n    size = parameters[7];\n    allocationResult = FUN_00114190(unaff_RBXValue,0,0x60);\n    if (allocationResult != 0) goto LAB_00115860;\nLAB_00115695:\n    unaff_RBXValue = *parameters;\n    *(long *)(memoryAddress + 0x38) = size + _DAT_001279b0;\n    size = FUN_00114190(unaff_RBXValue,0,0x200);\n    if (size == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVariable = *(uint *)(size + 0x2c);\n    if (0x3e < uintVariable) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(memoryAddress + 0x7c) = uintVariable;\n    *(undefined4 *)(memoryAddress + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(memoryAddress + 0x28) =\n         *(byte *)(memoryAddress + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = memoryAddress;\n    parameters[0xb] = 0;\n    byteVariable = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byteVariable & 2) != 0) {\n    size = parameters[0x1a];\n    allocationResult = FUN_00115d00(size,parameters[0x1c]);\n    if ((allocationResult != 0) &&\n       (alignment = *(long *)(unaff_R12 + 8), *(uint *)(allocationResult + 0x18) = *(uint *)(allocationResult + 0x18) | 0x20,\n       *(int *)(alignment + 8) == 5)) {\n      *(long *)(size + 0xb0) = allocationResult;\n      charVariable = (**(code **)(*(long *)(unaff_RBP + 8) + 0x158))();\n      if (charVariable == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVariable = (**(code **)(*(long *)(unaff_RBP + 8) + 0x158))();\n  if (charVariable == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(memoryAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "initialize_memory_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "create_formatted_string_0010a2b9",
                "param_1": "source",
                "param_2": "flag",
                "param_3": "data1",
                "param_4": "data2",
                "cVar1": "charVar1",
                "__s": "tempStr1",
                "sVar2": "strLen",
                "__s_00": "formattedStr",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] createFormattedString_0010a2b9(long source,char flag,undefined8 data1,undefined8 data2)\n\n{\n  char charVar1;\n  char *tempStr1;\n  size_t strLen;\n  char *formattedStr;\n  long counter;\n  undefined result [16];\n  \n  charVar1 = *(char *)(*(long *)(source + 0x60) + 0x1c);\n  tempStr1 = (char *)FUN_00109b2f();\n  strLen = strlen(tempStr1);\n  formattedStr = (char *)xmalloc(strLen + 0x1e);\n  if (flag == '\\0') {\n    *formattedStr = '\\0';\n    counter = 0;\n    flag = charVar1;\n  }\n  else {\n    counter = *(long *)(source + 0x68);\n    *(long *)(source + 0x68) = counter + 1;\n    sprintf(formattedStr,\"%ld=@S;\",counter);\n  }\n  strLen = strlen(formattedStr);\n  sprintf(formattedStr + strLen,\"S%s\",tempStr1);\n  free(tempStr1);\n  result._0_4_ = FUN_00109b52(source,formattedStr,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedStr);\n  }\n  result._8_8_ = data2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "var1",
                "param_4": "var2",
                "param_5": "var3",
                "param_6": "var4",
                "iVar1": "counter",
                "cVar2": "result"
            },
            "code": "\nundefined processData_0010ec73(long *data,long value,undefined8 var1,undefined8 var2,\n                      undefined8 var3,undefined8 var4)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = FUN_0010e2f0(data,0xc0,0,data[0x41],0,var4,var2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_remove_file_00115970",
                "param_1": "sourceFile",
                "param_2": "destinationFile",
                "param_3": "filePermissions",
                "param_4": "fileOwner",
                "param_5": "removeSource",
                "param_6": "result",
                "uVar1": "copyStatus",
                "piVar2": "errorCode",
                "pcVar3": "errorMessage",
                "uVar4": "copyErrorMessage",
                "uVar5": "unlinkStatus",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndRemoveFile_00115970(char *sourceFile,char *destinationFile,undefined4 filePermissions,undefined8 fileOwner,char removeSource,\n            undefined8 result)\n\n{\n  uint copyStatus;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 copyErrorMessage;\n  ulong unlinkStatus;\n  undefined returnValue [16];\n  \n  if (destinationFile == sourceFile) {\n    unlinkStatus = 0;\n  }\n  else {\n    copyStatus = FUN_00115a90(filePermissions,destinationFile,fileOwner);\n    unlinkStatus = (ulong)copyStatus;\n    if (copyStatus != 0) {\n      errorCode = __errno_location();\n      errorMessage = strerror(*errorCode);\n      copyErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(copyErrorMessage,destinationFile,errorMessage);\n    }\n    unlink(sourceFile);\n  }\n  if (removeSource != '\\0') {\n    FUN_0011a350(destinationFile,fileOwner);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = unlinkStatus;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "execute_function_0010adf2"
            },
            "code": "\nvoid execute_function_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "extract_data_and_add_to_buffer_0010d7d4",
                "param_1": "data",
                "param_2": "ptrToData",
                "param_3": "ptrToBuffer",
                "param_4": "numElementsInBuffer",
                "param_5": "bufferCapacity",
                "uVar1": "dataValue",
                "cVar2": "isValid",
                "uVar3": "returnValue",
                "lVar4": "bufferPtr",
                "plVar5": "bufferPtrToUse",
                "uVar6": "numElements",
                "local_40": "localDataArray"
            },
            "code": "\nundefined4\nextractDataAndAddToBuffer_0010d7d4(undefined8 data,undefined8 *ptrToData,long *ptrToBuffer,uint *numElementsInBuffer,uint *bufferCapacity)\n\n{\n  undefined8 dataValue;\n  char isValid;\n  undefined4 returnValue;\n  long bufferPtr;\n  long *bufferPtrToUse;\n  uint numElements;\n  long localDataArray [2];\n  \n  dataValue = *ptrToData;\n  bufferPtrToUse = localDataArray;\n  if (ptrToBuffer == (long *)0x0) {\n    bufferPtrToUse = (long *)0x0;\n  }\n  isValid = FUN_0010c95e(data,ptrToData,bufferPtrToUse);\n  if ((isValid != '\\0') &&\n     (returnValue = FUN_00109be3(data,dataValue,(int)*ptrToData - (int)dataValue), (char)returnValue != '\\0')) {\n    if (ptrToBuffer == (long *)0x0) {\n      return returnValue;\n    }\n    if (localDataArray[0] != 0) {\n      if (*bufferCapacity <= *numElementsInBuffer + 1) {\n        numElements = *bufferCapacity + 10;\n        bufferPtr = *ptrToBuffer;\n        *bufferCapacity = numElements;\n        bufferPtr = xrealloc(bufferPtr,(ulong)numElements << 3);\n        *ptrToBuffer = bufferPtr;\n      }\n      numElements = *numElementsInBuffer;\n      *(long *)(*ptrToBuffer + (ulong)numElements * 8) = localDataArray[0];\n      *numElementsInBuffer = numElements + 1;\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xrealloc",
                "FUN_00109be3",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "extract_data_and_add_to_buffer_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPointer",
                "uVar3": "message",
                "pcVar4": "error",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong checkFile_00113f50(char *filePath)\n\n{\n  int status;\n  int *errnoPointer;\n  undefined8 message;\n  char *error;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errnoPointer = __errno_location();\n      if (*errnoPointer == 2) {\n        message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(message,filePath);\n      }\n      else {\n        error = strerror(*errnoPointer);\n        message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(message,filePath,error);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(message,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(message,filePath);\n    }\n    else {\n      message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(message,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "currentLocale",
                "__format": "formatSpecifier",
                "plVar2": "formatStringPtr"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 currentLocale;\n  char *formatSpecifier;\n  long *formatStringPtr;\n  \n  fflush(_stdout);\n  currentLocale = DAT_00127600;\n  formatSpecifier = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatSpecifier,currentLocale);\n  for (formatStringPtr = formatStrings; *formatStringPtr != 0; formatStringPtr = formatStringPtr + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "initialize_binary_0011378f",
                "param_1": "outputList",
                "param_2": "inputList",
                "param_3": "allocatedMemory",
                "param_4": "outputHash",
                "param_5": "outputString",
                "param_6": "outputFlag",
                "auVar1": "tempVar",
                "cVar2": "result",
                "uVar3": "error",
                "uVar4": "errorMessage",
                "puVar5": "destination",
                "sVar6": "stringLength",
                "lVar7": "loopCounter",
                "puVar8": "loopVariable1",
                "puVar9": "loopVariable2",
                "__dest": "destination2",
                "puVar10": "loopVariable3",
                "plVar11": "loopVariable4",
                "bVar12": "flag",
                "local_258": "outputPointer",
                "local_250": "allocatedMemory2",
                "local_248": "counter1",
                "uStack_244": "counter2",
                "uStack_240": "constant1",
                "uStack_23c": "constant2",
                "local_238": "tempArray",
                "local_228": "constant3",
                "local_220": "tempArray2",
                "local_1f8": "constant4",
                "local_1f0": "constant5",
                "local_1e8": "initialHash",
                "local_a0": "hashTable",
                "local_78": "constant6",
                "uStack_70": "tempVar2",
                "local_68": "constant7",
                "local_60": "constant8",
                "local_58": "constant9",
                "uStack_54": "constant10",
                "uStack_50": "constant11",
                "uStack_4c": "constant12"
            },
            "code": "\nundefined4\ninitializeBinary_0011378f(undefined8 *outputList,undefined8 *inputList,long *allocatedMemory,undefined8 *outputHash,\n            undefined8 *outputString,undefined8 *outputFlag)\n\n{\n  undefined tempVar [16];\n  char result;\n  undefined4 error;\n  undefined8 errorMessage;\n  undefined *destination;\n  size_t stringLength;\n  long loopCounter;\n  undefined8 *loopVariable1;\n  undefined4 *loopVariable2;\n  char *destination2;\n  undefined8 *loopVariable3;\n  long *loopVariable4;\n  byte flag;\n  undefined8 *outputPointer;\n  long allocatedMemory2;\n  undefined4 counter1;\n  undefined4 counter2;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined tempArray [16];\n  undefined8 constant3;\n  undefined tempArray2 [40];\n  undefined8 constant4;\n  undefined8 constant5;\n  undefined4 initialHash [82];\n  undefined hashTable [40];\n  undefined constant6 [8];\n  undefined8 tempVar2;\n  undefined8 constant7;\n  undefined4 constant8;\n  undefined4 constant9;\n  undefined4 constant10;\n  undefined4 constant11;\n  undefined4 constant12;\n  \n  flag = 0;\n  counter1 = 0;\n  counter2 = 0;\n  constant1 = 500;\n  constant2 = 0;\n  outputPointer = outputList;\n  allocatedMemory2 = xmalloc(500);\n  constant3 = 1;\n  tempArray = ZEXT816(0);\n  result = bfd_hash_table_init(tempArray2,FUN_0010bb52,0x30);\n  if ((result == '\\0') || (result = bfd_hash_table_init(hashTable,FUN_0010bb52,0x30), result == '\\0')) {\n    error = bfd_get_error();\n    errorMessage = bfd_errmsg(error);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",errorMessage);\n  }\n  else {\n    constant4 = 0;\n    unique0x100000e9 = 0xffffffff;\n    constant6 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    loopVariable2 = initialHash;\n    for (loopCounter = 0x52; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *loopVariable2 = 0;\n      loopVariable2 = loopVariable2 + (ulong)flag * -2 + 1;\n    }\n    constant7 = 0;\n    constant8 = 0;\n    constant5 = 1;\n    constant9 = 0;\n    constant10 = 0;\n    constant11 = 0xffffffff;\n    constant12 = 0xffffffff;\n    result = FUN_0010e2f0(&outputPointer,0,0,0,0);\n    tempVar = _constant6;\n    if (result != '\\0') {\n      constant6._4_4_ = counter2;\n      constant6._0_4_ = counter1;\n      tempVar2 = tempVar._8_8_;\n      result = FUN_0010e2f0(&outputPointer,100,0,0,*outputList);\n      if (result != '\\0') {\n        *(int *)(inputList + 6) = *(int *)(inputList + 6) + 1;\n        inputList[10] = 0;\n        loopVariable3 = (undefined8 *)*inputList;\n        *(undefined4 *)(inputList + 7) = *(undefined4 *)((long)inputList + 0x34);\n        for (; loopVariable3 != (undefined8 *)0x0; loopVariable3 = (undefined8 *)*loopVariable3) {\n          inputList[8] = loopVariable3[2];\n          *(undefined4 *)(inputList + 9) = 0;\n          result = thunk_FUN_0010e439(&outputPointer,*(undefined8 *)(loopVariable3[1] + 8));\n          if (result == '\\0') {\n            return 0;\n          }\n          loopVariable4 = (long *)loopVariable3[1];\n          if (loopVariable4 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)loopVariable4[2] != (undefined8 *)0x0) {\n                for (loopVariable1 = *(undefined8 **)(undefined8 *)loopVariable4[2]; loopVariable1 != (undefined8 *)0x0;\n                    loopVariable1 = (undefined8 *)*loopVariable1) {\n                  result = FUN_001135a5(inputList,&outputPointer);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              loopVariable4 = (long *)*loopVariable4;\n              if (loopVariable4 == (long *)0x0) break;\n              result = FUN_0010e439(&outputPointer,loopVariable4[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = FUN_00112502(inputList,&outputPointer,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(constant12,constant11) == -1) &&\n           (error = FUN_0010e2f0(&outputPointer,100,0,constant7,0), (char)error != '\\0')) {\n          (**(code **)(outputList[1] + 0x50))(constant3,allocatedMemory2 + 8);\n          *allocatedMemory = allocatedMemory2;\n          *outputHash = CONCAT44(counter2,counter1);\n          *outputFlag = constant3;\n          destination = (undefined *)xmalloc();\n          *destination = 0;\n          destination2 = destination + 1;\n          *outputString = destination;\n          for (loopCounter = tempArray._0_8_; loopCounter != 0; loopCounter = *(long *)(loopCounter + 0x18)) {\n            strcpy(destination2,*(char **)(loopCounter + 8));\n            stringLength = strlen(destination2);\n            destination2 = destination2 + stringLength + 1;\n          }\n          return error;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_errmsg",
                "thunk_FUN_0010e439",
                "bfd_hash_table_init",
                "FUN_0010e439",
                "strlen",
                "strcpy",
                "FUN_00112502",
                "bfd_get_error",
                "FUN_0010e2f0",
                "FUN_0010bb52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_binary_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_not_found_error_00104966",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileNotFoundError_00104966(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  \n  errorPointer = __errno_location();\n  if (*errorPointer == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errorPointer);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_not_found_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a0a0(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x26,4,dataPointer + 0x198,dataPointer + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "initialize_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "param10_copy",
                "local_a8": "param11_copy",
                "local_a0": "param12_copy",
                "local_98": "param13_copy",
                "local_90": "param14_copy",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy"
            },
            "code": "\nvoid initializeData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 length;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (condition != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  pointer1 = &stack0x00000008;\n  size = 8;\n  pointer2 = buffer;\n  length = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  FUN_00119e70(param9,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108375",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00113f50",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00105828",
                "FUN_0010e6a8",
                "FUN_0010b800",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001152b6",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "initialize_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "write_type_information_00112c1f",
                "param_1": "info",
                "param_2": "name",
                "param_3": "type",
                "param_4": "baseType",
                "plVar1": "typePtr",
                "lVar2": "temp",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "cVar5": "result",
                "piVar6": "ptr3",
                "uVar7": "output",
                "uVar8": "var1",
                "iVar9": "var2",
                "uVar10": "var3",
                "uVar11": "var4",
                "uVar12": "count",
                "uVar13": "value",
                "bVar14": "isParam3Equal",
                "local_3c": "localVariable"
            },
            "code": "\n\n\nundefined8 writeTypeInformation_00112c1f(ulong info,undefined8 name,int *type,long baseType)\n\n{\n  long *typePtr;\n  long temp;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  char result;\n  int *ptr3;\n  undefined8 output;\n  undefined8 var1;\n  int var2;\n  undefined4 var3;\n  undefined8 var4;\n  ulong count;\n  uint value;\n  bool isParam3Equal;\n  uint localVariable;\n  \n  count = info;\nLAB_00112c39:\n  if (type != (int *)0x0) {\n    var2 = *type;\n    if (var2 - 0x16U < 2) {\n      do {\n        typePtr = *(long **)(type + 4);\n        value = *(uint *)(info + 0x30);\n        count = (ulong)value;\n        temp = *typePtr;\n        if (*(uint *)(temp + 0x10) == value) {\n          if (var2 == 0x16) {\n            output = FUN_0010bba1(name,*(undefined8 *)(temp + 8));\n            return output;\n          }\nLAB_00112c94:\n          ptr3 = (int *)FUN_00112b6e(type,0);\n          if (ptr3 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr3 - 7U < 4) && (*(long *)(ptr3 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr3 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (result = FUN_0010c7a0(info,*(undefined8 *)(**(long **)(type + 4) + 8),ptr3),\n               result == '\\0')) {\n              return 0;\n            }\n            value = *(uint *)(*(long *)(ptr3 + 4) + 0xc);\n          }\n          else {\n            value = 0;\n          }\n          var2 = *ptr3;\n          output = *(undefined8 *)(**(long **)(type + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var2 == 0x17) {\n          if (temp != baseType) goto LAB_00112c94;\n          *(uint *)(baseType + 0x10) = value;\n          baseType = *typePtr;\n          type = (int *)typePtr[1];\n          goto LAB_00112c39;\n        }\n        if (baseType != 0) {\n          *(uint *)(baseType + 0x10) = value;\n        }\n        type = (int *)typePtr[1];\n        if (type == (int *)0x0) goto LAB_00112dd6;\n        var2 = *type;\n        baseType = 0;\n      } while (var2 - 0x16U < 2);\nLAB_00112d74:\n      output = 0;\n    }\n    else {\n      if (baseType == 0) goto LAB_00112d74;\n      *(undefined4 *)(baseType + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(baseType + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      output = *(undefined8 *)(baseType + 8);\n    }\n    switch(var2) {\n    case 0:\n      output = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",output);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      output = FUN_00109dfe(name);\n      return output;\n    case 3:\n      output = FUN_0010b800(name,type[1],*(undefined *)(type + 4));\n      return output;\n    case 4:\n      output = FUN_0010b948(name,type[1]);\n      return output;\n    case 5:\n      output = FUN_00109e76(name,type[1]);\n      return output;\n    case 6:\n      output = FUN_00109d3e(name,type[1]);\n      return output;\n    case 7:\n    case 8:\n      if (*(long *)(type + 4) != 0) {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (result = FUN_0010c7a0(info,output,type), result == '\\0')) {\n          return 0;\n        }\n        temp = *(long *)(type + 4);\n        if (*(int *)(info + 0x30) == *(int *)(temp + 8)) {\n          value = *(uint *)(temp + 0xc);\n          if (value <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var2 = *type;\nLAB_00112ed2:\n          output = FUN_00109d5c(name,output,value,var2);\n          return output;\n        }\n        *(int *)(temp + 8) = *(int *)(info + 0x30);\n      }\n      var3 = 0;\n      if (*(long *)(type + 4) != 0) {\n        var3 = *(undefined4 *)(*(long *)(type + 4) + 0xc);\n      }\n      result = FUN_0010a69a(name,output,var3,*type == 7,type[1]);\n      if (result == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type + 4) != (long *)0x0) && (count = 0, **(long **)(type + 4) != 0)) {\n        while( true ) {\n          ptr2 = *(undefined8 **)(**(long **)(type + 4) + count * 8);\n          if (ptr2 == (undefined8 *)0x0) break;\n          result = writeTypeInformation_00112c1f(info,name,ptr2[1],0);\n          if (result == '\\0') {\n            return 0;\n          }\n          result = FUN_0010ba08(name,*ptr2,*(undefined4 *)(ptr2 + 3),\n                               *(undefined4 *)((long)ptr2 + 0x1c),*(undefined4 *)(ptr2 + 2));\n          if (result == '\\0') {\n            return 0;\n          }\n          count = (ulong)((int)count + 1);\n        }\n      }\n      output = FUN_0010a77a(name);\n      return output;\n    case 9:\n    case 10:\n      if (*(long *)(type + 4) == 0) {\n        value = 0;\n        ptr3 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (count = info, result = FUN_0010c7a0(info,output,type), result == '\\0')) {\n          return 0;\n        }\n        temp = *(long *)(type + 4);\n        value = *(uint *)(temp + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(temp + 8)) {\n          if (value <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var2 = *type;\n          goto LAB_00112ed2;\n        }\n        ptr3 = *(int **)(temp + 0x20);\n        *(int *)(temp + 8) = *(int *)(info + 0x30);\n        if (((ptr3 != (int *)0x0) && (type != ptr3)) &&\n           (count = info, result = writeTypeInformation_00112c1f(info,name,ptr3,0), result == '\\0')) {\n          return 0;\n        }\n      }\n      result = FUN_0010a83e(name,output,value,*type == 9,type[1],ptr3 != (int *)0x0,\n                           type == ptr3,count);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type + 4) != (long *)0x0) {\n        value = 0;\n        if (**(long **)(type + 4) != 0) {\n          while (ptr2 = *(undefined8 **)(**(long **)(type + 4) + (ulong)value * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = writeTypeInformation_00112c1f(info,name,ptr2[1],0);\n            if (result == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr2 + 0x14) == '\\0') {\n              result = FUN_0010ba08(name,*ptr2,*(undefined4 *)(ptr2 + 3));\n            }\n            else {\n              result = FUN_0010a94e(name,*ptr2,ptr2[3]);\n            }\n            if (result == '\\0') {\n              return 0;\n            }\n            value = value + 1;\n          }\n        }\n        value = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x10) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x10) + (ulong)value * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = writeTypeInformation_00112c1f(info,name,*ptr2,0);\n            if (result == '\\0') {\n              return 0;\n            }\n            result = FUN_0010aa53(name,*(undefined4 *)(ptr2 + 1),\n                                 *(undefined *)((long)ptr2 + 0xc));\n            if (result == '\\0') {\n              return 0;\n            }\n            value = value + 1;\n          }\n        }\n        localVariable = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x18) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x18) + (ulong)localVariable * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = FUN_0010ab4d(name,*ptr2);\n            if (result == '\\0') {\n              return 0;\n            }\n            value = 0;\n            while (ptr1 = *(undefined8 **)(ptr2[1] + (ulong)value * 8),\n                  ptr1 != (undefined8 *)0x0) {\n              if ((ptr1[4] != 0) &&\n                 (result = writeTypeInformation_00112c1f(info,name,ptr1[4],0), result == '\\0')) {\n                return 0;\n              }\n              result = writeTypeInformation_00112c1f(info,name,ptr1[1],0);\n              if (result == '\\0') {\n                return 0;\n              }\n              if (ptr1[3] == -1) {\n                result = FUN_0010adf2(name,*ptr1,*(undefined4 *)(ptr1 + 2),\n                                     *(undefined *)((long)ptr1 + 0x14),\n                                     *(undefined *)((long)ptr1 + 0x15));\n              }\n              else {\n                result = FUN_0010add5(name);\n              }\n              if (result == '\\0') {\n                return 0;\n              }\n              value = value + 1;\n            }\n            result = FUN_00109bbb(name);\n            if (result == '\\0') {\n              return 0;\n            }\n            localVariable = localVariable + 1;\n          }\n        }\n      }\n      output = FUN_0010ae0e(name);\n      return output;\n    case 0xb:\n      ptr2 = *(undefined8 **)(type + 4);\n      if (ptr2 == (undefined8 *)0x0) {\n        var1 = 0;\n        var4 = 0;\n      }\n      else {\n        var1 = ptr2[1];\n        var4 = *ptr2;\n      }\n      output = FUN_0010e453(name,output,var4,var1);\n      return output;\n    case 0xc:\n      result = writeTypeInformation_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a083(name);\n      return output;\n    case 0xd:\n      result = writeTypeInformation_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      count = 0;\n      if (*(long *)(*(long *)(type + 4) + 8) == 0) {\n        count = 0xffffffff;\n      }\n      else {\n        while (temp = *(long *)(*(long *)(*(long *)(type + 4) + 8) + count * 8), temp != 0) {\n          count = count + 1;\n          result = writeTypeInformation_00112c1f(info,name,temp,0);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        count = count & 0xffffffff;\n      }\n      output = FUN_0010e5db(name,count,*(undefined *)(*(long *)(type + 4) + 0x10));\n      return output;\n    case 0xe:\n      result = writeTypeInformation_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a0a0(name);\n      return output;\n    case 0xf:\n      result = writeTypeInformation_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a0e9(name,*(undefined8 *)(*(long *)(type + 4) + 8),\n                           *(undefined8 *)(*(long *)(type + 4) + 0x10));\n      return output;\n    case 0x10:\n      result = writeTypeInformation_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = writeTypeInformation_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      temp = *(long *)(type + 4);\n      output = FUN_0010a181(name,*(undefined8 *)(temp + 0x10),*(undefined8 *)(temp + 0x18),\n                           *(undefined *)(temp + 0x20));\n      return output;\n    case 0x11:\n      result = writeTypeInformation_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a2b9(name,*(undefined *)(*(long *)(type + 4) + 8));\n      return output;\n    case 0x12:\n      result = writeTypeInformation_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = writeTypeInformation_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a377(name);\n      return output;\n    case 0x13:\n      result = writeTypeInformation_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      count = 0;\n      if (*(long *)(*(long *)(type + 4) + 0x10) == 0) {\n        count = 0xffffffff;\n      }\n      else {\n        while (temp = *(long *)(*(long *)(*(long *)(type + 4) + 0x10) + count * 8), temp != 0)\n        {\n          count = count + 1;\n          result = writeTypeInformation_00112c1f(info,name,temp,0);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type + 4) + 8) != 0) &&\n         (result = writeTypeInformation_00112c1f(info,name,*(long *)(*(long *)(type + 4) + 8),0),\n         result == '\\0')) {\n        return 0;\n      }\n      output = FUN_0010a424(name,*(long *)(*(long *)(type + 4) + 8) != 0,count & 0xffffffff,\n                           *(undefined *)(*(long *)(type + 4) + 0x18));\n      return output;\n    case 0x14:\n      result = writeTypeInformation_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a0bd(name);\n      return output;\n    case 0x15:\n      result = writeTypeInformation_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      output = FUN_0010a0d3(name);\n      return output;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  isParam3Equal = *(int **)**(undefined8 **)(type + 4) == type;\n  type = *(int **)**(undefined8 **)(type + 4);\n  if (isParam3Equal) {\nLAB_00112dd6:\n    output = FUN_00109d97(name);\n    return output;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c7a0",
                "FUN_0010a181",
                "FUN_00109e76",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010a77a",
                "FUN_0010adf2",
                "FUN_00109dfe",
                "__assert_fail",
                "FUN_0010ba08",
                "FUN_0010e453",
                "FUN_0010a0bd",
                "FUN_0010a69a",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010ae0e",
                "FUN_00112b6e",
                "FUN_0010a94e",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010add5",
                "FUN_0010a377",
                "abort",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_00112c1f",
                "FUN_0010a0a0",
                "FUN_0010ab4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "write_type_information_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopySuccessful",
                "unaff_R15": "dataAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopySuccessful;\n  long dataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(dataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "errorMessage",
                "param_2": "fileName",
                "__format": "formatString",
                "in_RAX": "returnValue"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 errorMessage,undefined8 fileName)\n\n{\n  undefined8 returnValue;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,fileName,errorMessage,returnValue);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_architecture_00105828",
                "iVar1": "arch",
                "uVar2": "machine",
                "uVar3": "inputFile",
                "uVar4": "errorMsg"
            },
            "code": "\nundefined8 checkArchitecture_00105828(void)\n\n{\n  int arch;\n  undefined4 machine;\n  undefined8 inputFile;\n  undefined8 errorMsg;\n  \n  arch = bfd_get_arch();\n  if (arch == 0) {\n    inputFile = FUN_001125fa();\n    errorMsg = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMsg,inputFile);\n  }\n  else {\n    inputFile = bfd_get_mach();\n    machine = bfd_get_arch();\n    inputFile = bfd_printable_arch_mach(machine,inputFile);\n    errorMsg = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMsg,inputFile);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "generate_temp_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "result"
            },
            "code": "\nchar * generateTempDirectory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)FUN_00114cf0();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "generate_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_valid_value_0010bba1",
                "param_1": "base_address",
                "param_2": "key",
                "lVar1": "hash_result",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_valid_value_0010bba1(long base_address,undefined8 key)\n\n{\n  long hash_result;\n  undefined8 result;\n  \n  hash_result = bfd_hash_lookup(base_address + 0x1b8,key,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    result = FUN_00109cf4(base_address,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_valid_value_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "parse_and_store_data_0010e6a8",
                "param_1": "data_structure",
                "param_2": "input_string",
                "param_3": "unused_1",
                "param_4": "unused_2",
                "__s": "result_string",
                "sVar3": "input_length",
                "sVar4": "result_length",
                "__s_00": "formatted_string",
                "lVar5": "lookup_result",
                "lVar8": "counter",
                "uVar9": "return_value",
                "uVar1": "hash_result",
                "uVar2": "hash_value",
                "uVar6": "error_msg",
                "uVar7": "error_string",
                "auVar10": "return_data"
            },
            "code": "\nundefined  [16] parse_and_store_data_0010e6a8(long data_structure,char *input_string,undefined8 unused_1,undefined8 unused_2)\n\n{\n  uint hash_result;\n  undefined4 hash_value;\n  char *result_string;\n  size_t input_length;\n  size_t result_length;\n  char *formatted_string;\n  long lookup_result;\n  undefined8 error_msg;\n  undefined8 error_string;\n  long counter;\n  ulong return_value;\n  undefined return_data [16];\n  \n  counter = *(long *)(*(long *)(data_structure + 0x60) + 0x10);\n  hash_value = *(undefined4 *)(*(long *)(data_structure + 0x60) + 0x18);\n  result_string = (char *)FUN_00109b2f();\n  input_length = strlen(input_string);\n  result_length = strlen(result_string);\n  formatted_string = (char *)xmalloc(input_length + 0x14 + result_length);\n  if (counter < 1) {\n    counter = *(long *)(data_structure + 0x68);\n    *(long *)(data_structure + 0x68) = counter + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",input_string,counter,result_string);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",input_string,result_string);\n  }\n  free(result_string);\n  hash_result = FUN_0010e2f0(data_structure,0x80,0,0,formatted_string);\n  return_value = (ulong)hash_result;\n  if ((char)hash_result != '\\0') {\n    free(formatted_string);\n    lookup_result = bfd_hash_lookup(data_structure + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = hash_value;\n      goto LAB_0010e7b3;\n    }\n    hash_value = bfd_get_error();\n    error_msg = bfd_errmsg(hash_value);\n    error_string = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(error_string,error_msg);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  return_data._8_8_ = unused_2;\n  return_data._0_8_ = return_value;\n  return return_data;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "sprintf",
                "bfd_errmsg",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "parse_and_store_data_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_and_send_data_0010e7c2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "__s": "string_1",
                "sVar1": "length_1",
                "sVar2": "length_2",
                "__s_00": "formattedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e7c2(undefined8 input_1,char *input_2,undefined8 input_3,undefined8 input_4)\n\n{\n  char *string_1;\n  size_t length_1;\n  size_t length_2;\n  char *formattedString;\n  undefined result [16];\n  \n  string_1 = (char *)FUN_00109b2f();\n  length_1 = strlen(input_2);\n  length_2 = strlen(string_1);\n  formattedString = (char *)xmalloc(length_1 + 3 + length_2);\n  sprintf(formattedString,\"%s:T%s\",input_2,string_1);\n  free(string_1);\n  result._0_4_ = FUN_0010e2f0(input_1,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = input_4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_and_exit_00119dd0",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "param_4": "fourthParameter",
                "param_5": "fifthParameter",
                "param_6": "sixthParameter",
                "param_7": "seventhParameter",
                "param_8": "eighthParameter",
                "param_9": "firstArgument",
                "param_10": "secondArgument",
                "param_11": "thirdArgument",
                "param_12": "fourthArgument",
                "param_13": "fifthArgument",
                "param_14": "sixthArgument",
                "in_AL": "isConditionMet",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "pointer",
                "local_c8": "array",
                "local_b8": "temporary",
                "local_b0": "tenthArgument",
                "local_a8": "eleventhArgument",
                "local_a0": "twelfthArgument",
                "local_98": "thirteenthArgument",
                "local_90": "fourteenthArgument",
                "local_88": "firstLocalVariable",
                "local_78": "secondLocalVariable",
                "local_68": "thirdLocalVariable",
                "local_58": "fourthLocalVariable",
                "local_48": "fifthLocalVariable",
                "local_38": "sixthLocalVariable",
                "local_28": "seventhLocalVariable",
                "local_18": "eighthLocalVariable"
            },
            "code": "\nvoid initializeAndExit_00119dd0(undefined4 firstParameter,undefined4 secondParameter,undefined4 param_3,undefined4 fourthParameter,\n                 undefined4 fifthParameter,undefined4 sixthParameter,undefined4 seventhParameter,undefined4 eighthParameter,\n                 undefined8 firstArgument,undefined8 secondArgument,undefined8 thirdArgument,undefined8 fourthArgument,\n                 undefined8 fifthArgument,undefined8 sixthArgument)\n\n{\n  char isConditionMet;\n  undefined4 size;\n  undefined4 length;\n  undefined *pointer;\n  undefined *array;\n  undefined temporary [8];\n  undefined8 tenthArgument;\n  undefined8 eleventhArgument;\n  undefined8 twelfthArgument;\n  undefined8 thirteenthArgument;\n  undefined8 fourteenthArgument;\n  undefined4 firstLocalVariable;\n  undefined4 secondLocalVariable;\n  undefined4 thirdLocalVariable;\n  undefined4 fourthLocalVariable;\n  undefined4 fifthLocalVariable;\n  undefined4 sixthLocalVariable;\n  undefined4 seventhLocalVariable;\n  undefined4 eighthLocalVariable;\n  \n  if (isConditionMet != '\\0') {\n    firstLocalVariable = firstParameter;\n    secondLocalVariable = secondParameter;\n    thirdLocalVariable = param_3;\n    fourthLocalVariable = fourthParameter;\n    fifthLocalVariable = fifthParameter;\n    sixthLocalVariable = sixthParameter;\n    seventhLocalVariable = seventhParameter;\n    eighthLocalVariable = eighthParameter;\n  }\n  pointer = &stack0x00000008;\n  size = 8;\n  array = temporary;\n  length = 0x30;\n  tenthArgument = secondArgument;\n  eleventhArgument = thirdArgument;\n  twelfthArgument = fourthArgument;\n  thirteenthArgument = fifthArgument;\n  fourteenthArgument = sixthArgument;\n  FUN_00119e70(firstArgument,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00114190",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00115b70",
                "FUN_00108d9a",
                "FUN_0010543c",
                "FUN_0010da0b",
                "FUN_00108808",
                "FUN_00114460",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001083de"
            ],
            "imported": false,
            "current_name": "initialize_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "pointerArg",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *pointerArg;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return returnAddress;\n    }\n  }\n  FUN_0011a110(*pointerArg);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_RCX": "inputArray",
                "unaff_RBP": "sortedArray",
                "unaff_R13": "tempArray1",
                "unaff_R14": "tempArray2",
                "unaff_R15": "tempVariable1",
                "in_R10": "loopCounter",
                "unaff_RBX": "tempVariable2",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "paramArray1",
                "param_12": "paramArray2",
                "param_13": "paramVariable1",
                "param_14": "paramSize",
                "bVar14": "byteFlag",
                "__ptr": "allocatedMemory",
                "pcVar2": "comparisonFunction",
                "iVar3": "comparisonResult",
                "uVar4": "incrementCounter",
                "uVar5": "tempVariable3",
                "uVar6": "tempVariable4",
                "lVar7": "tempVariable5",
                "uVar8": "tempVariable6",
                "puVar9": "tempPointer1",
                "cVar10": "charVariable",
                "puVar11": "tempPointer2",
                "puVar12": "tempPointer3",
                "psVar13": "tempArray3",
                "sVar1": "tempVariable7"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t tempVariable7;\n  code *comparisonFunction;\n  int comparisonResult;\n  uint incrementCounter;\n  undefined *allocatedMemory;\n  size_t *inputArray;\n  ulong tempVariable3;\n  ulong tempVariable4;\n  long tempVariable5;\n  ulong tempVariable6;\n  size_t tempVariable2;\n  size_t *sortedArray;\n  undefined *tempPointer1;\n  char charVariable;\n  undefined *tempPointer2;\n  ulong loopCounter;\n  undefined *tempPointer3;\n  size_t in_R11;\n  size_t *tempArray1;\n  size_t *tempArray2;\n  size_t tempVariable1;\n  size_t *tempArray3;\n  byte byteFlag;\n  size_t param1;\n  size_t param2;\n  ulong param3;\n  size_t *paramArray1;\n  undefined *paramArray2;\n  long paramVariable1;\n  size_t paramSize;\n  \n  byteFlag = 0;\ncode_r0x00116852:\n  incrementCounter = (int)loopCounter + 1;\n  if (0x10 < (int)loopCounter) goto LAB_001167f5;\nLAB_00116863:\n  tempArray2 = tempArray2 + -9;\n  do {\n    if (tempArray1 <= tempArray2) {\n      tempVariable7 = tempArray2[2];\n      if (tempVariable7 == 0) goto LAB_00116863;\n      tempVariable6 = (ulong)incrementCounter;\n      if ((*tempArray2 == *sortedArray) &&\n         (comparisonResult = memcmp((void *)tempArray2[3],(void *)sortedArray[3],*sortedArray), comparisonResult == 0)) {\n        tempVariable4 = tempArray2[7];\n        tempVariable3 = tempArray2[8];\n        loopCounter = tempVariable6 & 0xffffffff;\n        if (tempVariable1 == tempVariable4) {\n          if (tempVariable2 != tempVariable3) goto LAB_001167a6;\n          sortedArray[2] = 0;\n        }\n        else {\n          if (tempVariable1 < tempVariable4) {\n            if (tempVariable3 < tempVariable1) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < tempVariable3) || (tempVariable1 <= (tempVariable3 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (tempVariable2 < tempVariable1) {\n              if ((0xfffffffffffffff0 < tempVariable2) ||\n                 (tempVariable4 <= (tempVariable2 + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (tempVariable2 == tempVariable3) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (tempVariable2 <= tempVariable3) {\n              sortedArray[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (tempVariable3 < tempVariable1) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (tempVariable7 == 0x101)) goto code_r0x00116852;\n          if (tempVariable3 <= tempVariable2) {\n            tempVariable3 = tempVariable2;\n          }\n          if (tempVariable4 < tempVariable1) {\n            tempVariable1 = tempVariable4;\n          }\n          tempArray2[8] = tempVariable3;\n          tempArray2[7] = tempVariable1;\n          sortedArray[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        tempArray2 = sortedArray;\n        sortedArray = tempArray2 + 9;\n        if (inputArray <= sortedArray) {\n          qsort(paramArray1,paramSize,0x48,FUN_0011a250);\n          allocatedMemory = (undefined *)xmalloc(param3 * 2);\n          param1 = 0;\n          tempPointer3 = allocatedMemory;\n          for (tempArray3 = paramArray1; tempArray3 < inputArray; tempArray3 = tempArray3 + 9) {\n            if (tempArray3[2] != 0) {\n              tempPointer2 = tempPointer3 + 4;\n              tempPointer1 = tempPointer3 + 0xc;\n              comparisonFunction = *(code **)(*(long *)(paramVariable1 + 8) + 0x50);\n              if ((tempArray3[7] == param2) && (tempArray3[8] == param1)) {\n                (*comparisonFunction)(*tempArray3,tempPointer3);\n                (**(code **)(*(long *)(paramVariable1 + 8) + 0x50))(0,tempPointer2);\n                (**(code **)(*(long *)(paramVariable1 + 8) + 0x50))(tempArray3[2],tempPointer3 + 8);\n                tempVariable4 = tempArray3[6];\n                tempVariable6 = *tempArray3;\n                tempPointer3 = (undefined *)tempArray3[3];\n                tempPointer2 = tempPointer1;\n                for (tempVariable3 = tempVariable6; tempVariable3 != 0; tempVariable3 = tempVariable3 - 1) {\n                  *tempPointer2 = *tempPointer3;\n                  tempPointer3 = tempPointer3 + (ulong)byteFlag * -2 + 1;\n                  tempPointer2 = tempPointer2 + (ulong)byteFlag * -2 + 1;\n                }\n                if (tempVariable6 < tempVariable4) {\n                  for (tempVariable5 = tempVariable4 - tempVariable6; tempVariable5 != 0; tempVariable5 = tempVariable5 + -1) {\n                    *tempPointer2 = 0;\n                    tempPointer2 = tempPointer2 + (ulong)byteFlag * -2 + 1;\n                  }\n                }\n                tempPointer3 = tempPointer1 + tempVariable4;\n              }\n              else {\n                (*comparisonFunction)();\n                if (*(int *)(*(long *)(paramVariable1 + 8) + 8) == 5) {\n                  charVariable = (*(char *)(*(long *)(paramVariable1 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charVariable = '\\b';\n                }\n                (**(code **)(*(long *)(paramVariable1 + 8) + 0x50))(charVariable,tempPointer2);\n                (**(code **)(*(long *)(paramVariable1 + 8) + 0x50))(tempArray3[2],tempPointer3 + 8);\n                tempVariable6 = *tempArray3;\n                tempPointer3 = (undefined *)tempArray3[3];\n                tempPointer2 = tempPointer1;\n                for (tempVariable4 = tempVariable6; tempVariable4 != 0; tempVariable4 = tempVariable4 - 1) {\n                  *tempPointer2 = *tempPointer3;\n                  tempPointer3 = tempPointer3 + (ulong)byteFlag * -2 + 1;\n                  tempPointer2 = tempPointer2 + (ulong)byteFlag * -2 + 1;\n                }\n                tempVariable4 = tempArray3[6];\n                if (tempVariable6 < tempVariable4) {\n                  for (tempVariable5 = tempVariable4 - tempVariable6; tempVariable5 != 0; tempVariable5 = tempVariable5 + -1) {\n                    *tempPointer2 = 0;\n                    tempPointer2 = tempPointer2 + (ulong)byteFlag * -2 + 1;\n                  }\n                }\n                tempVariable5 = *(long *)(paramVariable1 + 8);\n                tempPointer1 = tempPointer1 + tempVariable4;\n                tempPointer3 = tempPointer1 + 8;\n                if ((*(int *)(tempVariable5 + 8) == 5) &&\n                   (*(char *)(*(long *)(paramVariable1 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(tempVariable5 + 0x38))(tempArray3[7],tempPointer1);\n                  (**(code **)(*(long *)(paramVariable1 + 8) + 0x38))(tempArray3[8],tempPointer3);\n                  tempPointer3 = tempPointer1 + 0x10;\n                }\n                else {\n                  (**(code **)(tempVariable5 + 0x50))(tempArray3[7],tempPointer1);\n                  (**(code **)(*(long *)(paramVariable1 + 8) + 0x50))(tempArray3[8],tempPointer1 + 4);\n                }\n                param2 = tempArray3[7];\n                param1 = tempArray3[8];\n              }\n            }\n          }\n          tempVariable4 = (long)tempPointer3 - (long)allocatedMemory;\n          tempVariable6 = tempVariable4;\n          tempPointer3 = allocatedMemory;\n          if (tempVariable4 < param3) {\n            for (; param3 = tempVariable4, tempVariable6 != 0; tempVariable6 = tempVariable6 - 1) {\n              *paramArray2 = *tempPointer3;\n              tempPointer3 = tempPointer3 + (ulong)byteFlag * -2 + 1;\n              paramArray2 = paramArray2 + (ulong)byteFlag * -2 + 1;\n            }\n          }\n          free(allocatedMemory);\n          free(paramArray1);\n          return param3;\n        }\n        in_R11 = tempArray2[0xb];\n      } while (in_R11 == 0);\n      tempVariable1 = tempArray2[0x10];\n      tempVariable2 = tempArray2[0x11];\n      incrementCounter = 0;\n      if (tempVariable1 != tempVariable2) break;\n      tempArray2[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "free",
                "qsort",
                "memcmp",
                "FUN_00116852"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "get_pointer_00113d3a",
                "param_1": "input",
                "lVar1": "pointer"
            },
            "code": "\nlong getPointer_00113d3a(long input)\n\n{\n  long pointer;\n  \n  if (input != 0) {\n    pointer = *(long *)(input + 8);\n    if (pointer == 0) {\n      pointer = FUN_00112904(0xc,0);\n      if (pointer == 0) {\n        pointer = 0;\n      }\n      else {\n        *(long *)(pointer + 0x10) = input;\n        *(long *)(input + 8) = pointer;\n      }\n    }\n    return pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "get_pointer_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "send_data_to_server_0010a0d3",
                "param_1": "data"
            },
            "code": "\nvoid sendDataToServer_0010a0d3(long data)\n\n{\n  FUN_00109ed3(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "lVar1": "length",
                "pcVar2": "current_string",
                "ppcVar3": "string_list",
                "cVar4": "result",
                "iVar5": "comparison_result",
                "uVar6": "new_value",
                "sVar7": "length_pcVar10",
                "sVar8": "length_local_48",
                "lVar9": "ptr",
                "uVar13": "flags",
                "bVar14": "is_true",
                "local_50": "error_code",
                "local_48": "new_string",
                "local_40": "size_info_array"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid create_output_section_00115530(long param_1,char **param_2,long param_3)\n\n{\n  long length;\n  char *current_string;\n  char **string_list;\n  char result;\n  int comparison_result;\n  uint new_value;\n  size_t length_pcVar10;\n  size_t length_local_48;\n  long ptr;\n  char *pcVar10;\n  char *pcVar11;\n  char *pcVar12;\n  uint flags;\n  bool is_true;\n  long error_code;\n  char *new_string;\n  long size_info_array [2];\n  \n  result = FUN_001159d0(param_2);\n  if (result != '\\0') {\n    return;\n  }\n  pcVar10 = *param_2;\n  flags = *(uint *)((long)param_2 + 0x24);\n  new_string = pcVar10;\n  string_list = DAT_001278f8;\n  if (*(int *)(*(long *)(param_1 + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(param_1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; string_list != (char **)0x0; string_list = (char **)string_list[3]) {\n    comparison_result = strcmp(*string_list,pcVar10);\n    if (comparison_result == 0) {\n      if (*(uint *)(string_list + 2) != 0xffffffff) {\n        flags = *(uint *)(string_list + 2);\n      }\n      if (pcVar10 != string_list[1]) {\n        new_string = string_list[1];\n        flags = FUN_00115f30(flags,param_3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (pcVar10 = DAT_00127918, (*(byte *)((long)param_2 + 0x24) & 1) != 0)) ||\n     (pcVar10 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    length_pcVar10 = strlen(pcVar10);\n    length_local_48 = strlen(new_string);\n    pcVar12 = (char *)xmalloc(length_pcVar10 + 1 + length_local_48);\n    pcVar10 = strcpy(pcVar12,pcVar10);\n    new_string = strcat(pcVar10,new_string);\n  }\n  ptr = FUN_00114190(*param_2,0,0x80);\n  is_true = false;\n  if (ptr == 0) {\n    if ((DAT_00127a48 == 4) && ((flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(param_1 + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(param_2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            is_true = (flags & 0x2000000) == 0;\n            new_value = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param_2 + 0x24) = *(uint *)((long)param_2 + 0x24) & new_value;\n          }\n          else {\n            new_value = 0xfdfffefd;\n          }\n          flags = flags & new_value;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*param_2,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    flags = FUN_00115f30(flags & 0x104 | *(uint *)(ptr + 0x28),param_3,*param_2);\n  }\n  result = bfd_convert_section_setup(param_1,param_2,param_3,&new_string,size_info_array);\n  if (result == '\\0') {\n    pcVar10 = (char *)0x0;\n    error_code = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  pcVar10 = (char *)bfd_make_section_anyway_with_flags(param_3,new_string,flags);\n  if (pcVar10 == (char *)0x0) {\n    error_code = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      size_info_array[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(pcVar10,size_info_array[0]);\n    if (result == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    size_info_array[0] = ((((long)DAT_00127a3c - 1U) + size_info_array[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(pcVar10);\n    if (result == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  error_code = 0;\n  pcVar12 = param_2[6];\n  ptr = FUN_00114190(*param_2,0,0x18);\n  if (ptr == 0) {\n    pcVar10[0x28] = pcVar10[0x28] | 1;\n    pcVar11 = *param_2;\n    pcVar12 = pcVar12 + _DAT_001279b0;\n    *(char **)(pcVar10 + 0x30) = pcVar12;\n    *(char **)(pcVar10 + 0x38) = pcVar12;\n    pcVar12 = param_2[7];\n    ptr = FUN_00114190(pcVar11,0,0x60);\n    if (ptr == 0) goto LAB_00115695;\nLAB_00115860:\n    pcVar11 = *(char **)(ptr + 0x20);\n    if ((*(byte *)(ptr + 0x14) & 0x40) != 0) {\n      pcVar11 = pcVar11 + (long)pcVar12;\n    }\n    *(char **)(pcVar10 + 0x38) = pcVar11;\n    ptr = FUN_00114190(*param_2,0,0x200);\n    if (ptr != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)param_2 + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    error_code = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(pcVar10 + 0xb4) = *(undefined4 *)((long)param_2 + 0xb4);\n    pcVar10[0x28] = pcVar10[0x28] & 0xcfU | *(byte *)(param_2 + 5) & 0x30;\n    param_2[0xc] = pcVar10;\n    param_2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,param_2,param_3,pcVar10);\n    if (result == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    pcVar11 = *(char **)(ptr + 0x18);\n    if ((*(byte *)(ptr + 0x14) & 8) == 0) {\n      pcVar11 = pcVar11 + (long)pcVar12;\n    }\n    pcVar10[0x28] = pcVar10[0x28] | 1;\n    current_string = *param_2;\n    *(char **)(pcVar10 + 0x30) = pcVar11;\n    *(char **)(pcVar10 + 0x38) = pcVar11;\n    pcVar12 = param_2[7];\n    ptr = FUN_00114190(current_string,0,0x60);\n    if (ptr != 0) goto LAB_00115860;\nLAB_00115695:\n    pcVar11 = *param_2;\n    *(char **)(pcVar10 + 0x38) = pcVar12 + _DAT_001279b0;\n    ptr = FUN_00114190(pcVar11,0,0x200);\n    if (ptr == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(ptr + 0x2c);\n    if (0x3e < flags) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(pcVar10 + 0x7c) = flags;\n    *(undefined4 *)(pcVar10 + 0xb4) = *(undefined4 *)((long)param_2 + 0xb4);\n    pcVar10[0x28] = pcVar10[0x28] & 0xcfU | *(byte *)(param_2 + 5) & 0x30;\n    param_2[0xc] = pcVar10;\n    param_2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    pcVar12 = param_2[0x1a];\n    ptr = FUN_00115d00(pcVar12,param_2[0x1c]);\n    if ((ptr == 0) ||\n       (length = *(long *)(param_1 + 8), *(uint *)(ptr + 0x18) = *(uint *)(ptr + 0x18) | 0x20,\n       *(int *)(length + 8) != 5)) goto LAB_00115700;\n    *(long *)(pcVar12 + 0xb0) = ptr;\n    result = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,param_2,param_3,pcVar10);\n    if (result == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (is_true) {\n    *(undefined4 *)(*(long *)(pcVar10 + 0xd0) + 4) = 8;\n  }\n  if (error_code == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  FUN_001126c0(0,param_3,pcVar10,error_code);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00115f30",
                "xmalloc",
                "bfd_set_section_size",
                "strcat",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup",
                "strlen",
                "strcpy",
                "FUN_00108072",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "execute_function_0010a0bd",
                "param_1": "param"
            },
            "code": "\nvoid executeFunction_0010a0bd(long param)\n\n{\n  FUN_00109ed3(param,0x6b,*(undefined4 *)(*(long *)(param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "process_binary_data_00113e5e",
                "param_1": "data",
                "param_2": "stringArray",
                "param_3": "offset",
                "cVar1": "result",
                "local_20[0]": "currentString"
            },
            "code": "\nundefined8 processBinaryData_00113e5e(undefined8 data,char **stringArray,long offset)\n\n{\n  char result;\n  char *local_20 [2];\n  \n  currentString = *stringArray;\n  *stringArray = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)currentString < 5) ||\n      (result = FUN_00113fb0(currentString,\"type\"), result == '\\0')) ||\n     ((currentString[4] != '$' && (currentString[4] != '.')))) {\n    if (*currentString != '_') {\n      return 1;\n    }\n    if (currentString[1] != '_') {\n      return 1;\n    }\n    if (currentString[2] != 'o') {\n      return 1;\n    }\n    if (currentString[3] != 'p') {\n      return 1;\n    }\n    currentString = currentString + 4;\n  }\n  else {\n    currentString = currentString + 5;\n  }\n  result = FUN_0010c95e(data,local_20,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_binary_data_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "dataPtr",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "ptr1",
                "pcVar2": "ptr2",
                "bVar3": "byteVar",
                "pcVar4": "ptr3",
                "__s": "ptr4",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByteVar"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long dataPtr,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *ptr2;\n  byte byteVar;\n  char *ptr3;\n  char *ptr4;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByteVar;\n  \n  ptr4 = (char *)0x0;\n  localByteVar = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  ptr3 = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (localByteVar == 0) {\n      byteVar = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n    }\n    localByteVar = byteVar & 1;\n    ptr4 = (char *)FUN_00109b2f(dataPtr);\n  }\n  ptr1 = *(long *)(dataPtr + 0x60);\n  if ((ptr1 == 0) || (ptr2 = *(char **)(ptr1 + 0x30), ptr2 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(ptr2);\n    length2 = strlen(ptr3);\n    length3 = strlen(string1);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(ptr4);\n    }\n    result = xrealloc(ptr2,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    ptr2 = *(char **)(*(long *)(dataPtr + 0x60) + 0x30);\n    length1 = strlen(ptr2);\n    sprintf(ptr2 + length1,\"%s:%s;%c%c%c\",ptr3,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,length1);\n    free(ptr3);\n    if (flag4 != '\\0') {\n      ptr3 = *(char **)(*(long *)(dataPtr + 0x60) + 0x30);\n      length1 = strlen(ptr3);\n      sprintf(ptr3 + length1,\"%ld;%s;\",value,ptr4);\n      free(ptr4);\n    }\n    if (localByteVar != 0) {\n      *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "inputFlag",
                "param_2": "paramArray",
                "param_3": "outputFormat",
                "uVar1": "firstParam",
                "uVar2": "errorMessage"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint inputFlag,undefined8 *paramArray,undefined8 outputFormat)\n\n{\n  undefined8 firstParam;\n  undefined8 errorMessage;\n  \n  if (((inputFlag & 0x8000000) != 0) && (*(int *)(paramArray[1] + 8) != 2)) {\n    firstParam = *paramArray;\n    inputFlag = inputFlag & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(errorMessage,firstParam,outputFormat);\n  }\n  return inputFlag;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "retrieve_value_001129f4",
                "param_1": "inputPtr",
                "puVar1": "firstLevelPtr",
                "piVar2": "secondLevelPtr"
            },
            "code": "\nundefined8 retrieveValue_001129f4(int *inputPtr)\n\n{\n  undefined8 *firstLevelPtr;\n  int *secondLevelPtr;\n  \n  do {\n    if (*inputPtr != 1) {\n      if (1 < *inputPtr - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputPtr + 4) + 8);\n    }\n    firstLevelPtr = (undefined8 *)(inputPtr + 4);\n    secondLevelPtr = **(int ***)(undefined8 *)*firstLevelPtr;\n  } while ((inputPtr != secondLevelPtr) && (inputPtr = secondLevelPtr, secondLevelPtr != (int *)0x0));\n  return ((undefined8 *)*firstLevelPtr)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "retrieve_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_00114c80",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "calculate_flipped_bit_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint calculateFlippedBit_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "calculate_flipped_bit_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "extract_and_copy_archive_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "statData",
                "param_5": "targetFormat",
                "param_6": "outputType",
                "param_7": "copyFlags",
                "bVar1": "byte1",
                "cVar2": "char1",
                "cVar3": "char2",
                "iVar4": "index",
                "iVar5": "result",
                "ppcVar6": "pointerArray",
                "pvVar7": "pointer",
                "lVar8": "length",
                "puVar9": "pointer2",
                "piVar10": "intPointer",
                "uVar11": "value1",
                "uVar12": "value2",
                "lVar13": "size",
                "puVar14": "bfdFilePtr",
                "pcVar15": "tempDir",
                "ppcVar16": "archiveFilePtr",
                "pcVar17": "pathName",
                "pcVar18": "memberName",
                "pcVar19": "addrcopy",
                "pcVar20": "funcPtr",
                "lVar21": "copySize",
                "uVar22": "flag",
                "pcVar23": "errorMessage",
                "psVar24": "statPtr",
                "bVar25": "boolValue",
                "bVar26": "byte2",
                "local_1a0": "outputHandle",
                "local_198": "longPtr",
                "local_158": "archiveStatData",
                "local_c8": "localArray",
                "uStack_b0": "permissions",
                "lStack_98": "fileSize"
            },
            "code": "\n\n\nvoid extractAndCopyArchive_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 statData,\n                 undefined8 targetFormat,long outputType,undefined8 copyFlags)\n\n{\n  byte byte1;\n  char char1;\n  char char2;\n  int index;\n  int result;\n  char **pointerArray;\n  void *pointer;\n  long length;\n  undefined8 *pointer2;\n  int *intPointer;\n  undefined8 value1;\n  undefined8 value2;\n  long size;\n  undefined8 *bfdFilePtr;\n  char *tempDir;\n  char **archiveFilePtr;\n  char *pathName;\n  char *memberName;\n  undefined8 *__ptr;\n  char **paddrcopy;\n  code *funcPtr;\n  long copySize;\n  uint flag;\n  char *errorMessage;\n  stat *statPtr;\n  bool boolValue;\n  byte byte2;\n  undefined8 *outputHandle;\n  long *longPtr;\n  stat archiveStatData;\n  void *localArray [3];\n  uint permissions;\n  long fileSize;\n  \n  byte2 = 0;\n  size = FUN_00113f50();\n  if (size < 1) {\n    if (size == 0) {\n      value2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(value2,inputFile);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  bfdFilePtr = (undefined8 *)bfd_openr(inputFile,targetFormat);\n  if ((bfdFilePtr == (undefined8 *)0x0) || (result = bfd_stat(bfdFilePtr,statData), result != 0)) {\n    FUN_001126c0(inputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x40000;\n  }\n  char1 = bfd_check_format(bfdFilePtr,2);\n  if (char1 != '\\0') {\n    if (outputType == 0) {\n      char1 = '\\0';\n      outputType = *(long *)bfdFilePtr[1];\n    }\n    if (fileDescriptor < 0) {\n      outputHandle = (undefined8 *)bfd_openw(outputFile,outputType);\n    }\n    else {\n      outputHandle = (undefined8 *)bfd_fdopenw(outputFile,outputType,fileDescriptor);\n    }\n    if (outputHandle != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        value2 = *bfdFilePtr;\n        value1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(value1,value2);\n        DAT_00127a30 = 0;\n      }\n      FUN_00114d50(outputHandle,bfdFilePtr,DAT_001264b4);\n      longPtr = outputHandle + 0x1f;\n      if ((*(byte *)((long)bfdFilePtr + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        value2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,bfdFilePtr,0,value2);\n        return;\n      }\n      tempDir = (char *)FUN_0011a0e0(*outputHandle);\n      if (tempDir == (char *)0x0) {\n        intPointer = __errno_location();\n        tempDir = strerror(*intPointer);\n        value2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(value2,tempDir);\n      }\n      if (DAT_00127a48 == 7) {\n        byte1 = *(byte *)((long)bfdFilePtr + 0x49);\n        flag = 0;\n      }\n      else {\n        byte1 = *(byte *)((long)bfdFilePtr + 0x49);\n        flag = byte1 >> 3 & 1;\n      }\n      boolValue = _DAT_001264b0 != 0;\n      *(byte *)((long)outputHandle + 0x49) =\n           byte1 & 0x10 | (byte)(flag << 3) | *(byte *)((long)outputHandle + 0x49) & 0xe7;\n      if (boolValue) {\n        *(uint *)((long)outputHandle + 0x44) = *(uint *)((long)outputHandle + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      archiveFilePtr = (char **)bfd_openr_next_archived_file(bfdFilePtr,0);\n      char2 = bfd_set_format(outputHandle,*(byte *)(bfdFilePtr + 9) & 7);\n      if (char2 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(0,outputHandle,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (archiveFilePtr != (char **)0x0))) {\n        memberName = *archiveFilePtr;\n        pathName = memberName;\n        if (*memberName == '/') {\nLAB_0010527d:\n          value2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(value2,memberName);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pathName != '\\0') {\n          errorMessage = pathName;\n          if ((*pathName == '.') && (errorMessage = pathName + 1, pathName[1] == '.')) {\n            errorMessage = pathName + 2;\n            if ((pathName[2] == '\\0') || (pathName[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*errorMessage != '\\0' && (*errorMessage != '/')); errorMessage = errorMessage + 1) {\n          }\n          pathName = errorMessage;\n          if (*errorMessage == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        memberName = (char *)concat(tempDir,&DAT_0011b47d);\n        result = stat(memberName,&archiveStatData);\n        pointer2 = __ptr;\n        if (-1 < result) {\n          size = FUN_0011a0e0(memberName);\n          free(memberName);\n          if (size == 0) {\n            intPointer = __errno_location();\n            memberName = strerror(*intPointer);\n            value2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(value2,memberName);\n            goto LAB_00104e93;\n          }\n          pointer2 = (undefined8 *)xmalloc(0x18);\n          memberName = *archiveFilePtr;\n          *pointer2 = __ptr;\n          pointer2[2] = 0;\n          pointer2[1] = size;\n          memberName = (char *)concat(size,&DAT_0011b47d,memberName);\n        }\n        result = 0;\n        if (DAT_001279eb != '\\0') {\n          statPtr = &archiveStatData;\n          for (size = 0x24; size != 0; size = size + -1) {\n            *(undefined4 *)&statPtr->st_dev = 0;\n            statPtr = (stat *)((long)statPtr + (ulong)byte2 * -8 + 4);\n          }\n          paddrcopy = (char **)archiveFilePtr[0x1d];\n          if ((char **)archiveFilePtr[0x1d] == (char **)0x0) {\n            paddrcopy = archiveFilePtr;\n          }\n          result = (**(code **)(paddrcopy[1] + 0x1e8))(archiveFilePtr,&archiveStatData);\n          if (result != 0) {\n            pathName = *archiveFilePtr;\n            value2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(value2,pathName);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = memberName;\n        *__ptr = pointer2;\n        __ptr[2] = 0;\n        char2 = bfd_check_format(archiveFilePtr,1);\n        if (char2 == '\\0') {\n          value2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,archiveFilePtr,0,value2);\n          paddrcopy = (char **)bfd_openw(memberName,outputType);\n          if (paddrcopy == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(memberName,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerArray = (char **)archiveFilePtr[0x1d];\n          if ((char **)archiveFilePtr[0x1d] == (char **)0x0) {\n            pointerArray = archiveFilePtr;\n          }\n          index = (**(code **)(pointerArray[1] + 0x1e8))(archiveFilePtr);\n          size = fileSize;\n          if (index == 0) {\n            if (fileSize < 0) {\n              FUN_001125fa(archiveFilePtr);\n              value2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(value2);\n            }\n            else {\n              index = bfd_seek(archiveFilePtr,0,0);\n              if (index == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pathName = *paddrcopy;\n                  value2 = FUN_001125fa(archiveFilePtr);\n                  errorMessage = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(errorMessage,value2,pathName);\n                }\n                pointer = (void *)xmalloc(0x2000);\n                for (; size != 0; size = size - copySize) {\n                  copySize = 0x2000;\n                  if (size < 0x2001) {\n                    copySize = size;\n                  }\n                  length = bfd_bread(pointer,copySize,archiveFilePtr);\n                  pointerArray = archiveFilePtr;\n                  if ((copySize != length) ||\n                     (length = bfd_bwrite(pointer,copySize,paddrcopy), pointerArray = paddrcopy,\n                     copySize != length)) {\n                    FUN_001126c0(0,pointerArray,0,0);\n                    free(pointer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*paddrcopy,permissions | 0x100);\n                free(pointer);\n                char2 = bfd_close_all_done(paddrcopy);\n                if (char2 == '\\0') {\n                  FUN_001126c0(memberName,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              value2 = FUN_001125fa(archiveFilePtr);\n              FUN_0011a110(value2);\n            }\n          }\n          else {\n            FUN_001126c0(0,archiveFilePtr,0,0);\n          }\nLAB_00104f00:\n          char2 = bfd_close_all_done(paddrcopy);\n          if (char2 == '\\0') {\n            FUN_001126c0(memberName,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(memberName);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (char1 == '\\0') {\n            paddrcopy = (char **)bfd_openw(memberName,*(undefined8 *)archiveFilePtr[1]);\n          }\n          else {\n            paddrcopy = (char **)bfd_openw(memberName,outputType);\n          }\n          if (paddrcopy == (char **)0x0) goto LAB_00104e80;\n          char2 = FUNC_00114e50(archiveFilePtr,paddrcopy,copyFlags);\n          if (char2 == '\\0') {\n            index = bfd_get_arch(archiveFilePtr);\n            if (index == 0) goto LAB_00104d75;\n            char2 = bfd_close_all_done(paddrcopy);\n            if (char2 == '\\0') {\n              FUN_001126c0(memberName,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char2 = bfd_close(paddrcopy);\n          if (char2 == '\\0') {\n            FUN_001126c0(memberName,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (result == 0)) {\n            FUN_0011a350(memberName,&archiveStatData);\n          }\n          size = bfd_openr(memberName,outputType);\n          __ptr[2] = size;\n          *longPtr = size;\n          longPtr = (long *)(size + 0xf0);\n          paddrcopy = (char **)bfd_openr_next_archived_file(bfdFilePtr);\n          bfd_close(archiveFilePtr);\n          archiveFilePtr = paddrcopy;\n        }\n      }\n      *longPtr = 0;\n      pointer = (void *)xstrdup(*outputHandle);\n      if (DAT_00127a40 == 0) {\n        funcPtr = bfd_close;\n      }\n      else {\n        funcPtr = bfd_close_all_done;\n      }\n      char1 = (*funcPtr)(outputHandle);\n      if (char1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(pointer,0,0,0);\n      }\n      free(pointer);\n      pointer = (void *)xstrdup(*bfdFilePtr);\n      char1 = bfd_close(bfdFilePtr);\n      if (char1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(pointer,0,0,0);\n      }\n      free(pointer);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdFilePtr = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdFilePtr;\n      }\n      rmdir(tempDir);\n      free(tempDir);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    FUN_001126c0(outputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  char1 = bfd_check_format_matches(bfdFilePtr,1,localArray);\n  if (char1 == '\\0') {\n    result = bfd_get_error();\n    char1 = bfd_check_format_matches(bfdFilePtr,3,&archiveStatData);\n    if (char1 == '\\0') {\n      index = bfd_get_error();\n      if (result != index) {\n        bfd_set_error(result);\n      }\n      FUN_001126c0(inputFile,0,0,0);\n      if (result == 0xd) {\n        FUN_0011256b(localArray[0]);\n      }\n      if (index != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      FUN_0011256b(archiveStatData.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (result == 0xd) {\n      free(localArray[0]);\n    }\n  }\n  if (outputType == 0) {\n    outputType = *(long *)bfdFilePtr[1];\n  }\n  if (fileDescriptor < 0) {\n    size = bfd_openw(outputFile,outputType);\n  }\n  else {\n    size = bfd_fdopenw(outputFile,outputType,fileDescriptor);\n  }\n  if (size == 0) goto LAB_00105231;\n  FUN_00114d50(size,bfdFilePtr,DAT_001264b4);\n  char1 = FUNC_00114e50(bfdFilePtr,size,copyFlags);\n  if (char1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    char1 = bfd_close(size);\n    goto LAB_001147d5;\n  }\n  char1 = bfd_close_all_done(size);\nLAB_001147d5:\n  if (char1 != '\\x01') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(outputFile,0,0,0);\n    return;\n  }\n  char1 = bfd_close(bfdFilePtr);\n  if (char1 == '\\0') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113f50",
                "strerror",
                "FUN_0011256b",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "bfd_set_format",
                "bfd_get_error",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_openr",
                "FUN_00114d50",
                "bfd_fdopenw",
                "bfd_set_error",
                "bfd_stat",
                "FUN_00119ed0",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_check_format_matches",
                "bfd_openw",
                "FUN_0011a0e0",
                "__errno_location",
                "free",
                "close",
                "bfd_close",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "get_stab_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "isNegative",
                "plVar1": "dataPtr",
                "uVar2": "result",
                "sVar3": "strLength",
                "lVar4": "currentValue",
                "lVar5": "bitmask",
                "local_8c": "output",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 getStabIntType_0010b800(long baseAddress,int size,char isNegative)\n\n{\n  long *dataPtr;\n  undefined8 result;\n  size_t strLength;\n  long currentValue;\n  long bitmask;\n  undefined2 output;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    currentValue = baseAddress + 0xb8;\n    if (isNegative != '\\0') {\n      currentValue = baseAddress + 0x78;\n    }\n    dataPtr = (long *)(currentValue + (ulong)(size - 1U) * 8);\n    currentValue = *dataPtr;\n    if (currentValue != 0) {\n      result = FUN_00109cf4(baseAddress,currentValue,size);\n      return result;\n    }\n    currentValue = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = currentValue + 1;\n    *dataPtr = currentValue;\n    sprintf((char *)&output,\"%ld=r%ld;\",currentValue,currentValue);\n    if (isNegative == '\\0') {\n      bitmask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      strLength = strlen((char *)&output);\n      sprintf((char *)((long)&output + strLength),\"%ld;%ld;\",-bitmask,bitmask + -1);\n    }\n    else {\n      strLength = strlen((char *)&output);\n      *(undefined2 *)((long)&output + strLength) = 0x3b30;\n      *(undefined *)((long)&output + strLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&output + strLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&output + strLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = FUN_00109b52(baseAddress,&output,currentValue,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "get_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "extract_data_00109ed3",
                "param_1": "binary",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "dataPointer",
                "param_5": "sizePointer",
                "uVar1": "dataSize",
                "uVar2": "currentSize",
                "cVar3": "result",
                "pcVar4": "string",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "index",
                "__ptr": "tempPointer",
                "uVar7": "returnValue",
                "uVar8": "isAllocated",
                "lVar9": "remainingSize",
                "uVar10": "newSize",
                "puVar11": "dataPointerIncrement",
                "bVar12": "flagValue"
            },
            "code": "\nundefined8 extractData_00109ed3(long binary,uint flag,undefined4 param,long *dataPointer,ulong *sizePointer)\n\n{\n  ulong dataSize;\n  ulong currentSize;\n  char result;\n  char *string;\n  size_t stringLength;\n  char *formattedString;\n  long index;\n  void *tempPointer;\n  undefined8 returnValue;\n  undefined isAllocated;\n  long remainingSize;\n  ulong newSize;\n  undefined *dataPointerIncrement;\n  byte flagValue;\n  \n  flagValue = 0;\n  index = *(long *)(binary + 0x60);\n  if (index != 0) {\n    dataSize = *(ulong *)(index + 0x10);\n    if (((long)dataSize < 1) || (dataPointer == (long *)0x0)) {\n      isAllocated = *(undefined *)(index + 0x1c);\n      string = (char *)FUN_00109b2f(binary);\n      stringLength = strlen(string);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)flag,string);\n      free(string);\n      index = 0;\n    }\n    else {\n      newSize = *sizePointer;\n      if (newSize <= dataSize) {\n        if (newSize == 0) {\n          newSize = 10;\n        }\n        for (; newSize <= dataSize; newSize = newSize * 2) {\n        }\n        index = xrealloc(*dataPointer,newSize * 8);\n        currentSize = *sizePointer;\n        *dataPointer = index;\n        dataPointerIncrement = (undefined *)(index + currentSize * 8);\n        for (remainingSize = (newSize - currentSize) * 8; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *dataPointerIncrement = 0;\n          dataPointerIncrement = dataPointerIncrement + (ulong)flagValue * -2 + 1;\n        }\n        *sizePointer = newSize;\n      }\n      index = *(long *)(*dataPointer + dataSize * 8);\n      if ((index != 0) && (*(char *)(*(long *)(binary + 0x60) + 0x1c) == '\\0')) {\n        tempPointer = (void *)FUN_00109b2f(binary);\n        free(tempPointer);\n        returnValue = FUN_00109cf4(binary,index,param);\n        return returnValue;\n      }\n      index = *(long *)(binary + 0x68);\n      *(long *)(binary + 0x68) = index + 1;\n      string = (char *)FUN_00109b2f(binary);\n      stringLength = strlen(string);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",index,(ulong)flag,string);\n      free(string);\n      isAllocated = 1;\n      *(long *)(*dataPointer + dataSize * 8) = index;\n    }\n    result = FUN_00109b52(binary,formattedString,index,isAllocated,param);\n    if (result != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "xrealloc",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_0010a0a0"
            ],
            "imported": false,
            "current_name": "extract_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010c7a0",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_00109022",
                "FUN_00114190",
                "FUN_0010e453",
                "FUN_0010c218",
                "FUN_00116110",
                "FUN_0010bbd3",
                "FUN_0010ebb0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_00113c43",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_00113e23",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00109b52",
                "FUN_00114cf0",
                "FUN_00112925",
                "FUN_00107880",
                "FUN_0011a480",
                "FUN_0010afd5",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00113ce0",
                "FUN_0010e07c",
                "FUN_00114d60",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00104ea2",
                "FUN_00114c80",
                "FUN_0010b6ea",
                "FUN_0010bf86",
                "FUN_0010a424",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00112904",
                "FUN_0010a0e9",
                "FUN_0010da0b",
                "FUN_0010a377",
                "FUN_0010bc80",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_00113b98",
                "FUN_00109a0b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "infoUnits",
                "puVar2": "unitsPtr",
                "puVar3": "newUnitsPtr",
                "lVar4": "loopIndex",
                "puVar5": "ptr",
                "pcVar6": "filenamePtr",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *infoUnits;\n  undefined4 *unitsPtr;\n  undefined4 *newUnitsPtr;\n  long loopIndex;\n  undefined4 *ptr;\n  char *filenamePtr;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  unitsPtr = (undefined4 *)xmalloc(0x18);\n  ptr = unitsPtr;\n  for (loopIndex = 6; loopIndex != 0; loopIndex = loopIndex + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  *(char **)(unitsPtr + 2) = filenamePtr;\n  newUnitsPtr = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)unitsPtr;\n  ptr = newUnitsPtr;\n  for (loopIndex = 6; loopIndex != 0; loopIndex = loopIndex + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  infoUnits = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(newUnitsPtr + 2) = unitsPtr;\n  if (infoUnits == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)newUnitsPtr;\n  }\n  else {\n    *infoUnits = newUnitsPtr;\n  }\n  debugInfo[1] = (long)newUnitsPtr;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_desired_value_00115d00",
                "param_1": "input_value",
                "param_2": "data_structure",
                "uVar1": "count",
                "lVar2": "result"
            },
            "code": "\nlong find_desired_value_00115d00(long input_value,long data_structure)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(data_structure + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(data_structure + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(data_structure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data_structure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "find_desired_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "extract_data_00113c43",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "data5",
                "param_6": "data6",
                "lVar1": "result",
                "plVar2": "data_array",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nextract_data_00113c43(long data1,long data2,long data3,long data4,undefined data5,\n            undefined8 data6)\n\n{\n  long result;\n  long *data_array;\n  undefined return_value [16];\n  \n  if ((data1 != 0) && (data2 != 0)) {\n    result = FUN_00112904(0x10,0);\n    if (result != 0) {\n      data_array = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)data_array + 0x21) = 0;\n      *data_array = data1;\n      *(undefined4 *)((long)data_array + 0x24) = 0;\n      data_array[1] = data2;\n      data_array[2] = data3;\n      data_array[3] = data4;\n      *(undefined *)(data_array + 4) = data5;\n      *(long **)(result + 0x10) = data_array;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  return_value._8_8_ = data6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "extract_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "evaluate_input_00112a33",
                "param_1": "context",
                "param_2": "inputData",
                "param_3": "resultData",
                "param_4": "inputType",
                "param_5": "arg1",
                "param_6": "arg2",
                "param_7": "flag",
                "uVar1": "returnValue",
                "lVar2": "tempValue",
                "plVar3": "resultPointer"
            },
            "code": "\nbool evaluateInput_00112a33(undefined8 context,long inputData,undefined8 resultData,byte inputType,undefined8 arg1\n                 ,undefined8 arg2,uint flag)\n\n{\n  undefined returnValue;\n  long tempValue;\n  long *resultPointer;\n  \n  if (inputType < 0x12) {\n    if (inputType != 0) {\n      switch(inputType) {\n      case 1:\n        returnValue = FUN_0010c05d(arg1,*(undefined8 *)(inputData + 8),arg2,4,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        returnValue = FUN_0010c05d(arg1,*(undefined8 *)(inputData + 8),arg2,(flag & 0xff) + 2,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 4:\n        returnValue = FUN_0010c05d(arg1,*(undefined8 *)(inputData + 8),arg2,5,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 9:\n        returnValue = FUN_0010bd62(arg1,*(undefined8 *)(inputData + 8),arg2,1,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tempValue = FUN_0010c6be(arg1,*(undefined8 *)(inputData + 8));\n        if (tempValue == 0) {\n          return false;\n        }\n        resultPointer = (long *)FUN_0010da0b(context,resultData);\n        *resultPointer = tempValue;\n        break;\n      case 0xd:\n        tempValue = FUN_0010c218(arg1,*(undefined8 *)(inputData + 8));\n        return tempValue != 0;\n      case 0x11:\n        returnValue = FUN_0010bd62(arg1,*(undefined8 *)(inputData + 8),arg2,2,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (inputType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    returnValue = FUN_0010c05d(arg1,*(undefined8 *)(inputData + 8),arg2,1,\n                         *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_0010c6be",
                "FUN_0010bd62"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "evaluate_input_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "translate_data_type_0010c2d2",
                "param_1": "outputString",
                "param_2": "dataTypesArray",
                "param_3": "inputDataType",
                "uVar1": "dataType1",
                "pcVar2": "dataTypeString",
                "uVar3": "result",
                "lVar4": "translatedDataType",
                "plVar5": "pointerToTranslatedDataType",
                "uVar6": "dataTypeIndex"
            },
            "code": "\n\n\nlong translateDataType_0010c2d2(undefined8 outputString,long dataTypesArray,int *inputDataType)\n\n{\n  uint dataType1;\n  char *dataTypeString;\n  undefined8 result;\n  long translatedDataType;\n  long *pointerToTranslatedDataType;\n  uint dataTypeIndex;\n  \n  if ((*inputDataType == 0) && (dataType1 = inputDataType[1], (int)dataType1 < 0)) {\n    dataTypeIndex = ~dataType1;\n    if (dataTypeIndex < 0x22) {\n      translatedDataType = *(long *)(dataTypesArray + 0x90 + (ulong)dataTypeIndex * 8);\n      if (translatedDataType == 0) {\n        switch(dataTypeIndex) {\n        case 1:\n          result = FUN_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          result = FUN_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          result = FUN_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          result = FUN_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          result = FUN_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          result = FUN_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          result = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          result = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          result = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          result = FUN_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          result = FUN_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          result = FUN_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          result = FUN_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          result = FUN_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          result = FUN_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          result = FUN_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          result = FUN_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          result = 0;\n          break;\n        case 0x13:\n          result = FUN_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          result = FUN_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          result = FUN_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          result = FUN_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          result = FUN_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          result = FUN_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          result = FUN_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          result = FUN_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          result = FUN_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          result = FUN_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          result = FUN_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          result = FUN_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          result = FUN_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          result = FUN_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          result = FUN_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          result = FUN_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        translatedDataType = FUN_0010c218(outputString,dataTypeString,result);\n        *(long *)(dataTypesArray + 0x90 + (ulong)dataTypeIndex * 8) = translatedDataType;\n        return translatedDataType;\n      }\n      return translatedDataType;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)dataType1);\n  }\n  else {\n    pointerToTranslatedDataType = (long *)FUN_00109022(dataTypesArray);\n    if (pointerToTranslatedDataType != (long *)0x0) {\n      if (*pointerToTranslatedDataType == 0) {\n        translatedDataType = FUN_00113e23(pointerToTranslatedDataType,0);\n        return translatedDataType;\n      }\n      return *pointerToTranslatedDataType;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113df2",
                "FUN_00109022",
                "fprintf",
                "FUN_0010c218",
                "FUN_00112904",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "translate_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_data_0010e07c",
                "param_1": "binaryHandle",
                "param_2": "recordData",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "recordSize",
                "lVar2": "recordAddr",
                "lVar3": "numRecords",
                "cVar4": "symbolError",
                "uVar5": "errorType",
                "__ptr": "recordPtr",
                "uVar6": "result",
                "uVar7": "error",
                "puVar8": "recordInfo",
                "pcVar9": "errorMsg",
                "puVar10": "auxData",
                "uVar11": "dataType",
                "lVar12": "recordCount",
                "iVar13": "value",
                "iVar14": "bufferSize",
                "local_a8": "localVar1",
                "uStack_a4": "localVar2",
                "uStack_a0": "localVar3",
                "uStack_9c": "localVar4",
                "local_88": "symentInfo",
                "local_6a": "auxentInfo",
                "local_68": "type",
                "local_67": "flag",
                "local_60": "dataBuffer",
                "local_56": "shortValue"
            },
            "code": "\nundefined8\nprocessBinaryData_0010e07c(undefined8 binaryHandle,long *recordData,undefined8 param3,int param4,long param5,\n            undefined8 param6)\n\n{\n  long recordSize;\n  long recordAddr;\n  long numRecords;\n  char symbolError;\n  undefined4 errorType;\n  void *recordPtr;\n  undefined8 result;\n  undefined8 error;\n  undefined4 *recordInfo;\n  char *errorMsg;\n  undefined *auxData;\n  uint dataType;\n  long recordCount;\n  int value;\n  int bufferSize;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined symentInfo [30];\n  undefined2 auxentInfo;\n  byte type;\n  byte flag;\n  undefined dataBuffer [10];\n  ushort shortValue;\n  \n  bufferSize = 10;\n  recordCount = 0;\n  recordSize = *(long *)(param5 + 0x18);\n  recordPtr = (void *)xmalloc(0x50);\n  while ((recordData[3] < recordSize && (recordData[2] < recordData[1]))) {\n    recordAddr = *(long *)(*recordData + recordData[2] * 8);\n    symbolError = bfd_coff_get_syment(binaryHandle,recordAddr,symentInfo);\n    if (symbolError == '\\0') {\n      errorType = bfd_get_error();\n      result = bfd_errmsg(errorType);\n      errorMsg = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error = dcgettext(0,errorMsg,5);\n      FUN_00119ed0(error,result);\n      free(recordPtr);\n      return 0;\n    }\n    numRecords = recordData[3];\n    auxData = (undefined *)0x0;\n    recordData[2] = recordData[2] + 1;\n    recordData[3] = numRecords + 1 + (ulong)flag;\n    if (flag != 0) {\n      auxData = dataBuffer;\n      symbolError = bfd_coff_get_auxent(binaryHandle,recordAddr,0,auxData);\n      if (symbolError == '\\0') {\n        errorType = bfd_get_error();\n        result = bfd_errmsg(errorType);\n        errorMsg = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (type == 0x12) {\n      dataType = (uint)shortValue;\n      value = (int)*(undefined8 *)(recordAddr + 0x10) +\n               (int)*(undefined8 *)(*(long *)(recordAddr + 0x20) + 0x30);\n    }\n    else {\n      if (type < 0x13) {\n        if ((type == 8) || (type == 0xb)) {\n          dataType = 0;\n          value = ((int)*(undefined8 *)(recordAddr + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(recordAddr + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (type == 0x66) break;\n      dataType = 0;\n      value = 0;\n    }\nLAB_0010e214:\n    error = FUN_0010dac0(binaryHandle,recordData,param3,numRecords,auxentInfo,auxData,1);\n    result = *(undefined8 *)(recordAddr + 8);\n    recordInfo = (undefined4 *)xmalloc(0x20);\n    localVar1 = (undefined4)result;\n    localVar2 = (undefined4)((ulong)result >> 0x20);\n    localVar3 = (undefined4)error;\n    localVar4 = (undefined4)((ulong)error >> 0x20);\n    *(undefined8 *)(recordInfo + 5) = 0;\n    recordInfo[6] = value;\n    recordInfo[7] = dataType;\n    recordInfo[4] = 0;\n    *recordInfo = localVar1;\n    recordInfo[1] = localVar2;\n    recordInfo[2] = localVar3;\n    recordInfo[3] = localVar4;\n    if (bufferSize <= (int)recordCount + 1) {\n      bufferSize = bufferSize + 10;\n      recordPtr = (void *)xrealloc(recordPtr,(long)bufferSize << 3,recordInfo,0,param6);\n    }\n    *(undefined4 **)((long)recordPtr + recordCount * 8) = recordInfo;\n    recordCount = recordCount + 1;\n  }\n  *(undefined8 *)((long)recordPtr + (long)(int)recordCount * 8) = 0;\n  result = FUN_00113da9(param4 == 8,*(undefined2 *)(param5 + 10),recordPtr);\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_coff_get_auxent",
                "FUN_00113da9",
                "xmalloc",
                "bfd_get_error",
                "free",
                "FUN_00119ed0",
                "xrealloc",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_data_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "FUNC_001082c3"
            },
            "code": "\nundefined8 FUNC_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "FUNC_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "parse_file_00114460",
                "param_1": "fileName",
                "param_2": "hashTable",
                "param_3": "fileContent",
                "iVar1": "lineCount",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorString",
                "uVar4": "translatedString",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "fileStream",
                "sVar5": "readSize",
                "ppbVar6": "hashTablePointer",
                "pbVar7": "tempPointer",
                "bVar8": "byteValue",
                "pbVar9": "nextLineStart",
                "pbVar10": "currentLine",
                "pbVar11": "endOfLinePointer",
                "pbVar12": "startOfLinePointer"
            },
            "code": "\nvoid parseFile_00114460(char *fileName,undefined8 hashTable,byte **fileContent)\n\n{\n  int lineCount;\n  int *errorNumberPtr;\n  char *errorString;\n  undefined8 translatedString;\n  size_t fileSize;\n  byte *buffer;\n  FILE *fileStream;\n  size_t readSize;\n  byte **hashTablePointer;\n  byte *tempPointer;\n  byte byteValue;\n  byte *nextLineStart;\n  byte *currentLine;\n  byte *endOfLinePointer;\n  byte *startOfLinePointer;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(fileName,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errorNumberPtr = __errno_location();\n      errorString = strerror(*errorNumberPtr);\n      translatedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(translatedString,fileName,errorString);\n    }\n    readSize = fread(buffer,1,fileSize,fileStream);\n    if ((readSize == 0) || (lineCount = ferror(fileStream), lineCount != 0)) {\n      translatedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(translatedString,fileName);\n    }\n    lineCount = 1;\n    fclose(fileStream);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    byteValue = *buffer;\n    startOfLinePointer = buffer;\n    while (currentLine = startOfLinePointer, byteValue != 0) {\n      for (; byteValue = *currentLine, endOfLinePointer = currentLine, byteValue != 10; currentLine = currentLine + 1) {\n        if ((char)byteValue < '\\v') {\n          if (byteValue == 0) {\n            nextLineStart = currentLine + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (byteValue == 0xd) {\n            *currentLine = 0;\n            nextLineStart = currentLine + 1;\n            if (currentLine[1] == 10) {\n              nextLineStart = currentLine + 2;\n              endOfLinePointer = currentLine + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (byteValue == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        endOfLinePointer = currentLine + 1;\n        nextLineStart = currentLine + 2;\n      }\n      else {\n        nextLineStart = currentLine + 1;\n      }\nLAB_00114553:\n      byteValue = *startOfLinePointer;\n      while ((byteValue == 0x20 || (currentLine = startOfLinePointer, byteValue == 9))) {\n        currentLine = startOfLinePointer + 1;\n        startOfLinePointer = startOfLinePointer + 1;\n        byteValue = *currentLine;\n      }\n      do {\n        if ((byteValue == 10) || (byteValue == 0xd)) goto LAB_00114676;\n        if (byteValue == 0) goto LAB_00114599;\n        byteValue = currentLine[1];\n        currentLine = currentLine + 1;\n      } while ((byteValue != 0x20) && (byteValue != 9));\n      if ((char)byteValue < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (byteValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        byteValue = currentLine[1];\n        if ((((((byteValue == 9) || (byteValue == 0x20)) &&\n              ((byteValue = currentLine[2], byteValue == 9 || (byteValue == 0x20)))) &&\n             ((byteValue = currentLine[3], byteValue == 9 || (byteValue == 0x20)))) &&\n            ((byteValue = currentLine[4], byteValue == 9 || (byteValue == 0x20)))) &&\n           ((byteValue = currentLine[5], byteValue == 9 || (byteValue == 0x20)))) {\n          byteValue = currentLine[6];\n          tempPointer = currentLine + 6;\n          if ((byteValue == 9) || (byteValue == 0x20)) {\n            do {\n              do {\n                byteValue = tempPointer[1];\n                tempPointer = tempPointer + 1;\n              } while (byteValue == 0x20);\n            } while (byteValue == 9);\n          }\n        }\n        if ((0xd < byteValue) || ((-0x2402L >> (byteValue & 0x3f) & 1U) != 0)) {\n          translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(translatedString,fileName,lineCount);\n        }\n      }\nLAB_00114599:\n      *currentLine = 0;\n      if (startOfLinePointer < currentLine) {\n        hashTablePointer = (byte **)htab_find_slot(hashTable,startOfLinePointer,1);\n        *hashTablePointer = startOfLinePointer;\n      }\n      lineCount = lineCount + 1;\n      startOfLinePointer = nextLineStart;\n      byteValue = endOfLinePointer[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "FUN_00113f50",
                "FUN_00119dd0",
                "fclose",
                "strerror",
                "ferror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "construct_formatted_string_0010a94e",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "cVar1": "flagChar",
                "__s": "someString",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "flagString",
                "lVar2": "dataStructurePtr"
            },
            "code": "\nundefined8 constructFormattedString_0010a94e(long dataStructure,char *value1,char *value2,int flag)\n\n{\n  char flagChar;\n  long dataStructurePtr;\n  char *someString;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flagChar = *(char *)(*(long *)(dataStructure + 0x60) + 0x1c);\n  someString = (char *)FUN_00109b2f();\n  formattedString = *(char **)(*(long *)(dataStructure + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    length1 = strlen(formattedString);\n    length2 = strlen(value1);\n    length3 = strlen(someString);\n    length4 = strlen(value2);\n    formattedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(dataStructure + 0x60) + 0x20),value1,flagString,\n            someString,value2,*(long *)(dataStructure + 0x60));\n    free(*(void **)(*(long *)(dataStructure + 0x60) + 0x20));\n    dataStructurePtr = *(long *)(dataStructure + 0x60);\n    *(char **)(dataStructurePtr + 0x20) = formattedString;\n    if (flagChar != '\\0') {\n      *(undefined *)(dataStructurePtr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)dataStructurePtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_formatted_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_data_from_binary_00113b1e",
                "param_1": "binaryData",
                "param_2": "param2",
                "param_3": "originalValue",
                "param_4": "param4",
                "auVar1": "result1",
                "piVar2": "dataPointer",
                "uVar3": "retrievedValue",
                "auVar4": "result2"
            },
            "code": "\nundefined  [16] extractDataFromBinary_00113b1e(long binaryData,undefined8 param2,ulong originalValue,undefined8 param4)\n\n{\n  undefined result1 [16];\n  int *dataPointer;\n  undefined8 retrievedValue;\n  undefined result2 [16];\n  \n  if (binaryData != 0) {\n    dataPointer = (int *)FUN_00112b6e(binaryData,0);\n    if ((dataPointer == (int *)0x0) || (3 < *dataPointer - 7U)) {\n      retrievedValue = 0;\n    }\n    else {\n      retrievedValue = **(undefined8 **)(dataPointer + 4);\n    }\n    result2._8_8_ = param4;\n    result2._0_8_ = retrievedValue;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = originalValue;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "send_request_0010a0e9",
                "param_1": "memory_base",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "uVar1": "value1",
                "uVar2": "value2",
                "__s": "string",
                "sVar3": "string_length",
                "__s_00": "new_string"
            },
            "code": "\nundefined4 send_request_0010a0e9(long memory_base,undefined8 parameter_1,undefined8 parameter_2)\n\n{\n  undefined value1;\n  undefined4 value2;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  \n  value1 = *(undefined *)(*(long *)(memory_base + 0x60) + 0x1c);\n  value2 = *(undefined4 *)(*(long *)(memory_base + 0x60) + 0x18);\n  string = (char *)FUN_00109b2f();\n  string_length = strlen(string);\n  new_string = (char *)xmalloc(string_length + 100);\n  sprintf(new_string,\"r%s;%ld;%ld;\",string,parameter_1,parameter_2);\n  free(string);\n  value2 = FUN_00109b52(memory_base,new_string,0,value1,value2);\n  if ((char)value2 != '\\0') {\n    free(new_string);\n  }\n  return value2;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "send_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "data",
                "cVar1": "result",
                "pcVar2": "currentChar"
            },
            "code": "\nvoid initializeData_00114c20(long data)\n\n{\n  char result;\n  char *currentChar;\n  \n  FUN_00114190(data,1,1);\n  result = FUN_00113fb0(data,&DAT_0011b499);\n  if (result != '\\0') {\n    currentChar = (char *)(data + 5);\n    if (*(char *)(data + 4) != 'a') {\n      currentChar = (char *)(data + 4);\n    }\n    if (*currentChar != '\\0') {\n      FUN_00114190(currentChar,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_for_duplicate_string_00115f50",
                "param_1": "length",
                "param_2": "stringArray",
                "param_3": "flag",
                "__s1": "currentString",
                "uVar1": "stringComparisonResult",
                "uVar2": "result",
                "extraout_EDX": "extraOutput",
                "plVar3": "linkedList",
                "auVar4": "auxiliaryVar"
            },
            "code": "\nuint checkForDuplicateString_00115f50(long length,char **stringArray,char flag)\n\n{\n  char *currentString;\n  uint stringComparisonResult;\n  undefined4 result;\n  undefined4 extraOutput;\n  long *linkedList;\n  undefined auxiliaryVar [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  auxiliaryVar = FUN_001159d0(stringArray);\n  if (auxiliaryVar[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      currentString = *stringArray;\n      linkedList = DAT_001279d8;\n      do {\n        stringComparisonResult = strcmp(currentString,(char *)linkedList[1]);\n        auxiliaryVar._4_4_ = 0;\n        auxiliaryVar._0_4_ = stringComparisonResult;\n        auxiliaryVar._8_4_ = extraOutput;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        linkedList = (long *)*linkedList;\n      } while (linkedList != (long *)0x0);\n    }\n    result = auxiliaryVar._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (auxiliaryVar._8_4_ = result, auxiliaryVar._0_8_ = *(long *)(length + 8),\n         *(int *)(*(long *)(length + 8) + 8) != 5)) ||\n        ((auxiliaryVar._0_8_ = (ulong)stringArray[0x1a], *(int *)(stringArray[0x1a] + 4) != 7 ||\n         (auxiliaryVar = FUN_00113fb0(*stringArray,\".gnu.build.attributes\"), auxiliaryVar[0] == '\\0')))) &&\n       ((*(byte *)((long)stringArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(auxiliaryVar._1_7_,stringArray[8] == (char *)0x0) |\n             CONCAT31(auxiliaryVar._9_3_,stringArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_for_duplicate_string_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_in_section_001083de",
                "unaff_RBX": "section",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytesInSection_001083de(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  undefined8 *section;\n  undefined4 sectionLength;\n  \n  sectionAddress = *section;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionAddress,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_in_section_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "data",
                "param_2": "size",
                "lVar1": "tempVar",
                "cVar2": "isValid",
                "__ptr": "ptrData",
                "uVar3": "sizeU",
                "uVar4": "sizeMinusOne",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processData_0010b948(long data,uint size)\n\n{\n  long tempVar;\n  char isValid;\n  void *ptrData;\n  ulong sizeU;\n  uint sizeMinusOne;\n  char formattedString [50];\n  \n  sizeMinusOne = size - 1;\n  sizeU = (ulong)size;\n  if ((sizeMinusOne < 0x10) && (tempVar = *(long *)(data + 0xf8 + (ulong)sizeMinusOne * 8), tempVar != 0)) {\n    FUN_00109cf4(data,tempVar,sizeU);\n    return;\n  }\n  isValid = FUN_0010b800(data,4,0);\n  if (isValid != '\\0') {\n    ptrData = (void *)FUN_00109b2f(data);\n    tempVar = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = tempVar + 1;\n    if (sizeMinusOne < 0x10) {\n      *(long *)(data + 0xf8 + (ulong)sizeMinusOne * 8) = tempVar;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",tempVar,ptrData,sizeU);\n    free(ptrData);\n    FUN_00109b52(data,formattedString,tempVar,1,sizeU);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010827b",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00113f50",
                "FUN_00109a32",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_001053b5",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010551d",
                "FUN_00108fb9",
                "FUN_00114460",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00114190",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_00116490",
                "FUN_00119f70",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00115b70",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_0010543c",
                "FUN_0010be1a",
                "FUN_00107880",
                "FUN_00108808",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_00114690",
                "FUN_00112c1f",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_001086af",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00119970",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_00104920",
                "FUN_0010911f",
                "FUN_00108916",
                "FUN_001083de",
                "FUN_0010808f",
                "FUN_0010ee3f",
                "FUN_0010871c",
                "FUN_00104966",
                "FUN_00114dc7",
                "FUN_00104ea2",
                "FUN_00112996",
                "FUN_0010882c",
                "FUN_0010b6ea",
                "FUN_00107976",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_0010b800",
                "FUN_00108b3e",
                "FUN_00108200",
                "FUN_0010da0b",
                "FUN_0010bc80",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info",
                "iVar1": "first_element",
                "__format": "format_string",
                "piVar3": "output_array",
                "plVar4": "current_element",
                "bVar5": "isCircular",
                "local_18": "debug_stack",
                "local_10": "result"
            },
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_element;\n  undefined8 uVar2;\n  char *format_string;\n  int *output_array;\n  long *current_element;\n  bool isCircular;\n  long *debug_stack;\n  int *result;\n  \n  first_element = *input_array;\n  if ((first_element != 1) && (1 < first_element - 0x16U)) {\n    return input_array;\n  }\n  current_element = debug_info;\n  while (current_element != (long *)0x0) {\n    if ((input_array == (int *)current_element[1]) ||\n       (isCircular = current_element == (long *)*current_element, current_element = (long *)*current_element, isCircular)) {\n      uVar2 = FUN_001129f4(input_array,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  debug_stack = debug_info;\n  result = input_array;\n  if (first_element - 0x16U < 2) {\n    output_array = (int *)get_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&debug_stack);\n    return output_array;\n  }\n  output_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == output_array) {\n    return input_array;\n  }\n  if (output_array == (int *)0x0) {\n    return input_array;\n  }\n  output_array = (int *)get_real_type_00112b6e(output_array,&debug_stack);\n  return output_array;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "length",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "flag1",
                "param_7": "flag2",
                "__s": "resultStr",
                "__s_00": "newStr",
                "sVar2": "strLength",
                "cVar3": "charValue",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long input,undefined8 param2,ulong length,undefined param4,ulong param5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 returnValue;\n  char *resultStr;\n  char *newStr;\n  size_t strLength;\n  char charValue;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    resultStr = (char *)0x0;\n    charValue = '\\0';\n  }\n  else {\n    charValue = *(char *)(*(long *)(input + 0x60) + 0x1c);\n    resultStr = (char *)FUN_00109b2f();\n    param5 = param5 & 0xffffffff;\n    length = length & 0xffffffff;\n  }\n  returnValue = FUN_0010a69a(input,param2,length,param4,param5);\n  if ((char)returnValue != '\\0') {\n    if (flag1 == 0) {\n      return returnValue;\n    }\n    if (flag2 == 0) {\n      if (resultStr == (char *)0x0) {\n        return 0;\n      }\n      strLength = strlen(resultStr);\n      newStr = (char *)xmalloc(strLength + 3);\n      sprintf(newStr,\"~%%%s\",resultStr);\n      free(resultStr);\n      if (charValue != '\\0') {\n        *(undefined *)(*(long *)(input + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(input + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      newStr = (char *)xmalloc(0x14);\n      sprintf(newStr,\"~%%%ld\",*(undefined8 *)(*(long *)(input + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(input + 0x60) + 0x38) = newStr;\n    return returnValue;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_linked_list_entry_00113d6e",
                "param_1": "data",
                "param_2": "next_entry",
                "lVar1": "new_entry",
                "puVar2": "entry_ptr"
            },
            "code": "\nlong create_linked_list_entry_00113d6e(undefined8 data,undefined8 next_entry)\n\n{\n  long new_entry;\n  undefined8 *entry_ptr;\n  \n  new_entry = FUN_00112904(0xb,0);\n  if (new_entry != 0) {\n    entry_ptr = (undefined8 *)xmalloc(0x10);\n    *entry_ptr = data;\n    entry_ptr[1] = next_entry;\n    *(undefined8 **)(new_entry + 0x10) = entry_ptr;\n  }\n  return new_entry;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_linked_list_entry_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_0010abdd",
                "FUN_00108863",
                "FUN_0011256b",
                "FUN_0010e6a8",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_001088ae",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_00116110",
                "FUN_0010ebb0",
                "FUN_0010c1c6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_00114690",
                "FUN_00114b84",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_0011173a",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_00109b2f",
                "FUN_0010b6ea",
                "FUN_0010a424",
                "FUN_0010a0e9",
                "FUN_001081e9",
                "FUN_0010a377"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_conditional_function_00114d50",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag"
            },
            "code": "\nvoid executeConditionalFunction_00114d50(long input1,long input2,uint flag)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,flag != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_conditional_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0011283f",
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *message;\n  \n  usageString = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,message,usageString);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "errorMessage",
                "param_10": "flag1",
                "param_11": "flag2",
                "param_12": "formatStr",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "charFlag",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localVar3",
                "local_f0": "localVar4",
                "local_e8": "localBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "errorCode1Copy",
                "local_a8": "errorCode2Copy",
                "local_98": "errorCode3Copy",
                "local_88": "errorCode4Copy",
                "local_78": "errorCode5Copy",
                "local_68": "errorCode6Copy",
                "local_58": "errorCode7Copy",
                "local_48": "errorCode8Copy",
                "iVar1": "error",
                "uVar2": "errorMsg"
            },
            "code": "\n\n\nvoid printError_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long errorMessage,long flag1,long *flag2,char *formatStr,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char charFlag;\n  int error;\n  undefined8 errorMsg;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (charFlag != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (flag1 != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(flag1);\n    }\n    if ((flag2 != (long *)0x0) && (*flag2 != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (formatStr != (char *)0x0) {\n    localVar3 = &stack0x00000008;\n    localVar4 = localBuffer;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatStr,&localVar1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMsg);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "fprintf",
                "bfd_get_error",
                "fwrite",
                "fputs",
                "fflush",
                "bfd_errmsg",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_001086af",
                "FUN_00108466",
                "FUN_0010551d",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010808f"
            ],
            "imported": false,
            "current_name": "print_error_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00109b52",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_001088ae"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "update_param_00113b4a",
                "param_1": "param",
                "lVar1": "result"
            },
            "code": "\nlong updateParam_00113b4a(long param)\n\n{\n  long result;\n  \n  if (param != 0) {\n    result = FUN_00112904(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = param;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "update_param_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_info_0010edb4",
                "param_1": "fileInfo",
                "param_2": "newFileName",
                "param_3": "fileType",
                "param_4": "fileSize",
                "cVar1": "comparisonResult",
                "iVar2": "filenameComparison",
                "uVar3": "updatedFileInfo",
                "in_R10": "unknownParam"
            },
            "code": "\nundefined8 updateFileInfo_0010edb4(long fileInfo,undefined8 newFileName,undefined4 fileType,ulong fileSize)\n\n{\n  char comparisonResult;\n  int filenameComparison;\n  undefined8 updatedFileInfo;\n  undefined8 unknownParam;\n  \n  if (*(long *)(fileInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInfo + 0x1f0) < fileSize) {\n    *(ulong *)(fileInfo + 0x1f0) = fileSize;\n  }\n  filenameComparison = filename_cmp(newFileName);\n  if (filenameComparison != 0) {\n    comparisonResult = FUN_0010e2f0(fileInfo,0x84,0,fileSize,newFileName);\n    if (comparisonResult == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInfo + 0x210) = newFileName;\n  }\n  updatedFileInfo = FUN_0010e2f0(fileInfo,0x44,fileType,fileSize - *(long *)(fileInfo + 0x200),0,unknownParam);\n  return updatedFileInfo;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_info_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_00119e70",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00104a35",
                "FUN_00108fb9",
                "FUN_001199d0",
                "FUN_0010911f",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00109022",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010871c",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010b6ea",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "FUN_0010be1a",
                "FUN_0010bc80",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_0010b0fa",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "data",
                "param_2": "size",
                "cVar1": "result",
                "__ptr": "ptr",
                "__s": "str",
                "sVar2": "strLen",
                "__s_00": "newStr",
                "in_R10": "additionalData",
                "iVar3": "counter",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processData_0010e5db(long data,int size)\n\n{\n  char result;\n  void *ptr;\n  char *str;\n  size_t strLen;\n  char *newStr;\n  ulong additionalData;\n  int counter;\n  undefined returnValue [16];\n  \n  counter = 0;\n  do {\n    if (size <= counter) {\n      returnValue = FUN_00109ed3(data,0x66,0,data + 0x188,data + 400,additionalData);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)FUN_00109b2f(data);\n      free(ptr);\n    }\n    else {\n      str = (char *)FUN_00109b2f(data);\n      strLen = strlen(str);\n      newStr = (char *)xmalloc(strLen + 3);\n      sprintf(newStr,\":t%s\",str);\n      free(str);\n      result = FUN_0010e2f0(data,0x80,0,0,newStr);\n      if (result == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = additionalData;\n        return returnValue << 0x40;\n      }\n      free(newStr);\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109ed3",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_data_00104d25",
                "param_7": "arg1"
            },
            "code": "\nvoid initializeData_00104d25(void)\n\n{\n  undefined8 arg1;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0,arg1,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_data_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debug_sections_0010551d",
                "puVar1": "sectionFlags",
                "bVar2": "byteVar",
                "puVar3": "ptrVar",
                "pcVar4": "sectionContentsFn",
                "puVar5": "noteSections",
                "uVar6": "mergeSize",
                "uVar7": "mergedSize",
                "__s": "warningMessage",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "uintVar",
                "iVar11": "intVar",
                "uVar12": "uintVar2",
                "iVar14": "intVar3",
                "plVar15": "sectionPtr",
                "uVar16": "newSectionSize",
                "uVar17": "errorMessage",
                "uVar22": "firstNotesOffset",
                "uVar24": "newSectionSize",
                "lVar21": "longVar",
                "lVar25": "longVar2",
                "lVar27": "longVar3",
                "piVar23": "errnoPtr",
                "sVar18": "sizeVar",
                "sVar26": "sizeVar2",
                "pcVar28": "charVar3",
                "pcVar33": "charVar4",
                "pcVar19": "concatenatedString"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong mergeDebugSections_0010551d(void)\n\n{\n  uint *sectionFlags;\n  byte byteVar;\n  undefined *ptrVar;\n  code *sectionContentsFn;\n  undefined8 *noteSections;\n  ulong mergeSize;\n  ulong mergedSize;\n  char *warningMessage;\n  char charVar;\n  char charVar2;\n  uint uintVar;\n  int intVar;\n  uint uintVar2;\n  undefined4 uVar13;\n  int intVar3;\n  long *sectionPtr;\n  undefined8 newSectionSize;\n  undefined8 errorMessage;\n  size_t sizeVar;\n  char *concatenatedString;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long longVar;\n  ulong firstNotesOffset;\n  int *errnoPtr;\n  ulong newSectionSize;\n  long longVar2;\n  FILE *warningMessage_00;\n  size_t sizeVar2;\n  long longVar3;\n  long *unaff_RBX;\n  char *charVar3;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *charVar4;\n  undefined4 *ptrVar4;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pptrVar7;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar2 = FUN_00113fb0(), charVar2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (longVar2 = *(long *)(unaff_RBP + 0x40), longVar2 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      longVar3 = FUN_001163d0();\n      unaff_RBX[2] = longVar3;\n      if ((longVar3 == longVar2) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longVar2 = *(long *)(unaff_RBP + 8); longVar2 != 0; longVar2 = *(long *)(longVar2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    longVar2 = bfd_get_section_by_name();\n    if (longVar2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(longVar2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sizeVar = *(size_t *)(longVar2 + 0x40);\n      warningMessage_00 = fopen((char *)puVar29[2],\"w\");\n      if (warningMessage_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sizeVar != 0) &&\n                (sizeVar2 = fwrite(in_stack_00000140,1,sizeVar,warningMessage_00), sizeVar2 != sizeVar)) {\n          errnoPtr = __errno_location();\n          charVar4 = strerror(*errnoPtr);\n          errorMessage = puVar29[2];\n          newSectionSize = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(newSectionSize,errorMessage,charVar4);\n          free(in_stack_00000140);\n          fclose(warningMessage_00);\n          return 0;\n        }\n        fclose(warningMessage_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longVar2 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (longVar2 != 0) {\n      errorMessage = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(errorMessage);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    longVar2 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      errorMessage = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,errorMessage,longVar2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (newSectionSize = *(ulong *)(in_stack_00000008 + 0x90); newSectionSize != 0;\n          newSectionSize = *(ulong *)(newSectionSize + 8)) {\n        firstNotesOffset = *(ulong *)(newSectionSize + 0x30);\n        uVar30 = uVar20;\n        mergeSize = newSectionSize;\n        mergedSize = uVar20;\n        if (firstNotesOffset != 0) {\n          while ((uVar30 = mergeSize, mergedSize != 0 &&\n                 (uVar30 = newSectionSize, firstNotesOffset <= *(ulong *)(uVar20 + 0x30)))) {\n            newSectionSize = *(ulong *)(newSectionSize + 8);\n            if (newSectionSize == 0) goto LAB_00107db8;\n            firstNotesOffset = *(ulong *)(newSectionSize + 0x30);\n            mergeSize = uVar20;\n            mergedSize = firstNotesOffset;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        newSectionSize = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        newSectionSize = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          newSectionSize = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = newSectionSize;\n      *(ulong *)(lStack0000000000000078 + 0x38) = newSectionSize;\n    }\n  }\n  plVar32 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    newSectionSize = FUN_0010554f();\n    return newSectionSize;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pptrVar7 = &PTR_swarningMessagetab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptrVar4 = puStack0000000000000020;\n    for (longVar2 = 0x18; longVar2 != 0; longVar2 = longVar2 + -1) {\n      *ptrVar4 = 0;\n      ptrVar4 = ptrVar4 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptrVar = *pptrVar7;\n      longVar2 = bfd_get_section_by_name();\n      longVar3 = bfd_get_section_by_name();\n      if ((longVar2 != 0) && (longVar3 != 0)) {\n        longVar2 = *(long *)(longVar2 + 0x40);\n        __ptr = (void *)xmalloc(longVar2);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          newSectionSize = *(ulong *)(longVar3 + 0x40);\n          __ptr_00 = (void *)xmalloc(newSectionSize + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + newSectionSize) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + longVar2 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                longVar3 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longVar3;\n                }\n                else {\n                  firstNotesOffset = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (firstNotesOffset < newSectionSize) {\n                    charVar4 = (char *)((long)__ptr_00 + firstNotesOffset);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar = strlen(charVar4);\n                      if (((sizeVar == 0) || (charVar3 = charVar4 + (sizeVar - 1), *charVar3 != '\\')) ||\n                         ((ulong)((long)__ptr + longVar2) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *charVar3 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(intVar + (int)lStack0000000000000088);\n                      if (newSectionSize <= uVar20) break;\n                      charVar4 = (char *)concat(charVar4,(long)__ptr_00 + uVar20,0);\n                      *charVar3 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = charVar4;\n                    }\n                    errorMessage = *unaff_R14;\n                    charVar3 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,charVar3,errorMessage,ptrVar,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteVar,uVar13,longVar3,charVar4);\n                    charVar2 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    errorMessage = *unaff_R14;\n                    charVar4 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,charVar4,errorMessage,ptrVar,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pptrVar7 = pptrVar7 + 2;\n    } while (pptrVar7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = FUN_0010c892(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      longVar2 = 0;\n      for (sectionPtr = plVar32; sectionPtr < plVar32 + in_stack_00000010; sectionPtr = sectionPtr + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longVar2 != 0) || (longVar2 = FUN_00112894(), longVar2 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            charVar4 = (char *)0x0;\n            charVar3 = in_stack_00000150;\n            while (((*charVar3 != '\\0' && (sizeVar = strlen(charVar3), charVar3[sizeVar - 1] == '\\')) &&\n                   (sectionPtr + 1 < plVar32 + in_stack_00000010))) {\n              concatenatedString = (char *)xstrdup(charVar3);\n              sizeVar = strlen(concatenatedString);\n              concatenatedString[sizeVar - 1] = '\\0';\n              charVar3 = (char *)concat(concatenatedString,*(undefined8 *)(sectionPtr[1] + 8),0);\n              free(concatenatedString);\n              free(charVar4);\n              sectionPtr = sectionPtr + 1;\n              charVar4 = charVar3;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         charVar3);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,longVar2,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((longVar2 != 0) && (charVar2 = FUN_0010c892(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        charVar4 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (longVar2 = 0x22; longVar2 != 0; longVar2 = longVar2 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        longVar2 = plVar32[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        longVar3 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          charVar4 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          errorMessage = dcgettext(0,charVar4,5);\n          FUN_00119ed0(errorMessage);\n          goto LAB_00105981;\n        }\n        charVar4 = *(char **)(longVar2 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          charVar4 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longVar3) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = FUN_0010bbd3(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = charVar4;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar = strcmp(charVar4,\".bb\");\n              if (intVar == 0) {\n                charVar = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar = strcmp(charVar4,\".eb\");\n              if (intVar == 0) {\n                charVar = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar = strcmp(charVar4,\".bf\");\n              if (intVar == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longVar3 = FUN_0010dac0();\n                  if ((longVar3 == 0) ||\n                     (charVar2 = FUN_0010bc80(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar = in_stack_00000118 - 1;\n                    }\n                    longVar2 = *(long *)(*(long *)(longVar2 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      charVar = FUN_0010bf86(puStack0000000000000020,intVar + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + longVar2);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charVar4 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar = strcmp(charVar4,\".ef\");\n                if (intVar != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = FUN_0010be1a(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charVar4 = \"%ld: unexpected .ef\\n\";\n              }\n              errorMessage = dcgettext(0,charVar4,5);\n              FUN_00119ed0(errorMessage);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar = FUN_0010dac0();\n          if (longVar == 0) goto LAB_00105981;\n          charVar = FUN_00112a33(&stack0x00000140,longVar2,longVar3);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278d0 + in_stack_00000010;\n        sectionPtr = DAT_001278d0;\n        do {\n          uintVar = *(uint *)(*sectionPtr + 0x18);\n          if ((uintVar & 0x1000000) != 0) {\n            *(uint *)(*sectionPtr + 0x18) = uintVar & 0xfeffffff;\n          }\n          sectionPtr = sectionPtr + 1;\n        } while (plVar32 != sectionPtr);\n      }\n    }\n    else {\n      for (longVar2 = *(long *)(in_stack_00000008 + 0x90); longVar2 != 0; longVar2 = *(long *)(longVar2 + 8)\n          ) {\n        if (*(long *)(longVar2 + 0xe8) != 0) {\n          sectionFlags = (uint *)(*(long *)(longVar2 + 0xe8) + 0x18);\n          *sectionFlags = *sectionFlags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar = bfd_get_error();\n      if (intVar != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    longVar2 = xmalloc();\n    plVar32 = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278c8 = longVar2;\n    if (in_stack_00000010 == 0) {\n      newSectionSize = 0;\n    }\n    else {\n      newSectionSize = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar = DAT_001279c0;\n        sectionPtr = (long *)plVar32[_in_stack_00000018];\n        sectionContentsFn = (code *)sectionPtr[4];\n        uintVar = *(uint *)(sectionPtr + 3);\n        charVar4 = (char *)sectionPtr[1];\n        charVar3 = charVar4;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((intVar <= iVar31) || (concatenatedString = (char *)puVar29[5], concatenatedString == (char *)0x0))\n            goto LAB_00105ad5;\n            if (concatenatedString != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intVar3 = strcmp(concatenatedString,charVar4);\n          if (intVar3 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(concatenatedString);\n          uVar20 = newSectionSize + 1;\n          puVar29[5] = \"\";\n          newSectionSize = FUN_0011a2e0(puVar29);\n          errorMessage = DAT_001278f0;\n          *(undefined8 *)(longVar2 + newSectionSize * 8) = newSectionSize;\n          longVar3 = htab_elements(errorMessage);\n          if ((longVar3 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *charVar4;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          charVar4 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            longVar3 = unaff_R14[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longVar3 = htab_elements(DAT_001278f0);\n        uVar20 = newSectionSize;\n        if ((longVar3 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (charVar4 != (char *)0x0) {\nLAB_001064eb:\n          if (((*charVar4 == '_') && (charVar4[1] == '_')) &&\n             (intVar = strcmp(charVar4 + (charVar4[2] == '_'),\"__gnu_lto_slim\"), intVar == 0)) {\n            errorMessage = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(errorMessage);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = charVar4;\n        longVar3 = htab_find(DAT_001278f0);\n        if (((longVar3 == 0) || (charVar3 = *(char **)(longVar3 + 8), charVar4 == charVar3)) &&\n           (charVar3 = charVar4, ppcVar35 = DAT_001278f8, (uintVar & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar = strcmp(*ppcVar35,charVar4);\n            if (intVar == 0) {\n              charVar3 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        sectionPtr[1] = (long)charVar3;\n        charVar2 = *charVar3;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        charVar4 = DAT_00127928;\n        longVar3 = unaff_R14[1];\n        if (*(char *)(longVar3 + 0x1c) == charVar2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uintVar & 0x82) == 0 && (sectionContentsFn != bfd_map_over_sections)) &&\n                ((*(byte *)(sectionPtr[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            charVar3 = charVar3 + 1;\n            sectionPtr[1] = (long)charVar3;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            charVar3 = charVar3 + 1;\n            sectionPtr[1] = (long)charVar3;\n            sizeVar = strlen(charVar3);\n            longVar3 = sizeVar + 2;\n            goto LAB_001066bc;\n          }\n          *charVar3 = charVar2;\n          sectionPtr[1] = (long)charVar3;\n          newSectionSize = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            newSectionSize = uVar20;\n            if (charVar4 == (char *)0x0) goto LAB_00105b32;\n            sizeVar = strlen(charVar3);\n            sizeVar2 = strlen(charVar4);\n            charVar4 = (char *)xmalloc(sizeVar2 + sizeVar + 1);\n            concatenatedString = charVar4;\n          }\n          else {\nLAB_0010668d:\n            charVar4 = DAT_00127928;\n            if ((*(char *)(longVar3 + 0x1c) != '\\0') && (charVar2 != *(char *)(longVar3 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar = strlen(charVar3);\n            longVar3 = sizeVar + 2;\n            if (charVar4 == (char *)0x0) {\n              concatenatedString = (char *)xmalloc(longVar3);\n            }\n            else {\nLAB_001066bc:\n              sizeVar = strlen(charVar4);\n              concatenatedString = (char *)xmalloc(sizeVar + longVar3);\n            }\n            charVar4 = concatenatedString + 1;\n            *concatenatedString = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          warningMessage = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(charVar4,DAT_00127928);\n            sizeVar = strlen(warningMessage);\n            charVar4 = charVar4 + sizeVar;\n          }\n          strcpy(charVar4,charVar3);\n          sectionPtr[1] = (long)concatenatedString;\n          charVar3 = concatenatedString;\n          newSectionSize = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uintVar & 0x20) == 0) &&\n           (((uintVar & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(sectionPtr[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar & 0x82) != 0 || ((*(byte *)(sectionPtr[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar = bfd_decode_symclass(sectionPtr), intVar == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              longVar3 = htab_find();\n              if (longVar3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = charVar3;\n              htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar & 0x82) == 0) && (sectionContentsFn != bfd_map_over_sections)) &&\n                  ((*(byte *)(sectionPtr[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (longVar3 = *(long *)(sectionPtr[4] + 0xd0), longVar3 == 0)) ||\n                 (*(long *)(longVar3 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVar2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          longVar3 = htab_find();\n          if (longVar3 != 0) {\nLAB_0010687f:\n            errorMessage = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(errorMessage);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = charVar3;\n          htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = charVar3;\n            htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longVar3 = htab_find();\n          if (longVar3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uintVar & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            longVar3 = htab_find();\n            if (longVar3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = charVar3;\n            htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = FUN_001159d0(sectionPtr[4]);\n          if (charVar2 == '\\0') {\n            if (((uintVar & 0x800002) == 0) && (sectionContentsFn != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar & 0x82) != 0) {\n                charVar2 = FUN_00115d70(charVar3);\n                if ((charVar2 == '\\0') &&\n                   ((longVar3 = htab_elements(DAT_001279f8), longVar3 == 0 ||\n                    (charVar2 = FUN_00115d70(charVar3), charVar2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uintVar2 = *(uint *)(sectionPtr + 3), (uintVar2 & 0x200000) != 0)) ||\n                       (longVar3 = *sectionPtr, longVar3 == 0)) ||\n                      ((*(int *)(*(long *)(longVar3 + 8) + 8) != 5 || (*(long *)(longVar3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)sectionPtr + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar2 = *(uint *)(sectionPtr + 3);\n                }\n                *(uint *)(sectionPtr + 3) = uintVar2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar & 1) != 0) && (charVar2 = FUN_00115d70(charVar3), charVar2 != '\\0')) {\n                *(uint *)(sectionPtr + 3) = *(uint *)(sectionPtr + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVar2 = FUN_00115d70(charVar3), charVar2 != '\\0')) {\n                *(uint *)(sectionPtr + 3) = *(uint *)(sectionPtr + 3) & 0xff7ffffd | 0x80;\n              }\n              if (sectionContentsFn != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longVar2 + newSectionSize * 8) = sectionPtr;\n            newSectionSize = newSectionSize + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      intVar = DAT_001279c0;\n      for (longVar3 = 0; longVar3 < intVar; longVar3 = longVar3 + 1) {\n        charVar4 = (char *)puVar29[5];\n        if (charVar4 == (char *)0x0) {\n          longVar = newSectionSize * 8;\n          newSectionSize = newSectionSize + 1;\n          errorMessage = FUN_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(longVar2 + longVar) = errorMessage;\n          intVar = DAT_001279c0;\n        }\n        else if (charVar4 != \"\") {\n          errorMessage = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(errorMessage,charVar4);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = DAT_001279a0 != '\\0';\n    *(undefined8 *)(longVar2 + newSectionSize * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar != 5) && (intVar != 2)) {\n        errorMessage = **(undefined8 **)(in_stack_00000008 + 8);\n        newSectionSize = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,newSectionSize,errorMessage);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      longVar2 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      longVar3 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((longVar2 == 0) || (longVar3 == 0)) ||\n          (charVar2 = bfd_set_section_size(longVar2,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(longVar3,in_stack_00000140), charVar2 == '\\0')) {\n        charVar4 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        errorMessage = dcgettext(0,charVar4,5);\n        FUN_001126c0(0,in_stack_00000008,0,errorMessage);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(longVar2 + 0x7c) = 2;\n      *(undefined4 *)(longVar3 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (in_stack_00000008,longVar2,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (in_stack_00000008,longVar3,in_stack_000000e0,0,in_stack_00000140),\n         charVar2 == '\\0')) {\n        charVar4 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = newSectionSize & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    longVar2 = htab_elements(DAT_00127a18);\n    if (((longVar2 != 0) ||\n        (((((((longVar2 = htab_elements(DAT_00127a28), longVar2 != 0 ||\n              (longVar2 = htab_elements(DAT_00127a08), longVar2 != 0)) ||\n             (longVar2 = htab_elements(DAT_00127a00), longVar2 != 0)) ||\n            ((longVar2 = htab_elements(DAT_001279f8), longVar2 != 0 ||\n             (longVar2 = htab_elements(DAT_001279f0), longVar2 != 0)))) ||\n           (longVar2 = htab_elements(DAT_001278f0), longVar2 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279e0; noteSections = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVar2 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVar2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; noteSections != (undefined8 *)0x0; noteSections = (undefined8 *)*noteSections) {\n    errorMessage = *(undefined8 *)(noteSections[5] + 0x60);\n    charVar2 = bfd_set_section_contents(in_stack_00000008,errorMessage,noteSections[4],0,noteSections[3]);\n    if (charVar2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,errorMessage,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      errorMessage = *unaff_R14;\n      newSectionSize = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(newSectionSize,errorMessage);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       longVar2 = DAT_00127a30, charVar2 != '\\0')) {\n      uintVar = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      newSectionSize = (ulong)uintVar;\n      if ((char)uintVar != '\\0') {\n        if (DAT_00127930 == 0) {\n          return newSectionSize;\n        }\n        charVar2 = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (charVar2 != '\\0') {\n          return newSectionSize;\n        }\n        errorMessage = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(errorMessage,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          errorMessage = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(errorMessage);\n          return newSectionSize;\n        }\n        errorMessage = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(errorMessage);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return newSectionSize;\n      }\n      errorMessage = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,errorMessage);\n    }\n    else {\n      errorMessage = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,errorMessage,longVar2);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVar2 = FUN_00113fb0(*puVar29,\".gnu.build.attributes\"), charVar2 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      sectionPtr = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        charVar4 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charVar2 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (charVar2 == '\\0') {\n            errorMessage = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,puVar29,errorMessage);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = sectionPtr;\n          if (*(undefined8 **)(*sectionPtr + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)sectionPtr[3];\n          sectionPtr = plVar32;\n        } while (plVar32 != (long *)0x0);\n        charVar4 = \"error: failed to locate merged notes\";\n      }\n      errorMessage = dcgettext(0,charVar4,5);\n      FUN_001126c0(0,in_stack_00000008,puVar29,errorMessage);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00105828",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid hashString_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_linked_list_0010c1c6",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "puVar1": "ptr",
                "cVar2": "result",
                "__ptr": "currentNode"
            },
            "code": "\nundefined processLinkedList_0010c1c6(undefined8 arg1,long arg2,undefined8 arg3,undefined8 arg4,\n                      undefined8 arg5,undefined8 arg6)\n\n{\n  undefined8 *ptr;\n  char result;\n  undefined8 *currentNode;\n  \n  currentNode = *(undefined8 **)(arg2 + 0x78);\n  while( true ) {\n    if (currentNode == (undefined8 *)0x0) {\n      *(undefined8 *)(arg2 + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(arg1,currentNode[1],currentNode[2],*(undefined4 *)(currentNode + 3),currentNode[4],arg6,\n                         arg5);\n    if (result == '\\0') break;\n    ptr = (undefined8 *)*currentNode;\n    free(currentNode);\n    currentNode = ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_linked_list_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "filter_valid_pointers_001082df",
                "unaff_RBX": "baseAddress",
                "puVar4": "outputPointer",
                "puVar5": "currentOutputPointer",
                "unaff_RBP": "functionBase",
                "uVar6": "loopIndex",
                "unaff_R13": "inputPointersArray",
                "lVar2": "currentPointerValue",
                "cVar3": "returnValue"
            },
            "code": "\nvoid filterValidPointers_001082df(void)\n\n{\n  uint uVar1;\n  long currentPointerValue;\n  char returnValue;\n  long baseAddress;\n  undefined8 *outputPointer;\n  undefined8 *currentOutputPointer;\n  long functionBase;\n  ulong loopIndex;\n  undefined8 *inputPointersArray;\n  \n  uVar1 = *(uint *)(baseAddress + 0x78);\n  if (DAT_00127a48 == 7) {\n    outputPointer = inputPointersArray;\n    for (loopIndex = 0; loopIndex != uVar1; loopIndex = loopIndex + 1) {\n      currentOutputPointer = outputPointer;\n      if (((*(long **)inputPointersArray[loopIndex] != (long *)0x0) &&\n          (currentPointerValue = **(long **)inputPointersArray[loopIndex], currentPointerValue != 0)) &&\n         (returnValue = FUN_00115d70(*(undefined8 *)(currentPointerValue + 8),DAT_00127a28), returnValue != '\\0')) {\n        currentOutputPointer = outputPointer + 1;\n        *outputPointer = inputPointersArray[loopIndex];\n      }\n      outputPointer = currentOutputPointer;\n    }\n    *outputPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionBase + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "filter_valid_pointers_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_00114d60",
                "param_1": "fileInfo",
                "iVar1": "feofStatus",
                "piVar2": "errLocation",
                "pcVar3": "errMsg",
                "uVar4": "errorMsg",
                "__stream": "fileStream",
                "uVar5": "tempVariable",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndStoreFile_00114d60(long fileInfo)\n\n{\n  int feofStatus;\n  int *errLocation;\n  char *errMsg;\n  undefined8 errorMsg;\n  FILE *fileStream;\n  undefined8 tempVariable;\n  size_t bytesRead;\n  long totalBytesRead;\n  long bufferSize;\n  \n  fileStream = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errLocation = __errno_location();\n    errMsg = strerror(*errLocation);\n    tempVariable = *(undefined8 *)(fileInfo + 0x10);\n    errorMsg = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(errorMsg,tempVariable,errMsg);\n  }\n  bufferSize = 0x1000;\n  totalBytesRead = 0;\n  tempVariable = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = tempVariable;\n  while( true ) {\n    feofStatus = feof(fileStream);\n    if (feofStatus != 0) {\n      *(long *)(fileInfo + 0x18) = totalBytesRead;\n      fclose(fileStream);\n      return;\n    }\n    if (totalBytesRead == bufferSize) {\n      bufferSize = totalBytesRead * 2;\n      tempVariable = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = tempVariable;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + totalBytesRead),1,bufferSize - totalBytesRead,fileStream);\n    feofStatus = ferror(fileStream);\n    if (feofStatus != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  tempVariable = *(undefined8 *)(fileInfo + 0x10);\n  errorMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(errorMsg,tempVariable);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010543c",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_and_print_section_00108808",
                "unaff_RBP": "baseAddress",
                "uVar1": "sectionAddress",
                "uVar2": "sectionName"
            },
            "code": "\nvoid findAndPrintSection_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 sectionName;\n  long baseAddress;\n  \n  sectionAddress = *(undefined8 *)(baseAddress + 0x20);\n  sectionName = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(sectionName,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_and_print_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_lines_00104d1c",
                "unaff_EBP": "param1",
                "unaff_R13": "param2",
                "unaff_R14": "line",
                "unaff_R15": "ptr",
                "in_stack_00000008": "stack_param1",
                "in_stack_00000010": "stack_param2",
                "uVar1": "result",
                "ppbVar2": "hash_table_entry",
                "pbVar3": "token",
                "bVar4": "ch",
                "pbVar5": "next_line",
                "pbVar6": "token_ptr",
                "pbVar7": "line_ptr"
            },
            "code": "\nvoid parse_lines_00104d1c(void)\n\n{\n  undefined8 result;\n  byte **hash_table_entry;\n  byte *token;\n  byte ch;\n  byte *next_line;\n  int param1;\n  byte *token_ptr;\n  undefined8 param2;\n  byte *line_ptr;\n  byte *line;\n  byte *ptr;\n  undefined8 stack_param1;\n  undefined8 *stack_param2;\n  \n  *line = 0;\nLAB_00114520:\n  line = line + 1;\n  do {\n    ch = *line;\n    line_ptr = line;\n    if (ch == 10) {\n      *line = 0;\n      if (line[1] == 0xd) {\n        line_ptr = line + 1;\n        next_line = line + 2;\n      }\n      else {\n        next_line = line + 1;\n      }\n    }\n    else if ((char)ch < '\\v') {\n      if (ch != 0) goto LAB_00114520;\n      next_line = line + 1;\n    }\n    else {\n      if (ch != 0xd) break;\n      *line = 0;\n      next_line = line + 1;\n      if (line[1] == 10) {\n        next_line = line + 2;\n        line_ptr = line + 1;\n      }\n    }\n    ch = *ptr;\n    while ((ch == 0x20 || (token_ptr = ptr, ch == 9))) {\n      token_ptr = ptr + 1;\n      ptr = ptr + 1;\n      ch = *token_ptr;\n    }\n    do {\n      if ((ch == 10) || (ch == 0xd)) goto LAB_00114676;\n      if (ch == 0) goto LAB_00114599;\n      ch = token_ptr[1];\n      token_ptr = token_ptr + 1;\n    } while ((ch != 0x20) && (ch != 9));\n    if ((char)ch < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (ch & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      ch = token_ptr[1];\n      if ((((((ch == 9) || (ch == 0x20)) &&\n            ((ch = token_ptr[2], ch == 9 || (ch == 0x20)))) &&\n           ((ch = token_ptr[3], ch == 9 || (ch == 0x20)))) &&\n          ((ch = token_ptr[4], ch == 9 || (ch == 0x20)))) &&\n         ((ch = token_ptr[5], ch == 9 || (ch == 0x20)))) {\n        ch = token_ptr[6];\n        token = token_ptr + 6;\n        if ((ch == 9) || (ch == 0x20)) {\n          do {\n            do {\n              ch = token[1];\n              token = token + 1;\n            } while (ch == 0x20);\n          } while (ch == 9);\n        }\n      }\n      if ((0xd < ch) || ((-0x2402L >> (ch & 0x3f) & 1U) != 0)) {\n        result = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(result,stack_param1,param1);\n      }\n    }\nLAB_00114599:\n    *token_ptr = 0;\n    if (ptr < token_ptr) {\n      hash_table_entry = (byte **)htab_find_slot();\n      *hash_table_entry = ptr;\n    }\n    param1 = param1 + 1;\n    line = next_line;\n    ptr = next_line;\n    if (line_ptr[1] == 0) {\n      *stack_param2 = param2;\n      return;\n    }\n  } while( true );\n  if (ch == 0x23) {\n    parse_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_bad_number_00119940",
                "param_1": "memory_address",
                "param_2": "message",
                "local_20": "scan_results",
                "uVar1": "translated_message"
            },
            "code": "\nvoid check_and_print_bad_number_00119940(undefined8 memory_address,undefined8 message)\n\n{\n  undefined8 translated_message;\n  char *scan_results [2];\n  \n  bfd_scan_vma(memory_address,scan_results,0);\n  if (*scan_results[0] == '\\0') {\n    return;\n  }\n  translated_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(translated_message,message,memory_address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_bad_number_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_operation_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "rax"
            },
            "code": "\nvoid execute_operation_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_operation_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "validate_and_process_data_00113a4d",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "data_ptr",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "cVar1": "result",
                "uVar2": "output",
                "puVar3": "ptr",
                "auVar4": "result_array"
            },
            "code": "\nundefined8\nvalidate_and_process_data_00113a4d(undefined8 input_param_1,undefined8 input_param_2,long data_ptr,undefined8 input_param_4,\n            undefined8 input_param_5)\n\n{\n  char result;\n  undefined8 output;\n  undefined8 *ptr;\n  undefined result_array [16];\n  \n  result = FUN_00112502(input_param_1,input_param_2,*(undefined8 *)(data_ptr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data_ptr + 0x28) == 0 && (*(long *)(data_ptr + 8) != 0)) ||\n      (result = FUN_0010ec73(input_param_2,*(undefined8 *)(data_ptr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data_ptr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data_ptr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(input_param_1,input_param_2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data_ptr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = validate_and_process_data_00113a4d(input_param_1,input_param_2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    result_array = FUN_00112502(input_param_1,input_param_2,*(undefined8 *)(data_ptr + 0x20));\n    if (result_array[0] != '\\0') {\n      if ((*(long *)(data_ptr + 0x28) == 0) && (*(long *)(data_ptr + 8) != 0)) {\n        return result_array._0_8_;\n      }\n      output = FUN_0010ed2c(input_param_2,*(undefined8 *)(data_ptr + 0x20),result_array._8_8_,input_param_5);\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00112502",
                "FUN_00113a4d",
                "FUN_0010ec73",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "validate_and_process_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryAddress"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryAddress;\n  undefined8 param_7;\n  \n  param_7 = returnValue;\n  free(memoryAddress);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_resource_00113b71",
                "param_1": "resourceValue",
                "lVar1": "allocatedResource"
            },
            "code": "\nlong initializeResource_00113b71(long resourceValue)\n\n{\n  long allocatedResource;\n  \n  if (resourceValue != 0) {\n    allocatedResource = FUN_00112904(0x14,0);\n    if (allocatedResource == 0) {\n      allocatedResource = 0;\n    }\n    else {\n      *(long *)(allocatedResource + 0x10) = resourceValue;\n    }\n    return allocatedResource;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_resource_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "update_value_in_memory_00109dfe",
                "param_1": "memoryAddress",
                "lVar1": "newValue",
                "local_40": "formattedString"
            },
            "code": "\nvoid updateValueInMemory_00109dfe(long memoryAddress)\n\n{\n  long newValue;\n  char formattedString [40];\n  \n  if (*(long *)(memoryAddress + 0x70) != 0) {\n    FUN_00109cf4(memoryAddress,*(long *)(memoryAddress + 0x70),0);\n    return;\n  }\n  newValue = *(long *)(memoryAddress + 0x68);\n  *(long *)(memoryAddress + 0x68) = newValue + 1;\n  *(long *)(memoryAddress + 0x70) = newValue;\n  sprintf(formattedString,\"%ld=%ld\",newValue,newValue);\n  FUN_00109b52(memoryAddress,formattedString,newValue,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_value_in_memory_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "objectAddress",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long objectAddress)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(objectAddress + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(objectAddress + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "combine_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "structPtr",
                "lVar2": "subStructPtr",
                "__ptr": "subStructArray",
                "pcVar3": "subStructString",
                "sVar4": "subStructStringLength",
                "sVar5": "structStringLength",
                "pcVar6": "combinedString",
                "uVar7": "returnValue",
                "lVar8": "combinedStringLength",
                "uVar9": "subStructCount",
                "uVar10": "subStructIndex"
            },
            "code": "\nundefined8 combineStrings_0010ae0e(long input)\n\n{\n  long structPtr;\n  long subStructPtr;\n  void *subStructArray;\n  char *subStructString;\n  size_t subStructStringLength;\n  size_t structStringLength;\n  char *combinedString;\n  undefined8 returnValue;\n  long combinedStringLength;\n  uint subStructCount;\n  ulong subStructIndex;\n  \n  returnValue = 0;\n  structPtr = *(long *)(input + 0x60);\n  if (((structPtr != 0) && (*(char **)(structPtr + 8) != (char *)0x0)) &&\n     (combinedString = *(char **)(structPtr + 0x20), combinedString != (char *)0x0)) {\n    subStructStringLength = strlen(*(char **)(structPtr + 8));\n    structStringLength = strlen(combinedString);\n    subStructPtr = *(long *)(structPtr + 0x28);\n    if (subStructPtr == 0) {\n      combinedStringLength = subStructStringLength + structStringLength + 10;\n      subStructIndex = 0;\n    }\n    else {\n      combinedStringLength = subStructStringLength + structStringLength + 0x1e;\n      subStructIndex = 0;\n      while( true ) {\n        combinedString = *(char **)(subStructPtr + subStructIndex * 8);\n        if (combinedString == (char *)0x0) break;\n        subStructStringLength = strlen(combinedString);\n        subStructIndex = (ulong)((int)subStructIndex + 1);\n        combinedStringLength = combinedStringLength + subStructStringLength;\n      }\n    }\n    if (*(char **)(structPtr + 0x30) != (char *)0x0) {\n      subStructStringLength = strlen(*(char **)(structPtr + 0x30));\n      combinedStringLength = combinedStringLength + subStructStringLength;\n    }\n    if (*(char **)(structPtr + 0x38) != (char *)0x0) {\n      subStructStringLength = strlen(*(char **)(structPtr + 0x38));\n      combinedStringLength = combinedStringLength + subStructStringLength;\n    }\n    combinedString = (char *)xmalloc(combinedStringLength);\n    structPtr = *(long *)(input + 0x60);\n    strcpy(combinedString,*(char **)(structPtr + 8));\n    if (*(long *)(structPtr + 0x28) != 0) {\n      subStructCount = 0;\n      subStructStringLength = strlen(combinedString);\n      sprintf(combinedString + subStructStringLength,\"!%u,\",subStructIndex);\n      while( true ) {\n        structPtr = *(long *)(input + 0x60);\n        subStructIndex = (ulong)subStructCount;\n        subStructArray = *(void **)(structPtr + 0x28);\n        subStructString = *(char **)((long)subStructArray + subStructIndex * 8);\n        if (subStructString == (char *)0x0) break;\n        subStructCount = subStructCount + 1;\n        strcat(combinedString,subStructString);\n        free(*(void **)(*(long *)(structPtr + 0x28) + subStructIndex * 8));\n      }\n      free(subStructArray);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    structPtr = *(long *)(input + 0x60);\n    strcat(combinedString,*(char **)(structPtr + 0x20));\n    free(*(void **)(structPtr + 0x20));\n    structPtr = *(long *)(input + 0x60);\n    *(undefined8 *)(structPtr + 0x20) = 0;\n    if (*(char **)(structPtr + 0x30) != (char *)0x0) {\n      strcat(combinedString,*(char **)(structPtr + 0x30));\n      free(*(void **)(structPtr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    subStructStringLength = strlen(combinedString);\n    structPtr = *(long *)(input + 0x60);\n    *(undefined2 *)(combinedString + subStructStringLength) = 0x3b;\n    subStructString = *(char **)(structPtr + 0x38);\n    if (subStructString != (char *)0x0) {\n      strcpy(combinedString + subStructStringLength + 1,subStructString);\n      free(*(void **)(structPtr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    structPtr = *(long *)(input + 0x60);\n    *(char **)(structPtr + 8) = combinedString;\n    returnValue = CONCAT71((int7)((ulong)structPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "xmalloc",
                "free",
                "strcat",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "combine_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "listPtr",
                "puVar5": "dataPtr"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int index;\n  char result;\n  undefined8 output;\n  undefined8 *listPtr;\n  undefined8 *dataPtr;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = FUN_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = FUN_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = FUN_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    dataPtr = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    result = FUN_00112502(input1,input2,*(undefined8 *)(dataPtr[2] + 0x18));\n    if (((result != '\\0') && (result = FUN_00112c1f(input1,input2,*dataPtr,0), result != '\\0')) &&\n       (result = FUN_0010eafe(input2,output,index == 2), result != '\\0')) {\n      for (listPtr = (undefined8 *)dataPtr[1]; listPtr != (undefined8 *)0x0;\n          listPtr = (undefined8 *)*listPtr) {\n        result = FUN_00112c1f(input1,input2,listPtr[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = FUN_0010ebb0(input2,listPtr[1],*(undefined4 *)(listPtr + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      dataPtr = (undefined8 *)dataPtr[2];\n      while( true ) {\n        if (dataPtr == (undefined8 *)0x0) {\n          output = FUN_00108f05(input2);\n          return output;\n        }\n        result = FUN_00113a4d(input1,input2,dataPtr);\n        if (result == '\\0') break;\n        dataPtr = (undefined8 *)*dataPtr;\n      }\n    }\n    break;\n  case 4:\n    output = FUN_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = FUN_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    result = FUN_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      output = FUN_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010ebb0",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010e6a8",
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "abort",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_get_mach",
                "bfd_set_start_address",
                "FUN_001152b6",
                "bfd_set_file_flags",
                "printf",
                "bfd_get_arch"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00119f70",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00115530",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "demangle_and_print_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "paramArray",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "value",
                "iVar2": "comparisonResult",
                "pcVar3": "resultString",
                "plVar4": "ptrArray",
                "pcVar5": "errorString",
                "sVar6": "stringLength",
                "__ptr": "pointer",
                "lVar7": "size",
                "local_40": "localBuffer"
            },
            "code": "\n\n\nchar * demangleAndPrint_0010b0fa(undefined8 param1,undefined8 param2,uint *paramArray,long param4,\n                   undefined *param5)\n\n{\n  uint value;\n  int comparisonResult;\n  char *resultString;\n  long *ptrArray;\n  char *errorString;\n  size_t stringLength;\n  void *pointer;\n  long size;\n  undefined localBuffer [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    value = *paramArray;\n    if (0x29 < value) break;\n    if (0x17 < value) {\n      switch(value) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        resultString = (char *)demangleAndPrint_0010b0fa(param1,param2,*(undefined8 *)(paramArray + 4),0,0);\n        if (resultString != (char *)0x0) {\n          switch(*paramArray) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            resultString = (char *)FUN_00113b4a(resultString);\n            return resultString;\n          case 0x1b:\n            resultString = (char *)FUN_00113b71(resultString);\n            return resultString;\n          default:\n                    \n            abort();\n          case 0x22:\n            resultString = (char *)FUN_00113d3a(resultString);\n            return resultString;\n          case 0x23:\n            resultString = (char *)FUN_00113cb9(resultString);\n            return resultString;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        resultString = (char *)cplus_demangle_print(3,paramArray,0x14,localBuffer);\n        if (resultString == (char *)0x0) {\n          errorString = \"Couldn\\'t get demangled builtin type\\n\";\n          resultString = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparisonResult = strcmp(resultString,\"signed char\");\n        if (comparisonResult == 0) {\nLAB_0010b406:\n          errorString = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"bool\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"char\");\n        if (comparisonResult == 0) goto LAB_0010b406;\n        comparisonResult = strcmp(resultString,\"double\");\n        if ((comparisonResult == 0) || (comparisonResult = strcmp(resultString,\"long double\"), comparisonResult == 0)) {\n          errorString = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"float\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"__float128\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"unsigned char\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"int\");\n        if (comparisonResult == 0) {\nLAB_0010b504:\n          errorString = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"unsigned int\");\n        if (comparisonResult == 0) {\nLAB_0010b528:\n          errorString = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"long\");\n        if (comparisonResult == 0) goto LAB_0010b504;\n        comparisonResult = strcmp(resultString,\"unsigned long\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(resultString,\"__int128\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"unsigned __int128\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"short\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"unsigned short\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"void\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"wchar_t\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(resultString,\"long long\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"unsigned long long\");\n        if (comparisonResult == 0) {\n          errorString = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(resultString,\"...\");\n        if (comparisonResult == 0) {\n          errorString = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          errorString = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          errorString = (char *)dcgettext(0,errorString,5);\n          fprintf(_stderr,errorString);\n        }\n        errorString = (char *)0x0;\nLAB_0010b6c6:\n        free(resultString);\n        return errorString;\n      case 0x29:\n        if (*(long *)(paramArray + 4) == 0) {\n          pointer = (void *)FUN_00113e17();\n        }\n        else {\n          pointer = (void *)demangleAndPrint_0010b0fa(param1,param2,*(long *)(paramArray + 4),0,0);\n        }\n        if (pointer != (void *)0x0) {\n          size = FUN_0010b6ea(param1,param2,*(undefined8 *)(paramArray + 6),localBuffer);\n          if (size != 0) {\n            resultString = (char *)FUN_00113ce0(pointer,size,localBuffer[0]);\n            return resultString;\n          }\n          free(pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (value != 1) {\n      if (value == 4) {\n        resultString = (char *)cplus_demangle_print(3,paramArray,0x14,localBuffer);\n        errorString = \"Failed to print demangled template\\n\";\n        if (resultString != (char *)0x0) {\n          stringLength = strlen(resultString);\n          errorString = (char *)FUN_0010afd5(param1,param2,resultString,stringLength & 0xffffffff,9);\n          free(resultString);\n          return errorString;\n        }\nLAB_0010b3d3:\n        errorString = (char *)dcgettext(0,errorString,5);\n        fprintf(_stderr,errorString);\n        return resultString;\n      }\n      if (value == 0) {\n        if ((param4 == 0) || (ptrArray = (long *)FUN_00113b1e(param4), ptrArray == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = demangleAndPrint_0010b0fa(param1,param2,*(undefined8 *)(paramArray + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    paramArray = *(uint **)(paramArray + 6);\n    param5 = (undefined *)0x0;\n  }\n  resultString = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,resultString,(ulong)value);\nLAB_0010b38c:\n  resultString = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return resultString;\nLAB_0010b1a5:\n  if (*ptrArray == 0) {\nswitchD_0010b158_caseD_18:\n    resultString = (char *)FUN_0010afd5(param1,param2,*(undefined8 *)(paramArray + 4),paramArray[6],0);\n    return resultString;\n  }\n  resultString = *(char **)(*ptrArray + 8);\n  if (resultString == (char *)0x0) goto LAB_0010b38c;\n  errorString = (char *)FUN_001129f4(resultString);\n  if (errorString != (char *)0x0) {\n    stringLength = strlen(errorString);\n    if ((paramArray[6] == (uint)stringLength) &&\n       (comparisonResult = strncmp(errorString,*(char **)(paramArray + 4),(long)(int)paramArray[6]), comparisonResult == 0)) {\n      return resultString;\n    }\n  }\n  ptrArray = ptrArray + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113dfe",
                "FUN_00113b1e",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_0010b6ea",
                "cplus_demangle_print",
                "strlen",
                "FUN_00113df2",
                "fprintf",
                "FUN_00113b4a",
                "strncmp",
                "FUN_00112904",
                "free",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113cb9",
                "abort",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "demangle_and_print_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_and_process_lines_00104c36",
                "unaff_RBX": "current_line",
                "unaff_EBP": "line_number",
                "pbVar5": "line_ptr",
                "unaff_R13": "file_descriptor",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "in_stack_00000008": "file_name",
                "in_stack_00000010": "end_callback",
                "in_CL": "current_character",
                "uVar1": "error_message",
                "ppbVar2": "hash_table_slot_ptr",
                "pbVar3": "temp_ptr"
            },
            "code": "\nvoid parse_and_process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot_ptr;\n  byte *temp_ptr;\n  byte current_character;\n  byte bVar4;\n  byte *current_line;\n  int line_number;\n  byte *line_ptr;\n  undefined8 file_descriptor;\n  byte *line_start;\n  byte *line_end;\n  undefined8 file_name;\n  undefined8 *end_callback;\n  \n  do {\n    line_ptr = line_end;\n    if (current_character == 9) goto LAB_00104c3f;\n    do {\n      if ((current_character == 10) || (current_character == 0xd)) goto LAB_00114676;\n      if (current_character == 0) goto LAB_00114599;\n      current_character = line_ptr[1];\n      line_ptr = line_ptr + 1;\n    } while ((current_character != 0x20) && (current_character != 9));\n    if ((char)current_character < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_character & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      bVar4 = line_ptr[1];\n      if ((((((bVar4 == 9) || (bVar4 == 0x20)) &&\n            ((bVar4 = line_ptr[2], bVar4 == 9 || (bVar4 == 0x20)))) &&\n           ((bVar4 = line_ptr[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n          ((bVar4 = line_ptr[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n         ((bVar4 = line_ptr[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n        bVar4 = line_ptr[6];\n        temp_ptr = line_ptr + 6;\n        if ((bVar4 == 9) || (bVar4 == 0x20)) {\n          do {\n            do {\n              bVar4 = temp_ptr[1];\n              temp_ptr = temp_ptr + 1;\n            } while (bVar4 == 0x20);\n          } while (bVar4 == 9);\n        }\n      }\n      if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(error_message,file_name,line_number);\n      }\n    }\nLAB_00114599:\n    *line_ptr = 0;\n    if (line_end < line_ptr) {\n      hash_table_slot_ptr = (byte **)htab_find_slot();\n      *hash_table_slot_ptr = line_end;\n    }\n    line_number = line_number + 1;\n    line_ptr = current_line;\n    if (line_start[1] == 0) {\n      *end_callback = file_descriptor;\n      return;\n    }\n    for (; bVar4 = *line_ptr, line_start = line_ptr, bVar4 != 10; line_ptr = line_ptr + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          temp_ptr = line_ptr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *line_ptr = 0;\n          temp_ptr = line_ptr + 1;\n          if (line_ptr[1] == 10) {\n            temp_ptr = line_ptr + 2;\n            line_start = line_ptr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *line_ptr = 0;\n    if (line_ptr[1] == 0xd) {\n      line_start = line_ptr + 1;\n      temp_ptr = line_ptr + 2;\n    }\n    else {\n      temp_ptr = line_ptr + 1;\n    }\nLAB_00114553:\n    current_character = *current_line;\n    line_end = current_line;\n    while (current_line = temp_ptr, current_character == 0x20) {\nLAB_00104c3f:\n      line_ptr = line_end + 1;\n      line_end = line_end + 1;\n      temp_ptr = current_line;\n      current_character = *line_ptr;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "process_debugging_information_0010554f",
                "param_7": "binary",
                "param_12": "gapSize",
                "param_14": "gap",
                "param_17": "sections",
                "param_8": "numSections",
                "plVar28": "sectionPtr",
                "puVar30": "sectionGapPtr",
                "uVar29": "maxGapSize",
                "uVar12": "octetsPerByte",
                "plVar15": "currentSection",
                "pcVar22": "stringPtr",
                "plVar25": "lastSection",
                "param_41": "isMerged",
                "param_42": "mergedNoteSectionName",
                "param_43": "isLocal",
                "param_44": "localSymbolType"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 processDebuggingInformation_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint octetsPerByte;\n  uint uVar13;\n  long lVar14;\n  long *currentSection;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *stringPtr;\n  long lVar23;\n  ulong uVar24;\n  long *lastSection;\n  undefined8 *puVar26;\n  int iVar27;\n  long *sectionPtr;\n  ulong maxGapSize;\n  ulong *sectionGapPtr;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binary;\n  ulong numSections;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong gapSize;\n  char *param_13;\n  undefined *gap;\n  uint param_15;\n  long *sections;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char isMerged;\n  char *mergedNoteSectionName;\n  undefined isLocal;\n  short localSymbolType;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    gapSize = 0;\n    gap = (undefined *)0x0;\n    sections = (long *)0x0;\n    maxGapSize = gapSize;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    sections = (long *)xmalloc(lVar14);\n    param_40 = sections;\n    bfd_map_over_sections(binary,FUN_0010870e,&stack0x00000140);\n    qsort(sections,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    gap = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = gap;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      maxGapSize = 0;\n      gapSize = 0;\n      do {\n        sectionGapPtr = (ulong *)(gap + maxGapSize * 8);\n        sectionPtr = sections + maxGapSize;\n        uVar21 = gapSize;\n        do {\n          gapSize = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)maxGapSize) goto LAB_00107cd1;\n          maxGapSize = (ulong)((uint)maxGapSize + 1);\n          octetsPerByte = bfd_octets_per_byte(binary,*sectionPtr);\n          uVar13 = bfd_octets_per_byte(binary);\n          lVar14 = *sectionPtr;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(sectionPtr[1] + 0x38);\n          uVar24 = (ulong)octetsPerByte * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,binary,*sectionPtr);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *sectionGapPtr = uVar21;\n          sectionPtr = sectionPtr + 1;\n          sectionGapPtr = sectionGapPtr + 1;\n        } while (gapSize < uVar21);\n      } while( true );\n    }\n    gapSize = 0;\nLAB_00107cd1:\n    maxGapSize = gapSize;\n    if (DAT_00127989 != '\\0') {\n      octetsPerByte = bfd_octets_per_byte(binary);\n      lVar14 = sections[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)octetsPerByte;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)octetsPerByte * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,binary,sections[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          maxGapSize = uVar21 - uVar24;\n          *(ulong *)(gap + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = maxGapSize;\n          if (maxGapSize <= gapSize) {\n            maxGapSize = gapSize;\n          }\n        }\n      }\n    }\n  }\n  gapSize = maxGapSize;\n  sectionPtr = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          maxGapSize = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(maxGapSize + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + maxGapSize) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,sectionPtr), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < maxGapSize) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (stringPtr = pcVar31 + (sVar18 - 1), *stringPtr != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *stringPtr = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (maxGapSize <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *stringPtr = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    stringPtr = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,stringPtr,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUN_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (currentSection = sectionPtr; currentSection < sectionPtr + numSections; currentSection = currentSection + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*currentSection,&stack0x00000140);\n        if (isMerged == '-') {\n          if (((lVar14 == 0) && (lVar14 = FUN_00112894(unaff_R14,0,sectionPtr), lVar14 == 0)) ||\n             ((mergedNoteSectionName == (char *)0x0 || (*mergedNoteSectionName == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          stringPtr = mergedNoteSectionName;\n          while (((*stringPtr != '\\0' && (sVar18 = strlen(stringPtr), stringPtr[sVar18 - 1] == '\\')) &&\n                 (currentSection + 1 < sectionPtr + numSections))) {\n            __s = (char *)xstrdup(stringPtr);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            stringPtr = (char *)concat(__s,*(undefined8 *)(currentSection[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            currentSection = currentSection + 1;\n            pcVar31 = stringPtr;\n          }\n          FUN_001088ae(isLocal,(int)localSymbolType,param_40,stringPtr);\n          param_9 = FUN_0011173a(__ptr_02,lVar14,isLocal);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar14 != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (numSections != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = sectionPtr;\n        param_32 = 0;\n        param_31 = numSections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        octetsPerByte = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            lVar14 = sectionPtr[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                octetsPerByte = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)octetsPerByte >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (octetsPerByte ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  octetsPerByte = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (numSections != 0) {\n        sectionPtr = DAT_001278d0 + numSections;\n        currentSection = DAT_001278d0;\n        do {\n          octetsPerByte = *(uint *)(*currentSection + 0x18);\n          if ((octetsPerByte & 0x1000000) != 0) {\n            *(uint *)(*currentSection + 0x18) = octetsPerByte & 0xfeffffff;\n          }\n          currentSection = currentSection + 1;\n        } while (sectionPtr != currentSection);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(binary + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      sectionPtr = DAT_001278d0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (numSections == 0) {\n        maxGapSize = 0;\n      }\n      else {\n        maxGapSize = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          currentSection = (long *)sectionPtr[_param_9];\n          pcVar3 = (code *)currentSection[4];\n          octetsPerByte = *(uint *)(currentSection + 3);\n          plVar20 = (long *)currentSection[1];\n          lastSection = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = maxGapSize + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + maxGapSize * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = maxGapSize;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _isMerged = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (lastSection = *(long **)(lVar37 + 8), plVar20 == lastSection)) &&\n               (lastSection = plVar20, ppcVar34 = DAT_001278f8, (octetsPerByte & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  lastSection = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            currentSection[1] = (long)lastSection;\n            cVar7 = *(char *)lastSection;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((octetsPerByte & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(currentSection[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              lastSection = (long *)((long)lastSection + 1);\n              currentSection[1] = (long)lastSection;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              lastSection = (long *)((long)lastSection + 1);\n              currentSection[1] = (long)lastSection;\n              sVar18 = strlen((char *)lastSection);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)lastSection = cVar7;\n            currentSection[1] = (long)lastSection;\n            maxGapSize = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              maxGapSize = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)lastSection);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)lastSection);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)lastSection);\n            currentSection[1] = (long)plVar20;\n            lastSection = plVar20;\n            maxGapSize = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((octetsPerByte & 0x20) == 0) &&\n             (((octetsPerByte & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(currentSection[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((octetsPerByte & 0x82) != 0 || ((*(byte *)(currentSection[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(currentSection), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _isMerged = _isMerged & 0xffffffffffffff00;\n                param_40 = lastSection;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (isMerged == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((octetsPerByte & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(currentSection[4] + 0x25) & 0x10) == 0)) {\n              if ((octetsPerByte & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(currentSection[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _isMerged = _isMerged & 0xffffffffffffff00;\n            param_40 = lastSection;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (isMerged != '\\0') goto LAB_0010687f;\n          }\n          if ((octetsPerByte & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _isMerged = _isMerged & 0xffffffffffffff00;\n              param_40 = lastSection;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (isMerged != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((octetsPerByte & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _isMerged = _isMerged & 0xffffffffffffff00;\n              param_40 = lastSection;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (isMerged != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(currentSection[4]);\n            if (cVar7 == '\\0') {\n              if (((octetsPerByte & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((octetsPerByte & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(lastSection);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(lastSection), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(currentSection + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *currentSection, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)currentSection + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(currentSection + 3);\n                  }\n                  *(uint *)(currentSection + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((octetsPerByte & 1) != 0) && (cVar7 = FUN_00115d70(lastSection), cVar7 != '\\0')) {\n                  *(uint *)(currentSection + 3) = *(uint *)(currentSection + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = FUN_00115d70(lastSection), cVar7 != '\\0')) {\n                  *(uint *)(currentSection + 3) = *(uint *)(currentSection + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + maxGapSize * 8) = currentSection;\n              maxGapSize = maxGapSize + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (numSections != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = maxGapSize * 8;\n            maxGapSize = maxGapSize + 1;\n            uVar17 = FUN_0011a2e0(puVar26,binary);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + maxGapSize * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = maxGapSize & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = FUN_0011378f(binary,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binary,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binary,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,binary,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binary + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,binary,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278c8,numSections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,binary);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,binary);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(binary,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,binary,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binary,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,binary,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      sectionPtr = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(binary + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (sectionPtr == (long *)0x0) {\n            sectionPtr = in_R10;\n          }\n          currentSection = in_R10;\n          if (*(undefined8 **)(*sectionPtr + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (sectionPtr[1] != 0) {\n              cVar7 = bfd_set_section_contents(binary,puVar26,sectionPtr[1],0,sectionPtr[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,binary,puVar26,uVar17);\n                return 0;\n              }\n              sectionPtr = (long *)sectionPtr[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sectionPtr = currentSection;\n              if (*(undefined8 **)(*currentSection + 0x60) == puVar26) goto LAB_0010625f;\n              sectionPtr = (long *)currentSection[3];\n              currentSection = sectionPtr;\n            } while (sectionPtr != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,binary,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        sectionPtr = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = sectionPtr;\n      } while (sectionPtr != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binary,param_21), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (gap != (undefined *)0x0) {\n        if (0x2000 < gapSize) {\n          gapSize = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(gapSize);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (gapSize = gapSize & 0xffffffff; gapSize != 0; gapSize = gapSize - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          maxGapSize = *(ulong *)(gap + lVar14 * 8);\n          if (maxGapSize != 0) {\n            lVar37 = *(long *)(*sections + 0x40) - maxGapSize;\n            do {\n              uVar21 = 0x2000;\n              if (maxGapSize < 0x2001) {\n                uVar21 = maxGapSize;\n              }\n              cVar7 = bfd_set_section_contents(binary,*sections,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,binary,*sections,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              maxGapSize = maxGapSize - uVar21;\n            } while (maxGapSize != 0);\n          }\n          sections = sections + 1;\n        }\n        free(__ptr);\n        free(gap);\n      }\n      uVar9 = (**(code **)(*(long *)(binary + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(binary,DAT_00127930 & 0xffffffff);\n        maxGapSize = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,maxGapSize);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,binary,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,binary,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_alt_mach_code",
                "bfd_set_section_size",
                "FUN_0010870e",
                "FUN_0010bf20",
                "FUN_00108863",
                "bfd_set_section_contents",
                "bfd_map_over_sections",
                "strcmp",
                "FUN_00119dd0",
                "FUN_0010dac0",
                "FUN_001088ae",
                "bfd_coff_get_syment",
                "bfd_coff_get_auxent",
                "xmalloc",
                "htab_traverse",
                "bfd_set_error",
                "FUN_00116110",
                "FUN_0010bbd3",
                "bfd_decode_symclass",
                "bfd_get_section_by_name",
                "bfd_errmsg",
                "bfd_make_section_with_flags",
                "strlen",
                "FUN_0010c892",
                "strcpy",
                "bfd_is_local_label",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_0010be1a",
                "htab_find",
                "FUN_001159d0",
                "concat",
                "dcgettext",
                "FUN_00113fb0",
                "xstrdup",
                "qsort",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00112a33",
                "FUN_0011a170",
                "fprintf",
                "bfd_get_error",
                "htab_elements",
                "FUN_0010875d",
                "FUN_0011378f",
                "bfd_octets_per_byte",
                "bfd_set_symtab",
                "FUN_00116030",
                "FUN_00119ed0",
                "FUN_00115d70",
                "bfd_map_over_sections",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "free",
                "FUN_0010bc80",
                "FUN_0011a2e0",
                "FUN_0010be88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_debugging_information_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_call_function_00109cf4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_3c": "formattedValue"
            },
            "code": "\nvoid formatAndCallFunction_00109cf4(undefined8 arg1,undefined8 arg2,undefined4 arg3)\n\n{\n  char formattedValue [28];\n  \n  sprintf(formattedValue,\"%ld\",arg2);\n  FUN_00109b52(arg1,formattedValue,arg2,0,arg3);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "format_and_call_function_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_function_arguments_00109ab1",
                "param_1": "arguments_ptr",
                "param_2": "parsed_arguments",
                "uVar1": "parsed_argument1",
                "pcVar2": "current_char_ptr",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_function_arguments_00109ab1(char **arguments_ptr,undefined4 *parsed_arguments,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_argument1;\n  char *current_char_ptr;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char_ptr = *arguments_ptr;\n  if (*current_char_ptr == '(') {\n    *arguments_ptr = current_char_ptr + 1;\n    parsed_argument1 = FUN_00109a32(arguments_ptr,0);\n    *parsed_arguments = parsed_argument1;\n    if (**arguments_ptr == ',') {\n      *arguments_ptr = *arguments_ptr + 1;\n      parsed_argument1 = FUN_00109a32(arguments_ptr,0,param_3);\n      parsed_arguments[1] = parsed_argument1;\n      if (**arguments_ptr == ')') {\n        current_char_ptr = *arguments_ptr + 1;\n        *arguments_ptr = current_char_ptr;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char_ptr);\n    result = 0;\n  }\n  else {\n    *parsed_arguments = 0;\n    current_char_ptr = (char *)FUN_00109a32(arguments_ptr,0);\n    parsed_arguments[1] = (int)current_char_ptr;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char_ptr >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_function_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_validity_001159d0",
                "param_1": "inputValue",
                "uVar1": "returnValue",
                "cVar2": "isValid",
                "uVar3": "result",
                "lVar4": "temp1",
                "lVar5": "temp2"
            },
            "code": "\nundefined4 checkValidity_001159d0(long inputValue)\n\n{\n  undefined8 returnValue;\n  char isValid;\n  undefined4 result;\n  long temp1;\n  long temp2;\n  \n  result = FUN_00115b70();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(inputValue + 0x27) & 2) == 0) {\n      return result;\n    }\n    temp1 = FUN_00115d00(*(undefined8 *)(inputValue + 0xd0),*(undefined8 *)(inputValue + 0xe0));\n    if ((temp1 != 0) &&\n       (((returnValue = *(undefined8 *)(temp1 + 8), DAT_00127a48 != 7 ||\n         (isValid = FUN_00115d70(returnValue,DAT_00127a28), isValid != '\\0')) &&\n        (isValid = FUN_00115d70(returnValue,DAT_00127a18), isValid == '\\0')))) {\n      temp1 = *(long *)(*(long *)(inputValue + 0xd0) + 0xc0);\n      temp2 = temp1;\n      do {\n        if (temp2 == 0) {\n          return 1;\n        }\n        isValid = FUN_00115b70(temp2);\n        if (isValid == '\\0') {\n          return result;\n        }\n        temp2 = *(long *)(*(long *)(temp2 + 0xd0) + 0xc0);\n      } while (temp1 != temp2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d00",
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_validity_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "inputData",
                "uVar1": "value1",
                "lVar2": "dataPointer",
                "__s": "string1",
                "uVar3": "value2",
                "uVar4": "result",
                "__s_00": "string2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "combinedString"
            },
            "code": "\nundefined4 processData_0010a77a(long inputData)\n\n{\n  undefined value1;\n  long dataPointer;\n  char *string1;\n  undefined8 value2;\n  undefined4 result;\n  char *string2;\n  size_t len1;\n  size_t len2;\n  char *combinedString;\n  \n  dataPointer = *(long *)(inputData + 0x60);\n  if ((dataPointer != 0) && (string1 = *(char **)(dataPointer + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(dataPointer + 0x18);\n    value1 = *(undefined *)(dataPointer + 0x1c);\n    value2 = *(undefined8 *)(dataPointer + 0x10);\n    string2 = (char *)FUN_00109b2f();\n    len1 = strlen(string2);\n    len2 = strlen(string1);\n    combinedString = (char *)xmalloc(len1 + 2 + len2);\n    sprintf(combinedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = FUN_00109b52(inputData,combinedString,value2,value1,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_file_error_message_0010543c",
                "unaff_RBP": "fileDescriptor",
                "piVar2": "errnoPointer",
                "pcVar3": "errorString",
                "uVar1": "fileName",
                "uVar4": "errorMessage"
            },
            "code": "\nvoid printFileErrorMessage_0010543c(void)\n\n{\n  undefined8 fileName;\n  int *errnoPointer;\n  char *errorString;\n  undefined8 errorMessage;\n  long fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  errorString = strerror(*errnoPointer);\n  fileName = *(undefined8 *)(fileDescriptor + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(errorMessage,fileName,errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_file_error_message_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "prepare_data_0010a424",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "result",
                "bVar2": "flag",
                "iVar3": "length",
                "uVar4": "returnValue",
                "pcVar5": "string1",
                "__ptr": "pointerArray",
                "uVar6": "value",
                "__s": "string2",
                "sVar7": "stringLength1",
                "sVar8": "stringLength2",
                "__s_00": "newString",
                "lVar9": "counter",
                "bVar10": "tempFlag",
                "lVar11": "loopCounter",
                "uVar12": "option"
            },
            "code": "\nundefined4 prepareData_0010a424(long param1,char param2,int param3,char param4)\n\n{\n  char result;\n  byte flag;\n  int length;\n  undefined4 returnValue;\n  char *string1;\n  undefined8 *pointerArray;\n  undefined8 value;\n  char *string2;\n  size_t stringLength1;\n  size_t stringLength2;\n  char *newString;\n  long counter;\n  byte tempFlag;\n  long loopCounter;\n  undefined option;\n  \n  if ((param2 == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  tempFlag = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f(param1);\n  if (param3 < 0) {\n    pointerArray = (undefined8 *)0x0;\n    param3 = 0;\nLAB_0010a582:\n    option = 1;\n    if (tempFlag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (param3 != 0) {\n      length = param3 + 1;\n      pointerArray = (undefined8 *)xmalloc((long)length * 8);\n      counter = (long)(param3 + -1);\n      do {\n        flag = 1;\n        if (tempFlag == 0) {\n          flag = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n        }\n        value = FUN_00109b2f(param1);\n        tempFlag = flag & 1;\n        pointerArray[counter] = value;\n        counter = counter + -1;\n      } while ((int)counter != -1);\n      if (param4 == '\\0') {\n        result = FUN_00109d97(param1);\n        if (result == '\\0') {\n          return 0;\n        }\n        flag = 1;\n        if (tempFlag == 0) {\n          flag = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n        }\n        tempFlag = flag & 1;\n        value = FUN_00109b2f(param1);\n        pointerArray[(long)length + -1] = value;\n        param3 = length;\n      }\n      goto LAB_0010a582;\n    }\n    pointerArray = (undefined8 *)0x0;\n    if (param4 != '\\0') goto LAB_0010a582;\n    pointerArray = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(param1);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((tempFlag != 0) || (*(char *)(*(long *)(param1 + 0x60) + 0x1c) != '\\0')) {\n      value = FUN_00109b2f(param1);\n      param3 = 1;\n      option = 1;\n      *pointerArray = value;\n      goto LAB_0010a596;\n    }\n    value = FUN_00109b2f(param1);\n    param3 = 1;\n    *pointerArray = value;\n  }\n  option = *(undefined *)(*(long *)(param1 + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)FUN_00109b2f(param1);\n  stringLength1 = strlen(string1);\n  stringLength2 = strlen(string2);\n  counter = stringLength1 + 10 + stringLength2;\n  for (loopCounter = 0; (int)loopCounter < param3; loopCounter = loopCounter + 1) {\n    stringLength1 = strlen((char *)pointerArray[loopCounter]);\n    counter = counter + stringLength1;\n  }\n  newString = (char *)xmalloc(counter);\n  sprintf(newString,\"#%s,%s\",string1,string2);\n  counter = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    stringLength1 = strlen(newString);\n    if (param3 <= (int)counter) break;\n    *(undefined2 *)(newString + stringLength1) = 0x2c;\n    string1 = (char *)pointerArray[counter];\n    counter = counter + 1;\n    strcpy(newString + stringLength1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(newString + stringLength1) = 0x3b;\n  free(pointerArray);\n  returnValue = FUN_00109b52(param1,newString,0,option,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(newString);\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "FUN_00109d97",
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "prepare_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "versionString",
                "pcVar1": "localizedString"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 versionString)\n\n{\n  char *localizedString;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  localizedString = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(localizedString);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_message",
                "param_4": "value_2",
                "pcVar1": "equal_sign_ptr",
                "uVar2": "error_format_msg",
                "auVar3": "parsed_data"
            },
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 value_1,undefined8 error_message,undefined8 value_2)\n\n{\n  char *equal_sign_ptr;\n  undefined8 error_format_msg;\n  undefined parsed_data [16];\n  \n  equal_sign_ptr = strchr(input_string,0x3d);\n  if (equal_sign_ptr != (char *)0x0) {\n    parsed_data._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_format_msg = FUN_0011a480(input_string,(long)equal_sign_ptr - (long)input_string);\n    parsed_data._0_8_[2] = equal_sign_ptr + 1;\n    parsed_data._0_8_[1] = error_format_msg;\n    parsed_data._0_8_[4] = 0;\n    parsed_data._0_8_[3] = 0;\n    *parsed_data._0_8_ = value_1;\n    parsed_data._8_8_ = value_2;\n    return parsed_data;\n  }\n  error_format_msg = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(error_format_msg,error_message);\n}\n\n",
            "called": [
                "FUN_001053b5",
                "xmalloc",
                "strchr",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_parameter_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "param_3": "pointerToPointer",
                "puVar1": "pointer"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 inputPointer,undefined8 newValue,long *pointerToPointer)\n\n{\n  undefined8 *pointer;\n  \n  pointer = (undefined8 *)*pointerToPointer;\n  *pointer = newValue;\n  *pointerToPointer = (long)(pointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_header",
                "param_2": "coff_symbols",
                "param_3": "coff_section",
                "param_4": "coff_file_context",
                "param_5": "type_code",
                "param_6": "coff_debug",
                "param_7": "use_bfd_segments",
                "param_8": "locale_data",
                "lVar1": "result",
                "cVar2": "flag",
                "uVar3": "error_code",
                "uVar4": "temp_value",
                "lVar5": "output",
                "uVar6": "temp_value_2",
                "plVar7": "pointer_to_long",
                "__ptr": "memory_pointer",
                "__ptr_00": "memory_pointer_2",
                "bVar8": "byte_value",
                "iVar9": "int_value",
                "pcVar10": "string_value",
                "uVar11": "ulong_value",
                "lVar12": "long_value",
                "uVar13": "temp_uint_value",
                "uVar14": "temp_uint_value_2",
                "uVar15": "temp_uint_value_3",
                "local_68": "local_data_array",
                "local_48": "local_flag",
                "local_47": "local_byte_value"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_header,long *coff_symbols,long coff_section,undefined8 coff_file_context,uint type_code,\n                 long *coff_debug,char use_bfd_segments,undefined8 locale_data)\n\n{\n  long result;\n  char flag;\n  undefined4 error_code;\n  undefined8 temp_value;\n  long output;\n  undefined8 temp_value_2;\n  long *pointer_to_long;\n  void *memory_pointer;\n  void *memory_pointer_2;\n  byte byte_value;\n  int int_value;\n  char *string_value;\n  ulong ulong_value;\n  long long_value;\n  uint temp_uint_value;\n  uint temp_uint_value_2;\n  undefined8 temp_uint_value_3;\n  undefined local_data_array [32];\n  char local_flag;\n  byte local_byte_value;\n  \n  output = *(long *)(coff_header + 0x110);\n  if ((~*(uint *)(output + 0x38) & type_code) != 0) {\n    temp_uint_value = (int)type_code >> ((byte)*(undefined4 *)(output + 0x44) & 0x1f);\n    ulong_value = (ulong)(type_code & *(uint *)(output + 0x40));\n    byte_value = (byte)*(undefined4 *)(output + 0x3c);\n    temp_uint_value = (temp_uint_value ^ type_code) & *(uint *)(output + 0x38) ^ temp_uint_value;\n    if (ulong_value == 1L << (byte_value & 0x3f)) {\n      temp_value = parse_coff_type_0010dac0(coff_header,coff_symbols,coff_section,coff_file_context,temp_uint_value,coff_debug,use_bfd_segments,locale_data);\n      output = FUN_00113d3a(temp_value);\n      return output;\n    }\n    if (ulong_value != 2L << (byte_value & 0x3f)) {\n      if (ulong_value != 3L << (byte_value & 0x3f)) {\n        temp_value = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(output + 0x3c),\n                          temp_uint_value);\n        FUN_00119ed0(temp_value,type_code);\n        return 0;\n      }\n      temp_uint_value_2 = 0;\n      if (coff_debug != (long *)0x0) {\n        temp_uint_value_2 = (uint)*(ushort *)(coff_debug + 2);\n        pointer_to_long = coff_debug + 2;\n        for (int_value = 0; (*(short *)pointer_to_long != 0 && (int_value != 3)); int_value = int_value + 1) {\n          *(short *)pointer_to_long = *(short *)((long)pointer_to_long + 2);\n          pointer_to_long = (long *)((long)pointer_to_long + 2);\n        }\n        *(short *)pointer_to_long = 0;\n      }\n      temp_uint_value_3 = 0;\n      temp_value = locale_data;\n      temp_value_2 = parse_coff_type_0010dac0(coff_header,coff_symbols,coff_section,coff_file_context,temp_uint_value,coff_debug,0);\n      output = *(long *)(coff_section + 0x28);\n      if (output == 0) {\n        temp_value = FUN_00113dfe(4,0,temp_uint_value_3,temp_value);\n        output = FUN_0010c218(locale_data,\"int\",temp_value);\n        *(long *)(coff_section + 0x28) = output;\n      }\n      output = FUN_00113c43(temp_value_2,output,0,(long)(int)(temp_uint_value_2 - 1),0);\n      return output;\n    }\n    temp_value = parse_coff_type_0010dac0(coff_header,coff_symbols,coff_section,coff_file_context,temp_uint_value,coff_debug,use_bfd_segments,locale_data);\n    output = FUN_00113ce0(temp_value,0,0);\n    return output;\n  }\n  if ((coff_debug != (long *)0x0) && (0 < *coff_debug)) {\n    pointer_to_long = (long *)FUN_0010da0b(coff_section);\n    if (*pointer_to_long != 0) {\n      return *pointer_to_long;\n    }\n    output = FUN_00113e23(pointer_to_long,0);\n    return output;\n  }\n  if (use_bfd_segments == '\\0') {\n    coff_debug = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    output = FUN_00113e17();\n    return output;\n  }\n  output = *(long *)(coff_section + 8 + (long)(int)type_code * 8);\n  if (output != 0) {\n    return output;\n  }\n  switch(type_code) {\n  default:\n    temp_value = FUN_00113e17();\n    string_value = \"void\";\n    break;\n  case 2:\n    temp_value = FUN_00113dfe(1,0);\n    string_value = \"char\";\n    break;\n  case 3:\n    temp_value = FUN_00113dfe(2,0);\n    string_value = \"short\";\n    break;\n  case 4:\n    temp_value = FUN_00113dfe(4,0);\n    string_value = \"int\";\n    break;\n  case 5:\n    temp_value = FUN_00113dfe(4,0);\n    string_value = \"long\";\n    break;\n  case 6:\n    temp_value = FUN_00113df2(4);\n    string_value = \"float\";\n    break;\n  case 7:\n    temp_value = FUN_00113df2(8);\n    string_value = \"double\";\n    break;\n  case 8:\n    if (coff_debug == (long *)0x0) {\n      output = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp_value = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (coff_debug == (long *)0x0) {\n      output = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp_value = 9;\nLAB_0010de7a:\n    output = FUN_0010e07c(coff_header,coff_symbols,coff_section,temp_value,coff_debug,locale_data);\nLAB_0010e046:\n    pointer_to_long = (long *)FUN_0010da0b(coff_section,coff_file_context);\n    *pointer_to_long = output;\n    return output;\n  case 10:\n    if (coff_debug == (long *)0x0) {\n      output = FUN_00113d6e(0,0);\n    }\n    else {\n      output = coff_debug[3];\n      memory_pointer = (void *)xmalloc(0x50);\n      memory_pointer_2 = (void *)xmalloc(0x50);\n      long_value = 0;\n      do {\n        while( true ) {\n          if ((output <= coff_symbols[3]) || (coff_symbols[1] <= coff_symbols[2])) goto LAB_0010e032;\n          int_value = (int)long_value;\n          result = *(long *)(*coff_symbols + coff_symbols[2] * 8);\n          flag = bfd_coff_get_syment(coff_header,result,local_data_array);\n          long_value = (long)int_value;\n          if (flag == '\\0') {\n            error_code = bfd_get_error();\n            temp_value = bfd_errmsg(error_code);\n            temp_value_2 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(temp_value_2,temp_value);\n            free(memory_pointer);\n            free(memory_pointer_2);\n            output = 0;\n            goto LAB_0010e046;\n          }\n          coff_symbols[2] = coff_symbols[2] + 1;\n          coff_symbols[3] = (ulong)local_byte_value + 1 + coff_symbols[3];\n          if (local_flag != '\\x10') break;\n          if ((int)type_code <= int_value + 1) {\n            type_code = type_code + 10;\n            memory_pointer = (void *)xrealloc(memory_pointer);\n            memory_pointer_2 = (void *)xrealloc(memory_pointer_2,(long)(int)type_code << 3);\n          }\n          long_value = *(long *)(result + 0x20);\n          *(undefined8 *)((long)memory_pointer + (long)int_value * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)memory_pointer_2 + (long)int_value * 8) =\n               *(long *)(result + 0x10) + *(long *)(long_value + 0x30);\n          long_value = (long)(int_value + 1);\n        }\n      } while (local_flag != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)memory_pointer + long_value * 8) = 0;\n      output = FUN_00113d6e(memory_pointer,memory_pointer_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    output = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    temp_value = FUN_00113dfe(1,1);\n    string_value = \"unsigned char\";\n    break;\n  case 0xd:\n    temp_value = FUN_00113dfe(2,1);\n    string_value = \"unsigned short\";\n    break;\n  case 0xe:\n    temp_value = FUN_00113dfe(4,1);\n    string_value = \"unsigned int\";\n    break;\n  case 0xf:\n    temp_value = FUN_00113dfe(4,1);\n    string_value = \"unsigned long\";\n    break;\n  case 0x10:\n    temp_value = FUN_00113df2(0xc);\n    string_value = \"long double\";\n  }\n  output = FUN_0010c218(locale_data,string_value,temp_value);\nLAB_0010e065:\n  *(long *)(coff_section + 8 + (long)(int)type_code * 8) = output;\n  return output;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c218",
                "xmalloc",
                "FUN_00119ed0",
                "xrealloc",
                "FUN_00113dfe",
                "FUN_00113e17",
                "bfd_errmsg",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_00113df2",
                "FUN_00113d6e",
                "FUN_00113da9",
                "bfd_get_error",
                "free",
                "FUN_00113ce0",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_and_return_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "string2_length",
                "extraout_var": "comparison_result",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareAndReturn_00113fb0(char *string1,char *string2)\n\n{\n  int iVar1;\n  undefined8 in_RAX;\n  size_t string2_length;\n  undefined4 comparison_result;\n  undefined result [16];\n  \n  string2_length = strlen(string2);\n  iVar1 = strncmp(string1,string2,string2_length);\n  result._1_7_ = (undefined7)(CONCAT44(comparison_result,iVar1) >> 8);\n  result[0] = iVar1 == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "compare_and_return_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "display_time_setting_error_0010882c",
                "piVar1": "errorLocation",
                "uVar2": "errorString"
            },
            "code": "\nvoid displayTimeSettingError_0010882c(void)\n\n{\n  int *errorLocation;\n  undefined8 errorString;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "display_time_setting_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_message_0010ebb0",
                "param_1": "input",
                "param_2": "message",
                "param_3": "messageLength",
                "param_4": "param",
                "__s": "result",
                "cVar1": "formatChar",
                "uVar2": "index",
                "uVar3": "returnValue",
                "sVar4": "messageLen",
                "sVar5": "resultLen",
                "__s_00": "formattedMessage"
            },
            "code": "\nundefined4 formatMessage_0010ebb0(undefined8 input,char *message,int messageLength,undefined8 param)\n\n{\n  char formatChar;\n  uint index;\n  undefined4 returnValue;\n  char *result;\n  size_t messageLen;\n  size_t resultLen;\n  char *formattedMessage;\n  \n  result = (char *)FUN_00109b2f();\n  index = messageLength - 1;\n  if (index < 4) {\n    returnValue = *(undefined4 *)(&DAT_00121340 + (ulong)index * 4);\n    formatChar = (&DAT_00121334)[index];\n    messageLen = strlen(message);\n    resultLen = strlen(result);\n    formattedMessage = (char *)xmalloc(messageLen + 3 + resultLen);\n    sprintf(formattedMessage,\"%s:%c%s\",message,(ulong)(uint)(int)formatChar,result);\n    free(result);\n    returnValue = FUN_0010e2f0(input,returnValue,0,param,formattedMessage);\n    if ((char)returnValue != '\\0') {\n      free(formattedMessage);\n    }\n    return returnValue;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_message_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_data_structure_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "dataStructure",
                "plVar2": "dynamicArray"
            },
            "code": "\nlong createDataStructure_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long dataStructure;\n  long *dynamicArray;\n  \n  if ((input1 != 0) && (dataStructure = FUN_00112904(0x13,0), dataStructure != 0)) {\n    dynamicArray = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)dynamicArray + 0x19) = 0;\n    *dynamicArray = input1;\n    *(undefined4 *)((long)dynamicArray + 0x1c) = 0;\n    dynamicArray[1] = input2;\n    dynamicArray[2] = input3;\n    *(undefined *)(dynamicArray + 3) = input4;\n    *(long **)(dataStructure + 0x10) = dynamicArray;\n    return dataStructure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_value_00115d70",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "lookup_result",
                "local_18": "output",
                "local_10": "is_found"
            },
            "code": "\nundefined check_value_00115d70(undefined8 input_1,undefined8 input_2)\n\n{\n  long lookup_result;\n  undefined8 output;\n  undefined is_found;\n  \n  if (DAT_001279ea == '\\0') {\n    lookup_result = htab_find(input_2,input_1);\n    is_found = lookup_result != 0;\n  }\n  else {\n    is_found = 0;\n    output = input_1;\n    htab_traverse(input_2,FUN_0011a170,&output);\n  }\n  return is_found;\n}\n\n",
            "called": [
                "htab_traverse",
                "htab_find",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_0010554f",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_value_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_to_buffer_00109be3",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "newBuffer",
                "puVar2": "bufferPtr",
                "uVar3": "bufferLength"
            },
            "code": "\nundefined8 expandAndAddToBuffer_00109be3(long buffer,undefined8 value,undefined4 flag)\n\n{\n  undefined8 newBuffer;\n  undefined8 *bufferPtr;\n  uint bufferLength;\n  \n  if (*(uint *)(buffer + 0x2c) <= *(uint *)(buffer + 0x28)) {\n    bufferLength = *(uint *)(buffer + 0x2c) + 10;\n    *(uint *)(buffer + 0x2c) = bufferLength;\n    newBuffer = xrealloc(*(undefined8 *)(buffer + 0x20),(ulong)bufferLength << 4);\n    *(undefined8 *)(buffer + 0x20) = newBuffer;\n  }\n  bufferLength = *(uint *)(buffer + 0x28);\n  bufferPtr = (undefined8 *)((ulong)bufferLength * 0x10 + *(long *)(buffer + 0x20));\n  *bufferPtr = value;\n  *(undefined4 *)(bufferPtr + 1) = flag;\n  *(uint *)(buffer + 0x28) = bufferLength + 1;\n  return CONCAT71((int7)((ulong)bufferPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "expand_and_add_to_buffer_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "destination",
                "strnlen": "calculateStringLength",
                "xmalloc": "allocateMemory",
                "memcpy": "copyMemory"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *destination;\n  \n  stringLength = strnlen(inputString,maxLength);\n  destination = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)destination + stringLength) = 0;\n  memcpy(destination,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "xmalloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "send_data_to_server_0010e918",
                "param_1": "socket",
                "param_2": "message",
                "param_3": "length",
                "__s": "serverResponse",
                "sVar2": "messageLength",
                "sVar3": "responseLength",
                "__s_00": "combinedMessage",
                "uVar1": "result"
            },
            "code": "\nundefined4 sendDataToServer_0010e918(undefined8 socket,char *message,undefined8 length)\n\n{\n  undefined4 result;\n  char *serverResponse;\n  size_t messageLength;\n  size_t responseLength;\n  char *combinedMessage;\n  \n  serverResponse = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  responseLength = strlen(serverResponse);\n  combinedMessage = (char *)xmalloc(messageLength + 0x14 + responseLength);\n  sprintf(combinedMessage,\"%s:c=e%s,%ld\",message,serverResponse,length);\n  free(serverResponse);\n  result = FUN_0010e2f0(socket,0x80,0,0,combinedMessage);\n  if ((char)result != '\\0') {\n    free(combinedMessage);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0010a424",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "decompile_and_convert_section_00116110",
                "param_1": "binary",
                "param_2": "section_header",
                "param_3": "output_bfd",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "section_content",
                "iVar4": "swap_iterations",
                "iVar5": "byte_swap",
                "cVar6": "error",
                "uVar7": "error_message",
                "__ptr": "buffer",
                "lVar8": "byte_index",
                "uVar9": "iteration_count",
                "iVar10": "byte_count",
                "uVar11": "section_start",
                "puVar12": "temp_ptr",
                "lVar13": "byte_diff",
                "puVar14": "byte_ptr",
                "puVar15": "byte_ptr2",
                "pvVar16": "section_ptr",
                "uVar17": "temp3",
                "uVar18": "alignment",
                "uVar19": "temp4",
                "bVar20": "flag",
                "local_38": "section_size",
                "local_30": "section_data"
            },
            "code": "\nvoid decompile_and_convert_section_00116110(undefined8 binary,undefined8 *section_header,undefined8 output_bfd)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long section_content;\n  int swap_iterations;\n  int byte_swap;\n  char error;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long byte_index;\n  ulong iteration_count;\n  int byte_count;\n  ulong section_start;\n  undefined *temp_ptr;\n  long byte_diff;\n  undefined8 *byte_ptr;\n  undefined8 *byte_ptr2;\n  void *section_ptr;\n  ulong temp3;\n  ulong alignment;\n  ulong temp4;\n  byte flag;\n  ulong section_size;\n  void *section_data;\n  \n  flag = 0;\n  error = FUN_00115f50(binary,section_header,1);\n  if (error != '\\0') {\n    return;\n  }\n  section_size = section_header[8];\n  section_content = section_header[0xc];\n  if (((*(byte *)((long)section_header + 0x25) & 1) == 0) || ((*(byte *)(section_content + 0x25) & 1) == 0)) {\n    byte_diff = FUN_00114190(*section_header,0,0x80);\n    if (byte_diff == 0) {\n      return;\n    }\n    if ((*(byte *)(byte_diff + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_size);\n    byte_ptr2 = buffer;\n    if (7 < section_size) {\n      for (alignment = section_size >> 3; alignment != 0; alignment = alignment - 1) {\n        *byte_ptr2 = 0;\n        byte_ptr2 = byte_ptr2 + (ulong)flag * -2 + 1;\n      }\n    }\n    byte_ptr = byte_ptr2;\n    if ((section_size & 4) != 0) {\n      byte_ptr = (undefined8 *)((long)byte_ptr2 + (ulong)flag * -8 + 4);\n      *(undefined4 *)byte_ptr2 = 0;\n    }\n    byte_ptr2 = byte_ptr;\n    if ((section_size & 2) != 0) {\n      byte_ptr2 = (undefined8 *)((long)byte_ptr + (ulong)flag * -4 + 2);\n      *(undefined2 *)byte_ptr = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)byte_ptr2 = 0;\n    }\n    error = bfd_set_section_contents(output_bfd,section_content,buffer,0);\n    if (error != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,output_bfd,section_content,0);\n    free(buffer);\n    return;\n  }\n  section_data = (void *)0x0;\n  error = bfd_get_full_section_contents(binary,section_header,&section_data);\n  if ((error == '\\0') ||\n     (error = bfd_convert_section_contents(binary,section_header,output_bfd,&section_data,&section_size),\n     byte_count = DAT_00127908, error == '\\0')) {\n    bfd_set_section_size(section_content,0);\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,binary,section_header,0);\n    free(section_data);\n    return;\n  }\n  swap_iterations = DAT_001264b8;\n  byte_swap = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    alignment = (ulong)DAT_00127908;\n    if (section_size % alignment != 0) {\n      temp2 = *section_header;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(error_message,temp2,byte_count);\n    }\n    byte_count = DAT_00127908 / 2;\n    section_start = 0;\n    while (temp4 = section_start, swap_iterations = DAT_001264b8, byte_swap = DAT_001264bc, temp4 < section_size) {\n      section_start = alignment + temp4;\n      temp3 = section_start;\n      for (iteration_count = 0; iteration_count < (ulong)(long)byte_count; iteration_count = iteration_count + 1) {\n        temp3 = temp3 - 1;\n        temp_ptr = (undefined *)(temp4 + iteration_count + (long)section_data);\n        temp1 = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)section_data + temp3);\n        *(undefined *)((long)section_data + temp3) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = swap_iterations;\n  DAT_001264bc = byte_swap;\n  if (-1 < byte_swap) {\n    alignment = (ulong)DAT_00127a3c;\n    byte_count = (int)((ulong)section_header[7] % alignment);\n    section_start = ((long)byte_swap - (long)byte_count) + (long)section_data;\n    if (byte_swap < byte_count) {\n      section_start = section_start + alignment;\n    }\n    byte_diff = (section_size + (long)section_data) - section_start;\n    section_ptr = section_data;\n    for (; section_start < section_size + (long)section_data; section_start = section_start + alignment) {\n      for (byte_index = 0; ((int)byte_index < swap_iterations && (byte_index != byte_diff)); byte_index = byte_index + 1) {\n        *(undefined *)((long)section_ptr + byte_index) = *(undefined *)(section_start + byte_index);\n      }\n      section_ptr = (void *)((long)section_ptr + byte_index);\n      byte_diff = byte_diff - alignment;\n    }\n    section_size = ((((alignment - 1) + section_size) - (long)byte_swap) / alignment) * (long)swap_iterations;\n    alignment = *(ulong *)(section_content + 0x38) / alignment;\n    *(ulong *)(section_content + 0x38) = alignment;\n    if (byte_swap < byte_count) {\n      *(ulong *)(section_content + 0x38) = alignment + 1;\n      error = bfd_set_section_contents(output_bfd,section_content,section_data,0,section_size);\n      if (error == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  error = bfd_set_section_contents(output_bfd,section_content,section_data,0,section_size);\n  if (error == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_data);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00115f50",
                "xmalloc",
                "free",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_001083de",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decompile_and_convert_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_debug_block_0010bf20",
                "param_1": "block",
                "param_2": "newBlock",
                "param_3": "param1",
                "param_4": "param2",
                "lVar1": "currentBlock",
                "uVar2": "result",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endDebugBlock_0010bf20(long block,undefined8 newBlock,undefined8 param1,undefined8 param2)\n\n{\n  long currentBlock;\n  undefined8 result;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if ((*(long *)(block + 8) == 0) || (currentBlock = *(long *)(block + 0x20), currentBlock == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newBlock;\n      result = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(block + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  result = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",result);\n  result = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = param2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_debug_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_and_process_data_0010c95e",
                "param_1": "input_params",
                "param_2": "byte_buffer",
                "param_3": "output_data",
                "bVar1": "byte_value",
                "bVar2": "next_byte",
                "pbVar3": "current_byte",
                "bVar4": "is_signed",
                "bVar5": "is_unsigned",
                "bVar6": "is_process_data_enabled",
                "cVar7": "char_value",
                "uVar8": "integer_value",
                "pbVar9": "next_byte_ptr",
                "lVar10": "temp_var1",
                "uVar11": "temp_var2",
                "pcVar12": "data_type",
                "sVar13": "string_len",
                "uVar14": "loop_var",
                "__ptr": "ptr_var",
                "lVar15": "temp_result",
                "puVar16": "unsigned_long_ptr",
                "puVar17": "undefined_ptr",
                "ppcVar18": "char_ptr_ptr",
                "pcVar19": "char_ptr",
                "local_49": "undefined_value",
                "local_48": "unsigned_long_value",
                "local_40": "string_array"
            },
            "code": "\nundefined8 parseAndProcessData_0010c95e(undefined8 *input_params,byte **byte_buffer,long *output_data)\n\n{\n  byte byte_value;\n  byte next_byte;\n  byte *current_byte;\n  bool is_signed;\n  bool is_unsigned;\n  bool is_process_data_enabled;\n  char char_value;\n  uint integer_value;\n  byte *next_byte_ptr;\n  long temp_var1;\n  undefined8 temp_var2;\n  char *data_type;\n  size_t string_len;\n  ulong loop_var;\n  void *ptr_var;\n  long temp_result;\n  ulong *unsigned_long_ptr;\n  undefined *undefined_ptr;\n  char **char_ptr_ptr;\n  char *char_ptr;\n  byte *pnext_byte0;\n  undefined undefined_value;\n  ulong unsigned_long_value;\n  char *string_array [2];\n  \n  while( true ) {\n    pnext_byte0 = *byte_buffer;\n    byte_value = *pnext_byte0;\n    if ('T' < (char)byte_value) break;\n    if ((char)byte_value < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byte_value) {\n    case 0x41:\n      temp_result = 0;\n      current_byte = pnext_byte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_buffer = pnext_byte0 + 1;\n      char_value = parseAndProcessData_0010c95e(input_params,byte_buffer,output_data);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_data == (long *)0x0) {\n        return 1;\n      }\n      temp_result = FUN_00113b71(*output_data);\n      *output_data = temp_result;\n      return 1;\n    case 0x46:\n      *byte_buffer = pnext_byte0 + 1;\n      if (output_data == (long *)0x0) {\n        unsigned_long_ptr = (ulong *)0x0;\n        char_ptr_ptr = (char **)0x0;\n      }\n      else {\n        unsigned_long_ptr = &unsigned_long_value;\n        char_ptr_ptr = string_array;\n      }\n      char_value = FUN_0010d882(input_params,byte_buffer,char_ptr_ptr,unsigned_long_ptr);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (**byte_buffer == 0x5f) {\n        *byte_buffer = *byte_buffer + 1;\n        char_value = parseAndProcessData_0010c95e(input_params,byte_buffer,output_data);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_data == (long *)0x0) {\n          return 1;\n        }\n        temp_result = FUN_00113ce0(*output_data,string_array[0],unsigned_long_value & 0xff);\n        *output_data = temp_result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_buffer = pnext_byte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_value = 0;\n      string_array[0] = (char *)0x0;\n      unsigned_long_value = 0;\n      *byte_buffer = pnext_byte0 + 1;\n      if (((&_sch_istable)[(ulong)pnext_byte0[1] * 2] & 4) == 0) {\n        if (pnext_byte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        char_ptr_ptr = string_array;\n        if (output_data == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = FUN_0010d559(input_params,byte_buffer,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        integer_value = FUN_00108e76(byte_buffer);\n        current_byte = *byte_buffer;\n        string_len = strlen((char *)current_byte);\n        if (string_len < integer_value) goto switchD_0010cdf9_caseD_60;\n        *byte_buffer = current_byte + integer_value;\n        if ((output_data != (long *)0x0) &&\n           (string_array[0] = (char *)FUN_0010afd5(*input_params,input_params[1],current_byte,integer_value,9),\n           string_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_buffer;\n      if (byte_value == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_buffer = *byte_buffer + 1;\n        }\n        if (**byte_buffer != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_buffer = *byte_buffer + 1;\n        if (output_data == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          unsigned_long_ptr = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &undefined_value;\n          unsigned_long_ptr = &unsigned_long_value;\n        }\n        char_value = FUN_0010d882(input_params,byte_buffer,unsigned_long_ptr,undefined_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_buffer == 0x5f) {\n        *byte_buffer = *byte_buffer + 1;\n        char_value = parseAndProcessData_0010c95e(input_params,byte_buffer,output_data);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_data == (long *)0x0) {\n          return 1;\n        }\n        if (byte_value != 0x4d) {\n          temp_result = FUN_00113bfa(string_array[0],*output_data);\n          *output_data = temp_result;\n          return 1;\n        }\n        temp_result = FUN_00113b98(*output_data,string_array[0],unsigned_long_value,undefined_value);\n        *output_data = temp_result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      temp_var2 = FUN_0010d559(input_params,byte_buffer,output_data);\n      return temp_var2;\n    case 0x52:\n      *byte_buffer = pnext_byte0 + 1;\n      char_value = parseAndProcessData_0010c95e(input_params,byte_buffer,output_data);\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_data == (long *)0x0) {\n        return 1;\n      }\n      temp_result = FUN_00113cb9(*output_data);\n      *output_data = temp_result;\n      return 1;\n    case 0x54:\n      *byte_buffer = pnext_byte0 + 1;\n      char_value = FUN_00108ea1(byte_buffer,&unsigned_long_value);\n      if (char_value != '\\0') {\n        if ((uint)unsigned_long_value < *(uint *)(input_params + 5)) {\n          string_array[0] = *(char **)((unsigned_long_value & 0xffffffff) * 0x10 + input_params[4]);\n          char_value = parseAndProcessData_0010c95e(input_params,string_array,output_data);\n          if (char_value == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byte_value == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_buffer = pnext_byte0 + 1;\n    char_value = parseAndProcessData_0010c95e(input_params,byte_buffer,output_data);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (output_data == (long *)0x0) {\n      return 1;\n    }\n    temp_result = FUN_00113d3a(*output_data);\n    *output_data = temp_result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_process_data_enabled = false;\n  is_signed = false;\n  char_value = '\\0';\n  is_unsigned = false;\n  do {\n    current_byte = *byte_buffer;\n    byte_value = *current_byte;\n    if (byte_value == 0x55) {\n      char_value = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_value) {\n      if (byte_value == 0x56) {\n        is_process_data_enabled = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_value) goto switchD_0010cdf9_caseD_60;\n      if ((char)byte_value < '_') goto LAB_0010cdfb;\n      switch(byte_value) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (output_data == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_buffer = current_byte + 1;\n          return 1;\n        }\n        temp_result = FUN_0010914e(*input_params,&DAT_00120436);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00112904(6,4);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr = \"unsigned char\";\n        if ((char_value == '\\0') && (char_ptr = \"char\", is_signed)) {\n          char_ptr = \"signed char\";\n        }\n        temp_result = FUN_0010914e(*input_params,char_ptr);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113dfe(1,char_value);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        temp_result = FUN_0010914e(*input_params,\"float\");\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113df2(4);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr = \"unsigned int\";\n        data_type = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr = \"long unsigned int\";\n        data_type = \"long int\";\nLAB_0010ced2:\n        if (char_value == '\\0') {\n          char_ptr = data_type;\n        }\n        temp_result = FUN_0010914e(*input_params,char_ptr);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113dfe(4,char_value);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr = \"long double\";\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        temp_result = FUN_0010914e(*input_params,char_ptr);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113df2(8);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr = \"short unsigned int\";\n        if (char_value == '\\0') {\n          char_ptr = \"short int\";\n        }\n        temp_result = FUN_0010914e(*input_params,char_ptr);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113dfe(2,char_value);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr = string_array;\n        if (output_data == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_value = FUN_0010d21c(input_params,byte_buffer,char_ptr_ptr);\n        if (char_value == '\\0') {\n          return 0;\n        }\n        if (output_data == (long *)0x0) {\n          return 1;\n        }\n        string_len = strlen(string_array[0]);\n        temp_result = FUN_0010afd5(*input_params,input_params[1],string_array[0],string_len & 0xffffffff,9);\n        *output_data = temp_result;\n        free(string_array[0]);\n        temp_result = *output_data;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        temp_result = FUN_0010914e(*input_params,&DAT_00120495);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113e17();\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        temp_result = FUN_0010914e(*input_params,\"__wchar_t\");\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113dfe(2,1);\n          *output_data = temp_result;\n          *byte_buffer = *byte_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr = \"long long unsigned int\";\n        if (char_value == '\\0') {\n          char_ptr = \"long long int\";\n        }\n        temp_result = FUN_0010914e(*input_params,char_ptr);\n        *output_data = temp_result;\n        if (temp_result == 0) {\n          temp_result = FUN_00113dfe(8,char_value);\n          *output_data = temp_result;\n        }\n      }\n      *byte_buffer = *byte_buffer + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_value == 0x43) {\n      is_unsigned = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_value != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *byte_buffer = current_byte + 1;\n  } while( true );\nLAB_0010ca26:\n  next_byte_ptr = current_byte + 1;\n  *byte_buffer = next_byte_ptr;\n  byte_value = *next_byte_ptr;\n  if (byte_value == 0) goto switchD_0010cdf9_caseD_60;\n  if (byte_value == 0x5f) {\n    *byte_buffer = current_byte + 2;\n    char_value = parseAndProcessData_0010c95e(input_params,byte_buffer,output_data);\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (output_data == (long *)0x0) {\n      return 1;\n    }\n    temp_var1 = FUN_0010914e(*input_params,\"int\");\n    if (temp_var1 == 0) {\n      temp_var1 = FUN_00113dfe(4,0);\n    }\n    temp_result = FUN_00113c43(*output_data,temp_var1,0,temp_result,0);\n    *output_data = temp_result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_value * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  temp_result = temp_result * 10 + (long)((char)byte_value + -0x30);\n  current_byte = next_byte_ptr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_value < ':') {\n    if ((char)byte_value < '0') {\n      if (byte_value != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pnext_byte0);\n      if (output_data == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_value != 0x47) || (*byte_buffer = current_byte + 1, ((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnext_byte0 = *byte_buffer;\n  integer_value = FUN_00108e76(byte_buffer);\n  current_byte = *byte_buffer;\n  string_len = strlen((char *)current_byte);\n  loop_var = (ulong)integer_value;\n  if (loop_var <= string_len) {\n    *byte_buffer = current_byte + loop_var;\n    if (output_data == (long *)0x0) {\n      return 1;\n    }\n    ptr_var = (void *)FUN_00109a0b(current_byte,loop_var);\n    temp_result = FUN_0010914e(*input_params,ptr_var);\n    *output_data = temp_result;\n    free(ptr_var);\n    if (*output_data == 0) {\n      temp_result = FUN_0010afd5(*input_params,input_params[1],current_byte,(int)*byte_buffer - (int)current_byte,0);\n      *output_data = temp_result;\njoined_r0x0010d1d8:\n      if (temp_result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_unsigned) {\n      temp_result = FUN_00113b71(*output_data);\n      *output_data = temp_result;\n    }\n    if (is_process_data_enabled) {\n      temp_result = FUN_00113b4a(*output_data);\n      *output_data = temp_result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pnext_byte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010d21c",
                "FUN_00113dfe",
                "FUN_00108e76",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00113c43",
                "strlen",
                "FUN_00113df2",
                "FUN_00113b4a",
                "free",
                "FUN_00112904",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010911f",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d21c",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "dcgettext",
                "FUN_001163d0",
                "bfd_set_section_size",
                "fwrite",
                "strerror",
                "FUN_001126c0",
                "FUN_00105828",
                "bfd_get_full_section_contents",
                "bfd_set_format",
                "FUN_0010551d",
                "bfd_map_over_sections",
                "FUN_0010554f",
                "bfd_get_arch",
                "FUN_00114190",
                "FUN_00115f30",
                "xmalloc",
                "FUN_00119ed0",
                "FUN_00115530",
                "bfd_malloc_and_get_section",
                "bfd_get_section_by_name",
                "bfd_make_section_with_flags",
                "bfd_create_gnu_debuglink_section",
                "fopen",
                "free",
                "__errno_location",
                "fclose"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_access_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfoPtr",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorStr",
                "uVar4": "errorMsg",
                "local_38": "accessTime",
                "uStack_34": "accessTimePtr"
            },
            "code": "\nvoid setFileAccessTime_0011a350(char *filePath,long fileInfoPtr)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 errorMsg;\n  undefined4 accessTime;\n  undefined4 accessTimePtr;\n  undefined4 uStack_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfoPtr + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfoPtr + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfoPtr + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfoPtr + 100);\n  accessTime = *(undefined4 *)(fileInfoPtr + 0x48);\n  accessTimePtr = *(undefined4 *)(fileInfoPtr + 0x4c);\n  uStack_30 = *(undefined4 *)(fileInfoPtr + 0x50);\n  uStack_2c = *(undefined4 *)(fileInfoPtr + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorStr = strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(errorMsg,filePath,errorStr);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_access_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "errorMessage",
                "iVar1": "errorType",
                "uVar2": "errorMessageText",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_0011a110(long errorMessage)\n\n{\n  int errorType;\n  undefined8 errorMessageText;\n  undefined8 additionalInfo;\n  \n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg(errorType);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorMessage,errorMessageText,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessageText,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "extract_and_process_string_0010e2f0",
                "param_1": "inputArray",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "data",
                "param_5": "string",
                "lVar1": "temp",
                "uVar2": "error",
                "lVar3": "lookupResult",
                "uVar4": "errorMessage",
                "uVar5": "translatedErrorMessage",
                "sVar6": "stringLength",
                "lVar7": "temp2",
                "local_44": "temp3",
                "uStack_40": "undefinedVar1",
                "uStack_3f": "undefinedVar2",
                "uStack_3e": "undefinedVar3",
                "local_3c": "tempArray"
            },
            "code": "\nundefined8\nextractAndProcessString_0010e2f0(long *inputArray,undefined flag,int count,undefined8 data,char *string)\n\n{\n  long temp;\n  undefined4 error;\n  long lookupResult;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t stringLength;\n  long temp2;\n  undefined4 temp3;\n  undefined undefinedVar1;\n  undefined undefinedVar2;\n  undefined2 undefinedVar3;\n  undefined4 tempArray [3];\n  \n  if (string == (char *)0x0) {\n    temp2 = 0;\n  }\n  else {\n    lookupResult = bfd_hash_lookup(inputArray + 7,string,1,1);\n    if (lookupResult == 0) {\n      error = bfd_get_error();\n      errorMessage = bfd_errmsg(error);\n      translatedErrorMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(translatedErrorMessage,errorMessage);\n      return 0;\n    }\n    temp2 = *(long *)(lookupResult + 0x20);\n    if (temp2 == -1) {\n      temp2 = inputArray[6];\n      temp = inputArray[5];\n      *(long *)(lookupResult + 0x20) = temp2;\n      if (temp == 0) {\n        inputArray[4] = lookupResult;\n      }\n      else {\n        *(long *)(temp + 0x18) = lookupResult;\n      }\n      inputArray[5] = lookupResult;\n      stringLength = strlen(string);\n      inputArray[6] = temp2 + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*inputArray + 8) + 0x50))(temp2,&temp3);\n  undefinedVar2 = 0;\n  undefinedVar1 = flag;\n  (**(code **)(*(long *)(*inputArray + 8) + 0x68))((long)count,&undefinedVar3);\n  (**(code **)(*(long *)(*inputArray + 8) + 0x50))(data,tempArray);\n  if ((ulong)inputArray[3] < inputArray[2] + 0xcU) {\n    inputArray[3] = inputArray[3] * 2;\n    temp2 = xrealloc(inputArray[1]);\n    inputArray[1] = temp2;\n  }\n  temp2 = inputArray[2];\n  lookupResult = inputArray[1];\n  *(ulong *)(lookupResult + temp2) = CONCAT26(undefinedVar3,CONCAT15(undefinedVar2,CONCAT14(undefinedVar1,temp3)));\n  *(undefined4 *)(lookupResult + 8 + temp2) = tempArray[0];\n  inputArray[2] = inputArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)temp2 >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_error",
                "xrealloc",
                "FUN_00119ed0",
                "bfd_hash_lookup",
                "bfd_errmsg",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e453",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010ed2c",
                "FUN_0010e439",
                "FUN_0010e6a8",
                "FUN_0010e5db",
                "FUN_0010e918",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "extract_and_process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_4": "sectionData",
                "iVar1": "comparisonResult",
                "uVar2": "errorMsg",
                "pcVar3": "commaPos",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "length",
                "uVar7": "result",
                "auVar8": "parsedFlags"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param_2,undefined8 param_3,undefined8 sectionData)\n\n{\n  int comparisonResult;\n  undefined8 errorMsg;\n  char *commaPos;\n  char *nextFlag;\n  size_t flagLength;\n  int length;\n  uint result;\n  undefined parsedFlags [16];\n  \n  result = 0;\n  do {\n    commaPos = strchr(sectionFlags,0x2c);\n    if (commaPos == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      length = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = commaPos + 1;\n      length = (int)commaPos - (int)sectionFlags;\n    }\n    flagLength = (size_t)length;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (comparisonResult == 0) {\n      result = result | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (comparisonResult == 0) {\n        result = result | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (comparisonResult == 0) {\n          result = result | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (comparisonResult == 0) {\n            result = result | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (comparisonResult == 0) {\n              result = result | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (comparisonResult == 0) {\n                result = result | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (comparisonResult == 0) {\n                  result = result | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    result = result | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (comparisonResult == 0) {\n                      result = result | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (comparisonResult == 0) {\n                        result = result | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (comparisonResult == 0) {\n                          result = result | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (comparisonResult == 0) {\n                            result = result | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (comparisonResult != 0) {\n                              commaPos = (char *)xmalloc((long)(length + 1));\n                              strncpy(commaPos,sectionFlags,flagLength);\n                              commaPos[flagLength] = '\\0';\n                              errorMsg = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(errorMsg,commaPos);\n                              errorMsg = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(errorMsg,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            result = result | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  parsedFlags._4_4_ = 0;\n  parsedFlags._0_4_ = result;\n  parsedFlags._8_8_ = sectionData;\n  return parsedFlags;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "param_1": "inputArray",
                "__assert_fail": "assertFailure",
                "ppcVar2": "arrayPtr",
                "__s": "stringPtr",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar1": "totalLength"
            },
            "code": "\nchar * getFormattedString_001125fa(char **inputArray)\n\n{\n  ulong totalLength;\n  char **arrayPtr;\n  size_t length1;\n  size_t length2;\n  char *stringPtr;\n  \n  if (inputArray == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  arrayPtr = (char **)inputArray[0x1d];\n  stringPtr = *inputArray;\n  if ((arrayPtr != (char **)0x0) && ((*(byte *)((long)arrayPtr + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*arrayPtr);\n    length2 = strlen(stringPtr);\n    totalLength = length1 + 3 + length2;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)inputArray[0x1d],*inputArray);\n    stringPtr = DAT_00127a50;\n  }\n  return stringPtr;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828",
                "FUN_00114e50",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "get_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05"
            },
            "code": "\nundefined getReturnValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_return_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_00108863",
                "puVar1": "ptrToData",
                "puVar2": "nextPtrToData"
            },
            "code": "\nvoid freeMemory_00108863(void)\n\n{\n  undefined4 *ptrToData;\n  undefined4 *nextPtrToData;\n  \n  ptrToData = (undefined4 *)&DAT_00127740;\n  do {\n    nextPtrToData = ptrToData + 6;\n    free(*(void **)(ptrToData + 4));\n    *(undefined8 *)(ptrToData + 4) = 0;\n    ptrToData = nextPtrToData;\n  } while (nextPtrToData != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_function_00104020"
            },
            "code": "\nvoid execute_indirect_function_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_file_handle",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "result",
                "puVar3": "current_entry",
                "puVar4": "previous_entry",
                "lVar5": "loop_counter",
                "puVar6": "linkedList",
                "pcVar7": "debug_file",
                "puVar8": "last_entry",
                "bVar9": "counter"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_file_handle,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_entry;\n  undefined8 *previous_entry;\n  long loop_counter;\n  undefined8 *linkedList;\n  char *debug_file;\n  undefined8 *last_entry;\n  byte counter;\n  \n  counter = 0;\n  debug_file = \"\";\n  if (filename != (char *)0x0) {\n    debug_file = filename;\n  }\n  if (*(long *)(source_file_handle + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_file_handle + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],debug_file);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    linkedList = *(undefined8 **)(source_file_handle + 0x10);\n    last_entry = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_entry = 0;\n      last_entry = (undefined8 *)((long)last_entry + (ulong)counter * -8 + 4);\n    }\n    current_entry[1] = debug_file;\n    last_entry = (undefined8 *)*linkedList;\n    while (previous_entry = last_entry, previous_entry != (undefined8 *)0x0) {\n      linkedList = previous_entry;\n      last_entry = (undefined8 *)*previous_entry;\n    }\n    *linkedList = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_file_handle + 0x10) = current_entry;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "check_matching_pattern_00114190",
                "param_1": "inputString",
                "param_2": "flag",
                "param_3": "options",
                "uVar1": "var1",
                "plVar2": "ptrVar2",
                "pplVar3": "ptrToPtrVar3",
                "iVar4": "indexVar",
                "uVar5": "resultVar",
                "pplVar6": "ptrToPtrVar6",
                "pplVar7": "ptrToPtrVar7",
                "pplVar8": "ptrToPtrVar8"
            },
            "code": "\nlong ** checkMatchingPattern_00114190(long *inputString,char flag,uint options)\n\n{\n  uint var1;\n  long *ptrVar2;\n  long **ptrToPtrVar3;\n  int indexVar;\n  undefined8 resultVar;\n  long **ptrToPtrVar6;\n  long **ptrToPtrVar7;\n  long **ptrToPtrVar8;\n  \n  ptrToPtrVar7 = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((options & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      ptrToPtrVar6 = (long **)*ptrToPtrVar7;\n      if (ptrToPtrVar6 == (long **)0x0) {\n        return (long **)0x0;\n      }\n      ptrToPtrVar7 = (long **)0x0;\n    }\n    else {\n      ptrVar2 = DAT_00127900[1];\n      if (*(char *)ptrVar2 == '!') {\n        indexVar = fnmatch((char *)((long)ptrVar2 + 1),(char *)inputString,0);\n        ptrToPtrVar6 = ptrToPtrVar7;\n        if (indexVar == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      indexVar = fnmatch((char *)ptrVar2,(char *)inputString,0);\n      if (indexVar != 0) goto LAB_001141e5;\n      ptrToPtrVar6 = (long **)*ptrToPtrVar7;\n      if (ptrToPtrVar6 == (long **)0x0) goto LAB_00114245;\n    }\n    if ((options & *(uint *)((long)ptrToPtrVar6 + 0x14)) != 0) {\n      ptrVar2 = ptrToPtrVar6[1];\n      if (*(char *)ptrVar2 == '!') {\n        indexVar = fnmatch((char *)((long)ptrVar2 + 1),(char *)inputString,0);\n        if (indexVar == 0) {\nLAB_0011438e:\n          *(undefined *)(ptrToPtrVar6 + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        indexVar = fnmatch((char *)ptrVar2,(char *)inputString,0);\n        if ((ptrToPtrVar7 == (long **)0x0) && (indexVar == 0)) {\n          ptrToPtrVar8 = (long **)*ptrToPtrVar6;\n          ptrToPtrVar7 = ptrToPtrVar6;\n          if (ptrToPtrVar8 == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    ptrToPtrVar8 = (long **)*ptrToPtrVar6;\n    ptrToPtrVar6 = ptrToPtrVar7;\n    if (ptrToPtrVar8 != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    indexVar = strcmp((char *)DAT_00127900[1],(char *)inputString);\n    if (indexVar == 0) {\nLAB_001143cd:\n      var1 = *(uint *)((long)ptrToPtrVar7 + 0x14);\n      if ((((var1 & 1) != 0) && ((options & 2) != 0)) ||\n         (((options & 1) != 0 && ((var1 & 2) != 0)))) {\n        resultVar = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(resultVar,inputString);\n      }\n      if ((((var1 & 8) != 0) && ((options & 0x10) != 0)) || ((options & 0x18) == 0x18)) {\n        resultVar = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(resultVar,inputString);\n      }\n      if ((((var1 & 0x20) == 0) || ((options & 0x40) == 0)) && ((options & 0x60) != 0x60)) {\n        *(uint *)((long)ptrToPtrVar7 + 0x14) = var1 | options;\n        return ptrToPtrVar7;\n      }\n      resultVar = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(resultVar,inputString);\n    }\n    ptrToPtrVar7 = (long **)*ptrToPtrVar7;\n    if (ptrToPtrVar7 == (long **)0x0) goto LAB_001142a9;\n    indexVar = strcmp((char *)ptrToPtrVar7[1],(char *)inputString);\n    if (indexVar == 0) goto LAB_001143cd;\n    ptrToPtrVar8 = (long **)*ptrToPtrVar7;\n    ptrToPtrVar6 = (long **)0x0;\n    if (ptrToPtrVar8 == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      ptrToPtrVar7 = ptrToPtrVar6;\n      if (flag == '\\0') {\n        while (ptrToPtrVar6 = ptrToPtrVar8, ptrToPtrVar3 = ptrToPtrVar7, ptrToPtrVar8 = ptrToPtrVar6,\n              (options & *(uint *)((long)ptrToPtrVar6 + 0x14)) != 0) {\n          ptrVar2 = ptrToPtrVar6[1];\n          if (*(char *)ptrVar2 == '!') {\n            indexVar = fnmatch((char *)((long)ptrVar2 + 1),(char *)inputString,0);\n            if (indexVar == 0) goto LAB_0011438e;\n            ptrToPtrVar8 = (long **)*ptrToPtrVar6;\n            if ((long **)*ptrToPtrVar6 == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            indexVar = fnmatch((char *)ptrVar2,(char *)inputString,0);\n            if ((ptrToPtrVar7 == (long **)0x0) && (indexVar == 0)) {\n              ptrToPtrVar7 = ptrToPtrVar6;\n              ptrToPtrVar8 = (long **)*ptrToPtrVar6;\n              if ((long **)*ptrToPtrVar6 == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              ptrToPtrVar8 = (long **)*ptrToPtrVar6;\n              if ((long **)*ptrToPtrVar6 == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        indexVar = strcmp((char *)ptrToPtrVar8[1],(char *)inputString);\n        ptrToPtrVar3 = ptrToPtrVar6;\n        ptrToPtrVar7 = ptrToPtrVar8;\n        if (indexVar == 0) goto LAB_001143cd;\n      }\n      ptrToPtrVar6 = ptrToPtrVar3;\n      ptrToPtrVar8 = (long **)*ptrToPtrVar8;\n      ptrToPtrVar7 = ptrToPtrVar6;\n    } while (ptrToPtrVar8 != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      ptrToPtrVar6 = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(ptrToPtrVar6 + 3) = (undefined  [16])0x0;\n      *(undefined *)(ptrToPtrVar6 + 2) = 0;\n      *(uint *)((long)ptrToPtrVar6 + 0x14) = options;\n      ptrToPtrVar6[5] = (long *)0x0;\n      ptrToPtrVar7 = ptrToPtrVar6;\n      *ptrToPtrVar6 = (long *)DAT_00127900;\n      DAT_00127900 = ptrToPtrVar7;\n      ptrToPtrVar6[1] = inputString;\n      return ptrToPtrVar6;\n    }\n  }\nLAB_00114212:\n  if (ptrToPtrVar7 == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(ptrToPtrVar7 + 2) = 1;\n  return ptrToPtrVar7;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_00114c20"
            ],
            "imported": false,
            "current_name": "check_matching_pattern_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_attributes_00116490",
                "param_1": "param1",
                "param_2": "attributeSize",
                "param_3": "attributeData",
                "param_4": "noteIndex",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "flag",
                "puVar5": "ptr5",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "var8",
                "in_RAX": "noteType",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "ptr",
                "uVar13": "var13",
                "unaff_RBX": "noteSize",
                "unaff_RBP": "retAddress",
                "puVar14": "ptr14",
                "puVar15": "ptr15",
                "cVar16": "charVar",
                "puVar17": "ptr17",
                "puVar18": "ptr18",
                "in_R11": "descriptionSize",
                "unaff_R12": "notePtr",
                "puVar19": "ptr19",
                "unaff_R13": "varData",
                "__nmemb": "count",
                "unaff_R14": "message",
                "puVar20": "ptr20",
                "bVar21": "byteVal",
                "iVar22": "var22",
                "unaff_retaddr": "returnAddr",
                "param_7": "result",
                "param_8": "param8",
                "param_9": "param9",
                "in_stack_00000020": "allocSize",
                "in_stack_00000028": "dataBuffer",
                "in_stack_00000030": "outputBuffer",
                "in_stack_00000038": "flag1",
                "in_stack_00000040": "flag2",
                "in_stack_00000048": "errorBuffer"
            },
            "code": "\nulong processAttributes_00116490(undefined8 param1,ulong attributeSize,ulong attributeData,long noteIndex)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *ptr5;\n  int index;\n  long length;\n  undefined8 var8;\n  ulong noteType;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr;\n  ulong var13;\n  ulong noteSize;\n  ulong retAddress;\n  ulong *ptr14;\n  undefined *ptr15;\n  char charVar;\n  undefined *ptr17;\n  undefined *ptr18;\n  ulong descriptionSize;\n  ulong *notePtr;\n  ulong *ptr19;\n  ulong varData;\n  size_t count;\n  undefined8 *message;\n  ulong *ptr20;\n  byte byteVal;\n  int var22;\n  ulong returnAddr;\n  ulong result;\n  uint param8;\n  ulong param9;\n  ulong allocSize;\n  ulong *dataBuffer;\n  undefined *outputBuffer;\n  uint flag1;\n  uint flag2;\n  undefined8 *errorBuffer;\n  \n  byteVal = 0;\ncode_r0x00116490:\n  length = noteIndex;\n  var10 = retAddress;\n  var13 = varData;\n  if (noteType == 0) {\n    if (attributeSize == 0x100) {\n      notePtr[7] = returnAddr;\n      var11 = returnAddr;\nLAB_001164af:\n      var9 = varData;\n      var13 = varData;\n      returnAddr = var11;\n    }\n    else {\n      notePtr[7] = param9;\nLAB_0011669e:\n      var10 = retAddress;\n      var9 = retAddress;\n    }\nLAB_001164bb:\n    notePtr[8] = var9;\n    if (*(char *)((notePtr[3] - 1) + attributeData) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr19 = notePtr + 9;\n    if (0xb < noteSize) {\n      var9 = (**(code **)(message[1] + 0x40))(length);\n      *ptr19 = var9;\n      var9 = (**(code **)(message[1] + 0x40))(length + 4);\n      notePtr[10] = var9;\n      attributeSize = (**(code **)(message[1] + 0x40))(length + 8);\n      attributeData = *ptr19;\n      notePtr[0xb] = attributeSize;\n      noteType = notePtr[10];\n      var9 = attributeData + 3 & 0xfffffffffffffffc;\n      notePtr[0xf] = var9;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < attributeSize - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + noteType + 0xc;\n      if (noteSize < var11) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attributeData < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      notePtr[0xc] = length + 0xc;\n      descriptionSize = length + 0xc + var9;\n      notePtr[0xd] = descriptionSize;\n      noteSize = noteSize + (-0xc - (var9 + noteType));\n      noteIndex = length + var11;\n      retAddress = var10;\n      notePtr = ptr19;\n      varData = var13;\n      if (attributeData != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            var10 = processAttributes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < attributeData) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            var10 = processAttributes_00116490();\n            return var10;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            var10 = processAttributes_00116490();\n            return var10;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (noteSize != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag1 | flag2 | param8) == 0) {\n      var1 = *message;\n      var2 = *errorBuffer;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      count = ((long)ptr19 - (long)dataBuffer >> 3) * -0x71c71c71c71c71c7;\n      qsort(dataBuffer,count,0x48,FUN_0011a1b0);\n      for (ptr14 = dataBuffer; ptr14 < ptr19; ptr14 = ptr14 + 9) {\n        var10 = ptr14[2];\n        if (var10 != 0) {\n          var13 = ptr14[7];\n          var9 = ptr14[8];\n          ptr20 = ptr14;\n          var22 = 0;\n          if (var13 == var9) {\n            ptr14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr5 = ptr20;\n                ptr20 = ptr5 + -9;\n                if (ptr20 < dataBuffer) goto LAB_001167f5;\n                var11 = ptr5[-7];\n              } while (var11 == 0);\n              if ((*ptr20 != *ptr14) ||\n                 (index = memcmp((void *)ptr5[-6],(void *)ptr14[3],*ptr14), index != 0))\n              break;\n              var3 = ptr5[-2];\n              var12 = ptr5[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr14[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr5[-1] = var12;\n                  ptr5[-2] = var13;\n                  ptr14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nFUN_00116852:\n              flag = var22 < 0x11;\n              var22 = var22 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(dataBuffer,count,0x48,FUN_0011a250);\n      ptr = (undefined *)xmalloc(allocSize * 2);\n      result = 0;\n      param9 = 0;\n      ptr18 = ptr;\n      for (ptr14 = dataBuffer; ptr14 < ptr19; ptr14 = ptr14 + 9) {\n        if (ptr14[2] != 0) {\n          ptr17 = ptr18 + 4;\n          ptr15 = ptr18 + 0xc;\n          if ((ptr14[7] == param9) && (ptr14[8] == result)) {\n            (**(code **)(message[1] + 0x50))(*ptr14,ptr18);\n            (**(code **)(message[1] + 0x50))(0,ptr17);\n            (**(code **)(message[1] + 0x50))(ptr14[2],ptr18 + 8);\n            var13 = ptr14[6];\n            var10 = *ptr14;\n            ptr18 = (undefined *)ptr14[3];\n            ptr17 = ptr15;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr17 = *ptr18;\n              ptr18 = ptr18 + (ulong)byteVal * -2 + 1;\n              ptr17 = ptr17 + (ulong)byteVal * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *ptr17 = 0;\n                ptr17 = ptr17 + (ulong)byteVal * -2 + 1;\n              }\n            }\n            ptr18 = ptr15 + var13;\n          }\n          else {\n            (**(code **)(message[1] + 0x50))();\n            if (*(int *)(message[1] + 8) == 5) {\n              charVar = (*(char *)(message[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(message[1] + 0x50))(charVar,ptr17);\n            (**(code **)(message[1] + 0x50))(ptr14[2],ptr18 + 8);\n            var10 = *ptr14;\n            ptr18 = (undefined *)ptr14[3];\n            ptr17 = ptr15;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr17 = *ptr18;\n              ptr18 = ptr18 + (ulong)byteVal * -2 + 1;\n              ptr17 = ptr17 + (ulong)byteVal * -2 + 1;\n            }\n            var13 = ptr14[6];\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *ptr17 = 0;\n                ptr17 = ptr17 + (ulong)byteVal * -2 + 1;\n              }\n            }\n            length = message[1];\n            ptr15 = ptr15 + var13;\n            ptr18 = ptr15 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(message[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(ptr14[7],ptr15);\n              (**(code **)(message[1] + 0x38))(ptr14[8],ptr18);\n              ptr18 = ptr15 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(ptr14[7],ptr15);\n              (**(code **)(message[1] + 0x50))(ptr14[8],ptr15 + 4);\n            }\n            param9 = ptr14[7];\n            result = ptr14[8];\n          }\n        }\n      }\n      var13 = (long)ptr18 - (long)ptr;\n      var10 = var13;\n      ptr18 = ptr;\n      if (var13 < allocSize) {\n        for (; allocSize = var13, var10 != 0; var10 = var10 - 1) {\n          *outputBuffer = *ptr18;\n          ptr18 = ptr18 + (ulong)byteVal * -2 + 1;\n          outputBuffer = outputBuffer + (ulong)byteVal * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(dataBuffer);\n      return allocSize;\n    }\n    if (((flag2 | param8) == 0) || (flag1 == 0)) {\n      if (flag2 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      var11 = (**(code **)(message[1] + 0x28))(descriptionSize);\n      var9 = (**(code **)(message[1] + 0x28))(notePtr[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (notePtr[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = returnAddr;\n        }\n        attributeData = *notePtr;\n        notePtr[7] = var11;\n        var13 = var9;\n        returnAddr = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        attributeData = *notePtr;\n        notePtr[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        var11 = (**(code **)(message[1] + 0x40))(descriptionSize);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        var10 = FUN_001086af();\n        return var10;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,message,errorBuffer,length);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "process_attributes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetId",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetId;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetId = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "function_info",
                "param_2": "debug_info",
                "param_3": "unused",
                "param_4": "result",
                "lVar1": "block_info",
                "uVar2": "error_message",
                "pcVar3": "error_string",
                "auVar4": "result_array"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_info,undefined8 debug_info,undefined8 unused,undefined8 result)\n\n{\n  long block_info;\n  undefined8 error_message;\n  char *error_string;\n  undefined result_array [16];\n  \n  if (((*(long *)(function_info + 8) == 0) || (block_info = *(long *)(function_info + 0x20), block_info == 0)) ||\n     (*(long *)(function_info + 0x18) == 0)) {\n    error_string = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(block_info + 8) == 0) {\n      *(undefined8 *)(block_info + 0x20) = debug_info;\n      error_message = CONCAT71((int7)((ulong)block_info >> 8),1);\n      *(undefined (*) [16])(function_info + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_string = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  result_array._8_8_ = result;\n  result_array._0_8_ = error_message;\n  return result_array;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "inputSize",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "memoryBlock",
                "lVar2": "iterator",
                "puVar3": "ptr",
                "bVar4": "counter",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeMemory_00113da9(byte inputSize,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 *memoryBlock;\n  long iterator;\n  undefined8 *ptr;\n  byte counter;\n  undefined result [16];\n  \n  counter = 0;\n  result._0_8_ = FUN_00112904(8 - (uint)inputSize);\n  if (result._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    ptr = memoryBlock + 1;\n    for (iterator = 8; iterator != 0; iterator = iterator + -1) {\n      *(undefined4 *)ptr = 0;\n      ptr = (undefined8 *)((long)ptr + (ulong)counter * -8 + 4);\n    }\n    *memoryBlock = arg3;\n    *(undefined8 **)(result._0_8_ + 0x10) = memoryBlock;\n  }\n  result._8_8_ = arg4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record_1",
                "param_2": "record_2",
                "uVar1": "record_1_field_2",
                "return": "comparison_result"
            },
            "code": "\nint compare_records_0011a250(ulong *record_1,ulong *record_2)\n\n{\n  ulong record_1_field_2;\n  \n  record_1_field_2 = record_1[2];\n  if (record_1_field_2 == record_2[2]) {\n    if (record_2[7] <= record_1[7]) {\n      if (record_1[7] <= record_2[7]) {\n        if (record_2[8] < record_1[8]) {\n          comparison_result -1;\n        }\n        if (record_2[8] <= record_1[8]) {\n          if ((4 < *record_1) && (4 < *record_2)) {\n            if (*(char *)(record_1[3] + 3) != *(char *)(record_2[3] + 3)) {\n              comparison_result (int)*(char *)(record_1[3] + 3) - (int)*(char *)(record_2[3] + 3);\n            }\n          }\n          comparison_result 0;\n        }\n      }\n      comparison_result 1;\n    }\n  }\n  else if ((record_1_field_2 == 0) || ((record_1_field_2 != 0x100 && (record_2[2] != 0)))) {\n    comparison_result 1;\n  }\n  comparison_result -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "convert_to_formatted_message_0010a69a",
                "param_1": "inputPointer",
                "param_2": "paramPointer",
                "param_3": "flag",
                "param_4": "charFlag",
                "param_5": "uintValue",
                "uVar1": "returnValue",
                "lVar2": "result",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "hasResult",
                "local_60": "formattedMessage"
            },
            "code": "\nundefined4 convertToFormattedMessage_0010a69a(long inputPointer,undefined8 paramPointer,int flag,char charFlag,uint uintValue)\n\n{\n  undefined4 returnValue;\n  long result;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined hasResult;\n  char formattedMessage [48];\n  \n  if (flag == 0) {\n    formattedMessage[0] = '\\0';\n    hasResult = 0;\n    result = 0;\n  }\n  else {\n    result = FUN_00109c2e();\n    if (result < 0) {\n      return 0;\n    }\n    hasResult = 1;\n    sprintf(formattedMessage,\"%ld=\",result);\n  }\n  stringLength = strlen(formattedMessage);\n  sprintf(formattedMessage + stringLength,\"%c%u\",(ulong)((-(uint)(charFlag == '\\0') & 2) + 0x73),(ulong)uintValue);\n  returnValue = FUN_00109b52(inputPointer,formattedMessage,result,hasResult,uintValue);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  result = *(long *)(inputPointer + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(result + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(inputPointer + 0x60) + 0x20) = 0;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "convert_to_formatted_message_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_constraints_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "section_size1",
                "lVar5": "section_size2",
                "uVar6": "result",
                "plVar7": "linked_list"
            },
            "code": "\nundefined8 check_section_constraints_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long section_size1;\n  long section_size2;\n  undefined8 result;\n  long *linked_list;\n  \n  section_size1 = FUN_00114190(*section_names,0,4);\n  if (section_size1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      section_size1 = FUN_00114190(*section_names,0,1);\n      section_size2 = FUN_00114190(*section_names,0,2);\n      if (section_size1 != 0) {\n        if (section_size2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(result,current_section);\n        }\n        if (section_size1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          linked_list = DAT_001279d8;\n          do {\n            section_type = strcmp(current_section,(char *)linked_list[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(result,current_section);\n            }\n            linked_list = (long *)*linked_list;\n          } while (linked_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (section_size2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = FUN_0010829e();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = FUN_00113ede(section_names);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = FUN_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_0010827b",
                "FUN_0010829e",
                "strcmp",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_constraints_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocations_00116030",
                "param_1": "binary_data",
                "param_2": "binary_size",
                "plVar1": "reloc_entry",
                "lVar2": "reloc_value",
                "lVar3": "data_check_1",
                "lVar4": "data_check_2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "reloc_size",
                "__ptr": "reloc_buffer",
                "lVar7": "reloc_count",
                "extraout_RAX": "return_value",
                "lVar8": "loop_counter",
                "uStack_28": "fallback_value"
            },
            "code": "\n\n\nundefined8 process_relocations_00116030(undefined8 *binary_data,long binary_size)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long data_check_1;\n  long data_check_2;\n  int error_code;\n  undefined8 result;\n  long reloc_size;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 return_value;\n  long loop_counter;\n  undefined8 fallback_value;\n  \n  if (*(long *)(binary_size + 0x60) == 0) {\n    return result;\n  }\n  reloc_size = bfd_get_reloc_upper_bound();\n  if (reloc_size < 0) {\n    if ((reloc_size != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*binary_data);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_size != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(binary_data,binary_size,reloc_buffer);\n    data_check_2 = _DAT_00128680;\n    data_check_1 = _DAT_00128568;\n    reloc_size = _fwrite;\n    if (reloc_count < 0) {\n      FUN_0011a110(*binary_data);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      loop_counter = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + loop_counter * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != reloc_size)) &&\n           ((reloc_value != data_check_2 && (reloc_value != data_check_1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        loop_counter = loop_counter + 1;\n      } while (reloc_count != loop_counter);\n    }\n    free(reloc_buffer);\n    return return_value;\n  }\n  return fallback_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a110",
                "FUN_001083b7",
                "free",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocations_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "validate_string_length_00113ede",
                "param_1": "string_array",
                "__s": "single_string",
                "sVar1": "string_length",
                "uVar2": "result_value"
            },
            "code": "\nundefined8 validate_string_length_00113ede(char **string_array)\n\n{\n  char *single_string;\n  size_t string_length;\n  undefined8 result_value;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  single_string = *string_array;\n  if (single_string != (char *)0x0) {\n    string_length = strlen(single_string);\n    if (4 < (int)string_length) {\n      result_value = FUN_00113fb0(single_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "validate_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_items_0010875d",
                "param_1": "item1",
                "param_2": "item2",
                "lVar1": "item1Address",
                "lVar2": "item2Address",
                "iVar3": "result",
                "uVar4": "item2Flag"
            },
            "code": "\nint compareItems_0010875d(long *item1,long *item2)\n\n{\n  long item1Address;\n  long item2Address;\n  int result;\n  uint item2Flag;\n  \n  item1Address = *item1;\n  item2Address = *item2;\n  item2Flag = *(uint *)(item2Address + 0x24) & 0x102;\n  if ((*(uint *)(item1Address + 0x24) & 0x102) == 0x102) {\n    if (item2Flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (item2Flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(item1Address + 0x38) <= *(ulong *)(item2Address + 0x38)) {\n    result = -1;\n    if (*(ulong *)(item2Address + 0x38) <= *(ulong *)(item1Address + 0x38)) {\n      if (*(ulong *)(item2Address + 0x40) < *(ulong *)(item1Address + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(item2Address + 0x40) <= *(ulong *)(item1Address + 0x40)) {\n          result = 1;\n          if (*(uint *)(item1Address + 0x18) <= *(uint *)(item2Address + 0x18)) {\n            return -(uint)(*(uint *)(item1Address + 0x18) < *(uint *)(item2Address + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_items_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "analyze_type_0010c892",
                "param_1": "data",
                "param_2": "address",
                "cVar1": "result",
                "lVar2": "size",
                "lVar3": "type",
                "uVar4": "status",
                "puVar5": "ptr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 analyzeType_0010c892(undefined8 data,long address)\n\n{\n  char result;\n  long size;\n  long type;\n  undefined8 status;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(address + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(address + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      type = ptr[1];\n      if (kind != 0) {\n        if (type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          status = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",status);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      size = FUN_00112904(kind,0);\n      if (size == 0) goto LAB_0010c910;\n      type = FUN_0010c6be(data,type,size);\n      ptr[3] = type;\n      if (type == 0) goto LAB_0010c916;\n    }\n    status = 1;\n  }\n  else {\n    result = FUN_0010c1c6();\n    if (result != '\\0') {\n      result = FUN_0010be1a(data,*(undefined8 *)(address + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(address + 0x60) = 0;\n        *(undefined8 *)(address + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    status = 0;\n  }\n  return status;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112904",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_type_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_pointer_00112904",
                "param_1": "data1",
                "param_2": "data2",
                "puVar1": "memoryBlock"
            },
            "code": "\nvoid initializePointer_00112904(undefined4 data1,undefined4 data2)\n\n{\n  undefined4 *memoryBlock;\n  \n  memoryBlock = (undefined4 *)xmalloc(0x18);\n  *memoryBlock = data1;\n  memoryBlock[1] = data2;\n  *(undefined (*) [16])(memoryBlock + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_00113bfa",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_0010c2d2",
                "FUN_00113b4a",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_00113b98",
                "FUN_00113cb9",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_00113d3a"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string_1",
                "param_2": "string_2",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compare_strings_00108898(char **string_1,char **string_2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string_1,*string_2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00109a32",
                "FUN_0010882c",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010c7a0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_00115b70",
                "FUN_00108898",
                "FUN_0010914e",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "lVar1": "index",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionPtr",
                "uVar5": "count"
            },
            "code": "\nvoid executeFunctions_0011a390(void)\n\n{\n  long index;\n  long previousIndex;\n  long tempIndex;\n  long *functionPtr;\n  uint count;\n  \n  functionPtr = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionPtr + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionPtr[index + 2])();\n        previousIndex = index + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionPtr[index + 1])();\n                        previousIndex = index + -2;\n                      }\n                      (*(code *)functionPtr[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionPtr[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionPtr[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionPtr[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionPtr[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionPtr[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionPtr[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionPtr[tempIndex + 1])();\n            (*(code *)functionPtr[tempIndex])();\n            (*(code *)functionPtr[index])();\n            (*(code *)functionPtr[tempIndex + -2])();\n            (*(code *)functionPtr[tempIndex + -3])();\n            (*(code *)functionPtr[tempIndex + -4])();\n            (*(code *)functionPtr[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionPtr = (long *)*functionPtr;\n    } while (functionPtr != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_functions_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "construct_log_string_0010e842",
                "param_1": "param",
                "param_2": "inputString",
                "param_3": "numericValue",
                "param_4": "paramPtr",
                "__s": "formattedString",
                "sVar1": "inputStringLength",
                "auVar2": "returnValue"
            },
            "code": "\nundefined  [16] constructLogString_0010e842(undefined8 param,char *inputString,undefined8 numericValue,undefined8 paramPtr)\n\n{\n  size_t inputStringLength;\n  char *formattedString;\n  undefined returnValue [16];\n  \n  inputStringLength = strlen(inputString);\n  formattedString = (char *)xmalloc(inputStringLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",inputString,numericValue);\n  returnValue._0_4_ = FUN_0010e2f0(param,0x80,0,0,formattedString);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  returnValue._8_8_ = paramPtr;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "construct_log_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_00113cb9",
                "param_1": "inputValue",
                "lVar1": "result"
            },
            "code": "\nlong initializeData_00113cb9(long inputValue)\n\n{\n  long result;\n  \n  if (inputValue != 0) {\n    result = FUN_00112904(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = inputValue;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_data_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "create_formatted_string_0010eafe",
                "param_1": "context",
                "param_2": "inputString",
                "param_3": "character",
                "__s": "generatedString",
                "sVar2": "inputLength",
                "sVar3": "generatedStringLength",
                "__s_00": "formattedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 createFormattedString_0010eafe(long context,char *inputString,char character)\n\n{\n  undefined4 result;\n  char *generatedString;\n  size_t inputLength;\n  size_t generatedStringLength;\n  char *formattedString;\n  \n  if ((*(int *)(context + 0x1f8) == 0) && (*(long *)(context + 0x1e8) == -1)) {\n    generatedString = (char *)FUN_00109b2f();\n    inputLength = strlen(inputString);\n    generatedStringLength = strlen(generatedString);\n    formattedString = (char *)xmalloc(inputLength + 3 + generatedStringLength);\n    sprintf(formattedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(character == '\\0') & 0x20) + 0x46),generatedString);\n    *(undefined8 *)(context + 0x1e8) = *(undefined8 *)(context + 0x10);\n    result = FUN_0010e2f0(context,0x24,0,0,formattedString);\n    if ((char)result != '\\0') {\n      free(formattedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_function_00113df2",
                "param_1": "data"
            },
            "code": "\nvoid initializeFunction_00113df2(undefined4 data)\n\n{\n  FUN_00112904(4,data);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_function_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "param_1": "input",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "combinedString",
                "uVar5": "useFlag",
                "uVar2": "result"
            },
            "code": "\nundefined4 processData_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  undefined useFlag;\n  \n  useFlag = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    useFlag = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)FUN_00109b2f(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combinedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combinedString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = FUN_00109b52(input,combinedString,0,useFlag,0);\n  if ((char)result != '\\0') {\n    free(combinedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_input_0010d882",
                "param_1": "input",
                "param_2": "strings",
                "param_3": "output",
                "param_4": "flag",
                "iVar1": "counter",
                "pcVar2": "currentString",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentStringTemp",
                "uVar6": "index",
                "bVar7": "loopCondition",
                "local_50": "index1",
                "local_4c": "constant",
                "local_48": "index2",
                "local_44": "flag2",
                "local_40": "array",
                "xmalloc": "allocateMemory",
                "LAB_0010d958": "cleanupAndReturn",
                "LAB_0010d9fa": "checkFlag",
                "CONCAT71": "combineValues"
            },
            "code": "\nundefined8 processInput_0010d882(long input,char **strings,long *output,undefined *flag)\n\n{\n  int counter;\n  char *currentString;\n  char currentChar;\n  long allocatedMemory;\n  char *currentStringTemp;\n  ulong index;\n  bool loopCondition;\n  uint index1;\n  undefined4 constant;\n  uint index2;\n  int flag2;\n  undefined8 array [2];\n  \n  currentString = *strings;\n  constant = 10;\n  if (output != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *output = allocatedMemory;\n    *flag = 0;\n  }\n  index1 = 0;\n  while( true ) {\n    currentStringTemp = *strings;\n    currentChar = *currentStringTemp;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *strings = currentStringTemp + 1;\n      if (currentChar == 'T') {\n        flag2 = 1;\n      }\n      else {\n        currentChar = FUN_00108ea1(strings,&flag2);\n        if (currentChar == '\\0') goto cleanupAndReturn;\n      }\n      currentChar = FUN_00108ea1(strings,&index2);\n      if ((currentChar == '\\0') || (*(uint *)(input + 0x28) <= index2)) {\ncleanupAndReturn:\n        FUN_0010911f(currentString);\n        return 0;\n      }\n      index = (ulong)index2;\n      while (counter = flag2 + -1, loopCondition = flag2 != 0, flag2 = counter, loopCondition) {\n        array[0] = *(undefined8 *)(*(long *)(input + 0x20) + index * 0x10);\n        currentChar = FUN_0010d7d4(input,array,output,&index1,&constant);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = FUN_0010d7d4(input,strings,output,&index1,&constant);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output == (long *)0x0) {\n    if (currentChar != 'e') goto checkFlag;\n  }\n  else {\n    *(undefined8 *)(*output + (ulong)index1 * 8) = 0;\n    if (*currentStringTemp != 'e') goto checkFlag;\n    *flag = 1;\n  }\n  currentStringTemp = currentStringTemp + 1;\n  *strings = currentStringTemp;\ncheckFlag:\n  return combineValues((int7)((ulong)currentStringTemp >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_00108ea1",
                "FUN_0010d7d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_input_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_data_structure_00112925",
                "param_1": "dataArray",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "puVar1": "dataPointer",
                "pauVar2": "currentArray",
                "lVar3": "loopCounter",
                "puVar4": "tempPointer",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeDataStructure_00112925(undefined (**dataArray) [16],undefined8 param2Value,undefined4 param3Value,undefined4 param4Value)\n\n{\n  undefined4 *dataPointer;\n  undefined (*currentArray) [16];\n  long loopCounter;\n  undefined4 *tempPointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  dataPointer = (undefined4 *)xmalloc(0x28);\n  tempPointer = dataPointer;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *tempPointer = 0;\n    tempPointer = tempPointer + (ulong)byteValue * -2 + 1;\n  }\n  currentArray = *dataArray;\n  *(undefined8 *)(dataPointer + 2) = param2Value;\n  dataPointer[5] = param3Value;\n  dataPointer[6] = param4Value;\n  if (currentArray == (undefined (*) [16])0x0) {\n    currentArray = (undefined (*) [16])xmalloc(0x10);\n    *currentArray = ZEXT816(0);\n    *dataArray = currentArray;\n    *(undefined (**) [16])(*currentArray + 8) = currentArray;\n  }\n  **(undefined8 **)(*currentArray + 8) = dataPointer;\n  *(undefined4 **)(*currentArray + 8) = dataPointer;\n  return dataPointer;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_0010bf86",
                "param_1": "record_ptr",
                "param_2": "line_num",
                "param_3": "unit_ptr",
                "uVar1": "debug_msg",
                "puVar2": "entry_ptr",
                "uVar3": "count",
                "puVar4": "new_entry_ptr",
                "lVar5": "idx",
                "puVar6": "temp_ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 update_debug_record_0010bf86(long record_ptr,undefined8 line_num,undefined8 unit_ptr)\n\n{\n  undefined8 debug_msg;\n  undefined8 *entry_ptr;\n  ulong count;\n  undefined4 *new_entry_ptr;\n  long idx;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    debug_msg = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",debug_msg);\n    debug_msg = 0;\n  }\n  else {\n    idx = *(long *)(record_ptr + 0x28);\n    if ((idx != 0) && (*(long *)(idx + 8) == *(long *)(record_ptr + 0x10))) {\n      count = 0;\n      do {\n        if (*(long *)(idx + 0x10 + count * 8) == -1) {\n          entry_ptr = (undefined8 *)(count & 0xffffffff);\n          *(undefined8 *)(idx + 0x10 + (long)entry_ptr * 8) = line_num;\n          *(undefined8 *)(idx + 0x60 + (long)entry_ptr * 8) = unit_ptr;\n          goto LAB_0010c056;\n        }\n        count = count + 1;\n      } while (count != 10);\n    }\n    new_entry_ptr = (undefined4 *)xmalloc(0xb0);\n    temp_ptr = new_entry_ptr;\n    for (idx = 0x2c; idx != 0; idx = idx + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n    }\n    debug_msg = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_entry_ptr + 4) = line_num;\n    *(undefined8 *)(new_entry_ptr + 2) = debug_msg;\n    *(undefined8 *)(new_entry_ptr + 0x18) = unit_ptr;\n    temp_ptr = new_entry_ptr + 6;\n    for (idx = 0x48; idx != 0; idx = idx + -1) {\n      *(undefined *)temp_ptr = 0xff;\n      temp_ptr = (undefined4 *)((long)temp_ptr + (ulong)flag * -2 + 1);\n    }\n    entry_ptr = *(undefined8 **)(record_ptr + 0x28);\n    if (entry_ptr == (undefined8 *)0x0) {\n      entry_ptr = *(undefined8 **)(record_ptr + 8);\n      entry_ptr[2] = new_entry_ptr;\n    }\n    else {\n      *entry_ptr = new_entry_ptr;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_entry_ptr;\nLAB_0010c056:\n    debug_msg = CONCAT71((int7)((ulong)entry_ptr >> 8),1);\n  }\n  return debug_msg;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_debug_record_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_matching_0011a170",
                "param_1": "pattern",
                "param_2": "inputString",
                "__pattern": "patternStr",
                "iVar1": "result"
            },
            "code": "\nint patternMatching_0011a170(char **pattern,char **inputString)\n\n{\n  char *patternStr;\n  int result;\n  \n  patternStr = *pattern;\n  if (*patternStr == '!') {\n    result = fnmatch(patternStr + 1,*inputString,0);\n    if (result == 0) {\n      *(undefined *)(inputString + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(patternStr,*inputString,0);\n    if (result == 0) {\n      *(undefined *)(inputString + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_matching_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_info",
                "param_2": "size",
                "param_3": "count",
                "param_4": "value",
                "param_5": "data",
                "puVar1": "next_function",
                "uVar2": "error_message",
                "puVar3": "new_record",
                "puVar7": "current",
                "bVar8": "is_empty",
                "lVar5": "temp",
                "puVar4": "current_next",
                "puVar6": "previous_next"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_info,long size,long count,undefined4 value,undefined8 data)\n\n{\n  undefined8 *next_function;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *current_next;\n  long temp;\n  undefined8 *previous_next;\n  undefined4 *current;\n  byte is_empty;\n  \n  is_empty = 0;\n  if (size == 0) {\n    return 0;\n  }\n  if (count != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      current = new_record;\n      for (temp = 10; temp != 0; temp = temp + -1) {\n        *current = 0;\n        current = current + (ulong)is_empty * -2 + 1;\n      }\n      temp = *(long *)(function_info + 0x18);\n      *(long *)(new_record + 2) = size;\n      *(long *)(new_record + 4) = count;\n      new_record[6] = value;\n      next_function = *(undefined8 **)(temp + 8);\n      *(undefined8 *)(new_record + 8) = data;\n      previous_next = (undefined8 *)(temp + 8);\n      while (current_next = next_function, current_next != (undefined8 *)0x0) {\n        previous_next = current_next;\n        next_function = (undefined8 *)*current_next;\n      }\n      *previous_next = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_contents_00104ea2",
                "cVar1": "isValidFormat",
                "iVar2": "archType",
                "ppcVar3": "nextFile",
                "pvVar4": "buffer",
                "lVar5": "bytesRead",
                "pcVar7": "currentChar",
                "unaff_EBX": "isStatError",
                "unaff_RBP": "fileStat",
                "pcVar10": "currentFile",
                "puVar8": "tempDir",
                "piVar9": "errnoLoc",
                "uVar11": "errorMsg",
                "lVar12": "fileSize",
                "pcVar13": "closeFunc",
                "lVar14": "bytesWritten",
                "bVar17": "flag",
                "unaff_retaddr": "returnAddress",
                "param_7": "sourceFile",
                "param_8": "fileSizePtr",
                "param_9": "tempDirName",
                "param_10": "targetFile",
                "param_11": "fileMode",
                "in_stack_00000030": "unknownFlag",
                "param_18": "filePermission",
                "param_19": "seekOffset"
            },
            "code": "\nvoid copyArchiveContents_00104ea2(void)\n\n{\n  char isValidFormat;\n  int archType;\n  char **nextFile;\n  void *buffer;\n  long bytesRead;\n  char **ppcVar6;\n  char *currentChar;\n  undefined8 *tempDir;\n  int *errnoLoc;\n  char *currentFile;\n  undefined8 errorMsg;\n  long fileSize;\n  code *closeFunc;\n  long bytesWritten;\n  int isStatError;\n  stat *fileStat;\n  char *pisValidFormat5;\n  stat *psVar16;\n  char *unaff_R12;\n  undefined8 *unaff_R13;\n  char **unaff_R15;\n  byte flag;\n  undefined8 returnAddress;\n  undefined8 *sourceFile;\n  long *fileSizePtr;\n  char *tempDirName;\n  undefined8 *targetFile;\n  undefined8 fileMode;\n  undefined8 unknownFlag;\n  uint filePermission;\n  long seekOffset;\n  \n  flag = 0;\ncode_r0x00104ea2:\n  ppcVar6 = (char **)bfd_openw(unaff_R12,fileMode);\n  if (ppcVar6 == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(unaff_R12,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    isValidFormat = FUNC_00114e50(unaff_R15,ppcVar6,returnAddress);\n    if (isValidFormat == '\\0') {\n      archType = bfd_get_arch(unaff_R15);\n      if (archType == 0) goto LAB_00104d75;\n      isValidFormat = bfd_close_all_done(ppcVar6);\n      if (isValidFormat != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(unaff_R12,0,0,0);\n      goto LAB_00104ec9;\n    }\n    isValidFormat = bfd_close(ppcVar6);\n    ppcVar6 = unaff_R15;\n    if (isValidFormat == '\\0') {\n      FUN_001126c0(unaff_R12,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (isStatError == 0)) {\n      FUN_0011a350(unaff_R12,fileStat);\n    }\n    fileSize = bfd_openr(unaff_R12,fileMode);\n    unaff_R13[2] = fileSize;\n    *fileSizePtr = fileSize;\n    fileSizePtr = (long *)(fileSize + 0xf0);\n    unaff_R15 = (char **)bfd_openr_next_archived_file(targetFile,ppcVar6);\n    bfd_close(ppcVar6);\n    while ((DAT_00127a40 == 0 && (unaff_R15 != (char **)0x0))) {\n      currentFile = *unaff_R15;\n      currentChar = currentFile;\n      if (*currentFile == '/') {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorMsg,currentFile);\n        goto LAB_00104e93;\n      }\n      while (*currentChar != '\\0') {\n        pisValidFormat5 = currentChar;\n        if ((*currentChar == '.') && (pisValidFormat5 = currentChar + 1, currentChar[1] == '.')) {\n          pisValidFormat5 = currentChar + 2;\n          if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pisValidFormat5 != '\\0' && (*pisValidFormat5 != '/')); pisValidFormat5 = pisValidFormat5 + 1) {\n        }\n        currentChar = pisValidFormat5;\n        if (*pisValidFormat5 == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      fileStat = (stat *)&stack0x00000050;\n      unaff_R12 = (char *)concat(tempDirName,&DAT_0011b47d);\n      archType = stat(unaff_R12,fileStat);\n      tempDir = unaff_R13;\n      if (-1 < archType) {\n        fileSize = FUN_0011a0e0(unaff_R12);\n        free(unaff_R12);\n        if (fileSize == 0) {\n          errnoLoc = __errno_location();\n          currentFile = strerror(*errnoLoc);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorMsg,currentFile);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        currentFile = *unaff_R15;\n        *tempDir = unaff_R13;\n        tempDir[2] = 0;\n        tempDir[1] = fileSize;\n        unaff_R12 = (char *)concat(fileSize,&DAT_0011b47d,currentFile);\n      }\n      isStatError = 0;\n      if (DAT_001279eb != '\\0') {\n        psVar16 = fileStat;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)flag * -8 + 4);\n        }\n        ppcVar6 = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          ppcVar6 = unaff_R15;\n        }\n        isStatError = (**(code **)(ppcVar6[1] + 0x1e8))(unaff_R15,fileStat);\n        if (isStatError != 0) {\n          currentFile = *unaff_R15;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorMsg,currentFile);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = unaff_R12;\n      *unaff_R13 = tempDir;\n      unaff_R13[2] = 0;\n      isValidFormat = bfd_check_format(unaff_R15,1);\n      if (isValidFormat != '\\0') {\n        if (unknownFlag._7_1_ != '\\0') goto code_r0x00104ea2;\n        ppcVar6 = (char **)bfd_openw(unaff_R12,*(undefined8 *)unaff_R15[1]);\n        if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,unaff_R15,0,errorMsg);\n      ppcVar6 = (char **)bfd_openw(unaff_R12,fileMode);\n      if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      nextFile = (char **)unaff_R15[0x1d];\n      if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n        nextFile = unaff_R15;\n      }\n      archType = (**(code **)(nextFile[1] + 0x1e8))(unaff_R15);\n      fileSize = seekOffset;\n      if (archType == 0) {\n        if (seekOffset < 0) {\n          FUN_001125fa(unaff_R15);\n          errorMsg = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(errorMsg);\n        }\n        else {\n          archType = bfd_seek(unaff_R15,0,0);\n          if (archType == 0) {\n            if (DAT_001279e9 != '\\0') {\n              currentFile = *ppcVar6;\n              errorMsg = FUN_001125fa(unaff_R15);\n              currentChar = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentChar,errorMsg,currentFile);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*ppcVar6,filePermission | 0x100);\n                free(buffer);\n                isValidFormat = bfd_close_all_done(ppcVar6);\n                ppcVar6 = unaff_R15;\n                if (isValidFormat == '\\0') {\n                  FUN_001126c0(unaff_R12,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytesWritten = 0x2000;\n              if (fileSize < 0x2001) {\n                bytesWritten = fileSize;\n              }\n              bytesRead = bfd_bread(buffer,bytesWritten,unaff_R15);\n              nextFile = unaff_R15;\n              if ((bytesWritten != bytesRead) ||\n                 (bytesRead = bfd_bwrite(buffer,bytesWritten,ppcVar6), nextFile = ppcVar6, bytesWritten != bytesRead))\n              break;\n              fileSize = fileSize - bytesWritten;\n            }\n            FUN_001126c0(0,nextFile,0,0);\n            free(buffer);\n          }\n          else {\n            errorMsg = FUN_001125fa(unaff_R15);\n            FUN_0011a110(errorMsg);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,unaff_R15,0,0);\n      }\n      isValidFormat = bfd_close_all_done(ppcVar6);\n      if (isValidFormat == '\\0') {\n        FUN_001126c0(unaff_R12,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(unaff_R12);\n      DAT_00127a40 = 1;\n    }\n    *fileSizePtr = 0;\n    buffer = (void *)xstrdup(*sourceFile);\n    if (DAT_00127a40 == 0) {\n      closeFunc = bfd_close;\n    }\n    else {\n      closeFunc = bfd_close_all_done;\n    }\n    isValidFormat = (*closeFunc)(sourceFile);\n    if (isValidFormat == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*targetFile);\n    isValidFormat = bfd_close(targetFile);\n    if (isValidFormat == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    tempDir = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = tempDir;\n  }\n  rmdir(tempDirName);\n  free(tempDirName);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_bwrite",
                "FUN_00114b84",
                "FUN_001052a2",
                "xstrdup",
                "strerror",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_0011a350",
                "bfd_bread",
                "bfd_openr",
                "bfd_seek",
                "bfd_close",
                "bfd_get_arch",
                "stat",
                "xmalloc",
                "FUN_0011a110",
                "FUN_00119ed0",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_openw",
                "FUN_0011a0e0",
                "free",
                "__errno_location",
                "unlink",
                "bfd_close_all_done",
                "printf",
                "bfd_close",
                "concat",
                "rmdir",
                "chmod",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_contents_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001126c0",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_00107880",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_memory_and_store_params_00113ce0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_memory_and_store_params_00113ce0(long input_param_1,long input_param_2,undefined input_param_3,undefined8 input_param_4,undefined8 input_param_5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_param_1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param_2;\n      *(undefined *)(allocated_memory + 2) = input_param_3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_store_params_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_allocate_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "bufferAddress",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "domain",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndAllocateBuffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 domain;\n  size_t bytesRead;\n  FILE *file;\n  long bufferAddress;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(bufferAddress + 0x20) + startOffset),1,endOffset - startOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      domain = *(undefined8 *)(bufferAddress + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,domain);\n    }\n    startOffset = startOffset + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      domain = xrealloc(*(undefined8 *)(bufferAddress + 0x20),endOffset);\n      *(undefined8 *)(bufferAddress + 0x20) = domain;\n    }\n  }\n  *(long *)(bufferAddress + 0x18) = startOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xrealloc",
                "FUN_00114dc7",
                "fclose",
                "FUN_00119dd0",
                "feof",
                "ferror",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_allocate_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "errorCode",
                "cVar2": "result",
                "iVar3": "index",
                "uVar4": "headerFormat",
                "uVar5": "dataFormat",
                "__format": "printFormat",
                "lVar6": "bufferSize",
                "uVar7": "currentHeader",
                "lVar8": "newBuffer"
            },
            "code": "\nundefined4 processBinary_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 errorCode;\n  char result;\n  int index;\n  undefined8 headerFormat;\n  undefined8 dataFormat;\n  char *printFormat;\n  long bufferSize;\n  undefined8 currentHeader;\n  long newBuffer;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    bufferSize = 0x3000;\n    if (0x3f < index) {\n      bufferSize = (long)index * 0xc0;\n    }\n    newBuffer = xrealloc(data[3]);\n    data[3] = newBuffer;\n    memset((void *)(newBuffer + data[2]),0,bufferSize - data[2]);\n    data[2] = bufferSize;\n  }\n  errorCode = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  headerFormat = FUN_00114e00(errorCode);\n  dataFormat = FUN_00114e00(*(undefined4 *)(header + 2));\n  currentHeader = *header;\n  printFormat = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(printFormat,currentHeader,dataFormat,headerFormat);\n  bufferSize = bfd_openw(*data,*header);\n  if (bufferSize == 0) {\n    FUN_0011a110(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    result = bfd_set_format(bufferSize,1);\n    if (result == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        FUN_0011a110(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(bufferSize + 8) + 0x2a0))(bufferSize,index,0);\n        if (result != '\\0') {\n          currentHeader = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",currentHeader);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(bufferSize);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "bfd_get_error",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "printf",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "read_and_write_file_00115a90",
                "param_1": "file_descriptor",
                "param_2": "file_path",
                "param_3": "file_permissions",
                "_Var3": "file_offset",
                "uVar4": "read_bytes",
                "sVar5": "written_bytes",
                "iVar1": "error_code",
                "__fd": "output_file_descriptor",
                "iVar2": "read_result",
                "piVar6": "errno_location",
                "local_2038": "buffer"
            },
            "code": "\nulong read_and_write_file_00115a90(int file_descriptor,char *file_path,long file_permissions)\n\n{\n  int error_code;\n  int output_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong read_bytes;\n  size_t written_bytes;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (file_offset = lseek(file_descriptor,0,0), file_offset == 0)) {\n    output_file_descriptor = open(file_path,0x201);\n    if (output_file_descriptor < 0) {\n      read_bytes = FUN_00108237();\n      return read_bytes;\n    }\n    do {\n      read_bytes = read(file_descriptor,buffer,0x2000);\n      read_result = (int)read_bytes;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        error_code = *errno_location;\n        fchmod(output_file_descriptor,*(__mode_t *)(file_permissions + 0x18));\n        close(file_descriptor);\n        close(output_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = error_code;\n          return 0xffffffff;\n        }\n        return read_bytes & 0xffffffff;\n      }\n      written_bytes = write(output_file_descriptor,buffer,(long)read_result);\n    } while (written_bytes == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(file_descriptor);\n    close(output_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "__errno_location",
                "write",
                "open",
                "close",
                "FUN_00108237",
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "read_and_write_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldRemove",
                "unaff_R13": "errorCode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 uVar2;\n  char *filePath;\n  char shouldRemove;\n  ulong errorCode;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(uVar2);\n  unlink(filePath);\n  if (shouldRemove != '\\0') {\n    FUN_0011a350();\n  }\n  result._0_8_ = errorCode & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a350",
                "__errno_location",
                "FUN_00119ed0",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 304146,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}