{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "*undefined": {
                    "1": "function_pointer"
                },
                "<original_function_name>": {
                    "1": "execute_indirect_jump"
                },
                "<original_parameter_name_1>": {
                    "1": "<new_parameter_name_1>"
                },
                "<original_parameter_name_2>": {
                    "1": "<new_parameter_name_2>"
                },
                "<original_parameter_name_n>": {
                    "1": "<new_parameter_name_n>"
                },
                "<original_variable_name_1>": {
                    "1": "jump_table"
                },
                "<original_variable_name_2>": {
                    "1": "ptr_to_function"
                },
                "<original_variable_name_n>": {
                    "1": "<new_variable_name_n>"
                },
                "FUN_00102020": {
                    "1": "call_indirect_jump",
                    "15": "execute_indirect_jump",
                    "2": "call_indirect_function",
                    "3": "execute_function",
                    "4": "execute_indirect_function"
                },
                "PTR_00000000": {
                    "1": "indirect_function"
                },
                "PTR_00102020": {
                    "1": "jump_function_ptr"
                },
                "PTR_FUN_00102020": {
                    "1": "indirect_jump_handler"
                },
                "PTR_undefined": {
                    "1": "target_address"
                },
                "code": {
                    "1": "jump_target"
                },
                "undefined": {
                    "1": "indirect_address",
                    "3": "function_pointer"
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102330": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "string_to_print"
                },
                "DAT_00108360": {
                    "1": "flag1"
                },
                "DAT_00108371": {
                    "1": "flag3"
                },
                "DAT_00108372": {
                    "1": "flag4"
                },
                "DAT_00108373": {
                    "1": "flag_b",
                    "2": "flag2"
                },
                "FUN_00102330": {
                    "1": "extracted_function",
                    "2": "print_formatted_data",
                    "4": "process_data"
                },
                "FUN_0010286f": {
                    "1": "print_prompt"
                },
                "FUN_001034d5": {
                    "1": "handle_invalid_input"
                },
                "FUN_001034fa": {
                    "1": "print_insufficient_chars"
                },
                "FUN_00103510": {
                    "1": "error2"
                },
                "FUN_00103520": {
                    "1": "get_next_char",
                    "4": "get_next_character"
                },
                "FUN_00103810": {
                    "1": "free_buffer"
                },
                "LAB_00102381": {
                    "1": "break_label5"
                },
                "LAB_001023bb": {
                    "1": "break_label4"
                },
                "LAB_001023f5": {
                    "1": "handle_character1"
                },
                "LAB_00102438": {
                    "1": "print_tab_char"
                },
                "LAB_001033b3": {
                    "1": "label2"
                },
                "LAB_00103400": {
                    "1": "label1"
                },
                "LAB_0010348e": {
                    "1": "print_invalid_char"
                },
                "LAB_001034be": {
                    "1": "break_label2"
                },
                "LAB_001034d5": {
                    "1": "exit_program"
                },
                "_sch_istable": {
                    "4": "character_table"
                },
                "_stdout": {
                    "1": "output_stream",
                    "3": "standard_output"
                },
                "bVar4": {
                    "1": "counter_check",
                    "2": "is_looping",
                    "3": "is_counter_valid"
                },
                "bool bVar4": {
                    "1": "is_less_than"
                },
                "char *unaff_R14": {
                    "1": "string_pointer"
                },
                "code_r0x00102330": {
                    "1": "print_string"
                },
                "code_r0x001034d5": {
                    "1": "alternative_function"
                },
                "fputs": {
                    "1": "put_buffer"
                },
                "free": {
                    "1": "dealloc_memory"
                },
                "in_AX": {
                    "1": "character_mask",
                    "17": "flags",
                    "2": "input_char",
                    "3": "flag"
                },
                "in_R8D": {
                    "1": "buffer_length",
                    "12": "counter",
                    "2": "index",
                    "4": "loop_counter",
                    "5": "length"
                },
                "in_stack_00000010": {
                    "1": "extra_string",
                    "2": "function_name",
                    "4": "label",
                    "6": "prompt",
                    "7": "message"
                },
                "in_stack_00000038": {
                    "1": "label2",
                    "2": "suffix"
                },
                "param_1": {
                    "1": "input_text",
                    "2": "input_string",
                    "3": "input_data",
                    "5": "data",
                    "8": "input"
                },
                "printf": {
                    "1": "print_text",
                    "2": "print_formatted"
                },
                "putc": {
                    "2": "put_character"
                },
                "reverseEngineerFunctionCall1": {
                    "1": "function1"
                },
                "reverseEngineerFunctionCall2": {
                    "1": "function2"
                },
                "reverseEngineerFunctionCall3": {
                    "1": "function3"
                },
                "reverseEngineerFunctionCall4": {
                    "1": "function4"
                },
                "reverseEngineerFunctionCall5": {
                    "1": "function5"
                },
                "uVar1": {
                    "1": "temp_var",
                    "2": "count",
                    "3": "temp1",
                    "4": "counter",
                    "8": "index"
                },
                "uVar2": {
                    "1": "index2",
                    "12": "index1",
                    "4": "current_index",
                    "7": "index"
                },
                "uVar3": {
                    "1": "index",
                    "13": "index2",
                    "8": "next_index"
                },
                "uint in_R8D": {
                    "1": "index"
                },
                "uint uVar1": {
                    "1": "index"
                },
                "ulong param_1": {
                    "1": "string_address"
                },
                "ulong uVar2": {
                    "1": "index"
                },
                "ulong uVar3": {
                    "1": "index"
                },
                "unaff_R14": {
                    "1": "output_data",
                    "12": "buffer",
                    "2": "string_buffer",
                    "3": "output",
                    "4": "output_buffer",
                    "5": "output_string"
                },
                "unaff_R15": {
                    "1": "function_name",
                    "2": "string",
                    "3": "message",
                    "6": "format_string"
                },
                "undefined8 in_stack_00000010": {
                    "1": "format_string"
                },
                "undefined8 in_stack_00000038": {
                    "1": "file_descriptor"
                },
                "undefined8 unaff_R15": {
                    "1": "file_pointer"
                },
                "ushort in_AX": {
                    "1": "character"
                }
            },
            "called": [
                "FUN_001034d5"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid process_data_00102330(ulong input)\n\n{\n  uint index;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint counter;\n  char *buffer;\n  undefined8 format_string;\n  bool is_less;\n  undefined8 message;\n  undefined8 separator;\n  \nprint_string:\n  if ((DAT_00108360 != 'S') || ((long)input < 0x80)) {\n    if (DAT_00108373 == '\\0') goto alternative_function;\n    if ((flags & 0x40) == 0) {\n      FUN_001034d5();\n      return;\n    }\n  }\nskip_printing:\n  index1 = (ulong)counter;\n  counter = counter + 1;\n  index2 = (ulong)counter;\n  is_less = counter < DAT_00108374;\n  buffer[index1] = (char)input;\n  if (is_less) goto process_next_character;\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",message);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[index2] = '\\0';\n      fputs(buffer,standard_output);\n    }\n    else {\n      FUN_0010286f(format_string);\n      buffer[index2] = '\\0';\n      fputs(buffer,standard_output);\n    }\n    while (index2 = FUN_00103520(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nskip_character:\n        FUN_00103810();\n        break;\n      }\n      if (index2 == 9) {\nprint_character:\n        putc((int)index2,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n          goto skip_character;\n          goto print_character;\n        }\n        putc((int)index2,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n    while (index2 = (ulong)DAT_00108374, format_string = separator, DAT_00108374 != 0) {\n      index2 = FUN_00103520();\n      index = DAT_00108374;\n      if (index2 == 0xffffffffffffffff) goto cleanup_and_return;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nhandle_character1:\n          *buffer = (char)index2;\n          if (index < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto alternative_function;\n            goto handle_character1;\n          }\n          *buffer = (char)index2;\n          if (index < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = FUN_00103520();\n        index = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto cleanup_and_return;\n        if (0xff < index2) goto alternative_function;\n        if (index2 == 9) {\nhandle_character2:\n          buffer[1] = (char)index2;\n          if (index < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto alternative_function;\n            goto handle_character2;\n          }\n          buffer[1] = (char)index2;\n          if (index < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = FUN_00103520();\n        index = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto cleanup_and_return;\n        if (0xff < index2) goto alternative_function;\n        if (index2 == 9) {\nhandle_character3:\n          buffer[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto alternative_function;\n            goto handle_character3;\n          }\n          buffer[2] = (char)index2;\n        }\n        if (index < 4) {\n          index2 = 3;\n          break;\n        }\n        counter = 3;\nprocess_next_character:\n        input = FUN_00103520();\n        if (input == 0xffffffffffffffff) {\ncleanup_and_return:\n          free(buffer);\n          return;\n        }\n        if (input < 0x100) {\n          if ((input == 9) ||\n             (flags = *(ushort *)(&character_table + input * 2), (flags & 0x10) != 0))\n          goto skip_printing;\n          goto print_string;\n        }\n      }\nalternative_function:\n      FUN_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_data_00102330",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102330": "process_data_00102330",
                "LAB_00102381": "handle_character3",
                "LAB_001023bb": "handle_character2",
                "LAB_001023f5": "handle_character1",
                "LAB_00102438": "print_character",
                "LAB_001033b3": "process_next_character",
                "LAB_00103400": "skip_printing",
                "LAB_0010348e": "skip_character",
                "LAB_001034be": "cleanup_and_return",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar4": "is_less",
                "code_r0x00102330": "print_string",
                "code_r0x001034d5": "alternative_function",
                "fputs": "put_string",
                "free": "deallocate_memory",
                "in_AX": "flags",
                "in_R8D": "counter",
                "in_stack_00000010": "message",
                "in_stack_00000038": "separator",
                "param_1": "input",
                "printf": "print_formatted",
                "putc": "put_character",
                "uVar1": "index",
                "uVar2": "index1",
                "uVar3": "index2",
                "unaff_R14": "buffer",
                "unaff_R15": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010259a": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "new_line_string"
                },
                "DAT_00108360": {
                    "1": "flag2",
                    "3": "character_type"
                },
                "DAT_00108372": {
                    "1": "is_initialized"
                },
                "DAT_00108373": {
                    "1": "is_character_type_needed"
                },
                "DAT_00108374": {
                    "1": "buffer_length"
                },
                "FUN_00102330": {
                    "1": "handle_buffer_overflow"
                },
                "FUN_0010259a": {
                    "1": "print_text_and_values",
                    "2": "print_formatted_text",
                    "3": "print_message",
                    "5": "print_string",
                    "6": "print_formatted_string"
                },
                "FUN_0010286f": {
                    "1": "check_condition",
                    "2": "reverse_string"
                },
                "FUN_001034d5": {
                    "1": "handle_invalid_character"
                },
                "FUN_001034fa": {
                    "1": "function1",
                    "2": "handle_buffer_overflow"
                },
                "FUN_00103510": {
                    "1": "handle_buffer_overflow"
                },
                "FUN_00103520": {
                    "1": "get_next_byte",
                    "2": "get_next_character"
                },
                "FUN_00103810": {
                    "1": "cleanup_and_exit"
                },
                "_IO_FILE": {
                    "1": "file"
                },
                "_sch_istable": {
                    "1": "table",
                    "3": "character_table"
                },
                "_stdout": {
                    "1": "stdout",
                    "2": "standard_output",
                    "5": "output_stream"
                },
                "bVar3": {
                    "1": "is_end",
                    "2": "is_invalid",
                    "3": "condition",
                    "4": "is_valid"
                },
                "fputs": {
                    "1": "put_string",
                    "2": "write_string"
                },
                "free": {
                    "1": "release_memory",
                    "2": "deallocate_memory"
                },
                "in_R8": {
                    "1": "position",
                    "2": "string_index",
                    "5": "current_index",
                    "9": "index"
                },
                "param_1": {
                    "1": "input"
                },
                "param_11": {
                    "1": "print_format_again",
                    "2": "argument_list",
                    "5": "param_11"
                },
                "param_2": {
                    "1": "buffer_size"
                },
                "param_3": {
                    "1": "is_end_of_file"
                },
                "param_4": {
                    "1": "text_pointer"
                },
                "param_7": {
                    "1": "input_length",
                    "2": "value",
                    "3": "char_index",
                    "4": "string_length"
                },
                "param_8": {
                    "1": "string",
                    "2": "label",
                    "3": "format_specifier",
                    "6": "format_string",
                    "8": "message"
                },
                "printf": {
                    "1": "print_formatted_message"
                },
                "putc": {
                    "1": "put_character"
                },
                "putchar": {
                    "1": "write_character"
                },
                "uVar1": {
                    "1": "tmp_value",
                    "2": "byte_value",
                    "3": "temp_var1",
                    "4": "value"
                },
                "uVar2": {
                    "1": "byte_value",
                    "3": "temp_var2",
                    "4": "character",
                    "5": "result"
                },
                "unaff_R14": {
                    "1": "formatted_string",
                    "10": "output_string",
                    "2": "string",
                    "4": "output_buffer",
                    "8": "buffer"
                },
                "unaff_R15": {
                    "1": "decompiled_call",
                    "2": "format_specifier",
                    "3": "param_11",
                    "7": "format_string"
                }
            },
            "called": [
                "putc",
                "free",
                "FUN_0010259a",
                "fputs",
                "FUN_001034d5",
                "FUN_00103810",
                "printf",
                "FUN_001034fa",
                "FUN_00103510",
                "FUN_0010286f",
                "FUN_00103520",
                "FUN_00102330"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_string_0010259a(void)\n\n{\n  uint value;\n  ulong result;\n  ulong index;\n  char *output_string;\n  undefined8 format_string;\n  bool is_valid;\n  uint length;\n  undefined8 message;\n  undefined8 input1;\n  \n  do {\n    length = (uint)index;\n    printf(\"%s: \",message);\n    index = (ulong)length;\n    do {\n      if (DAT_00108372 == '\\0') {\n        output_string[index] = '\\0';\n        fputs(output_string,output_stream);\n      }\n      else {\n        length = (uint)index;\n        FUN_0010286f(format_string);\n        output_string[length] = '\\0';\n        fputs(output_string,output_stream);\n      }\n      while (result = FUN_00103520(), result != 0xffffffffffffffff) {\n        if (0xff < result) {\nLAB_0010348e:\n          FUN_00103810();\n          break;\n        }\n        if (result == 9) {\nLAB_00102438:\n          putc((int)result,output_stream);\n        }\n        else {\n          if ((*(ushort *)(&character_table + result * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + result * 2) & 0x40) == 0))))\n            goto LAB_0010348e;\n            goto LAB_00102438;\n          }\n          putc((int)result,output_stream);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        putc(10,output_stream);\n      }\n      else {\n        fputs(DAT_00108358,output_stream);\n      }\n      while (index = (ulong)DAT_00108374, DAT_00108374 != 0) {\n        result = FUN_00103520();\n        value = DAT_00108374;\n        if (result == 0xffffffffffffffff) goto LAB_001034be;\n        if (result < 0x100) {\n          if (result == 9) {\nLAB_001023f5:\n            *output_string = (char)result;\n            if (value < 2) {\n              FUN_001034fa();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + result * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + result * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023f5;\n            }\n            *output_string = (char)result;\n            if (value < 2) {\n              index = 1;\n              break;\n            }\n          }\n          result = FUN_00103520();\n          value = DAT_00108374;\n          if (result == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < result) goto code_r0x001034d5;\n          if (result == 9) {\nLAB_001023bb:\n            output_string[1] = (char)result;\n            if (value < 3) {\n              FUN_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + result * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + result * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            output_string[1] = (char)result;\n            if (value < 3) {\n              index = 2;\n              break;\n            }\n          }\n          result = FUN_00103520();\n          value = DAT_00108374;\n          if (result == 0xffffffffffffffff) {\nLAB_001034be:\n            free(output_string);\n            return;\n          }\n          if (0xff < result) goto code_r0x001034d5;\n          if (result == 9) {\nLAB_00102381:\n            output_string[2] = (char)result;\n          }\n          else {\n            if ((*(ushort *)(&character_table + result * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + result * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_00102381;\n            }\n            output_string[2] = (char)result;\n          }\n          if (3 < value) {\n            index = 3;\n            do {\n              length = (uint)index;\n              result = FUN_00103520();\n              if (result == 0xffffffffffffffff) goto LAB_001034be;\n              if (0xff < result) goto code_r0x001034d5;\n              if (((result != 9) && ((*(ushort *)(&character_table + result * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)result < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&character_table + result * 2) & 0x40) == 0) {\n                  FUN_001034d5();\n                  return;\n                }\n              }\n              index = (ulong)(length + 1);\n              is_valid = DAT_00108374 <= length + 1;\n              output_string[length] = (char)result;\n              if (is_valid) goto joined_r0x0010341b;\n            } while( true );\n          }\n          index = 3;\n          break;\n        }\ncode_r0x001034d5:\n        FUN_00103810();\n      }\njoined_r0x0010341b:\n      format_string = input1;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_string_0010259a",
            "entrypoint": "0x0010259a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010259a": "print_formatted_string_0010259a",
                "_sch_istable": "character_table",
                "_stdout": "output_stream",
                "bVar3": "is_valid",
                "fputs": "write_string",
                "free": "deallocate_memory",
                "in_R8": "index",
                "param_1": "input",
                "param_7": "length",
                "param_8": "message",
                "printf": "print_formatted_text",
                "putc": "put_character",
                "uVar1": "value",
                "uVar2": "result",
                "unaff_R14": "output_string",
                "unaff_R15": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102771": {
            "additional_data": {
                "(uint)(unaff_RBX << 8) & 0xff0000": {
                    "1": "middle_bytes1"
                },
                "(uint)(unaff_RBX >> 8) & 0xff00": {
                    "1": "second_least_significant_byte"
                },
                "(ulong)((uint)(unaff_RBX << 8) & 0xff0000)": {
                    "1": "shifted_left"
                },
                "(ulong)((uint)(unaff_RBX >> 8) & 0xff00)": {
                    "1": "shifted_right"
                },
                "0x18": {
                    "1": "shift"
                },
                "0x8": {
                    "1": "shift"
                },
                "0xff": {
                    "1": "mask"
                },
                "0xff00": {
                    "1": "mask"
                },
                "0xff0000": {
                    "1": "mask"
                },
                "FUN_00102771": {
                    "1": "extract_bits_from_value",
                    "13": "reverse_bits",
                    "2": "extract_bits",
                    "9": "reverse_byte_order"
                },
                "[Remain unchanged]": {
                    "1": ""
                },
                "unaff_RAX": {
                    "1": "reversed_value",
                    "3": "result"
                },
                "unaff_RBX": {
                    "1": "input_number",
                    "14": "input",
                    "2": "original_value",
                    "3": "value",
                    "7": "input_value"
                },
                "unaff_RBX & 0xff": {
                    "1": "masked_value1"
                },
                "unaff_RBX << 8": {
                    "1": "shifted_value2"
                },
                "unaff_RBX >> 0x18 & 0xff": {
                    "1": "most_significant_byte"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18": {
                    "1": "reversed_bits"
                },
                "unaff_RBX >> 0x18 & 0xff | (unaff_RBX & 0xff) << 0x18 | (ulong)((uint)(unaff_RBX << 8) & 0xff0000) | (ulong)((uint)(unaff_RBX >> 8) & 0xff00)": {
                    "1": "swapped_byte_order"
                },
                "unaff_RBX >> 8": {
                    "1": "input_shifted_right"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103520"
            ],
            "code": "\nulong reverse_bits_00102771(void)\n\n{\n  ulong input;\n  \n  return input >> 0x18 & 0xff |\n         (input & 0xff) << 0x18 | (ulong)((uint)(input << 8) & 0xff0000) |\n         (ulong)((uint)(input >> 8) & 0xff00);\n}\n\n",
            "current_name": "reverse_bits_00102771",
            "entrypoint": "0x00102771",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102771": "reverse_bits_00102771",
                "unaff_RBX": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027e2": {
            "additional_data": {
                "F": {
                    "1": "calculate_sum"
                },
                "FUN_001027e2": {
                    "1": "calculate_result",
                    "2": "update_and_sum",
                    "3": "calculate_sum_and_increment",
                    "5": "calculate_sum_and_update"
                },
                "in_RAX": {
                    "1": "pointer_to_sum",
                    "2": "temporary_ptr",
                    "3": "pointer",
                    "4": "sum",
                    "6": "temp"
                },
                "param_1": {
                    "1": "input_1",
                    "2": "value_1",
                    "3": "input1",
                    "6": "operand1",
                    "7": "num1"
                },
                "param_2": {
                    "1": "number_2",
                    "2": "input_value_2",
                    "3": "input2",
                    "6": "operand2",
                    "7": "num2"
                },
                "param_3": {
                    "1": "operand",
                    "11": "modifier",
                    "2": "factor"
                },
                "param_4": {
                    "1": "sum_result",
                    "29": "result"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid calculate_sum_001027e2(int num1,int num2,long modifier,long *result)\n\n{\n  int *temp;\n  \n  *result = *result + (1 - modifier);\n  *temp = num1 + num2;\n  return;\n}\n\n",
            "current_name": "calculate_sum_001027e2",
            "entrypoint": "0x001027e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027e2": "calculate_sum_001027e2",
                "in_RAX": "temp",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "modifier",
                "param_4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010282b": {
            "additional_data": {
                "*in_RAX": {
                    "1": "set_value"
                },
                "*in_RCX": {
                    "1": "output_data"
                },
                "<original_function_name>": {
                    "1": "set_register_values"
                },
                "DAT_00108348": {
                    "1": "shifted_data1",
                    "2": "shifted_byte1"
                },
                "DAT_00108349": {
                    "1": "byte_2",
                    "2": "shifted_byte2"
                },
                "DAT_0010834a": {
                    "1": "byte_3",
                    "2": "shifted_byte3"
                },
                "FUN_0010282b": {
                    "1": "set_values_to_constants",
                    "16": "initialize_data",
                    "3": "set_values"
                },
                "in_RAX": {
                    "1": "target_pointer",
                    "2": "destination",
                    "5": "pointer_to_value",
                    "7": "output_pointer",
                    "8": "data_pointer"
                },
                "in_RCX": {
                    "1": "source_ptr",
                    "2": "source",
                    "3": "pointer_to_address",
                    "5": "output_pointer",
                    "9": "data_pointer"
                },
                "unaff_RBX": {
                    "1": "initial_value",
                    "13": "input_value",
                    "2": "input",
                    "3": "register_value",
                    "4": "input_data"
                },
                "unaff_RBX >> 0x10": {
                    "1": "extracted_byte3"
                },
                "unaff_RBX >> 0x18": {
                    "1": "extracted_byte2"
                },
                "unaff_RBX >> 8": {
                    "1": "extracted_byte1"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid initialize_data_0010282b(void)\n\n{\n  undefined4 *data_pointer;\n  undefined8 *data_pointer;\n  undefined8 input_value;\n  \n  DAT_00108348 = (undefined)((ulong)input_value >> 8);\n  DAT_0010834a = (undefined)((ulong)input_value >> 0x18);\n  DAT_00108349 = (undefined)((ulong)input_value >> 0x10);\n  *data_pointer = 3;\n  *data_pointer = &DAT_00108348;\n  return;\n}\n\n",
            "current_name": "initialize_data_0010282b",
            "entrypoint": "0x0010282b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010282b": "initialize_data_0010282b",
                "in_RAX": "data_pointer",
                "in_RCX": "data_pointer",
                "unaff_RBX": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102853": {
            "additional_data": {
                "DAT_00108372": {
                    "1": "flag"
                },
                "FUN_00102853": {
                    "1": "print_if_data_not_empty",
                    "2": "print_if_data_available",
                    "3": "print_if_flag_set",
                    "4": "print_message_if_flag_set",
                    "6": "print_message"
                },
                "FUN_0010286f": {
                    "1": "perform_additional_operation",
                    "2": "print_message",
                    "4": "print_newline"
                },
                "param_1": {
                    "31": "message"
                },
                "print": {
                    "1": "print_message"
                },
                "printf": {
                    "1": "print"
                },
                "undefined8": {
                    "1": "param"
                }
            },
            "called": [
                "printf",
                "FUN_0010286f"
            ],
            "calling": [
                "FUN_00103890"
            ],
            "code": "\nvoid print_message_00102853(param message)\n\n{\n  printf(\"%s: \",message);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  FUN_0010286f();\n  return;\n}\n\n",
            "current_name": "print_message_00102853",
            "entrypoint": "0x00102853",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102853": "print_message_00102853",
                "param_1": "message",
                "print": "print_message",
                "printf": "print",
                "undefined8": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010286f": {
            "additional_data": {
                "DAT_00108354": {
                    "1": "number_type"
                },
                "FUN_0010286f": {
                    "1": "print_number_with_type",
                    "17": "print_formatted_value",
                    "3": "format_and_print_value",
                    "8": "print_formatted_number"
                },
                "__format": {
                    "1": "print_format",
                    "14": "format"
                },
                "param_1": {
                    "1": "parameter",
                    "10": "number",
                    "20": "value"
                },
                "printf": {
                    "1": "output_formatted_string",
                    "2": "print_formatted_output",
                    "6": "formatted_print",
                    "7": "print"
                },
                "printf parameter 1": {
                    "1": "format_specifier"
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00102853"
            ],
            "code": "\nvoid print_formatted_value_0010286f(undefined8 value)\n\n{\n  if (DAT_00108354 == 10) {\n    printf(\"%7ld \",value);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      printf(\"%7lo \",value);\n      return;\n    }\n    return;\n  }\n  printf(\"%7lx \",value);\n  return;\n}\n\n",
            "current_name": "print_formatted_value_0010286f",
            "entrypoint": "0x0010286f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010286f": "print_formatted_value_0010286f",
                "param_1": "value",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028b2": {
            "additional_data": {
                "FUN_001028b2": {
                    "1": "get_substring_length",
                    "2": "check_utf8_validity",
                    "3": "decode_length",
                    "6": "check_byte_sequence"
                },
                "bVar1": {
                    "25": "first_byte",
                    "4": "current_byte"
                },
                "lVar2": {
                    "1": "position",
                    "2": "offset",
                    "23": "result"
                },
                "param_1": {
                    "1": "bytes",
                    "11": "byte_sequence",
                    "2": "data",
                    "3": "byte_array",
                    "4": "buffer"
                },
                "param_2": {
                    "1": "header_length",
                    "10": "length",
                    "2": "input_length",
                    "9": "sequence_length"
                }
            },
            "called": [],
            "calling": [
                "FUN_00103240"
            ],
            "code": "\nlong check_byte_sequence_001028b2(byte *byte_sequence,long length)\n\n{\n  byte first_byte;\n  long result;\n  \n  first_byte = *byte_sequence;\n  if ((0xbf < first_byte) && (length != 1)) {\n    result = 0;\n    if ((byte_sequence[1] & 0xc0) == 0x80) {\n      if ((first_byte & 0x20) == 0) {\n        return 2;\n      }\n      if ((length != 2) && ((byte_sequence[2] & 0xc0) == 0x80)) {\n        if ((first_byte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (length != 3) {\n            return (ulong)((byte_sequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_byte_sequence_001028b2",
            "entrypoint": "0x001028b2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028b2": "check_byte_sequence_001028b2",
                "bVar1": "first_byte",
                "lVar2": "result",
                "param_1": "byte_sequence",
                "param_2": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010290e": {
            "additional_data": {
                "*param_1": {
                    "1": "file_stream"
                },
                "*param_3": {
                    "1": "remaining_bytes"
                },
                "*param_4": {
                    "1": "num_read_bytes"
                },
                "FUN_0010290e": {
                    "1": "read_byte_from_buffer",
                    "18": "read_byte_from_file",
                    "2": "read_byte_from_stream",
                    "3": "read_byte",
                    "6": "read_next_byte"
                },
                "_IO_FILE": {
                    "1": "file"
                },
                "__uflow": {
                    "1": "read_byte"
                },
                "param_1": {
                    "1": "file_descriptor",
                    "24": "file",
                    "3": "file_stream"
                },
                "param_2": {
                    "1": "file_offset",
                    "24": "position",
                    "3": "file_position"
                },
                "param_3": {
                    "1": "remaining",
                    "28": "remaining_bytes"
                },
                "param_4": {
                    "1": "character_count",
                    "2": "read_errors",
                    "5": "read_count",
                    "9": "bytes_read"
                },
                "pbVar1": {
                    "1": "read_byte",
                    "2": "buffer_ptr",
                    "3": "byte_pointer",
                    "9": "read_ptr"
                },
                "uVar2": {
                    "1": "return_value",
                    "2": "byte_value",
                    "26": "result"
                }
            },
            "called": [
                "__uflow"
            ],
            "calling": [
                "FUN_00102b11"
            ],
            "code": "\nuint read_byte_from_file_0010290e(file *file,long position,uint *remaining_bytes,int *bytes_read)\n\n{\n  byte *byte_ptr;\n  uint result;\n  \n  if (*remaining_bytes != 0) {\n    result = *remaining_bytes - 1;\n    *remaining_bytes = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *bytes_read = *bytes_read + 1;\n  byte_ptr = (byte *)file->_IO_read_ptr;\n  if (file->_IO_read_end <= byte_ptr) {\n    result = __uflow(file);\n    return result;\n  }\n  file->_IO_read_ptr = (char *)(byte_ptr + 1);\n  return (uint)*byte_ptr;\n}\n\n",
            "current_name": "read_byte_from_file_0010290e",
            "entrypoint": "0x0010290e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010290e": "read_byte_from_file_0010290e",
                "_IO_FILE": "file",
                "__uflow": "read_from_file",
                "param_1": "file",
                "param_2": "position",
                "param_3": "remaining_bytes",
                "param_4": "bytes_read",
                "pbVar1": "byte_ptr",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010293a": {
            "additional_data": {
                "DAT_00108350": {
                    "1": "unicode_display_type",
                    "2": "display_type"
                },
                "FUN_0010293a": {
                    "1": "parse_unicode_display",
                    "3": "decode_and_display",
                    "4": "parse_and_display_unicode",
                    "5": "decode_and_display_unicode",
                    "6": "display_unicode_character"
                },
                "__c": {
                    "1": "character"
                },
                "__fd": {
                    "1": "file_descriptor"
                },
                "__n": {
                    "1": "num_elements"
                },
                "__ptr": {
                    "1": "data_pointer"
                },
                "__s": {
                    "1": "stream"
                },
                "__size": {
                    "1": "element_size"
                },
                "__stream": {
                    "1": "output_stream"
                },
                "_format": {
                    "1": "format_string"
                },
                "_stderr": {
                    "3": "stderr",
                    "5": "standard_error"
                },
                "_stdout": {
                    "3": "stdout",
                    "5": "standard_output"
                },
                "bVar1": {
                    "1": "byte_value",
                    "2": "first_nibble",
                    "5": "first_char",
                    "7": "first_byte",
                    "8": "first_two_bits"
                },
                "fwrite": {
                    "1": "write_to_file"
                },
                "iVar3": {
                    "1": "is_interactive",
                    "10": "is_tty",
                    "14": "is_terminal",
                    "2": "terminal_status"
                },
                "isatty": {
                    "1": "is_terminal"
                },
                "param_1": {
                    "1": "character",
                    "2": "input_buffer",
                    "3": "input",
                    "5": "input_data",
                    "6": "data",
                    "8": "input_string"
                },
                "pbVar6": {
                    "1": "end_of_input_data",
                    "3": "end_of_input",
                    "4": "end_of_data",
                    "5": "end_of_string",
                    "8": "end_ptr"
                },
                "printf": {
                    "1": "print_formatted"
                },
                "putc": {
                    "1": "put_character"
                },
                "stderr": {
                    "1": "error_output"
                },
                "uVar2": {
                    "1": "second_byte_value",
                    "18": "second_byte",
                    "2": "second_nibble",
                    "6": "second_char"
                },
                "uVar4": {
                    "1": "unicode_length",
                    "2": "display_type",
                    "3": "output_length",
                    "5": "num_bytes",
                    "6": "display_length"
                },
                "uVar5": {
                    "1": "third_character",
                    "16": "first_byte",
                    "2": "first_char"
                }
            },
            "called": [
                "isatty",
                "putc",
                "fwrite",
                "printf"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\n\n\nuint display_unicode_character_0010293a(byte *input_string)\n\n{\n  byte first_two_bits;\n  uint second_byte;\n  int isatty;\n  uint output_size;\n  uint first_byte;\n  byte *end_ptr;\n  \n  output_size = 2;\n  first_two_bits = *input_string & 0x30;\n  if ((first_two_bits != 0x10) && (output_size = 3, first_two_bits != 0x20)) {\n    output_size = (-(uint)(first_two_bits == 0) & 0xfffffffe) + 4;\n  }\n  if (DAT_00108350 == 3) {\n    end_ptr = input_string + output_size;\n    putc(0x3c,standard_output);\n    printf(\"0x\");\n    do {\n      first_two_bits = *input_string;\n      input_string = input_string + 1;\n      printf(\"%02x\",(ulong)first_two_bits);\n    } while (end_ptr != input_string);\n    putc(0x3e,standard_output);\n    return output_size;\n  }\n  if (DAT_00108350 < 4) {\n    if (DAT_00108350 == 1) {\n      printf(\"%.1s\",input_string);\n      return output_size;\n    }\n    if (DAT_00108350 == 2) {\nLAB_001029cd:\n      second_byte = (uint)input_string[1];\n      first_byte = (uint)*input_string;\n      if (output_size == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((first_byte & 0xf) << 4 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | input_string[2] & 0x3f));\n      }\n      else if (output_size == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((first_byte & 7) << 6 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | (int)(uint)input_string[2] >> 2 & 0xfU),\n               (ulong)((input_string[2] & 3) << 6 | input_string[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*input_string >> 2 & 7),\n               (ulong)((first_byte & 3) << 6 | input_string[1] & 0x3f));\n      }\n      if (DAT_00108350 != 4) {\n        return output_size;\n      }\n      is_terminal = is_terminal(1);\n      if (is_terminal == 0) {\n        return output_size;\n      }\n      printf(\"\\x1b[0m\");\n      return output_size;\n    }\n  }\n  else if (DAT_00108350 == 4) {\n    is_terminal = is_terminal(1);\n    if (is_terminal != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,standard_error);\n  return output_size;\n}\n\n",
            "current_name": "display_unicode_character_0010293a",
            "entrypoint": "0x0010293a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010293a": "display_unicode_character_0010293a",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar1": "first_two_bits",
                "fwrite": "write_to_file",
                "iVar3": "is_terminal",
                "isatty": "is_terminal",
                "param_1": "input_string",
                "pbVar6": "end_ptr",
                "printf": "print_formatted",
                "putc": "put_character",
                "stderr": "error_output",
                "uVar2": "second_byte",
                "uVar4": "output_size",
                "uVar5": "first_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102b11": {
            "additional_data": {
                "FUN_00102b11": {
                    "1": "reverse_and_print_data",
                    "10": "process_data",
                    "2": "decode_data",
                    "3": "parse_and_print_data",
                    "4": "decode_function"
                },
                "_stdout": {
                    "1": "standard_output"
                },
                "iVar4": {
                    "1": "int_value",
                    "2": "int_val",
                    "3": "temp_var4",
                    "5": "var4",
                    "8": "temp4"
                },
                "isTable": {
                    "1": "is_table"
                },
                "local_39": {
                    "1": "local_byte4",
                    "10": "byte4",
                    "3": "fourth_byte",
                    "4": "local_var7"
                },
                "local_3a": {
                    "1": "byte_value10",
                    "10": "byte3",
                    "3": "third_byte",
                    "4": "local_var6"
                },
                "local_3b": {
                    "1": "temp_var3b",
                    "10": "byte2",
                    "3": "second_byte",
                    "4": "local_var5"
                },
                "local_3c": {
                    "1": "local_variable4",
                    "10": "byte1",
                    "3": "first_byte",
                    "4": "local_var4"
                },
                "local_40": {
                    "1": "uint_var1",
                    "2": "local_var",
                    "4": "local_var3"
                },
                "local_4c": {
                    "1": "arg_array",
                    "2": "buffer",
                    "4": "local_array1"
                },
                "local_4c[0]": {
                    "1": "local_array4c[0]"
                },
                "local_80": {
                    "1": "start_index",
                    "3": "last_index",
                    "4": "local_variable1",
                    "5": "local_var1"
                },
                "param_1": {
                    "1": "param_one",
                    "10": "arg1",
                    "2": "input1",
                    "3": "param_1",
                    "9": "param1"
                },
                "param_2": {
                    "1": "base_offset",
                    "10": "arg2",
                    "2": "input2",
                    "9": "param2"
                },
                "param_3": {
                    "1": "param_three",
                    "10": "arg3",
                    "2": "input3",
                    "9": "param3"
                },
                "param_4": {
                    "1": "buffer",
                    "10": "arg4",
                    "2": "data_offset",
                    "9": "param4"
                },
                "param_5": {
                    "1": "param_five",
                    "10": "arg5",
                    "2": "param_5",
                    "9": "param5"
                },
                "param_6": {
                    "1": "output_ptr",
                    "10": "arg6",
                    "2": "param_6",
                    "5": "output_buffer",
                    "9": "param6"
                },
                "uVar1": {
                    "1": "temp_byte",
                    "2": "undefined_var1",
                    "3": "byte_value",
                    "5": "var1",
                    "8": "temp1"
                },
                "uVar10": {
                    "1": "loop_temp",
                    "2": "undefined_var10",
                    "3": "temp_var10",
                    "5": "var10"
                },
                "uVar2": {
                    "1": "byte_read",
                    "2": "byte_val2",
                    "3": "temp_var2",
                    "5": "var2",
                    "8": "temp2"
                },
                "uVar3": {
                    "1": "variable3",
                    "2": "byte_val3",
                    "3": "temp_var3",
                    "5": "var3",
                    "8": "temp3"
                },
                "uVar5": {
                    "1": "value5",
                    "2": "byte_val4",
                    "3": "temp_var5",
                    "5": "var5",
                    "8": "temp5"
                },
                "uVar6": {
                    "1": "index",
                    "2": "output_index",
                    "3": "temp_var6",
                    "5": "var6",
                    "8": "temp6"
                },
                "uVar7": {
                    "1": "byte_value5",
                    "2": "undefined_var7",
                    "3": "temp_var7",
                    "5": "var7",
                    "8": "temp7"
                },
                "uVar8": {
                    "1": "byte_value6",
                    "2": "byte_val6",
                    "3": "temp_var8",
                    "5": "var8",
                    "8": "temp8"
                },
                "uVar9": {
                    "1": "undefined_var9",
                    "2": "loop_counter",
                    "3": "temp_var9",
                    "4": "counter",
                    "5": "var9"
                }
            },
            "called": [
                "putc",
                "FUN_00103890",
                "FUN_0010293a",
                "FUN_0010290e",
                "fputs",
                "FUN_00102b11"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\n\n\nvoid process_data_00102b11(undefined8 arg1,long arg2,undefined8 arg3,long arg4,uint arg5,\n                 long arg6)\n\n{\n  undefined temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  ulong temp6;\n  undefined temp7;\n  undefined temp8;\n  uint var9;\n  undefined var10;\n  ulong local_var1;\n  uint local_array1 [3];\n  uint local_var3;\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  \n  var9 = 0;\n  local_var3 = 0;\n  local_var1 = 0;\n  temp6 = 0;\n  local_array4c[0] = arg5;\n  temp2 = 0;\n  while (temp5 = (uint)temp6, var9 < DAT_00108374) {\n    temp2 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n    if (temp2 == 0xffffffff) break;\n    if (temp2 < 0x100) {\n      var10 = (undefined)temp2;\n      if (temp2 == 9) {\n        if (var9 == 0) {\n          local_var1 = (ulong)(local_var3 - 1);\n        }\nLAB_00102c09:\n        var9 = var9 + 1;\n        *(undefined *)(arg6 + temp6) = var10;\n        temp6 = (ulong)(temp5 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)temp2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (var9 == 0) {\n            local_var1 = (ulong)(local_var3 - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (var9 == 0) {\n            local_var1 = (ulong)(local_var3 - 1);\n          }\n          if ((int)temp2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)temp2 < 0xc0) goto LAB_00102b96;\n        temp3 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n        if (temp3 == 0xffffffff) {\nLAB_00102dee:\n          temp2 = 0xffffffff;\n          break;\n        }\n        temp7 = (undefined)temp3;\n        if ((temp3 & 0xc0) == 0x80) {\n          if ((temp2 & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            var9 = var9 + 1;\n            *(undefined *)(arg6 + temp6) = var10;\n            *(undefined *)(arg6 + (ulong)(temp5 + 1)) = temp7;\n            temp6 = (ulong)(temp5 + 2);\n            temp2 = temp3;\n          }\n          else {\n            temp3 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n            if (temp3 == 0xffffffff) goto LAB_00102dee;\n            temp8 = (undefined)temp3;\n            if ((temp3 & 0xc0) == 0x80) {\n              if ((temp2 & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                var9 = var9 + 1;\n                *(undefined *)(arg6 + temp6) = var10;\n                temp6 = (ulong)(temp5 + 3);\n                *(undefined *)(arg6 + (ulong)(temp5 + 1)) = temp7;\n                *(undefined *)(arg6 + (ulong)(temp5 + 2)) = temp8;\n                temp2 = temp3;\n              }\n              else {\n                temp2 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n                if (temp2 == 0xffffffff) goto LAB_00102dee;\n                temp1 = (undefined)temp2;\n                if ((temp2 & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(arg4 + (ulong)local_array4c[0]) = temp1;\n                    *(undefined *)(arg4 + (ulong)(local_array4c[0] + 1)) = temp7;\n                    *(undefined *)(arg4 + (ulong)(local_array4c[0] + 2)) = temp8;\n                    goto LAB_00102db9;\n                  }\n                  var9 = var9 + 1;\n                  *(undefined *)(arg6 + temp6) = var10;\n                  *(undefined *)(arg6 + (ulong)(temp5 + 1)) = temp7;\n                  temp6 = (ulong)(temp5 + 4);\n                  *(undefined *)(arg6 + (ulong)(temp5 + 2)) = temp8;\n                  *(undefined *)(arg6 + (ulong)(temp5 + 3)) = temp1;\n                }\n                else {\n                  *(undefined *)(arg4 + (ulong)local_array4c[0]) = temp1;\n                  *(undefined *)(arg4 + (ulong)(local_array4c[0] + 1)) = temp8;\n                  *(undefined *)(arg4 + (ulong)(local_array4c[0] + 2)) = temp7;\nLAB_00102db9:\n                  local_array4c[0] = local_array4c[0] + 3;\n                  temp6 = 0;\n                  var9 = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              temp6 = 0;\n              var9 = 0;\n              *(undefined *)(arg4 + (ulong)local_array4c[0]) = temp8;\n              *(undefined *)(arg4 + (ulong)(local_array4c[0] + 1)) = temp7;\n              local_array4c[0] = local_array4c[0] + 2;\n              temp2 = temp3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          var9 = 0;\n          *(undefined *)(arg4 + (ulong)local_array4c[0]) = temp7;\n          temp6 = 0;\n          local_array4c[0] = local_array4c[0] + 1;\n          temp2 = temp3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      var9 = 0;\n      temp6 = 0;\n    }\n  }\n  if (var9 < DAT_00108374) {\n    if (temp2 != 0xffffffff) {\nLAB_0010308d:\n      process_data_00102b11(arg1,(ulong)local_var3 + arg2,arg3,arg4,local_array4c[0],arg6);\n    }\n  }\n  else {\n    temp2 = 0;\n    FUN_00103890(arg1,local_var1 + arg2);\n    while (temp2 < temp5) {\n      temp6 = (ulong)temp2;\n      if (*(byte *)(temp6 + arg6) < 0x7f) {\n        temp2 = temp2 + 1;\n        putc((uint)*(byte *)(temp6 + arg6),standard_output);\n      }\n      else {\n        temp4 = FUN_0010293a();\n        temp2 = temp2 + temp4;\n      }\n    }\n    while( true ) {\n      temp2 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n      if (temp2 == 0xffffffff) break;\n      if (0xff < temp2) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,standard_output);\n        }\n        else {\n          fputs(DAT_00108358,standard_output);\n        }\n        goto LAB_0010308d;\n      }\n      if (temp2 == 9) {\nLAB_00102ed4:\n        putc(temp2,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)temp2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)temp2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)temp2 < 0xc0) goto LAB_00103049;\n        byte1 = (byte)temp2;\n        temp4 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n        if (temp4 == -1) break;\n        byte2 = (byte)temp4;\n        if ((byte2 & 0xc0) != 0x80) {\nLAB_00102f32:\n          temp6 = (ulong)local_array4c[0];\n          local_array4c[0] = local_array4c[0] + 1;\n          *(byte *)(arg4 + temp6) = byte2;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,standard_output);\n          }\n          else {\n            fputs(DAT_00108358,standard_output);\n          }\n          goto LAB_0010308d;\n        }\n        if ((byte1 & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        temp4 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n        if (temp4 == -1) break;\n        byte3 = (byte)temp4;\n        if ((byte3 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(arg4 + (ulong)local_array4c[0]) = byte3;\n          temp2 = local_array4c[0] + 1;\n          local_array4c[0] = local_array4c[0] + 2;\nLAB_00102ff2:\n          *(byte *)(arg4 + (ulong)temp2) = byte2;\n          goto joined_r0x00102f51;\n        }\n        if ((byte1 & 0x10) != 0) {\n          temp4 = FUN_0010290e(arg3,arg4,local_array1,&local_var3);\n          if (temp4 != -1) {\n            byte4 = (byte)temp4;\n            if (((byte4 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(arg4 + (ulong)local_array4c[0]) = byte4;\n            *(byte *)(arg4 + (ulong)(local_array4c[0] + 1)) = byte3;\n            temp2 = local_array4c[0] + 2;\n            local_array4c[0] = local_array4c[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        FUN_0010293a(&byte1);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00102b11",
            "entrypoint": "0x00102b11",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102b11": "process_data_00102b11",
                "_stdout": "standard_output",
                "iVar4": "temp4",
                "local_39": "byte4",
                "local_3a": "byte3",
                "local_3b": "byte2",
                "local_3c": "byte1",
                "local_40": "local_var3",
                "local_4c": "local_array1",
                "local_4c[0]": "local_array4c[0]",
                "local_80": "local_var1",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "uVar1": "temp1",
                "uVar10": "var10",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "uVar9": "var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030c0": {
            "additional_data": {
                "DAT_00108378": {
                    "2": "default_target"
                },
                "FUN_001030c0": {
                    "1": "print_usage_instructions",
                    "12": "print_usage",
                    "2": "print_usage_and_exit",
                    "6": "print_strings_usage"
                },
                "__c": {
                    "15": "character"
                },
                "__format": {
                    "7": "format_string",
                    "9": "format"
                },
                "__ptr": {
                    "1": "pointer",
                    "29": "target_list"
                },
                "__status": {
                    "1": "exit_status",
                    "4": "status",
                    "5": "status_code"
                },
                "__stream": {
                    "1": "file",
                    "2": "file_stream",
                    "6": "stream",
                    "7": "output_stream"
                },
                "bfd_target_list": {
                    "1": "get_supported_targets",
                    "3": "get_target_list"
                },
                "dcgettext": {
                    "1": "get_translated_message",
                    "2": "get_translated_text"
                },
                "exit": {
                    "1": "terminate",
                    "2": "terminate_program"
                },
                "fprintf": {
                    "1": "print",
                    "2": "print_formatted"
                },
                "fputc": {
                    "1": "put_char",
                    "2": "put_character",
                    "3": "write_character"
                },
                "free": {
                    "1": "release",
                    "2": "release_memory"
                },
                "fwrite": {
                    "1": "write_to_file"
                },
                "lVar1": {
                    "1": "supported_target",
                    "2": "language_code",
                    "3": "default_target",
                    "4": "supported_targets",
                    "5": "target_name",
                    "6": "target"
                },
                "param_1": {
                    "1": "file_stream",
                    "10": "file",
                    "16": "output_file",
                    "3": "file_pointer"
                },
                "param_2": {
                    "17": "exit_status",
                    "2": "status_code",
                    "5": "exit_code",
                    "7": "status"
                },
                "pcVar2": {
                    "1": "localized_text",
                    "16": "message",
                    "2": "string",
                    "3": "text",
                    "6": "localized_string"
                },
                "plVar3": {
                    "1": "target_list_iter",
                    "10": "ptr",
                    "2": "target_ptr",
                    "4": "target_pointer",
                    "5": "current_target",
                    "7": "target"
                }
            },
            "called": [
                "free",
                "fprintf",
                "bfd_target_list",
                "exit",
                "fputc",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid print_usage_001030c0(FILE *output_file,int exit_status)\n\n{\n  long target;\n  char *message;\n  long *target_list;\n  long *ptr;\n  \n  target = DAT_00108378;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(output_file,message,target);\n  message = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  target = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  ptr = target_list;\n  while( true ) {\n    target = *ptr;\n    ptr = ptr + 1;\n    if (target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_status == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(exit_status);\n}\n\n",
            "current_name": "print_usage_001030c0",
            "entrypoint": "0x001030c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030c0": "print_usage_001030c0",
                "__ptr": "target_list",
                "bfd_target_list": "get_target_list",
                "dcgettext": "get_translated_text",
                "exit": "terminate_program",
                "fprintf": "print_formatted",
                "fputc": "write_character",
                "free": "release_memory",
                "lVar1": "target",
                "param_1": "output_file",
                "param_2": "exit_status",
                "pcVar2": "message",
                "plVar3": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103240": {
            "additional_data": {
                "FUN_0010293a": {
                    "1": "get_character_length"
                },
                "FUN_00102b11": {
                    "1": "generate_unicode_stream"
                },
                "FUN_00103240": {
                    "1": "print_string",
                    "13": "print_unicode_buffer",
                    "2": "print_buffer",
                    "3": "print_unicode_string",
                    "8": "print_unicode"
                },
                "FUN_00103890": {
                    "1": "print_buffer_content"
                },
                "F_00103240": {
                    "1": "print_unicode_buffer"
                },
                "__ptr": {
                    "1": "pointer",
                    "11": "temp_ptr",
                    "3": "allocated_memory",
                    "4": "ptr"
                },
                "__s": {
                    "1": "stripped_chars",
                    "2": "str",
                    "3": "formatted_string",
                    "5": "temp_string",
                    "8": "output_string"
                },
                "_sch_istable": {
                    "1": "istable_ptr"
                },
                "_stderr": {
                    "1": "stderr_ptr"
                },
                "_stdout": {
                    "1": "stdout_ptr"
                },
                "bVar12": {
                    "1": "bool",
                    "2": "bool_var",
                    "7": "is_valid"
                },
                "bVar2": {
                    "1": "current_character",
                    "13": "current_char",
                    "2": "byte_var"
                },
                "cVar3": {
                    "1": "is_stream_flag",
                    "2": "print_flag"
                },
                "fputs": {
                    "1": "write_string_to_stream"
                },
                "free": {
                    "1": "free"
                },
                "fwrite": {
                    "1": "write_to_stream"
                },
                "iVar6": {
                    "1": "print_flag",
                    "2": "print_result",
                    "3": "print_mode"
                },
                "lVar10": {
                    "1": "copy_size"
                },
                "lVar4": {
                    "1": "input_length",
                    "2": "length",
                    "7": "buffer_length"
                },
                "local_3d": {
                    "1": "temp_undefined_array",
                    "2": "temp_array",
                    "5": "temp_buffer"
                },
                "local_50": {
                    "1": "buffer_size_array",
                    "2": "temp_buffer",
                    "3": "length_array"
                },
                "local_50 ": {
                    "1": "buffer_length_values"
                },
                "local_50[0]": {
                    "1": "buffer"
                },
                "local_54": {
                    "1": "flags",
                    "2": "buffer_size"
                },
                "local_60": {
                    "1": "buffer_copy",
                    "2": "current_char",
                    "3": "current_buffer"
                },
                "local_80": {
                    "1": "local_offset",
                    "2": "current_buffer",
                    "3": "buffer_start"
                },
                "param_1": {
                    "1": "str",
                    "2": "string",
                    "3": "buffer_name",
                    "4": "param_1",
                    "9": "message"
                },
                "param_2": {
                    "1": "unicode_buffer",
                    "13": "stream",
                    "2": "input_stream",
                    "4": "unicode_stream"
                },
                "param_3": {
                    "1": "param_length",
                    "2": "unicode_buffer",
                    "3": "buffer_length",
                    "4": "param_3",
                    "8": "buffer_size"
                },
                "param_4": {
                    "1": "input_stream_size",
                    "2": "flags",
                    "3": "length",
                    "4": "param_4"
                },
                "param_5": {
                    "1": "output_buffer",
                    "16": "buffer",
                    "5": "unicode_buffer"
                },
                "pbVar1": {
                    "1": "curr_char",
                    "16": "current_byte",
                    "2": "byte_ptr1",
                    "4": "buffer_ptr"
                },
                "put": {
                    "1": "putc"
                },
                "putc": {
                    "1": "print_character"
                },
                "uVar10": {
                    "1": "output_index",
                    "2": "ulong_var3",
                    "6": "temp_index"
                },
                "uVar11": {
                    "1": "uint_var3",
                    "2": "character_count",
                    "5": "char_count"
                },
                "uVar5": {
                    "1": "ret_value",
                    "2": "return_value",
                    "3": "byte_count",
                    "4": "char_type"
                },
                "uVar7": {
                    "1": "buffer_length",
                    "2": "current_position",
                    "5": "current_index",
                    "6": "index"
                },
                "uVar8": {
                    "1": "temp_ulong2",
                    "2": "buffer_length",
                    "7": "buffer_size"
                },
                "uVar9": {
                    "1": "string_length",
                    "2": "string_size",
                    "3": "temp_value",
                    "4": "buffer_length"
                },
                "xmalloc": {
                    "2": "allocate_memory"
                }
            },
            "called": [
                "putc",
                "FUN_00103890",
                "free",
                "FUN_0010293a",
                "fwrite",
                "FUN_001028b2",
                "fputs",
                "xmalloc",
                "FUN_00102b11"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid print_unicode_buffer_00103240(long message,long stream,long buffer_size,int param_4,byte *buffer)\n\n{\n  byte *current_byte;\n  byte current_char;\n  char print_prompt;\n  long buffer_length;\n  uint char_type;\n  int print_mode;\n  void *temp_ptr;\n  char *output_string;\n  ulong index;\n  ulong buffer_size;\n  uint buffer_length;\n  ulong temp_index;\n  uint char_count;\n  bool is_valid;\n  long buffer_start;\n  byte *current_buffer;\n  int current_length;\n  long length_array [2];\n  undefined temp_buffer [13];\n  \n  current_buffer = buffer;\n  current_length = param_4;\n  buffer = buffer_size;\n  if (DAT_00108350 == 0) {\n    output_string = (char *)xmalloc(DAT_00108374 + 1);\n    do {\n      while (buffer_length = buffer, buffer_size = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          printf(\"%s: \",message);\n        }\n        if (DAT_00108372 == '\\0') {\n          output_string[buffer_size] = '\\0';\n          fputs(output_string,stdout_ptr);\n        }\n        else {\n          FUN_0010286f(buffer_length);\n          output_string[buffer_size] = '\\0';\n          fputs(output_string,stdout_ptr);\n        }\n        while (buffer_size = FUN_00103520(stream,length_array,&current_length,&current_buffer),\n              buffer_size != 0xffffffffffffffff) {\n          if (0xff < buffer_size) {\nLAB_0010348e:\n            FUN_00103810(buffer_size,length_array,&current_length,&current_buffer);\n            break;\n          }\n          if (buffer_size == 9) {\nLAB_00102438:\n            putc((int)buffer_size,stdout_ptr);\n          }\n          else {\n            if ((*(ushort *)(&istable_ptr + buffer_size * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)buffer_size < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&istable_ptr + buffer_size * 2) & 0x40) == 0))))\n              goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)buffer_size,stdout_ptr);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,stdout_ptr);\n        }\n        else {\n          fputs(DAT_00108358,stdout_ptr);\n        }\n      }\n      index = FUN_00103520(stream,length_array,&current_length,&current_buffer);\n      buffer_length = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto LAB_001034be;\n      if (index < 0x100) {\n        if (index == 9) {\nLAB_001023f5:\n          *output_string = (char)index;\n          if (buffer_length < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&istable_ptr + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&istable_ptr + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *output_string = (char)index;\n          if (buffer_length < 2) {\n            buffer_size = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        index = FUN_00103520(stream,length_array,&current_length,&current_buffer);\n        buffer_length = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto LAB_001034be;\n        if (index < 0x100) {\n          if (index == 9) {\nLAB_001023bb:\n            output_string[1] = (char)index;\n            if (buffer_length < 3) {\n              FUN_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&istable_ptr + index * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&istable_ptr + index * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            output_string[1] = (char)index;\n            if (buffer_length < 3) {\n              buffer_size = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          index = FUN_00103520(stream,length_array,&current_length,&current_buffer);\n          buffer_length = DAT_00108374;\n          if (index == 0xffffffffffffffff) {\nLAB_001034be:\n            free(output_string);\n            return;\n          }\n          if (index < 0x100) {\n            if (index == 9) {\nLAB_00102381:\n              output_string[2] = (char)index;\n            }\n            else {\n              if ((*(ushort *)(&istable_ptr + index * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&istable_ptr + index * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              output_string[2] = (char)index;\n            }\n            if (buffer_length < 4) {\n              buffer_size = 3;\n            }\n            else {\n              temp_index = 3;\n              do {\n                index = FUN_00103520(stream,length_array,&current_length,&current_buffer);\n                if (index == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < index) goto code_r0x001034d5;\n                if (((index != 9) && ((*(ushort *)(&istable_ptr + index * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)index < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&istable_ptr + index * 2) & 0x40) == 0) {\n                    FUN_001034d5();\n                    return;\n                  }\n                }\n                buffer_length = (int)temp_index + 1;\n                buffer_size = (ulong)buffer_length;\n                is_valid = buffer_length < DAT_00108374;\n                output_string[temp_index] = (char)index;\n                temp_index = buffer_size;\n              } while (is_valid);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      FUN_00103810(index,length_array,&current_length,&current_buffer);\n    } while( true );\n  }\n  if (buffer != (byte *)0x0) {\n    buffer_size = (ulong)param_4;\n    buffer_start = buffer_size;\n    if (message != 0) {\nLAB_0010249c:\n      buffer_length = DAT_00108374;\n      print_prompt = DAT_00108373;\n      print_mode = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (buffer_size != 0) {\n          index = 0;\n          char_count = 0;\n          temp_index = 0;\n          do {\n            while( true ) {\n              current_char = buffer[temp_index];\n              if (current_char != 9) break;\nLAB_0010252e:\n              char_type = 1;\nLAB_00102533:\n              if (char_count == 0) {\n                index = temp_index;\n              }\n              char_count = char_count + 1;\n              if (buffer_length <= char_count) goto LAB_001026a9;\n              temp_index = temp_index + char_type;\n              if (buffer_size <= temp_index) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&istable_ptr + (long)(int)(uint)current_char * 2) & 0x10) != 0) {\n              if (0x7e < current_char) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < current_char) {\nLAB_0010264e:\n              if ((current_char < 0xc0) ||\n                 (char_type = FUN_001028b2(buffer + temp_index,buffer_size - temp_index), char_type == 0))\n              goto LAB_0010269a;\n              if (print_mode == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((print_prompt != '\\0') &&\n                ((*(ushort *)(&istable_ptr + (long)(int)(uint)current_char * 2) & 0x40) != 0)) &&\n               (current_char != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            char_type = 1;\nLAB_00102688:\n            temp_index = temp_index + char_type;\n            if (buffer_size <= temp_index) goto LAB_001026a1;\n            char_count = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer_00103240\\n\",1,0x2b,stderr_ptr);\n  }\n  if (stream != 0) {\n    if (message != 0) {\nLAB_0010255f:\n      buffer_length = buffer;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        temp_ptr = (void *)xmalloc(DAT_00108374 * 4 + 1);\n        FUN_00102b11(message,buffer_length,stream,temp_buffer,0,temp_ptr);\n        free(temp_ptr);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,stderr_ptr);\n  }\n  return;\nLAB_001026a1:\n  if (buffer_length != 0) {\nLAB_00102551:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  FUN_00103890(message,buffer_start + index);\n  for (; current_byte = buffer + index, index < buffer_size; index = index + buffer_length) {\n    current_char = *current_byte;\n    if (current_char == 9) {\nLAB_00102708:\n      putc((uint)current_char,stdout_ptr);\n      buffer_length = 1;\n    }\n    else {\n      if ((*(ushort *)(&istable_ptr + (long)(int)(uint)current_char * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (current_char < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&istable_ptr + (long)(int)(uint)current_char * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (current_char < 0x7f) goto LAB_00102708;\n      }\n      print_mode = FUN_001028b2(current_byte,buffer_size - index);\n      if ((print_mode == 0) || (DAT_00108350 == 5)) break;\n      buffer_length = FUN_0010293a(current_byte);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,stdout_ptr);\n  }\n  else {\n    fputs(DAT_00108358,stdout_ptr);\n  }\n  buffer_start = buffer_start + index;\n  buffer_size = buffer_size - index;\n  buffer = current_byte;\n  goto LAB_0010249c;\n}\n\n",
            "current_name": "print_unicode_buffer_00103240",
            "entrypoint": "0x00103240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103240": "print_unicode_buffer_00103240",
                "__ptr": "temp_ptr",
                "__s": "output_string",
                "_sch_istable": "istable_ptr",
                "_stderr": "stderr_ptr",
                "_stdout": "stdout_ptr",
                "bVar12": "is_valid",
                "bVar2": "current_char",
                "cVar3": "print_prompt",
                "fputs": "write_string_to_output_stream",
                "fwrite": "write_to_output_stream",
                "iVar6": "print_mode",
                "lVar4": "buffer_length",
                "local_3d": "temp_buffer",
                "local_50": "length_array",
                "local_50[0]": "buffer",
                "local_54": "current_length",
                "local_60": "current_buffer",
                "local_80": "buffer_start",
                "param_1": "message",
                "param_2": "stream",
                "param_3": "buffer_size",
                "param_5": "buffer",
                "pbVar1": "current_byte",
                "put": "putc",
                "putc": "print_character",
                "uVar10": "temp_index",
                "uVar11": "char_count",
                "uVar5": "char_type",
                "uVar7": "index",
                "uVar8": "buffer_size",
                "uVar9": "buffer_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034d5": {
            "additional_data": {
                "10": {
                    "1": "newline"
                },
                "DAT_00108358": {
                    "1": "end_string",
                    "2": "end_of_string"
                },
                "DAT_00108360": {
                    "1": "string_setting",
                    "2": "flag",
                    "3": "character_type"
                },
                "DAT_00108371": {
                    "1": "print_prompt",
                    "2": "print_message"
                },
                "DAT_00108372": {
                    "1": "is_comment_printed",
                    "2": "use_param"
                },
                "DAT_00108373": {
                    "1": "is_special_char",
                    "2": "flag2"
                },
                "DAT_00108374": {
                    "1": "threshold"
                },
                "FUNC_00103810": {
                    "1": "initialize_console"
                },
                "FUN_0010286f": {
                    "1": "some_function"
                },
                "FUN_001034d5": {
                    "1": "parse_and_print_input",
                    "16": "process_input",
                    "2": "extract_and_print_strings",
                    "3": "process_data"
                },
                "FUN_001034fa": {
                    "1": "print_output",
                    "2": "cleanup_and_return"
                },
                "FUN_00103510": {
                    "1": "process_additional_string"
                },
                "FUN_00103520": {
                    "1": "read_value",
                    "3": "get_next_char"
                },
                "FUN_00103810": {
                    "1": "execute_function",
                    "2": "print_output",
                    "3": "initialize"
                },
                "LAB_00102381": {
                    "1": "flag_check3"
                },
                "LAB_001023bb": {
                    "1": "flag_check2"
                },
                "LAB_001023f5": {
                    "1": "handle_case1"
                },
                "LAB_00102438": {
                    "1": "flag_check4"
                },
                "LAB_001034be": {
                    "1": "cleanup"
                },
                "_sch_istable": {
                    "1": "charset_table",
                    "3": "character_table"
                },
                "_stdout": {
                    "3": "stdout",
                    "5": "standard_output"
                },
                "bVar5": {
                    "1": "is_less_than_max_length",
                    "2": "condition",
                    "3": "is_valid",
                    "4": "is_less_than",
                    "7": "is_less"
                },
                "bool": {
                    "1": "bool"
                },
                "char": {
                    "2": "char"
                },
                "code_r0x001034d5": {
                    "1": "process_input_loop"
                },
                "fputs": {
                    "1": "fputs",
                    "2": "put_string"
                },
                "free": {
                    "1": "free"
                },
                "in_stack_00000010": {
                    "1": "file_prefix",
                    "2": "message",
                    "4": "file_name",
                    "5": "filename",
                    "9": "input_string"
                },
                "in_stack_00000038": {
                    "1": "another_string",
                    "2": "suffix",
                    "3": "format_string",
                    "4": "filename"
                },
                "joined_r0x001034ef": {
                    "1": "skip_execution"
                },
                "param_1": {
                    "1": "param_1"
                },
                "param_2": {
                    "1": "param_2"
                },
                "param_3": {
                    "1": "param_3"
                },
                "param_4": {
                    "1": "param_4"
                },
                "printf": {
                    "1": "print_with_format"
                },
                "putChar": {
                    "1": "put_character"
                },
                "put_character": {
                    "1": "put_character"
                },
                "putc": {
                    "1": "putc",
                    "2": "put_character"
                },
                "uVar1": {
                    "1": "token_index",
                    "2": "current_char",
                    "3": "index",
                    "5": "value1",
                    "6": "value"
                },
                "uVar2": {
                    "1": "ch",
                    "2": "next_char_code",
                    "3": "next_char",
                    "6": "value2"
                },
                "uVar3": {
                    "1": "input_string_size",
                    "2": "data_length",
                    "4": "index",
                    "5": "counter",
                    "6": "count"
                },
                "uVar4": {
                    "1": "output_index",
                    "4": "counter",
                    "5": "loop_index",
                    "7": "index"
                },
                "unaff_R14": {
                    "1": "result_array",
                    "14": "output_string",
                    "2": "input_buffer",
                    "7": "output_buffer"
                },
                "undefined8": {
                    "1": "undefined8"
                },
                "void": {
                    "2": "void"
                },
                "void FUN_00103810()": {
                    "1": "initialize"
                }
            },
            "called": [
                "FUN_00103810"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00102330"
            ],
            "code": "\n\n\nvoid process_input_001034d5(void)\n\n{\n  ulong value;\n  ulong value2;\n  uint count;\n  ulong index;\n  char *outfputs;\n  bool is_less;\n  undefined8 infputs;\n  undefined8 filename;\n  \nprocess_input_001034d5_loop:\n  FUN_00103810();\n  do {\n    value = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      value = FUN_00103520();\n      count = DAT_00108374;\n      if (value == 0xffffffffffffffff) goto cleanup;\n      if (0xff < value) goto process_input_001034d5_loop;\n      if (value == 9) {\nhandle_case1:\n        *outfputs = (char)value;\n        if (count < 2) {\n          FUN_001034fa();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&char_table + value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)value)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&char_table + value * 2) & 0x40) != 0))))\n          goto handle_case1;\n          goto process_input_001034d5_loop;\n        }\n        *outfputs = (char)value;\n        if (count < 2) {\n          value = 1;\n          goto skip_execution;\n        }\n      }\n      value = FUN_00103520();\n      count = DAT_00108374;\n      if (value == 0xffffffffffffffff) goto cleanup;\n      if (0xff < value) goto process_input_001034d5_loop;\n      if (value == 9) {\nhandle_case2:\n        outfputs[1] = (char)value;\n        if (count < 3) {\n          FUN_00103510();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&char_table + value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)value)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&char_table + value * 2) & 0x40) != 0))))\n          goto handle_case2;\n          goto process_input_001034d5_loop;\n        }\n        outfputs[1] = (char)value;\n        if (count < 3) {\n          value = 2;\n          goto skip_execution;\n        }\n      }\n      value = FUN_00103520();\n      count = DAT_00108374;\n      if (value == 0xffffffffffffffff) {\ncleanup:\n        free(outfputs);\n        return;\n      }\n      if (0xff < value) goto process_input_001034d5_loop;\n      if (value == 9) {\nhandle_case3:\n        outfputs[2] = (char)value;\n      }\n      else {\n        if ((*(ushort *)(&char_table + value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)value)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&char_table + value * 2) & 0x40) != 0))))\n          goto handle_case3;\n          goto process_input_001034d5_loop;\n        }\n        outfputs[2] = (char)value;\n      }\n      if (count < 4) {\n        value = 3;\n      }\n      else {\n        index = 3;\n        do {\n          value2 = FUN_00103520();\n          if (value2 == 0xffffffffffffffff) goto cleanup;\n          if (0xff < value2) goto process_input_001034d5_loop;\n          if (((value2 != 9) && ((*(ushort *)(&char_table + value2 * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)value2 < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto process_input_001034d5_loop;\n            if ((*(ushort *)(&char_table + value2 * 2) & 0x40) == 0) {\n              process_input_001034d5();\n              return;\n            }\n          }\n          count = (int)index + 1;\n          value = (ulong)count;\n          is_less = count < DAT_00108374;\n          outfputs[index] = (char)value2;\n          index = value;\n        } while (is_less);\n      }\n    }\nskip_execution:\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",infputs);\n    }\n    if (DAT_00108372 == '\\0') {\n      outfputs[value] = '\\0';\n      fputs(outfputs,standard_output);\n    }\n    else {\n      FUN_0010286f(filename);\n      outfputs[value] = '\\0';\n      fputs(outfputs,standard_output);\n    }\n    while (value = FUN_00103520(), value != 0xffffffffffffffff) {\n      if (0xff < value) {\nLAB_0010348e:\n        FUN_00103810();\n        break;\n      }\n      if (value == 9) {\nflag_check4:\n        putc((int)value,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&char_table + value * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)value < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&char_table + value * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto flag_check4;\n        }\n        putc((int)value,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_input_001034d5",
            "entrypoint": "0x001034d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034d5": "process_input_001034d5",
                "LAB_00102381": "handle_case3",
                "LAB_001023bb": "handle_case2",
                "LAB_001023f5": "handle_case1",
                "LAB_00102438": "flag_check4",
                "LAB_001034be": "cleanup",
                "_sch_istable": "char_table",
                "_stdout": "standard_output",
                "bVar5": "is_less",
                "code_r0x001034d5": "process_input_loop",
                "fputs": "put_string",
                "in_stack_00000010": "input_string",
                "in_stack_00000038": "filename",
                "joined_r0x001034ef": "skip_execution",
                "printf": "print_with_format",
                "putc": "put_character",
                "uVar1": "value",
                "uVar2": "value2",
                "uVar3": "count",
                "uVar4": "index",
                "unaff_R14": "output_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034fa": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "end_string",
                    "2": "end_of_line"
                },
                "DAT_00108360": {
                    "1": "is_utf8"
                },
                "DAT_00108371": {
                    "1": "print_title"
                },
                "DAT_00108372": {
                    "1": "use_separator"
                },
                "DAT_00108373": {
                    "1": "check_character"
                },
                "DAT_00108374": {
                    "1": "output_length"
                },
                "FUN_0010286f": {
                    "1": "print_special_character"
                },
                "FUN_001034fa": {
                    "1": "process_data",
                    "14": "print_formatted_string",
                    "3": "print_formatted_data",
                    "5": "print_formatted_text",
                    "6": "print_formatted_output"
                },
                "FUN_00103510": {
                    "1": "process_next_character"
                },
                "FUN_00103520": {
                    "1": "get_next_character"
                },
                "FUN_00103810": {
                    "1": "cleanup_and_exit"
                },
                "ISTABLE_FLAG": {
                    "1": "is_table_flag"
                },
                "LAB_00102381": {
                    "1": "handle_third_character"
                },
                "LAB_001023bb": {
                    "1": "handle_second_character"
                },
                "LAB_001023f5": {
                    "1": "handle_single_character"
                },
                "LAB_00102438": {
                    "1": "handle_tab_character"
                },
                "LAB_0010348e": {
                    "1": "handle_invalid_character"
                },
                "LAB_001034be": {
                    "1": "cleanup_and_exit_loop"
                },
                "LAB_001034d5": {
                    "1": "handle_special_character"
                },
                "LINE_FEED": {
                    "1": "line_feed"
                },
                "PRINTF_FLAG": {
                    "1": "print_formatting_flag"
                },
                "PUTC_FLAG": {
                    "1": "character_flag"
                },
                "STR_FLAG": {
                    "1": "is_string_flag"
                },
                "_sch_istable": {
                    "1": "character_info",
                    "4": "character_table"
                },
                "_stdout": {
                    "2": "output_stream",
                    "3": "stdout"
                },
                "bVar5": {
                    "1": "is_end_of_file",
                    "2": "is_invalid",
                    "6": "is_end"
                },
                "code_r0x001034fa": {
                    "1": "print_data_loop"
                },
                "fputs": {
                    "1": "put_string",
                    "2": "print_string"
                },
                "free": {
                    "1": "free_memory"
                },
                "getCharacter": {
                    "1": "getc"
                },
                "in_stack_00000010": {
                    "1": "title",
                    "2": "message",
                    "3": "format_string",
                    "4": "prefix",
                    "5": "label",
                    "9": "prompt"
                },
                "in_stack_00000038": {
                    "1": "additional_format_string",
                    "2": "format_string",
                    "4": "suffix"
                },
                "join...": {
                    "1": "joined..."
                },
                "joined_r0x0010341b": {
                    "1": "main_loop"
                },
                "printf": {
                    "1": "print_formatted_string",
                    "2": "print"
                },
                "putCharacter": {
                    "1": "putc"
                },
                "putc": {
                    "1": "print_character",
                    "2": "put_character"
                },
                "putchar": {
                    "1": "print_character"
                },
                "uVar1": {
                    "1": "ch",
                    "11": "character",
                    "3": "current_char",
                    "5": "char_code"
                },
                "uVar2": {
                    "1": "characters_printed",
                    "2": "counter",
                    "3": "format_string_length",
                    "4": "count",
                    "5": "index"
                },
                "uVar3": {
                    "1": "counter",
                    "12": "index",
                    "2": "output_string_length",
                    "3": "current_index"
                },
                "uVar4": {
                    "1": "loop_index",
                    "2": "counter",
                    "4": "index",
                    "5": "count"
                },
                "uVar5": {
                    "1": "is_scannable_character"
                },
                "unaff_R14": {
                    "1": "buffer",
                    "16": "output_string",
                    "4": "formatted_string",
                    "9": "output_buffer"
                },
                "unaff_R15": {
                    "1": "input_buffer",
                    "2": "format_specifier",
                    "21": "format_string"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_string_001034fa(void)\n\n{\n  ulong character;\n  uint index;\n  ulong index;\n  ulong count;\n  char *output_string;\n  undefined8 format_string;\n  bool is_end;\n  undefined8 prompt;\n  undefined8 suffix;\n  \nprintf_data_loop:\n  count = 1;\nmain_loop:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_string[count] = '\\0';\n      fputs(output_string,standard_output);\n    }\n    else {\n      FUN_0010286f(format_string);\n      output_string[count] = '\\0';\n      fputs(output_string,standard_output);\n    }\n    while (count = FUN_00103520(), count != 0xffffffffffffffff) {\n      if (0xff < count) {\nhandle_invalid_character:\n        FUN_00103810();\n        break;\n      }\n      if (count == 9) {\nhandle_tab_character:\n        putc((int)count,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + count * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)count < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + count * 2) & 0x40) == 0))))\n          goto handle_invalid_character;\n          goto handle_tab_character;\n        }\n        putc((int)count,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n    while (count = (ulong)DAT_00108374, format_string = suffix, DAT_00108374 != 0) {\n      count = FUN_00103520();\n      index = DAT_00108374;\n      if (count == 0xffffffffffffffff) goto cleanup_and_exit_loop;\n      if (count < 0x100) {\n        if (count == 9) {\nhandle_single_character:\n          *output_string = (char)count;\n          if (index < 2) {\n            print_formatted_string_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + count * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)count < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + count * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto handle_single_character;\n          }\n          *output_string = (char)count;\n          if (index < 2) goto printf_data_loop;\n        }\n        count = FUN_00103520();\n        index = DAT_00108374;\n        if (count == 0xffffffffffffffff) goto cleanup_and_exit_loop;\n        if (0xff < count) goto code_r0x001034d5;\n        if (count == 9) {\nhandle_second_character:\n          output_string[1] = (char)count;\n          if (index < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + count * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)count < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + count * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto handle_second_character;\n          }\n          output_string[1] = (char)count;\n          if (index < 3) {\n            count = 2;\n            break;\n          }\n        }\n        count = FUN_00103520();\n        index = DAT_00108374;\n        if (count == 0xffffffffffffffff) {\ncleanup_and_exit_loop:\n          free(output_string);\n          return;\n        }\n        if (0xff < count) goto code_r0x001034d5;\n        if (count == 9) {\nhandle_third_character:\n          output_string[2] = (char)count;\n        }\n        else {\n          if ((*(ushort *)(&character_table + count * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)count < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + count * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto handle_third_character;\n          }\n          output_string[2] = (char)count;\n        }\n        if (3 < index) {\n          index = 3;\n          do {\n            character = FUN_00103520();\n            if (character == 0xffffffffffffffff) goto cleanup_and_exit_loop;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                FUN_001034d5();\n                return;\n              }\n            }\n            index = (int)index + 1;\n            count = (ulong)index;\n            is_end = DAT_00108374 <= index;\n            output_string[index] = (char)character;\n            index = count;\n            if (is_end) goto main_loop;\n          } while( true );\n        }\n        count = 3;\n        break;\n      }\ncode_r0x001034d5:\n      FUN_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_string_001034fa",
            "entrypoint": "0x001034fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034fa": "print_formatted_string_001034fa",
                "LAB_00102381": "handle_third_character",
                "LAB_001023bb": "handle_second_character",
                "LAB_001023f5": "handle_single_character",
                "LAB_00102438": "handle_tab_character",
                "LAB_0010348e": "handle_invalid_character",
                "LAB_001034be": "cleanup_and_exit_loop",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "is_end",
                "code_r0x001034fa": "print_data_loop",
                "fputs": "print_string",
                "free": "release_memory",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "suffix",
                "joined_r0x0010341b": "main_loop",
                "printf": "print",
                "putc": "put_character",
                "uVar1": "character",
                "uVar2": "index",
                "uVar3": "index",
                "uVar4": "count",
                "unaff_R14": "output_string",
                "unaff_R15": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103510": {
            "additional_data": {
                "DAT_00108358": {
                    "1": "end_of_line_string"
                },
                "DAT_00108360": {
                    "1": "data_type"
                },
                "DAT_00108371": {
                    "1": "should_print_prompt"
                },
                "DAT_00108372": {
                    "1": "should_reverse_string"
                },
                "DAT_00108373": {
                    "1": "should_print_char"
                },
                "DAT_00108374": {
                    "1": "buffer_size"
                },
                "EOF": {
                    "1": "end_of_file"
                },
                "FUN_0010286f": {
                    "1": "reverse_string"
                },
                "FUN_00103510": {
                    "1": "print_output",
                    "11": "print_formatted_string",
                    "3": "print_formatted_text",
                    "7": "print_formatted_output"
                },
                "FUN_00103520": {
                    "1": "get_next_char"
                },
                "FUN_00103810": {
                    "1": "exit_program"
                },
                "LAB_00102381": {
                    "1": "handle_char3"
                },
                "LAB_001023bb": {
                    "1": "handle_char2"
                },
                "LAB_001023f5": {
                    "1": "label4"
                },
                "LAB_00102438": {
                    "1": "label2"
                },
                "LAB_0010348e": {
                    "1": "handle_invalid_char"
                },
                "LAB_001034be": {
                    "1": "cleanup_and_exit"
                },
                "LAB_001034d5": {
                    "1": "label3"
                },
                "_sch_istable": {
                    "1": "table",
                    "3": "char_table",
                    "8": "character_table"
                },
                "_stdout": {
                    "3": "standard_output",
                    "4": "output_stream"
                },
                "bVar5": {
                    "1": "is_char_table",
                    "2": "is_invalid",
                    "3": "flag",
                    "4": "is_end"
                },
                "code_r0x00103510": {
                    "1": "print_formatted_string_loop"
                },
                "fopen": {
                    "2": "open_file"
                },
                "fprintf": {
                    "1": "print_formatted_output"
                },
                "fputc": {
                    "2": "put_character"
                },
                "fputs": {
                    "1": "print_string",
                    "3": "put_string"
                },
                "free": {
                    "3": "free_memory"
                },
                "in_stack_00000010": {
                    "1": "title",
                    "2": "function_name",
                    "3": "input_string",
                    "4": "prompt_string",
                    "5": "message",
                    "6": "prompt"
                },
                "in_stack_00000038": {
                    "1": "additional_format_string",
                    "2": "suffix"
                },
                "joined_r0x0010341b": {
                    "1": "print_formatted_string_loop_joined"
                },
                "printf": {
                    "1": "print",
                    "2": "print_formatted_string"
                },
                "put": {
                    "1": "put_character"
                },
                "putc": {
                    "2": "print_char",
                    "3": "put_character"
                },
                "stdout": {
                    "1": "output_stream"
                },
                "uVar1": {
                    "1": "current_character",
                    "2": "index",
                    "5": "char_code",
                    "6": "character"
                },
                "uVar2": {
                    "1": "msg_len",
                    "2": "length",
                    "3": "loop_counter",
                    "5": "count"
                },
                "uVar3": {
                    "1": "count",
                    "17": "index",
                    "2": "output_index",
                    "3": "buffer_index"
                },
                "uVar4": {
                    "1": "loop_index",
                    "2": "output_index",
                    "3": "counter",
                    "5": "i"
                },
                "unaff_R14": {
                    "1": "output_str",
                    "3": "formatted_string",
                    "7": "buffer",
                    "8": "output_buffer"
                },
                "unaff_R15": {
                    "1": "str",
                    "14": "format_string",
                    "2": "is_special_char"
                },
                "x": {
                    "1": "current_index"
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_string_00103510(void)\n\n{\n  ulong character;\n  uint count;\n  ulong index;\n  ulong i;\n  char *output_buffer;\n  undefined8 format_string;\n  bool is_end;\n  undefined8 prompt;\n  undefined8 suffix;\n  \nloop_label2:\n  i = 2;\nloop_label1:\n  do {\n    if (DAT_00108371 != '\\0') {\n      print_formatted_string_00103510(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_buffer[i] = '\\0';\n      fputs(output_buffer,output_stream);\n    }\n    else {\n      FUN_0010286f(format_string);\n      output_buffer[i] = '\\0';\n      fputs(output_buffer,output_stream);\n    }\n    while (i = FUN_00103520(), i != 0current_indexffffffffffffffff) {\n      if (0current_indexff < i) {\nhandle_invalid_char:\n        FUN_00103810();\n        break;\n      }\n      if (i == 9) {\nhandle_tab_char:\n        putc((int)i,output_stream);\n      }\n      else {\n        if ((*(ushort *)(&character_table + i * 2) & 0current_index10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)i < 0current_index80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + i * 2) & 0current_index40) == 0))))\n          goto handle_invalid_char;\n          goto handle_tab_char;\n        }\n        put_character((int)i,output_stream);\n      }\n    }\n    if (DAT_00108358 == (char *)0current_index0) {\n      put_character(10,output_stream);\n    }\n    else {\n      fputs(DAT_00108358,output_stream);\n    }\n    while (i = (ulong)DAT_00108374, format_string = suffix, DAT_00108374 != 0) {\n      i = FUN_00103520();\n      count = DAT_00108374;\n      if (i == 0current_indexffffffffffffffff) goto cleanup_and_exit;\n      if (i < 0current_index100) {\n        if (i == 9) {\nhandle_char1:\n          *output_buffer = (char)i;\n          if (count < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + i * 2) & 0current_index10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)i < 0current_index80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + i * 2) & 0current_index40) == 0))))\n            goto code_r0current_index001034d5;\n            goto handle_char1;\n          }\n          *output_buffer = (char)i;\n          if (count < 2) {\n            i = 1;\n            break;\n          }\n        }\n        i = FUN_00103520();\n        count = DAT_00108374;\n        if (i == 0current_indexffffffffffffffff) goto cleanup_and_exit;\n        if (0current_indexff < i) goto code_r0current_index001034d5;\n        if (i == 9) {\nhandle_char2:\n          output_buffer[1] = (char)i;\n          if (count < 3) {\n            print_formatted_string_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + i * 2) & 0current_index10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)i < 0current_index80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + i * 2) & 0current_index40) == 0))))\n            goto code_r0current_index001034d5;\n            goto handle_char2;\n          }\n          output_buffer[1] = (char)i;\n          if (count < 3) goto loop_label2;\n        }\n        i = FUN_00103520();\n        count = DAT_00108374;\n        if (i == 0current_indexffffffffffffffff) {\ncleanup_and_exit:\n          free_memory(output_buffer);\n          return;\n        }\n        if (0current_indexff < i) goto code_r0current_index001034d5;\n        if (i == 9) {\nhandle_char3:\n          output_buffer[2] = (char)i;\n        }\n        else {\n          if ((*(ushort *)(&character_table + i * 2) & 0current_index10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)i < 0current_index80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + i * 2) & 0current_index40) == 0))))\n            goto code_r0current_index001034d5;\n            goto handle_char3;\n          }\n          output_buffer[2] = (char)i;\n        }\n        if (3 < count) {\n          index = 3;\n          do {\n            character = FUN_00103520();\n            if (character == 0current_indexffffffffffffffff) goto cleanup_and_exit;\n            if (0current_indexff < character) goto code_r0current_index001034d5;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0current_index10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0current_index80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0current_index001034d5;\n              if ((*(ushort *)(&character_table + character * 2) & 0current_index40) == 0) {\n                FUN_001034d5();\n                return;\n              }\n            }\n            count = (int)index + 1;\n            i = (ulong)count;\n            is_end = DAT_00108374 <= count;\n            output_buffer[index] = (char)character;\n            index = i;\n            if (is_end) goto loop_label1;\n          } while( true );\n        }\n        i = 3;\n        break;\n      }\ncode_r0current_index001034d5:\n      FUN_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_string_00103510",
            "entrypoint": "0x00103510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103510": "print_formatted_string_00103510",
                "LAB_00102381": "handle_char3",
                "LAB_001023bb": "handle_char2",
                "LAB_001023f5": "handle_char1",
                "LAB_00102438": "handle_tab_char",
                "LAB_0010348e": "handle_invalid_char",
                "LAB_001034be": "cleanup_and_exit",
                "_sch_istable": "character_table",
                "_stdout": "output_stream",
                "bVar5": "is_end",
                "code_r0x00103510": "loop_label2",
                "fputs": "put_string",
                "free": "free_memory",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "suffix",
                "joined_r0x0010341b": "loop_label1",
                "printf": "print_formatted_string",
                "put": "put_character",
                "putc": "put_character",
                "stdout": "output_stream",
                "uVar1": "character",
                "uVar2": "count",
                "uVar3": "index",
                "uVar4": "i",
                "unaff_R14": "output_buffer",
                "unaff_R15": "format_string",
                "x": "current_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103520": {
            "additional_data": {
                "DATA_0010834c": {
                    "1": "max_bytes"
                },
                "DATA_00108360": {
                    "1": "endianness"
                },
                "FUN_00102771": {
                    "1": "read_little_endian"
                },
                "FUN_00103520": {
                    "1": "read_bytes_from_stream",
                    "2": "read_and_convert_bytes",
                    "3": "read_and_convert_data",
                    "4": "decode_data"
                },
                "LAB_00103574": {
                    "1": "first_byte_label"
                },
                "LAB_001035a1": {
                    "1": "second_byte_label"
                },
                "LAB_00103610": {
                    "1": "loop_label"
                },
                "LAB_0010361f": {
                    "1": "end_label"
                },
                "LAB_001036aa": {
                    "1": "read_byte_label"
                },
                "LAB_00103717": {
                    "1": "read_flow_result_label"
                },
                "_IO_FILE": {
                    "1": "file_handle",
                    "3": "file"
                },
                "__uflow": {
                    "1": "read_byte",
                    "2": "uflow"
                },
                "bVar1": {
                    "1": "byte_temp",
                    "22": "byte_value",
                    "4": "byte_val"
                },
                "iVar6": {
                    "1": "loop_index",
                    "2": "counter",
                    "3": "count",
                    "4": "iteration",
                    "6": "loop_counter"
                },
                "iVar7": {
                    "1": "total_loops",
                    "3": "total_bytes",
                    "5": "expected_count"
                },
                "param_1": {
                    "1": "file_pointer",
                    "20": "file",
                    "7": "file_ptr"
                },
                "param_2": {
                    "1": "num_chars_read",
                    "10": "count",
                    "2": "counter",
                    "3": "num_read_bytes"
                },
                "param_3": {
                    "1": "count_ptr",
                    "11": "remaining",
                    "2": "num_bytes_remaining",
                    "3": "num_remaining_bytes",
                    "6": "remaining_bytes"
                },
                "param_4": {
                    "1": "bytes",
                    "12": "buffer",
                    "4": "buffer_ptr",
                    "7": "data"
                },
                "pbVar2": {
                    "1": "read_ptr",
                    "3": "current_byte_ptr",
                    "4": "current_byte",
                    "6": "byte_pointer",
                    "9": "byte_ptr"
                },
                "uVar3": {
                    "1": "get_byte_result",
                    "2": "read_result",
                    "5": "return_value",
                    "9": "flow_result"
                },
                "uVar4": {
                    "1": "byte_return_value",
                    "3": "temp",
                    "4": "byte_result",
                    "9": "temp_value"
                },
                "uVar5": {
                    "1": "decoded_data",
                    "2": "data",
                    "3": "output",
                    "4": "decoded_value",
                    "9": "result"
                }
            },
            "called": [
                "FUN_00102771",
                "__uflow"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\nulong decode_data_00103520(file *file,long *count,int *remaining,byte **buffer)\n\n{\n  byte byte_value;\n  byte *byte_ptr;\n  uint flow_result;\n  ulong temp_value;\n  ulong result;\n  int loop_counter;\n  int expected_count;\n  \n  expected_count = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    result = 0;\n    if (DAT_00108360 == 'L') {\n      result = FUN_00102771();\n      return result;\n    }\n    goto end_conversion;\n  }\n  if (file == (file *)0x0) {\n    result = 0;\n    loop_counter = 0;\n    do {\n      if (*remaining == 0) {\n        return 0xffffffffffffffff;\n      }\n      loop_counter = loop_counter + 1;\n      *remaining = *remaining + -1;\n      byte_ptr = *buffer;\n      *buffer = byte_ptr + 1;\n      byte_value = *byte_ptr;\n      *count = *count + 1;\n      result = result << 8 | (ulong)byte_value;\n    } while (loop_counter != expected_count);\n  }\n  else if (*remaining == 0) {\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= byte_ptr) {\n      flow_result = __uflow(file);\n      result = (ulong)(flow_result & 0xff);\n      if (flow_result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto read_byte_label;\n    }\n    file->_IO_read_ptr = (char *)(byte_ptr + 1);\n    result = (ulong)*byte_ptr;\n    *count = *count + 1;\n    loop_counter = 0;\n    if (expected_count == 1) goto loop_label;\nfirst_byte_label:\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (byte_ptr < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(byte_ptr + 1);\n      byte_value = *byte_ptr;\n      *count = *count + 1;\n      result = result << 8 | (ulong)byte_value;\n      if (DAT_0010834c < 3) goto loop_label;\nsecond_byte_label:\n      byte_ptr = (byte *)file->_IO_read_ptr;\n      if (byte_ptr < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(byte_ptr + 1);\n        byte_value = *byte_ptr;\n        *count = *count + 1;\n        result = result << 8 | (ulong)byte_value;\n        if (DAT_0010834c < 4) goto loop_label;\n      }\n      else {\n        flow_result = __uflow(file);\n        if (flow_result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        temp_value = (ulong)(flow_result & 0xff);\nread_flow_result_label:\n        *count = *count + 1;\n        result = result << 8 | temp_value;\n        if (DAT_0010834c < 4) goto loop_label;\n        loop_counter = *remaining;\n      }\n      expected_count = 3;\n      while( true ) {\n        if (loop_counter == 0) {\n          while (byte_ptr = (byte *)file->_IO_read_ptr, byte_ptr < file->_IO_read_end) {\n            expected_count = expected_count + 1;\n            file->_IO_read_ptr = (char *)(byte_ptr + 1);\n            byte_value = *byte_ptr;\n            *count = *count + 1;\n            result = result << 8 | (ulong)byte_value;\n            if (DAT_0010834c <= expected_count) goto loop_label;\n          }\n          flow_result = __uflow(file);\n          if (flow_result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          temp_value = (ulong)(flow_result & 0xff);\n        }\n        else {\n          byte_ptr = *buffer;\n          *remaining = loop_counter + -1;\n          *buffer = byte_ptr + 1;\n          temp_value = (ulong)*byte_ptr;\n        }\n        *count = *count + 1;\n        expected_count = expected_count + 1;\n        result = result << 8 | temp_value;\n        if (DAT_0010834c <= expected_count) break;\n        loop_counter = *remaining;\n      }\n    }\n    else {\n      flow_result = __uflow(file);\n      if (flow_result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      temp_value = (ulong)(flow_result & 0xff);\nLAB_001036dd:\n      *count = *count + 1;\n      result = result << 8 | temp_value;\n      if (2 < DAT_0010834c) {\n        loop_counter = *remaining;\n        if (loop_counter == 0) goto second_byte_label;\n        byte_ptr = *buffer;\n        *remaining = loop_counter + -1;\n        *buffer = byte_ptr + 1;\n        temp_value = (ulong)*byte_ptr;\n        goto read_flow_result_label;\n      }\n    }\n  }\n  else {\n    byte_ptr = *buffer;\n    *remaining = *remaining + -1;\n    *buffer = byte_ptr + 1;\n    result = (ulong)*byte_ptr;\nread_byte_label:\n    *count = *count + 1;\n    if (1 < DAT_0010834c) {\n      loop_counter = *remaining;\n      if (loop_counter == 0) goto first_byte_label;\n      byte_ptr = *buffer;\n      *remaining = loop_counter + -1;\n      *buffer = byte_ptr + 1;\n      temp_value = (ulong)*byte_ptr;\n      goto LAB_001036dd;\n    }\n  }\nloop_label:\n  if (DAT_00108360 == 'L') {\n    result = FUN_00102771();\n    return result;\n  }\nend_conversion:\n  if (DAT_00108360 == 'l') {\n    result = result >> 8 & 0xff | (result & 0xff) << 8;\n  }\n  return result;\n}\n\n",
            "current_name": "decode_data_00103520",
            "entrypoint": "0x00103520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103520": "decode_data_00103520",
                "LAB_00103574": "first_byte_label",
                "LAB_001035a1": "second_byte_label",
                "LAB_00103610": "loop_label",
                "LAB_0010361f": "end_conversion",
                "LAB_001036aa": "read_byte_label",
                "LAB_00103717": "read_flow_result_label",
                "_IO_FILE": "file",
                "__uflow": "uflow",
                "bVar1": "byte_value",
                "iVar6": "loop_counter",
                "iVar7": "expected_count",
                "param_1": "file",
                "param_2": "count",
                "param_3": "remaining",
                "param_4": "buffer",
                "pbVar2": "byte_ptr",
                "uVar3": "flow_result",
                "uVar4": "temp_value",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103810": {
            "additional_data": {
                "DAT_00108348": {
                    "1": "data1",
                    "2": "data"
                },
                "DAT_00108349": {
                    "1": "result_short"
                },
                "DAT_0010834c": {
                    "1": "data_length",
                    "2": "constant"
                },
                "DAT_00108360": {
                    "1": "flag_char",
                    "2": "data_type"
                },
                "FUN_001027e2": {
                    "1": "calculate_values",
                    "3": "calculate"
                },
                "FUN_0010282b": {
                    "1": "process_condition",
                    "5": "perform_action"
                },
                "FUN_0010282b();": {
                    "1": "reverse_data();"
                },
                "FUN_00103810": {
                    "1": "updated_function",
                    "2": "process_data",
                    "3": "calculate_result",
                    "4": "update_values",
                    "8": "update_data"
                },
                "_DAT_00108349": {
                    "1": "result_short",
                    "3": "data2"
                },
                "else": {
                    "1": "else"
                },
                "iVar1": {
                    "1": "status_value",
                    "2": "temp1",
                    "3": "flag",
                    "4": "flag_value"
                },
                "iVar3": {
                    "1": "var2",
                    "2": "temp3",
                    "3": "temp_var3"
                },
                "lVar2": {
                    "1": "dat_0010834c_value",
                    "2": "limit",
                    "3": "temp_var2",
                    "5": "constant_value",
                    "7": "constant"
                },
                "param_1": {
                    "1": "new_data",
                    "14": "input_value",
                    "2": "param",
                    "3": "input",
                    "5": "value"
                },
                "param_2": {
                    "1": "result_ptr",
                    "2": "output_param",
                    "3": "value1",
                    "4": "result1"
                },
                "param_3": {
                    "1": "output2",
                    "2": "ptr2",
                    "3": "result2",
                    "4": "flag",
                    "5": "counter"
                },
                "param_4": {
                    "1": "result2",
                    "2": "data_ptr",
                    "3": "value3",
                    "4": "result",
                    "5": "result_ptr"
                }
            },
            "called": [
                "FUN_0010282b",
                "FUN_001027e2"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_001034d5"
            ],
            "code": "\n\n\nvoid update_data_00103810(undefined8 input_value,long *result1,int *counter,long *result_ptr)\n\n{\n  int counter_value;\n  long constant;\n  int temp_var3;\n  \n  constant = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  temp_var3 = DAT_0010834c + -1;\n  *result1 = *result1 - (long)temp_var3;\n  counter_value = *counter;\n  if (counter_value == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)input_value;\n          *counter = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)input_value << 8 | (ushort)input_value >> 8;\n            DAT_00108348 = (undefined)((ulong)input_value >> 0x10);\n            *counter = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            FUN_0010282b();\n            return;\n          }\n        }\n      }\n      *result_ptr = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)input_value >> 8);\n    *counter = 1;\n    *result_ptr = (long)&DAT_00108348;\n  }\n  else {\n    *result_ptr = *result_ptr + (1 - constant);\n    *counter = temp_var3 + counter_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00103810",
            "entrypoint": "0x00103810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103810": "update_data_00103810",
                "iVar1": "counter_value",
                "iVar3": "temp_var3",
                "lVar2": "constant",
                "param_1": "input_value",
                "param_2": "result1",
                "param_3": "counter",
                "param_4": "result_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103890": {
            "additional_data": {
                "DAT_00108371": {
                    "1": "flag_1"
                },
                "DAT_00108372": {
                    "1": "flag_2"
                },
                "FUN_00102853": {
                    "1": "print_value",
                    "15": "print_data",
                    "3": "process_data",
                    "6": "print_message"
                },
                "FUN_0010286f": {
                    "1": "execute_instructions",
                    "3": "print_data",
                    "5": "reverse_data"
                },
                "FUN_00103890": {
                    "1": "print_or_return",
                    "2": "print_if_debug_enabled",
                    "3": "print_if_not_empty",
                    "4": "print_message",
                    "6": "print_if_enabled"
                },
                "param_1": {
                    "1": "format_string",
                    "2": "data",
                    "25": "message"
                },
                "param_2": {
                    "1": "value_param",
                    "2": "data_param",
                    "26": "data"
                },
                "printf": {
                    "1": "print_formatted_message",
                    "2": "print_formatted"
                }
            },
            "called": [
                "FUN_00102853"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\nvoid print_if_enabled_00103890(undefined8 message,undefined8 data)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  FUN_0010286f(data);\n  return;\n}\n\n",
            "current_name": "print_if_enabled_00103890",
            "entrypoint": "0x00103890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103890": "print_if_enabled_00103890",
                "param_1": "message",
                "param_2": "data",
                "printf": "print_formatted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001038b0": {
            "additional_data": {
                "*_stderr": {
                    "1": "error_stream"
                },
                "DAT_00108378": {
                    "1": "app_name"
                },
                "FUN_001038b0": {
                    "1": "log_error_message",
                    "2": "print_formatted_message",
                    "25": "print_error_message"
                },
                "PUT_10": {
                    "1": "new_line_character"
                },
                "__arg": {
                    "1": "variable_arguments",
                    "5": "arguments"
                },
                "__c": {
                    "10": "character"
                },
                "__format": {
                    "4": "format",
                    "6": "format_string"
                },
                "__gnuc_va_list": {
                    "1": "variable_arguments",
                    "3": "arguments"
                },
                "__gnuc_va_list param_2": {
                    "2": "variable_arguments"
                },
                "__s": {
                    "1": "standard_error",
                    "4": "stream"
                },
                "__stream": {
                    "1": "output_file",
                    "3": "stream",
                    "4": "output_stream"
                },
                "_stderr": {
                    "1": "stderr",
                    "2": "error_stream",
                    "6": "standard_error"
                },
                "_stdout": {
                    "1": "stdout",
                    "7": "standard_output"
                },
                "fflush": {
                    "1": "flush_buffer",
                    "3": "flush_stream",
                    "7": "flush_output"
                },
                "fprint": {
                    "1": "print_to_file"
                },
                "fprintf": {
                    "1": "print",
                    "2": "print_string",
                    "3": "formatted_print"
                },
                "param_1": {
                    "10": "message",
                    "19": "error_message",
                    "2": "format_string"
                },
                "param_2": {
                    "1": "additional_args",
                    "12": "arguments",
                    "2": "arg_list",
                    "9": "args"
                },
                "put": {
                    "1": "write_character_to_error_stream"
                },
                "putc": {
                    "1": "print_character",
                    "2": "write_char",
                    "5": "put_character"
                },
                "putchar": {
                    "1": "write_char"
                },
                "vfprintf": {
                    "1": "variable_formatted_print",
                    "2": "print_formatted_error_message_with_arguments"
                }
            },
            "called": [
                "putc",
                "vfprintf",
                "fprintf",
                "fflush"
            ],
            "calling": [
                "FUN_00104a60",
                "FUN_00103910"
            ],
            "code": "\n\n\nvoid print_error_message_001038b0(char *error_message,arguments arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_00108378);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001038b0",
            "entrypoint": "0x001038b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001038b0": "print_error_message_001038b0",
                "__gnuc_va_list": "arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprint": "print_to_file",
                "fprintf": "formatted_print",
                "param_1": "error_message",
                "param_2": "arguments",
                "put": "write_character_to_error_stream",
                "putc": "put_character",
                "vfprintf": "print_formatted_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103910": {
            "additional_data": {
                "FUN_001038b0": {
                    "1": "process_data",
                    "2": "process_sub_function"
                },
                "FUN_00103910": {
                    "1": "extract_data_and_call_function",
                    "19": "process_data",
                    "2": "extract_and_process_data"
                },
                "in_AL": {
                    "1": "condition_check",
                    "11": "flag",
                    "2": "is_not_null",
                    "6": "condition"
                },
                "local_18": {
                    "1": "output8",
                    "2": "input8"
                },
                "local_28": {
                    "1": "temp_input7",
                    "2": "option7"
                },
                "local_38": {
                    "1": "param_6_copy",
                    "2": "input6"
                },
                "local_48": {
                    "1": "input5_copy",
                    "2": "option5"
                },
                "local_58": {
                    "1": "extracted_input_4",
                    "2": "input4"
                },
                "local_68": {
                    "1": "data3_new",
                    "2": "input3"
                },
                "local_78": {
                    "1": "extracted_input_2",
                    "2": "input2"
                },
                "local_88": {
                    "1": "input1_copy",
                    "2": "input1"
                },
                "local_90": {
                    "1": "param_14_new",
                    "2": "param14"
                },
                "local_98": {
                    "1": "param_13_new",
                    "2": "param5_copy"
                },
                "local_a0": {
                    "1": "param_12_new",
                    "2": "param12"
                },
                "local_a8": {
                    "1": "local_2",
                    "2": "var2"
                },
                "local_b0": {
                    "1": "data1",
                    "2": "arg1"
                },
                "local_b8": {
                    "1": "temporary_var",
                    "3": "temp_buffer",
                    "4": "local_array",
                    "7": "temporary_buffer"
                },
                "local_c8": {
                    "1": "pointer2",
                    "18": "local_buffer",
                    "4": "buffer"
                },
                "local_d0": {
                    "1": "stack_pointer",
                    "2": "stack_ptr",
                    "8": "buffer_ptr",
                    "9": "buffer"
                },
                "local_d4": {
                    "1": "local_offset",
                    "2": "buffer_length",
                    "3": "offset",
                    "4": "constant",
                    "6": "length"
                },
                "local_d8": {
                    "1": "len",
                    "12": "size",
                    "4": "length",
                    "7": "buffer_size"
                },
                "param_1": {
                    "1": "param1",
                    "13": "input1",
                    "2": "data1",
                    "3": "input_param1",
                    "4": "input_1"
                },
                "param_10": {
                    "1": "pointer2",
                    "10": "param2",
                    "2": "param_10",
                    "3": "data2"
                },
                "param_11": {
                    "1": "arg11",
                    "10": "param3",
                    "2": "param_11",
                    "3": "data3"
                },
                "param_12": {
                    "1": "reverse_data3",
                    "10": "param4",
                    "2": "param12",
                    "3": "data4"
                },
                "param_13": {
                    "1": "input_param13",
                    "10": "param5",
                    "2": "param13",
                    "3": "data5"
                },
                "param_14": {
                    "1": "input_param14",
                    "10": "param6",
                    "2": "param14",
                    "3": "data6"
                },
                "param_2": {
                    "1": "b",
                    "13": "input2",
                    "2": "data2",
                    "3": "input_param2",
                    "4": "input_2"
                },
                "param_3": {
                    "1": "input_var3",
                    "13": "input3",
                    "2": "arg3",
                    "3": "input_param3",
                    "4": "input_3"
                },
                "param_4": {
                    "1": "input_option4",
                    "13": "input4",
                    "2": "data4",
                    "3": "input_param4",
                    "4": "input_4"
                },
                "param_5": {
                    "1": "value5",
                    "13": "input5",
                    "2": "arg5",
                    "3": "input_param5",
                    "4": "input_5"
                },
                "param_6": {
                    "1": "data_6",
                    "13": "input6",
                    "2": "data6",
                    "3": "input_param6",
                    "4": "input_6"
                },
                "param_7": {
                    "1": "value7",
                    "13": "input7",
                    "2": "data7",
                    "3": "input_param7",
                    "4": "input_7"
                },
                "param_8": {
                    "1": "input_var8",
                    "13": "input8",
                    "2": "data8",
                    "3": "input_param8",
                    "4": "input_8"
                },
                "param_9": {
                    "1": "param_address",
                    "10": "param1",
                    "3": "data1"
                }
            },
            "called": [
                "FUN_001038b0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid process_data_00103910(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined temporary_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  undefined4 input4;\n  undefined4 input5;\n  undefined4 input6;\n  undefined4 input7;\n  undefined4 input8;\n  \n  if (flag != '\\0') {\n    input1 = input1;\n    input2 = input2;\n    input3 = input3;\n    input4 = input4;\n    input5 = input5;\n    input6 = input6;\n    input7 = input7;\n    input8 = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = temporary_buffer;\n  length = 0x30;\n  param10 = param2;\n  param11 = param3;\n  param12 = param4;\n  param13 = param5;\n  param14 = param6;\n  FUN_001038b0(param1,&size);\n  return;\n}\n\n",
            "current_name": "process_data_00103910",
            "entrypoint": "0x00103910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103910": "process_data_00103910",
                "in_AL": "flag",
                "local_18": "input8",
                "local_28": "input7",
                "local_38": "input6",
                "local_48": "input5",
                "local_58": "input4",
                "local_68": "input3",
                "local_78": "input2",
                "local_88": "input1",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "temporary_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001039e0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001039e0",
            "entrypoint": "0x001039e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103a10": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103a10",
            "entrypoint": "0x00103a10",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103aa0": {
            "additional_data": {
                "BINDTEXTDOMAIN_DIR": {
                    "1": "dir"
                },
                "BINDTEXTDOMAIN_DOMAIN": {
                    "1": "domain"
                },
                "DAT_00108350": {
                    "1": "unicode_option"
                },
                "DAT_00108358": {
                    "1": "file_encoding"
                },
                "DAT_00108360": {
                    "1": "output_format"
                },
                "DAT_00108368": {
                    "1": "target_arg"
                },
                "DAT_00108370": {
                    "1": "is_print_offset_flag_set"
                },
                "DAT_00108371": {
                    "1": "file_name_option"
                },
                "DAT_00108372": {
                    "1": "open_for_reading"
                },
                "DAT_00108373": {
                    "1": "is_long_options_end"
                },
                "DAT_00108374": {
                    "1": "new_dat_00108374",
                    "2": "minimum_length"
                },
                "DAT_00108378": {
                    "1": "error_program_name_ptr_value",
                    "2": "program_name"
                },
                "DAT_00108379": {
                    "1": "num_non_option_args"
                },
                "EXPR_1": {
                    "1": "current_char"
                },
                "EXPR_2": {
                    "1": "is_state_quoted"
                },
                "EXPR_3": {
                    "1": "is_state_escape"
                },
                "EXPR_4": {
                    "1": "is_state_single_quoted"
                },
                "FILE *__stream": {
                    "1": "stream"
                },
                "FUN_001030c0": {
                    "1": "print_file_contents",
                    "2": "print_to_stream"
                },
                "FUN_00103240": {
                    "1": "process_string"
                },
                "FUN_00103910": {
                    "1": "print_warning"
                },
                "FUN_00103aa0": {
                    "1": "decompiled_function",
                    "2": "process_files",
                    "3": "extract_strings_from_file",
                    "7": "extract_strings"
                },
                "FUN_00104a60": {
                    "1": "print_error_message",
                    "2": "print_error"
                },
                "PPTR_DAT_001081a0": {
                    "1": "long_options"
                },
                "PTR_ERR_PROGRAM_NAME": {
                    "1": "error_program_name"
                },
                "PTR_FT_PROGRAM_NAME": {
                    "1": "program_name"
                },
                "PTR_LONG_OPTIONS": {
                    "1": "long_options"
                },
                "PTR_OPTARG": {
                    "1": "optarg"
                },
                "PTR_OPTARG_VALUE": {
                    "1": "optarg_value"
                },
                "PTR_OPTIND": {
                    "1": "optind"
                },
                "PTR_OPT_LEN": {
                    "1": "opt_len"
                },
                "PTR_SHORT_OPTIONS": {
                    "1": "short_options"
                },
                "SETLOCALE_CODE": {
                    "1": "category"
                },
                "SETLOCALE_LOCALE": {
                    "1": "locale"
                },
                "TARGET_DEFAULT": {
                    "1": "target_option_default"
                },
                "TARGET_ESCAPE": {
                    "1": "target_option_escape"
                },
                "TARGET_HEX": {
                    "1": "target_option_hex"
                },
                "TARGET_INVALID": {
                    "1": "target_option_invalid"
                },
                "TARGET_LOCALE": {
                    "1": "target_option_locale"
                },
                "TEXTDOMAIN_DIR": {
                    "1": "dir"
                },
                "__errno_location": {
                    "1": "errno_location_func"
                },
                "__ptr": {
                    "1": "ptr2",
                    "2": "str_ptr",
                    "4": "byte_pointer2",
                    "6": "byte_ptr2",
                    "8": "byte_ptr"
                },
                "__src": {
                    "1": "long_pointer2",
                    "2": "source_ptr",
                    "3": "long_ptr2",
                    "4": "long_ptr",
                    "5": "src_ptr"
                },
                "__stream": {
                    "1": "output_file",
                    "11": "file_stream",
                    "2": "file_stream1",
                    "4": "file",
                    "6": "file_ptr"
                },
                "__stream_00": {
                    "1": "in_file",
                    "2": "file_stream_00",
                    "3": "file2",
                    "4": "file_ptr2",
                    "9": "file_stream2"
                },
                "_stderr": {
                    "1": "error_stream"
                },
                "bVar2": {
                    "1": "previous_char",
                    "12": "byte_var2",
                    "2": "byte_var",
                    "3": "byte1",
                    "4": "byte_var1"
                },
                "bVar25": {
                    "1": "bool25",
                    "10": "bool_var1",
                    "2": "bool_var",
                    "3": "bool1",
                    "4": "bool_var25"
                },
                "bVar27": {
                    "1": "bool_val2",
                    "11": "bool_var2",
                    "3": "bool2",
                    "4": "bool_var27"
                },
                "bVar28": {
                    "1": "bool_val3",
                    "11": "bool_var3",
                    "3": "bool3",
                    "4": "bool_var28"
                },
                "bVar3": {
                    "1": "current_char",
                    "12": "byte_var3",
                    "2": "byte_var",
                    "3": "byte2",
                    "4": "byte_var2"
                },
                "bfd_check_format": {
                    "1": "bfd_check_format_func",
                    "2": "check_bfd_format"
                },
                "bfd_close": {
                    "1": "bfd_close_file",
                    "2": "close_bfd"
                },
                "bfd_get_error": {
                    "1": "bfd_get_err",
                    "2": "get_bfd_error"
                },
                "bfd_init": {
                    "1": "initialize_bfd"
                },
                "bfd_malloc_and_get_section": {
                    "1": "malloc_and_get_section"
                },
                "bfd_openr": {
                    "1": "open_bfdr"
                },
                "bfd_set_default_target": {
                    "1": "bfd_set_default_target_func"
                },
                "bfd_set_error_program_name": {
                    "1": "bfd_set_error_program_name_func",
                    "2": "set_bfd_error_program_name"
                },
                "bindtextdomain": {
                    "1": "bindtextdomain_func",
                    "5": "bind_text_domain"
                },
                "byte *__ptr": {
                    "1": "output_string"
                },
                "cVar4": {
                    "1": "char_val",
                    "10": "char_var4",
                    "2": "char_var1",
                    "3": "char1",
                    "6": "char_var"
                },
                "dcgettext": {
                    "1": "gettext"
                },
                "exit": {
                    "1": "exit_func"
                },
                "extractStrings": {
                    "1": "extract_strings_improved"
                },
                "fclose": {
                    "1": "close_file"
                },
                "ferror": {
                    "1": "check_file_error"
                },
                "fflush": {
                    "1": "flush_stream"
                },
                "fopen": {
                    "1": "fopen_func",
                    "2": "open_file"
                },
                "fprintf": {
                    "1": "print_to_file"
                },
                "fread": {
                    "1": "read_from_file"
                },
                "free": {
                    "1": "free_func",
                    "3": "free_memory"
                },
                "fseek": {
                    "1": "fseek_func",
                    "2": "set_file_position"
                },
                "ftell": {
                    "2": "get_file_position"
                },
                "getopt_long": {
                    "1": "get_opt_long",
                    "2": "get_long_option"
                },
                "iVar5": {
                    "1": "index_var1",
                    "10": "index",
                    "3": "index_var",
                    "4": "int_var"
                },
                "iVar7": {
                    "1": "loop_index",
                    "2": "loop_var",
                    "3": "index",
                    "4": "int_var7"
                },
                "lVar11": {
                    "1": "new_l_var11",
                    "2": "long1",
                    "5": "long_var11",
                    "6": "long_var1"
                },
                "lVar22": {
                    "1": "index",
                    "2": "long2",
                    "6": "long_var22"
                },
                "local_110": {
                    "1": "local_long_110",
                    "2": "long3",
                    "4": "long_var3"
                },
                "local_118": {
                    "1": "size_t_var11",
                    "2": "local_var4",
                    "3": "size",
                    "4": "size_var3"
                },
                "local_120": {
                    "1": "ulong_var14",
                    "2": "ulong_var120",
                    "3": "ulong_var2"
                },
                "local_128": {
                    "1": "buffer",
                    "2": "byte_ptr4"
                },
                "local_138": {
                    "1": "file_ptr_array2",
                    "3": "local_var1"
                },
                "local_140": {
                    "1": "long_pointer5",
                    "2": "long_ptr6"
                },
                "local_c8": {
                    "1": "local_stat_c8",
                    "2": "file_stat",
                    "3": "stat_var",
                    "4": "stat_struct"
                },
                "local_d0": {
                    "1": "ptr2",
                    "2": "ptr_void1",
                    "3": "local_ptr",
                    "4": "void_ptr"
                },
                "local_d8": {
                    "1": "ptr_char2",
                    "2": "char_ptr1",
                    "3": "char_ptr3"
                },
                "long *__src": {
                    "1": "source"
                },
                "long *plVar12": {
                    "1": "argv"
                },
                "long lVar11": {
                    "1": "file_size"
                },
                "memcpy": {
                    "1": "memcpy_func",
                    "2": "copy_memory"
                },
                "memmove": {
                    "1": "memmove_func"
                },
                "new_bufferPtr": {
                    "1": "new_buffer_ptr_3"
                },
                "new_unsignedVar14": {
                    "1": "new_unsigned_var14_3"
                },
                "new_unsignedVar14_2": {
                    "1": "new_unsigned_var14_4"
                },
                "new_unsignedVar17": {
                    "1": "new_unsigned_var17_2"
                },
                "param_1": {
                    "1": "input_param",
                    "29": "argc"
                },
                "param_2": {
                    "1": "file_paths",
                    "29": "argv"
                },
                "pbVar1": {
                    "1": "current_char",
                    "2": "ptr",
                    "3": "ptr1",
                    "5": "byte_pointer1",
                    "7": "byte_ptr1"
                },
                "pbVar19": {
                    "1": "ptr2",
                    "2": "byte_ptr",
                    "3": "byte_pointer3",
                    "4": "byte_ptr3"
                },
                "pbVar23": {
                    "1": "char_ptr2",
                    "2": "ptr_byte3",
                    "3": "byte_ptr4"
                },
                "pcVar17": {
                    "1": "pointer_char1"
                },
                "pcVar20": {
                    "1": "char_ptr20",
                    "2": "str",
                    "4": "char_ptr"
                },
                "pcVar24": {
                    "1": "ptr_char2",
                    "2": "str2",
                    "4": "char_ptr2"
                },
                "perror": {
                    "1": "print_error_msg",
                    "2": "print_error"
                },
                "piVar15": {
                    "1": "pointer_int1",
                    "10": "int_ptr",
                    "2": "int_pointer",
                    "4": "int_ptr15"
                },
                "plVar12": {
                    "1": "pointer1",
                    "2": "long_ptr1",
                    "6": "param_ptr"
                },
                "plVar16": {
                    "1": "current_file",
                    "2": "param_2",
                    "3": "param_ptr2"
                },
                "plVar18": {
                    "1": "param_ptr_3",
                    "2": "long_ptr4",
                    "3": "param_ptr3"
                },
                "ppuVar21": {
                    "1": "pointer_pointer",
                    "2": "undefined_ptr"
                },
                "printf": {
                    "1": "print_to_console"
                },
                "puVar26": {
                    "1": "param2_ptr",
                    "5": "undefined8_ptr"
                },
                "realloc": {
                    "1": "reallocate_memory"
                },
                "sVar10": {
                    "1": "length2",
                    "2": "read_size",
                    "4": "size2",
                    "5": "size_var10",
                    "8": "size_var2"
                },
                "sVar9": {
                    "1": "string_size1",
                    "2": "file_size",
                    "4": "size1",
                    "5": "size_var9",
                    "7": "size_var1"
                },
                "setlocale": {
                    "1": "setlocale_func",
                    "5": "set_locale"
                },
                "size_t": {
                    "1": "size"
                },
                "size_t sVar10": {
                    "1": "bytes_read"
                },
                "size_t sVar9": {
                    "1": "file_size"
                },
                "stat": {
                    "1": "stat_func"
                },
                "stat local_c8": {
                    "1": "file_info"
                },
                "strcmp": {
                    "1": "strcmp_func",
                    "3": "compare_strings"
                },
                "strcpy": {
                    "1": "copy_string"
                },
                "strerror": {
                    "2": "get_error_string"
                },
                "strlen": {
                    "1": "strlen_func"
                },
                "strtoul": {
                    "1": "parse_unsigned_long"
                },
                "textdomain": {
                    "1": "textdomain_func",
                    "2": "set_text_domain"
                },
                "uVar13": {
                    "1": "temp_var",
                    "11": "ulong_var",
                    "2": "ulong1",
                    "4": "ulong_var13"
                },
                "uVar14": {
                    "1": "uint64_var1",
                    "2": "undefined8_var1",
                    "4": "undefined8_var"
                },
                "uVar17": {
                    "1": "undefined_var3",
                    "2": "unsigned_var17",
                    "3": "undefined8_var2"
                },
                "uVar6": {
                    "1": "counter",
                    "2": "unsigned_var6",
                    "3": "count",
                    "4": "uint_var6",
                    "5": "uint_var"
                },
                "uVar8": {
                    "1": "result1",
                    "3": "error",
                    "4": "uint_var2"
                },
                "unaff_R12": {
                    "1": "ptr2",
                    "2": "unaff_r12"
                },
                "xexit": {
                    "1": "exit_program"
                },
                "xfd_errmsg": {
                    "1": "get_bfd_error_message"
                },
                "xmalloc": {
                    "1": "allocate_memory"
                },
                "xmalloc_set_program_name": {
                    "1": "set_program_name2",
                    "3": "set_program_name"
                },
                "xrealloc": {
                    "1": "realocate_memory",
                    "2": "reallocate_memory"
                },
                "xstrdup": {
                    "1": "xstrdup_func",
                    "2": "duplicate_string"
                }
            },
            "called": [
                "strerror",
                "ftell",
                "ferror",
                "FUN_00103910",
                "xstrdup",
                "bfd_set_error_program_name",
                "bfd_init",
                "strcmp",
                "bfd_close",
                "xrealloc",
                "getopt_long",
                "bfd_get_error",
                "xmalloc_set_program_name",
                "bfd_set_default_target",
                "setlocale",
                "bfd_malloc_and_get_section",
                "bfd_errmsg",
                "strtoul",
                "bfd_check_format",
                "xexit",
                "strlen",
                "exit",
                "fseek",
                "fopen",
                "free",
                "FUN_00104a60",
                "__errno_location",
                "stat",
                "FUN_001030c0",
                "memmove",
                "memcpy",
                "FUN_00103240",
                "fclose",
                "bindtextdomain",
                "fprintf",
                "printf",
                "textdomain",
                "fflush",
                "xmalloc",
                "bfd_openr",
                "fread",
                "dcgettext",
                "perror"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\n\nFILE * extract_strings_00103aa0(int argc,long *argv)\n\n{\n  byte *byte_ptr1;\n  byte byte_var2;\n  byte byte_var3;\n  char char_var4;\n  int index;\n  uint uint_var;\n  int int_var7;\n  undefined4 uint_var2;\n  FILE *file_stream;\n  size size_var1;\n  size size_var2;\n  byte *byte_ptr;\n  long long_var1;\n  long *param_ptr;\n  ulong ulong_var;\n  long *src_ptr;\n  undefined8 undefined8_var;\n  FILE *file_stream2;\n  int *int_ptr;\n  long *param_ptr2;\n  undefined8 undefined8_var2;\n  long *param_ptr3;\n  byte *byte_ptr2;\n  char *char_ptr;\n  undefined **undefined_ptr_ptr;\n  long long_var2;\n  byte *byte_ptr3;\n  char *char_ptr2;\n  bool bool_var1;\n  long *long_ptr5;\n  undefined8 *undefined8_ptr;\n  bool bool_var2;\n  bool bool_var3;\n  long *long_ptr6;\n  undefined8 undefined8_var3;\n  undefined8 byte_ptr4;\n  ulong ulong_var2;\n  size size_var3;\n  long long_var3;\n  char *char_ptr3;\n  void *void_ptr;\n  stat_func stat_struct;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00108378 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00108378);\n  param_ptr2 = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  ulong_var2 = 2000;\n  long_ptr5 = (long *)0x1;\n  undefined8_var3 = (long *)0x0;\n  param_ptr = argv;\n  do {\n    int_var7 = (int)long_ptr5;\n    undefined_ptr_ptr = (undefined **)(long)int_var7;\n    long_ptr6 = (long *)((long)undefined_ptr_ptr * 8);\n    param_ptr2 = param_ptr;\n    if (*(char *)param_ptr[(long)undefined_ptr_ptr] == '@') {\n      uint_var = (int)ulong_var2 - 1;\n      ulong_var2 = (ulong)uint_var;\n      if (uint_var == 0) {\n        long_var1 = *param_ptr;\n        char_ptr = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      char_ptr = (char *)param_ptr[(long)undefined_ptr_ptr] + 1;\n      index = stat_func(char_ptr,&stat_struct);\n      if (-1 < index) {\n        if ((stat_struct.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var1 = *param_ptr;\n            char_ptr = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(error_stream,char_ptr,long_var1);\n            xexit_func(1);\n          } while( true );\n        }\n        file_stream = fopen(char_ptr,\"r\");\n        if (file_stream != (FILE *)0x0) {\n          index = fseek(file_stream,0,2);\n          if (((index != -1) && (size_var1 = ftell(file_stream), size_var1 != 0xffffffffffffffff)) &&\n             (index = fseek(file_stream,0,0), index != -1)) {\n            byte_ptr4 = (byte *)xmalloc(size_var1 + 1);\n            size_var2 = fread(byte_ptr4,1,size_var1,file_stream);\n            if ((size_var1 == size_var2) || (index = ferror(file_stream), index == 0)) {\n              byte_ptr4[size_var2] = 0;\n              byte_var3 = *byte_ptr4;\n              byte_ptr2 = byte_ptr4;\n              while( true ) {\n                if (byte_var3 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)byte_var3 * 2] & 0x40) == 0) break;\n                byte_var3 = byte_ptr2[1];\n                byte_ptr2 = byte_ptr2 + 1;\n              }\n              size_var1 = strlen_func((char *)byte_ptr4);\n              byte_ptr = (byte *)xmalloc(size_var1 + 1);\n              src_ptr = (long *)0x0;\n              index = 0;\n              long_var3 = 0;\n              bool_var1 = false;\n              bool_var3 = false;\n              bool_var2 = false;\n              byte_ptr2 = byte_ptr4;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) {\n                  byte_ptr2 = byte_ptr2 + 1;\n                }\n                if ((index == 0) || (index + -1 <= (int)long_var3)) {\n                  if (src_ptr == (long *)0x0) {\n                    index = 8;\n                    src_ptr = (long *)xmalloc(0x40);\n                    param_ptr3 = src_ptr + long_var3;\n                    *param_ptr3 = 0;\n                  }\n                  else {\n                    index = index * 2;\n                    src_ptr = (long *)xrealloc(src_ptr,(long)index << 3);\n                    param_ptr3 = src_ptr + long_var3;\n                    *param_ptr3 = 0;\n                  }\n                }\n                else {\n                  param_ptr3 = src_ptr + long_var3;\n                }\n                byte_var3 = *byte_ptr2;\n                byte_ptr3 = byte_ptr;\n                while (byte_var3 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var3 * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                      bool_var2 = false;\n                      bool_var1 = false;\n                      bool_var3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!bool_var2) break;\n                    byte_ptr2 = byte_ptr2 + 1;\n                    *byte_ptr3 = byte_var3;\n                    byte_ptr3 = byte_ptr3 + 1;\n                    bool_var2 = false;\n                    byte_var3 = *byte_ptr2;\n                    if (byte_var3 == 0) goto LAB_00103d4f;\n                  }\n                  if (byte_var3 == 0x5c) {\n                    bool_var2 = true;\n                  }\n                  else if (bool_var3) {\n                    if (byte_var3 == 0x27) {\n                      bool_var3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *byte_ptr3 = byte_var3;\n                      byte_ptr3 = byte_ptr3 + 1;\n                    }\n                  }\n                  else if (bool_var1) {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = false;\n                  }\n                  else if (byte_var3 == 0x27) {\n                    bool_var3 = true;\n                  }\n                  else {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = true;\n                  }\n                  byte_ptr1 = byte_ptr2 + 1;\n                  byte_ptr2 = byte_ptr2 + 1;\n                  byte_var3 = *byte_ptr1;\n                }\nLAB_00103d4f:\n                *byte_ptr3 = 0;\n                long_var1 = xstrdup(byte_ptr);\n                *param_ptr3 = long_var1;\n                src_ptr[long_var3 + 1] = 0;\n                byte_var3 = *byte_ptr2;\n                byte_var2 = (&_sch_istable)[(ulong)byte_var3 * 2];\n                while ((byte_var2 & 0x40) != 0) {\n                  byte_var3 = byte_ptr2[1];\n                  byte_ptr2 = byte_ptr2 + 1;\n                  byte_var2 = (&_sch_istable)[(ulong)byte_var3 * 2];\n                }\n                long_var3 = long_var3 + 1;\n                if (byte_var3 == 0) {\n                  free_memory(byte_ptr);\n                  if (param_ptr == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free_memory(byte_ptr4);\n          }\n          fclose(file_stream);\n        }\n      }\n    }\n    if (argc <= int_var7 + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      file_stream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      undefined_ptr_ptr = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      char_ptr = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        int_var7 = (int)long_ptr5;\n        index = getopt_long(argc,param_ptr2,char_ptr);\n        if (index == -1) break;\n        param_ptr = (long *)char_ptr;\n        switch(index) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          FUN_001030c0(_stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          long_ptr5 = (long *)&optarg;\n          DAT_00108368 = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          long_ptr5 = _optarg;\n          int_var7 = strcmp((char *)_optarg,\"default\");\n          if ((int_var7 == 0) || (int_var7 = strcmp((char *)long_ptr5,\"d\"), int_var7 == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            int_var7 = strcmp((char *)long_ptr5,\"locale\");\n            if ((int_var7 == 0) || (int_var7 = strcmp((char *)long_ptr5,\"l\"), int_var7 == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              int_var7 = strcmp((char *)long_ptr5,\"escape\");\n              if ((int_var7 == 0) || (int_var7 = strcmp((char *)long_ptr5,\"e\"), int_var7 == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                int_var7 = strcmp((char *)long_ptr5,\"invalid\");\n                if ((int_var7 == 0) || (int_var7 = strcmp((char *)long_ptr5,\"i\"), int_var7 == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  int_var7 = strcmp((char *)long_ptr5,\"hex\");\n                  if ((int_var7 == 0) || (int_var7 = strcmp((char *)long_ptr5,\"x\"), int_var7 == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    int_var7 = strcmp((char *)long_ptr5,\"highlight\");\n                    if ((int_var7 != 0) && (int_var7 = strcmp((char *)long_ptr5,\"h\"), int_var7 != 0)) {\n                      undefined8_var = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      FUN_00104a60(undefined8_var);\n                      FUN_001038b0();\n                      xexit_func(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_baddata();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          char_ptr = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(char_ptr);\n          char_ptr = (char *)dcgettext(0,\n                                      \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(char_ptr);\n                    \n          exit_func(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          long_ptr5 = (long *)&optarg;\n          int_var7 = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)_optarg;\n          index = getopt_long(argc,param_ptr2,char_ptr);\n          if (index == -1) goto LAB_0010407f;\n          switch(index) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)_optarg;\n            index = getopt_long(argc,param_ptr2,char_ptr);\n            if (index == -1) goto LAB_0010407f;\n            switch(index) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          file_stream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          long_ptr5 = (long *)&optarg;\n          ulong_var = strtoul_func((char *)_optarg,&char_ptr3,0);\n          DAT_00108374 = (int)ulong_var;\n          if ((char_ptr3 != (char *)0x0) && (param_ptr = _optarg, *char_ptr3 != '\\0')) {\nLAB_001042e6:\n            undefined8_var = dcgettext(0,\"invalid integer argument %s\",5);\n            FUN_00104a60(undefined8_var,param_ptr);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          long_ptr5 = (long *)&optarg;\n          DAT_00108358 = _optarg;\n          char_ptr = (char *)param_ptr;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          long_ptr5 = (long *)&optarg;\n          int_var7 = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          char_var4 = *(char *)_optarg;\n          if (char_var4 == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (char_var4 == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (char_var4 != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)file_stream != 0) {\nLAB_001044f5:\n        char_ptr = (char *)(param_ptr2 + (long)(int)file_stream + -1);\n        ulong_var = strtoul_func((char *)(*(long *)char_ptr + 1),&char_ptr3,0);\n        DAT_00108374 = (int)ulong_var;\n        if ((char_ptr3 != (char *)0x0) && (*char_ptr3 != '\\0')) {\n          param_ptr = (long *)(*(long *)char_ptr + 1);\n          goto LAB_001042e6;\n        }\n      }\n      int_var7 = (int)long_ptr5;\n      if (DAT_00108374 == 0) {\n        undefined8_var = dcgettext(0,\"invalid minimum string length %d\",5);\n        FUN_00104a60(undefined8_var,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      ulong_var = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((ulong_var & 0x2000000020000) == 0) {\n        if ((ulong_var & 0x401) == 0) {\n          if ((ulong_var & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      int_var7 = bfd_init_func();\n      if (int_var7 == 0x118) {\n        char_ptr = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target_func(\"x86_64-pc-linux-gnu\");\n        if ((char)uint_var != '\\0') {\n          undefined_ptr_ptr = (undefined **)&optind;\n          if (argc <= (int)_optind) {\n            DAT_00108370 = 0;\n            FUN_00103240(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          ulong_var = 0;\n          file_stream = (FILE *)0x0;\n          param_ptr = (long *)(ulong)uint_var;\n          uint_var = _optind;\n          long_ptr6 = param_ptr2;\n          goto LAB_001043b8;\n        }\n        uint_var2 = bfd_get_error();\n        undefined_ptr_ptr = (undefined **)bfd_errmsg(uint_var2);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        FUN_00104a60(undefined8_var,\"x86_64-pc-linux-gnu\",undefined_ptr_ptr);\n      }\n      undefined8_var = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      FUN_00104a60(undefined8_var);\n      param_ptr = param_ptr2;\nLAB_0010462b:\n      char_ptr2 = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      undefined8_var = dcgettext(0,char_ptr2,5);\n      FUN_00103910(undefined8_var,char_ptr);\n      uint_var = 0;\n      do {\n        while( true ) {\n          ulong_var = (ulong)param_ptr & 0xffffffff;\n          file_stream = (FILE *)(ulong)((uint)file_stream | (uint_var ^ 1) & 0xff);\n          while( true ) {\n            int_var7 = (int)ulong_var;\n            uint_var = *(uint *)undefined_ptr_ptr + 1;\n            *(uint *)undefined_ptr_ptr = uint_var;\n            if (argc <= (int)uint_var) {\n              param_ptr2 = param_ptr;\n              if ((char)ulong_var != '\\0') {\n                return file_stream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            char_ptr = (char *)long_ptr6[(int)uint_var];\n            int_var7 = strcmp(char_ptr,\"-\");\n            if (int_var7 != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          int_var7 = stat_func(char_ptr,&stat_struct);\n          if (int_var7 < 0) break;\n          if ((stat_struct.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (param_ptr2 = (long *)bfd_openr(char_ptr,DAT_00108368), param_ptr2 == (long *)0x0)) {\nLAB_00104416:\n            file_stream2 = fopen(char_ptr,\"r\");\n            if (file_stream2 != (FILE *)0x0) {\n              FUN_00103240(char_ptr,file_stream2,0,0,0);\n              int_var7 = fclose(file_stream2);\n              if (int_var7 != -1) goto LAB_00104454;\n            }\n            fprintf(error_stream,\"%s: \",DAT_00108378);\n            perror(char_ptr);\n            uint_var = 0;\n          }\n          else {\n            char_var4 = bfd_check_format(param_ptr2,1);\n            if (char_var4 == '\\0') {\n              bfd_close();\n              undefined8_var3 = param_ptr2;\n              goto LAB_00104416;\n            }\n            undefined8_ptr = (undefined8 *)param_ptr2[0x12];\n            undefined8_var3 = (long *)((ulong)param_ptr2 & 0xffffffffffffff00);\n            byte_ptr4 = (byte *)CONCAT44(byte_ptr4._4_4_,argc);\n            for (; undefined8_ptr != (undefined8 *)0x0; undefined8_ptr = (undefined8 *)undefined8_ptr[1]) {\n              char_var4 = (char)undefined8_var3;\n              if (((*(uint *)((long)undefined8_ptr + 0x24) & 0x103) == 0x103) &&\n                 (ulong_var2 = undefined8_ptr[8], ulong_var2 != 0)) {\n                char_var4 = bfd_malloc_and_get_section(param_ptr2,undefined8_ptr,&void_ptr);\n                if (char_var4 == '\\0') {\n                  uint_var2 = bfd_get_error();\n                  ulong_var2 = bfd_errmsg(uint_var2);\n                  undefined8_var = *undefined8_ptr;\n                  undefined8_var2 = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  FUN_00103910(undefined8_var2,char_ptr,undefined8_var);\n                  char_var4 = (char)undefined8_var3;\n                }\n                else {\n                  FUN_00103240(char_ptr,0,undefined8_ptr[0x10],ulong_var2,void_ptr);\n                  free_memory(void_ptr);\n                }\n              }\n              undefined8_var3 = (long *)CONCAT71(undefined8_var3._1_7_,char_var4);\n            }\n            param_ptr = (long *)((ulong)param_ptr & 0xff);\n            char_var4 = bfd_close(param_ptr2);\n            if (char_var4 == '\\0') {\n              int_var7 = bfd_get_error();\n              if (int_var7 == 0) {\n                undefined8_var = dcgettext(0,\"cause of error unknown\",5);\n                fflush(_stdout);\n              }\n              else {\n                undefined8_var = bfd_errmsg();\n                fflush(_stdout);\n              }\n              fprintf(error_stream,\"%s: %s: %s\\n\",DAT_00108378,char_ptr,undefined8_var);\n              goto LAB_00104416;\n            }\n            bool_var3 = (char)undefined8_var3 == '\\0';\n            if (bool_var3) goto LAB_00104416;\nLAB_00104454:\n            uint_var = (uint)param_ptr;\n          }\n        }\n        int_ptr = __errno_location();\n        char_ptr2 = \"\\'%s\\': No such file\";\n        if (*int_ptr == 2) goto LAB_00104637;\n        char_ptr2 = strerror(*int_ptr);\n        undefined8_var = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00103910(undefined8_var,char_ptr,char_ptr2);\n        uint_var = 0;\n      } while( true );\n    }\n    uint_var = int_var7 + 1;\n    undefined8_var3 = long_ptr5;\nLAB_00103eac:\n    long_ptr5 = (long *)(ulong)uint_var;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  FUN_001030c0(error_stream);\nLAB_001040fd:\n  src_ptr = (long *)xmalloc(8);\n  *src_ptr = 0;\n  if (param_ptr2 == argv) {\nLAB_0010411e:\n    if (*param_ptr2 == 0) {\n      index = 0;\n    }\n    else {\n      long_var1 = 1;\n      do {\n        index = (int)long_var1;\n        param_ptr = param_ptr2 + long_var1;\n        long_var1 = long_var1 + 1;\n      } while (*param_ptr != 0);\n    }\n    long_var2 = 0;\n    param_ptr = (long *)xmalloc((long)(index + 1) << 3);\n    long_var1 = *param_ptr2;\n    while (long_var1 != 0) {\n      undefined8_var = xstrdup();\n      *(undefined8 *)((long)param_ptr + long_var2) = undefined8_var;\n      long_var2 = long_var2 + 8;\n      long_var1 = *(long *)((long)param_ptr2 + long_var2);\n    }\n    *(undefined8 *)((long)param_ptr + long_var2) = 0;\nLAB_00103dea:\n    param_ptr2 = param_ptr;\n    if (*src_ptr != 0) {\n      long_var1 = 0;\n      do {\n        long_var1 = long_var1 + 1;\n      } while (src_ptr[long_var1] != 0);\n      size_var3 = long_var1 * 8;\n      index = argc;\n      goto LAB_00103e18;\n    }\n  }\n  long_var1 = 0;\n  size_var3 = 0;\n  index = argc;\nLAB_00103e18:\n  free_memory((void *)param_ptr2[(long)undefined_ptr_ptr]);\n  param_ptr = (long *)rexmalloc(param_ptr2,(long_var1 + 1 + (long)index) * 8);\n  argc = index + -1 + (int)long_var1;\n  memmove_func(param_ptr + (long)((long)undefined_ptr_ptr + long_var1),(void *)((long)(param_ptr + 1) + (long)long_ptr6),\n          (long)(index - int_var7) << 3);\n  memcpy((void *)((long)param_ptr + (long)long_ptr6),src_ptr,size_var3);\n  free_memory(src_ptr);\n  free_memory(byte_ptr4);\n  fclose(file_stream);\n  uint_var = (int)undefined8_var3 + 1;\n  long_ptr5 = long_ptr6;\n  param_ptr2 = param_ptr;\n  long_ptr6 = src_ptr;\n  if ((int)uint_var < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "current_name": "extract_strings_00103aa0",
            "entrypoint": "0x00103aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103aa0": "extract_strings_00103aa0",
                "__errno_location": "errno_location_func",
                "__ptr": "byte_ptr",
                "__src": "src_ptr",
                "__stream": "file_stream",
                "__stream_00": "file_stream2",
                "_stderr": "error_stream",
                "bVar2": "byte_var2",
                "bVar25": "bool_var1",
                "bVar27": "bool_var2",
                "bVar28": "bool_var3",
                "bVar3": "byte_var3",
                "bfd_check_format": "check_bfd_format",
                "bfd_close": "close_bfd",
                "bfd_get_error": "get_bfd_error",
                "bfd_init": "bfd_init_func",
                "bfd_malloc_and_get_section": "malloc_and_get_section",
                "bfd_openr": "open_bfdr",
                "bfd_set_default_target": "bfd_set_default_target_func",
                "bfd_set_error_program_name": "set_bfd_error_program_name",
                "bindtextdomain": "bind_text_domain",
                "cVar4": "char_var4",
                "dcgettext": "get_localized_text",
                "exit": "exit_func",
                "fclose": "close_file",
                "ferror": "is_file_error",
                "fflush": "flush_stream",
                "fopen": "open_file",
                "fprintf": "print_to_file_stream",
                "fread": "read_from_file",
                "free": "free_memory",
                "fseek": "set_file_position",
                "ftell": "get_file_position",
                "getopt_long": "get_long_option",
                "iVar5": "index",
                "iVar7": "int_var7",
                "lVar11": "long_var1",
                "lVar22": "long_var2",
                "local_110": "long_var3",
                "local_118": "size_var3",
                "local_120": "ulong_var2",
                "local_128": "byte_ptr4",
                "local_138": "undefined8_var3",
                "local_140": "long_ptr6",
                "local_c8": "stat_struct",
                "local_d0": "void_ptr",
                "local_d8": "char_ptr3",
                "memcpy": "copy_memory",
                "memmove": "memmove_func",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_ptr1",
                "pbVar19": "byte_ptr2",
                "pbVar23": "byte_ptr3",
                "pcVar20": "char_ptr",
                "pcVar24": "char_ptr2",
                "perror": "print_error",
                "piVar15": "int_ptr",
                "plVar12": "param_ptr",
                "plVar16": "param_ptr2",
                "plVar18": "param_ptr3",
                "ppuVar21": "undefined_ptr_ptr",
                "printf": "print_info",
                "puVar26": "undefined8_ptr",
                "realloc": "reallocate_memory",
                "sVar10": "size_var2",
                "sVar9": "size_var1",
                "setlocale": "set_locale",
                "size_t": "size",
                "stat": "stat_func",
                "strcmp": "compare_strings",
                "strerror": "get_error_string",
                "strlen": "strlen_func",
                "strtoul": "strtoul_func",
                "textdomain": "text_domain",
                "uVar13": "ulong_var",
                "uVar14": "undefined8_var",
                "uVar17": "undefined8_var2",
                "uVar6": "uint_var",
                "uVar8": "uint_var2",
                "unaff_R12": "long_ptr5",
                "xexit": "xexit_func",
                "xmalloc": "allocate_memory",
                "xmalloc_set_program_name": "set_program_name",
                "xrealloc": "reallocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a60": {
            "additional_data": {
                "FUN_001038b0": {
                    "1": "sub_function",
                    "3": "copy_data"
                },
                "FUN_00104a60": {
                    "1": "extract_binary_data",
                    "2": "extract_data",
                    "3": "extract_and_exit",
                    "8": "process_data"
                },
                "in_AL": {
                    "1": "is_flag_set",
                    "12": "flag",
                    "3": "input_flag",
                    "4": "condition"
                },
                "local_18": {
                    "1": "var13",
                    "2": "new_param8",
                    "5": "input8_copy"
                },
                "local_28": {
                    "1": "local_param7",
                    "2": "input7",
                    "5": "input7_copy"
                },
                "local_38": {
                    "1": "input_6_new",
                    "2": "input6",
                    "5": "input6_copy"
                },
                "local_48": {
                    "1": "var10",
                    "2": "new_param5",
                    "5": "input5_copy"
                },
                "local_58": {
                    "1": "extra_local",
                    "2": "input_4_copy",
                    "5": "input4_copy"
                },
                "local_68": {
                    "1": "variable8",
                    "2": "input_3_copy",
                    "5": "input3_copy"
                },
                "local_78": {
                    "1": "param_2_copy",
                    "2": "input2",
                    "5": "input2_copy"
                },
                "local_88": {
                    "1": "new_local_11",
                    "2": "input1",
                    "5": "input1_copy"
                },
                "local_90": {
                    "1": "data6_copy",
                    "2": "param14",
                    "3": "var5",
                    "5": "param_14_copy"
                },
                "local_98": {
                    "1": "param5_copy",
                    "2": "param13_copy",
                    "3": "var4",
                    "5": "param_13_copy"
                },
                "local_a0": {
                    "1": "param12_cpy",
                    "2": "param12",
                    "3": "var3",
                    "5": "param_12_copy"
                },
                "local_a8": {
                    "1": "param11_cpy",
                    "2": "param11",
                    "3": "var2",
                    "5": "param_11_copy"
                },
                "local_b0": {
                    "1": "buffer_param1",
                    "2": "param10_copy",
                    "3": "var1",
                    "5": "param_10_copy"
                },
                "local_b8": {
                    "1": "temp_buffer",
                    "2": "array",
                    "3": "temporary_buffer",
                    "4": "local_buffer",
                    "5": "buffer"
                },
                "local_c8": {
                    "1": "temp_buffer",
                    "12": "local_buffer",
                    "2": "local_array",
                    "5": "buffer"
                },
                "local_d0": {
                    "1": "local_ptr",
                    "2": "stack_pointer",
                    "3": "stack_ptr",
                    "5": "buffer_ptr",
                    "8": "buffer"
                },
                "local_d4": {
                    "1": "buffer_length",
                    "4": "length"
                },
                "local_d8": {
                    "1": "size1",
                    "15": "size",
                    "2": "stack_size",
                    "3": "length",
                    "5": "buffer_size"
                },
                "param_1": {
                    "1": "param1",
                    "12": "input1",
                    "2": "input_param1",
                    "3": "input_1"
                },
                "param_10": {
                    "1": "data1",
                    "2": "param2",
                    "3": "data_2",
                    "5": "param10"
                },
                "param_11": {
                    "1": "var_11",
                    "2": "input_param_11",
                    "3": "data_3",
                    "5": "param11"
                },
                "param_12": {
                    "1": "fourth_data",
                    "2": "input_param_12",
                    "3": "data_4",
                    "5": "param12"
                },
                "param_13": {
                    "1": "input_param13",
                    "2": "input_param_13",
                    "3": "data5",
                    "5": "param13"
                },
                "param_14": {
                    "1": "val6",
                    "2": "param6",
                    "3": "data6",
                    "5": "param14"
                },
                "param_2": {
                    "1": "secondary_param",
                    "12": "input2",
                    "2": "input_param2",
                    "3": "input_2"
                },
                "param_3": {
                    "1": "option_3",
                    "12": "input3",
                    "2": "input_param3",
                    "3": "input_3"
                },
                "param_4": {
                    "1": "option_4",
                    "12": "input4",
                    "2": "arg4",
                    "3": "input_4"
                },
                "param_5": {
                    "1": "value5",
                    "12": "input5",
                    "2": "arg5",
                    "3": "input_5"
                },
                "param_6": {
                    "1": "data_6",
                    "12": "input6",
                    "2": "input_param6",
                    "3": "input_param_6"
                },
                "param_7": {
                    "1": "value7",
                    "12": "input7",
                    "2": "param7",
                    "3": "input_7"
                },
                "param_8": {
                    "1": "eighth_param",
                    "12": "input8",
                    "2": "input_param8",
                    "3": "input_8"
                },
                "param_9": {
                    "1": "pointer1",
                    "2": "input_param_9",
                    "3": "data1",
                    "5": "param9"
                },
                "stack0x00000008": {
                    "1": "new_local_19"
                },
                "xexit": {
                    "1": "exit_function"
                }
            },
            "called": [
                "xexit",
                "FUN_001038b0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid process_data_00104a60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &new_local_19;\n  size = 8;\n  local_buffer = buffer;\n  length = 0x30;\n  param_10_copy = param10;\n  param_11_copy = param11;\n  param_12_copy = param12;\n  param_13_copy = param13;\n  param_14_copy = param14;\n  FUN_001038b0(param9,&size);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n",
            "current_name": "process_data_00104a60",
            "entrypoint": "0x00104a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a60": "process_data_00104a60",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "stack0x00000008": "new_local_19",
                "xexit": "exit_function"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00104af4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_001039e0"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  FUNC_001039e0();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00103a50",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00103a10"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103a10();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__uflow": {
            "called": [
                "__uflow"
            ],
            "calling": [
                "FUN_0010290e",
                "FUN_00103520"
            ],
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "current_name": "__uflow",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00103aa0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00103aa0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x001039b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00103aa0",
                "FUN_001038b0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0",
                "FUN_001038b0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_00102b11"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_0010293a"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_0010293a"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "perror": {
            "called": [
                "perror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "perror",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_0010293a",
                "FUN_00103aa0",
                "FUN_0010286f",
                "FUN_00102853"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_0010293a",
                "FUN_001038b0",
                "FUN_00102b11"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001038b0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00104a60",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_00102330",
            "FUN_0010259a",
            "FUN_00102771",
            "FUN_001027e2",
            "FUN_0010282b",
            "FUN_00102853",
            "FUN_0010286f",
            "FUN_001028b2",
            "FUN_0010290e",
            "FUN_0010293a",
            "FUN_00102b11",
            "FUN_001030c0",
            "FUN_00103240",
            "FUN_001034d5",
            "FUN_001034fa",
            "FUN_00103510",
            "FUN_00103520",
            "FUN_00103810",
            "FUN_00103890",
            "FUN_001038b0",
            "FUN_00103910",
            "FUN_00103aa0",
            "FUN_00104a60"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 155737
}