{
    "functions": {
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00102b11": {
            "renaming": {
                "FUN_00102b11": "process_string_00102b11",
                "param_1": "filename",
                "param_2": "offset",
                "param_3": "data",
                "param_4": "data_length",
                "param_5": "string_min",
                "param_6": "output_buffer",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "local_80": "last_valid_offset",
                "local_4c": "local_counter",
                "local_40": "local_offset",
                "local_3c": "byte1",
                "local_3b": "byte2",
                "local_3a": "byte3",
                "local_39": "byte4"
            },
            "code": "\n\n\nvoid processString_00102b11(undefined8 filename,long offset,undefined8 data,long data_length,uint string_min,\n                 long output_buffer)\n\n{\n  undefined temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  ulong temp6;\n  undefined temp7;\n  undefined temp8;\n  uint temp9;\n  undefined temp10;\n  ulong last_valid_offset;\n  uint local_counter [3];\n  uint local_offset;\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  \n  temp9 = 0;\n  local_offset = 0;\n  last_valid_offset = 0;\n  temp6 = 0;\n  local_counter[0] = string_min;\n  temp2 = 0;\n  while (temp5 = (uint)temp6, temp9 < string_min) {\n    temp2 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n    if (temp2 == 0xffffffff) break;\n    if (temp2 < 0x100) {\n      temp10 = (undefined)temp2;\n      if (temp2 == 9) {\n        if (temp9 == 0) {\n          last_valid_offset = (ulong)(local_offset - 1);\n        }\nLAB_00102c09:\n        temp9 = temp9 + 1;\n        *(undefined *)(output_buffer + temp6) = temp10;\n        temp6 = (ulong)(temp5 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x10) == 0) {\n          if ((encoding != 'S') || ((int)temp2 < 0x80)) {\n            if ((include_all_whitespace == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (temp9 == 0) {\n            last_valid_offset = (ulong)(local_offset - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (temp9 == 0) {\n            last_valid_offset = (ulong)(local_offset - 1);\n          }\n          if ((int)temp2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)temp2 < 0xc0) goto LAB_00102b96;\n        temp3 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n        if (temp3 == 0xffffffff) {\nLAB_00102dee:\n          temp2 = 0xffffffff;\n          break;\n        }\n        temp7 = (undefined)temp3;\n        if ((temp3 & 0xc0) == 0x80) {\n          if ((temp2 & 0x20) == 0) {\n            if (unicode_display == 5) goto LAB_00102c67;\n            temp9 = temp9 + 1;\n            *(undefined *)(output_buffer + temp6) = temp10;\n            *(undefined *)(output_buffer + (ulong)(temp5 + 1)) = temp7;\n            temp6 = (ulong)(temp5 + 2);\n            temp2 = temp3;\n          }\n          else {\n            temp3 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n            if (temp3 == 0xffffffff) goto LAB_00102dee;\n            temp8 = (undefined)temp3;\n            if ((temp3 & 0xc0) == 0x80) {\n              if ((temp2 & 0x10) == 0) {\n                if (unicode_display == 5) goto LAB_00102ce5;\n                temp9 = temp9 + 1;\n                *(undefined *)(output_buffer + temp6) = temp10;\n                temp6 = (ulong)(temp5 + 3);\n                *(undefined *)(output_buffer + (ulong)(temp5 + 1)) = temp7;\n                *(undefined *)(output_buffer + (ulong)(temp5 + 2)) = temp8;\n                temp2 = temp3;\n              }\n              else {\n                temp2 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n                if (temp2 == 0xffffffff) goto LAB_00102dee;\n                temp1 = (undefined)temp2;\n                if ((temp2 & 0xc0) == 0x80) {\n                  if (unicode_display == 5) {\n                    *(undefined *)(data_length + (ulong)local_counter[0]) = temp1;\n                    *(undefined *)(data_length + (ulong)(local_counter[0] + 1)) = temp7;\n                    *(undefined *)(data_length + (ulong)(local_counter[0] + 2)) = temp8;\n                    goto LAB_00102db9;\n                  }\n                  temp9 = temp9 + 1;\n                  *(undefined *)(output_buffer + temp6) = temp10;\n                  *(undefined *)(output_buffer + (ulong)(temp5 + 1)) = temp7;\n                  temp6 = (ulong)(temp5 + 4);\n                  *(undefined *)(output_buffer + (ulong)(temp5 + 2)) = temp8;\n                  *(undefined *)(output_buffer + (ulong)(temp5 + 3)) = temp1;\n                }\n                else {\n                  *(undefined *)(data_length + (ulong)local_counter[0]) = temp1;\n                  *(undefined *)(data_length + (ulong)(local_counter[0] + 1)) = temp8;\n                  *(undefined *)(data_length + (ulong)(local_counter[0] + 2)) = temp7;\nLAB_00102db9:\n                  local_counter[0] = local_counter[0] + 3;\n                  temp6 = 0;\n                  temp9 = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              temp6 = 0;\n              temp9 = 0;\n              *(undefined *)(data_length + (ulong)local_counter[0]) = temp8;\n              *(undefined *)(data_length + (ulong)(local_counter[0] + 1)) = temp7;\n              local_counter[0] = local_counter[0] + 2;\n              temp2 = temp3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          temp9 = 0;\n          *(undefined *)(data_length + (ulong)local_counter[0]) = temp7;\n          temp6 = 0;\n          local_counter[0] = local_counter[0] + 1;\n          temp2 = temp3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      temp9 = 0;\n      temp6 = 0;\n    }\n  }\n  if (temp9 < string_min) {\n    if (temp2 != 0xffffffff) {\nLAB_0010308d:\n      processString_00102b11(filename,(ulong)local_offset + offset,data,data_length,local_counter[0],output_buffer);\n    }\n  }\n  else {\n    temp2 = 0;\n    print_filename_and_address(filename,last_valid_offset + offset);\n    while (temp2 < temp5) {\n      temp6 = (ulong)temp2;\n      if (*(byte *)(temp6 + output_buffer) < 0x7f) {\n        temp2 = temp2 + 1;\n        putc((uint)*(byte *)(temp6 + output_buffer),_stdout);\n      }\n      else {\n        temp4 = display_utf8_char();\n        temp2 = temp2 + temp4;\n      }\n    }\n    while( true ) {\n      temp2 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n      if (temp2 == 0xffffffff) break;\n      if (0xff < temp2) {\nLAB_00103049:\n        if (output_separator == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(output_separator,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (temp2 == 9) {\nLAB_00102ed4:\n        putc(temp2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x10) == 0) {\n          if ((encoding != 'S') || ((int)temp2 < 0x80)) {\n            if ((include_all_whitespace == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)temp2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)temp2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)temp2 < 0xc0) goto LAB_00103049;\n        byte1 = (byte)temp2;\n        temp4 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n        if (temp4 == -1) break;\n        byte2 = (byte)temp4;\n        if ((byte2 & 0xc0) != 0x80) {\nLAB_00102f32:\n          temp6 = (ulong)local_counter[0];\n          local_counter[0] = local_counter[0] + 1;\n          *(byte *)(data_length + temp6) = byte2;\njoined_r0x00102f51:\n          if (output_separator == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(output_separator,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((byte1 & 0x20) == 0) {\n          if (unicode_display != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        temp4 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n        if (temp4 == -1) break;\n        byte3 = (byte)temp4;\n        if ((byte3 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(data_length + (ulong)local_counter[0]) = byte3;\n          temp2 = local_counter[0] + 1;\n          local_counter[0] = local_counter[0] + 2;\nLAB_00102ff2:\n          *(byte *)(data_length + (ulong)temp2) = byte2;\n          goto joined_r0x00102f51;\n        }\n        if ((byte1 & 0x10) != 0) {\n          temp4 = get_unicode_byte(data,data_length,local_counter,&local_offset);\n          if (temp4 != -1) {\n            byte4 = (byte)temp4;\n            if (((byte4 & 0xc0) == 0x80) && (unicode_display != 5)) goto LAB_0010300e;\n            *(byte *)(data_length + (ulong)local_counter[0]) = byte4;\n            *(byte *)(data_length + (ulong)(local_counter[0] + 1)) = byte3;\n            temp2 = local_counter[0] + 2;\n            local_counter[0] = local_counter[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (unicode_display == 5) goto LAB_00102f94;\nLAB_0010300e:\n        display_utf8_char(&byte1);\n      }\n    }\n    if (output_separator == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(output_separator,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "print_unicode_stream_body",
                "putc",
                "fputs",
                "get_unicode_byte",
                "display_utf8_char",
                "print_filename_and_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102b11",
            "calling": [
                "print_unicode_stream_body",
                "print_strings"
            ],
            "imported": false,
            "current_name": "process_string_00102b11"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_00109148": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109148",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00109148"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00109140": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109140",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00109140"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_00103a50": {
            "renaming": {
                "FUN_00103a50": "finalize_and_cleanup_00103a50",
                "completed_0": "is_completed",
                "__cxa_finalize": "finalize",
                "__dso_handle": "dso_handle",
                "deregister_tm_clones": "cleanup_tm_clones"
            },
            "code": "\nvoid finalize_and_cleanup_00103a50(void)\n\n{\n  if (is_completed != '\\0') {\n    return;\n  }\n  finalize(dso_handle);\n  cleanup_tm_clones();\n  is_completed = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a50",
            "calling": [],
            "imported": false,
            "current_name": "finalize_and_cleanup_00103a50"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010286f": {
            "renaming": {
                "FUN_0010286f": "print_formatted_address_0010286f",
                "param_1": "address",
                "address_radix": "radix",
                "printf": "printFormatted"
            },
            "code": "\nvoid printFormattedAddress_0010286f(undefined8 address)\n\n{\n  if (radix == 10) {\n    printFormatted(\"%7ld \",address);\n    return;\n  }\n  if (radix != 0x10) {\n    if (radix == 8) {\n      printFormatted(\"%7lo \",address);\n      return;\n    }\n    return;\n  }\n  printFormatted(\"%7lx \",address);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010286f",
            "calling": [
                "FUN_0010259a",
                "print_filename_and_address.cold"
            ],
            "imported": false,
            "current_name": "print_formatted_address_0010286f"
        },
        "FUN_00109158": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109158",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_00109158"
        },
        "FUN_00109038": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109038",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_00109038"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiler_00102000",
                "ctx": "context",
                "iVar1": "result"
            },
            "code": "\nint initializeProfiler_00102000(EVP_PKEY_CTX *context)\n\n{\n  int result;\n  \n  result = __gmon_start__();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_0010259a",
                "print_filename_and_address.part.0",
                "main",
                "print_filename_and_address.cold",
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00109030": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109030",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_00109030"
        },
        "FUN_0010290e": {
            "renaming": {
                "FUN_0010290e": "read_byte_from_file_0010290e",
                "param_1": "file_ptr",
                "param_2": "position",
                "param_3": "bytes_remaining",
                "param_4": "num_reads",
                "pbVar1": "read_byte",
                "uVar2": "result"
            },
            "code": "\nuint read_byte_from_file_0010290e(_IO_FILE *file_ptr,long position,uint *bytes_remaining,int *num_reads)\n\n{\n  byte *read_byte;\n  uint result;\n  \n  if (*bytes_remaining != 0) {\n    result = *bytes_remaining - 1;\n    *bytes_remaining = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *num_reads = *num_reads + 1;\n  read_byte = (byte *)file_ptr->_IO_read_ptr;\n  if (file_ptr->_IO_read_end <= read_byte) {\n    result = __uflow(file_ptr);\n    return result;\n  }\n  file_ptr->_IO_read_ptr = (char *)(read_byte + 1);\n  return (uint)*read_byte;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010290e",
            "calling": [
                "print_unicode_stream_body"
            ],
            "imported": false,
            "current_name": "read_byte_from_file_0010290e"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_001090e8": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090e8",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_001090e8"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "print_strings",
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "print_unicode_stream_body",
                "report",
                "FUN_0010259a",
                "print_strings",
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010259a": {
            "renaming": {
                "FUN_0010259a": "print_file_content_0010259a",
                "param_7": "inputIndex",
                "param_8": "filename",
                "param_11": "outputSeparator",
                "in_R8": "input",
                "unaff_R14": "output",
                "unaff_R15": "printFilenames",
                "bVar3": "isWhitespace",
                "print_addresses": "shouldPrintAddresses",
                "print_filename_and_address_part_0": "printFilenameAndAddress",
                "_stdout": "standardOutput",
                "print_formatted_strings_00103510": "printFormattedStrings",
                "string_min": "inputSize",
                "get_char": "getNextChar",
                "unget_part_char": "ungetPreviousChar",
                "putc": "putChar",
                "output_separator": "separator",
                "fputs": "writeString",
                "free": "releaseMemory",
                "include_all_whitespace": "includeAllWhitespace",
                "encoding": "textEncoding",
                "_sch_istable": "characterTable",
                "parse_and_print_strings_001034d5": "parseAndPrintStrings"
            },
            "code": "\n\n\nvoid printFileContent_0010259a(void)\n\n{\n  uint uVar1;\n  ulong uVar2;\n  ulong input;\n  char *output;\n  undefined8 printFilenames;\n  bool isWhitespace;\n  uint inputIndex;\n  undefined8 filename;\n  undefined8 outputSeparator;\n  \n  do {\n    inputIndex = (uint)input;\n    printf(\"%s: \",filename);\n    input = (ulong)inputIndex;\n    do {\n      if (shouldPrintAddresses == '\\0') {\n        output[input] = '\\0';\n        writeString(output,standardOutput);\n      }\n      else {\n        inputIndex = (uint)input;\n        printFilenameAndAddress(printFilenames);\n        output[inputIndex] = '\\0';\n        writeString(output,standardOutput);\n      }\n      while (uVar2 = getNextChar(), uVar2 != 0xffffffffffffffff) {\n        if (0xff < uVar2) {\nLAB_0010348e:\n          ungetPreviousChar();\n          break;\n        }\n        if (uVar2 == 9) {\nLAB_00102438:\n          putChar((int)uVar2,standardOutput);\n        }\n        else {\n          if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n            if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n               ((includeAllWhitespace == '\\0' ||\n                ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto LAB_0010348e;\n            goto LAB_00102438;\n          }\n          putChar((int)uVar2,standardOutput);\n        }\n      }\n      if (separator == (char *)0x0) {\n        putChar(10,standardOutput);\n      }\n      else {\n        writeString(separator,standardOutput);\n      }\n      while (input = (ulong)inputSize, inputSize != 0) {\n        uVar2 = getNextChar();\n        uVar1 = inputSize;\n        if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (uVar2 < 0x100) {\n          if (uVar2 == 9) {\nLAB_001023f5:\n            *output = (char)uVar2;\n            if (uVar1 < 2) {\n              print_file_content_001034fa();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n              if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((includeAllWhitespace == '\\0' ||\n                  ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_001023f5;\n            }\n            *output = (char)uVar2;\n            if (uVar1 < 2) {\n              input = 1;\n              break;\n            }\n          }\n          uVar2 = getNextChar();\n          uVar1 = inputSize;\n          if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < uVar2) goto code_r0x001034d5;\n          if (uVar2 == 9) {\nLAB_001023bb:\n            output[1] = (char)uVar2;\n            if (uVar1 < 3) {\n              printFormattedStrings();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n              if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((includeAllWhitespace == '\\0' ||\n                  ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            output[1] = (char)uVar2;\n            if (uVar1 < 3) {\n              input = 2;\n              break;\n            }\n          }\n          uVar2 = getNextChar();\n          uVar1 = inputSize;\n          if (uVar2 == 0xffffffffffffffff) {\nLAB_001034be:\n            releaseMemory(output);\n            return;\n          }\n          if (0xff < uVar2) goto code_r0x001034d5;\n          if (uVar2 == 9) {\nLAB_00102381:\n            output[2] = (char)uVar2;\n          }\n          else {\n            if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n              if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((includeAllWhitespace == '\\0' ||\n                  ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_00102381;\n            }\n            output[2] = (char)uVar2;\n          }\n          if (3 < uVar1) {\n            input = 3;\n            do {\n              inputIndex = (uint)input;\n              uVar2 = getNextChar();\n              if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n              if (0xff < uVar2) goto code_r0x001034d5;\n              if (((uVar2 != 9) && ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0)) &&\n                 ((textEncoding != 'S' || ((long)uVar2 < 0x80)))) {\n                if (includeAllWhitespace == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0) {\n                  parseAndPrintStrings();\n                  return;\n                }\n              }\n              input = (ulong)(inputIndex + 1);\n              isWhitespace = inputSize <= inputIndex + 1;\n              output[inputIndex] = (char)uVar2;\n              if (isWhitespace) goto joined_r0x0010341b;\n            } while( true );\n          }\n          input = 3;\n          break;\n        }\ncode_r0x001034d5:\n        ungetPreviousChar();\n      }\njoined_r0x0010341b:\n      printFilenames = outputSeparator;\n    } while (print_filenames == '\\0');\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034fa",
                "FUN_001034d5",
                "FUN_00103510",
                "get_char",
                "print_strings.cold",
                "printf",
                "unget_part_char",
                "putc",
                "fputs",
                "free",
                "FUN_0010259a",
                "print_filename_and_address.part.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259a",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_file_content_0010259a"
        },
        "FUN_001028b2": {
            "renaming": {
                "FUN_001028b2": "check_byte_sequence_001028b2",
                "param_1": "byteSequence",
                "param_2": "sequenceLength",
                "bVar1": "firstByte",
                "lVar2": "result"
            },
            "code": "\nlong checkByteSequence_001028b2(byte *byteSequence,long sequenceLength)\n\n{\n  byte firstByte;\n  long result;\n  \n  firstByte = *byteSequence;\n  if ((0xbf < firstByte) && (sequenceLength != 1)) {\n    result = 0;\n    if ((byteSequence[1] & 0xc0) == 0x80) {\n      if ((firstByte & 0x20) == 0) {\n        return 2;\n      }\n      if ((sequenceLength != 2) && ((byteSequence[2] & 0xc0) == 0x80)) {\n        if ((firstByte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (sequenceLength != 3) {\n            return (ulong)((byteSequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028b2",
            "calling": [
                "print_strings"
            ],
            "imported": false,
            "current_name": "check_byte_sequence_001028b2"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_00109048": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109048",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_00109048"
        },
        "FUN_00109160": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109160",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_00109160"
        },
        "FUN_00102771": {
            "renaming": {
                "FUN_00102771": "extracted_value_00102771",
                "unaff_RBX": "inputValue"
            },
            "code": "\nulong extractedValue_00102771(void)\n\n{\n  ulong inputValue;\n  \n  return inputValue >> 0x18 & 0xff |\n         (inputValue & 0xff) << 0x18 | (ulong)((uint)(inputValue << 8) & 0xff0000) |\n         (ulong)((uint)(inputValue >> 8) & 0xff00);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102771",
            "calling": [
                "get_char"
            ],
            "imported": false,
            "current_name": "extracted_value_00102771"
        },
        "FUN_001034fa": {
            "renaming": {
                "FUN_001034fa": "print_file_content_001034fa",
                "unaff_R14": "outputBuffer",
                "unaff_R15": "filename",
                "bVar5": "isSpecialCharacter",
                "in_stack_00000010": "inputFilename",
                "in_stack_00000038": "outputSeparator",
                "uVar1": "character",
                "uVar2": "stringLength",
                "uVar3": "counter",
                "uVar4": "index"
            },
            "code": "\n\n\nvoid printFileContent_001034fa(void)\n\n{\n  ulong character;\n  uint stringLength;\n  ulong counter;\n  ulong index;\n  char *outputBuffer;\n  undefined8 filename;\n  bool isSpecialCharacter;\n  undefined8 inputFilename;\n  undefined8 outputSeparator;\n  \ncode_r0x001034fa:\n  index = 1;\njoined_r0x0010341b:\n  do {\n    if (print_filenames != '\\0') {\n      printf(\"%s: \",inputFilename);\n    }\n    if (print_addresses == '\\0') {\n      outputBuffer[index] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    else {\n      print_filename_and_address_part_0(filename);\n      outputBuffer[index] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    while (index = get_char(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\nLAB_0010348e:\n        unget_part_char();\n        break;\n      }\n      if (index == 9) {\nLAB_00102438:\n        putc((int)index,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n          if (((encoding != 'S') || ((long)index < 0x80)) &&\n             ((include_all_whitespace == '\\0' ||\n              ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index,_stdout);\n      }\n    }\n    if (output_separator == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(output_separator,_stdout);\n    }\n    while (index = (ulong)string_min, filename = outputSeparator, string_min != 0) {\n      index = get_char();\n      stringLength = string_min;\n      if (index == 0xffffffffffffffff) goto LAB_001034be;\n      if (index < 0x100) {\n        if (index == 9) {\nLAB_001023f5:\n          *outputBuffer = (char)index;\n          if (stringLength < 2) {\n            printFileContent_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)index < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputBuffer = (char)index;\n          if (stringLength < 2) goto code_r0x001034fa;\n        }\n        index = get_char();\n        stringLength = string_min;\n        if (index == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_001023bb:\n          outputBuffer[1] = (char)index;\n          if (stringLength < 3) {\n            print_formatted_strings_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)index < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          outputBuffer[1] = (char)index;\n          if (stringLength < 3) {\n            index = 2;\n            break;\n          }\n        }\n        index = get_char();\n        stringLength = string_min;\n        if (index == 0xffffffffffffffff) {\nLAB_001034be:\n          free(outputBuffer);\n          return;\n        }\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_00102381:\n          outputBuffer[2] = (char)index;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)index < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          outputBuffer[2] = (char)index;\n        }\n        if (3 < stringLength) {\n          counter = 3;\n          do {\n            character = get_char();\n            if (character == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&_sch_istable + character * 2) & 0x10) == 0)) &&\n               ((encoding != 'S' || ((long)character < 0x80)))) {\n              if (include_all_whitespace == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&_sch_istable + character * 2) & 0x40) == 0) {\n                parse_and_print_strings_001034d5();\n                return;\n              }\n            }\n            stringLength = (int)counter + 1;\n            index = (ulong)stringLength;\n            isSpecialCharacter = string_min <= stringLength;\n            outputBuffer[counter] = (char)character;\n            counter = index;\n            if (isSpecialCharacter) goto joined_r0x0010341b;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\ncode_r0x001034d5:\n      unget_part_char();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034fa",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_file_content_001034fa"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_001090f8": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090f8",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_001090f8"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "report",
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00109178": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109178",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_00109178"
        },
        "FUN_00109058": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109058",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_00109058"
        },
        "FUN_001039b0": {
            "renaming": {
                "FUN_001039b0": "execute_main_loop_001039b0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackBuffer"
            },
            "code": "\nvoid processEntry executeMainLoop_001039b0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackBuffer [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stackBuffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001039b0",
            "calling": [],
            "imported": false,
            "current_name": "execute_main_loop_001039b0"
        },
        "FUN_00103aa0": {
            "renaming": {
                "FUN_00103aa0": "extract_strings_from_file_00103aa0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "currentChar",
                "bVar2": "tableValue1",
                "bVar3": "tableValue2",
                "cVar4": "currentChar2",
                "iVar5": "result",
                "uVar6": "count",
                "iVar7": "index",
                "uVar8": "errorType",
                "__stream": "fileStream",
                "sVar9": "fileSize",
                "sVar10": "readSize",
                "__ptr": "outputString",
                "lVar11": "inputString",
                "plVar12": "argsList",
                "uVar13": "tableIndex",
                "__src": "dataArray",
                "uVar14": "errorMessage",
                "__stream_00": "tempFileStream",
                "piVar15": "errorPtr",
                "plVar16": "argsListNew",
                "uVar17": "errorMessage2",
                "plVar18": "currentDataPtr",
                "pbVar19": "currentDataChar",
                "pcVar20": "currentArg",
                "puVar21": "currentArgIndex",
                "lVar22": "tempVar",
                "pbVar23": "currentDataChar2",
                "pcVar24": "warningMessage",
                "bVar25": "flag1",
                "unaff_R12": "iterIndex",
                "puVar26": "tempVarPtr",
                "bVar27": "flag2",
                "bVar28": "flag3",
                "local_140": "argsListIter",
                "local_138": "tempVarPtr2",
                "local_128": "outputData",
                "local_120": "maxCount",
                "local_118": "outputSize",
                "local_110": "dataCount",
                "local_d8": "warningMessageArg",
                "local_d0": "tempDataPtr",
                "local_c8": "fileStat"
            },
            "code": "\n\n\n\nFILE * extractStringsFromFile_00103aa0(int argc,long *argv)\n\n{\n  byte *currentChar;\n  byte tableValue1;\n  byte tableValue2;\n  char currentChar2;\n  int result;\n  uint count;\n  int index;\n  undefined4 errorType;\n  FILE *fileStream;\n  size_t fileSize;\n  size_t readSize;\n  byte *outputString;\n  long inputString;\n  long *argsList;\n  ulong tableIndex;\n  long *dataArray;\n  undefined8 errorMessage;\n  FILE *tempFileStream;\n  int *errorPtr;\n  long *argsListNew;\n  undefined8 errorMessage2;\n  long *currentDataPtr;\n  byte *currentDataChar;\n  char *currentArg;\n  undefined1 *currentArgIndex;\n  long tempVar;\n  byte *currentDataChar2;\n  char *warningMessage;\n  bool flag1;\n  long *iterIndex;\n  undefined8 *tempVarPtr;\n  bool flag2;\n  bool flag3;\n  long *argsListIter;\n  undefined8 tempVarPtr2;\n  undefined8 outputData;\n  ulong maxCount;\n  size_t outputSize;\n  long dataCount;\n  char *warningMessageArg;\n  void *tempDataPtr;\n  stat fileStat;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  argsListNew = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  maxCount = 2000;\n  iterIndex = (long *)0x1;\n  tempVarPtr2 = (long *)0x0;\n  argsList = argv;\n  do {\n    index = (int)iterIndex;\n    currentArgIndex = (undefined1 *)(long)index;\n    argsListIter = (long *)((long)currentArgIndex * 8);\n    argsListNew = argsList;\n    if (*(char *)argsList[(long)currentArgIndex] == '@') {\n      count = (int)maxCount - 1;\n      maxCount = (ulong)count;\n      if (count == 0) {\n        inputString = *argsList;\n        currentArg = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      currentArg = (char *)argsList[(long)currentArgIndex] + 1;\n      result = stat(currentArg,&fileStat);\n      if (-1 < result) {\n        if ((fileStat.st_mode & 0xf000) == 0x4000) {\n          do {\n            inputString = *argsList;\n            currentArg = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(_stderr,currentArg,inputString);\n            xexit(1);\n          } while( true );\n        }\n        fileStream = fopen(currentArg,\"r\");\n        if (fileStream != (FILE *)0x0) {\n          result = fseek(fileStream,0,2);\n          if (((result != -1) && (fileSize = ftell(fileStream), fileSize != 0xffffffffffffffff)) &&\n             (result = fseek(fileStream,0,0), result != -1)) {\n            outputData = (byte *)xmalloc(fileSize + 1);\n            readSize = fread(outputData,1,fileSize,fileStream);\n            if ((fileSize == readSize) || (result = ferror(fileStream), result == 0)) {\n              outputData[readSize] = 0;\n              tableValue2 = *outputData;\n              currentDataChar = outputData;\n              while( true ) {\n                if (tableValue2 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)tableValue2 * 2] & 0x40) == 0) break;\n                tableValue2 = currentDataChar[1];\n                currentDataChar = currentDataChar + 1;\n              }\n              fileSize = strlen((char *)outputData);\n              outputString = (byte *)xmalloc(fileSize + 1);\n              dataArray = (long *)0x0;\n              result = 0;\n              dataCount = 0;\n              flag1 = false;\n              flag3 = false;\n              flag2 = false;\n              currentDataChar = outputData;\n              do {\n                while (((&_sch_istable)[(ulong)*currentDataChar * 2] & 0x40) != 0) {\n                  currentDataChar = currentDataChar + 1;\n                }\n                if ((result == 0) || (result + -1 <= (int)dataCount)) {\n                  if (dataArray == (long *)0x0) {\n                    result = 8;\n                    dataArray = (long *)xmalloc(0x40);\n                    currentDataPtr = dataArray + dataCount;\n                    *currentDataPtr = 0;\n                  }\n                  else {\n                    result = result * 2;\n                    dataArray = (long *)xrealloc(dataArray,(long)result << 3);\n                    currentDataPtr = dataArray + dataCount;\n                    *currentDataPtr = 0;\n                  }\n                }\n                else {\n                  currentDataPtr = dataArray + dataCount;\n                }\n                tableValue2 = *currentDataChar;\n                currentDataChar2 = outputString;\n                while (tableValue2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)tableValue2 * 2] & 0x40) != 0) &&\n                       (!(bool)(flag3 | flag2 | flag1))) {\n                      flag2 = false;\n                      flag1 = false;\n                      flag3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!flag2) break;\n                    currentDataChar = currentDataChar + 1;\n                    *currentDataChar2 = tableValue2;\n                    currentDataChar2 = currentDataChar2 + 1;\n                    flag2 = false;\n                    tableValue2 = *currentDataChar;\n                    if (tableValue2 == 0) goto LAB_00103d4f;\n                  }\n                  if (tableValue2 == 0x5c) {\n                    flag2 = true;\n                  }\n                  else if (flag3) {\n                    if (tableValue2 == 0x27) {\n                      flag3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *currentDataChar2 = tableValue2;\n                      currentDataChar2 = currentDataChar2 + 1;\n                    }\n                  }\n                  else if (flag1) {\n                    if (tableValue2 != 0x22) goto LAB_00103ec8;\n                    flag1 = false;\n                  }\n                  else if (tableValue2 == 0x27) {\n                    flag3 = true;\n                  }\n                  else {\n                    if (tableValue2 != 0x22) goto LAB_00103ec8;\n                    flag1 = true;\n                  }\n                  currentChar = currentDataChar + 1;\n                  currentDataChar = currentDataChar + 1;\n                  tableValue2 = *currentChar;\n                }\nLAB_00103d4f:\n                *currentDataChar2 = 0;\n                inputString = xstrdup(outputString);\n                *currentDataPtr = inputString;\n                dataArray[dataCount + 1] = 0;\n                tableValue2 = *currentDataChar;\n                tableValue1 = (&_sch_istable)[(ulong)tableValue2 * 2];\n                while ((tableValue1 & 0x40) != 0) {\n                  tableValue2 = currentDataChar[1];\n                  currentDataChar = currentDataChar + 1;\n                  tableValue1 = (&_sch_istable)[(ulong)tableValue2 * 2];\n                }\n                dataCount = dataCount + 1;\n                if (tableValue2 == 0) {\n                  free(outputString);\n                  if (argsList == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free(outputData);\n          }\n          fclose(fileStream);\n        }\n      }\n    }\n    if (argc <= index + 1) {\nLAB_00103fa6:\n      include_all_whitespace = 0;\n      fileStream = (FILE *)0x0;\n      print_addresses = 0;\n      currentArgIndex = long_options;\n      string_min = 4;\n      print_filenames = 0;\n      datasection_only = '\\0';\n      target = (long *)0x0;\n      encoding = 's';\n      output_separator = (long *)0x0;\n      currentArg = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        index = (int)iterIndex;\n        result = getopt_long(argc,argsListNew,currentArg);\n        if (result == -1) break;\n        argsList = (long *)currentArg;\n        switch(result) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          usage(_stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          iterIndex = (long *)&optarg;\n          target = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          iterIndex = _optarg;\n          index = strcmp((char *)_optarg,\"default\");\n          if ((index == 0) || (index = strcmp((char *)iterIndex,\"d\"), index == 0)) {\n            unicode_display = 0;\n          }\n          else {\n            index = strcmp((char *)iterIndex,\"locale\");\n            if ((index == 0) || (index = strcmp((char *)iterIndex,\"l\"), index == 0)) {\n              unicode_display = 1;\n            }\n            else {\n              index = strcmp((char *)iterIndex,\"escape\");\n              if ((index == 0) || (index = strcmp((char *)iterIndex,\"e\"), index == 0)) {\n                unicode_display = 2;\n              }\n              else {\n                index = strcmp((char *)iterIndex,\"invalid\");\n                if ((index == 0) || (index = strcmp((char *)iterIndex,\"i\"), index == 0)) {\n                  unicode_display = 5;\n                }\n                else {\n                  index = strcmp((char *)iterIndex,\"hex\");\n                  if ((index == 0) || (index = strcmp((char *)iterIndex,\"x\"), index == 0)) {\n                    unicode_display = 3;\n                  }\n                  else {\n                    index = strcmp((char *)iterIndex,\"highlight\");\n                    if ((index != 0) && (index = strcmp((char *)iterIndex,\"h\"), index != 0)) {\n                      errorMessage = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      fatal(errorMessage);\n                      report();\n                      xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_baddata();\n                    }\n                    unicode_display = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          currentArg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(currentArg);\n          currentArg = (char *)dcgettext(0,\n                                      \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(currentArg);\n                    \n          exit(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          datasection_only = '\\x01';\n          break;\n        case 0x65:\n          iterIndex = (long *)&optarg;\n          index = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          encoding = *(char *)_optarg;\n          result = getopt_long(argc,argsListNew,currentArg);\n          if (result == -1) goto LAB_0010407f;\n          switch(result) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            encoding = *(char *)_optarg;\n            result = getopt_long(argc,argsListNew,currentArg);\n            if (result == -1) goto LAB_0010407f;\n            switch(result) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          fileStream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          print_filenames = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          iterIndex = (long *)&optarg;\n          tableIndex = strtoul((char *)_optarg,&warningMessageArg,0);\n          string_min = (int)tableIndex;\n          if ((warningMessageArg != (char *)0x0) && (argsList = _optarg, *warningMessageArg != '\\0')) {\nLAB_001042e6:\n            errorMessage = dcgettext(0,\"invalid integer argument %s\",5);\n            fatal(errorMessage,argsList);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          print_addresses = 1;\n          address_radix = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          iterIndex = (long *)&optarg;\n          output_separator = _optarg;\n          currentArg = (char *)argsList;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          iterIndex = (long *)&optarg;\n          index = 0x109108;\n          print_addresses = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          currentChar2 = *(char *)_optarg;\n          if (currentChar2 == 'o') {\n            address_radix = 8;\n          }\n          else if (currentChar2 == 'x') {\n            address_radix = 0x10;\n          }\n          else {\n            if (currentChar2 != 'd') goto switchD_00104029_caseD_3f;\n            address_radix = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (unicode_display != 0) {\n        encoding = 'S';\n      }\n      if ((int)fileStream != 0) {\nLAB_001044f5:\n        currentArg = (char *)(argsListNew + (long)(int)fileStream + -1);\n        tableIndex = strtoul((char *)(*(long *)currentArg + 1),&warningMessageArg,0);\n        string_min = (int)tableIndex;\n        if ((warningMessageArg != (char *)0x0) && (*warningMessageArg != '\\0')) {\n          argsList = (long *)(*(long *)currentArg + 1);\n          goto LAB_001042e6;\n        }\n      }\n      index = (int)iterIndex;\n      if (string_min == 0) {\n        errorMessage = dcgettext(0,\"invalid minimum string length %d\",5);\n        fatal(errorMessage,0);\nswitchD_00104029_caseD_61:\n        datasection_only = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(encoding + 0xbeU)) goto switchD_00104029_caseD_3f;\n      tableIndex = 1L << (encoding + 0xbeU & 0x3f);\n      if ((tableIndex & 0x2000000020000) == 0) {\n        if ((tableIndex & 0x401) == 0) {\n          if ((tableIndex & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          encoding_bytes = 2;\n        }\n        else {\n          encoding_bytes = 4;\n        }\n      }\n      else {\n        encoding_bytes = 1;\n      }\n      index = bfd_init();\n      if (index == 0x118) {\n        currentArg = \"x86_64-pc-linux-gnu\";\n        count = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)count != '\\0') {\n          currentArgIndex = &optind;\n          if (argc <= (int)_optind) {\n            datasection_only = 0;\n            print_strings(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          tableIndex = 0;\n          fileStream = (FILE *)0x0;\n          argsList = (long *)(ulong)count;\n          count = _optind;\n          argsListIter = argsListNew;\n          goto LAB_001043b8;\n        }\n        errorType = bfd_get_error();\n        currentArgIndex = (undefined1 *)bfd_errmsg(errorType);\n        errorMessage = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        fatal(errorMessage,\"x86_64-pc-linux-gnu\",currentArgIndex);\n      }\n      errorMessage = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      fatal(errorMessage);\n      argsList = argsListNew;\nLAB_0010462b:\n      warningMessage = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      errorMessage = dcgettext(0,warningMessage,5);\n      non_fatal(errorMessage,currentArg);\n      count = 0;\n      do {\n        while( true ) {\n          tableIndex = (ulong)argsList & 0xffffffff;\n          fileStream = (FILE *)(ulong)((uint)fileStream | (count ^ 1) & 0xff);\n          while( true ) {\n            index = (int)tableIndex;\n            count = *(uint *)currentArgIndex + 1;\n            *(uint *)currentArgIndex = count;\n            if (argc <= (int)count) {\n              argsListNew = argsList;\n              if ((char)tableIndex != '\\0') {\n                return fileStream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            currentArg = (char *)argsListIter[(int)count];\n            index = strcmp(currentArg,\"-\");\n            if (index != 0) break;\n            datasection_only = '\\0';\n          }\n          index = stat(currentArg,&fileStat);\n          if (index < 0) break;\n          if ((fileStat.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((datasection_only == '\\0') ||\n             (argsListNew = (long *)bfd_openr(currentArg,target), argsListNew == (long *)0x0)) {\nLAB_00104416:\n            tempFileStream = fopen(currentArg,\"r\");\n            if (tempFileStream != (FILE *)0x0) {\n              print_strings(currentArg,tempFileStream,0,0,0);\n              index = fclose(tempFileStream);\n              if (index != -1) goto LAB_00104454;\n            }\n            fprintf(_stderr,\"%s: \",program_name);\n            perror(currentArg);\n            count = 0;\n          }\n          else {\n            currentChar2 = bfd_check_format(argsListNew,1);\n            if (currentChar2 == '\\0') {\n              bfd_close();\n              tempVarPtr2 = argsListNew;\n              goto LAB_00104416;\n            }\n            tempVarPtr = (undefined8 *)argsListNew[0x12];\n            tempVarPtr2 = (long *)((ulong)argsListNew & 0xffffffffffffff00);\n            outputData = (byte *)CONCAT44(outputData._4_4_,argc);\n            for (; tempVarPtr != (undefined8 *)0x0; tempVarPtr = (undefined8 *)tempVarPtr[1]) {\n              currentChar2 = (char)tempVarPtr2;\n              if (((*(uint *)((long)tempVarPtr + 0x24) & 0x103) == 0x103) &&\n                 (maxCount = tempVarPtr[8], maxCount != 0)) {\n                currentChar2 = bfd_malloc_and_get_section(argsListNew,tempVarPtr,&tempDataPtr);\n                if (currentChar2 == '\\0') {\n                  errorType = bfd_get_error();\n                  maxCount = bfd_errmsg(errorType);\n                  errorMessage = *tempVarPtr;\n                  errorMessage2 = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  non_fatal(errorMessage2,currentArg,errorMessage);\n                  currentChar2 = (char)tempVarPtr2;\n                }\n                else {\n                  print_strings(currentArg,0,tempVarPtr[0x10],maxCount,tempDataPtr);\n                  free(tempDataPtr);\n                }\n              }\n              tempVarPtr2 = (long *)CONCAT71(tempVarPtr2._1_7_,currentChar2);\n            }\n            argsList = (long *)((ulong)argsList & 0xff);\n            currentChar2 = bfd_close(argsListNew);\n            if (currentChar2 == '\\0') {\n              index = bfd_get_error();\n              if (index == 0) {\n                errorMessage = dcgettext(0,\"cause of error unknown\",5);\n                fflush(_stdout);\n              }\n              else {\n                errorMessage = bfd_errmsg();\n                fflush(_stdout);\n              }\n              fprintf(_stderr,\"%s: %s: %s\\n\",program_name,currentArg,errorMessage);\n              goto LAB_00104416;\n            }\n            flag3 = (char)tempVarPtr2 == '\\0';\n            if (flag3) goto LAB_00104416;\nLAB_00104454:\n            count = (uint)argsList;\n          }\n        }\n        errorPtr = __errno_location();\n        warningMessage = \"\\'%s\\': No such file\";\n        if (*errorPtr == 2) goto LAB_00104637;\n        warningMessage = strerror(*errorPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,currentArg,warningMessage);\n        count = 0;\n      } while( true );\n    }\n    count = index + 1;\n    tempVarPtr2 = iterIndex;\nLAB_00103eac:\n    iterIndex = (long *)(ulong)count;\n  } while( true );\nswitchD_00104029_caseD_77:\n  include_all_whitespace = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  usage(_stderr);\nLAB_001040fd:\n  dataArray = (long *)xmalloc(8);\n  *dataArray = 0;\n  if (argsListNew == argv) {\nLAB_0010411e:\n    if (*argsListNew == 0) {\n      result = 0;\n    }\n    else {\n      inputString = 1;\n      do {\n        result = (int)inputString;\n        argsList = argsListNew + inputString;\n        inputString = inputString + 1;\n      } while (*argsList != 0);\n    }\n    tempVar = 0;\n    argsList = (long *)xmalloc((long)(result + 1) << 3);\n    inputString = *argsListNew;\n    while (inputString != 0) {\n      errorMessage = xstrdup();\n      *(undefined8 *)((long)argsList + tempVar) = errorMessage;\n      tempVar = tempVar + 8;\n      inputString = *(long *)((long)argsListNew + tempVar);\n    }\n    *(undefined8 *)((long)argsList + tempVar) = 0;\nLAB_00103dea:\n    argsListNew = argsList;\n    if (*dataArray != 0) {\n      inputString = 0;\n      do {\n        inputString = inputString + 1;\n      } while (dataArray[inputString] != 0);\n      outputSize = inputString * 8;\n      result = argc;\n      goto LAB_00103e18;\n    }\n  }\n  inputString = 0;\n  outputSize = 0;\n  result = argc;\nLAB_00103e18:\n  free((void *)argsListNew[(long)currentArgIndex]);\n  argsList = (long *)xrealloc(argsListNew,(inputString + 1 + (long)result) * 8);\n  argc = result + -1 + (int)inputString;\n  memmove(argsList + (long)((long)currentArgIndex + inputString),(void *)((long)(argsList + 1) + (long)argsListIter),\n          (long)(result - index) << 3);\n  memcpy((void *)((long)argsList + (long)argsListIter),dataArray,outputSize);\n  free(dataArray);\n  free(outputData);\n  fclose(fileStream);\n  count = (int)tempVarPtr2 + 1;\n  iterIndex = argsListIter;\n  argsListNew = argsList;\n  argsListIter = dataArray;\n  if ((int)count < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "called": [
                "ftell",
                "xstrdup",
                "fflush",
                "bfd_close",
                "memcpy",
                "bfd_set_default_target",
                "strerror",
                "ferror",
                "strcmp",
                "__errno_location",
                "printf",
                "fclose",
                "xexit",
                "bfd_check_format",
                "stat",
                "free",
                "getopt_long",
                "bfd_errmsg",
                "bindtextdomain",
                "bfd_init",
                "perror",
                "bfd_openr",
                "fopen",
                "fatal",
                "dcgettext",
                "textdomain",
                "fprintf",
                "setlocale",
                "xmalloc",
                "print_strings",
                "bfd_malloc_and_get_section",
                "bfd_set_error_program_name",
                "usage",
                "strtoul",
                "fseek",
                "xmalloc_set_program_name",
                "xrealloc",
                "non_fatal",
                "fread",
                "memmove",
                "exit",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103aa0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "extract_strings_from_file_00103aa0"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00104af4": {
            "renaming": {
                "FUN_00104af4": "FUNC_00104af4"
            },
            "code": "\nvoid FUNC_00104af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00104af4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00104af4"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "print_unicode_stream_body",
                "FUN_0010259a",
                "print_strings"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00103910": {
            "renaming": {
                "FUN_00103910": "report_data_00103910",
                "param_1": "source1",
                "param_2": "source2",
                "param_3": "source3",
                "param_4": "source4",
                "param_5": "source5",
                "param_6": "source6",
                "param_7": "source7",
                "param_8": "source8",
                "param_9": "dest1",
                "param_10": "dest2",
                "param_11": "dest3",
                "param_12": "dest4",
                "param_13": "dest5",
                "param_14": "dest6",
                "in_AL": "condition",
                "local_d8": "count",
                "local_d4": "size",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "dataBuffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "source1_copy",
                "local_78": "source2_copy",
                "local_68": "source3_copy",
                "local_58": "source4_copy",
                "local_48": "source5_copy",
                "local_38": "source6_copy",
                "local_28": "source7_copy",
                "local_18": "source8_copy"
            },
            "code": "\nvoid reportData_00103910(undefined4 source1,undefined4 source2,undefined4 source3,undefined4 source4,\n                 undefined4 source5,undefined4 source6,undefined4 source7,undefined4 source8,\n                 undefined8 dest1,undefined8 dest2,undefined8 dest3,undefined8 dest4,\n                 undefined8 dest5,undefined8 dest6)\n\n{\n  char condition;\n  undefined4 count;\n  undefined4 size;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined dataBuffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 source1_copy;\n  undefined4 source2_copy;\n  undefined4 source3_copy;\n  undefined4 source4_copy;\n  undefined4 source5_copy;\n  undefined4 source6_copy;\n  undefined4 source7_copy;\n  undefined4 source8_copy;\n  \n  if (condition != '\\0') {\n    source1_copy = source1;\n    source2_copy = source2;\n    source3_copy = source3;\n    source4_copy = source4;\n    source5_copy = source5;\n    source6_copy = source6;\n    source7_copy = source7;\n    source8_copy = source8;\n  }\n  buffer = &stack0x00000008;\n  count = 8;\n  localBuffer = dataBuffer;\n  size = 0x30;\n  param10 = dest2;\n  param11 = dest3;\n  param12 = dest4;\n  param13 = dest5;\n  param14 = dest6;\n  report(dest1,&count);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103910",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_data_00103910"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103510": {
            "renaming": {
                "FUN_00103510": "print_formatted_strings_00103510",
                "unaff_R14": "output_buffer",
                "unaff_R15": "filename",
                "print_filenames": "should_print_filenames",
                "in_stack_00000010": "filename_to_print",
                "in_stack_00000038": "filename_to_print_address_part",
                "print_addresses": "should_print_addresses",
                "_stdout": "standard_output",
                "uVar1": "character",
                "uVar2": "string_length",
                "uVar3": "index",
                "uVar4": "loop_counter",
                "bVar5": "is_true",
                "output_separator": "separator",
                "get_char()": "read_character",
                "unget_part_char()": "unread_character",
                "string_min": "minimum_string_length",
                "_sch_istable": "character_table",
                "LAB_0010348e": "exit_loop_1",
                "LAB_00102438": "put_character_tab",
                "include_all_whitespace": "should_include_all_whitespace",
                "LAB_001023f5": "put_character_tab",
                "LAB_001023bb": "put_character_tab",
                "LAB_00102381": "put_character_tab",
                "LAB_001034be": "exit_function",
                "free(unaff_R14)": "deallocate_memory(output_buffer)"
            },
            "code": "\n\n\nvoid print_formatted_strings_00103510(void)\n\n{\n  ulong character;\n  uint string_length;\n  ulong index;\n  ulong loop_counter;\n  char *output_buffer;\n  undefined8 filename;\n  bool is_true;\n  undefined8 filename_to_print;\n  undefined8 filename_to_print_address_part;\n  \ncode_r0x00103510:\n  loop_counter = 2;\njoined_r0x0010341b:\n  do {\n    if (should_print_filenames != '\\0') {\n      printf(\"%s: \",filename_to_print);\n    }\n    if (should_print_addresses == '\\0') {\n      output_buffer[loop_counter] = '\\0';\n      fputs(output_buffer,standard_output);\n    }\n    else {\n      print_filename_and_address_part_0(filename);\n      output_buffer[loop_counter] = '\\0';\n      fputs(output_buffer,standard_output);\n    }\n    while (loop_counter = read_character, loop_counter != 0xffffffffffffffff) {\n      if (0xff < loop_counter) {\nexit_loop_1:\n        unread_character;\n        break;\n      }\n      if (loop_counter == 9) {\nput_character_tab:\n        putc((int)loop_counter,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n          if (((encoding != 'S') || ((long)loop_counter < 0x80)) &&\n             ((should_include_all_whitespace == '\\0' ||\n              ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0)))) goto exit_loop_1;\n          goto put_character_tab;\n        }\n        putc((int)loop_counter,standard_output);\n      }\n    }\n    if (separator == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(separator,standard_output);\n    }\n    while (loop_counter = (ulong)minimum_string_length, filename = filename_to_print_address_part, minimum_string_length != 0) {\n      loop_counter = read_character;\n      string_length = minimum_string_length;\n      if (loop_counter == 0xffffffffffffffff) goto exit_function;\n      if (loop_counter < 0x100) {\n        if (loop_counter == 9) {\nput_character_tab:\n          *output_buffer = (char)loop_counter;\n          if (string_length < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)loop_counter < 0x80)) &&\n               ((should_include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto put_character_tab;\n          }\n          *output_buffer = (char)loop_counter;\n          if (string_length < 2) {\n            loop_counter = 1;\n            break;\n          }\n        }\n        loop_counter = read_character;\n        string_length = minimum_string_length;\n        if (loop_counter == 0xffffffffffffffff) goto exit_function;\n        if (0xff < loop_counter) goto code_r0x001034d5;\n        if (loop_counter == 9) {\nput_character_tab:\n          output_buffer[1] = (char)loop_counter;\n          if (string_length < 3) {\n            print_formatted_strings_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)loop_counter < 0x80)) &&\n               ((should_include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto put_character_tab;\n          }\n          output_buffer[1] = (char)loop_counter;\n          if (string_length < 3) goto code_r0x00103510;\n        }\n        loop_counter = read_character;\n        string_length = minimum_string_length;\n        if (loop_counter == 0xffffffffffffffff) {\nexit_function:\n          deallocate_memory(output_buffer);\n          return;\n        }\n        if (0xff < loop_counter) goto code_r0x001034d5;\n        if (loop_counter == 9) {\nput_character_tab:\n          output_buffer[2] = (char)loop_counter;\n        }\n        else {\n          if ((*(ushort *)(&character_table + loop_counter * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)loop_counter < 0x80)) &&\n               ((should_include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&character_table + loop_counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto put_character_tab;\n          }\n          output_buffer[2] = (char)loop_counter;\n        }\n        if (3 < string_length) {\n          index = 3;\n          do {\n            character = read_character;\n            if (character == 0xffffffffffffffff) goto exit_function;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((encoding != 'S' || ((long)character < 0x80)))) {\n              if (should_include_all_whitespace == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                parse_and_print_strings_001034d5();\n                return;\n              }\n            }\n            string_length = (int)index + 1;\n            loop_counter = (ulong)string_length;\n            is_true = minimum_string_length <= string_length;\n            output_buffer[index] = (char)character;\n            index = loop_counter;\n            if (is_true) goto joined_r0x0010341b;\n          } while( true );\n        }\n        loop_counter = 3;\n        break;\n      }\ncode_r0x001034d5:\n      unread_character;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103510",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_strings_00103510"
        },
        "FUN_00109180": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109180",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00109180"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_001091a0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001091a0",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_001091a0"
        },
        "FUN_0010293a": {
            "renaming": {
                "FUN_0010293a": "convert_unicode_display_0010293a",
                "param_1": "byteArray",
                "bVar1": "firstByte",
                "uVar2": "secondByte",
                "iVar3": "isInteractive",
                "uVar4": "offset",
                "uVar5": "thirdByte",
                "pbVar6": "endPtr"
            },
            "code": "\n\n\nuint convertUnicodeDisplay_0010293a(byte *byteArray)\n\n{\n  byte firstByte;\n  uint secondByte;\n  int isInteractive;\n  uint offset;\n  uint thirdByte;\n  byte *endPtr;\n  \n  offset = 2;\n  firstByte = *byteArray & 0x30;\n  if ((firstByte != 0x10) && (offset = 3, firstByte != 0x20)) {\n    offset = (-(uint)(firstByte == 0) & 0xfffffffe) + 4;\n  }\n  if (unicode_display == 3) {\n    endPtr = byteArray + offset;\n    putc(0x3c,_stdout);\n    printf(\"0x\");\n    do {\n      firstByte = *byteArray;\n      byteArray = byteArray + 1;\n      printf(\"%02x\",(ulong)firstByte);\n    } while (endPtr != byteArray);\n    putc(0x3e,_stdout);\n    return offset;\n  }\n  if (unicode_display < 4) {\n    if (unicode_display == 1) {\n      printf(\"%.1s\",byteArray);\n      return offset;\n    }\n    if (unicode_display == 2) {\nLAB_001029cd:\n      secondByte = (uint)byteArray[1];\n      thirdByte = (uint)*byteArray;\n      if (offset == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((thirdByte & 0xf) << 4 | (int)secondByte >> 2 & 0xfU),\n               (ulong)((secondByte & 3) << 6 | byteArray[2] & 0x3f));\n      }\n      else if (offset == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((thirdByte & 7) << 6 | (int)secondByte >> 2 & 0xfU),\n               (ulong)((secondByte & 3) << 6 | (int)(uint)byteArray[2] >> 2 & 0xfU),\n               (ulong)((byteArray[2] & 3) << 6 | byteArray[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*byteArray >> 2 & 7),\n               (ulong)((thirdByte & 3) << 6 | byteArray[1] & 0x3f));\n      }\n      if (unicode_display != 4) {\n        return offset;\n      }\n      isInteractive = isatty(1);\n      if (isInteractive == 0) {\n        return offset;\n      }\n      printf(\"\\x1b[0m\");\n      return offset;\n    }\n  }\n  else if (unicode_display == 4) {\n    isInteractive = isatty(1);\n    if (isInteractive != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,_stderr);\n  return offset;\n}\n\n",
            "called": [
                "isatty",
                "printf",
                "putc",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010293a",
            "calling": [
                "print_unicode_stream_body",
                "print_strings"
            ],
            "imported": false,
            "current_name": "convert_unicode_display_0010293a"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00103520": {
            "renaming": {
                "FUN_00103520": "decode_byte_stream_00103520",
                "param_1": "file",
                "param_2": "decoded_count",
                "param_3": "remaining_bytes",
                "param_4": "byte_stream",
                "bVar1": "byte_val",
                "pbVar2": "current_byte",
                "uVar3": "read_result",
                "uVar4": "read_byte",
                "uVar5": "decoded_value",
                "iVar6": "temp_count",
                "iVar7": "expected_bytes"
            },
            "code": "\nulong decode_byte_stream_00103520(_IO_FILE *file,long *decoded_count,int *remaining_bytes,byte **byte_stream)\n\n{\n  byte byte_val;\n  byte *current_byte;\n  uint read_result;\n  ulong read_byte;\n  ulong decoded_value;\n  int temp_count;\n  int expected_bytes;\n  \n  expected_bytes = encoding_bytes;\n  if (encoding_bytes < 1) {\n    decoded_value = 0;\n    if (encoding == 'L') {\n      decoded_value = get_char_cold();\n      return decoded_value;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (_IO_FILE *)0x0) {\n    decoded_value = 0;\n    temp_count = 0;\n    do {\n      if (*remaining_bytes == 0) {\n        return 0xffffffffffffffff;\n      }\n      temp_count = temp_count + 1;\n      *remaining_bytes = *remaining_bytes + -1;\n      current_byte = *byte_stream;\n      *byte_stream = current_byte + 1;\n      byte_val = *current_byte;\n      *decoded_count = *decoded_count + 1;\n      decoded_value = decoded_value << 8 | (ulong)byte_val;\n    } while (temp_count != expected_bytes);\n  }\n  else if (*remaining_bytes == 0) {\n    current_byte = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= current_byte) {\n      read_result = __uflow(file);\n      decoded_value = (ulong)(read_result & 0xff);\n      if (read_result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(current_byte + 1);\n    decoded_value = (ulong)*current_byte;\n    *decoded_count = *decoded_count + 1;\n    temp_count = 0;\n    if (expected_bytes == 1) goto LAB_00103610;\nLAB_00103574:\n    current_byte = (byte *)file->_IO_read_ptr;\n    if (current_byte < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(current_byte + 1);\n      byte_val = *current_byte;\n      *decoded_count = *decoded_count + 1;\n      decoded_value = decoded_value << 8 | (ulong)byte_val;\n      if (encoding_bytes < 3) goto LAB_00103610;\nLAB_001035a1:\n      current_byte = (byte *)file->_IO_read_ptr;\n      if (current_byte < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(current_byte + 1);\n        byte_val = *current_byte;\n        *decoded_count = *decoded_count + 1;\n        decoded_value = decoded_value << 8 | (ulong)byte_val;\n        if (encoding_bytes < 4) goto LAB_00103610;\n      }\n      else {\n        read_result = __uflow(file);\n        if (read_result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        read_byte = (ulong)(read_result & 0xff);\nLAB_00103717:\n        *decoded_count = *decoded_count + 1;\n        decoded_value = decoded_value << 8 | read_byte;\n        if (encoding_bytes < 4) goto LAB_00103610;\n        temp_count = *remaining_bytes;\n      }\n      expected_bytes = 3;\n      while( true ) {\n        if (temp_count == 0) {\n          while (current_byte = (byte *)file->_IO_read_ptr, current_byte < file->_IO_read_end) {\n            expected_bytes = expected_bytes + 1;\n            file->_IO_read_ptr = (char *)(current_byte + 1);\n            byte_val = *current_byte;\n            *decoded_count = *decoded_count + 1;\n            decoded_value = decoded_value << 8 | (ulong)byte_val;\n            if (encoding_bytes <= expected_bytes) goto LAB_00103610;\n          }\n          read_result = __uflow(file);\n          if (read_result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          read_byte = (ulong)(read_result & 0xff);\n        }\n        else {\n          current_byte = *byte_stream;\n          *remaining_bytes = temp_count + -1;\n          *byte_stream = current_byte + 1;\n          read_byte = (ulong)*current_byte;\n        }\n        *decoded_count = *decoded_count + 1;\n        expected_bytes = expected_bytes + 1;\n        decoded_value = decoded_value << 8 | read_byte;\n        if (encoding_bytes <= expected_bytes) break;\n        temp_count = *remaining_bytes;\n      }\n    }\n    else {\n      read_result = __uflow(file);\n      if (read_result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      read_byte = (ulong)(read_result & 0xff);\nLAB_001036dd:\n      *decoded_count = *decoded_count + 1;\n      decoded_value = decoded_value << 8 | read_byte;\n      if (2 < encoding_bytes) {\n        temp_count = *remaining_bytes;\n        if (temp_count == 0) goto LAB_001035a1;\n        current_byte = *byte_stream;\n        *remaining_bytes = temp_count + -1;\n        *byte_stream = current_byte + 1;\n        read_byte = (ulong)*current_byte;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    current_byte = *byte_stream;\n    *remaining_bytes = *remaining_bytes + -1;\n    *byte_stream = current_byte + 1;\n    decoded_value = (ulong)*current_byte;\nLAB_001036aa:\n    *decoded_count = *decoded_count + 1;\n    if (1 < encoding_bytes) {\n      temp_count = *remaining_bytes;\n      if (temp_count == 0) goto LAB_00103574;\n      current_byte = *byte_stream;\n      *remaining_bytes = temp_count + -1;\n      *byte_stream = current_byte + 1;\n      read_byte = (ulong)*current_byte;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (encoding == 'L') {\n    decoded_value = get_char_cold();\n    return decoded_value;\n  }\nLAB_0010361f:\n  if (encoding == 'l') {\n    decoded_value = decoded_value >> 8 & 0xff | (decoded_value & 0xff) << 8;\n  }\n  return decoded_value;\n}\n\n",
            "called": [
                "get_char.cold",
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103520",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "decode_byte_stream_00103520"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "get_char",
                "get_unicode_byte"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103240": {
            "renaming": {
                "FUN_00103240": "print_formatted_strings_00103240",
                "param_1": "filename",
                "param_2": "stream",
                "param_3": "offset",
                "param_4": "length",
                "param_5": "buffer",
                "pbVar1": "currentChar",
                "bVar2": "currentByte",
                "cVar3": "includeAllWhitespace",
                "lVar4": "currentOffset",
                "uVar5": "charCount",
                "iVar6": "unicodeDisplay",
                "__ptr": "formattedString",
                "__s": "stringBuffer",
                "uVar7": "charRead",
                "uVar8": "stringLength",
                "uVar9": "minStringLength",
                "uVar10": "charIndex",
                "uVar11": "charCount",
                "bVar12": "hasWhitespace",
                "local_80": "currentAddress",
                "local_60": "currentBuffer",
                "local_54": "currentLength",
                "local_50": "params",
                "local_3d": "unused"
            },
            "code": "\n\n\nvoid printFormattedStrings_00103240(long filename,long stream,long offset,int length,byte *buffer)\n\n{\n  byte *currentChar;\n  byte currentByte;\n  char includeAllWhitespace;\n  long currentOffset;\n  uint charCount;\n  int unicodeDisplay;\n  void *formattedString;\n  char *stringBuffer;\n  ulong charRead;\n  ulong stringLength;\n  uint minStringLength;\n  ulong charIndex;\n  uint charCount;\n  bool hasWhitespace;\n  long currentAddress;\n  byte *currentBuffer;\n  int currentLength;\n  long params [2];\n  undefined unused [13];\n  \n  currentBuffer = buffer;\n  currentLength = length;\n  params[0] = offset;\n  if (unicode_display == 0) {\n    stringBuffer = (char *)xmalloc(string_min + 1);\n    do {\n      while (currentOffset = params[0], stringLength = (ulong)string_min, string_min == 0) {\njoined_r0x001034ef:\n        if (print_filenames != '\\0') {\n          printf(\"%s: \",filename);\n        }\n        if (print_addresses == '\\0') {\n          stringBuffer[stringLength] = '\\0';\n          fputs(stringBuffer,_stdout);\n        }\n        else {\n          print_filename_and_address_part_0(currentOffset);\n          stringBuffer[stringLength] = '\\0';\n          fputs(stringBuffer,_stdout);\n        }\n        while (stringLength = get_char(stream,params,&currentLength,&currentBuffer), stringLength != 0xffffffffffffffff)\n        {\n          if (0xff < stringLength) {\nLAB_0010348e:\n            unget_part_char(stringLength,params,&currentLength,&currentBuffer);\n            break;\n          }\n          if (stringLength == 9) {\nLAB_00102438:\n            putc((int)stringLength,_stdout);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + stringLength * 2) & 0x10) == 0) {\n              if (((encoding != 'S') || ((long)stringLength < 0x80)) &&\n                 ((include_all_whitespace == '\\0' ||\n                  ((*(ushort *)(&_sch_istable + stringLength * 2) & 0x40) == 0)))) goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)stringLength,_stdout);\n          }\n        }\n        if (output_separator == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(output_separator,_stdout);\n        }\n      }\n      charRead = get_char(stream,params,&currentLength,&currentBuffer);\n      minStringLength = string_min;\n      if (charRead == 0xffffffffffffffff) goto LAB_001034be;\n      if (charRead < 0x100) {\n        if (charRead == 9) {\nLAB_001023f5:\n          *stringBuffer = (char)charRead;\n          if (minStringLength < 2) {\n            print_file_content_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + charRead * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)charRead < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + charRead * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *stringBuffer = (char)charRead;\n          if (minStringLength < 2) {\n            stringLength = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        charRead = get_char(stream,params,&currentLength,&currentBuffer);\n        minStringLength = string_min;\n        if (charRead == 0xffffffffffffffff) goto LAB_001034be;\n        if (charRead < 0x100) {\n          if (charRead == 9) {\nLAB_001023bb:\n            stringBuffer[1] = (char)charRead;\n            if (minStringLength < 3) {\n              print_formatted_strings_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + charRead * 2) & 0x10) == 0) {\n              if (((encoding != 'S') || ((long)charRead < 0x80)) &&\n                 ((include_all_whitespace == '\\0' ||\n                  ((*(ushort *)(&_sch_istable + charRead * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            stringBuffer[1] = (char)charRead;\n            if (minStringLength < 3) {\n              stringLength = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          charRead = get_char(stream,params,&currentLength,&currentBuffer);\n          minStringLength = string_min;\n          if (charRead == 0xffffffffffffffff) {\nLAB_001034be:\n            free(stringBuffer);\n            return;\n          }\n          if (charRead < 0x100) {\n            if (charRead == 9) {\nLAB_00102381:\n              stringBuffer[2] = (char)charRead;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + charRead * 2) & 0x10) == 0) {\n                if (((encoding != 'S') || ((long)charRead < 0x80)) &&\n                   ((include_all_whitespace == '\\0' ||\n                    ((*(ushort *)(&_sch_istable + charRead * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              stringBuffer[2] = (char)charRead;\n            }\n            if (minStringLength < 4) {\n              stringLength = 3;\n            }\n            else {\n              charIndex = 3;\n              do {\n                charRead = get_char(stream,params,&currentLength,&currentBuffer);\n                if (charRead == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < charRead) goto code_r0x001034d5;\n                if (((charRead != 9) && ((*(ushort *)(&_sch_istable + charRead * 2) & 0x10) == 0)) &&\n                   ((encoding != 'S' || ((long)charRead < 0x80)))) {\n                  if (include_all_whitespace == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + charRead * 2) & 0x40) == 0) {\n                    parse_and_print_strings_001034d5();\n                    return;\n                  }\n                }\n                minStringLength = (int)charIndex + 1;\n                stringLength = (ulong)minStringLength;\n                hasWhitespace = minStringLength < string_min;\n                stringBuffer[charIndex] = (char)charRead;\n                charIndex = stringLength;\n              } while (hasWhitespace);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      unget_part_char(charRead,params,&currentLength,&currentBuffer);\n    } while( true );\n  }\n  if (buffer != (byte *)0x0) {\n    stringLength = (ulong)length;\n    currentAddress = offset;\n    if (filename != 0) {\nLAB_0010249c:\n      minStringLength = string_min;\n      includeAllWhitespace = include_all_whitespace;\n      unicodeDisplay = unicode_display;\n      if (((unicode_display != 0) && (encoding == 'S')) && (encoding_bytes == 1)) {\n        if (stringLength != 0) {\n          charRead = 0;\n          charCount = 0;\n          charIndex = 0;\n          do {\n            while( true ) {\n              currentByte = buffer[charIndex];\n              if (currentByte != 9) break;\nLAB_0010252e:\n              charCount = 1;\nLAB_00102533:\n              if (charCount == 0) {\n                charRead = charIndex;\n              }\n              charCount = charCount + 1;\n              if (minStringLength <= charCount) goto LAB_001026a9;\n              charIndex = charIndex + charCount;\n              if (stringLength <= charIndex) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x10) != 0) {\n              if (0x7e < currentByte) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < currentByte) {\nLAB_0010264e:\n              if ((currentByte < 0xc0) ||\n                 (charCount = is_valid_utf8(buffer + charIndex,stringLength - charIndex), charCount == 0))\n              goto LAB_0010269a;\n              if (unicodeDisplay == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((includeAllWhitespace != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x40) != 0)) &&\n               (currentByte != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            charCount = 1;\nLAB_00102688:\n            charIndex = charIndex + charCount;\n            if (stringLength <= charIndex) goto LAB_001026a1;\n            charCount = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,_stderr);\n  }\n  if (stream != 0) {\n    if (filename != 0) {\nLAB_0010255f:\n      currentOffset = params[0];\n      if (((unicode_display != 0) && (encoding == 'S')) && (encoding_bytes == 1)) {\n        formattedString = (void *)xmalloc(string_min * 4 + 1);\n        print_unicode_stream_body(filename,currentOffset,stream,unused,0,formattedString);\n        free(formattedString);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,_stderr);\n  }\n  return;\nLAB_001026a1:\n  if (minStringLength != 0) {\nLAB_00102551:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_filename_and_address(filename,currentAddress + charRead);\n  for (; currentChar = buffer + charRead, charRead < stringLength; charRead = charRead + minStringLength) {\n    currentByte = *currentChar;\n    if (currentByte == 9) {\nLAB_00102708:\n      putc((uint)currentByte,_stdout);\n      minStringLength = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x10) == 0) {\n        if ((encoding != 'S') || (currentByte < 0x80)) {\n          if ((include_all_whitespace != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (currentByte < 0x7f) goto LAB_00102708;\n      }\n      unicodeDisplay = is_valid_utf8(currentChar,stringLength - charRead);\n      if ((unicodeDisplay == 0) || (unicode_display == 5)) break;\n      minStringLength = display_utf8_char(currentChar);\n    }\n  }\n  if (output_separator == (char *)0x0) {\n    putc(10,_stdout);\n  }\n  else {\n    fputs(output_separator,_stdout);\n  }\n  currentAddress = currentAddress + charRead;\n  stringLength = stringLength - charRead;\n  buffer = currentChar;\n  goto LAB_0010249c;\n}\n\n",
            "called": [
                "print_unicode_stream_body",
                "putc",
                "free",
                "fputs",
                "fwrite",
                "xmalloc",
                "is_valid_utf8",
                "display_utf8_char",
                "print_filename_and_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_formatted_strings_00103240"
        },
        "FUN_00109100": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109100",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00109100"
        },
        "FUN_00109188": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109188",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00109188"
        },
        "FUN_00104a60": {
            "renaming": {
                "FUN_00104a60": "report_and_exit_00104a60",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "localSize",
                "local_d0": "bufferPtr",
                "local_c8": "localPtr",
                "local_b8": "localBuffer",
                "local_b0": "localParam10",
                "local_a8": "localParam11",
                "local_a0": "localParam12",
                "local_98": "localParam13",
                "local_90": "localParam14",
                "local_88": "localParam1",
                "local_78": "localParam2",
                "local_68": "localParam3",
                "local_58": "localParam4",
                "local_48": "localParam5",
                "local_38": "localParam6",
                "local_28": "localParam7",
                "local_18": "localParam8"
            },
            "code": "\n\n\nvoid reportAndExit_00104a60(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 localSize;\n  undefined *bufferPtr;\n  undefined *localPtr;\n  undefined localBuffer [8];\n  undefined8 localParam10;\n  undefined8 localParam11;\n  undefined8 localParam12;\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (flag != '\\0') {\n    localParam1 = errorCode;\n    localParam2 = param2;\n    localParam3 = param3;\n    localParam4 = param4;\n    localParam5 = param5;\n    localParam6 = param6;\n    localParam7 = param7;\n    localParam8 = param8;\n  }\n  bufferPtr = &stack0x00000008;\n  bufferSize = 8;\n  localPtr = localBuffer;\n  localSize = 0x30;\n  localParam10 = param10;\n  localParam11 = param11;\n  localParam12 = param12;\n  localParam13 = param13;\n  localParam14 = param14;\n  report(param9,&bufferSize);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_and_exit_00104a60"
        },
        "FUN_00103a90": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a90",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00103a90"
        },
        "FUN_001091b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001091b8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001091b8"
        },
        "FUN_00109070": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109070",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00109070"
        },
        "FUN_00103a10": {
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103a10",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00103a10"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010282b": {
            "renaming": {
                "FUN_0010282b": "initialize_pointer_and_value_0010282b",
                "in_RAX": "dataPointer",
                "in_RCX": "outputPointer",
                "unaff_RBX": "inputValue",
                "tmp_0": "reorganizedValue"
            },
            "code": "\nvoid initializePointerAndValue_0010282b(void)\n\n{\n  undefined4 *dataPointer;\n  undefined8 *outputPointer;\n  undefined8 inputValue;\n  \n  reorganizedValue._0_1_ = (undefined)((ulong)inputValue >> 8);\n  reorganizedValue._2_1_ = (undefined)((ulong)inputValue >> 0x18);\n  reorganizedValue._1_1_ = (undefined)((ulong)inputValue >> 0x10);\n  *dataPointer = 3;\n  *outputPointer = &reorganizedValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010282b",
            "calling": [
                "unget_part_char"
            ],
            "imported": false,
            "current_name": "initialize_pointer_and_value_0010282b"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00109118": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109118",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00109118"
        },
        "FUN_001038b0": {
            "renaming": {
                "FUN_001038b0": "print_formatted_message_001038b0",
                "param_1": "formatString",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "executableName"
            },
            "code": "\n\n\nvoid printFormattedMessage_001038b0(char *formatString,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",executableName);\n  vfprintf(standardError,formatString,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001038b0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_formatted_message_001038b0"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_0010259a",
                "print_strings",
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_00103890": {
            "renaming": {
                "FUN_00103890": "print_file_information_00103890",
                "param_1": "filename",
                "param_2": "address",
                "print_filenames": "should_print_filenames",
                "print_addresses": "should_print_addresses",
                "print_filename_and_address_part_0": "print_filename_and_address"
            },
            "code": "\nvoid print_file_information_00103890(undefined8 filename,undefined8 address)\n\n{\n  if (should_print_filenames != '\\0') {\n    printf(\"%s: \",filename);\n  }\n  if (should_print_addresses == '\\0') {\n    return;\n  }\n  print_filename_and_address(address);\n  return;\n}\n\n",
            "called": [
                "print_filename_and_address.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103890",
            "calling": [
                "print_unicode_stream_body",
                "print_strings"
            ],
            "imported": false,
            "current_name": "print_file_information_00103890"
        },
        "FUN_00109110": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109110",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00109110"
        },
        "FUN_00109198": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109198",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00109198"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001091c8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001091c8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001091c8"
        },
        "FUN_00103810": {
            "renaming": {
                "FUN_00103810": "decode_and_update_param_00103810",
                "param_1": "input_value",
                "param_2": "output_value",
                "param_3": "encoding_type",
                "param_4": "result_data",
                "iVar1": "current_encoding_type",
                "lVar2": "num_bytes",
                "iVar3": "encoding_offset",
                "tmp_0": "decoded_value"
            },
            "code": "\nvoid decode_and_update_param_00103810(undefined8 input_value,long *output_value,int *encoding_type,long *result_data)\n\n{\n  int current_encoding_type;\n  long num_bytes;\n  int encoding_offset;\n  \n  num_bytes = (long)encoding_bytes;\n  if (encoding_bytes < 2) {\n    return;\n  }\n  encoding_offset = encoding_bytes + -1;\n  *output_value = *output_value - (long)encoding_offset;\n  current_encoding_type = *encoding_type;\n  if (current_encoding_type == 0) {\n    if (encoding != 'l') {\n      if (encoding < 'm') {\n        if (encoding == 'b') {\n          decoded_value._0_1_ = (undefined)input_value;\n          *encoding_type = 1;\n        }\n        else if (encoding < 'c') {\n          if (encoding == 'B') {\n            decoded_value._1_2_ = (ushort)input_value << 8 | (ushort)input_value >> 8;\n            decoded_value._0_1_ = (undefined)((ulong)input_value >> 0x10);\n            *encoding_type = 3;\n          }\n          else if (encoding == 'L') {\n            initialize_pointer_and_value_0010282b();\n            return;\n          }\n        }\n      }\n      *result_data = (long)&decoded_value;\n      return;\n    }\n    decoded_value._0_1_ = (undefined)((ulong)input_value >> 8);\n    *encoding_type = 1;\n    *result_data = (long)&decoded_value;\n  }\n  else {\n    *result_data = *result_data + (1 - num_bytes);\n    *encoding_type = encoding_offset + current_encoding_type;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010282b",
                "unget_part_char.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103810",
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "decode_and_update_param_00103810"
        },
        "FUN_00109080": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109080",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00109080"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001030c0": {
            "renaming": {
                "FUN_001030c0": "display_strings_from_file_001030c0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "programName",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr",
                "fprintf": "writeFormattedOutput",
                "dcgettext": "getMessage",
                "fputc": "writeCharacter",
                "free": "releaseMemory",
                "exit": "terminateProgram"
            },
            "code": "\nvoid displayStringsFromFile_001030c0(FILE *outputFile,int exitCode)\n\n{\n  long programName;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  programName = program_name;\n  message = (char *)getMessage(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  writeFormattedOutput(outputFile,message,programName);\n  message = (char *)getMessage(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  writeFormattedOutput(outputFile,message);\n  message = (char *)getMessage(0,\" The options are:\\n\",5);\n  writeFormattedOutput(outputFile,message);\n  message = (char *)getMessage(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  writeFormattedOutput(outputFile,message);\n  message = (char *)getMessage(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  writeFormattedOutput(outputFile,message);\n  programName = program_name;\n  if (program_name == 0) {\n    message = (char *)getMessage(0,\"Supported targets:\",5);\n    writeFormattedOutput(outputFile,message);\n  }\n  else {\n    message = (char *)getMessage(0,\"%s: supported targets:\",5);\n    writeFormattedOutput(outputFile,message,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    programName = *ptr;\n    ptr = ptr + 1;\n    if (programName == 0) break;\n    writeFormattedOutput(outputFile,\" %s\");\n  }\n  writeCharacter(10,outputFile);\n  releaseMemory(targetList);\n  if (exitCode == 0) {\n    message = (char *)getMessage(0,\"Report bugs to %s\\n\",5);\n    writeFormattedOutput(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminateProgram(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "bfd_target_list",
                "free",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_strings_from_file_001030c0"
        },
        "FUN_001090a0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090a0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_001090a0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "print_strings",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_001039e0": {
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001039e0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_001039e0"
        },
        "FUN_00109128": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109128",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_00109128"
        },
        "FUN_00109008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_00109008"
        },
        "FUN_00102330": {
            "renaming": {
                "FUN_00102330": "extract_and_print_strings_00102330",
                "param_1": "inputChar",
                "in_AX": "flags",
                "uVar1": "tempVar1",
                "uVar2": "index1",
                "uVar3": "index2",
                "in_R8D": "stringLimit",
                "unaff_R14": "outputString",
                "unaff_R15": "filename",
                "bVar4": "isLessThanLimit",
                "in_stack_00000010": "currentFilename",
                "in_stack_00000038": "tempVar2"
            },
            "code": "\n\n\nvoid extractAndPrintStrings_00102330(ulong inputChar)\n\n{\n  uint tempVar1;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint stringLimit;\n  char *outputString;\n  undefined8 filename;\n  bool isLessThanLimit;\n  undefined8 currentFilename;\n  undefined8 tempVar2;\n  \ncode_r0x00102330:\n  if ((encoding != 'S') || ((long)inputChar < 0x80)) {\n    if (include_all_whitespace == '\\0') goto code_r0x001034d5;\n    if ((flags & 0x40) == 0) {\n      parse_and_print_strings_001034d5();\n      return;\n    }\n  }\nLAB_00103400:\n  index1 = (ulong)stringLimit;\n  stringLimit = stringLimit + 1;\n  index2 = (ulong)stringLimit;\n  isLessThanLimit = stringLimit < string_min;\n  outputString[index1] = (char)inputChar;\n  if (isLessThanLimit) goto LAB_001033b3;\n  do {\n    if (print_filenames != '\\0') {\n      printf(\"%s: \",currentFilename);\n    }\n    if (print_addresses == '\\0') {\n      outputString[index2] = '\\0';\n      fputs(outputString,_stdout);\n    }\n    else {\n      print_filename_and_address_part_0(filename);\n      outputString[index2] = '\\0';\n      fputs(outputString,_stdout);\n    }\n    while (index2 = get_char(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nLAB_0010348e:\n        unget_part_char();\n        break;\n      }\n      if (index2 == 9) {\nLAB_00102438:\n        putc((int)index2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n          if (((encoding != 'S') || ((long)index2 < 0x80)) &&\n             ((include_all_whitespace == '\\0' ||\n              ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index2,_stdout);\n      }\n    }\n    if (output_separator == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(output_separator,_stdout);\n    }\n    while (index2 = (ulong)string_min, filename = tempVar2, string_min != 0) {\n      index2 = get_char();\n      tempVar1 = string_min;\n      if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nLAB_001023f5:\n          *outputString = (char)index2;\n          if (tempVar1 < 2) {\n            print_file_content_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)index2 < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputString = (char)index2;\n          if (tempVar1 < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = get_char();\n        tempVar1 = string_min;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_001023bb:\n          outputString[1] = (char)index2;\n          if (tempVar1 < 3) {\n            print_formatted_strings_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)index2 < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          outputString[1] = (char)index2;\n          if (tempVar1 < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = get_char();\n        tempVar1 = string_min;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_00102381:\n          outputString[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)index2 < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          outputString[2] = (char)index2;\n        }\n        if (tempVar1 < 4) {\n          index2 = 3;\n          break;\n        }\n        stringLimit = 3;\nLAB_001033b3:\n        inputChar = get_char();\n        if (inputChar == 0xffffffffffffffff) {\nLAB_001034be:\n          free(outputString);\n          return;\n        }\n        if (inputChar < 0x100) {\n          if ((inputChar == 9) ||\n             (flags = *(ushort *)(&_sch_istable + inputChar * 2), (flags & 0x10) != 0))\n          goto LAB_00103400;\n          goto code_r0x00102330;\n        }\n      }\ncode_r0x001034d5:\n      unget_part_char();\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "extract_and_print_strings_00102330"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00109000": {
            "renaming": {},
            "code": "\n\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __uflow@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109000",
            "calling": [
                "__uflow"
            ],
            "imported": false,
            "current_name": "FUN_00109000"
        },
        "FUN_00109088": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109088",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00109088"
        },
        "FUN_00109090": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109090",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00109090"
        },
        "FUN_00102853": {
            "renaming": {
                "FUN_00102853": "print_file_address_00102853",
                "param_1": "file_name",
                "print_addresses": "should_print_addresses",
                "print_filename_and_address_part_0": "print_file_name_and_address_part_0"
            },
            "code": "\nvoid print_file_address_00102853(undefined8 file_name)\n\n{\n  printf(\"%s: \",file_name);\n  if (should_print_addresses == '\\0') {\n    return;\n  }\n  print_file_name_and_address_part_0();\n  return;\n}\n\n",
            "called": [
                "printf",
                "print_filename_and_address.part.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102853",
            "calling": [
                "print_filename_and_address"
            ],
            "imported": false,
            "current_name": "print_file_address_00102853"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001090b0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090b0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001090b0"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001027e2": {
            "renaming": {
                "FUN_001027e2": "update_and_add_001027e2",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "flag",
                "param_4": "result_ptr",
                "in_RAX": "ptr_to_data"
            },
            "code": "\nvoid update_and_add_001027e2(int first_param,int second_param,long flag,long *result_ptr)\n\n{\n  int *ptr_to_data;\n  \n  *result_ptr = *result_ptr + (1 - flag);\n  *ptr_to_data = first_param + second_param;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027e2",
            "calling": [
                "unget_part_char"
            ],
            "imported": false,
            "current_name": "update_and_add_001027e2"
        },
        "FUN_001034d5": {
            "renaming": {
                "FUN_001034d5": "parse_and_print_strings_001034d5",
                "unaff_R14": "outputBuffer",
                "uVar1": "charCode",
                "uVar2": "nextCharCode",
                "uVar3": "stringLength",
                "uVar4": "index",
                "in_stack_00000010": "filename",
                "in_stack_00000038": "address",
                "bVar5": "shouldContinue"
            },
            "code": "\n\n\nvoid parseAndPrintStrings_001034d5(void)\n\n{\n  ulong charCode;\n  ulong nextCharCode;\n  uint stringLength;\n  ulong index;\n  char *outputBuffer;\n  bool shouldContinue;\n  undefined8 filename;\n  undefined8 address;\n  \ncode_r0x001034d5:\n  unget_part_char();\n  do {\n    charCode = (ulong)string_min;\n    if (string_min != 0) {\n      charCode = get_char();\n      stringLength = string_min;\n      if (charCode == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < charCode) goto code_r0x001034d5;\n      if (charCode == 9) {\nLAB_001023f5:\n        *outputBuffer = (char)charCode;\n        if (stringLength < 2) {\n          print_file_content_001034fa();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + charCode * 2) & 0x10) == 0) {\n          if (((encoding == 'S') && (0x7f < (long)charCode)) ||\n             ((include_all_whitespace != '\\0' &&\n              ((*(ushort *)(&_sch_istable + charCode * 2) & 0x40) != 0)))) goto LAB_001023f5;\n          goto code_r0x001034d5;\n        }\n        *outputBuffer = (char)charCode;\n        if (stringLength < 2) {\n          charCode = 1;\n          goto joined_r0x001034ef;\n        }\n      }\n      charCode = get_char();\n      stringLength = string_min;\n      if (charCode == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < charCode) goto code_r0x001034d5;\n      if (charCode == 9) {\nLAB_001023bb:\n        outputBuffer[1] = (char)charCode;\n        if (stringLength < 3) {\n          print_formatted_strings_00103510();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + charCode * 2) & 0x10) == 0) {\n          if (((encoding == 'S') && (0x7f < (long)charCode)) ||\n             ((include_all_whitespace != '\\0' &&\n              ((*(ushort *)(&_sch_istable + charCode * 2) & 0x40) != 0)))) goto LAB_001023bb;\n          goto code_r0x001034d5;\n        }\n        outputBuffer[1] = (char)charCode;\n        if (stringLength < 3) {\n          charCode = 2;\n          goto joined_r0x001034ef;\n        }\n      }\n      charCode = get_char();\n      stringLength = string_min;\n      if (charCode == 0xffffffffffffffff) {\nLAB_001034be:\n        free(outputBuffer);\n        return;\n      }\n      if (0xff < charCode) goto code_r0x001034d5;\n      if (charCode == 9) {\nLAB_00102381:\n        outputBuffer[2] = (char)charCode;\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + charCode * 2) & 0x10) == 0) {\n          if (((encoding == 'S') && (0x7f < (long)charCode)) ||\n             ((include_all_whitespace != '\\0' &&\n              ((*(ushort *)(&_sch_istable + charCode * 2) & 0x40) != 0)))) goto LAB_00102381;\n          goto code_r0x001034d5;\n        }\n        outputBuffer[2] = (char)charCode;\n      }\n      if (stringLength < 4) {\n        charCode = 3;\n      }\n      else {\n        index = 3;\n        do {\n          nextCharCode = get_char();\n          if (nextCharCode == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < nextCharCode) goto code_r0x001034d5;\n          if (((nextCharCode != 9) && ((*(ushort *)(&_sch_istable + nextCharCode * 2) & 0x10) == 0)) &&\n             ((encoding != 'S' || ((long)nextCharCode < 0x80)))) {\n            if (include_all_whitespace == '\\0') goto code_r0x001034d5;\n            if ((*(ushort *)(&_sch_istable + nextCharCode * 2) & 0x40) == 0) {\n              parseAndPrintStrings_001034d5();\n              return;\n            }\n          }\n          stringLength = (int)index + 1;\n          charCode = (ulong)stringLength;\n          shouldContinue = stringLength < string_min;\n          outputBuffer[index] = (char)nextCharCode;\n          index = charCode;\n        } while (shouldContinue);\n      }\n    }\njoined_r0x001034ef:\n    if (print_filenames != '\\0') {\n      printf(\"%s: \",filename);\n    }\n    if (print_addresses == '\\0') {\n      outputBuffer[charCode] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    else {\n      print_filename_and_address_part_0(address);\n      outputBuffer[charCode] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    while (charCode = get_char(), charCode != 0xffffffffffffffff) {\n      if (0xff < charCode) {\nLAB_0010348e:\n        unget_part_char();\n        break;\n      }\n      if (charCode == 9) {\nLAB_00102438:\n        putc((int)charCode,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + charCode * 2) & 0x10) == 0) {\n          if (((encoding != 'S') || ((long)charCode < 0x80)) &&\n             ((include_all_whitespace == '\\0' ||\n              ((*(ushort *)(&_sch_istable + charCode * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)charCode,_stdout);\n      }\n    }\n    if (output_separator == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(output_separator,_stdout);\n    }\n  } while( true );\n}\n\n",
            "called": [
                "unget_part_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034d5",
            "calling": [
                "print_strings.cold",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "parse_and_print_strings_001034d5"
        },
        "FUN_00109138": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109138",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00109138"
        },
        "FUN_00109018": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109018",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00109018"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "report",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00109130": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109130",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_00109130"
        },
        "FUN_00109010": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109010",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00109010"
        },
        "FUN_00109098": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109098",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00109098"
        }
    },
    "used_tokens": 53016,
    "layers": [
        [
            "FUN_00103a50",
            "FUN_0010286f",
            "FUN_00102000",
            "FUN_0010290e",
            "FUN_001028b2",
            "FUN_00102771",
            "FUN_001034fa",
            "FUN_001039b0",
            "FUN_00103aa0",
            "FUN_00102020",
            "FUN_00103910",
            "FUN_00103510",
            "FUN_0010293a",
            "FUN_00103520",
            "FUN_00104a60",
            "FUN_0010282b",
            "FUN_001038b0",
            "FUN_00103890",
            "FUN_001030c0",
            "FUN_00102853",
            "FUN_001027e2"
        ],
        [
            "FUN_00103810"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_0010259a",
            "FUN_00103240",
            "FUN_00102330"
        ]
    ],
    "locked_functions": []
}