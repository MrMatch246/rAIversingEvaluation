{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_data_in_struct_00113dfe",
                "param_1": "structPointer",
                "param_2": "newValue",
                "lVar1": "structOffset"
            },
            "code": "\nvoid updateDataInStruct_00113dfe(undefined4 structPointer,undefined newValue)\n\n{\n  long structOffset;\n  \n  structOffset = FUN_00112904(3,structPointer);\n  if (structOffset != 0) {\n    *(undefined *)(structOffset + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "update_data_in_struct_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "add_string_to_existing_0010ab4d",
                "param_1": "data_ptr",
                "param_2": "input_str",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar1": "ptr",
                "lVar2": "ptr2",
                "auVar3": "result_var1",
                "sVar4": "input_length",
                "pcVar5": "existing_str",
                "sVar6": "existing_length",
                "auVar7": "result_var2"
            },
            "code": "\nundefined  [16] addStringToExisting_0010ab4d(long data_ptr,char *input_str,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  ulong ptr;\n  long ptr2;\n  undefined result_var1 [16];\n  size_t input_length;\n  char *existing_str;\n  size_t existing_length;\n  undefined result_var2 [16];\n  \n  ptr = *(ulong *)(data_ptr + 0x60);\n  if ((ptr != 0) && (*(long *)(ptr + 0x20) != 0)) {\n    existing_str = *(char **)(ptr + 0x30);\n    input_length = strlen(input_str);\n    if (existing_str == (char *)0x0) {\n      existing_str = (char *)xmalloc(input_length + 3);\n      *existing_str = '\\0';\n    }\n    else {\n      existing_length = strlen(existing_str);\n      existing_str = (char *)xrealloc(existing_str,input_length + 4 + existing_length);\n    }\n    input_length = strlen(existing_str);\n    sprintf(existing_str + input_length,\"%s::\",input_str);\n    ptr2 = *(long *)(data_ptr + 0x60);\n    *(char **)(ptr2 + 0x30) = existing_str;\n    result_var2._1_7_ = (undefined7)((ulong)ptr2 >> 8);\n    result_var2[0] = 1;\n    result_var2._8_8_ = unused_param2;\n    return result_var2;\n  }\n  result_var1._8_8_ = 0;\n  result_var1._0_8_ = ptr;\n  return result_var1 << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "sprintf",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "add_string_to_existing_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "extract_debug_name_type_0010c218",
                "param_1": "fileContext",
                "param_2": "condition_1",
                "param_3": "condition_2",
                "uVar1": "errorMessage",
                "lVar2": "tempVar1",
                "pauVar3": "buffer",
                "lVar4": "tempVar2"
            },
            "code": "\n\n\nlong extractDebugNameType_0010c218(long fileContext,long condition_1,long condition_2)\n\n{\n  undefined8 errorMessage;\n  long tempVar1;\n  undefined (*buffer) [16];\n  long tempVar2;\n  \n  if ((condition_1 != 0) && (condition_2 != 0)) {\n    if ((*(long *)(fileContext + 8) == 0) || (*(long *)(fileContext + 0x10) == 0)) {\n      errorMessage = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      tempVar1 = FUN_00112904(0x16,0);\n      if (tempVar1 != 0) {\n        buffer = (undefined (*) [16])xmalloc(0x10);\n        tempVar2 = *(long *)(fileContext + 0x10);\n        *buffer = ZEXT816(0);\n        *(long *)(*buffer + 8) = condition_2;\n        *(undefined (**) [16])(tempVar1 + 0x10) = buffer;\n        tempVar2 = FUN_00112925(tempVar2 + 0x10,condition_1,0,3);\n        if (tempVar2 != 0) {\n          *(long *)(tempVar2 + 0x20) = tempVar1;\n          *(long *)*buffer = tempVar2;\n          return tempVar1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "extract_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_001279e8 = FUN_00113f20();\n  DAT_001279e0 = FUN_00113f20();\n  DAT_001279d8 = FUN_00113f20();\n  DAT_001279d0 = FUN_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278c8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = FUN_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    FUN_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = FUN_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = FUN_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    FUN_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "textdomain",
                "dup",
                "bfd_set_error_program_name",
                "mkstemp",
                "bfd_scan_arch",
                "FUN_00108c86",
                "fclose",
                "bfd_set_default_target",
                "fread",
                "bfd_errmsg",
                "FUN_00114190",
                "fseek",
                "FUN_00108916",
                "free",
                "FUN_0011a390",
                "htab_create_alloc",
                "getopt_long",
                "bfd_get_error",
                "getc",
                "xmalloc_set_program_name",
                "FUN_00119dd0",
                "FUN_00114c80",
                "filename_cmp",
                "strtol",
                "strcasecmp",
                "htab_find_slot",
                "FUN_00114d60",
                "FUN_001054af",
                "setlocale",
                "xstrdup",
                "strncasecmp",
                "FUN_00113f50",
                "FUN_00108800",
                "FUN_00114c20",
                "strtoul",
                "memmove",
                "FUN_00113fb0",
                "free",
                "strcpy",
                "memcpy",
                "FUN_001126c0",
                "FUN_00119940",
                "xmalloc",
                "strncpy",
                "FUN_00108d9a",
                "fprintf",
                "FUN_00119ed0",
                "bindtextdomain",
                "unlink_if_ordinary",
                "FUN_00108a2a",
                "fopen",
                "FUN_00119970",
                "strchr",
                "FUN_0011a480",
                "FUN_00113fe0",
                "ftell",
                "FUN_00114460",
                "strcmp",
                "ferror",
                "FUN_00115970",
                "FUN_00114cf0",
                "bfd_init",
                "htab_elements",
                "strlen",
                "__errno_location",
                "malloc",
                "FUN_001199d0",
                "strerror",
                "xexit",
                "stat",
                "FUN_00114690",
                "FUN_00113f20",
                "xcalloc",
                "xrealloc",
                "FUN_00108898"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugger_0010be88",
                "param_1": "blockAddress",
                "param_2": "currentBlock",
                "param_3": "someParam",
                "param_4": "someVar",
                "puVar1": "nextBlockPtr",
                "uVar2": "result",
                "puVar3": "blockPtr",
                "puVar4": "tempPtr",
                "lVar5": "tempVar",
                "puVar6": "lastBlockPtr",
                "puVar7": "tempPtr2",
                "bVar8": "flag",
                "auVar9": "returnData"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugger_0010be88(long blockAddress,undefined8 currentBlock,undefined8 someParam,undefined8 someVar)\n\n{\n  undefined8 *nextBlockPtr;\n  undefined8 result;\n  undefined4 *blockPtr;\n  undefined8 *tempPtr;\n  long tempVar;\n  undefined8 *lastBlockPtr;\n  undefined4 *tempPtr2;\n  byte flag;\n  undefined returnData [16];\n  \n  flag = 0;\n  if ((*(long *)(blockAddress + 8) == 0) || (*(long *)(blockAddress + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    blockPtr = (undefined4 *)xmalloc(0x30);\n    tempPtr2 = blockPtr;\n    for (tempVar = 0xc; tempVar != 0; tempVar = tempVar + -1) {\n      *tempPtr2 = 0;\n      tempPtr2 = tempPtr2 + (ulong)flag * -2 + 1;\n    }\n    tempVar = *(long *)(blockAddress + 0x20);\n    *(undefined8 *)(blockPtr + 6) = currentBlock;\n    *(undefined8 *)(blockPtr + 8) = 0xffffffffffffffff;\n    *(long *)(blockPtr + 2) = tempVar;\n    nextBlockPtr = *(undefined8 **)(tempVar + 0x10);\n    lastBlockPtr = (undefined8 *)(tempVar + 0x10);\n    while (tempPtr = nextBlockPtr, tempPtr != (undefined8 *)0x0) {\n      lastBlockPtr = tempPtr;\n      nextBlockPtr = (undefined8 *)*tempPtr;\n    }\n    *lastBlockPtr = blockPtr;\n    result = 1;\n    *(undefined4 **)(blockAddress + 0x20) = blockPtr;\n  }\n  returnData._8_8_ = someVar;\n  returnData._0_8_ = result;\n  return returnData;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "start_block_debugger_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "format_struct_field_0010ba08",
                "param_1": "structPointer",
                "param_2": "fieldName",
                "param_3": "fieldValue",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "myChar",
                "iVar2": "myInt",
                "lVar3": "myLong",
                "__s": "warningMessage",
                "sVar4": "inputStringLength",
                "sVar5": "fieldNameLength",
                "sVar6": "warningMessageLength",
                "__s_00": "formattedString",
                "uVar7": "warningText",
                "uVar8": "returnVal",
                "pcVar9": "fieldTypeString"
            },
            "code": "\nundefined8\nformatStructField_0010ba08(undefined8 *structPointer,char *fieldName,undefined8 fieldValue,ulong fieldSize,int fieldType)\n\n{\n  char myChar;\n  int myInt;\n  long myLong;\n  char *warningMessage;\n  size_t inputStringLength;\n  size_t fieldNameLength;\n  size_t warningMessageLength;\n  char *formattedString;\n  undefined8 warningText;\n  undefined8 returnVal;\n  char *fieldTypeString;\n  \n  myChar = *(char *)(structPointer[0xc] + 0x1c);\n  myInt = *(int *)(structPointer[0xc] + 0x18);\n  warningMessage = (char *)FUN_00109b2f();\n  if (*(char **)(structPointer[0xc] + 0x20) == (char *)0x0) {\n    returnVal = 0;\n  }\n  else {\n    inputStringLength = strlen(*(char **)(structPointer[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    warningMessageLength = strlen(warningMessage);\n    formattedString = (char *)xmalloc(inputStringLength + 0x32 + fieldNameLength + warningMessageLength);\n    if (fieldType == 1) {\n      fieldTypeString = \"/1\";\n    }\n    else {\n      fieldTypeString = \"/0\";\n      if ((fieldType != 2) && (fieldTypeString = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(myInt * 8), fieldSize == 0)) {\n      returnVal = *(undefined8 *)*structPointer;\n      warningText = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warningText,returnVal,fieldName);\n    }\n    sprintf(formattedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(structPointer[0xc] + 0x20),fieldName,fieldTypeString,warningMessage,\n            fieldValue,fieldSize);\n    free(*(void **)(structPointer[0xc] + 0x20));\n    myLong = structPointer[0xc];\n    *(char **)(myLong + 0x20) = formattedString;\n    if (myChar != '\\0') {\n      *(undefined *)(myLong + 0x1c) = 1;\n    }\n    returnVal = CONCAT71((int7)((ulong)myLong >> 8),1);\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_struct_field_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "inputData",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "code",
                "cVar1": "headerChar",
                "__s": "string",
                "sVar5": "stringLength",
                "pcVar6": "newString",
                "cVar3": "charFlag",
                "lVar2": "structPointer",
                "uVar8": "returnValue",
                "uVar9": "loopIterator",
                "uVar10": "lastIndex",
                "uVar4": "loopCounter",
                "lVar7": "reallocPointer"
            },
            "code": "\nundefined8 processData_0010aa53(long inputData,undefined8 value,char flag,int code)\n\n{\n  char headerChar;\n  long structPointer;\n  char charFlag;\n  uint loopCounter;\n  char *string;\n  size_t stringLength;\n  char *newString;\n  long reallocPointer;\n  undefined8 returnValue;\n  ulong loopIterator;\n  ulong lastIndex;\n  \n  headerChar = *(char *)(*(long *)(inputData + 0x60) + 0x1c);\n  string = (char *)FUN_00109b2f();\n  stringLength = strlen(string);\n  newString = (char *)xmalloc(stringLength + 0x19);\n  *newString = flag + '0';\n  if (code == 1) {\n    charFlag = '1';\n  }\n  else {\n    charFlag = '0';\n    if ((code != 2) && (charFlag = '2', code != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = charFlag;\n  sprintf(newString + 2,\"%ld,%s;\",value);\n  free(string);\n  structPointer = *(long *)(inputData + 0x60);\n  returnValue = 0;\n  if ((structPointer != 0) && (*(long *)(structPointer + 0x20) != 0)) {\n    structPointer = *(long *)(structPointer + 0x28);\n    lastIndex = 0;\n    if (structPointer != 0) {\n      loopCounter = 0;\n      do {\n        loopIterator = (ulong)loopCounter;\n        lastIndex = (ulong)loopCounter;\n        loopCounter = loopCounter + 1;\n      } while (*(long *)(structPointer + loopIterator * 8) != 0);\n    }\n    reallocPointer = xrealloc(structPointer,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(reallocPointer + lastIndex * 8) = newString;\n    *(undefined8 *)(reallocPointer + (ulong)((int)lastIndex + 1) * 8) = 0;\n    structPointer = *(long *)(inputData + 0x60);\n    *(long *)(structPointer + 0x28) = reallocPointer;\n    if (headerChar != '\\0') {\n      *(undefined *)(structPointer + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "FUNC_0011173a"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined FUNC_0011173a(undefined8 param_1,long *param_2,int param_3,int param_4,ulong param_5,\n                      char *param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  void *__ptr;\n  char cVar3;\n  undefined uVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long *plVar7;\n  char *pcVar8;\n  undefined8 uVar9;\n  long lVar10;\n  long lVar11;\n  long lVar12;\n  long **pplVar13;\n  ulong uVar14;\n  ulong uVar15;\n  char *pcVar16;\n  uint uVar17;\n  long **pplVar18;\n  double dVar19;\n  char *local_48;\n  long **local_40 [2];\n  \n  if (param_2[4] != 0) {\n    if (((param_3 == 100) && (*param_6 != '\\0')) && (param_2[5] == param_5)) goto LAB_00111a06;\n    cVar3 = FUN_0010bbd3(param_1);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_2 + 0x44) = 0;\n    *(undefined4 *)(param_2 + 8) = 0;\n    param_2[9] = param_2[4];\n    if (*(char *)(param_2 + 1) == '\\0') {\n      param_2[6] = param_2[5];\n    }\n    *(undefined4 *)(param_2 + 0x10) = 1;\n    puVar6 = (undefined8 *)xmalloc(8);\n    param_2[0x11] = (long)puVar6;\n    *puVar6 = 0;\n    param_2[4] = 0;\n  }\n  strlen(param_6);\n  if (param_3 == 0x84) {\nLAB_00111ab7:\n    uVar4 = FUN_00108f08(param_1,param_6);\n    return uVar4;\n  }\n  if (param_3 < 0x85) {\n    if (param_3 == 0x3c) {\n      iVar5 = strcmp(param_6,\"gcc2_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 2;\n        return 1;\n      }\n      iVar5 = strcmp(param_6,\"gcc_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_2 + 0x44) = 1;\n      return 1;\n    }\n    if (param_3 < 0x3d) {\n      if (param_3 == 0x24) {\n        if (*param_6 == '\\0') {\n          if (*(char *)(param_2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_2 + 1) != '\\0') {\n            param_5 = param_5 + param_2[7];\n          }\n          cVar3 = FUN_0010c1c6(param_1,param_2);\n          if (cVar3 != '\\0') {\n            cVar3 = FUN_0010be1a(param_1,param_5);\n            if (cVar3 != '\\0') {\n              *(undefined *)(param_2 + 0xc) = 0;\n              param_2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_2 + 0xc) != '\\0') &&\n           ((param_5 < (ulong)param_2[0xd] || (param_2[0xd] == 0xffffffffffffffff)))) {\n          param_2[0xd] = param_5;\n        }\n      }\n      else if (param_3 < 0x25) {\n        if (param_3 == 0xc) {\n          return 1;\n        }\n        if (param_3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param_3 == 0x2a) {\n          return 1;\n        }\n        if (param_3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param_3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param_2 + 0xc) != '\\0') {\n          uVar14 = param_5;\n          if (((*param_6 != '\\0') && (uVar15 = param_2[0xd], uVar15 != 0xffffffffffffffff)) &&\n             (uVar14 = uVar15, param_5 < uVar15)) {\n            uVar14 = param_5;\n          }\n          cVar3 = FUN_0010c1c6(param_1,param_2);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          cVar3 = FUN_0010be1a(param_1,uVar14);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_2 + 0xc) = 0;\n          param_2[0xd] = -1;\n        }\n        if (*param_6 == '\\0') {\n          return 1;\n        }\n        __ptr = (void *)param_2[4];\n        if (__ptr == (void *)0x0) {\n          lVar12 = xstrdup(param_6);\n          param_2[4] = lVar12;\n        }\n        else {\n          if (*param_6 == '/') {\n            lVar12 = xstrdup(param_6);\n          }\n          else {\n            lVar12 = concat(__ptr,param_6,0);\n          }\n          param_2[4] = lVar12;\n          free(__ptr);\n        }\n        param_2[5] = param_5;\n        return 1;\n      }\n      if (param_3 < 0x65) {\n        if (param_3 == 0x44) {\n          lVar12 = 0;\n          if (*(char *)(param_2 + 0xc) != '\\0') {\n            lVar12 = param_2[7];\n          }\n          uVar4 = FUN_0010bf86(param_1,(long)param_4,lVar12 + param_5);\n          return uVar4;\n        }\n        if (param_3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param_3 == 0x82) {\n        plVar7 = (long *)xmalloc();\n        iVar5 = *(int *)(param_2 + 0x10);\n        lVar10 = param_2[10];\n        lVar11 = param_2[0xb];\n        plVar7[5] = 0;\n        lVar12 = param_2[0x11];\n        *(int *)(plVar7 + 4) = iVar5;\n        uVar17 = iVar5 + 1;\n        *(uint *)(param_2 + 0x10) = uVar17;\n        *plVar7 = lVar11;\n        plVar7[1] = lVar10;\n        plVar7[2] = (long)param_6;\n        plVar7[3] = param_5;\n        param_2[10] = (long)plVar7;\n        param_2[0xb] = (long)plVar7;\n        lVar12 = xrealloc(lVar12,(ulong)uVar17 << 3);\n        uVar17 = *(uint *)(plVar7 + 4);\n        param_2[0x11] = lVar12;\n        *(undefined8 *)(lVar12 + (ulong)uVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pcVar8 = strchr(param_6,0x3a);\n    if ((pcVar8 != (char *)0x0) && ((pcVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_2 + 0xc) != '\\0') {\n        uVar14 = param_2[0xd];\n        uVar15 = param_5;\n        if ((uVar14 != 0xffffffffffffffff) && (uVar15 = uVar14, param_5 < uVar14)) {\n          uVar15 = param_5;\n        }\n        cVar3 = FUN_0010c1c6(param_1,param_2);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        cVar3 = FUN_0010be1a(param_1,uVar15);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        param_2[0xd] = -1;\n      }\n      if (*(char *)(param_2 + 1) != '\\0') {\n        param_2[7] = param_5;\n      }\n      *(undefined *)(param_2 + 0xc) = 1;\n    }\n    local_48 = strchr(param_6,0x3a);\n    if (local_48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_48[1] == ':') goto code_r0x00111cc7;\n    if (*param_6 == '$') {\n      cVar3 = param_6[1];\n      pcVar16 = \"eh_throw\";\n      if (cVar3 != 'e') {\n        if (cVar3 < 'f') {\n          if ((cVar3 != 'X') && (cVar3 != '_')) {\nLAB_00111d1a:\n            uVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(param_6,uVar9);\n          }\n        }\n        else {\n          pcVar16 = \"this\";\n          if (cVar3 == 't') goto LAB_00111d62;\n          if (cVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pcVar16 = (char *)0x0;\n      if ((param_6 != local_48) && ((*param_6 != ' ' || (local_48 != param_6 + 1)))) {\n        pcVar16 = (char *)FUN_00109a0b(param_6,(int)local_48 - (int)param_6);\n      }\n    }\nLAB_00111d62:\n    bVar2 = local_48[1];\n    pcVar8 = local_48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)bVar2 * 2) >> 2) & 1 |\n        (bVar2 == 0x2d || bVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (bVar2 == 0) goto switchD_00111de5_caseD_44;\n    pcVar8 = local_48 + 2;\n    cVar3 = local_48[1];\n    switch(cVar3) {\n    case 'C':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      pcVar8 = \"debug_record_label: not implemented\";\n      if (lVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      cVar3 = FUN_0010bc80(param_1,pcVar16,lVar12,cVar3 == 'F',param_5);\n      if (cVar3 != '\\0') {\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) goto LAB_0011208f;\n      lVar10 = param_2[3];\n      plVar7 = (long *)param_2[2];\n      cVar3 = *(char *)(*(long *)(*param_2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param_3 == 0x24) {\n        local_48 = pcVar8;\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      break;\n    case 'S':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      cVar3 = local_48[2];\n      if (cVar3 == 't') {\n        pcVar8 = local_48 + 3;\n      }\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      cVar1 = *(char *)(param_2 + 0x35);\n      plVar7 = (long *)FUN_0010c6be(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] != (long **)0x0) {\n        *local_40[0] = plVar7;\n      }\n      if (cVar1 != '\\0') goto LAB_001122f0;\n      pplVar13 = (long **)(param_2 + 0x34);\n      pplVar18 = (long **)param_2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pcVar8 = local_48 + 3;\n      if (((local_48[2] != '\\0') && (pcVar8 = local_48 + 4, local_48[3] == 'n')) &&\n         (pcVar8 = local_48 + 5, pcVar16 = local_48 + 4, local_48 = pcVar8, *pcVar16 == '0')) {\n        for (; pcVar8 = local_48, *local_48 != '\\0'; local_48 = local_48 + 1) {\n          if (*local_48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      break;\n    case 'c':\n      if (local_48[2] == '=') {\n        pcVar8 = local_48 + 4;\n        cVar3 = local_48[3];\n        local_48 = pcVar8;\n        if (cVar3 == 'i') {\n          lVar12 = strtol(pcVar8,(char **)0x0,10);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar10 = FUN_00112996(param_1,pcVar16,4);\n          if (lVar10 != 0) {\n            *(long *)(lVar10 + 0x20) = (long)(int)lVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'r') {\n          dVar19 = strtod(pcVar8,(char **)0x0);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar12 = FUN_00112996(param_1,pcVar16,5);\n          if (lVar12 != 0) {\n            *(double *)(lVar12 + 0x20) = dVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'e') {\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n          if (lVar12 == 0) {\n            return 0;\n          }\n          pcVar8 = local_48;\n          if (*local_48 == ',') {\n            lVar10 = strtol(local_48,(char **)0x0,10);\n            if (pcVar16 == (char *)0x0) {\n              return 0;\n            }\n            lVar11 = FUN_00112996(param_1,pcVar16,6);\n            if (lVar11 != 0) {\n              plVar7 = (long *)xmalloc(0x10);\n              *plVar7 = lVar12;\n              plVar7[1] = (long)(int)lVar10;\n              *(long **)(lVar11 + 0x20) = plVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_48[2] == 'F') {\n        local_48 = local_48 + 3;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        if (lVar12 == 0) {\n          return 0;\n        }\n        uVar9 = FUN_00113ce0(lVar12,0,0);\n        lVar12 = FUN_00113d3a(uVar9);\n      }\n      else {\n        local_48 = pcVar8;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      }\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 1;\n      break;\n    case 'r':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 5;\nLAB_001123e8:\n      cVar3 = FUN_0010c139(param_1,param_2,pcVar16,lVar12,uVar9,param_5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      plVar7 = (long *)FUN_0010c218(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    case 'v':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n    }\n    cVar3 = FUN_0010bd62(param_1,pcVar16,lVar12,uVar9,param_5);\n    goto joined_r0x001123f8;\n  }\n  if (param_3 == 0xe0) {\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    cVar3 = FUN_0010c1c6(param_1,param_2);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    cVar3 = FUN_0010bf20(param_1,param_2[7] + param_2[6] + param_5);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    param_2 = param_2 + 0xe;\n    *(int *)param_2 = *(int *)param_2 + -1;\n    pcVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param_3) {\n      if (param_3 == 0xe2) {\n        pcVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pcVar8 = \"debug_end_common_block: not implemented\";\n        if (param_3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      uVar9 = dcgettext(0,pcVar8,5);\n      fprintf(_stderr,\"%s\\n\",uVar9);\n      return 0;\n    }\n    if (param_3 != 0xc0) {\n      if (param_3 == 0xc2) {\n        iVar5 = *(int *)(param_2 + 0x10);\n        *(uint *)(param_2 + 0x10) = iVar5 + 1U;\n        lVar12 = xrealloc(param_2[0x11],(ulong)(iVar5 + 1U) << 3);\n        puVar6 = (undefined8 *)param_2[0xb];\n        param_2[0x11] = lVar12;\n        while( true ) {\n          if (puVar6 == (undefined8 *)0x0) {\n            uVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(param_6,uVar9);\n            *(undefined8 *)(param_2[0x11] + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param_5 == puVar6[3]) && (iVar5 = strcmp((char *)puVar6[2],param_6), iVar5 == 0))\n          break;\n          puVar6 = (undefined8 *)*puVar6;\n        }\n        *(undefined8 *)(lVar12 + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = puVar6[5];\n        return 1;\n      }\n      if (param_3 == 0xa2) {\n        lVar12 = param_2[10];\n        if (lVar12 != 0) {\n          lVar10 = *(long *)(lVar12 + 8);\n          uVar17 = *(uint *)(lVar12 + 0x20);\n          param_2[10] = lVar10;\n          if ((uVar17 < *(uint *)(param_2 + 0x10)) &&\n             (*(undefined8 *)(lVar12 + 0x28) = *(undefined8 *)(param_2[0x11] + (ulong)uVar17 * 8),\n             lVar10 != 0)) {\n            param_6 = *(char **)(lVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param_6 = (char *)param_2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_2 + 0xc) != '\\0') {\n      cVar3 = FUN_0010be88(param_1,param_2[7] + param_2[6] + param_5);\n      if (cVar3 == '\\0') {\n        return 0;\n      }\n      cVar3 = FUN_0010c1c6(param_1,param_2);\n      if (cVar3 != '\\0') {\n        *(int *)(param_2 + 0xe) = *(int *)(param_2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pcVar8 = \"N_LBRAC not within function\\n\";\n  }\n  pcVar8 = (char *)dcgettext(0,pcVar8,5);\n  fprintf(_stderr,pcVar8);\n  return 0;\ncode_r0x00111cc7:\n  local_48 = local_48 + 2;\n  local_48 = strchr(local_48,0x3a);\n  if (local_48 == (char *)0x0) {\n    pcVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_48 = pcVar8;\n    FUN_00108fb9(param_6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (cVar3 != 't') {\n      return 1;\n    }\n    plVar7 = (long *)FUN_0010c218(param_1,pcVar16,plVar7);\n    if (plVar7 != (long *)0x0) {\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pcVar16) &&\n     (iVar5 = strcmp((char *)pplVar18[1],pcVar16), iVar5 == 0)) {\n    pplVar18[3] = plVar7;\n    *pplVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pplVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (lVar10 < 1) {\nLAB_0011208f:\n    uVar9 = 1;\nLAB_001121c4:\n    cVar3 = FUN_0010c05d(param_1,pcVar16,lVar12,uVar9,param_5);\njoined_r0x001123f8:\n    if (cVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pcVar8 = *(char **)(*plVar7 + 8);\n  if ((cVar3 != '\\0') && (cVar3 == *pcVar8)) {\n    pcVar8 = pcVar8 + 1;\n  }\n  if ((*pcVar8 == *pcVar16) && (iVar5 = strcmp(pcVar8,pcVar16), iVar5 == 0)) {\n    param_5 = *(long *)(*plVar7 + 0x10) + *(long *)(*(long *)(*plVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  lVar10 = lVar10 + -1;\n  plVar7 = plVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "xmalloc",
                "fprintf",
                "FUN_00108fe8",
                "FUN_0010c139",
                "FUN_00108fb9",
                "strchr",
                "free",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "strtod",
                "strcmp",
                "FUN_0010bbd3",
                "strtol",
                "FUN_00112996",
                "concat",
                "FUN_0010be88",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_00109a0b",
                "strlen",
                "xstrdup",
                "FUN_0010c1c6",
                "FUN_0010c05d",
                "FUN_0010c218",
                "xrealloc",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108f08"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUNC_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "status",
                "iVar2": "errorCode",
                "uVar3": "result",
                "lVar4": "relocSize",
                "puVar5": "relocData",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jmpTable",
                "puVar7": "destPtr",
                "puVar8": "tmpPtr",
                "uVar9": "index",
                "uStack_38": "tempStack",
                "param_2[0xc]": "param2_c",
                "param_2[0xe]": "param2_e"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char status;\n  int errorCode;\n  undefined8 result;\n  long relocSize;\n  undefined8 *relocData;\n  ulong relocCount;\n  code *jmpTable;\n  undefined8 *destPtr;\n  undefined8 *tmpPtr;\n  ulong index;\n  undefined8 tempStack;\n  \n  status = FUN_00115f50(param1,param2,0);\n  if (status != '\\0') {\n    return;\n  }\n  result = param2_c;\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (relocSize = FUN_00114190(*param2,0,0x100), relocSize == 0)) {\n    relocSize = bfd_get_reloc_upper_bound(param1,param2);\n    if (relocSize < 0) {\n      if ((relocSize != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a20 = 1;\n        result = 0;\nLAB_00108315:\n        FUN_001126c0(0,param1,param2,result,tempStack);\n        return;\n      }\n    }\n    else if (relocSize != 0) {\n      relocData = (undefined8 *)param2_e;\n      if (relocData == (undefined8 *)0x0) {\n        relocData = (undefined8 *)bfd_alloc(param3);\n        if (relocData == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocData,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        destPtr = relocData;\n        for (index = 0; index != relocCount; index = index + 1) {\n          tmpPtr = destPtr;\n          if (((*(long **)relocData[index] != (long *)0x0) &&\n              (relocSize = **(long **)relocData[index], relocSize != 0)) &&\n             (status = FUN_00115d70(*(undefined8 *)(relocSize + 8),DAT_00127a08), status != '\\0')) {\n            tmpPtr = destPtr + 1;\n            *destPtr = relocData[index];\n          }\n          destPtr = tmpPtr;\n        }\n        *destPtr = 0;\n        relocCount = (long)destPtr - (long)relocData >> 3;\n      }\n      jmpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocData = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocData = (undefined8 *)0x0;\n  jmpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmpTable)(param3,result,relocData,relocCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "FUN_00114190",
                "xexit",
                "bfd_alloc",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00115f50",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_function_0010d559",
                "param_1": "input_array",
                "param_2": "input_ptr",
                "param_3": "output_length",
                "bVar1": "first_byte",
                "pbVar2": "current_ptr",
                "cVar3": "result",
                "uVar4": "str_length",
                "iVar5": "comparison_result",
                "ppcVar6": "result_array",
                "sVar7": "input_length",
                "lVar8": "counter",
                "plVar9": "ptr_array",
                "pcVar10": "compare_str",
                "__s1": "current_str",
                "__ptr": "new_str",
                "pbVar11": "next_ptr",
                "uVar12": "flag",
                "__nptr": "numeric_ptr",
                "local_64": "numeric_value",
                "local_40": "local_result"
            },
            "code": "\nundefined8 parse_function_0010d559(undefined8 *input_array,byte **input_ptr,long *output_length)\n\n{\n  byte first_byte;\n  byte *current_ptr;\n  char result;\n  uint str_length;\n  int comparison_result;\n  char **result_array;\n  size_t input_length;\n  long counter;\n  long *ptr_array;\n  char *compare_str;\n  char *current_str;\n  void *new_str;\n  byte *next_ptr;\n  undefined8 flag;\n  byte *numeric_ptr;\n  int numeric_value;\n  char *local_result [2];\n  \n  current_ptr = *input_ptr;\n  first_byte = current_ptr[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    numeric_value = (char)first_byte + -0x30;\n    if (current_ptr[2] == 0x5f) {\n      *input_ptr = current_ptr + 1;\n    }\n    next_ptr = *input_ptr + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_ptr[2] * 2] & 4) == 0)) ||\n       (current_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    numeric_ptr = current_ptr + 2;\n    counter = strtol((char *)numeric_ptr,(char **)0x0,10);\n    numeric_value = (int)counter;\n    while (((&_sch_istable)[(ulong)*numeric_ptr * 2] & 4) != 0) {\n      numeric_ptr = numeric_ptr + 1;\n    }\n    next_ptr = numeric_ptr + 1;\n    if (*numeric_ptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_ptr = next_ptr;\n  result_array = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    result_array = local_result;\n  }\n  counter = 0;\n  while( true ) {\n    while( true ) {\n      numeric_value = numeric_value + -1;\n      if (numeric_value == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = counter;\n        }\n        return 1;\n      }\n      if (**input_ptr == 0x5f) {\n        *input_ptr = *input_ptr + 1;\n      }\n      if (**input_ptr != 0x74) break;\n      result = FUN_0010d21c(input_array,input_ptr,result_array);\n      compare_str = local_result[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        input_length = strlen(local_result[0]);\n        counter = FUN_0010afd5(*input_array,input_array[1],compare_str,input_length & 0xffffffff,9);\n        free(compare_str);\n        if (counter == 0) {\n          return 0;\n        }\n      }\n    }\n    str_length = FUN_00108e76(input_ptr);\n    input_length = strlen((char *)*input_ptr);\n    if (input_length < str_length) break;\n    if (output_length != (long *)0x0) {\n      if ((counter != 0) && (ptr_array = (long *)FUN_00113b1e(counter), ptr_array != (long *)0x0)) {\n        compare_str = (char *)FUN_00109a0b(*input_ptr,str_length);\n        for (; counter = *ptr_array, counter != 0; ptr_array = ptr_array + 1) {\n          counter = *(long *)(counter + 8);\n          if (counter == 0) {\n            free(compare_str);\n            return 0;\n          }\n          current_str = (char *)FUN_001129f4(counter);\n          if ((current_str != (char *)0x0) && (comparison_result = strcmp(current_str,compare_str), comparison_result == 0)) break;\n        }\n        free(compare_str);\n        if (counter != 0) goto LAB_0010d7ad;\n      }\n      flag = 9;\n      if (numeric_value == 0) {\n        new_str = (void *)FUN_00109a0b(*input_ptr,str_length);\n        counter = FUN_0010914e(*input_array,new_str);\n        free(new_str);\n        if (counter != 0) goto LAB_0010d7ad;\n        flag = 0;\n      }\n      counter = FUN_0010afd5(*input_array,input_array[1],*input_ptr,str_length,flag);\n      if (counter == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_ptr = *input_ptr + str_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(current_ptr);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010914e",
                "strtol",
                "FUN_0010afd5",
                "free",
                "FUN_0010911f",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strlen",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_function_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "__gnuc_va_list": "variableArgs"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,variableArgs param_2)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_001275e0);\n  vfprintf(_stderr,message,param_2);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "pointerToFree"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *pointerToFree;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0);\n  free(pointerToFree);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "param_1": "input_data",
                "bVar1": "current_character",
                "iVar2": "parsed_integer"
            },
            "code": "\nint parse_integer_00108e76(byte **input_data)\n\n{\n  byte current_character;\n  int parsed_integer;\n  \n  parsed_integer = 0;\n  while( true ) {\n    current_character = **input_data;\n    if (((&_sch_istable)[(ulong)current_character * 2] & 4) == 0) break;\n    *input_data = *input_data + 1;\n    parsed_integer = parsed_integer * 10 + -0x30 + (int)(char)current_character;\n  }\n  return parsed_integer;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_integer_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_hash_0010bb52",
                "param_1": "input_param",
                "param_2": "alloc_param",
                "param_3": "func_param",
                "lVar1": "new_hash",
                "bfd_hash_allocate": "allocate_bfd_hash",
                "bfd_hash_newfunc": "create_newfunc"
            },
            "code": "\nlong allocate_hash_0010bb52(long input_param,undefined8 alloc_param,undefined8 func_param)\n\n{\n  long new_hash;\n  \n  if (((input_param != 0) || (input_param = bfd_hash_allocate(alloc_param,0x30), input_param != 0)) &&\n     (new_hash = bfd_hash_newfunc(input_param,alloc_param,func_param), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_value_thunk_0010e439",
                "param_1": "object_address",
                "param_2": "new_param_value"
            },
            "code": "\nvoid set_param_value_thunk_0010e439(long object_address,undefined8 new_param_value)\n\n{\n  *(undefined8 *)(object_address + 0x210) = new_param_value;\n  FUN_0010e2f0(object_address,0x84,0,0,new_param_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_value_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "directory_path",
                "param_2": "default_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_status"
            },
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *default_directory)\n\n{\n  int access_result;\n  stat file_status;\n  \n  if ((default_directory == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_status);\n      if ((access_result == 0) && ((file_status.st_mode & 0xf000) == 0x4000)) {\n        default_directory = directory_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_and_set_errno_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPtr",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeAndSetErrno_00108237(void)\n\n{\n  int errnoValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  errnoValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "uVar1": "result",
                "plVar2": "dynamicArray",
                "puVar3": "debugArray",
                "lVar4": "loopCounter",
                "puVar5": "debugArrayPtr",
                "pcVar6": "filename",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long input1,char *input2,long input3,uint input4,undefined8 input5,\n            undefined8 input6)\n\n{\n  undefined8 result;\n  long *dynamicArray;\n  undefined4 *debugArray;\n  long loopCounter;\n  undefined4 *debugArrayPtr;\n  char *filename;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  filename = \"\";\n  if (input2 != (char *)0x0) {\n    filename = input2;\n  }\n  if (input3 != 0) {\n    if (*(long *)(input1 + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      dynamicArray = (long *)xmalloc(0x18);\n      *dynamicArray = input3;\n      *(undefined (*) [16])(dynamicArray + 1) = ZEXT816(0);\n      debugArray = (undefined4 *)xmalloc(0x30);\n      *(long **)(input1 + 0x18) = dynamicArray;\n      dynamicArray[2] = (long)debugArray;\n      debugArrayPtr = debugArray;\n      for (loopCounter = 0xc; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *debugArrayPtr = 0;\n        debugArrayPtr = debugArrayPtr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(input1 + 0x20) = debugArray;\n      loopCounter = *(long *)(input1 + 0x10);\n      *(undefined8 *)(debugArray + 6) = input5;\n      *(undefined8 *)(debugArray + 8) = 0xffffffffffffffff;\n      loopCounter = FUN_00112925(loopCounter + 0x10,filename,3,(input4 & 0xff) + 1);\n      if (loopCounter != 0) {\n        *(long **)(loopCounter + 0x20) = dynamicArray;\n        result = CONCAT71((int7)((ulong)loopCounter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = input6;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "extract_file_name_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "idx",
                "lVar3": "startIdx",
                "lVar4": "slashOffset",
                "pcVar5": "newFilePath",
                "bVar6": "isSlash"
            },
            "code": "\nvoid extractFileName_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long idx;\n  long startIdx;\n  long slashOffset;\n  char *newFilePath;\n  byte isSlash;\n  \n  isSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    startIdx = 0;\n  }\n  else {\n    slashOffset = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(slashOffset + 0xb);\n    startIdx = slashOffset + 1;\n    newFilePath = lastSlash;\n    for (idx = slashOffset; idx != 0; idx = idx + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)isSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)isSlash * -2 + 1;\n    }\n    lastSlash[slashOffset] = '/';\n  }\n  *(undefined8 *)(lastSlash + startIdx) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + startIdx) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_file_name_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "dataChunk",
                "param_2": "startPos",
                "param_3": "endPos",
                "param_4": "flag",
                "cVar1": "flagChar",
                "__s": "stringValue1",
                "__s_00": "stringValue2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "combinedString",
                "local_41": "localFlag",
                "iVar2": "count",
                "lVar7": "counter",
                "iVar3": "result",
                "uVar4": "output"
            },
            "code": "\nundefined4 processData_0010a181(long dataChunk,long startPos,long endPos,byte flag)\n\n{\n  char flagChar;\n  int count;\n  int result;\n  undefined4 output;\n  char *stringValue1;\n  char *stringValue2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  long counter;\n  byte localFlag;\n  \n  flagChar = *(char *)(*(long *)(dataChunk + 0x60) + 0x1c);\n  stringValue1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (flagChar == '\\0') {\n    localFlag = *(byte *)(*(long *)(dataChunk + 0x60) + 0x1c);\n  }\n  count = *(int *)(*(long *)(dataChunk + 0x60) + 0x18);\n  stringValue2 = (char *)FUN_00109b2f(dataChunk);\n  length1 = strlen(stringValue1);\n  length2 = strlen(stringValue2);\n  combinedString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *combinedString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(dataChunk + 0x68);\n    *(long *)(dataChunk + 0x68) = counter + 1;\n    sprintf(combinedString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  length1 = strlen(combinedString);\n  sprintf(combinedString + length1,\"ar%s;%ld;%ld;%s\",stringValue1,startPos,endPos,stringValue2);\n  free(stringValue1);\n  free(stringValue2);\n  result = 0;\n  if (startPos <= endPos) {\n    result = count * (((int)endPos - (int)startPos) + 1);\n  }\n  output = FUN_00109b52(dataChunk,combinedString,counter,localFlag,result);\n  if ((char)output != '\\0') {\n    free(combinedString);\n  }\n  return output;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_headers_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "targetIterator",
                "iVar3": "archMachineComparison",
                "pcVar4": "headerString",
                "sVar5": "headerStringLength",
                "pcVar6": "tempFilePath",
                "uVar7": "temporaryDirectory",
                "piVar8": "errorNumberPtr",
                "iVar9": "tmpDirIndex",
                "lVar10": "stringLength",
                "lVar11": "archMachineIndex",
                "ppcVar12": "archMachinePtrArray",
                "uVar13": "maxArchMachineLength",
                "uVar14": "stringLengthUnsigned",
                "local_70": "archMachineIndexLocal"
            },
            "code": "\n\n\nvoid printBFDHeaders_001199d0(void)\n\n{\n  int columnWidth;\n  int targetIterator;\n  int archMachineComparison;\n  char *headerString;\n  size_t headerStringLength;\n  char *tempFilePath;\n  undefined8 temporaryDirectory;\n  int *errorNumberPtr;\n  int tmpDirIndex;\n  long stringLength;\n  long archMachineIndex;\n  char **archMachinePtrArray;\n  uint maxArchMachineLength;\n  ulong stringLengthUnsigned;\n  int archMachineIndexLocal;\n  \n  headerString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerString,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    headerString = getenv(\"TMPDIR\");\n    temporaryDirectory = FUN_0011283f(headerString,0);\n    headerString = getenv(\"TMP\");\n    temporaryDirectory = FUN_0011283f(headerString,temporaryDirectory);\n    headerString = getenv(\"TEMP\");\n    temporaryDirectory = FUN_0011283f(headerString,temporaryDirectory);\n    temporaryDirectory = FUN_0011283f(&DAT_0011b39a,temporaryDirectory);\n    temporaryDirectory = FUN_0011283f(\"/var/tmp\",temporaryDirectory);\n    headerString = (char *)FUN_0011283f(&DAT_00120324,temporaryDirectory);\n    if (headerString == (char *)0x0) {\n      headerString = \".\";\n    }\n    headerStringLength = strlen(headerString);\n    tempFilePath = (char *)xmalloc((int)headerStringLength + 2);\n    DAT_001278c0 = strcpy(tempFilePath,headerString);\n    DAT_001278c0[headerStringLength & 0xffffffff] = '/';\n    DAT_001278c0[(int)headerStringLength + 1] = '\\0';\n  }\n  headerString = DAT_001278c0;\n  headerStringLength = strlen(DAT_001278c0);\n  stringLength = (long)(int)headerStringLength;\n  tempFilePath = (char *)xmalloc(stringLength + 9);\n  strcpy(tempFilePath,headerString);\n  *(undefined2 *)(tempFilePath + stringLength) = 0x6363;\n  *(undefined4 *)(tempFilePath + stringLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + stringLength + 2) + 3) = 0x585858;\n  tempFilePath[stringLength + 8] = '\\0';\n  targetIterator = mkstemps(tempFilePath,0);\n  if (targetIterator == -1) {\n    errorNumberPtr = __errno_location();\n    tempFilePath = strerror(*errorNumberPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerString,tempFilePath);\n                    \n    abort();\n  }\n  targetIterator = close(targetIterator);\n  if (targetIterator != 0) {\n                    \n    abort();\n  }\n  maxArchMachineLength = 0;\n  targetIterator = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  archMachineIndexLocal = 0;\n  do {\n    headerString = (char *)bfd_printable_arch_mach(targetIterator);\n    headerStringLength = strlen(headerString);\n    if ((int)maxArchMachineLength < (int)(uint)headerStringLength) {\n      maxArchMachineLength = (uint)headerStringLength;\n    }\n    targetIterator = targetIterator + 1;\n  } while (targetIterator != 0x57);\n  headerString = getenv(\"COLUMNS\");\n  targetIterator = archMachineIndexLocal;\n  if (headerString != (char *)0x0) {\n    stringLength = strtol(headerString,(char **)0x0,10);\n    columnWidth = (int)stringLength;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    archMachineIndexLocal = targetIterator;\n    if (-1 < archMachineIndexLocal) {\n      return;\n    }\n    archMachineIndex = (long)archMachineIndexLocal;\n    tmpDirIndex = (columnWidth - maxArchMachineLength) + -1;\n    stringLength = archMachineIndex;\n    do {\n      targetIterator = (int)stringLength;\n      if (-1 < targetIterator) break;\n      headerStringLength = strlen(*(char **)(stringLength * 0x60));\n      stringLength = stringLength + 1;\n      tmpDirIndex = (tmpDirIndex - (int)headerStringLength) + -1;\n    } while (-1 < tmpDirIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchMachineLength + 1),&DAT_0011b4a1);\n    for (archMachinePtrArray = (char **)(archMachineIndex * 0x60);\n        ((ulong)(uint)(targetIterator - archMachineIndexLocal) + archMachineIndex) * 0x60 - (long)archMachinePtrArray != 0;\n        archMachinePtrArray = archMachinePtrArray + 0xc) {\n      printf(\"%s \",*archMachinePtrArray);\n    }\n    tmpDirIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerString = (char *)bfd_printable_arch_mach(tmpDirIndex,0);\n      archMachineComparison = strcmp(headerString,\"UNKNOWN!\");\n      if (archMachineComparison != 0) {\n        temporaryDirectory = bfd_printable_arch_mach(tmpDirIndex,0);\n        printf(\"%*s \",(ulong)maxArchMachineLength,temporaryDirectory);\n        archMachinePtrArray = (char **)(archMachineIndex * 0x60);\n        archMachineComparison = archMachineIndexLocal;\n        while (targetIterator != archMachineComparison) {\n          if (*(char *)((long)archMachinePtrArray + (ulong)(tmpDirIndex - 2) + 8) == '\\0') {\n            headerStringLength = strlen(*archMachinePtrArray);\n            for (stringLengthUnsigned = headerStringLength & 0xffffffff; (int)stringLengthUnsigned != 0; stringLengthUnsigned = (ulong)((int)stringLengthUnsigned - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachinePtrArray,_stdout);\n          }\n          archMachineComparison = archMachineComparison + 1;\n          if (targetIterator != archMachineComparison) {\n            putc(0x20,_stdout);\n          }\n          archMachinePtrArray = archMachinePtrArray + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      tmpDirIndex = tmpDirIndex + 1;\n    } while (tmpDirIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_00119f70",
                "xmalloc",
                "bfd_iterate_over_targets",
                "fprintf",
                "abort",
                "unlink",
                "FUN_00104943",
                "strlen",
                "__errno_location",
                "strerror",
                "bfd_printable_arch_mach",
                "free",
                "printf",
                "mkstemps",
                "strcpy",
                "FUN_0011283f",
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_headers_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_application_0010847a"
            },
            "code": "\nvoid initializeApplication_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_application_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_string_0010d21c",
                "bVar1": "byte1",
                "pbVar2": "ptr_byte",
                "bVar3": "byte2",
                "cVar4": "char1",
                "bVar5": "byte3",
                "uVar6": "result",
                "iVar7": "intVar",
                "uVar8": "uintVar",
                "sVar9": "sizeVar",
                "pbVar10": "ptr_byte2",
                "__ptr": "ptr_void",
                "__ptr_00": "ptr_void2",
                "__haystack": "haystack",
                "pcVar11": "ptr_char1",
                "pcVar13": "ptr_char2",
                "bVar14": "byte4",
                "pcVar15": "ptr_char3",
                "bVar16": "byte5",
                "bVar17": "byte6",
                "bVar18": "byte7",
                "bVar19": "byte8",
                "uVar20": "uintVar2",
                "uVar21": "ulongVar",
                "local_3c": "localArray"
            },
            "code": "\nundefined4 parseString_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte byte1;\n  byte *ptr_byte;\n  byte byte2;\n  char char1;\n  byte byte3;\n  undefined4 result;\n  int intVar;\n  uint uintVar;\n  size_t sizeVar;\n  byte *ptr_byte2;\n  void *ptr_void;\n  void *ptr_void2;\n  char *haystack;\n  char *ptr_char1;\n  undefined8 uVar12;\n  char *ptr_char2;\n  byte byte4;\n  char *ptr_char3;\n  byte byte5;\n  byte byte6;\n  byte byte7;\n  byte byte8;\n  uint uintVar2;\n  ulong ulongVar;\n  uint localArray [3];\n  \n  ptr_byte = *param_2;\n  *param_2 = ptr_byte + 1;\n  localArray[0] = FUN_00108e76(param_2);\n  ulongVar = (ulong)localArray[0];\n  if (localArray[0] != 0) {\n    ptr_byte2 = *param_2;\n    sizeVar = strlen((char *)ptr_byte2);\n    if (ulongVar <= sizeVar) {\n      *param_2 = ptr_byte2 + ulongVar;\n      uintVar2 = 0;\n      result = FUN_00108ea1(param_2,localArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (localArray[0] <= uintVar2) {\n          if (param_3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr_void = (void *)FUN_00109a0b(ptr_byte,(int)*param_2 - (int)ptr_byte);\n          ptr_void2 = (void *)concat(\"NoSuchStrinG__\",ptr_void,0);\n          free(ptr_void);\n          haystack = (char *)cplus_demangle(ptr_void2,2);\n          free(ptr_void2);\n          if ((haystack != (char *)0x0) &&\n             (ptr_char1 = strstr(haystack,\"::NoSuchStrinG\"), ptr_char2 = haystack,\n             ptr_char3 = haystack, ptr_char1 != (char *)0x0)) {\n            for (; ptr_char2 != ptr_char1; ptr_char2 = ptr_char2 + 1) {\n              if ((*ptr_char2 != ' ') ||\n                 (((ptr_char2[1] == '>' && (haystack < ptr_char2)) && (ptr_char2[-1] == '>')))) {\n                *ptr_char3 = *ptr_char2;\n                ptr_char3 = ptr_char3 + 1;\n              }\n            }\n            uVar12 = FUN_00109a0b(haystack,(int)ptr_char3 - (int)haystack);\n            *param_3 = uVar12;\n            free(haystack);\n            return result;\n          }\n          FUN_0010911f(ptr_byte);\n          free(haystack);\n          return 0;\n        }\n        ptr_byte2 = *param_2;\n        if (*ptr_byte2 != 0x5a) {\n          byte3 = FUNC_0010c95e(param_1,param_2,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          byte2 = 0;\n          byte4 = 0;\n          byte7 = 0;\n          byte6 = 0;\n          byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte5 = byte2;\n              byte1 = *ptr_byte2;\n              if ((byte4 | byte1 == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte2 = byte3;\n              byte4 = byte3;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              ptr_byte2 = ptr_byte2 + 1;\n              byte2 = byte5;\n              byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte2 = byte5;\n              byte7 = byte3;\n              break;\n            case 99:\n              byte2 = byte5;\n              byte8 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte2 = byte5;\n              byte6 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = ptr_byte2 + 1;\n        char1 = FUNC_0010c95e(param_1,param_2,0);\n        if (char1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(ptr_byte);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte5 == 0) {\n    if (byte8 == 0) {\n      if (byte7 == 0) {\n        if (byte6 == 0) {\n          if (byte3 != 0) {\n            uintVar = FUN_00108e76(param_2);\n            if (uintVar == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uintVar;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            ptr_byte2 = *param_2;\n            if (((&_sch_istable)[(ulong)*ptr_byte2 * 2] & 4) == 0) break;\n            *param_2 = ptr_byte2 + 1;\n          }\n          if (*ptr_byte2 == 0x2e) {\n            do {\n              ptr_byte2 = ptr_byte2 + 1;\n              *param_2 = ptr_byte2;\n            } while (((&_sch_istable)[(ulong)*ptr_byte2 * 2] & 4) != 0);\n          }\n          ptr_byte2 = *param_2;\n          if (*ptr_byte2 == 0x65) {\n            do {\n              ptr_byte2 = ptr_byte2 + 1;\n              *param_2 = ptr_byte2;\n            } while (((&_sch_istable)[(ulong)*ptr_byte2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar = FUN_00108e76(param_2);\n        if (1 < uintVar) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      intVar = FUN_00108e76(param_2);\n      if (intVar == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uintVar2 = uintVar2 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "concat",
                "free",
                "cplus_demangle",
                "FUN_0010911f",
                "strstr",
                "abort",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strlen",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "in_RAX": "tmp"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 ptr1,undefined8 ptr2)\n\n{\n  undefined8 tmp;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,ptr2,tmp);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_or_update_buffer_0010c139",
                "param_1": "param1",
                "param_2": "buffer",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "temp1",
                "cVar2": "charValue",
                "uVar3": "result",
                "puVar4": "bufferPtr",
                "in_R10": "temp2",
                "unaff_R15": "temp3"
            },
            "code": "\nulong allocateOrUpdateBuffer_0010c139(undefined8 param1,long buffer,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 temp1;\n  char charValue;\n  ulong result;\n  undefined8 *bufferPtr;\n  undefined8 temp2;\n  undefined8 temp3;\n  \n  charValue = *(char *)(buffer + 0x60);\n  if ((charValue != '\\0') && ((*(int *)(buffer + 0x40) != 0 || (*(char *)(buffer + 0x44) == '\\0')))) {\n    bufferPtr = (undefined8 *)xmalloc(0x28);\n    temp1 = *(undefined8 *)(buffer + 0x78);\n    *(undefined8 *)((long)bufferPtr + 0x1c) = 0;\n    bufferPtr[2] = param4;\n    *(undefined4 *)(bufferPtr + 3) = param5;\n    bufferPtr[4] = param6;\n    *(undefined8 **)(buffer + 0x78) = bufferPtr;\n    *bufferPtr = temp1;\n    bufferPtr[1] = param3;\n    return CONCAT71((int7)((ulong)temp3 >> 8),charValue) & 0xffffffff;\n  }\n  result = FUN_0010c05d(param1,param3,param4,param5,param6,temp2);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_or_update_buffer_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_and_call_function_0010e439",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "code": "\nvoid setParamAndCallFunction_0010e439(long baseAddress,undefined8 newValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = newValue;\n  FUN_0010e2f0(baseAddress,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "set_param_and_call_function_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010e842",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_00109dfe",
                "FUN_0010ee3f",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00115530",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_001199d0",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_00113fb0",
                "FUN_0010a377",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "input",
                "param_2": "size",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid processData_00109d3e(undefined8 input,int size)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    defaultValue = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  FUN_00109cf4(input,defaultValue,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_and_update_data_00112502",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "value_limit",
                "uVar1": "index",
                "puVar2": "ptr_array",
                "uVar3": "temp_var",
                "cVar4": "result"
            },
            "code": "\nundefined check_and_update_data_00112502(long data_ptr,undefined8 param_ptr,ulong value_limit)\n\n{\n  uint index;\n  undefined8 *ptr_array;\n  undefined8 temp_var;\n  char result;\n  \n  do {\n    ptr_array = *(undefined8 **)(data_ptr + 0x40);\n    if (ptr_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data_ptr + 0x48), index < 10 && (ptr_array[(ulong)index + 2] != -1))) {\n      if (value_limit <= (ulong)ptr_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(param_ptr,*(undefined8 *)(ptr_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data_ptr + 0x48) = *(int *)(data_ptr + 0x48) + 1;\n    }\n    temp_var = *ptr_array;\n    *(undefined4 *)(data_ptr + 0x48) = 0;\n    *(undefined8 *)(data_ptr + 0x40) = temp_var;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_and_update_data_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "unaff_RBX": "linePtr",
                "unaff_EBP": "lineNumber",
                "in_R10": "currentLine",
                "unaff_R13": "param_7",
                "unaff_R14": "lineStart",
                "unaff_R15": "lineEnd",
                "param_8": "result",
                "param_9": "filePath"
            },
            "code": "\nvoid processLines_00104cc1(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *linePtr;\n  byte *pbVar5;\n  int lineNumber;\n  byte *currentLine;\n  undefined8 param_7;\n  byte *lineStart;\n  byte *lineEnd;\n  undefined8 param_7;\n  undefined8 *result;\n  byte *filePath;\n  \ncode_r0x00104cc1:\n  filePath = currentLine;\n  uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(uVar1,param_7,lineNumber);\n  pbVar5 = linePtr;\n  currentLine = filePath;\nLAB_00114599:\n  do {\n    *currentLine = 0;\n    if (lineEnd < currentLine) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = lineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    pbVar3 = pbVar5;\n    if (lineStart[1] == 0) {\n      *result = param_7;\n      return;\n    }\n    for (; bVar4 = *pbVar3, lineStart = pbVar3, bVar4 != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          linePtr = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *pbVar3 = 0;\n          linePtr = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            linePtr = pbVar3 + 2;\n            lineStart = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      lineStart = pbVar3 + 1;\n      linePtr = pbVar3 + 2;\n    }\n    else {\n      linePtr = pbVar3 + 1;\n    }\nLAB_00114553:\n    bVar4 = *pbVar5;\n    lineEnd = pbVar5;\n    while ((bVar4 == 0x20 || (currentLine = lineEnd, bVar4 == 9))) {\n      pbVar5 = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      bVar4 = *pbVar5;\n    }\n    do {\n      pbVar5 = linePtr;\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    bVar4 = currentLine[1];\n    if ((((((bVar4 == 9) || (bVar4 == 0x20)) && ((bVar4 = currentLine[2], bVar4 == 9 || (bVar4 == 0x20)))\n          ) && ((bVar4 = currentLine[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n        ((bVar4 = currentLine[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n       ((bVar4 = currentLine[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n      bVar4 = currentLine[6];\n      pbVar3 = currentLine + 6;\n      if ((bVar4 == 9) || (bVar4 == 0x20)) {\n        do {\n          do {\n            bVar4 = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (bVar4 == 0x20);\n        } while (bVar4 == 9);\n      }\n    }\n    if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104d1c",
                "htab_find_slot",
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_00119f70",
                "FUN_00109be3",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_00109c2e",
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010b6ea",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_store_parameters_00113bfa",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "allocation_result",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "code": "\nlong allocate_and_store_parameters_00113bfa(long input_value_1,long input_value_2)\n\n{\n  long allocation_result;\n  long *allocated_memory;\n  \n  if (((input_value_1 != 0) && (input_value_2 != 0)) && (allocation_result = FUN_00112904(0x12,0), allocation_result != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input_value_1;\n    allocated_memory[1] = input_value_2;\n    *(long **)(allocation_result + 0x10) = allocated_memory;\n    return allocation_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_store_parameters_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_output_format_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "outputFlag",
                "uVar2": "errorMessage",
                "unaff_EBX": "ebxValue"
            },
            "code": "\nuint checkOutputFormat_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 outputFlag;\n  undefined8 errorMessage;\n  uint ebxValue;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    outputFlag = *param2;\n    ebxValue = ebxValue & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(errorMessage,outputFlag,param3);\n  }\n  return ebxValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_output_format_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_print_data_00109e76",
                "param_1": "dataPointer",
                "param_2": "value",
                "lVar1": "originalValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateAndPrintData_00109e76(long dataPointer,uint value)\n\n{\n  long originalValue;\n  char formattedString [58];\n  \n  originalValue = *(long *)(dataPointer + 0x68);\n  *(long *)(dataPointer + 0x68) = originalValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",originalValue,originalValue,(ulong)value);\n  FUN_00109b52(dataPointer,formattedString,originalValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_print_data_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "currentIndex",
                "lVar2": "currentIndex2",
                "lVar3": "entryOffset",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int currentIndex;\n  long currentIndex2;\n  long entryOffset;\n  undefined8 duplicatedString;\n  \n  currentIndex2 = (long)DAT_001278a0;\n  entryOffset = currentIndex2 * 0x18;\n  free((void *)(&DAT_00127730)[currentIndex2 * 3]);\n  *(undefined4 *)(&DAT_00127720 + entryOffset) = newValue1;\n  *(undefined4 *)(&DAT_00127724 + entryOffset) = newValue2;\n  *(undefined8 *)(&DAT_00127728 + entryOffset) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  (&DAT_00127730)[currentIndex2 * 3] = duplicatedString;\n  currentIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = currentIndex % 0x10;\n  return (long)currentIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "param_1": "linked_list",
                "param_2": "context",
                "param_3": "string",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "result",
                "__s2": "search_string",
                "puVar2": "current_node",
                "uVar3": "temp_value",
                "lVar4": "string_length",
                "puVar5": "inner_node",
                "puVar6": "ptr",
                "bVar7": "byte_value",
                "auVar8": "result_array"
            },
            "code": "\nundefined  [16]\nfind_matching_string_0010afd5(undefined8 *linked_list,long context,undefined8 string,undefined4 param4,\n            undefined4 param5,undefined8 param6)\n\n{\n  int result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp_value;\n  long string_length;\n  undefined8 *inner_node;\n  undefined4 *ptr;\n  byte byte_value;\n  undefined result_array [16];\n  \n  byte_value = 0;\n  search_string = (char *)FUN_00109a0b(string,param4);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            result = strcmp((char *)inner_node[1],search_string);\n            if (result == 0) {\n              string_length = inner_node[4];\n              if (string_length == 0) goto LAB_0010b05b;\n              free(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      temp_value = *(undefined8 *)(context + 0x1a0);\n      ptr = (undefined4 *)((long)current_node + 0x14);\n      for (string_length = 5; string_length != 0; string_length = string_length + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)byte_value * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = param5;\n      *current_node = temp_value;\n      current_node[1] = search_string;\n      temp_value = FUN_00113e23(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_node[4] = temp_value;\nLAB_0010b0e7:\n      string_length = current_node[4];\nLAB_0010b0eb:\n      result_array._8_8_ = param6;\n      result_array._0_8_ = string_length;\n      return result_array;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      result = strcmp((char *)current_node[1],search_string);\n      if (result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = param5;\n        }\n        free(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "free",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_matching_string_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00108fe8",
                "sprintf",
                "FUN_0010d882",
                "FUN_00108fb9",
                "free",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_00112b6e",
                "FUN_0010d559",
                "strtol",
                "concat",
                "FUN_0010afd5",
                "FUN_00113d6e",
                "cplus_demangle_init_info",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00109a0b",
                "strncmp",
                "FUN_00113e5e",
                "FUN_00113bfa",
                "FUN_00113fb0",
                "strcpy",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "strcat",
                "xmalloc",
                "fprintf",
                "FUN_00109ab1",
                "strchr",
                "FUN_00113e17",
                "FUN_00109022",
                "cplus_demangle_mangled_name",
                "FUN_00109a32",
                "strcmp",
                "FUN_00113b4a",
                "strstr",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "strlen",
                "malloc",
                "strspn",
                "FUN_001129f4",
                "FUN_00112904",
                "FUN_00113da9",
                "xrealloc",
                "FUN_00113df2",
                "FUN_00108e76"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00107880",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stab_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "loopIndex",
                "lVar3": "offset",
                "piVar4": "stabPtr",
                "iVar5": "iterator"
            },
            "code": "\n\n\nundefined8 printLastStabEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long loopIndex;\n  long offset;\n  int *stabPtr;\n  int iterator;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  iterator = DAT_001278a0;\n  do {\n    loopIndex = (long)iterator;\n    offset = loopIndex * 0x18;\n    stabPtr = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[loopIndex * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabPtr);\n      if (stabName == 0) {\n        if (*stabPtr == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stabPtr != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[loopIndex * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    iterator = (iterator + 1) % 0x10;\n  } while (DAT_001278a0 != iterator);\n  return param_3;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_stab_name",
                "fputc",
                "fwrite",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stab_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a083(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x2a,4,dataPointer + 0x178,dataPointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "param_1": "array",
                "param_2": "element",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "data",
                "lVar1": "newArray",
                "plVar2": "elementPtr",
                "lVar3": "remainingSize",
                "puVar4": "pointer",
                "uVar5": "currentSize",
                "bVar6": "flagByte",
                "auVar7": "result"
            },
            "code": "\nundefined  [16]\nresizeArray_00109c2e(long array,long element,ulong size,int flag,undefined4 *output,\n            undefined8 data)\n\n{\n  long newArray;\n  long *elementPtr;\n  long remainingSize;\n  undefined *pointer;\n  ulong currentSize;\n  byte flagByte;\n  undefined result [16];\n  \n  flagByte = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    newArray = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newArray;\n    pointer = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newArray);\n    for (remainingSize = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *pointer = 0;\n      pointer = pointer + (ulong)flagByte * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  elementPtr = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*elementPtr == 0) {\n    newArray = *(long *)(array + 0x68);\n    *elementPtr = newArray;\n    *(long *)(array + 0x68) = newArray + 1;\n    elementPtr[1] = element;\n    *(int *)(elementPtr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(elementPtr + 2) = 0;\n    *(undefined4 *)((long)elementPtr + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)elementPtr + 0x14);\n  }\n  result._8_8_ = data;\n  result._0_8_ = *elementPtr;\n  return result;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_bad_format_error_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedString"
            },
            "code": "\nvoid displayBadFormatError_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "display_bad_format_error_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "namespace_pointer",
                "uVar1": "result",
                "lVar2": "file_ptr"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long namespace_pointer,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long file_ptr;\n  \n  if ((*(long *)(namespace_pointer + 8) != 0) && (*(long *)(namespace_pointer + 0x10) != 0)) {\n    file_ptr = *(long *)(namespace_pointer + 0x10) + 0x10;\n    if (*(long *)(namespace_pointer + 0x20) != 0) {\n      file_ptr = *(long *)(namespace_pointer + 0x20) + 0x28;\n    }\n    result = FUN_00112925(file_ptr,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type",
                "uVar1": "result",
                "uVar2": "new_class_id",
                "lVar3": "type_info",
                "piVar4": "ptr_type",
                "__s1": "existing_class_name",
                "cVar5": "is_equal",
                "iVar6": "class_id_counter",
                "puVar7": "current_node",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_id,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint new_class_id;\n  long type_info;\n  int *ptr_type;\n  char *existing_class_name;\n  char is_equal;\n  int class_id_counter;\n  undefined8 *current_node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type + 4);\n  current_node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (current_node = *(undefined8 **)(class_id + 0x50); current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      ptr_type = (int *)current_node[1];\n      if (*ptr_type == *type) {\n        existing_class_name = (char *)current_node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_equal = FUN_0010922b(class_id,ptr_type,type);\n            if (is_equal != '\\0') {\n              new_class_id = *(uint *)(*(long *)(current_node[1] + 0x10) + 0xc);\n              current_node = (undefined8 *)(ulong)new_class_id;\n              *(uint *)(type_info + 0xc) = new_class_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (class_id_counter = strcmp(existing_class_name,class_name), class_id_counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    class_id_counter = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = class_id_counter;\n    *(int *)(type_info + 0xc) = class_id_counter;\n    current_node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_id + 0x50);\n    current_node[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = current_node;\n    *current_node = result;\n    current_node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)current_node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00113f20",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "functionParam1",
                "param_2": "array1",
                "param_3": "array2",
                "uVar1": "var1",
                "uVar2": "var2",
                "pplVar3": "arr2Ptr",
                "ppcVar4": "strArr1Ptr",
                "ppcVar5": "strArr2Ptr",
                "lVar6": "var6",
                "lVar7": "var7",
                "lVar8": "var8",
                "pcVar9": "str1Ptr",
                "pcVar10": "str2Ptr",
                "cVar11": "result",
                "bVar12": "returnValue",
                "iVar13": "comparisonResult",
                "uVar14": "var14",
                "uVar15": "var15",
                "puVar16": "var16",
                "puVar17": "var17",
                "plVar18": "array2Ptr",
                "lVar19": "var19",
                "plVar20": "array2Ptr1",
                "plVar21": "array2Ptr2",
                "lVar22": "var22",
                "local_70": "localVar70",
                "local_58": "localVar58",
                "plStack_50": "localVar50",
                "local_48": "localVar48"
            },
            "code": "\nbyte checkEquality_0010922b(long functionParam1,long *array1,long *array2)\n\n{\n  uint var1;\n  uint var2;\n  long **arr2Ptr;\n  char **strArr1Ptr;\n  char **strArr2Ptr;\n  long var6;\n  long var7;\n  long var8;\n  char *str1Ptr;\n  char *str2Ptr;\n  char result;\n  byte returnValue;\n  int comparisonResult;\n  undefined8 var14;\n  undefined8 var15;\n  undefined8 *var16;\n  undefined8 *var17;\n  long *array2Ptr;\n  long var19;\n  long *array2Ptr1;\n  long *array2Ptr2;\n  long var22;\n  long *localVar70;\n  undefined8 *localVar58;\n  long *localVar50;\n  long *localVar48;\n  \n  array2Ptr = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (array2Ptr == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    var1 = *(uint *)array1;\n    if (var1 == 1) goto code_r0x00109263;\n    while (var2 = *(uint *)array2, var2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (var1 != 0x16) break;\n    if (var2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((var1 == 0x17) && (var2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    array2Ptr = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (var1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (var1 < 4) {\n    if (var1 == 2) {\n      return true;\n    }\n  }\n  else if (var1 - 4 < 3) {\n    return true;\n  }\n  localVar58 = *(undefined8 **)(functionParam1 + 0x58);\n  for (var17 = localVar58; var17 != (undefined8 *)0x0; var17 = (undefined8 *)*var17) {\n    if (((long *)var17[1] == array1) && ((long *)var17[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(functionParam1 + 0x58) = &localVar58;\n  localVar50 = array1;\n  localVar48 = array2;\n  switch(var1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    array2Ptr = (long *)array1[2];\n    arr2Ptr = (long **)array2[2];\n    if (array2Ptr == (long *)0x0) {\n      returnValue = arr2Ptr == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (arr2Ptr == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(functionParam1 + 0x38) < *(uint *)((long)array2Ptr + 0xc)) &&\n       (*(uint *)((long)array2Ptr + 0xc) == *(uint *)((long)arr2Ptr + 0xc))) goto LAB_001097af;\n    var17 = (undefined8 *)*array2Ptr;\n    localVar70 = *arr2Ptr;\n    if (((var17 == (undefined8 *)0x0) == (localVar70 == (long *)0x0)) &&\n       ((((array2Ptr[2] == 0) == (arr2Ptr[2] == (long *)0x0) &&\n         ((array2Ptr[3] == 0) == (arr2Ptr[3] == (long *)0x0))) &&\n        ((array2Ptr[4] == 0) == (arr2Ptr[4] == (long *)0x0))))) {\n      if (var17 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((array2Ptr[4] != 0) &&\n           (result = checkEquality_0010922b(functionParam1,array2Ptr[4],arr2Ptr[4]), result == '\\0'))\n        goto LAB_00109382;\n        array2Ptr2 = (long *)array2Ptr[2];\n        if (array2Ptr2 == (long *)0x0) {\nLAB_00109540:\n          var17 = (undefined8 *)array2Ptr[3];\n          if (var17 == (undefined8 *)0x0) goto LAB_001097af;\n          array2Ptr = arr2Ptr[3];\n          while( true ) {\n            strArr2Ptr = (char **)*var17;\n            if (strArr2Ptr == (char **)0x0) {\n              returnValue = *array2Ptr == 0;\n              goto LAB_001099c4;\n            }\n            strArr1Ptr = (char **)*array2Ptr;\n            if (strArr1Ptr == (char **)0x0) break;\n            if ((**strArr2Ptr != **strArr1Ptr) || (comparisonResult = strcmp(*strArr2Ptr,*strArr1Ptr), comparisonResult != 0))\n            break;\n            str1Ptr = strArr2Ptr[1];\n            str2Ptr = strArr1Ptr[1];\n            if ((str1Ptr == (char *)0x0) != (str2Ptr == (char *)0x0)) break;\n            if (str1Ptr != (char *)0x0) {\n              var22 = 0;\n              while( true ) {\n                strArr2Ptr = *(char ***)(str1Ptr + var22);\n                strArr1Ptr = *(char ***)(str2Ptr + var22);\n                if (strArr2Ptr == (char **)0x0) break;\n                if (strArr1Ptr == (char **)0x0) goto LAB_00109382;\n                if ((((**strArr2Ptr != **strArr1Ptr) ||\n                     ((((ulong)strArr2Ptr[2] ^ (ulong)strArr1Ptr[2]) & 0xffffffffffff) != 0)) ||\n                    ((strArr2Ptr[3] != strArr1Ptr[3] ||\n                     ((((strArr2Ptr[4] == (char *)0x0) != (strArr1Ptr[4] == (char *)0x0) ||\n                       (comparisonResult = strcmp(*strArr2Ptr,*strArr1Ptr), comparisonResult != 0)) ||\n                      (result = checkEquality_0010922b(functionParam1,strArr2Ptr[1],strArr1Ptr[1]), result == '\\0')))))) ||\n                   ((strArr2Ptr[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(functionParam1,strArr2Ptr[4],strArr1Ptr[4]), result == '\\0'))))\n                goto LAB_00109382;\n                var22 = var22 + 8;\n              }\n              if (strArr1Ptr == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            var17 = var17 + 1;\n            array2Ptr = array2Ptr + 1;\n          }\n        }\n        else {\n          array2Ptr1 = arr2Ptr[2];\n          for (; var17 = (undefined8 *)*array2Ptr2, var17 != (undefined8 *)0x0;\n              array2Ptr2 = array2Ptr2 + 1) {\n            var16 = (undefined8 *)*array2Ptr1;\n            if ((((var16 == (undefined8 *)0x0) ||\n                 (((var17[1] ^ var16[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(var17 + 2) != *(int *)(var16 + 2))) ||\n               (result = checkEquality_0010922b(functionParam1,*var17,*var16), result == '\\0'))\n            goto LAB_00109382;\n            array2Ptr1 = array2Ptr1 + 1;\n          }\n          if (*array2Ptr1 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; strArr2Ptr = (char **)*var17, strArr2Ptr != (char **)0x0; var17 = var17 + 1) {\n          strArr1Ptr = (char **)*localVar70;\n          if (strArr1Ptr == (char **)0x0) goto LAB_00109382;\n          str1Ptr = *strArr1Ptr;\n          str2Ptr = *strArr2Ptr;\n          if ((*str2Ptr != *str1Ptr) ||\n             ((((ulong)strArr2Ptr[2] ^ (ulong)strArr1Ptr[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)strArr2Ptr + 0x14) == '\\0') {\n            if (strArr2Ptr[3] == strArr1Ptr[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparisonResult = strcmp(strArr2Ptr[3],strArr1Ptr[3]);\n          if (comparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          comparisonResult = strcmp(str2Ptr,str1Ptr);\n          if (((comparisonResult != 0) || (strArr2Ptr[1] == (char *)0x0)) || (strArr1Ptr[1] == (char *)0x0))\n          goto LAB_00109382;\n          var14 = FUN_00112b6e(strArr1Ptr[1],0);\n          var15 = FUN_00112b6e(strArr2Ptr[1],0);\n          result = checkEquality_0010922b(functionParam1,var15,var14);\n          if (result == '\\0') goto LAB_00109382;\n          localVar70 = localVar70 + 1;\n        }\n        if (*localVar70 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    array2Ptr = (long *)array1[2];\n    array2Ptr2 = (long *)array2[2];\n    if (array2Ptr == (long *)0x0) {\n      returnValue = array2Ptr2 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (array2Ptr2 == (long *)0x0) goto LAB_00109382;\n    var22 = *array2Ptr;\n    var6 = *array2Ptr2;\n    var19 = 0;\n    var7 = array2Ptr[1];\n    var8 = array2Ptr2[1];\n    do {\n      str1Ptr = *(char **)(var22 + var19);\n      if (str1Ptr == (char *)0x0) {\n        returnValue = *(long *)(var6 + var19) == 0;\n        goto LAB_001099c1;\n      }\n      str2Ptr = *(char **)(var6 + var19);\n      if (((str2Ptr == (char *)0x0) || (*str1Ptr != *str2Ptr)) ||\n         (*(long *)(var7 + var19) != *(long *)(var8 + var19))) break;\n      comparisonResult = strcmp(str1Ptr,str2Ptr);\n      var19 = var19 + 8;\n    } while (comparisonResult == 0);\nLAB_00109964:\n    returnValue = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    returnValue = checkEquality_0010922b(functionParam1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = checkEquality_0010922b(functionParam1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      array2Ptr = *(long **)(array1[2] + 8);\n      array2Ptr2 = *(long **)(array2[2] + 8);\n      if ((array2Ptr == (long *)0x0) == (array2Ptr2 == (long *)0x0)) {\n        if (array2Ptr == (long *)0x0) goto LAB_001097af;\n        while (((*array2Ptr != 0 && (*array2Ptr2 != 0)) &&\n               (result = checkEquality_0010922b(functionParam1), result != '\\0'))) {\n          array2Ptr = array2Ptr + 1;\n          array2Ptr2 = array2Ptr2 + 1;\n        }\nLAB_0010995d:\n        if (*array2Ptr != 0) goto LAB_00109964;\n        returnValue = *array2Ptr2 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    var17 = (undefined8 *)array2[2];\n    var16 = (undefined8 *)array1[2];\n    returnValue = 0;\n    if ((var16[1] == var17[1]) && (var16[2] == var17[2])) {\nLAB_00109862:\n      returnValue = checkEquality_0010922b(functionParam1,*var16,*var17);\n    }\n    break;\n  case 0x10:\n    var17 = (undefined8 *)array2[2];\n    var16 = (undefined8 *)array1[2];\n    returnValue = 0;\n    if (((var16[2] == var17[2]) && (var16[3] == var17[3])) &&\n       (*(char *)(var16 + 4) == *(char *)(var17 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    var17 = (undefined8 *)array2[2];\n    var16 = (undefined8 *)array1[2];\n    returnValue = 0;\n    if (*(char *)(var16 + 1) == *(char *)(var17 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(functionParam1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    returnValue = 0;\n    if (result != '\\0') {\n      returnValue = checkEquality_0010922b(functionParam1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = checkEquality_0010922b(functionParam1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(functionParam1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      array2Ptr = *(long **)(array1[2] + 0x10);\n      array2Ptr2 = *(long **)(array2[2] + 0x10);\n      if ((array2Ptr == (long *)0x0) == (array2Ptr2 == (long *)0x0)) {\n        if (array2Ptr != (long *)0x0) {\n          while (((*array2Ptr != 0 && (*array2Ptr2 != 0)) &&\n                 (result = checkEquality_0010922b(functionParam1), result != '\\0'))) {\n            array2Ptr = array2Ptr + 1;\n            array2Ptr2 = array2Ptr2 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        returnValue = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    returnValue = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    array2Ptr = (long *)array2[2];\n    array2Ptr2 = (long *)array1[2];\n    comparisonResult = strcmp(*(char **)(*array2Ptr2 + 8),*(char **)(*array2Ptr + 8));\n    returnValue = 0;\n    if (comparisonResult == 0) {\n      returnValue = checkEquality_0010922b(functionParam1,array2Ptr2[1],array2Ptr[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  returnValue = returnValue & 1;\nLAB_001099c4:\n  *(undefined8 **)(functionParam1 + 0x58) = localVar58;\n  return returnValue;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  array2Ptr = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "FUN_0010922b",
                "strcmp",
                "FUN_00112b6e",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_file_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "charVar",
                "iVar2": "intVar1",
                "iVar3": "intVar2",
                "ppcVar4": "doublePtrVar",
                "lVar5": "longVar1",
                "uVar6": "uVar1",
                "__format": "formatString",
                "puVar7": "uIntPtr",
                "piVar8": "intPtr",
                "uVar9": "uVar2",
                "in_RAX": "raxVar",
                "pcVar10": "pcVar1",
                "ppcVar11": "doublePtrVar1",
                "lVar12": "longVar2",
                "pvVar13": "ptrVar",
                "pcVar14": "codeVar",
                "lVar15": "longVar3",
                "pcVar16": "pcVar2",
                "psVar17": "statVar",
                "unaff_R14": "unaffPtr",
                "unaff_R15": "unaffDoublePtr",
                "bVar18": "byteVar",
                "unaff_retaddr": "unaffRetAddr",
                "in_stack_00000008": "varStack1",
                "in_stack_00000010": "varStack2",
                "in_stack_00000018": "varStack3",
                "in_stack_00000020": "varStack4",
                "in_stack_00000028": "varStack5",
                "in_stack_00000030": "varStack6",
                "in_stack_000000f8": "varStack7",
                "in_stack_00000110": "varStack8"
            },
            "code": "\nvoid extractAndCopyArchiveFile_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char charVar;\n  int intVar1;\n  int intVar2;\n  char **doublePtrVar;\n  long longVar1;\n  undefined8 uVar1;\n  char *formatString;\n  undefined8 *uIntPtr;\n  int *intPtr;\n  undefined8 uVar2;\n  long raxVar;\n  char *pcVar1;\n  char **doublePtrVar1;\n  long longVar2;\n  void *ptrVar;\n  code *codeVar;\n  long longVar3;\n  char *pcVar2;\n  stat *statVar;\n  undefined8 *unaffPtr;\n  char **unaffDoublePtr;\n  byte byteVar;\n  undefined8 unaffRetAddr;\n  undefined8 *varStack1;\n  long *varStack2;\n  char *varStack3;\n  undefined8 *varStack4;\n  undefined8 varStack5;\n  undefined8 varStack6;\n  uint varStack7;\n  long varStack8;\n  \n  byteVar = 0;\n  pcVar1 = (char *)(raxVar + 1);\n  do {\n    if (*pcVar1 == '/') {\n      extractAndCopyArchiveFile_001052a2();\n      return;\n    }\n    while (*pcVar1 == '\\0') {\n      pcVar1 = (char *)concat(varStack3,&DAT_0011b47d);\n      intVar2 = stat(pcVar1,(stat *)&stack0x00000050);\n      uIntPtr = unaffPtr;\n      if (-1 < intVar2) {\n        longVar2 = FUN_0011a0e0(pcVar1);\n        free(pcVar1);\n        if (longVar2 == 0) {\n          intPtr = __errno_location();\n          pcVar1 = strerror(*intPtr);\n          uVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(uVar2,pcVar1);\n          goto LAB_00104e93;\n        }\n        uIntPtr = (undefined8 *)xmalloc(0x18);\n        pcVar1 = *unaffDoublePtr;\n        *uIntPtr = unaffPtr;\n        uIntPtr[2] = 0;\n        uIntPtr[1] = longVar2;\n        pcVar1 = (char *)concat(longVar2,&DAT_0011b47d,pcVar1);\n      }\n      intVar2 = 0;\n      if (DAT_001279cb != '\\0') {\n        statVar = (stat *)&stack0x00000050;\n        for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n          *(undefined4 *)&statVar->st_dev = 0;\n          statVar = (stat *)((long)statVar + (ulong)byteVar * -8 + 4);\n        }\n        doublePtrVar1 = (char **)unaffDoublePtr[0x1d];\n        if ((char **)unaffDoublePtr[0x1d] == (char **)0x0) {\n          doublePtrVar1 = unaffDoublePtr;\n        }\n        intVar2 = (**(code **)(doublePtrVar1[1] + 0x1e8))(unaffDoublePtr,(stat *)&stack0x00000050);\n        if (intVar2 != 0) {\n          pcVar2 = *unaffDoublePtr;\n          uVar2 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(uVar2,pcVar2);\n        }\n      }\n      unaffPtr = (undefined8 *)xmalloc(0x18);\n      unaffPtr[1] = pcVar1;\n      *unaffPtr = uIntPtr;\n      unaffPtr[2] = 0;\n      charVar = bfd_check_format(unaffDoublePtr,1);\n      if (charVar == '\\0') {\n        uVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,unaffDoublePtr,0,uVar2);\n        doublePtrVar1 = (char **)bfd_openw(pcVar1,varStack5);\n        if (doublePtrVar1 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        doublePtrVar = (char **)unaffDoublePtr[0x1d];\n        if ((char **)unaffDoublePtr[0x1d] == (char **)0x0) {\n          doublePtrVar = unaffDoublePtr;\n        }\n        intVar1 = (**(code **)(doublePtrVar[1] + 0x1e8))(unaffDoublePtr,&stack0x000000e0);\n        longVar2 = varStack8;\n        if (intVar1 == 0) {\n          if (varStack8 < 0) {\n            uVar2 = FUN_001125fa(unaffDoublePtr);\n            uVar1 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(uVar1,uVar2);\n          }\n          else {\n            intVar1 = bfd_seek(unaffDoublePtr,0,0);\n            if (intVar1 == 0) {\n              if (DAT_001279c9 != '\\0') {\n                pcVar2 = *doublePtrVar1;\n                uVar2 = FUN_001125fa(unaffDoublePtr);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,uVar2,pcVar2);\n              }\n              ptrVar = (void *)xmalloc(0x2000);\n              for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                longVar3 = 0x2000;\n                if (longVar2 < 0x2001) {\n                  longVar3 = longVar2;\n                }\n                longVar1 = bfd_bread(ptrVar,longVar3,unaffDoublePtr);\n                doublePtrVar = unaffDoublePtr;\n                if ((longVar3 != longVar1) ||\n                   (longVar1 = bfd_bwrite(ptrVar,longVar3,doublePtrVar1), doublePtrVar = doublePtrVar1, longVar3 != longVar1\n                   )) {\n                  FUN_001126c0(0,doublePtrVar,0,0);\n                  free(ptrVar);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*doublePtrVar1,varStack7 | 0x100);\n              free(ptrVar);\n              charVar = bfd_close_all_done(doublePtrVar1);\n              if (charVar == '\\0') {\n                FUN_001126c0(pcVar1,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            uVar2 = FUN_001125fa(unaffDoublePtr);\n            FUN_0011a110(uVar2);\n          }\n        }\n        else {\n          FUN_001126c0(0,unaffDoublePtr,0,0);\n        }\nLAB_00104f00:\n        charVar = bfd_close_all_done(doublePtrVar1);\n        if (charVar == '\\0') {\n          FUN_001126c0(pcVar1,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(pcVar1);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (varStack6._7_1_ == '\\0') {\n          doublePtrVar1 = (char **)bfd_openw(pcVar1,*(undefined8 *)unaffDoublePtr[1]);\n        }\n        else {\n          doublePtrVar1 = (char **)bfd_openw(pcVar1,varStack5);\n        }\n        if (doublePtrVar1 == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(pcVar1,0,0,0);\n          goto LAB_00104e93;\n        }\n        charVar = FUNC_00114e50(unaffDoublePtr,doublePtrVar1,unaffRetAddr);\n        if (charVar == '\\0') {\n          intVar1 = bfd_get_arch(unaffDoublePtr);\n          if (intVar1 == 0) goto LAB_00104d75;\n          charVar = bfd_close_all_done(doublePtrVar1);\n          if (charVar == '\\0') {\n            FUN_001126c0(pcVar1,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        charVar = bfd_close(doublePtrVar1);\n        if (charVar == '\\0') {\n          FUN_001126c0(pcVar1,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (intVar2 == 0)) {\n          FUN_0011a350(pcVar1,(stat *)&stack0x00000050);\n        }\n        longVar2 = bfd_openr(pcVar1,varStack5);\n        unaffPtr[2] = longVar2;\n        *varStack2 = longVar2;\n        varStack2 = (long *)(longVar2 + 0xf0);\n        doublePtrVar1 = (char **)bfd_openr_next_archived_file(varStack4,unaffDoublePtr);\n        bfd_close(unaffDoublePtr);\n        unaffDoublePtr = doublePtrVar1;\n      }\n      if ((DAT_00127a20 != 0) || (unaffDoublePtr == (char **)0x0)) {\n        *varStack2 = 0;\n        ptrVar = (void *)xstrdup(*varStack1);\n        if (DAT_00127a20 == 0) {\n          codeVar = bfd_close;\n        }\n        else {\n          codeVar = bfd_close_all_done;\n        }\n        charVar = (*codeVar)(varStack1);\n        if (charVar == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(ptrVar,0,0,0);\n        }\n        free(ptrVar);\n        ptrVar = (void *)xstrdup(*varStack4);\n        charVar = bfd_close(varStack4);\n        if (charVar == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(ptrVar,0,0,0);\n        }\n        free(ptrVar);\n        goto LAB_00114b4b;\n      }\n      pcVar1 = *unaffDoublePtr;\n      param3 = pcVar1;\n      if (*pcVar1 == '/') goto LAB_0010527d;\n    }\n    pcVar2 = pcVar1;\n    if ((*pcVar1 == '.') && (pcVar2 = pcVar1 + 1, pcVar1[1] == '.')) {\n      pcVar2 = pcVar1 + 2;\n      if ((pcVar1[2] == '\\0') || (pcVar1[2] == '/')) {\nLAB_0010527d:\n        uVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(uVar2,param3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (unaffPtr != (undefined8 *)0x0) {\n          if (unaffPtr[2] == 0) {\n            rmdir((char *)unaffPtr[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)unaffPtr[1]);\n          }\n          free((void *)unaffPtr[1]);\n          uIntPtr = (undefined8 *)*unaffPtr;\n          free(unaffPtr);\n          unaffPtr = uIntPtr;\n        }\n        rmdir(varStack3);\n        free(varStack3);\n        return;\n      }\n    }\n    for (; (pcVar1 = pcVar2, *pcVar2 != '\\0' && (*pcVar2 != '/')); pcVar2 = pcVar2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_file_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "process_data_0010e453",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "suffixes",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "size",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "tempSize",
                "ppcVar6": "currentSuffix",
                "lVar7": "offset"
            },
            "code": "\nundefined8 processData_0010e453(long data,char *prefix,char **suffixes)\n\n{\n  long length;\n  char result;\n  size_t size;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long tempSize;\n  char **currentSuffix;\n  long offset;\n  \n  if (suffixes == (char **)0x0) {\n    if (prefix != (char *)0x0) {\n      size = strlen(prefix);\n      formattedString = (undefined2 *)xmalloc(size + 10);\n      sprintf((char *)formattedString,\"xe%s:\",prefix);\nLAB_0010e578:\n      result = FUN_00109b52(data,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    tempSize = 10;\n    currentSuffix = suffixes;\n    if (prefix != (char *)0x0) {\n      size = strlen(prefix);\n      tempSize = size + 10;\n    }\n    for (; *currentSuffix != (char *)0x0; currentSuffix = currentSuffix + 1) {\n      size = strlen(*currentSuffix);\n      tempSize = tempSize + 0x14 + size;\n    }\n    formattedString = (undefined2 *)xmalloc(tempSize);\n    if (prefix == (char *)0x0) {\n      *formattedString = 0x65;\n      tempSize = 0;\n    }\n    else {\n      tempSize = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = tempSize + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",prefix,tempSize);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)suffixes + offset);\n      size = strlen((char *)formattedString);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + size),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + size) = 0x3b;\n    if (prefix == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(data,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = FUN_00109cf4(data,tempSize,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_process_data_00109d5c",
                "param_1": "input_data",
                "lVar1": "result",
                "uVar2": "processed_data"
            },
            "code": "\nundefined8 check_and_process_data_00109d5c(undefined8 input_data)\n\n{\n  long result;\n  undefined8 processed_data;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    processed_data = FUN_00109cf4(input_data,result,0);\n    return processed_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_param_and_return_0010ed2c",
                "param_1": "funcData",
                "param_2": "newParam",
                "param_3": "extraData",
                "extraout_RDX": "extraReg",
                "uVar3": "result",
                "in_R10": "inputReg",
                "auVar4": "outputData",
                "cVar1": "checkResult",
                "iVar2": "tempVar"
            },
            "code": "\nundefined  [16] updateParamAndReturn_0010ed2c(long funcData,ulong newParam,undefined8 extraData)\n\n{\n  char checkResult;\n  int tempVar;\n  undefined8 extraReg;\n  ulong result;\n  undefined8 inputReg;\n  undefined outputData [16];\n  \n  if (*(ulong *)(funcData + 0x1f0) < newParam) {\n    *(ulong *)(funcData + 0x1f0) = newParam;\n  }\n  if (*(long *)(funcData + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(funcData + 0x1f8) != 0) {\n      tempVar = *(int *)(funcData + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)extraData >> 8),1);\n      *(int *)(funcData + 0x1f8) = tempVar;\n      if (tempVar != 0) {\n        outputData = FUN_0010e2f0(funcData,0xe0,0,newParam - *(long *)(funcData + 0x200),0,inputReg);\n        return outputData;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    checkResult = FUN_0010e2f0(funcData,0xc0,0,*(long *)(funcData + 0x208),0);\n    if (checkResult != '\\0') {\n      *(undefined8 *)(funcData + 0x208) = 0xffffffffffffffff;\n      extraData = extraReg;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  outputData._0_8_ = result & 0xffffffff;\n  outputData._8_8_ = inputReg;\n  return outputData;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_param_and_return_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "input1Value",
                "uVar2": "input2Value",
                "iVar3": "memoryComparison",
                "extraout_var": "additionalOutput",
                "uVar4": "comparisonResult",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *input1,ulong *input2,undefined8 value1,undefined8 value2)\n\n{\n  ulong input1Value;\n  ulong input2Value;\n  int memoryComparison;\n  undefined4 additionalOutput;\n  ulong comparisonResult;\n  undefined returnValue [16];\n  \n  comparisonResult = *input1;\n  if (*input2 <= *input1) {\n    comparisonResult = *input2;\n  }\n  memoryComparison = memcmp((void *)(input1[3] + 3),(void *)(input2[3] + 3),comparisonResult - 3);\n  comparisonResult = CONCAT44(additionalOutput,memoryComparison);\n  if (memoryComparison == 0) {\n    input1Value = input1[8];\n    if (input1Value < input2[7]) {\n      comparisonResult = 0xffffffff;\n    }\n    else {\n      input2Value = input2[8];\n      if (input2Value < input1[7]) {\n        comparisonResult = 1;\n      }\n      else {\n        comparisonResult = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (input2Value < input1Value) {\n            comparisonResult = 1;\n          }\n          else {\n            comparisonResult = 0xffffffff;\n            if (input2Value <= input1Value) {\n              if (input1[2] == 0x100) {\n                comparisonResult = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                comparisonResult = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnValue._8_8_ = value2;\n  returnValue._0_8_ = comparisonResult;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_section_relocations_001163d0",
                "param_1": "section_data",
                "param_2": "section_address",
                "param_3": "section_size",
                "param_4": "output_buffer",
                "uVar1": "current_reloc",
                "uVar2": "section_data_value",
                "uVar3": "section_address_value",
                "bVar4": "is_corrupt",
                "puVar5": "reloc_iter",
                "iVar6": "memcmp_result",
                "uVar7": "error_string",
                "lVar8": "error_message",
                "__ptr": "reloc_data",
                "uVar9": "start_address",
                "uVar10": "reloc_index",
                "uVar11": "note_type",
                "uVar12": "note_size",
                "uVar13": "padded_size",
                "uVar14": "name_size",
                "uVar15": "last_size",
                "uVar16": "remaining_size",
                "puVar17": "note_iter",
                "puVar18": "note_data",
                "cVar19": "version_note_char",
                "puVar20": "buffer_iter",
                "iVar21": "note_index",
                "puVar22": "current_note",
                "puVar23": "note_buffer",
                "uVar24": "last_note_index",
                "__nmemb": "note_count",
                "puVar25": "note_iter2",
                "bVar26": "padding_byte",
                "local_88": "version_2_address",
                "uStack_80": "version_3_address",
                "local_70": "current_address",
                "local_68": "output_size",
                "local_60": "note_buffer_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_section_relocations_001163d0(undefined8 *section_data,undefined8 *section_address,ulong section_size,undefined *output_buffer)\n\n{\n  ulong current_reloc;\n  undefined8 section_data_value;\n  undefined8 section_address_value;\n  bool is_corrupt;\n  ulong *reloc_iter;\n  int memcmp_result;\n  undefined8 error_string;\n  long error_message;\n  void *reloc_data;\n  ulong start_address;\n  ulong reloc_index;\n  ulong note_type;\n  ulong note_size;\n  undefined *reloc_data_00;\n  ulong padded_size;\n  ulong name_size;\n  ulong last_size;\n  ulong remaining_size;\n  ulong *note_iter;\n  undefined *note_data;\n  char version_note_char;\n  undefined *buffer_iter;\n  int note_index;\n  undefined *current_note;\n  ulong *note_buffer;\n  ulong last_note_index;\n  size_t note_count;\n  ulong *note_iter2;\n  byte padding_byte;\n  ulong version_2_address;\n  ulong version_3_address;\n  ulong current_address;\n  ulong output_size;\n  ulong *note_buffer_array;\n  \n  padding_byte = 0;\n  error_message = bfd_get_reloc_upper_bound();\n  output_size = section_size;\n  if (0 < error_message) {\n    reloc_data = (void *)xmalloc(error_message);\n    error_message = bfd_canonicalize_reloc(section_data,section_address,reloc_data,DAT_001278b0);\n    free(reloc_data);\n    if (error_message != 0) {\n      if (_DAT_00127a24 == 0) {\n        section_data_value = *section_data;\n        section_address_value = *section_address;\n        error_string = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(error_string,section_data_value,section_address_value);\n      }\n      note_buffer_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  note_buffer_array = (ulong *)xcalloc(section_size / 0xc,0x48,section_size % 0xc);\n  version_2_address = 0;\n  current_address = 0;\n  remaining_size = section_size;\n  last_size = 0;\n  note_buffer = note_buffer_array;\n  name_size = 0;\n  current_note = output_buffer;\n  while (0xb < remaining_size) {\n    reloc_index = (**(code **)(section_data[1] + 0x40))(current_note);\n    *note_buffer = reloc_index;\n    reloc_index = (**(code **)(section_data[1] + 0x40))(current_note + 4);\n    note_buffer[1] = reloc_index;\n    note_type = (**(code **)(section_data[1] + 0x40))(current_note + 8);\n    reloc_index = *note_buffer;\n    note_buffer[2] = note_type;\n    note_size = note_buffer[1];\n    padded_size = reloc_index + 3 & 0xfffffffffffffffc;\n    note_buffer[6] = padded_size;\n    if (note_size != (note_size + 3 & 0xfffffffffffffffc)) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    current_reloc = padded_size + note_size + 0xc;\n    if (remaining_size < current_reloc) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (reloc_index < 2) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    note_buffer[3] = (ulong)(current_note + 0xc);\n    note_buffer[4] = (ulong)(current_note + padded_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (padded_size + note_size));\n    if (reloc_index != 2) {\n      if (current_note[0xc] == '$') {\n        if ((current_note[0xd] == '\\x01') && (current_note[0xe] == '1')) {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < reloc_index) && (current_note[0xc] == 'G')) && (current_note[0xd] == 'A')) &&\n              ((current_note[0xe] == '$' && (current_note[0xf] == '\\x01')))) {\n        if (current_note[0x10] == '2') {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n        if (current_note[0x10] == '3') {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    start_address = last_size;\n    last_note_index = name_size;\n    if (note_size == 0) {\n      if (note_type == 0x100) {\n        note_buffer[7] = version_2_address;\nLAB_001164af:\n        note_size = name_size;\n        last_note_index = name_size;\n      }\n      else {\n        note_buffer[7] = current_address;\nLAB_0011669e:\n        start_address = last_size;\n        note_size = last_size;\n      }\n    }\n    else {\n      if (note_size != 0x10) {\n        if (note_size < 0x11) {\n          if (note_size == 4) {\n            note_type = (**(code **)(section_data[1] + 0x40))();\n            note_size = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (note_size == 8) {\n            remaining_size = FUN_001086af();\n            return remaining_size;\n          }\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      note_type = (**(code **)(section_data[1] + 0x28))(current_note + padded_size + 0xc);\n      note_size = (**(code **)(section_data[1] + 0x28))();\n      if (note_size < note_type) {\n        note_type = note_size;\n      }\nLAB_00116631:\n      if (note_buffer[2] == 0x100) {\n        if (note_type == 0) {\n          note_type = version_2_address;\n        }\n        reloc_index = *note_buffer;\n        note_buffer[7] = note_type;\n        last_note_index = note_size;\n        version_2_address = note_type;\n        if (note_size == 0) goto LAB_001164af;\n      }\n      else {\n        if (note_type == 0) {\n          note_type = current_address;\n        }\n        reloc_index = *note_buffer;\n        note_buffer[7] = note_type;\n        start_address = note_size;\n        current_address = note_type;\n        if (note_size == 0) goto LAB_0011669e;\n      }\n    }\n    note_buffer[8] = note_size;\n    if (*(char *)((note_buffer[3] - 1) + reloc_index) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_buffer = note_buffer + 9;\n    last_size = start_address;\n    name_size = last_note_index;\n    current_note = current_note + current_reloc;\n  }\n  if (remaining_size == 0) {\n    section_data_value = *section_data;\n    section_address_value = *section_address;\n    error_string = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(error_string,section_data_value,section_address_value);\n    note_count = ((long)note_buffer - (long)note_buffer_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(note_buffer_array,note_count,0x48,FUN_0011a1b0);\n    for (note_iter = note_buffer_array; note_iter < note_buffer; note_iter = note_iter + 9) {\n      remaining_size = note_iter[2];\n      if (remaining_size != 0) {\n        last_size = note_iter[7];\n        name_size = note_iter[8];\n        note_iter2 = note_iter;\n        note_index = 0;\n        if (last_size == name_size) {\n          note_iter[2] = 0;\n        }\n        else {\n          do {\n            do {\n              reloc_iter = note_iter2;\n              note_iter2 = reloc_iter + -9;\n              if (note_iter2 < note_buffer_array) goto LAB_001167f5;\n              reloc_index = reloc_iter[-7];\n            } while (reloc_index == 0);\n            if ((*note_iter2 != *note_iter) ||\n               (memcmp_result = memcmp((void *)reloc_iter[-6],(void *)note_iter[3],*note_iter), memcmp_result != 0)) break;\n            note_size = reloc_iter[-2];\n            note_type = reloc_iter[-1];\n            if (last_size == note_size) {\n              if (name_size == note_type) {\n                note_iter[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (name_size <= note_type) {\n                note_iter[2] = 0;\n                break;\n              }\n              if (note_type < last_size) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < note_type) || (last_size <= (note_type + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (reloc_index == 0x101)) {\n                if (note_type <= name_size) {\n                  note_type = name_size;\n                }\n                if (note_size < last_size) {\n                  last_size = note_size;\n                }\n                reloc_iter[-1] = note_type;\n                reloc_iter[-2] = last_size;\n                note_iter[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (note_size <= last_size) goto LAB_001167a6;\n              if (note_type < last_size) goto LAB_0010852c;\n              if (name_size < last_size) {\n                if ((0xfffffffffffffff0 < name_size) || (note_size <= (name_size + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (name_size != note_type) goto LAB_001167b8;\n            }\nFUN_00116852:\n            is_corrupt = note_index < 0x11;\n            note_index = note_index + 1;\n          } while (is_corrupt);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(note_buffer_array,note_count,0x48,FUN_0011a250);\n    reloc_data_00 = (undefined *)xmalloc(section_size * 2);\n    version_3_address = 0;\n    current_address = 0;\n    current_note = reloc_data_00;\n    for (note_iter = note_buffer_array; note_iter < note_buffer; note_iter = note_iter + 9) {\n      if (note_iter[2] != 0) {\n        note_data = current_note + 0xc;\n        if ((note_iter[7] == current_address) && (note_iter[8] == version_3_address)) {\n          (**(code **)(section_data[1] + 0x50))(*note_iter,current_note);\n          (**(code **)(section_data[1] + 0x50))(0,current_note + 4);\n          (**(code **)(section_data[1] + 0x50))(note_iter[2],current_note + 8);\n          last_size = note_iter[6];\n          remaining_size = *note_iter;\n          current_note = (undefined *)note_iter[3];\n          buffer_iter = note_data;\n          for (name_size = remaining_size; name_size != 0; name_size = name_size - 1) {\n            *buffer_iter = *current_note;\n            current_note = current_note + (ulong)padding_byte * -2 + 1;\n            buffer_iter = buffer_iter + (ulong)padding_byte * -2 + 1;\n          }\n          if (remaining_size < last_size) {\n            for (error_message = last_size - remaining_size; error_message != 0; error_message = error_message + -1) {\n              *buffer_iter = 0;\n              buffer_iter = buffer_iter + (ulong)padding_byte * -2 + 1;\n            }\n          }\n          current_note = note_data + last_size;\n        }\n        else {\n          (**(code **)(section_data[1] + 0x50))();\n          if (*(int *)(section_data[1] + 8) == 5) {\n            version_note_char = (*(char *)(section_data[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            version_note_char = '\\b';\n          }\n          (**(code **)(section_data[1] + 0x50))(version_note_char,current_note + 4);\n          (**(code **)(section_data[1] + 0x50))(note_iter[2],current_note + 8);\n          remaining_size = *note_iter;\n          current_note = (undefined *)note_iter[3];\n          buffer_iter = note_data;\n          for (last_size = remaining_size; last_size != 0; last_size = last_size - 1) {\n            *buffer_iter = *current_note;\n            current_note = current_note + (ulong)padding_byte * -2 + 1;\n            buffer_iter = buffer_iter + (ulong)padding_byte * -2 + 1;\n          }\n          last_size = note_iter[6];\n          if (remaining_size < last_size) {\n            for (error_message = last_size - remaining_size; error_message != 0; error_message = error_message + -1) {\n              *buffer_iter = 0;\n              buffer_iter = buffer_iter + (ulong)padding_byte * -2 + 1;\n            }\n          }\n          error_message = section_data[1];\n          note_data = note_data + last_size;\n          current_note = note_data + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(section_data[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(note_iter[7],note_data);\n            (**(code **)(section_data[1] + 0x38))(note_iter[8],current_note);\n            current_note = note_data + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(note_iter[7],note_data);\n            (**(code **)(section_data[1] + 0x50))(note_iter[8],note_data + 4);\n          }\n          current_address = note_iter[7];\n          version_3_address = note_iter[8];\n        }\n      }\n    }\n    last_size = (long)current_note - (long)reloc_data_00;\n    remaining_size = last_size;\n    current_note = reloc_data_00;\n    output_size = section_size;\n    if (last_size < section_size) {\n      for (; output_size = last_size, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *output_buffer = *current_note;\n        current_note = current_note + (ulong)padding_byte * -2 + 1;\n        output_buffer = output_buffer + (ulong)padding_byte * -2 + 1;\n      }\n    }\n    free(reloc_data_00);\n  }\n  else {\n    error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (error_message != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,section_data,section_address,error_message);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(note_buffer_array);\n  return output_size;\n}\n\n",
            "called": [
                "xcalloc",
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_section_relocations_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "version",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageAndExit_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 version;\n  char *message;\n  \n  version = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,version);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_information_00108c86",
                "param_1": "input_data",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "sVar3": "length",
                "puVar4": "extracted_string",
                "lVar5": "data_ptr",
                "__s": "string_ptr",
                "__s1": "cmp_string_ptr",
                "puVar6": "new_extracted_string",
                "uVar7": "return_val",
                "bVar8": "byte_val"
            },
            "code": "\nundefined8 extract_information_00108c86(long *input_data)\n\n{\n  char result;\n  int comparison_result;\n  size_t length;\n  undefined2 *extracted_string;\n  long data_ptr;\n  char *string_ptr;\n  char *cmp_string_ptr;\n  undefined2 *new_extracted_string;\n  undefined8 return_val;\n  byte byte_val;\n  \n  byte_val = 0;\n  data_ptr = *input_data;\n  string_ptr = (char *)(data_ptr + 4);\n  result = FUN_00113fb0(string_ptr,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = FUN_00113fb0(string_ptr,\"bsdrv-\");\n    if (result == '\\0') {\n      result = FUN_00113fb0(string_ptr,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      string_ptr = (char *)(data_ptr + 6);\n      return_val = 0xc;\n    }\n    else {\n      string_ptr = (char *)(data_ptr + 6);\n      return_val = 0xb;\n    }\n  }\n  else {\n    return_val = 10;\n  }\n  length = strlen(string_ptr);\n  extracted_string = (undefined2 *)xmalloc(length + 8);\n  cmp_string_ptr = string_ptr + 4;\n  new_extracted_string = extracted_string;\n  for (data_ptr = length + 1; data_ptr != 0; data_ptr = data_ptr + -1) {\n    *(char *)new_extracted_string = *string_ptr;\n    string_ptr = string_ptr + (ulong)byte_val * -2 + 1;\n    new_extracted_string = (undefined2 *)((long)new_extracted_string + (ulong)byte_val * -2 + 1);\n  }\n  *(undefined *)(extracted_string + 1) = 0x69;\n  *extracted_string = 0x6570;\n  comparison_result = strcmp(cmp_string_ptr,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)extracted_string + 7) = 0x36;\n    *(undefined2 *)((long)extracted_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(cmp_string_ptr,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)extracted_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(cmp_string_ptr,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)extracted_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_data = (long)extracted_string;\n  return return_val;\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_information_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_and_return_status_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "ptrToData",
                "bfd_close_all_done": "closeAllBFD",
                "undefined4": "status"
            },
            "code": "\nstatus closeBFDAndReturnStatus_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *ptrToData;\n  \n  FUN_0011a110(*ptrToData);\n  *(status *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(status *)(filePointer + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "close_bfd_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMsg",
                "unaff_EBP": "registerValue1",
                "unaff_R14": "registerValue2"
            },
            "code": "\nvoid validateAndSetFlags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMsg;\n  uint registerValue1;\n  long registerValue2;\n  \n  if ((flags & 2) != 0) {\n    errorMsg = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMsg);\n  }\n  if ((((flags & 8) == 0) || ((registerValue1 & 0x10) == 0)) && ((registerValue1 & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((registerValue1 & 0x40) == 0)) && ((registerValue1 & 0x60) != 0x60)) {\n      *(uint *)(registerValue2 + 0x14) = flags | registerValue1;\n      return;\n    }\n    errorMsg = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMsg);\n  }\n  errorMsg = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMsg);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "validate_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "index",
                "puVar3": "destPointer",
                "bVar4": "isIncrementing"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long index;\n  undefined *destPointer;\n  byte isIncrementing;\n  \n  isIncrementing = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPointer = destination;\n  for (index = (long)length; index != 0; index = index + -1) {\n    *destPointer = *source;\n    source = source + (ulong)isIncrementing * -2 + 1;\n    destPointer = destPointer + (ulong)isIncrementing * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_list_ptr",
                "param_2": "slot_index",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "err_msg",
                "plVar2": "slot_ptr",
                "lVar3": "slot_offset",
                "lVar4": "counter",
                "uVar5": "remaining_slots",
                "bVar6": "dummy_byte",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_list_ptr,ulong slot_index,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 err_msg;\n  long *slot_ptr;\n  long slot_offset;\n  long counter;\n  ulong remaining_slots;\n  byte dummy_byte;\n  undefined return_value [16];\n  \n  dummy_byte = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_list_ptr == (long *)0x0) {\n        slot_ptr = (long *)xmalloc(0x88);\n        *slot_list_ptr = slot_ptr;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)slot_ptr = 0;\n          slot_ptr = (long *)((long)slot_ptr + (ulong)dummy_byte * -8 + 4);\n        }\n      }\n      slot_list_ptr = (long **)*slot_list_ptr;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_list_ptr == (long *)0x0) {\n      slot_ptr = (long *)xmalloc(0x88);\n      *slot_list_ptr = slot_ptr;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)slot_ptr = 0;\n        slot_ptr = (long *)((long)slot_ptr + (ulong)dummy_byte * -8 + 4);\n      }\n    }\n    return_value._8_8_ = unused_param_2;\n    return_value._0_8_ = *slot_list_ptr + slot_index + slot_offset + 1;\n    return return_value;\n  }\n  err_msg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(err_msg,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "dataStructure",
                "puVar2": "ptrToData",
                "lVar3": "loopCounter",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeDataStructure_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *dataStructure;\n  undefined8 *ptrToData;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  dataStructure = (undefined8 *)xmalloc(0x1b0);\n  ptrToData = dataStructure;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)ptrToData = 0;\n    ptrToData = (undefined8 *)((long)ptrToData + (ulong)byteValue * -8 + 4);\n  }\n  *dataStructure = input1;\n  *(undefined *)(dataStructure + 1) = input2;\n  dataStructure[2] = input3;\n  dataStructure[3] = input4;\n  *(undefined4 *)(dataStructure + 0x10) = 1;\n  ptrToData = (undefined8 *)xmalloc(8);\n  dataStructure[0xd] = 0xffffffffffffffff;\n  dataStructure[0x11] = ptrToData;\n  *ptrToData = 0;\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_pointer_00109b2f",
                "param_1": "ptr",
                "__ptr": "currentPtr",
                "puVar1": "nextPtr"
            },
            "code": "\nundefined8 * extractNextPointer_00109b2f(long ptr)\n\n{\n  undefined8 *currentPtr;\n  undefined8 *nextPtr;\n  \n  currentPtr = *(undefined8 **)(ptr + 0x60);\n  if (currentPtr != (undefined8 *)0x0) {\n    nextPtr = (undefined8 *)currentPtr[1];\n    *(undefined8 *)(ptr + 0x60) = *currentPtr;\n    free(currentPtr);\n    return nextPtr;\n  }\n  return currentPtr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e918",
                "FUN_0010a0e9",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a424",
                "FUN_0010a2b9",
                "FUN_0010e7c2",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010a83e"
            ],
            "imported": false,
            "current_name": "extract_next_pointer_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "validate_symbol_redefinition_00108d9a",
                "param_1": "file_name",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_pointers",
                "pcVar2": "duplicate_symbol_name",
                "lVar3": "symbol_occurrence",
                "uVar4": "error_message",
                "plVar5": "symbol_slot"
            },
            "code": "\nundefined8 validate_symbol_redefinition_00108d9a(undefined8 file_name,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pointers;\n  char *duplicate_symbol_name;\n  long symbol_occurrence;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_pointers = (char **)xmalloc(0x10);\n  duplicate_symbol_name = strdup(symbol_name);\n  *symbol_pointers = duplicate_symbol_name;\n  duplicate_symbol_name = strdup(target_symbol);\n  error_message = DAT_001278d0;\n  symbol_pointers[1] = duplicate_symbol_name;\n  symbol_occurrence = htab_find(error_message,symbol_pointers);\n  if (symbol_occurrence != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(error_message,file_name,symbol_name);\n  }\n  symbol_occurrence = htab_find(DAT_001278c8,target_symbol);\n  if (symbol_occurrence != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(error_message,file_name,target_symbol);\n  }\n  symbol_slot = (long *)htab_find_slot(DAT_001278d0,symbol_pointers,1);\n  error_message = DAT_001278c8;\n  *symbol_slot = (long)symbol_pointers;\n  duplicate_symbol_name = symbol_pointers[1];\n  symbol_pointers = (char **)htab_find_slot(error_message,duplicate_symbol_name,1);\n  *symbol_pointers = duplicate_symbol_name;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "format_string_and_call_0010e9a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "option",
                "param_4": "paramPointer",
                "lVar1": "localVar1",
                "uVar2": "returnVal",
                "__s": "str1",
                "__s_00": "str2",
                "sVar3": "len1",
                "sVar4": "len2",
                "__s_01": "formattedStr",
                "pcVar5": "prefix",
                "uVar6": "var6"
            },
            "code": "\nundefined4 formatStringAndCall_0010e9a0(long input1,char *input2,undefined4 option,undefined8 paramPointer)\n\n{\n  long localVar1;\n  undefined4 returnVal;\n  byte *str1;\n  byte *str2;\n  size_t len1;\n  size_t len2;\n  char *formattedStr;\n  char *prefix;\n  undefined8 var6;\n  \n  str1 = (byte *)FUN_00109b2f();\n  switch(option) {\n  case 1:\n    prefix = \"G\";\n    var6 = 0x20;\n    break;\n  case 2:\n    prefix = \"S\";\n    var6 = 0x26;\n    break;\n  case 3:\n    prefix = \"V\";\n    var6 = 0x26;\n    break;\n  case 4:\n    prefix = \"\";\n    var6 = 0x80;\n    if (((&_sch_istable)[(ulong)*str1 * 2] & 4) == 0) {\n      localVar1 = *(long *)(input1 + 0x68);\n      *(long *)(input1 + 0x68) = localVar1 + 1;\n      len1 = strlen((char *)str1);\n      str2 = (byte *)xmalloc(len1 + 0x14);\n      sprintf((char *)str2,\"%ld=%s\",localVar1,str1);\n      free(str1);\n      str1 = str2;\n    }\n    break;\n  case 5:\n    prefix = \"r\";\n    var6 = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  len1 = strlen(input2);\n  len2 = strlen((char *)str1);\n  formattedStr = (char *)xmalloc(len1 + 3 + len2);\n  sprintf(formattedStr,\"%s:%s%s\",input2,prefix,str1);\n  free(str1);\n  returnVal = FUN_0010e2f0(input1,var6,0,paramPointer,formattedStr);\n  if ((char)returnVal != '\\0') {\n    free(formattedStr);\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_string_and_call_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSectionError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_section_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "print_bad_number_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "obtainErrorMessage"
            },
            "code": "\nvoid printBadNumberErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "print_bad_number_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareStrings",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStrings,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "xcalloc",
                "htab_eq_string",
                "free",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00108d9a",
                "FUN_00104cc1",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_001126c0",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "alignmentMsg",
                "lVar2": "value",
                "cVar3": "success",
                "lVar4": "errorMsg",
                "lVar5": "result",
                "unaff_RBX": "context",
                "unaff_RBP": "basePointer",
                "unaff_R12": "arg1",
                "unaff_R14B": "checkFlag",
                "unaff_R15": "ptr"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long alignmentMsg;\n  long value;\n  char success;\n  long errorMsg;\n  long result;\n  long context;\n  long basePointer;\n  long arg1;\n  char checkFlag;\n  long ptr;\n  \n  errorMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(ptr + 0xb4) = *(undefined4 *)(context + 0xb4);\n  *(byte *)(ptr + 0x28) =\n       *(byte *)(ptr + 0x28) & 0xcf | *(byte *)(context + 0x28) & 0x30;\n  *(long *)(context + 0x60) = ptr;\n  *(undefined8 *)(context + 0x58) = 0;\n  if ((*(byte *)(context + 0x27) & 2) != 0) {\n    alignmentMsg = *(long *)(context + 0xd0);\n    result = FUN_00115d00(alignmentMsg,*(undefined8 *)(context + 0xe0));\n    if ((result != 0) &&\n       (value = *(long *)(arg1 + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(value + 8) == 5)) {\n      *(long *)(alignmentMsg + 0xb0) = result;\n      success = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (success == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  success = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (success == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (checkFlag != '\\0') {\n    *(undefined4 *)(*(long *)(ptr + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "param_1": "fileArray",
                "param_2": "typeIndex",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "fileNumber",
                "pcVar2": "errorMessage",
                "plVar3": "typePtr",
                "lVar4": "counter",
                "uVar5": "typeOffset",
                "pplVar6": "typePtrArray",
                "bVar7": "byteValue",
                "auVar8": "returnVal"
            },
            "code": "\n\n\nundefined  [16] processFile_00109022(long fileArray,uint *typeIndex,undefined8 param3,undefined8 param4)\n\n{\n  uint fileNumber;\n  char *errorMessage;\n  long *typePtr;\n  long counter;\n  uint typeOffset;\n  long **typePtrArray;\n  byte byteValue;\n  undefined returnVal [16];\n  \n  byteValue = 0;\n  typeOffset = *typeIndex;\n  fileNumber = typeIndex[1];\n  if (((int)typeOffset < 0) || (*(uint *)(fileArray + 0x80) <= typeOffset)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)typeOffset);\n  }\n  else {\n    if (-1 < (int)fileNumber) {\n      typePtrArray = (long **)(*(long *)(fileArray + 0x88) + (long)(int)typeOffset * 8);\n      for (typeOffset = fileNumber; 0xf < (int)typeOffset; typeOffset = typeOffset - 0x10) {\n        if (*typePtrArray == (long *)0x0) {\n          typePtr = (long *)xmalloc(0x88);\n          *typePtrArray = typePtr;\n          for (counter = 0x22; counter != 0; counter = counter + -1) {\n            *(undefined4 *)typePtr = 0;\n            typePtr = (long *)((long)typePtr + (ulong)byteValue * -8 + 4);\n          }\n        }\n        typePtrArray = (long **)*typePtrArray;\n      }\n      if (*typePtrArray == (long *)0x0) {\n        typePtr = (long *)xmalloc(0x88);\n        *typePtrArray = typePtr;\n        for (counter = 0x22; counter != 0; counter = counter + -1) {\n          *(undefined4 *)typePtr = 0;\n          typePtr = (long *)((long)typePtr + (ulong)byteValue * -8 + 4);\n        }\n      }\n      typePtr = *typePtrArray + (long)(int)((fileNumber >> 4) * -0x10 + fileNumber) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)fileNumber);\n  }\n  typePtr = (long *)0x0;\nLAB_00109117:\n  returnVal._8_8_ = param4;\n  returnVal._0_8_ = typePtr;\n  return returnVal;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_file_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "file_context",
                "param_2": "variable_id",
                "param_3": "file_id",
                "param_4": "variable_type",
                "param_5": "record",
                "param_6": "result",
                "auVar1": "recorded_variable",
                "auVar9": "return_value",
                "piVar3": "allocated_memory",
                "piVar7": "current_memory",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "file_offset",
                "bVar8": "byte_flag",
                "uVar2": "status",
                "dcgettext": "get_debug_message",
                "_stderr": "error_stream",
                "fprintf": "print_to_error_stream",
                "xmalloc": "allocate_memory"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long file_context,long variable_id,ulong file_id,int variable_type,undefined8 record,\n            undefined8 result)\n\n{\n  undefined recorded_variable [16];\n  undefined8 status;\n  int *allocated_memory;\n  char flag;\n  long loop_counter;\n  long file_offset;\n  int *current_memory;\n  byte byte_flag;\n  undefined return_value [16];\n  \n  byte_flag = 0;\n  if (variable_id == 0) {\n    recorded_variable._8_8_ = 0;\n    recorded_variable._0_8_ = file_id;\n    return recorded_variable << 0x40;\n  }\n  if (file_id != 0) {\n    if ((*(long *)(file_context + 8) == 0) || (file_offset = *(long *)(file_context + 0x10), file_offset == 0)) {\n      status = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(error_stream,\"%s\\n\",status);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        file_offset = file_offset + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_context + 0x20) == 0) {\n        file_offset = file_offset + 0x10;\n        flag = '\\0';\n      }\n      else {\n        file_offset = *(long *)(file_context + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      file_offset = FUN_00112925(file_offset,variable_id,2,flag);\n      if (file_offset != 0) {\n        allocated_memory = (int *)xmalloc(0x18);\n        current_memory = allocated_memory + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *current_memory = 0;\n          current_memory = current_memory + (ulong)byte_flag * -2 + 1;\n        }\n        *allocated_memory = variable_type;\n        status = 1;\n        *(ulong *)(allocated_memory + 2) = file_id;\n        *(undefined8 *)(allocated_memory + 4) = record;\n        *(int **)(file_offset + 0x20) = allocated_memory;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  return_value._8_8_ = result;\n  return_value._0_8_ = status;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "print_number_or_increment_and_print_00109d97",
                "param_1": "number",
                "local_40": "formattedString",
                "lVar1": "currentValue"
            },
            "code": "\nvoid printNumberOrIncrementAndPrint_00109d97(long number)\n\n{\n  long currentValue;\n  char formattedString [40];\n  \n  if (*(long *)(number + 0x70) != 0) {\n    FUN_00109cf4(number,*(long *)(number + 0x70),0);\n    return;\n  }\n  currentValue = *(long *)(number + 0x68);\n  *(long *)(number + 0x68) = currentValue + 1;\n  sprintf(formattedString,\"%ld=%ld\",currentValue,currentValue);\n  FUN_00109b52(number,formattedString,currentValue,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "print_number_or_increment_and_print_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "process_build_attribute_notes_001086af",
                "in_RCX": "param_1",
                "unaff_RBX": "param_2",
                "unaff_RBP": "var31",
                "unaff_R12": "var26",
                "unaff_R13": "var32",
                "unaff_retaddr": "var33",
                "param_9": "var18",
                "param_13": "var19",
                "param_14": "param_13",
                "in_stack_00000030": "param_14",
                "in_stack_00000038": "param_15",
                "uVar1": "return_value",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "var4",
                "puVar5": "var30",
                "iVar6": "var6",
                "lVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar20": "var15",
                "iVar23": "var17",
                "unaff_R14": "var20",
                "puVar15": "var21",
                "puVar16": "var22",
                "cVar17": "var23",
                "puVar18": "var24",
                "puVar19": "var25",
                "__ptr": "var27",
                "__nmemb": "var28",
                "puVar21": "var29"
            },
            "code": "\nulong processBuildAttributeNotes_001086af(void)\n\n{\n  ulong return_value;\n  undefined8 var2;\n  undefined8 var3;\n  bool var4;\n  ulong *var30;\n  int var6;\n  long var7;\n  undefined8 var8;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  undefined *var27;\n  ulong param_1;\n  ulong var12;\n  ulong var13;\n  ulong var14;\n  ulong param_2;\n  ulong var31;\n  ulong *var21;\n  undefined *var22;\n  char var23;\n  undefined *var24;\n  undefined *var25;\n  ulong *var26;\n  ulong var32;\n  ulong var15;\n  size_t var28;\n  undefined8 *var20;\n  ulong *var29;\n  byte bVar22;\n  int var17;\n  ulong var33;\n  ulong param_7;\n  uint param_8;\n  ulong var18;\n  ulong param_10;\n  ulong *param_11;\n  undefined *param_14;\n  uint param_15;\n  uint var19;\n  undefined8 *param_13;\n  \n  bVar22 = 0;\n  param_7 = param_1;\n  var9 = (**(code **)(var20[1] + 0x40))();\n  var10 = (**(code **)(var20[1] + 0x40))(var26[4] + 4);\nLAB_0011662a:\n  var13 = var31;\n  var15 = var32;\n  if (var10 < var9) {\n    var9 = var10;\n  }\n  do {\n    var11 = param_7;\n    var12 = param_7;\n    var21 = var26;\n    if (var26[2] == 0x100) {\n      if (var9 == 0) {\n        var9 = var33;\n      }\n      var14 = *var26;\n      var26[7] = var9;\n      var31 = var13;\n      var32 = var10;\n      var33 = var9;\n      if (var10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (var9 == 0) {\n        var9 = var18;\n      }\n      var14 = *var26;\n      var26[7] = var9;\n      var31 = var10;\n      var32 = var15;\n      var18 = var9;\n      if (var10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    var21[8] = var10;\n    if (*(char *)((var21[3] - 1) + var14) != '\\0') {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    var26 = var21 + 9;\n    if (param_2 < 0xc) {\n      if (param_2 != 0) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((param_15 | var19 | param_8) != 0) {\n        if (((var19 | param_8) == 0) || (param_15 == 0)) {\n          if (var19 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        var7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *var20;\n      var3 = *param_13;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var2,var3);\nLAB_0011671b:\n      var28 = ((long)var26 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,var28,0x48,FUN_0011a1b0);\n      var21 = param_11;\n      goto LAB_001167f9;\n    }\n    var10 = (**(code **)(var20[1] + 0x40))(var12);\n    *var26 = var10;\n    var10 = (**(code **)(var20[1] + 0x40))(var12 + 4);\n    var21[10] = var10;\n    var9 = (**(code **)(var20[1] + 0x40))(var12 + 8);\n    var14 = *var26;\n    var21[0xb] = var9;\n    var10 = var21[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    var21[0xf] = var13;\n    if (var10 != (var10 + 3 & 0xfffffffffffffffc)) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var9 - 0x100) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    var11 = var13 + var10 + 0xc;\n    if (param_2 < var11) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    var21[0xc] = var12 + 0xc;\n    return_value = var12 + 0xc + var13;\n    var21[0xd] = return_value;\n    param_2 = param_2 + (-0xc - (var13 + var10));\n    var11 = var12 + var11;\n    if (var14 != 2) {\n      if (*(char *)(var12 + 0xc) == '$') {\n        if ((*(char *)(var12 + 0xd) == '\\x01') && (*(char *)(var12 + 0xe) == '1')) {\n          var10 = FUN_00116490();\n          return var10;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(var12 + 0xc) == 'G')) &&\n               (*(char *)(var12 + 0xd) == 'A')) &&\n              ((*(char *)(var12 + 0xe) == '$' && (*(char *)(var12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var12 + 0x10) == '2') {\n          var10 = FUN_00116490();\n          return var10;\n        }\n        if (*(char *)(var12 + 0x10) == '3') {\n          var10 = FUN_00116490();\n          return var10;\n        }\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = var31;\n    var15 = var32;\n    if (var10 == 0) {\n      if (var9 == 0x100) {\n        var21[0x10] = var33;\nLAB_001164af:\n        var12 = var11;\n        var10 = var15;\n        var21 = var26;\n        var32 = var15;\n      }\n      else {\n        var21[0x10] = var18;\nLAB_0011669e:\n        var31 = var13;\n        var12 = var11;\n        var10 = var13;\n        var21 = var26;\n        var32 = var15;\n      }\n      goto LAB_001164bb;\n    }\n    if (var10 == 0x10) break;\n    if (0x10 < var10) {\nLAB_00116679:\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (var7 != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,var20,param_13,var7);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (var10 != 4) {\n      if (var10 == 8) {\n        var10 = processBuildAttributeNotes_001086af();\n        return var10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = var11;\n    var9 = (**(code **)(var20[1] + 0x40))();\n    var10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = var11;\n  var9 = (**(code **)(var20[1] + 0x28))(return_value);\n  var10 = (**(code **)(var20[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (var26 <= var21) {\n    qsort(param_11,var28,0x48,FUN_0011a250);\n    var27 = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    var18 = 0;\n    var25 = var27;\n    for (var21 = param_11; var21 < var26; var21 = var21 + 9) {\n      if (var21[2] != 0) {\n        var24 = var25 + 4;\n        var22 = var25 + 0xc;\n        if ((var21[7] == var18) && (var21[8] == param_7)) {\n          (**(code **)(var20[1] + 0x50))(*var21,var25);\n          (**(code **)(var20[1] + 0x50))(0,var24);\n          (**(code **)(var20[1] + 0x50))(var21[2],var25 + 8);\n          var9 = var21[6];\n          var10 = *var21;\n          var25 = (undefined *)var21[3];\n          var24 = var22;\n          for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n            *var24 = *var25;\n            var25 = var25 + (ulong)bVar22 * -2 + 1;\n            var24 = var24 + (ulong)bVar22 * -2 + 1;\n          }\n          if (var10 < var9) {\n            for (var7 = var9 - var10; var7 != 0; var7 = var7 + -1) {\n              *var24 = 0;\n              var24 = var24 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          var25 = var22 + var9;\n        }\n        else {\n          (**(code **)(var20[1] + 0x50))();\n          if (*(int *)(var20[1] + 8) == 5) {\n            var23 = (*(char *)(var20[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            var23 = '\\b';\n          }\n          (**(code **)(var20[1] + 0x50))(var23,var24);\n          (**(code **)(var20[1] + 0x50))(var21[2],var25 + 8);\n          var10 = *var21;\n          var25 = (undefined *)var21[3];\n          var24 = var22;\n          for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n            *var24 = *var25;\n            var25 = var25 + (ulong)bVar22 * -2 + 1;\n            var24 = var24 + (ulong)bVar22 * -2 + 1;\n          }\n          var9 = var21[6];\n          if (var10 < var9) {\n            for (var7 = var9 - var10; var7 != 0; var7 = var7 + -1) {\n              *var24 = 0;\n              var24 = var24 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          var7 = var20[1];\n          var22 = var22 + var9;\n          var25 = var22 + 8;\n          if ((*(int *)(var7 + 8) == 5) && (*(char *)(var20[0x22] + 4) == '\\x02')) {\n            (**(code **)(var7 + 0x38))(var21[7],var22);\n            (**(code **)(var20[1] + 0x38))(var21[8],var25);\n            var25 = var22 + 0x10;\n          }\n          else {\n            (**(code **)(var7 + 0x50))(var21[7],var22);\n            (**(code **)(var20[1] + 0x50))(var21[8],var22 + 4);\n          }\n          var18 = var21[7];\n          param_7 = var21[8];\n        }\n      }\n    }\n    var9 = (long)var25 - (long)var27;\n    var10 = var9;\n    var25 = var27;\n    if (var9 < param_10) {\n      for (; param_10 = var9, var10 != 0; var10 = var10 - 1) {\n        *param_14 = *var25;\n        var25 = var25 + (ulong)bVar22 * -2 + 1;\n        param_14 = param_14 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(var27);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (var21[2] != 0) {\n    var10 = var21[7];\n    var9 = var21[8];\n    var13 = var21[2];\n    var29 = var21;\n    var17 = 0;\n    if (var10 == var9) {\n      var21[2] = 0;\n    }\n    else {\n      do {\n        do {\n          var30 = var29;\n          var29 = var30 + -9;\n          if (var29 < param_11) goto LAB_001167f5;\n          var15 = var30[-7];\n        } while (var15 == 0);\n        param_7 = var13;\n        if ((*var29 != *var21) ||\n           (var6 = memcmp((void *)var30[-6],(void *)var21[3],*var21), var6 != 0)) break;\n        var13 = var30[-2];\n        var11 = var30[-1];\n        if (var10 == var13) {\n          if (var9 == var11) {\n            var21[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (var9 <= var11) {\n            var21[2] = 0;\n            break;\n          }\n          if (var11 < var10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < var11) || (var10 <= (var11 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (var15 == 0x101)) {\n            if (var11 <= var9) {\n              var11 = var9;\n            }\n            if (var13 < var10) {\n              var10 = var13;\n            }\n            var30[-1] = var11;\n            var30[-2] = var10;\n            var21[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= var10) goto LAB_001167a6;\n          if (var11 < var10) goto LAB_0010852c;\n          if (var9 < var10) {\n            if ((0xfffffffffffffff0 < var9) || (var13 <= (var9 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (var9 != var11) goto LAB_001167b8;\n        }\nFUN_00116852:\n        var4 = var17 < 0x11;\n        var13 = param_7;\n        var17 = var17 + 1;\n      } while (var4);\n    }\n  }\nLAB_001167f5:\n  var21 = var21 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "FUN_00116490",
                "qsort",
                "FUN_00119ed0",
                "FUN_0010847a",
                "bfd_set_error",
                "FUN_0011a1b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "run_initial_setup_0010add5"
            },
            "code": "\nvoid runInitialSetup_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "run_initial_setup_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_hardware_00113e17"
            },
            "code": "\nvoid initializeHardware_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_hardware_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "allocate_and_initialize_00109b52",
                "param_1": "file_struct_ptr",
                "param_2": "source_string",
                "param_3": "target_value",
                "param_4": "flag",
                "param_5": "flag_value",
                "uVar1": "temp_ptr",
                "puVar2": "new_struct_ptr",
                "uVar3": "duplicated_string"
            },
            "code": "\nundefined allocate_and_initialize_00109b52(long file_struct_ptr,undefined8 source_string,undefined8 target_value,undefined flag,\n                      undefined4 flag_value)\n\n{\n  undefined8 temp_ptr;\n  undefined8 *new_struct_ptr;\n  undefined8 duplicated_string;\n  \n  new_struct_ptr = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  new_struct_ptr[2] = target_value;\n  *(undefined (*) [16])(new_struct_ptr + 4) = ZEXT816(0);\n  *(undefined (*) [16])(new_struct_ptr + 6) = ZEXT816(0);\n  temp_ptr = *(undefined8 *)(file_struct_ptr + 0x60);\n  *(undefined *)((long)new_struct_ptr + 0x1c) = flag;\n  *(undefined4 *)(new_struct_ptr + 3) = flag_value;\n  *(undefined8 **)(file_struct_ptr + 0x60) = new_struct_ptr;\n  *new_struct_ptr = temp_ptr;\n  new_struct_ptr[1] = duplicated_string;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010a181",
                "FUN_00109dfe",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010a2b9",
                "FUN_00109d97",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010a377",
                "FUN_0010a77a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_and_check_numeric_input_00109a32",
                "param_1": "input_ptr",
                "param_2": "error_flag_ptr",
                "param_3": "string_end",
                "param_4": "unused_param_1",
                "param_5": "unused_param_2",
                "__nptr": "input_str",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_string",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_and_check_numeric_input_00109a32(char **input_ptr,undefined *error_flag_ptr,char *string_end,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  char *input_str;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_string;\n  undefined result [16];\n  \n  if (error_flag_ptr != (undefined *)0x0) {\n    *error_flag_ptr = 0;\n  }\n  input_str = *input_ptr;\n  if ((input_str < string_end) && (*input_str != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(input_str,input_ptr,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag_ptr == (undefined *)0x0) {\n      error_string = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(input_str,error_string);\n    }\n    else {\n      *error_flag_ptr = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = unused_param_2;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strtoul",
                "FUN_00108fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_check_numeric_input_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "param_1": "file_info",
                "param_2": "tag_name",
                "param_3": "debug_tag",
                "iVar1": "tag_comparison_result",
                "piVar3": "new_debug_tag",
                "pauVar4": "new_debug_tag_buffer",
                "lVar5": "file_offset",
                "pcVar6": "error_message",
                "uVar2": "translated_error_message"
            },
            "code": "\n\n\nint * process_debug_tag_0010c6be(long file_info,char *tag_name,int *debug_tag)\n\n{\n  int tag_comparison_result;\n  undefined8 translated_error_message;\n  int *new_debug_tag;\n  undefined (*new_debug_tag_buffer) [16];\n  long file_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (debug_tag != (int *)0x0)) {\n    if (*(long *)(file_info + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*debug_tag != 0x17) {\n        new_debug_tag = (int *)FUN_00112904(0x17,0);\n        if (new_debug_tag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        new_debug_tag_buffer = (undefined (*) [16])xmalloc(0x10);\n        file_offset = *(long *)(file_info + 0x10);\n        *new_debug_tag_buffer = ZEXT816(0);\n        *(int **)(*new_debug_tag_buffer + 8) = debug_tag;\n        *(undefined (**) [16])(new_debug_tag + 4) = new_debug_tag_buffer;\n        file_offset = FUN_00112925(file_offset + 0x10,tag_name,1,3);\n        if (file_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(file_offset + 0x20) = new_debug_tag;\n        *(long *)*new_debug_tag_buffer = file_offset;\n        return new_debug_tag;\n      }\n      tag_comparison_result = strcmp(*(char **)(**(long **)(debug_tag + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (tag_comparison_result == 0) {\n        return debug_tag;\n      }\n    }\n    translated_error_message = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",translated_error_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00119970"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "temp_value",
                "uVar2": "num_values",
                "uVar3": "capacity",
                "uVar4": "new_num_values",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long temp_value;\n  ulong num_values;\n  ulong capacity;\n  uint new_num_values;\n  char temp_buffer [9];\n  \n  capacity = 10;\n  num_values = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    temp_value = FUN_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,temp_buffer);\n    if (temp_value == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_num_values = (int)num_values + 1;\n      if ((uint)capacity <= new_num_values) {\n        capacity = (ulong)((uint)capacity + 10);\n        result_ptr = (void *)xrealloc(result_ptr,capacity << 3);\n      }\n      *(long *)((long)result_ptr + num_values * 8) = temp_value;\n      num_values = (ulong)new_num_values;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + num_values * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "fprintf",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_0011a2e0",
                "param_1": "binaryData",
                "param_2": "binary",
                "uVar1": "sectionOffset",
                "uVar2": "sectionName",
                "lVar3": "sectionData",
                "lVar4": "sectionAddr"
            },
            "code": "\nlong extractSection_0011a2e0(long binaryData,long binary)\n\n{\n  undefined8 sectionOffset;\n  undefined8 sectionName;\n  long sectionData;\n  long sectionAddr;\n  \n  sectionData = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  sectionAddr = *(long *)(binaryData + 0x20);\n  *(undefined8 *)(sectionData + 8) = *(undefined8 *)(binaryData + 8);\n  *(undefined8 *)(sectionData + 0x10) = *(undefined8 *)(binaryData + 0x10);\n  *(undefined4 *)(sectionData + 0x18) = *(undefined4 *)(binaryData + 0x18);\n  if (sectionAddr == 0) {\n    sectionAddr = 0x128598;\n  }\n  else {\n    sectionAddr = bfd_get_section_by_name(binary);\n    if (sectionAddr == 0) {\n      sectionOffset = *(undefined8 *)(binaryData + 0x20);\n      sectionName = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(sectionName,sectionOffset);\n    }\n  }\n  *(long *)(sectionData + 0x20) = sectionAddr;\n  return sectionData;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "format_and_send_data_0010e8a9",
                "param_1": "dataHeader",
                "param_2": "dataReceiver",
                "param_3": "dataPayload",
                "__s": "formattedData",
                "sVar2": "payloadLength",
                "uVar1": "result"
            },
            "code": "\nundefined4 formatAndSendData_0010e8a9(undefined8 dataHeader,undefined8 dataReceiver,char *dataPayload)\n\n{\n  undefined4 result;\n  size_t payloadLength;\n  char *formattedData;\n  \n  payloadLength = strlen(dataPayload);\n  formattedData = (char *)xmalloc(payloadLength + 0x14);\n  sprintf(formattedData,\"%s:c=f%g\",dataHeader,dataPayload);\n  result = FUN_0010e2f0(dataReceiver,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "iVar1": "result",
                "uVar2": "errorMessage",
                "pcVar3": "delimiter",
                "unaff_RBP": "stringPtr",
                "__s": "section",
                "sVar4": "stringLength",
                "iVar5": "charLength",
                "unaff_R14D": "flags",
                "unaff_R15": "comparisonString",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int result;\n  undefined8 errorMessage;\n  char *delimiter;\n  char *stringPtr;\n  char *section;\n  size_t stringLength;\n  int charLength;\n  uint flags;\n  char *comparisonString;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    flags = flags | 0x2000;\n    section = stringPtr;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = flags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              delimiter = strchr(section,0x2c);\n              if (delimiter == (char *)0x0) {\n                stringLength = strlen(section);\n                charLength = (int)stringLength;\n                stringPtr = (char *)0x0;\n              }\n              else {\n                stringPtr = delimiter + 1;\n                charLength = (int)delimiter - (int)section;\n              }\n              stringLength = (size_t)charLength;\n              result = strncasecmp(comparisonString,section,stringLength);\n              if (result != 0) break;\n              flags = flags | 1;\n              section = stringPtr;\n            }\n            result = strncasecmp(\"load\",section,stringLength);\n            if (result != 0) break;\n            flags = flags | 2;\n            section = stringPtr;\n          }\n          result = strncasecmp(\"noload\",section,stringLength);\n          if (result != 0) break;\n          flags = flags | 0x200;\n          section = stringPtr;\n        }\n        result = strncasecmp(\"readonly\",section,stringLength);\n        if (result != 0) break;\n        flags = flags | 8;\n        section = stringPtr;\n      }\n      result = strncasecmp(\"debug\",section,stringLength);\n      if (result == 0) break;\n      result = strncasecmp(\"code\",section,stringLength);\n      if (result == 0) {\n        flags = flags | 0x10;\n        section = stringPtr;\n      }\n      else {\n        result = strncasecmp(\"data\",section,stringLength);\n        if (result == 0) {\n          flags = flags | 0x20;\n          section = stringPtr;\n        }\n        else {\n          result = strncasecmp(\"rom\",section,stringLength);\n          if (result == 0) {\n            flags = flags | 0x40;\n            section = stringPtr;\n          }\n          else {\n            result = strncasecmp(\"exclude\",section,stringLength);\n            if (result == 0) {\n              flags = flags | 0x8000;\n              section = stringPtr;\n            }\n            else {\n              result = strncasecmp(\"share\",section,stringLength);\n              if (result == 0) {\n                flags = flags | 0x8000000;\n                section = stringPtr;\n              }\n              else {\n                result = strncasecmp(\"contents\",section,stringLength);\n                if (result == 0) {\n                  flags = flags | 0x100;\n                  section = stringPtr;\n                }\n                else {\n                  result = strncasecmp(\"merge\",section,stringLength);\n                  if (result == 0) {\n                    flags = flags | 0x800000;\n                    section = stringPtr;\n                  }\n                  else {\n                    result = strncasecmp(\"strings\",section,stringLength);\n                    if (result != 0) {\n                      delimiter = (char *)xmalloc((long)(charLength + 1));\n                      strncpy(delimiter,section,stringLength);\n                      delimiter[stringLength] = '\\0';\n                      errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(errorMessage,delimiter);\n                      errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(errorMessage,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    flags = flags | 0x1000000;\n                    section = stringPtr;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "strncasecmp",
                "FUN_00119dd0",
                "strchr",
                "xmalloc",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "lVar1": "current_compilation_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_entry",
                "lVar5": "entry",
                "puVar6": "current_entry_unit",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long entry;\n  undefined8 *current_entry_unit;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (entry = *(long *)(compilation_unit + 0x20); entry != 0; entry = *(long *)(entry + 8)) {\n      if (*(undefined8 **)(entry + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(entry + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_entry_unit = *(undefined8 **)(current_compilation_unit + 8); current_entry_unit != (undefined8 *)0x0;\n        current_entry_unit = (undefined8 *)*current_entry_unit) {\n      if ((undefined8 *)current_entry_unit[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)current_entry_unit[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = unused_param2;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_condition_0010829e",
                "unaff_EBP": "condition",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkCondition_0010829e(void)\n\n{\n  undefined8 result;\n  int condition;\n  \n  if (condition == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((condition != 4) && (condition == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_condition_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_details_00104943",
                "in_RAX": "inputStr",
                "iVar1": "inputValue",
                "iVar2": "comparisonResult",
                "lVar3": "parsedValue",
                "sVar4": "strLength",
                "pcVar5": "printableString",
                "uVar6": "formattedString",
                "iVar7": "archIndex",
                "lVar8": "paramIndex",
                "iVar9": "currentIndex",
                "unaff_R15D": "stackValue",
                "uVar10": "loopCounter",
                "uVar11": "archCount",
                "param_7": "paramLimit",
                "uStack000000000000000c": "stackValue2",
                "param_11": "printableArch",
                "param_13": "paramArray"
            },
            "code": "\n\n\nvoid printReverseArchDetails_00104943(void)\n\n{\n  int inputValue;\n  int comparisonResult;\n  char *inputStr;\n  long parsedValue;\n  size_t strLength;\n  char *printableString;\n  undefined8 formattedString;\n  int archIndex;\n  long paramIndex;\n  int currentIndex;\n  uint stackValue;\n  ulong loopCounter;\n  uint archCount;\n  int paramLimit;\n  uint stackValue2;\n  undefined8 printableArch;\n  long paramArray;\n  \n  parsedValue = strtol(inputStr,(char **)0x0,10);\n  inputValue = (int)parsedValue;\n  currentIndex = paramLimit;\n  stackValue2 = stackValue;\n  if (inputValue == 0) {\n    inputValue = 0x50;\n  }\n  do {\n    paramLimit = currentIndex;\n    if (printableArch._4_4_ <= paramLimit) {\n      return;\n    }\n    paramIndex = (long)paramLimit;\n    archIndex = (inputValue - stackValue2) + -1;\n    parsedValue = paramIndex;\n    do {\n      currentIndex = (int)parsedValue;\n      if (printableArch._4_4_ <= currentIndex) break;\n      strLength = strlen(*(char **)(paramArray + parsedValue * 0x60));\n      parsedValue = parsedValue + 1;\n      archIndex = (archIndex - (int)strLength) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(stackValue2 + 1),&DAT_0011b4a1);\n    for (parsedValue = paramIndex * 0x60; ((ulong)(uint)(currentIndex - paramLimit) + paramIndex) * 0x60 - parsedValue != 0;\n        parsedValue = parsedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(paramArray + parsedValue));\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      printableString = (char *)bfd_printable_arch_mach(archIndex,0);\n      comparisonResult = strcmp(printableString,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        formattedString = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)stackValue2,formattedString);\n        archCount = archIndex - 2;\n        parsedValue = paramIndex * 0x60;\n        comparisonResult = paramLimit;\n        while (currentIndex != comparisonResult) {\n          printableString = *(char **)(paramArray + parsedValue);\n          if (*(char *)((long)(char **)(paramArray + parsedValue) + (ulong)archCount + 8) == '\\0') {\n            strLength = strlen(printableString);\n            for (loopCounter = strLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(printableString,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (currentIndex != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          parsedValue = parsedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_details_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "allocate_and_store_param_00113e23",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "lVar1": "result",
                "puVar2": "allocated_ptr"
            },
            "code": "\nlong allocate_and_store_param_00113e23(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  long result;\n  undefined8 *allocated_ptr;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    allocated_ptr = (undefined8 *)xmalloc(0x10);\n    *allocated_ptr = input_param_1;\n    allocated_ptr[1] = input_param_2;\n    *(undefined8 **)(result + 0x10) = allocated_ptr;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "imported": false,
            "current_name": "allocate_and_store_param_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "byte_array",
                "param_2": "result",
                "iVar1": "digit",
                "pbVar2": "byte_ptr",
                "pbVar3": "next_byte",
                "uVar4": "parsed_value"
            },
            "code": "\nulong parse_number_00108ea1(byte **byte_array,int *result)\n\n{\n  int digit;\n  byte *byte_ptr;\n  byte *next_byte;\n  ulong parsed_value;\n  \n  byte_ptr = *byte_array;\n  parsed_value = 0;\n  if (((&_sch_istable)[(ulong)*byte_ptr * 2] & 4) != 0) {\n    next_byte = byte_ptr + 1;\n    digit = (char)*byte_ptr + -0x30;\n    *result = digit;\n    *byte_array = next_byte;\n    if (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) != 0) {\n      do {\n        byte_ptr = next_byte;\n        digit = digit * 10 + -0x30 + (int)(char)*byte_ptr;\n        next_byte = byte_ptr + 1;\n      } while (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) != 0);\n      if (byte_ptr[1] == 0x5f) {\n        next_byte = byte_ptr + 2;\n        *byte_array = next_byte;\n        *result = digit;\n      }\n    }\n    parsed_value = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return parsed_value & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "initialize_memory_00108072",
                "unaff_RBX": "memoryParams",
                "unaff_RBP": "basePointer",
                "unaff_R12": "register12",
                "unaff_R14B": "flag",
                "unaff_R15": "register15",
                "bVar1": "byteVar",
                "uVar2": "undefinedVar",
                "cVar3": "charVar",
                "uVar4": "uintVar",
                "lVar5": "errorMessage",
                "lVar6": "tempVar1",
                "lVar7": "tempVar2",
                "lVar8": "tempVar3"
            },
            "code": "\n\n\nvoid initializeMemory_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 undefinedVar;\n  char charVar;\n  uint uintVar;\n  long errorMessage;\n  long tempVar1;\n  long tempVar2;\n  undefined8 *memoryParams;\n  long basePointer;\n  long register12;\n  long tempVar3;\n  char flag;\n  long register15;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  tempVar3 = memoryParams[6];\n  tempVar1 = FUN_00114190(*memoryParams,0,0x18);\n  if (tempVar1 == 0) {\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    undefinedVar = *memoryParams;\n    tempVar3 = tempVar3 + _DAT_00127990;\n    *(long *)(register15 + 0x30) = tempVar3;\n    *(long *)(register15 + 0x38) = tempVar3;\n    tempVar3 = memoryParams[7];\n    tempVar1 = FUN_00114190(undefinedVar,0,0x60);\n    if (tempVar1 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar2 = *(long *)(tempVar1 + 0x20);\n    if ((*(byte *)(tempVar1 + 0x14) & 0x40) != 0) {\n      tempVar2 = tempVar2 + tempVar3;\n    }\n    *(long *)(register15 + 0x38) = tempVar2;\n    tempVar3 = FUN_00114190(*memoryParams,0,0x200);\n    if (tempVar3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)memoryParams + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)memoryParams + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(memoryParams + 5) & 0x30;\n    memoryParams[0xc] = register15;\n    memoryParams[0xb] = 0;\n    byteVar = *(byte *)((long)memoryParams + 0x27);\n  }\n  else {\n    tempVar2 = *(long *)(tempVar1 + 0x18);\n    if ((*(byte *)(tempVar1 + 0x14) & 8) == 0) {\n      tempVar2 = tempVar2 + tempVar3;\n    }\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    undefinedVar = *memoryParams;\n    *(long *)(register15 + 0x30) = tempVar2;\n    *(long *)(register15 + 0x38) = tempVar2;\n    tempVar3 = memoryParams[7];\n    tempVar1 = FUN_00114190(undefinedVar,0,0x60);\n    if (tempVar1 != 0) goto LAB_00115860;\nLAB_00115695:\n    undefinedVar = *memoryParams;\n    *(long *)(register15 + 0x38) = tempVar3 + _DAT_00127990;\n    tempVar3 = FUN_00114190(undefinedVar,0,0x200);\n    if (tempVar3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(tempVar3 + 0x2c);\n    if (0x3e < uintVar) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register15 + 0x7c) = uintVar;\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)memoryParams + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(memoryParams + 5) & 0x30;\n    memoryParams[0xc] = register15;\n    memoryParams[0xb] = 0;\n    byteVar = *(byte *)((long)memoryParams + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    tempVar3 = memoryParams[0x1a];\n    tempVar1 = FUN_00115d00(tempVar3,memoryParams[0x1c]);\n    if ((tempVar1 != 0) &&\n       (tempVar2 = *(long *)(register12 + 8), *(uint *)(tempVar1 + 0x18) = *(uint *)(tempVar1 + 0x18) | 0x20,\n       *(int *)(tempVar2 + 8) == 5)) {\n      *(long *)(tempVar3 + 0xb0) = tempVar1;\n      charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charVar == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charVar == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(register15 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "initialize_memory_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "charValue",
                "__s": "string1",
                "sVar2": "length1",
                "__s_00": "string2",
                "lVar3": "longValue",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long dataPointer,char flag,undefined8 param3,undefined8 param4)\n\n{\n  char charValue;\n  char *string1;\n  size_t length1;\n  char *string2;\n  long longValue;\n  undefined result [16];\n  \n  charValue = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  length1 = strlen(string1);\n  string2 = (char *)xmalloc(length1 + 0x1e);\n  if (flag == '\\0') {\n    *string2 = '\\0';\n    longValue = 0;\n    flag = charValue;\n  }\n  else {\n    longValue = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = longValue + 1;\n    sprintf(string2,\"%ld=@S;\",longValue);\n  }\n  length1 = strlen(string2);\n  sprintf(string2 + length1,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = FUN_00109b52(dataPointer,string2,longValue,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(string2);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data_array",
                "param_2": "input_value",
                "iVar1": "counter",
                "cVar2": "result",
                "param_1[0x3c]": "data_array[0x3c]",
                "param_1[0x3d]": "data_array[0x3d]",
                "param_1[0x40]": "data_array[0x40]",
                "param_1[0x41]": "data_array[0x41]"
            },
            "code": "\nundefined process_data_0010ec73(long *data_array,long input_value,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  int counter;\n  char result;\n  \n  if (data_array[0x3c] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(input_value,data_array[1] + 8 + data_array[0x3c]);\n    data_array[0x3c] = -1;\n  }\n  if (data_array[0x3d] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(input_value,data_array[1] + 8 + data_array[0x3d]);\n    data_array[0x3d] = -1;\n  }\n  counter = *(int *)(data_array + 0x3f);\n  *(int *)(data_array + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data_array[0x40] = input_value;\n  }\n  else {\n    if ((data_array[0x41] != -1) &&\n       (result = FUN_0010e2f0(data_array,0xc0,0,data_array[0x41],0,param_6,param_4), result == '\\0')) {\n      return 0;\n    }\n    data_array[0x41] = input_value - data_array[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "detect_endianness_00114e00",
                "param_1": "endiannessValue",
                "dcgettext": "getEndiannessText"
            },
            "code": "\nvoid detectEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "detect_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_unlink_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "permissions",
                "param_4": "fileMetadata",
                "param_5": "shouldDeleteSource",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoLocationPointer",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndUnlinkFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 permissions,undefined8 fileMetadata,char shouldDeleteSource,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoLocationPointer;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong unlinkResult;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(permissions,destinationFilePath,fileMetadata);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocationPointer = __errno_location();\n      errorString = strerror(*errnoLocationPointer);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldDeleteSource != '\\0') {\n    FUN_0011a350(destinationFilePath,fileMetadata);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = unlinkResult;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "execute_initialization_0010adf2"
            },
            "code": "\nvoid executeInitialization_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "parse_data_0010d7d4",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "dataPtr",
                "param_4": "countPtr",
                "param_5": "sizePtr",
                "uVar1": "inputValue",
                "cVar2": "isValid",
                "uVar3": "result",
                "lVar4": "data",
                "plVar5": "localData",
                "uVar6": "count",
                "local_40": "localArray"
            },
            "code": "\nundefined4\nparseData_0010d7d4(undefined8 inputData,undefined8 *outputData,long *dataPtr,uint *countPtr,uint *sizePtr)\n\n{\n  undefined8 inputValue;\n  char isValid;\n  undefined4 result;\n  long data;\n  long *localData;\n  uint count;\n  long localArray [2];\n  \n  inputValue = *outputData;\n  localData = localArray;\n  if (dataPtr == (long *)0x0) {\n    localData = (long *)0x0;\n  }\n  isValid = FUNC_0010c95e(inputData,outputData,localData);\n  if ((isValid != '\\0') &&\n     (result = FUN_00109be3(inputData,inputValue,(int)*outputData - (int)inputValue), (char)result != '\\0')) {\n    if (dataPtr == (long *)0x0) {\n      return result;\n    }\n    if (localArray[0] != 0) {\n      if (*sizePtr <= *countPtr + 1) {\n        count = *sizePtr + 10;\n        data = *dataPtr;\n        *sizePtr = count;\n        data = xrealloc(data,(ulong)count << 3);\n        *dataPtr = data;\n      }\n      count = *countPtr;\n      *(long *)(*dataPtr + (ulong)count * 8) = localArray[0];\n      *countPtr = count + 1;\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "xrealloc",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "parse_data_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoLocation",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileInfo"
            },
            "code": "\nlong checkFile_00113f50(char *filePath)\n\n{\n  int status;\n  int *errnoLocation;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileInfo;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileInfo);\n    if (status < 0) {\n      errnoLocation = __errno_location();\n      if (*errnoLocation == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoLocation);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileInfo.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileInfo.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileInfo.st_size) {\n        return fileInfo.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formats",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "matchingFormats",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formats)\n\n{\n  undefined8 matchingFormats;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  matchingFormats = DAT_001275e0;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,matchingFormats);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formats);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fflush",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_001126c0",
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "analyze_binary_0011378f",
                "param_1": "input_file",
                "param_2": "output_data",
                "param_3": "output_size",
                "param_4": "output_hash",
                "param_5": "output_strings",
                "param_6": "output_status",
                "auVar1": "temp_var1",
                "cVar2": "char_var",
                "uVar3": "return_value",
                "uVar4": "bfd_error_message",
                "puVar5": "malloced_memory",
                "sVar6": "string_length",
                "lVar7": "loop_counter",
                "puVar8": "temp_var2",
                "puVar9": "temp_var3",
                "__dest": "destination_string",
                "puVar10": "next_element",
                "plVar11": "list_element",
                "bVar12": "boolean_flag",
                "local_258": "hash_table",
                "local_250": "hash_table_size",
                "local_248": "hash_table_index",
                "uStack_244": "stack_var1",
                "uStack_240": "stack_var2",
                "uStack_23c": "stack_var3",
                "local_238": "temp_buffer",
                "local_228": "temporary_var",
                "local_220": "hash_table2",
                "local_1f8": "temp_value1",
                "local_1f0": "temp_value2",
                "local_1e8": "array_values",
                "local_a0": "temp_buffer2",
                "local_78": "stack_buffer",
                "uStack_70": "stack_var4",
                "local_68": "temp_value3",
                "local_60": "temp_value4",
                "local_58": "temp_value5",
                "uStack_54": "stack_var5",
                "uStack_50": "stack_var6",
                "uStack_4c": "stack_var7"
            },
            "code": "\nundefined4\nanalyze_binary_0011378f(undefined8 *input_file,undefined8 *output_data,long *output_size,undefined8 *output_hash,\n            undefined8 *output_strings,undefined8 *output_status)\n\n{\n  undefined temp_var1 [16];\n  char char_var;\n  undefined4 return_value;\n  undefined8 bfd_error_message;\n  undefined *malloced_memory;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *temp_var2;\n  undefined4 *temp_var3;\n  char *destination_string;\n  undefined8 *next_element;\n  long *list_element;\n  byte boolean_flag;\n  undefined8 *hash_table;\n  long hash_table_size;\n  undefined4 hash_table_index;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  undefined temp_buffer [16];\n  undefined8 temporary_var;\n  undefined hash_table2 [40];\n  undefined8 temp_value1;\n  undefined8 temp_value2;\n  undefined4 array_values [82];\n  undefined temp_buffer2 [40];\n  undefined stack_buffer [8];\n  undefined8 stack_var4;\n  undefined8 temp_value3;\n  undefined4 temp_value4;\n  undefined4 temp_value5;\n  undefined4 stack_var5;\n  undefined4 stack_var6;\n  undefined4 stack_var7;\n  \n  boolean_flag = 0;\n  hash_table_index = 0;\n  stack_var1 = 0;\n  stack_var2 = 500;\n  stack_var3 = 0;\n  hash_table = input_file;\n  hash_table_size = xmalloc(500);\n  temporary_var = 1;\n  temp_buffer = ZEXT816(0);\n  char_var = bfd_hash_table_init(hash_table2,FUN_0010bb52,0x30);\n  if ((char_var == '\\0') || (char_var = bfd_hash_table_init(temp_buffer2,FUN_0010bb52,0x30), char_var == '\\0')) {\n    return_value = bfd_get_error();\n    bfd_error_message = bfd_errmsg(return_value);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",bfd_error_message);\n  }\n  else {\n    temp_value1 = 0;\n    unique0x100000e9 = 0xffffffff;\n    stack_buffer = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    temp_var3 = array_values;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *temp_var3 = 0;\n      temp_var3 = temp_var3 + (ulong)boolean_flag * -2 + 1;\n    }\n    temp_value3 = 0;\n    temp_value4 = 0;\n    temp_value2 = 1;\n    temp_value5 = 0;\n    stack_var5 = 0;\n    stack_var6 = 0xffffffff;\n    stack_var7 = 0xffffffff;\n    char_var = FUN_0010e2f0(&hash_table,0,0,0,0);\n    temp_var1 = _stack_buffer;\n    if (char_var != '\\0') {\n      stack_buffer._4_4_ = stack_var1;\n      stack_buffer._0_4_ = hash_table_index;\n      stack_var4 = temp_var1._8_8_;\n      char_var = FUN_0010e2f0(&hash_table,100,0,0,*input_file);\n      if (char_var != '\\0') {\n        *(int *)(output_data + 6) = *(int *)(output_data + 6) + 1;\n        output_data[10] = 0;\n        next_element = (undefined8 *)*output_data;\n        *(undefined4 *)(output_data + 7) = *(undefined4 *)((long)output_data + 0x34);\n        for (; next_element != (undefined8 *)0x0; next_element = (undefined8 *)*next_element) {\n          output_data[8] = next_element[2];\n          *(undefined4 *)(output_data + 9) = 0;\n          char_var = thunk_FUN_0010e439(&hash_table,*(undefined8 *)(next_element[1] + 8));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          list_element = (long *)next_element[1];\n          if (list_element != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)list_element[2] != (undefined8 *)0x0) {\n                for (temp_var2 = *(undefined8 **)(undefined8 *)list_element[2]; temp_var2 != (undefined8 *)0x0;\n                    temp_var2 = (undefined8 *)*temp_var2) {\n                  char_var = FUN_001135a5(output_data,&hash_table);\n                  if (char_var == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              list_element = (long *)*list_element;\n              if (list_element == (long *)0x0) break;\n              char_var = FUN_0010e439(&hash_table,list_element[1]);\n              if (char_var == '\\0') {\n                return 0;\n              }\n            }\n          }\n          char_var = FUN_00112502(output_data,&hash_table,0xffffffffffffffff);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(stack_var7,stack_var6) == -1) &&\n           (return_value = FUN_0010e2f0(&hash_table,100,0,temp_value3,0), (char)return_value != '\\0')) {\n          (**(code **)(input_file[1] + 0x50))(temporary_var,hash_table_size + 8);\n          *output_size = hash_table_size;\n          *output_hash = CONCAT44(stack_var1,hash_table_index);\n          *output_status = temporary_var;\n          malloced_memory = (undefined *)xmalloc();\n          *malloced_memory = 0;\n          destination_string = malloced_memory + 1;\n          *output_strings = malloced_memory;\n          for (loop_counter = temp_buffer._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination_string,*(char **)(loop_counter + 8));\n            string_length = strlen(destination_string);\n            destination_string = destination_string + string_length + 1;\n          }\n          return return_value;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010bb52",
                "FUN_00112502",
                "FUN_0010e2f0",
                "FUN_0010e439",
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "bfd_errmsg",
                "strcpy",
                "thunk_FUN_0010e439",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_binary_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "ptrErrno",
                "uVar2": "result",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *ptrErrno;\n  undefined8 result;\n  \n  ptrErrno = __errno_location();\n  if (*ptrErrno == 2) {\n    result = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(result);\n  }\n  else {\n    strerror(*ptrErrno);\n    result = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(result);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_0010a0a0(long data)\n\n{\n  FUN_00109ed3(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "initialize_memory_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "address",
                "param_10": "value1",
                "param_11": "value2",
                "param_12": "value3",
                "param_13": "value4",
                "param_14": "value5",
                "in_AL": "checkFlag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "ptrSize",
                "local_c8": "buffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "temp1",
                "local_a8": "temp2",
                "local_a0": "temp3",
                "local_98": "temp4",
                "local_90": "temp5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid initializeMemory_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 address,undefined8 value1,undefined8 value2,undefined8 value3,\n                 undefined8 value4,undefined8 value5)\n\n{\n  char checkFlag;\n  undefined4 size;\n  undefined4 length;\n  undefined *ptrSize;\n  undefined *buffer;\n  undefined temporaryBuffer [8];\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (checkFlag != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  ptrSize = &stack0x00000008;\n  size = 8;\n  buffer = temporaryBuffer;\n  length = 0x30;\n  temp1 = value1;\n  temp2 = value2;\n  temp3 = value3;\n  temp4 = value4;\n  temp5 = value5;\n  FUN_00119e70(address,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00107880",
                "FUN_0010e2f0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00104cc1",
                "FUN_0010e6a8",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_0010b800",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_00113f50",
                "FUN_00114e50",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_00108375",
                "FUN_00114690",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00105828",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "initialize_memory_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "write_debug_type_info_00112c1f",
                "param_1": "info",
                "param_2": "name",
                "param_3": "obj",
                "param_4": "parent",
                "plVar1": "type",
                "lVar2": "addr",
                "cVar5": "flag",
                "piVar6": "piVar",
                "uVar7": "result",
                "iVar9": "iVar",
                "bVar14": "bVar"
            },
            "code": "\n\n\nundefined8 writeDebugTypeInfo_00112c1f(ulong info,undefined8 name,int *obj,long parent)\n\n{\n  long *type;\n  long addr;\n  undefined8 *puVar3;\n  undefined8 *puVar4;\n  char flag;\n  int *piVar;\n  undefined8 result;\n  undefined8 uVar8;\n  int iVar;\n  undefined4 uVar10;\n  undefined8 uVar11;\n  ulong uVar12;\n  uint uVar13;\n  bool bVar;\n  uint local_3c;\n  \n  uVar12 = info;\nLAB_00112c39:\n  if (obj != (int *)0x0) {\n    iVar = *obj;\n    if (iVar - 0x16U < 2) {\n      do {\n        type = *(long **)(obj + 4);\n        uVar13 = *(uint *)(info + 0x30);\n        uVar12 = (ulong)uVar13;\n        addr = *type;\n        if (*(uint *)(addr + 0x10) == uVar13) {\n          if (iVar == 0x16) {\n            result = FUN_0010bba1(name,*(undefined8 *)(addr + 8));\n            return result;\n          }\nLAB_00112c94:\n          piVar = (int *)FUN_00112b6e(obj,0);\n          if (piVar == (int *)0x0) goto LAB_00112dd6;\n          if ((*piVar - 7U < 4) && (*(long *)(piVar + 4) != 0)) {\n            if ((*(uint *)(*(long *)(piVar + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = FUN_0010c7a0(info,*(undefined8 *)(**(long **)(obj + 4) + 8),piVar),\n               flag == '\\0')) {\n              return 0;\n            }\n            uVar13 = *(uint *)(*(long *)(piVar + 4) + 0xc);\n          }\n          else {\n            uVar13 = 0;\n          }\n          iVar = *piVar;\n          result = *(undefined8 *)(**(long **)(obj + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar == 0x17) {\n          if (addr != parent) goto LAB_00112c94;\n          *(uint *)(parent + 0x10) = uVar13;\n          parent = *type;\n          obj = (int *)type[1];\n          goto LAB_00112c39;\n        }\n        if (parent != 0) {\n          *(uint *)(parent + 0x10) = uVar13;\n        }\n        obj = (int *)type[1];\n        if (obj == (int *)0x0) goto LAB_00112dd6;\n        iVar = *obj;\n        parent = 0;\n      } while (iVar - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (parent == 0) goto LAB_00112d74;\n      *(undefined4 *)(parent + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(parent + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(parent + 8);\n    }\n    switch(iVar) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = FUN_00109dfe(name);\n      return result;\n    case 3:\n      result = FUN_0010b800(name,obj[1],*(undefined *)(obj + 4));\n      return result;\n    case 4:\n      result = FUN_0010b948(name,obj[1]);\n      return result;\n    case 5:\n      result = FUN_00109e76(name,obj[1]);\n      return result;\n    case 6:\n      result = FUN_00109d3e(name,obj[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(obj + 4) != 0) {\n        if ((*(uint *)(*(long *)(obj + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = FUN_0010c7a0(info,result,obj), flag == '\\0')) {\n          return 0;\n        }\n        addr = *(long *)(obj + 4);\n        if (*(int *)(info + 0x30) == *(int *)(addr + 8)) {\n          uVar13 = *(uint *)(addr + 0xc);\n          if (uVar13 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar = *obj;\nLAB_00112ed2:\n          result = FUN_00109d5c(name,result,uVar13,iVar);\n          return result;\n        }\n        *(int *)(addr + 8) = *(int *)(info + 0x30);\n      }\n      uVar10 = 0;\n      if (*(long *)(obj + 4) != 0) {\n        uVar10 = *(undefined4 *)(*(long *)(obj + 4) + 0xc);\n      }\n      flag = FUN_0010a69a(name,result,uVar10,*obj == 7,obj[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(obj + 4) != (long *)0x0) && (uVar12 = 0, **(long **)(obj + 4) != 0)) {\n        while( true ) {\n          puVar4 = *(undefined8 **)(**(long **)(obj + 4) + uVar12 * 8);\n          if (puVar4 == (undefined8 *)0x0) break;\n          flag = writeDebugTypeInfo_00112c1f(info,name,puVar4[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = FUN_0010ba08(name,*puVar4,*(undefined4 *)(puVar4 + 3),\n                               *(undefined4 *)((long)puVar4 + 0x1c),*(undefined4 *)(puVar4 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          uVar12 = (ulong)((int)uVar12 + 1);\n        }\n      }\n      result = FUN_0010a77a(name);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(obj + 4) == 0) {\n        uVar13 = 0;\n        piVar = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(obj + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (uVar12 = info, flag = FUN_0010c7a0(info,result,obj), flag == '\\0')) {\n          return 0;\n        }\n        addr = *(long *)(obj + 4);\n        uVar13 = *(uint *)(addr + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(addr + 8)) {\n          if (uVar13 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar = *obj;\n          goto LAB_00112ed2;\n        }\n        piVar = *(int **)(addr + 0x20);\n        *(int *)(addr + 8) = *(int *)(info + 0x30);\n        if (((piVar != (int *)0x0) && (obj != piVar)) &&\n           (uVar12 = info, flag = writeDebugTypeInfo_00112c1f(info,name,piVar,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = FUN_0010a83e(name,result,uVar13,*obj == 9,obj[1],piVar != (int *)0x0,\n                           obj == piVar,uVar12);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(obj + 4) != (long *)0x0) {\n        uVar13 = 0;\n        if (**(long **)(obj + 4) != 0) {\n          while (puVar4 = *(undefined8 **)(**(long **)(obj + 4) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            flag = writeDebugTypeInfo_00112c1f(info,name,puVar4[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)puVar4 + 0x14) == '\\0') {\n              flag = FUN_0010ba08(name,*puVar4,*(undefined4 *)(puVar4 + 3));\n            }\n            else {\n              flag = FUN_0010a94e(name,*puVar4,puVar4[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        uVar13 = 0;\n        if (*(long *)(*(long *)(obj + 4) + 0x10) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(obj + 4) + 0x10) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            flag = writeDebugTypeInfo_00112c1f(info,name,*puVar4,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = FUN_0010aa53(name,*(undefined4 *)(puVar4 + 1),\n                                 *(undefined *)((long)puVar4 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        local_3c = 0;\n        if (*(long *)(*(long *)(obj + 4) + 0x18) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(obj + 4) + 0x18) + (ulong)local_3c * 8),\n                puVar4 != (undefined8 *)0x0) {\n            flag = FUN_0010ab4d(name,*puVar4);\n            if (flag == '\\0') {\n              return 0;\n            }\n            uVar13 = 0;\n            while (puVar3 = *(undefined8 **)(puVar4[1] + (ulong)uVar13 * 8),\n                  puVar3 != (undefined8 *)0x0) {\n              if ((puVar3[4] != 0) &&\n                 (flag = writeDebugTypeInfo_00112c1f(info,name,puVar3[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = writeDebugTypeInfo_00112c1f(info,name,puVar3[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (puVar3[3] == -1) {\n                flag = FUN_0010adf2(name,*puVar3,*(undefined4 *)(puVar3 + 2),\n                                     *(undefined *)((long)puVar3 + 0x14),\n                                     *(undefined *)((long)puVar3 + 0x15));\n              }\n              else {\n                flag = FUN_0010add5(name);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              uVar13 = uVar13 + 1;\n            }\n            flag = FUN_00109bbb(name);\n            if (flag == '\\0') {\n              return 0;\n            }\n            local_3c = local_3c + 1;\n          }\n        }\n      }\n      result = FUN_0010ae0e(name);\n      return result;\n    case 0xb:\n      puVar4 = *(undefined8 **)(obj + 4);\n      if (puVar4 == (undefined8 *)0x0) {\n        uVar8 = 0;\n        uVar11 = 0;\n      }\n      else {\n        uVar8 = puVar4[1];\n        uVar11 = *puVar4;\n      }\n      result = FUN_0010e453(name,result,uVar11,uVar8);\n      return result;\n    case 0xc:\n      flag = writeDebugTypeInfo_00112c1f(info,name,*(undefined8 *)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a083(name);\n      return result;\n    case 0xd:\n      flag = writeDebugTypeInfo_00112c1f(info,name,**(undefined8 **)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(obj + 4) + 8) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (addr = *(long *)(*(long *)(*(long *)(obj + 4) + 8) + uVar12 * 8), addr != 0) {\n          uVar12 = uVar12 + 1;\n          flag = writeDebugTypeInfo_00112c1f(info,name,addr,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        uVar12 = uVar12 & 0xffffffff;\n      }\n      result = FUN_0010e5db(name,uVar12,*(undefined *)(*(long *)(obj + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = writeDebugTypeInfo_00112c1f(info,name,*(undefined8 *)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0a0(name);\n      return result;\n    case 0xf:\n      flag = writeDebugTypeInfo_00112c1f(info,name,**(undefined8 **)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0e9(name,*(undefined8 *)(*(long *)(obj + 4) + 8),\n                           *(undefined8 *)(*(long *)(obj + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = writeDebugTypeInfo_00112c1f(info,name,**(undefined8 **)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = writeDebugTypeInfo_00112c1f(info,name,*(undefined8 *)(*(long *)(obj + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      addr = *(long *)(obj + 4);\n      result = FUN_0010a181(name,*(undefined8 *)(addr + 0x10),*(undefined8 *)(addr + 0x18),\n                           *(undefined *)(addr + 0x20));\n      return result;\n    case 0x11:\n      flag = writeDebugTypeInfo_00112c1f(info,name,**(undefined8 **)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a2b9(name,*(undefined *)(*(long *)(obj + 4) + 8));\n      return result;\n    case 0x12:\n      flag = writeDebugTypeInfo_00112c1f(info,name,**(undefined8 **)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = writeDebugTypeInfo_00112c1f(info,name,*(undefined8 *)(*(long *)(obj + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a377(name);\n      return result;\n    case 0x13:\n      flag = writeDebugTypeInfo_00112c1f(info,name,**(undefined8 **)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(obj + 4) + 0x10) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (addr = *(long *)(*(long *)(*(long *)(obj + 4) + 0x10) + uVar12 * 8), addr != 0)\n        {\n          uVar12 = uVar12 + 1;\n          flag = writeDebugTypeInfo_00112c1f(info,name,addr,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(obj + 4) + 8) != 0) &&\n         (flag = writeDebugTypeInfo_00112c1f(info,name,*(long *)(*(long *)(obj + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = FUN_0010a424(name,*(long *)(*(long *)(obj + 4) + 8) != 0,uVar12 & 0xffffffff,\n                           *(undefined *)(*(long *)(obj + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = writeDebugTypeInfo_00112c1f(info,name,*(undefined8 *)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0bd(name);\n      return result;\n    case 0x15:\n      flag = writeDebugTypeInfo_00112c1f(info,name,*(undefined8 *)(obj + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0d3(name);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bVar = *(int **)**(undefined8 **)(obj + 4) == obj;\n  obj = *(int **)**(undefined8 **)(obj + 4);\n  if (bVar) {\nLAB_00112dd6:\n    result = FUN_00109d97(name);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "dcgettext",
                "FUN_0010bba1",
                "FUN_0010a0e9",
                "FUN_0010adf2",
                "FUN_0010a0d3",
                "fprintf",
                "FUN_00109d5c",
                "FUN_0010a083",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a0bd",
                "FUN_0010e453",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_00109e76",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "FUN_0010a0a0",
                "abort",
                "FUN_0010a181",
                "__assert_fail",
                "FUN_00109dfe",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "write_debug_type_info_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "flag",
                "unaff_R15": "baseAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char flag;\n  long baseAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(baseAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "file",
                "in_RAX": "formatSpecifier",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 file)\n\n{\n  undefined8 formatSpecifier;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,file,message,formatSpecifier);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_00109a32",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "recognize_file_format_00105828",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "format",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 recognizeFileFormat_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 format;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    format = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,format);\n  }\n  else {\n    format = bfd_get_mach();\n    machine = bfd_get_arch();\n    format = bfd_printable_arch_mach(machine,format);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,format);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "FUN_001125fa",
                "FUN_00119ed0",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "recognize_file_format_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_dir",
                "pcVar1": "temp_dir",
                "mkdtemp": "make_directory_temporary"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_dir;\n  char *temp_dir;\n  \n  template_dir = (char *)FUN_00114cf0();\n  temp_dir = mkdtemp(template_dir);\n  if (temp_dir == (char *)0x0) {\n    free(template_dir);\n  }\n  return temp_dir;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "FUN_00114cf0",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_process_0010bba1",
                "param_1": "input_param",
                "param_2": "lookup_param",
                "lVar1": "hash_result",
                "uVar2": "process_result"
            },
            "code": "\nundefined8 lookup_and_process_0010bba1(long input_param,undefined8 lookup_param)\n\n{\n  long hash_result;\n  undefined8 process_result;\n  \n  hash_result = bfd_hash_lookup(input_param + 0x1b8,lookup_param,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    process_result = FUN_00109cf4(input_param,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return process_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_process_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "decode_and_store_string_0010e6a8",
                "param_1": "param",
                "param_2": "string",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar1": "result",
                "uVar2": "value",
                "__s": "decoded_string",
                "sVar3": "string_length",
                "sVar4": "decoded_string_length",
                "__s_00": "formatted_string",
                "lVar5": "hash_lookup_result",
                "lVar8": "counter",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "success",
                "auVar10": "result_container"
            },
            "code": "\nundefined  [16] decode_and_store_string_0010e6a8(long param,char *string,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  uint result;\n  undefined4 value;\n  char *decoded_string;\n  size_t string_length;\n  size_t decoded_string_length;\n  char *formatted_string;\n  long hash_lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long counter;\n  ulong success;\n  undefined result_container [16];\n  \n  counter = *(long *)(*(long *)(param + 0x60) + 0x10);\n  value = *(undefined4 *)(*(long *)(param + 0x60) + 0x18);\n  decoded_string = (char *)FUN_00109b2f();\n  string_length = strlen(string);\n  decoded_string_length = strlen(decoded_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14 + decoded_string_length);\n  if (counter < 1) {\n    counter = *(long *)(param + 0x68);\n    *(long *)(param + 0x68) = counter + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",string,counter,decoded_string);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",string,decoded_string);\n  }\n  free(decoded_string);\n  result = FUN_0010e2f0(param,0x80,0,0,formatted_string);\n  success = (ulong)result;\n  if ((char)result != '\\0') {\n    free(formatted_string);\n    hash_lookup_result = bfd_hash_lookup(param + 0x1b8,string,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = counter;\n      *(undefined4 *)(hash_lookup_result + 0x28) = value;\n      goto LAB_0010e7b3;\n    }\n    value = bfd_get_error();\n    error_message = bfd_errmsg(value);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(error_format,error_message);\n  }\n  success = 0;\nLAB_0010e7b3:\n  result_container._8_8_ = unused_param2;\n  result_container._0_8_ = success;\n  return result_container;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00119ed0",
                "sprintf",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "decode_and_store_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_and_send_data_0010e7c2",
                "param_1": "param1",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "string1",
                "sVar1": "inputStringLength",
                "sVar2": "string1Length",
                "__s_00": "formattedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e7c2(undefined8 param1,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  char *string1;\n  size_t inputStringLength;\n  size_t string1Length;\n  char *formattedString;\n  undefined result [16];\n  \n  string1 = (char *)FUN_00109b2f();\n  inputStringLength = strlen(inputString);\n  string1Length = strlen(string1);\n  formattedString = (char *)xmalloc(inputStringLength + 3 + string1Length);\n  sprintf(formattedString,\"%s:T%s\",inputString,string1);\n  free(string1);\n  result._0_4_ = FUN_0010e2f0(param1,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "execute_and_exit_00119dd0",
                "param_1": "command",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "offset",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "localArray",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "local1",
                "local_78": "local2",
                "local_68": "local3",
                "local_58": "local4",
                "local_48": "local5",
                "local_38": "local6",
                "local_28": "local7",
                "local_18": "local8"
            },
            "code": "\nvoid executeAndExit_00119dd0(undefined4 command,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined localArray [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 local1;\n  undefined4 local2;\n  undefined4 local3;\n  undefined4 local4;\n  undefined4 local5;\n  undefined4 local6;\n  undefined4 local7;\n  undefined4 local8;\n  \n  if (flag != '\\0') {\n    local1 = command;\n    local2 = param2;\n    local3 = param3;\n    local4 = param4;\n    local5 = param5;\n    local6 = param6;\n    local7 = param7;\n    local8 = param8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = localArray;\n  offset = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  FUN_00119e70(param9,&bufferSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00104920",
                "FUN_0010da0b",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00115b70",
                "FUN_001083de",
                "FUN_00114190",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "execute_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "return_address",
                "unaff_retaddr": "exit_address"
            },
            "code": "\nundefined8 handleError_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *return_address;\n  undefined8 exit_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return exit_address;\n    }\n  }\n  FUN_0011a110(*return_address);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "reverse_and_process_data_00116852",
                "in_RCX": "dataArray",
                "unaff_RBX": "maxSize",
                "unaff_RBP": "tempArray",
                "unaff_R13": "tempArrayEnd",
                "unaff_R14": "currentArray",
                "unaff_R15": "currentSize",
                "psVar13": "currentData",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "outputSize",
                "param_11": "inputArray",
                "param_12": "outputArray",
                "param_13": "paramStruct",
                "param_14": "inputSize",
                "bVar14": "byteVar"
            },
            "code": "\nulong reverseAndProcessData_00116852(void)\n\n{\n  size_t sVar1;\n  code *pcVar2;\n  int iVar3;\n  uint uVar4;\n  undefined *__ptr;\n  size_t *dataArray;\n  ulong uVar5;\n  ulong uVar6;\n  long lVar7;\n  ulong uVar8;\n  size_t maxSize;\n  size_t *tempArray;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong in_R10;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *tempArrayEnd;\n  size_t *currentArray;\n  size_t currentSize;\n  size_t *currentData;\n  byte byteVar;\n  size_t param1;\n  size_t param2;\n  ulong outputSize;\n  size_t *inputArray;\n  undefined *outputArray;\n  long paramStruct;\n  size_t inputSize;\n  \n  byteVar = 0;\ncode_r0x00116852:\n  uVar4 = (int)in_R10 + 1;\n  if (0x10 < (int)in_R10) goto LAB_001167f5;\nLAB_00116863:\n  currentArray = currentArray + -9;\n  do {\n    if (tempArrayEnd <= currentArray) {\n      sVar1 = currentArray[2];\n      if (sVar1 == 0) goto LAB_00116863;\n      uVar8 = (ulong)uVar4;\n      if ((*currentArray == *tempArray) &&\n         (iVar3 = memcmp((void *)currentArray[3],(void *)tempArray[3],*tempArray), iVar3 == 0)) {\n        uVar6 = currentArray[7];\n        uVar5 = currentArray[8];\n        in_R10 = uVar8 & 0xffffffff;\n        if (currentSize == uVar6) {\n          if (maxSize != uVar5) goto LAB_001167a6;\n          tempArray[2] = 0;\n        }\n        else {\n          if (currentSize < uVar6) {\n            if (uVar5 < currentSize) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < uVar5) || (currentSize <= (uVar5 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (maxSize < currentSize) {\n              if ((0xfffffffffffffff0 < maxSize) ||\n                 (uVar6 <= (maxSize + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (maxSize == uVar5) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (maxSize <= uVar5) {\n              tempArray[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (uVar5 < currentSize) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (sVar1 == 0x101)) goto code_r0x00116852;\n          if (uVar5 <= maxSize) {\n            uVar5 = maxSize;\n          }\n          if (uVar6 < currentSize) {\n            currentSize = uVar6;\n          }\n          currentArray[8] = uVar5;\n          currentArray[7] = currentSize;\n          tempArray[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentArray = tempArray;\n        tempArray = currentArray + 9;\n        if (dataArray <= tempArray) {\n          qsort(inputArray,inputSize,0x48,FUN_0011a250);\n          __ptr = (undefined *)xmalloc(outputSize * 2);\n          param1 = 0;\n          puVar12 = __ptr;\n          for (currentData = inputArray; currentData < dataArray; currentData = currentData + 9) {\n            if (currentData[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              pcVar2 = *(code **)(*(long *)(paramStruct + 8) + 0x50);\n              if ((currentData[7] == param2) && (currentData[8] == param1)) {\n                (*pcVar2)(*currentData,puVar12);\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(currentData[2],puVar12 + 8);\n                uVar6 = currentData[6];\n                uVar8 = *currentData;\n                puVar12 = (undefined *)currentData[3];\n                puVar11 = puVar9;\n                for (uVar5 = uVar8; uVar5 != 0; uVar5 = uVar5 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)byteVar * -2 + 1;\n                  puVar11 = puVar11 + (ulong)byteVar * -2 + 1;\n                }\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + uVar6;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(paramStruct + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(paramStruct + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(currentData[2],puVar12 + 8);\n                uVar8 = *currentData;\n                puVar12 = (undefined *)currentData[3];\n                puVar11 = puVar9;\n                for (uVar6 = uVar8; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)byteVar * -2 + 1;\n                  puVar11 = puVar11 + (ulong)byteVar * -2 + 1;\n                }\n                uVar6 = currentData[6];\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                lVar7 = *(long *)(paramStruct + 8);\n                puVar9 = puVar9 + uVar6;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(lVar7 + 8) == 5) &&\n                   (*(char *)(*(long *)(paramStruct + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(lVar7 + 0x38))(currentData[7],puVar9);\n                  (**(code **)(*(long *)(paramStruct + 8) + 0x38))(currentData[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(lVar7 + 0x50))(currentData[7],puVar9);\n                  (**(code **)(*(long *)(paramStruct + 8) + 0x50))(currentData[8],puVar9 + 4);\n                }\n                param2 = currentData[7];\n                param1 = currentData[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)__ptr;\n          uVar8 = uVar6;\n          puVar12 = __ptr;\n          if (uVar6 < outputSize) {\n            for (; outputSize = uVar6, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *outputArray = *puVar12;\n              puVar12 = puVar12 + (ulong)byteVar * -2 + 1;\n              outputArray = outputArray + (ulong)byteVar * -2 + 1;\n            }\n          }\n          free(__ptr);\n          free(inputArray);\n          return outputSize;\n        }\n        in_R11 = currentArray[0xb];\n      } while (in_R11 == 0);\n      currentSize = currentArray[0x10];\n      maxSize = currentArray[0x11];\n      uVar4 = 0;\n      if (currentSize != maxSize) break;\n      currentArray[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "memcmp",
                "xmalloc",
                "qsort",
                "free",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "reverse_and_process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "get_linked_data_00113d3a",
                "param_1": "input",
                "lVar1": "linkedData"
            },
            "code": "\nlong getLinkedData_00113d3a(long input)\n\n{\n  long linkedData;\n  \n  if (input != 0) {\n    linkedData = *(long *)(input + 8);\n    if (linkedData == 0) {\n      linkedData = FUN_00112904(0xc,0);\n      if (linkedData == 0) {\n        linkedData = 0;\n      }\n      else {\n        *(long *)(linkedData + 0x10) = input;\n        *(long *)(input + 8) = linkedData;\n      }\n    }\n    return linkedData;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_linked_data_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "execute_process_0010a0d3",
                "param_1": "processAddress"
            },
            "code": "\nvoid executeProcess_0010a0d3(long processAddress)\n\n{\n  FUN_00109ed3(processAddress,0x42,*(undefined4 *)(*(long *)(processAddress + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_process_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "translate_binary_function_00115530",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "lVar1": "variable1",
                "pcVar2": "variable2",
                "ppcVar3": "variable3",
                "cVar4": "variable4",
                "iVar5": "variable5",
                "uVar6": "variable6",
                "sVar7": "variable7",
                "sVar8": "variable8",
                "lVar9": "variable9",
                "pcVar10": "variable10",
                "pcVar11": "variable11",
                "pcVar12": "variable12",
                "uVar13": "variable13",
                "bVar14": "variable14",
                "local_50": "localvariable1",
                "local_48": "localvariable2",
                "local_40": "localvariable3"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid translateBinaryFunction_00115530(long parameter1,char **parameter2,long parameter3)\n\n{\n  long variable1;\n  char *variable2;\n  char **variable3;\n  char variable4;\n  int variable5;\n  uint variable6;\n  size_t variable7;\n  size_t variable8;\n  long variable9;\n  char *variable10;\n  char *variable11;\n  char *variable12;\n  uint variable13;\n  bool variable14;\n  long localvariable1;\n  char *localvariable2;\n  long localvariable3 [2];\n  \n  variable4 = FUN_001159d0(parameter2);\n  if (variable4 != '\\0') {\n    return;\n  }\n  variable10 = *parameter2;\n  variable13 = *(uint *)((long)parameter2 + 0x24);\n  localvariable2 = variable10;\n  variable3 = DAT_001278d8;\n  if (*(int *)(*(long *)(parameter1 + 8) + 8) != *(int *)(*(long *)(parameter3 + 8) + 8)) {\n    variable13 = variable13 & *(uint *)(*(long *)(parameter1 + 8) + 0x18) &\n             *(uint *)(*(long *)(parameter3 + 8) + 0x18);\n  }\n  for (; variable3 != (char **)0x0; variable3 = (char **)variable3[3]) {\n    variable5 = strcmp(*variable3,variable10);\n    if (variable5 == 0) {\n      if (*(uint *)(variable3 + 2) != 0xffffffff) {\n        variable13 = *(uint *)(variable3 + 2);\n      }\n      if (variable10 != variable3[1]) {\n        localvariable2 = variable3[1];\n        variable13 = FUN_00115f30(variable13,parameter3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (variable10 = DAT_001278f8, (*(byte *)((long)parameter2 + 0x24) & 1) != 0)) ||\n     (variable10 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    variable7 = strlen(variable10);\n    variable8 = strlen(localvariable2);\n    variable12 = (char *)xmalloc(variable7 + 1 + variable8);\n    variable10 = strcpy(variable12,variable10);\n    localvariable2 = strcat(variable10,localvariable2);\n  }\n  variable9 = FUN_00114190(*parameter2,0,0x80);\n  variable14 = false;\n  if (variable9 == 0) {\n    if ((DAT_00127a2c == 4) && ((variable13 & 0x2000001) != 0)) {\n      variable5 = *(int *)(*(long *)(parameter1 + 8) + 8);\n      if (variable5 == 5) {\n        if (*(int *)(parameter2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(parameter3 + 8) + 8) == 5) {\n            variable14 = (variable13 & 0x2000000) == 0;\n            variable6 = ~((-(uint)((variable13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)parameter2 + 0x24) = *(uint *)((long)parameter2 + 0x24) & variable6;\n          }\n          else {\n            variable6 = 0xfdfffefd;\n          }\n          variable13 = variable13 & variable6;\n        }\n      }\n      else if ((variable5 != 2) || (variable5 = strcmp(*parameter2,\".buildid\"), variable5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    variable13 = FUN_00115f30(variable13 & 0x104 | *(uint *)(variable9 + 0x28),parameter3,*parameter2);\n  }\n  variable4 = bfd_convert_section_setup(parameter1,parameter2,parameter3,&localvariable2,localvariable3);\n  if (variable4 == '\\0') {\n    variable10 = (char *)0x0;\n    localvariable1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  variable10 = (char *)bfd_make_section_anyway_with_flags(parameter3,localvariable2,variable13);\n  if (variable10 == (char *)0x0) {\n    localvariable1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      localvariable3[0] = 0;\n      goto LAB_001158e7;\n    }\n    variable4 = bfd_set_section_size(variable10,localvariable3[0]);\n    if (variable4 == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    localvariable3[0] = ((((long)DAT_00127a1c - 1U) + localvariable3[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    variable4 = bfd_set_section_size(variable10);\n    if (variable4 == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  localvariable1 = 0;\n  variable12 = parameter2[6];\n  variable9 = FUN_00114190(*parameter2,0,0x18);\n  if (variable9 == 0) {\n    variable10[0x28] = variable10[0x28] | 1;\n    variable11 = *parameter2;\n    variable12 = variable12 + _DAT_00127990;\n    *(char **)(variable10 + 0x30) = variable12;\n    *(char **)(variable10 + 0x38) = variable12;\n    variable12 = parameter2[7];\n    variable9 = FUN_00114190(variable11,0,0x60);\n    if (variable9 == 0) goto LAB_00115695;\nLAB_00115860:\n    variable11 = *(char **)(variable9 + 0x20);\n    if ((*(byte *)(variable9 + 0x14) & 0x40) != 0) {\n      variable11 = variable11 + (long)variable12;\n    }\n    *(char **)(variable10 + 0x38) = variable11;\n    variable9 = FUN_00114190(*parameter2,0,0x200);\n    if (variable9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    variable13 = *(uint *)((long)parameter2 + 0x7c);\n    if (variable13 < 0x3f) goto LAB_001156c4;\n    localvariable1 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(variable10 + 0xb4) = *(undefined4 *)((long)parameter2 + 0xb4);\n    variable10[0x28] = variable10[0x28] & 0xcfU | *(byte *)(parameter2 + 5) & 0x30;\n    parameter2[0xc] = variable10;\n    parameter2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)parameter2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    variable4 = (**(code **)(*(long *)(parameter3 + 8) + 0x158))(parameter1,parameter2,parameter3,variable10);\n    if (variable4 == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    variable11 = *(char **)(variable9 + 0x18);\n    if ((*(byte *)(variable9 + 0x14) & 8) == 0) {\n      variable11 = variable11 + (long)variable12;\n    }\n    variable10[0x28] = variable10[0x28] | 1;\n    variable2 = *parameter2;\n    *(char **)(variable10 + 0x30) = variable11;\n    *(char **)(variable10 + 0x38) = variable11;\n    variable12 = parameter2[7];\n    variable9 = FUN_00114190(variable2,0,0x60);\n    if (variable9 != 0) goto LAB_00115860;\nLAB_00115695:\n    variable11 = *parameter2;\n    *(char **)(variable10 + 0x38) = variable12 + _DAT_00127990;\n    variable9 = FUN_00114190(variable11,0,0x200);\n    if (variable9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    variable13 = *(uint *)(variable9 + 0x2c);\n    if (0x3e < variable13) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(variable10 + 0x7c) = variable13;\n    *(undefined4 *)(variable10 + 0xb4) = *(undefined4 *)((long)parameter2 + 0xb4);\n    variable10[0x28] = variable10[0x28] & 0xcfU | *(byte *)(parameter2 + 5) & 0x30;\n    parameter2[0xc] = variable10;\n    parameter2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)parameter2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    variable12 = parameter2[0x1a];\n    variable9 = FUN_00115d00(variable12,parameter2[0x1c]);\n    if ((variable9 == 0) ||\n       (variable1 = *(long *)(parameter1 + 8), *(uint *)(variable9 + 0x18) = *(uint *)(variable9 + 0x18) | 0x20,\n       *(int *)(variable1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(variable12 + 0xb0) = variable9;\n    variable4 = (**(code **)(*(long *)(parameter3 + 8) + 0x158))(parameter1,parameter2,parameter3,variable10);\n    if (variable4 == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (variable14) {\n    *(undefined4 *)(*(long *)(variable10 + 0xd0) + 4) = 8;\n  }\n  if (localvariable1 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  FUN_001126c0(0,parameter3,variable10,localvariable1);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00115f30",
                "bfd_set_section_size",
                "xmalloc",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "strlen",
                "FUN_001159d0",
                "FUN_00114190",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "translate_binary_function_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "execute_function_0010a0bd",
                "param_1": "input"
            },
            "code": "\nvoid executeFunction_0010a0bd(long input)\n\n{\n  FUN_00109ed3(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "extract_function_name_00113e5e",
                "param_1": "input_param",
                "param_2": "string_array",
                "param_3": "string_length",
                "cVar1": "char_value",
                "local_20": "string_ptr"
            },
            "code": "\nundefined8 extract_function_name_00113e5e(undefined8 input_param,char **string_array,long string_length)\n\n{\n  char char_value;\n  char *string_ptr [2];\n  \n  string_ptr[0] = *string_array;\n  *string_array = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)string_ptr[0] < 5) ||\n      (char_value = FUN_00113fb0(string_ptr[0],\"type\"), char_value == '\\0')) ||\n     ((string_ptr[0][4] != '$' && (string_ptr[0][4] != '.')))) {\n    if (*string_ptr[0] != '_') {\n      return 1;\n    }\n    if (string_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (string_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (string_ptr[0][3] != 'p') {\n      return 1;\n    }\n    string_ptr[0] = string_ptr[0] + 4;\n  }\n  else {\n    string_ptr[0] = string_ptr[0] + 5;\n  }\n  char_value = FUNC_0010c95e(input_param,string_ptr,0);\n  if (char_value != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_function_name_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "paramPointer",
                "param_2": "str1",
                "param_3": "size",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "dataPointer",
                "pcVar2": "dataBlockPtr",
                "bVar3": "byteVar",
                "pcVar4": "tempPtr",
                "__s": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long paramPointer,char *str1,uint size,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long dataPointer;\n  char *dataBlockPtr;\n  byte byteVar;\n  char *tempPtr;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByte;\n  \n  str2 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(paramPointer + 0x60) + 0x1c);\n  tempPtr = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (localByte == 0) {\n      byteVar = *(byte *)(*(long *)(paramPointer + 0x60) + 0x1c);\n    }\n    localByte = byteVar & 1;\n    str2 = (char *)FUN_00109b2f(paramPointer);\n  }\n  dataPointer = *(long *)(paramPointer + 0x60);\n  if ((dataPointer == 0) || (dataBlockPtr = *(char **)(dataPointer + 0x30), dataBlockPtr == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < size) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(dataBlockPtr);\n    len2 = strlen(tempPtr);\n    len3 = strlen(str1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str2);\n    }\n    result = xrealloc(dataBlockPtr,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(dataPointer + 0x30) = result;\n    dataBlockPtr = *(char **)(*(long *)(paramPointer + 0x60) + 0x30);\n    len1 = strlen(dataBlockPtr);\n    sprintf(dataBlockPtr + len1,\"%s:%s;%c%c%c\",tempPtr,str1,(ulong)(byte)(0x32 - (char)size),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,len1);\n    free(tempPtr);\n    if (flag4 != '\\0') {\n      tempPtr = *(char **)(*(long *)(paramPointer + 0x60) + 0x30);\n      len1 = strlen(tempPtr);\n      sprintf(tempPtr + len1,\"%ld;%s;\",value,str2);\n      free(str2);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(paramPointer + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_needed_00115f30",
                "param_1": "flag",
                "param_2": "params",
                "param_3": "outputFormat",
                "uVar1": "firstParam",
                "uVar2": "warningMsg"
            },
            "code": "\nuint dropShareFlagIfNeeded_00115f30(uint flag,undefined8 *params,undefined8 outputFormat)\n\n{\n  undefined8 firstParam;\n  undefined8 warningMsg;\n  \n  if (((flag & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    firstParam = *params;\n    flag = flag & 0xf7ffffff;\n    warningMsg = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(warningMsg,firstParam,outputFormat);\n  }\n  return flag;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_needed_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_data_001129f4",
                "param_1": "data",
                "puVar1": "dataPointer",
                "piVar2": "ptr"
            },
            "code": "\nundefined8 extractData_001129f4(int *data)\n\n{\n  undefined8 *dataPointer;\n  int *ptr;\n  \n  do {\n    if (*data != 1) {\n      if (1 < *data - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(data + 4) + 8);\n    }\n    dataPointer = (undefined8 *)(data + 4);\n    ptr = **(int ***)(undefined8 *)*dataPointer;\n  } while ((data != ptr) && (data = ptr, ptr != (int *)0x0));\n  return ((undefined8 *)*dataPointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_data_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_xor_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint invert_and_xor_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_xor_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_file_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "statbuf",
                "param_5": "target",
                "param_6": "tempdir",
                "param_7": "modeFlags",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "stringPtrPtr",
                "pvVar7": "voidPtr",
                "lVar8": "longVar1",
                "puVar9": "undefined8Ptr",
                "piVar10": "intPtr",
                "uVar11": "undefined8Var1",
                "uVar12": "undefined8Var2",
                "lVar13": "longVar2",
                "puVar14": "bfdPtr",
                "ppcVar16": "stringPtrPtr2",
                "pcVar15": "tempdirPath",
                "pcVar17": "currentPath",
                "pcVar18": "filePath",
                "pcVar19": "stringPtr",
                "pcVar20": "codePtr",
                "lVar21": "longVar3",
                "uVar22": "uintVar1",
                "pcVar23": "charPtr1",
                "psVar24": "statPtr",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "bfdPtr2",
                "local_198": "longPtr",
                "local_158": "statStruct",
                "local_c8": "voidPtrArray",
                "uStack_b0": "uintVar2",
                "lStack_98": "longVar4"
            },
            "code": "\n\n\nvoid processFile_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 statbuf,\n                 undefined8 target,long tempdir,undefined8 modeFlags)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **stringPtrPtr;\n  void *voidPtr;\n  long longVar1;\n  undefined8 *undefined8Ptr;\n  int *intPtr;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  long longVar2;\n  undefined8 *bfdPtr;\n  char *tempdirPath;\n  char **stringPtrPtr2;\n  char *currentPath;\n  char *filePath;\n  undefined8 *__ptr;\n  char **pstringPtr;\n  code *codePtr;\n  long longVar3;\n  uint uintVar1;\n  char *charPtr1;\n  stat *statPtr;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *bfdPtr2;\n  long *longPtr;\n  stat statStruct;\n  void *voidPtrArray [3];\n  uint uintVar2;\n  long longVar4;\n  \n  byteVar2 = 0;\n  longVar2 = FUN_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      undefined8Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(undefined8Var2,inputFile);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  bfdPtr = (undefined8 *)bfd_openr(inputFile,target);\n  if ((bfdPtr == (undefined8 *)0x0) || (intVar2 = bfd_stat(bfdPtr,statbuf), intVar2 != 0)) {\n    FUN_001126c0(inputFile,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)bfdPtr + 0x44) = *(uint *)((long)bfdPtr + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(bfdPtr,2);\n  if (charVar1 != '\\0') {\n    if (tempdir == 0) {\n      charVar1 = '\\0';\n      tempdir = *(long *)bfdPtr[1];\n    }\n    if (fileDescriptor < 0) {\n      bfdPtr2 = (undefined8 *)bfd_openw(outputFile,tempdir);\n    }\n    else {\n      bfdPtr2 = (undefined8 *)bfd_fdopenw(outputFile,tempdir,fileDescriptor);\n    }\n    if (bfdPtr2 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        undefined8Var2 = *bfdPtr;\n        undefined8Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(undefined8Var1,undefined8Var2);\n        DAT_00127a10 = 0;\n      }\n      FUN_00114d50(bfdPtr2,bfdPtr,DAT_001264b4);\n      longPtr = bfdPtr2 + 0x1f;\n      if ((*(byte *)((long)bfdPtr + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        undefined8Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,bfdPtr,0,undefined8Var2);\n        return;\n      }\n      tempdirPath = (char *)FUN_0011a0e0(*bfdPtr2);\n      if (tempdirPath == (char *)0x0) {\n        intPtr = __errno_location();\n        tempdirPath = strerror(*intPtr);\n        undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(undefined8Var2,tempdirPath);\n      }\n      if (DAT_00127a2c == 7) {\n        byteVar1 = *(byte *)((long)bfdPtr + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)bfdPtr + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)bfdPtr2 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)bfdPtr2 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)bfdPtr2 + 0x44) = *(uint *)((long)bfdPtr2 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      stringPtrPtr2 = (char **)bfd_openr_next_archived_file(bfdPtr,0);\n      charVar2 = bfd_set_format(bfdPtr2,*(byte *)(bfdPtr + 9) & 7);\n      if (charVar2 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(0,bfdPtr2,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (stringPtrPtr2 != (char **)0x0))) {\n        filePath = *stringPtrPtr2;\n        currentPath = filePath;\n        if (*filePath == '/') {\nLAB_0010527d:\n          undefined8Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(undefined8Var2,filePath);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*currentPath != '\\0') {\n          charPtr1 = currentPath;\n          if ((*currentPath == '.') && (charPtr1 = currentPath + 1, currentPath[1] == '.')) {\n            charPtr1 = currentPath + 2;\n            if ((currentPath[2] == '\\0') || (currentPath[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*charPtr1 != '\\0' && (*charPtr1 != '/')); charPtr1 = charPtr1 + 1) {\n          }\n          currentPath = charPtr1;\n          if (*charPtr1 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        filePath = (char *)concat(tempdirPath,&DAT_0011b47d);\n        intVar2 = stat(filePath,&statStruct);\n        undefined8Ptr = __ptr;\n        if (-1 < intVar2) {\n          longVar2 = FUN_0011a0e0(filePath);\n          free(filePath);\n          if (longVar2 == 0) {\n            intPtr = __errno_location();\n            filePath = strerror(*intPtr);\n            undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(undefined8Var2,filePath);\n            goto LAB_00104e93;\n          }\n          undefined8Ptr = (undefined8 *)xmalloc(0x18);\n          filePath = *stringPtrPtr2;\n          *undefined8Ptr = __ptr;\n          undefined8Ptr[2] = 0;\n          undefined8Ptr[1] = longVar2;\n          filePath = (char *)concat(longVar2,&DAT_0011b47d,filePath);\n        }\n        intVar2 = 0;\n        if (DAT_001279cb != '\\0') {\n          statPtr = &statStruct;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&statPtr->st_dev = 0;\n            statPtr = (stat *)((long)statPtr + (ulong)byteVar2 * -8 + 4);\n          }\n          pstringPtr = (char **)stringPtrPtr2[0x1d];\n          if ((char **)stringPtrPtr2[0x1d] == (char **)0x0) {\n            pstringPtr = stringPtrPtr2;\n          }\n          intVar2 = (**(code **)(pstringPtr[1] + 0x1e8))(stringPtrPtr2,&statStruct);\n          if (intVar2 != 0) {\n            currentPath = *stringPtrPtr2;\n            undefined8Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(undefined8Var2,currentPath);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = filePath;\n        *__ptr = undefined8Ptr;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(stringPtrPtr2,1);\n        if (charVar2 == '\\0') {\n          undefined8Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,stringPtrPtr2,0,undefined8Var2);\n          pstringPtr = (char **)bfd_openw(filePath,tempdir);\n          if (pstringPtr == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(filePath,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          stringPtrPtr = (char **)stringPtrPtr2[0x1d];\n          if ((char **)stringPtrPtr2[0x1d] == (char **)0x0) {\n            stringPtrPtr = stringPtrPtr2;\n          }\n          intVar1 = (**(code **)(stringPtrPtr[1] + 0x1e8))(stringPtrPtr2);\n          longVar2 = longVar4;\n          if (intVar1 == 0) {\n            if (longVar4 < 0) {\n              FUN_001125fa(stringPtrPtr2);\n              undefined8Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(undefined8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(stringPtrPtr2,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  currentPath = *pstringPtr;\n                  undefined8Var2 = FUN_001125fa(stringPtrPtr2);\n                  charPtr1 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(charPtr1,undefined8Var2,currentPath);\n                }\n                voidPtr = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidPtr,longVar3,stringPtrPtr2);\n                  stringPtrPtr = stringPtrPtr2;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPtr,longVar3,pstringPtr), stringPtrPtr = pstringPtr,\n                     longVar3 != longVar1)) {\n                    FUN_001126c0(0,stringPtrPtr,0,0);\n                    free(voidPtr);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pstringPtr,uintVar2 | 0x100);\n                free(voidPtr);\n                charVar2 = bfd_close_all_done(pstringPtr);\n                if (charVar2 == '\\0') {\n                  FUN_001126c0(filePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8Var2 = FUN_001125fa(stringPtrPtr2);\n              FUN_0011a110(undefined8Var2);\n            }\n          }\n          else {\n            FUN_001126c0(0,stringPtrPtr2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(pstringPtr);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(filePath,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(filePath);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pstringPtr = (char **)bfd_openw(filePath,*(undefined8 *)stringPtrPtr2[1]);\n          }\n          else {\n            pstringPtr = (char **)bfd_openw(filePath,tempdir);\n          }\n          if (pstringPtr == (char **)0x0) goto LAB_00104e80;\n          charVar2 = FUNC_00114e50(stringPtrPtr2,pstringPtr,modeFlags);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(stringPtrPtr2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(pstringPtr);\n            if (charVar2 == '\\0') {\n              FUN_001126c0(filePath,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pstringPtr);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(filePath,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (intVar2 == 0)) {\n            FUN_0011a350(filePath,&statStruct);\n          }\n          longVar2 = bfd_openr(filePath,tempdir);\n          __ptr[2] = longVar2;\n          *longPtr = longVar2;\n          longPtr = (long *)(longVar2 + 0xf0);\n          pstringPtr = (char **)bfd_openr_next_archived_file(bfdPtr);\n          bfd_close(stringPtrPtr2);\n          stringPtrPtr2 = pstringPtr;\n        }\n      }\n      *longPtr = 0;\n      voidPtr = (void *)xstrdup(*bfdPtr2);\n      if (DAT_00127a20 == 0) {\n        codePtr = bfd_close;\n      }\n      else {\n        codePtr = bfd_close_all_done;\n      }\n      charVar1 = (*codePtr)(bfdPtr2);\n      if (charVar1 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(voidPtr,0,0,0);\n      }\n      free(voidPtr);\n      voidPtr = (void *)xstrdup(*bfdPtr);\n      charVar1 = bfd_close(bfdPtr);\n      if (charVar1 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(voidPtr,0,0,0);\n      }\n      free(voidPtr);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdPtr = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdPtr;\n      }\n      rmdir(tempdirPath);\n      free(tempdirPath);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    FUN_001126c0(outputFile,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(bfdPtr,1,voidPtrArray);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(bfdPtr,3,&statStruct);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      FUN_001126c0(inputFile,0,0,0);\n      if (intVar2 == 0xd) {\n        FUN_0011256b(voidPtrArray[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      FUN_0011256b(statStruct.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(voidPtrArray[0]);\n    }\n  }\n  if (tempdir == 0) {\n    tempdir = *(long *)bfdPtr[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFile,tempdir);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFile,tempdir,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  FUN_00114d50(longVar2,bfdPtr,DAT_001264b4);\n  charVar1 = FUNC_00114e50(bfdPtr,longVar2,modeFlags);\n  if (charVar1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    charVar1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(outputFile,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(bfdPtr);\n  if (charVar1 == '\\0') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "FUN_00114e50",
                "bfd_check_format_matches",
                "bfd_check_format",
                "bfd_set_format",
                "free",
                "FUN_00114d50",
                "bfd_close",
                "bfd_close_all_done",
                "bfd_get_error",
                "bfd_fdopenw",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_set_error",
                "bfd_openr",
                "bfd_openw",
                "__errno_location",
                "FUN_00113f50",
                "strerror",
                "bfd_stat",
                "FUN_0011a0e0",
                "FUN_0011256b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_file_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointer",
                "uVar2": "result",
                "sVar3": "length",
                "lVar4": "value",
                "lVar5": "bitMask",
                "local_8c": "buffer",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processIntType_0010b800(long baseAddress,int size,char flag)\n\n{\n  long *pointer;\n  undefined8 result;\n  size_t length;\n  long value;\n  long bitMask;\n  undefined2 buffer;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    value = baseAddress + 0xb8;\n    if (flag != '\\0') {\n      value = baseAddress + 0x78;\n    }\n    pointer = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *pointer;\n    if (value != 0) {\n      result = FUN_00109cf4(baseAddress,value,size);\n      return result;\n    }\n    value = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = value + 1;\n    *pointer = value;\n    sprintf((char *)&buffer,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bitMask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&buffer);\n      sprintf((char *)((long)&buffer + length),\"%ld;%ld;\",-bitMask,bitMask + -1);\n    }\n    else {\n      length = strlen((char *)&buffer);\n      *(undefined2 *)((long)&buffer + length) = 0x3b30;\n      *(undefined *)((long)&buffer + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&buffer + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&buffer + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = FUN_00109b52(baseAddress,&buffer,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "outputData",
                "param_5": "outputSize",
                "uVar1": "size",
                "uVar2": "tempSize",
                "cVar3": "result",
                "pcVar4": "tempStr",
                "sVar5": "strLen",
                "__s": "formattedStr",
                "lVar6": "counter",
                "__ptr": "tmpPtr",
                "uVar7": "returnValue",
                "uVar8": "flagStatus",
                "lVar9": "tempCounter",
                "uVar10": "desiredSize",
                "puVar11": "tempPtr",
                "bVar12": "tempByte"
            },
            "code": "\nundefined8 processData_00109ed3(long input,uint flag,undefined4 param,long *outputData,ulong *outputSize)\n\n{\n  ulong size;\n  ulong tempSize;\n  char result;\n  char *tempStr;\n  size_t strLen;\n  char *formattedStr;\n  long counter;\n  void *tmpPtr;\n  undefined8 returnValue;\n  undefined flagStatus;\n  long tempCounter;\n  ulong desiredSize;\n  undefined *tempPtr;\n  byte tempByte;\n  \n  tempByte = 0;\n  counter = *(long *)(input + 0x60);\n  if (counter != 0) {\n    size = *(ulong *)(counter + 0x10);\n    if (((long)size < 1) || (outputData == (long *)0x0)) {\n      flagStatus = *(undefined *)(counter + 0x1c);\n      tempStr = (char *)FUN_00109b2f(input);\n      strLen = strlen(tempStr);\n      formattedStr = (char *)xmalloc(strLen + 2);\n      sprintf(formattedStr,\"%c%s\",(ulong)flag,tempStr);\n      free(tempStr);\n      counter = 0;\n    }\n    else {\n      desiredSize = *outputSize;\n      if (desiredSize <= size) {\n        if (desiredSize == 0) {\n          desiredSize = 10;\n        }\n        for (; desiredSize <= size; desiredSize = desiredSize * 2) {\n        }\n        counter = xrealloc(*outputData,desiredSize * 8);\n        tempSize = *outputSize;\n        *outputData = counter;\n        tempPtr = (undefined *)(counter + tempSize * 8);\n        for (tempCounter = (desiredSize - tempSize) * 8; tempCounter != 0; tempCounter = tempCounter + -1) {\n          *tempPtr = 0;\n          tempPtr = tempPtr + (ulong)tempByte * -2 + 1;\n        }\n        *outputSize = desiredSize;\n      }\n      counter = *(long *)(*outputData + size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        tmpPtr = (void *)FUN_00109b2f(input);\n        free(tmpPtr);\n        returnValue = FUN_00109cf4(input,counter,param);\n        return returnValue;\n      }\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      tempStr = (char *)FUN_00109b2f(input);\n      strLen = strlen(tempStr);\n      formattedStr = (char *)xmalloc(strLen + 0x14);\n      sprintf(formattedStr,\"%ld=%c%s\",counter,(ulong)flag,tempStr);\n      free(tempStr);\n      flagStatus = 1;\n      *(long *)(*outputData + size * 8) = counter;\n    }\n    result = FUN_00109b52(input,formattedStr,counter,flagStatus,param);\n    if (result != '\\0') {\n      free(formattedStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "xrealloc",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00113c43",
                "FUN_0010d882",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_00114190",
                "FUN_0010aa53",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010bbd3",
                "FUN_0010e918",
                "FUN_00114c80",
                "FUN_00116852",
                "FUN_0010da0b",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00113d6e",
                "FUN_00115530",
                "FUN_00113ce0",
                "FUN_0010ab4d",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_00109a0b",
                "FUN_00112894",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_00113bfa",
                "FUN_00109b52",
                "FUN_0010c218",
                "FUN_0010c7a0",
                "FUN_0010bd62",
                "FUN_00113b98",
                "FUN_0011173a",
                "FUN_00113e23",
                "FUN_00107880",
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_00112925",
                "FUN_0010ae0e",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010bc80",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00116030",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_00114cf0",
                "FUN_0010ebb0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00112904",
                "FUN_0010eafe",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00113da9",
                "FUN_00108f08",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "loopCounter",
                "puVar5": "ptr4",
                "pcVar6": "filenamePtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loopCounter;\n  undefined4 *ptr4;\n  char *filenamePtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filenamePtr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUNC_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUNC_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_001125fa",
                "FUN_00119ed0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_data_from_params_00115d00",
                "param_1": "selectedValue",
                "param_2": "dataStructure",
                "uVar1": "dataType",
                "lVar2": "result"
            },
            "code": "\nlong findDataFromParams_00115d00(long selectedValue,long dataStructure)\n\n{\n  uint dataType;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(dataStructure + 8) + 8) == 5) {\n      if (*(int *)(selectedValue + 0x28) == *(int *)(*(long *)(dataStructure + 0x110) + 0xd40)) {\n        dataType = *(uint *)(selectedValue + 0x2c);\n        if (dataType == 0) {\n          result = 0;\n        }\n        else if ((ulong)dataType <\n                 *(ulong *)(*(long *)(dataStructure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(dataStructure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(dataType - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_data_from_params_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_structure_00113c43",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "return_value",
                "xmalloc": "allocate_memory"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_structure_00113c43(long input_param_1,long input_param_2,long input_param_3,long input_param_4,undefined input_param_5,\n            undefined8 input_param_6)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if ((input_param_1 != 0) && (input_param_2 != 0)) {\n    result = FUN_00112904(0x10,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input_param_2;\n      allocated_memory[2] = input_param_3;\n      allocated_memory[3] = input_param_4;\n      *(undefined *)(allocated_memory + 4) = input_param_5;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_param_6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_data_00112a33",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "flag",
                "param_5": "param1",
                "param_6": "param2",
                "param_7": "param3",
                "uVar1": "result",
                "lVar2": "tempVar",
                "plVar3": "pointer"
            },
            "code": "\nbool processData_00112a33(undefined8 input,long data,undefined8 output,byte flag,undefined8 param1\n                 ,undefined8 param2,uint param3)\n\n{\n  undefined result;\n  long tempVar;\n  long *pointer;\n  \n  if (flag < 0x12) {\n    if (flag != 0) {\n      switch(flag) {\n      case 1:\n        result = FUN_0010c05d(param1,*(undefined8 *)(data + 8),param2,4,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = FUN_0010c05d(param1,*(undefined8 *)(data + 8),param2,(param3 & 0xff) + 2,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(param1,*(undefined8 *)(data + 8),param2,5,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(param1,*(undefined8 *)(data + 8),param2,1,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tempVar = FUN_0010c6be(param1,*(undefined8 *)(data + 8));\n        if (tempVar == 0) {\n          return false;\n        }\n        pointer = (long *)FUN_0010da0b(input,output);\n        *pointer = tempVar;\n        break;\n      case 0xd:\n        tempVar = FUN_0010c218(param1,*(undefined8 *)(data + 8));\n        return tempVar != 0;\n      case 0x11:\n        result = FUN_0010bd62(param1,*(undefined8 *)(data + 8),param2,2,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (flag == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = FUN_0010c05d(param1,*(undefined8 *)(data + 8),param2,1,\n                         *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010da0b",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bd62",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_info_0010c2d2",
                "uVar1": "dataType",
                "pcVar2": "dataTypeString",
                "uVar3": "output",
                "lVar4": "result",
                "plVar5": "pointer",
                "uVar6": "absDataType"
            },
            "code": "\n\n\nlong getTypeInfo_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint dataType;\n  char *dataTypeString;\n  undefined8 output;\n  long result;\n  long *pointer;\n  uint absDataType;\n  \n  if ((*param_3 == 0) && (dataType = param_3[1], (int)dataType < 0)) {\n    absDataType = ~dataType;\n    if (absDataType < 0x22) {\n      result = *(long *)(param_2 + 0x90 + (ulong)absDataType * 8);\n      if (result == 0) {\n        switch(absDataType) {\n        case 1:\n          output = FUN_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          output = FUN_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          output = FUN_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          output = FUN_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          output = FUN_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          output = FUN_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          output = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          output = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          output = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          output = FUN_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          output = FUN_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          output = FUN_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          output = FUN_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          output = FUN_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          output = FUN_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          output = FUN_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          output = FUN_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          output = 0;\n          break;\n        case 0x13:\n          output = FUN_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          output = FUN_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          output = FUN_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          output = FUN_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          output = FUN_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          output = FUN_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          output = FUN_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          output = FUN_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          output = FUN_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          output = FUN_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          output = FUN_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          output = FUN_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          output = FUN_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          output = FUN_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          output = FUN_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          output = FUN_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        result = FUN_0010c218(param_1,dataTypeString,output);\n        *(long *)(param_2 + 0x90 + (ulong)absDataType * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)dataType);\n  }\n  else {\n    pointer = (long *)FUN_00109022(param_2);\n    if (pointer != (long *)0x0) {\n      if (*pointer == 0) {\n        result = FUN_00113e23(pointer,0);\n        return result;\n      }\n      return *pointer;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "fprintf",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_type_info_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "extract_symbols_0010e07c",
                "param_1": "binaryFile",
                "param_2": "symbolTable",
                "param_3": "outputFile",
                "param_4": "flag",
                "param_5": "coffHeader",
                "param_6": "errorMessage",
                "lVar1": "symbolTableEnd",
                "lVar2": "symbolTableEntry",
                "lVar3": "symbolCount",
                "cVar4": "status",
                "uVar5": "errorType",
                "__ptr": "symbols",
                "uVar6": "symbolValue",
                "uVar7": "errorString",
                "puVar8": "symbolEntry",
                "pcVar9": "errMsgFormat",
                "puVar10": "auxData",
                "uVar11": "auxInfo",
                "lVar12": "counter",
                "iVar13": "size",
                "iVar14": "initialSize",
                "local_a8": "symbolValue1",
                "uStack_a4": "symbolValueHi1",
                "uStack_a0": "symbolValue2",
                "uStack_9c": "symbolValueHi2",
                "local_88": "symbolNameBuf",
                "local_6a": "symbolType",
                "local_68": "symbolClass",
                "local_67": "symbolAuxCount",
                "local_60": "auxDataBuf",
                "local_56": "auxDataSize"
            },
            "code": "\nundefined8\nextractSymbols_0010e07c(undefined8 binaryFile,long *symbolTable,undefined8 outputFile,int flag,long coffHeader,\n            undefined8 errorMessage)\n\n{\n  long symbolTableEnd;\n  long symbolTableEntry;\n  long symbolCount;\n  char status;\n  undefined4 errorType;\n  void *symbols;\n  undefined8 symbolValue;\n  undefined8 errorString;\n  undefined4 *symbolEntry;\n  char *errMsgFormat;\n  undefined *auxData;\n  uint auxInfo;\n  long counter;\n  int size;\n  int initialSize;\n  undefined4 symbolValue1;\n  undefined4 symbolValueHi1;\n  undefined4 symbolValue2;\n  undefined4 symbolValueHi2;\n  undefined symbolNameBuf [30];\n  undefined2 symbolType;\n  byte symbolClass;\n  byte symbolAuxCount;\n  undefined auxDataBuf [10];\n  ushort auxDataSize;\n  \n  initialSize = 10;\n  counter = 0;\n  symbolTableEnd = *(long *)(coffHeader + 0x18);\n  symbols = (void *)xmalloc(0x50);\n  while ((symbolTable[3] < symbolTableEnd && (symbolTable[2] < symbolTable[1]))) {\n    symbolTableEntry = *(long *)(*symbolTable + symbolTable[2] * 8);\n    status = bfd_coff_get_syment(binaryFile,symbolTableEntry,symbolNameBuf);\n    if (status == '\\0') {\n      errorType = bfd_get_error();\n      symbolValue = bfd_errmsg(errorType);\n      errMsgFormat = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errorString = dcgettext(0,errMsgFormat,5);\n      FUN_00119ed0(errorString,symbolValue);\n      free(symbols);\n      return 0;\n    }\n    symbolCount = symbolTable[3];\n    auxData = (undefined *)0x0;\n    symbolTable[2] = symbolTable[2] + 1;\n    symbolTable[3] = symbolCount + 1 + (ulong)symbolAuxCount;\n    if (symbolAuxCount != 0) {\n      auxData = auxDataBuf;\n      status = bfd_coff_get_auxent(binaryFile,symbolTableEntry,0,auxData);\n      if (status == '\\0') {\n        errorType = bfd_get_error();\n        symbolValue = bfd_errmsg(errorType);\n        errMsgFormat = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolClass == 0x12) {\n      auxInfo = (uint)auxDataSize;\n      size = (int)*(undefined8 *)(symbolTableEntry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30);\n    }\n    else {\n      if (symbolClass < 0x13) {\n        if ((symbolClass == 8) || (symbolClass == 0xb)) {\n          auxInfo = 0;\n          size = ((int)*(undefined8 *)(symbolTableEntry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolClass == 0x66) break;\n      auxInfo = 0;\n      size = 0;\n    }\nLAB_0010e214:\n    errorString = FUN_0010dac0(binaryFile,symbolTable,outputFile,symbolCount,symbolType,auxData,1);\n    symbolValue = *(undefined8 *)(symbolTableEntry + 8);\n    symbolEntry = (undefined4 *)xmalloc(0x20);\n    symbolValue1 = (undefined4)symbolValue;\n    symbolValueHi1 = (undefined4)((ulong)symbolValue >> 0x20);\n    symbolValue2 = (undefined4)errorString;\n    symbolValueHi2 = (undefined4)((ulong)errorString >> 0x20);\n    *(undefined8 *)(symbolEntry + 5) = 0;\n    symbolEntry[6] = size;\n    symbolEntry[7] = auxInfo;\n    symbolEntry[4] = 0;\n    *symbolEntry = symbolValue1;\n    symbolEntry[1] = symbolValueHi1;\n    symbolEntry[2] = symbolValue2;\n    symbolEntry[3] = symbolValueHi2;\n    if (initialSize <= (int)counter + 1) {\n      initialSize = initialSize + 10;\n      symbols = (void *)xrealloc(symbols,(long)initialSize << 3,symbolEntry,0,errorMessage);\n    }\n    *(undefined4 **)((long)symbols + counter * 8) = symbolEntry;\n    counter = counter + 1;\n  }\n  *(undefined8 *)((long)symbols + (long)(int)counter * 8) = 0;\n  symbolValue = FUN_00113da9(flag == 8,*(undefined2 *)(coffHeader + 10),symbols);\n  return symbolValue;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "FUN_00113da9",
                "xrealloc",
                "bfd_coff_get_auxent",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "extract_symbols_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_001082c3",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_file_and_process_lines_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "dataBuffer",
                "iVar1": "lineIndex",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "gettextMessage",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "lineStart",
                "bVar8": "currentCharacter",
                "pbVar9": "nextCharacter",
                "pbVar10": "currentPosition",
                "pbVar11": "lineEnd",
                "pbVar12": "lineStart"
            },
            "code": "\nvoid readFileAndProcessLines_00114460(char *filename,undefined8 hashTable,byte **dataBuffer)\n\n{\n  int lineIndex;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 gettextMessage;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashTableSlot;\n  byte *lineStart;\n  byte currentCharacter;\n  byte *nextCharacter;\n  byte *currentPosition;\n  byte *lineEnd;\n  byte *lineStart;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errnoLocation = __errno_location();\n      errorMessage = strerror(*errnoLocation);\n      gettextMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(gettextMessage,filename,errorMessage);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineIndex = ferror(fileStream), lineIndex != 0)) {\n      gettextMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(gettextMessage,filename);\n    }\n    lineIndex = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentCharacter = *fileBuffer;\n    lineStart = fileBuffer;\n    while (currentPosition = lineStart, currentCharacter != 0) {\n      for (; currentCharacter = *currentPosition, lineEnd = currentPosition, currentCharacter != 10; currentPosition = currentPosition + 1) {\n        if ((char)currentCharacter < '\\v') {\n          if (currentCharacter == 0) {\n            nextCharacter = currentPosition + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentCharacter == 0xd) {\n            *currentPosition = 0;\n            nextCharacter = currentPosition + 1;\n            if (currentPosition[1] == 10) {\n              nextCharacter = currentPosition + 2;\n              lineEnd = currentPosition + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentCharacter == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPosition = 0;\n      if (currentPosition[1] == 0xd) {\n        lineEnd = currentPosition + 1;\n        nextCharacter = currentPosition + 2;\n      }\n      else {\n        nextCharacter = currentPosition + 1;\n      }\nLAB_00114553:\n      currentCharacter = *lineStart;\n      while ((currentCharacter == 0x20 || (currentPosition = lineStart, currentCharacter == 9))) {\n        currentPosition = lineStart + 1;\n        lineStart = lineStart + 1;\n        currentCharacter = *currentPosition;\n      }\n      do {\n        if ((currentCharacter == 10) || (currentCharacter == 0xd)) goto LAB_00114676;\n        if (currentCharacter == 0) goto LAB_00114599;\n        currentCharacter = currentPosition[1];\n        currentPosition = currentPosition + 1;\n      } while ((currentCharacter != 0x20) && (currentCharacter != 9));\n      if ((char)currentCharacter < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentCharacter & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentCharacter = currentPosition[1];\n        if ((((((currentCharacter == 9) || (currentCharacter == 0x20)) &&\n              ((currentCharacter = currentPosition[2], currentCharacter == 9 || (currentCharacter == 0x20)))) &&\n             ((currentCharacter = currentPosition[3], currentCharacter == 9 || (currentCharacter == 0x20)))) &&\n            ((currentCharacter = currentPosition[4], currentCharacter == 9 || (currentCharacter == 0x20)))) &&\n           ((currentCharacter = currentPosition[5], currentCharacter == 9 || (currentCharacter == 0x20)))) {\n          currentCharacter = currentPosition[6];\n          lineStart = currentPosition + 6;\n          if ((currentCharacter == 9) || (currentCharacter == 0x20)) {\n            do {\n              do {\n                currentCharacter = lineStart[1];\n                lineStart = lineStart + 1;\n              } while (currentCharacter == 0x20);\n            } while (currentCharacter == 9);\n          }\n        }\n        if ((0xd < currentCharacter) || ((-0x2402L >> (currentCharacter & 0x3f) & 1U) != 0)) {\n          gettextMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(gettextMessage,filename,lineIndex);\n        }\n      }\nLAB_00114599:\n      *currentPosition = 0;\n      if (lineStart < currentPosition) {\n        hashTableSlot = (byte **)htab_find_slot(hashTable,lineStart,1);\n        *hashTableSlot = lineStart;\n      }\n      lineIndex = lineIndex + 1;\n      lineStart = nextCharacter;\n      currentCharacter = lineEnd[1];\n    }\n    *dataBuffer = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "fread",
                "FUN_00113f50",
                "strerror",
                "FUN_00119dd0",
                "fopen",
                "xmalloc",
                "ferror",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_process_lines_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "build_formatted_string_0010a94e",
                "param_1": "param",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "flag",
                "cVar1": "flagChar",
                "lVar2": "ptr",
                "__s": "result1",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8 buildFormattedString_0010a94e(long param,char *input1,char *input2,int flag)\n\n{\n  char flagChar;\n  long ptr;\n  char *result1;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flagChar = *(char *)(*(long *)(param + 0x60) + 0x1c);\n  result1 = (char *)FUN_00109b2f();\n  formattedString = *(char **)(*(long *)(param + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    length1 = strlen(formattedString);\n    length2 = strlen(input1);\n    length3 = strlen(result1);\n    length4 = strlen(input2);\n    formattedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param + 0x60) + 0x20),input1,flagString,\n            result1,input2,*(long *)(param + 0x60));\n    free(*(void **)(*(long *)(param + 0x60) + 0x20));\n    ptr = *(long *)(param + 0x60);\n    *(char **)(ptr + 0x20) = formattedString;\n    if (flagChar != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "build_formatted_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extracted_function_00113b1e",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "param_3": "outputParam",
                "param_4": "defaultValue",
                "auVar1": "result",
                "piVar2": "ptr",
                "uVar3": "value",
                "auVar4": "modifiedResult"
            },
            "code": "\nundefined  [16] extractedFunction_00113b1e(long inputParam,undefined8 unusedParam,ulong outputParam,undefined8 defaultValue)\n\n{\n  undefined result [16];\n  int *ptr;\n  undefined8 value;\n  undefined modifiedResult [16];\n  \n  if (inputParam != 0) {\n    ptr = (int *)FUN_00112b6e(inputParam,0);\n    if ((ptr == (int *)0x0) || (3 < *ptr - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(ptr + 4);\n    }\n    modifiedResult._8_8_ = defaultValue;\n    modifiedResult._0_8_ = value;\n    return modifiedResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = outputParam;\n  return result << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extracted_function_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "execute_remote_command_0010a0e9",
                "param_1": "commandManager",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "connectionStatus",
                "uVar2": "returnValue",
                "__s": "commandString",
                "sVar3": "commandLength",
                "__s_00": "dynamicMemory"
            },
            "code": "\nundefined4 executeRemoteCommand_0010a0e9(long commandManager,undefined8 param1,undefined8 param2)\n\n{\n  undefined connectionStatus;\n  undefined4 returnValue;\n  char *commandString;\n  size_t commandLength;\n  char *dynamicMemory;\n  \n  connectionStatus = *(undefined *)(*(long *)(commandManager + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(commandManager + 0x60) + 0x18);\n  commandString = (char *)FUN_00109b2f();\n  commandLength = strlen(commandString);\n  dynamicMemory = (char *)xmalloc(commandLength + 100);\n  sprintf(dynamicMemory,\"r%s;%ld;%ld;\",commandString,param1,param2);\n  free(commandString);\n  returnValue = FUN_00109b52(commandManager,dynamicMemory,0,connectionStatus,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(dynamicMemory);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_remote_command_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "dataPointer",
                "cVar1": "result",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeData_00114c20(long dataPointer)\n\n{\n  char result;\n  char *charPointer;\n  \n  FUN_00114190(dataPointer,1,1);\n  result = FUN_00113fb0(dataPointer,&DAT_0011b499);\n  if (result != '\\0') {\n    charPointer = (char *)(dataPointer + 5);\n    if (*(char *)(dataPointer + 4) != 'a') {\n      charPointer = (char *)(dataPointer + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_duplicate_string_00115f50",
                "param_1": "input_address",
                "param_2": "input_strings",
                "param_3": "enable_check",
                "__s1": "current_string",
                "uVar1": "string_comparison_result",
                "uVar2": "temp_result",
                "extraout_EDX": "temp_extra_result",
                "plVar3": "linked_list_pointer",
                "auVar4": "comparison_result_array"
            },
            "code": "\nuint checkDuplicateString_00115f50(long input_address,char **input_strings,char enable_check)\n\n{\n  char *current_string;\n  uint string_comparison_result;\n  undefined4 temp_result;\n  undefined4 temp_extra_result;\n  long *linked_list_pointer;\n  undefined comparison_result_array [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  comparison_result_array = FUN_001159d0(input_strings);\n  if (comparison_result_array[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      current_string = *input_strings;\n      linked_list_pointer = DAT_001279b8;\n      do {\n        string_comparison_result = strcmp(current_string,(char *)linked_list_pointer[1]);\n        comparison_result_array._4_4_ = 0;\n        comparison_result_array._0_4_ = string_comparison_result;\n        comparison_result_array._8_4_ = temp_extra_result;\n        if (string_comparison_result == 0) {\n          return 1;\n        }\n        linked_list_pointer = (long *)*linked_list_pointer;\n      } while (linked_list_pointer != (long *)0x0);\n    }\n    temp_result = comparison_result_array._8_4_;\n    if (((((enable_check == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (comparison_result_array._8_4_ = temp_result, comparison_result_array._0_8_ = *(long *)(input_address + 8),\n         *(int *)(*(long *)(input_address + 8) + 8) != 5)) ||\n        ((comparison_result_array._0_8_ = (ulong)input_strings[0x1a], *(int *)(input_strings[0x1a] + 4) != 7 ||\n         (comparison_result_array = FUN_00113fb0(*input_strings,\".gnu.build.attributes\"), comparison_result_array[0] == '\\0')))) &&\n       ((*(byte *)((long)input_strings + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(comparison_result_array._1_7_,input_strings[8] == (char *)0x0) |\n             CONCAT31(comparison_result_array._9_3_,input_strings[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001159d0",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_duplicate_string_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytes_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPointer",
                "param_2": "count",
                "lVar1": "tempVar",
                "cVar2": "result",
                "__ptr": "stringPointer",
                "uVar3": "countUnsigned",
                "uVar4": "countMinusOne",
                "local_5a": "message"
            },
            "code": "\nvoid processData_0010b948(long dataPointer,uint count)\n\n{\n  long tempVar;\n  char result;\n  void *stringPointer;\n  ulong countUnsigned;\n  uint countMinusOne;\n  char message [50];\n  \n  countMinusOne = count - 1;\n  countUnsigned = (ulong)count;\n  if ((countMinusOne < 0x10) && (tempVar = *(long *)(dataPointer + 0xf8 + (ulong)countMinusOne * 8), tempVar != 0)) {\n    FUN_00109cf4(dataPointer,tempVar,countUnsigned);\n    return;\n  }\n  result = FUN_0010b800(dataPointer,4,0);\n  if (result != '\\0') {\n    stringPointer = (void *)FUN_00109b2f(dataPointer);\n    tempVar = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = tempVar + 1;\n    if (countMinusOne < 0x10) {\n      *(long *)(dataPointer + 0xf8 + (ulong)countMinusOne * 8) = tempVar;\n    }\n    sprintf(message,\"%ld=r%s;%u;0;\",tempVar,stringPointer,countUnsigned);\n    free(stringPointer);\n    FUN_00109b52(dataPointer,message,tempVar,1,countUnsigned);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010914e",
                "FUN_00108072",
                "FUN_00119f70",
                "FUN_00108fe8",
                "FUN_0010882c",
                "FUN_00115b70",
                "FUN_00114e50",
                "FUN_00114190",
                "FUN_00108fb9",
                "FUN_00108916",
                "FUN_0010543c",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010da0b",
                "FUN_00112996",
                "FUN_00115530",
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_001083de",
                "FUN_0010b800",
                "FUN_00113f50",
                "FUN_001152b6",
                "FUN_00108179",
                "FUN_0010c218",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_0010808f",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_00104920",
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00114e00",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00107976",
                "FUN_00108a2a",
                "FUN_0010e07c",
                "FUN_00116490",
                "FUN_00119970",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_00108375",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00109a32",
                "FUN_0010c892",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_0010e6a8",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010827b",
                "FUN_001086af",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_00114690",
                "FUN_0010bf20",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114e50",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info",
                "iVar1": "first_elem",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "local_debug_info",
                "local_10": "local_array"
            },
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_elem;\n  undefined8 uVar2;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *local_debug_info;\n  int *local_array;\n  \n  first_elem = *input_array;\n  if ((first_elem != 1) && (1 < first_elem - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      uVar2 = FUN_001129f4(input_array,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  local_debug_info = debug_info;\n  local_array = input_array;\n  if (first_elem - 0x16U < 2) {\n    result = (int *)get_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&local_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)get_real_type_00112b6e(result,&local_debug_info);\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001129f4",
                "FUN_00112b6e",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data",
                "param_2": "arg2",
                "param_3": "value1",
                "param_4": "flag1",
                "param_5": "value2",
                "param_6": "flag2",
                "param_7": "flag3",
                "uVar1": "result",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "length",
                "cVar3": "charFlag"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long data,undefined8 arg2,ulong value1,undefined flag1,ulong value2,\n            byte flag2,byte flag3)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length;\n  char charFlag;\n  \n  if (((flag3 ^ 1) & flag2) == 0) {\n    string1 = (char *)0x0;\n    charFlag = '\\0';\n  }\n  else {\n    charFlag = *(char *)(*(long *)(data + 0x60) + 0x1c);\n    string1 = (char *)FUN_00109b2f();\n    value2 = value2 & 0xffffffff;\n    value1 = value1 & 0xffffffff;\n  }\n  result = FUN_0010a69a(data,arg2,value1,flag1,value2);\n  if ((char)result != '\\0') {\n    if (flag2 == 0) {\n      return result;\n    }\n    if (flag3 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      length = strlen(string1);\n      string2 = (char *)xmalloc(length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (charFlag != '\\0') {\n        *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "result",
                "puVar2": "pointer"
            },
            "code": "\nlong allocate_and_store_data_00113d6e(undefined8 data_1,undefined8 data_2)\n\n{\n  long result;\n  undefined8 *pointer;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    pointer = (undefined8 *)xmalloc(0x10);\n    *pointer = data_1;\n    pointer[1] = data_2;\n    *(undefined8 **)(result + 0x10) = pointer;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010e842",
                "FUN_0010aa53",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_00108863",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104a35",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_0011256b",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_001081e9",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_00116030",
                "FUN_0010c95e",
                "FUN_00114b84",
                "FUN_00104ea2",
                "FUN_0010b948",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_conditional_code_00114d50",
                "param_1": "targetPointer",
                "param_2": "sourcePointer",
                "param_3": "condition"
            },
            "code": "\nvoid executeConditionalCode_00114d50(long targetPointer,long sourcePointer,uint condition)\n\n{\n  if (*(int *)(*(long *)(targetPointer + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(sourcePointer + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(sourcePointer + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(targetPointer + 8) + 0x380) + 0x78))(targetPointer,condition != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_conditional_code_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00107880",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *localizedString;\n  \n  usageString = DAT_001275e0;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,localizedString,usageString);\n  localizedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,localizedString);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "error1",
                "param_2": "error2",
                "param_3": "error3",
                "param_4": "error4",
                "param_5": "error5",
                "param_6": "error6",
                "param_7": "error7",
                "param_8": "error8",
                "param_9": "errorMessage",
                "param_10": "errorCode",
                "param_11": "ptrErrorCode",
                "param_12": "formatString",
                "param_13": "param1",
                "param_14": "param2",
                "in_AL": "condition",
                "iVar1": "bfdError",
                "uVar2": "errorMessageText",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "stackPointer",
                "local_f0": "localBuffer",
                "local_e8": "localArray",
                "local_c8": "param3",
                "local_c0": "param4",
                "local_b8": "param5",
                "local_a8": "param6",
                "local_98": "param7",
                "local_88": "param8",
                "local_78": "param9",
                "local_68": "param10",
                "local_58": "param11",
                "local_48": "param12"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 error1,undefined4 error2,undefined4 error3,undefined4 error4,\n                 undefined4 error5,undefined4 error6,undefined4 error7,undefined4 error8,\n                 long errorMessage,long errorCode,long *ptrErrorCode,char *formatString,undefined8 param1,\n                 undefined8 param2)\n\n{\n  char condition;\n  int bfdError;\n  undefined8 errorMessageText;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *stackPointer;\n  undefined *localBuffer;\n  undefined localArray [32];\n  undefined8 param3;\n  undefined8 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  undefined4 param9;\n  undefined4 param10;\n  undefined4 param11;\n  undefined4 param12;\n  \n  if (condition != '\\0') {\n    param5 = error1;\n    param6 = error2;\n    param7 = error3;\n    param8 = error4;\n    param9 = error5;\n    param10 = error6;\n    param11 = error7;\n    param12 = error8;\n  }\n  param3 = param1;\n  param4 = param2;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (errorCode != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(errorCode);\n    }\n    if ((ptrErrorCode != (long *)0x0) && (*ptrErrorCode != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    stackPointer = &stack0x00000008;\n    localBuffer = localArray;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessageText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "fputs",
                "fwrite",
                "fflush",
                "FUN_001125fa",
                "vfprintf",
                "fprintf",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_0010551d",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00108466"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_object_00113b4a",
                "param_1": "inputValue",
                "lVar1": "objectPointer"
            },
            "code": "\nlong initializeObject_00113b4a(long inputValue)\n\n{\n  long objectPointer;\n  \n  if (inputValue != 0) {\n    objectPointer = FUN_00112904(0x15,0);\n    if (objectPointer == 0) {\n      objectPointer = 0;\n    }\n    else {\n      *(long *)(objectPointer + 0x10) = inputValue;\n    }\n    return objectPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_object_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_properties_0010edb4",
                "param_1": "fileProperties",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "maxFileSize",
                "cVar1": "result",
                "iVar2": "compareResult",
                "uVar3": "returnVal",
                "in_R10": "additionalParam"
            },
            "code": "\nundefined8 updateFileProperties_0010edb4(long fileProperties,undefined8 filename,undefined4 flag,ulong maxFileSize)\n\n{\n  char result;\n  int compareResult;\n  undefined8 returnVal;\n  undefined8 additionalParam;\n  \n  if (*(long *)(fileProperties + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileProperties + 0x1f0) < maxFileSize) {\n    *(ulong *)(fileProperties + 0x1f0) = maxFileSize;\n  }\n  compareResult = filename_cmp(filename);\n  if (compareResult != 0) {\n    result = FUN_0010e2f0(fileProperties,0x84,0,maxFileSize,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileProperties + 0x210) = filename;\n  }\n  returnVal = FUN_0010e2f0(fileProperties,0x44,flag,maxFileSize - *(long *)(fileProperties + 0x200),0,additionalParam);\n  return returnVal;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_properties_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010914e",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_00108fe8",
                "FUN_00119e70",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00112996",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bf20",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "maxIterations",
                "cVar1": "charVar",
                "__ptr": "ptr",
                "__s": "str",
                "sVar2": "strLength",
                "__s_00": "newStr",
                "in_R10": "register_R10",
                "iVar3": "iterationCount",
                "auVar4": "returnVal"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPointer,int maxIterations)\n\n{\n  char charVar;\n  void *ptr;\n  char *str;\n  size_t strLength;\n  char *newStr;\n  ulong register_R10;\n  int iterationCount;\n  undefined returnVal [16];\n  \n  iterationCount = 0;\n  do {\n    if (maxIterations <= iterationCount) {\n      returnVal = FUN_00109ed3(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,register_R10);\n      return returnVal;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)FUN_00109b2f(dataPointer);\n      free(ptr);\n    }\n    else {\n      str = (char *)FUN_00109b2f(dataPointer);\n      strLength = strlen(str);\n      newStr = (char *)xmalloc(strLength + 3);\n      sprintf(newStr,\":t%s\",str);\n      free(str);\n      charVar = FUN_0010e2f0(dataPointer,0x80,0,0,newStr);\n      if (charVar == '\\0') {\n        returnVal._8_8_ = 0;\n        returnVal._0_8_ = register_R10;\n        return returnVal << 0x40;\n      }\n      free(newStr);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_application_00104d25",
                "param_7": "callbackParameter"
            },
            "code": "\nvoid initializeApplication_00104d25(void)\n\n{\n  undefined8 callbackParameter;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0,callbackParameter,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_application_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_debugging_info_0010551d",
                "puVar1": "ptr",
                "bVar2": "byteValue",
                "puVar3": "ptr2",
                "pcVar4": "codePtr",
                "puVar5": "ptr3",
                "uVar6": "ulongValue",
                "uVar7": "ulongValue2",
                "__s": "ptr4",
                "cVar8": "charValue",
                "cVar9": "charValue2",
                "uVar10": "uintValue",
                "iVar11": "intValue",
                "uVar12": "uintValue2",
                "uVar13": "uintValue3",
                "iVar14": "intValue2",
                "plVar15": "ptr5",
                "uVar16": "ulongValue3",
                "uVar17": "ulongValue4",
                "sVar18": "sizeValue",
                "pcVar19": "ptr6",
                "pcVar28": "ptr7",
                "puVar29": "ptr8",
                "uVar20": "ulongValue5",
                "lVar21": "longValue",
                "uVar22": "ulongValue6",
                "lVar25": "longValue2",
                "uVar24": "ulongValue7",
                "lVar27": "longValue3",
                "unaff_RBX": "ptr9",
                "in_stack_00000008": "param1",
                "in_stack_00000010": "param2",
                "in_stack_00000140": "param3",
                "in_stack_00000150": "param4",
                "bVar38": "boolValue",
                "bVar39": "byteValue2",
                "sVar26": "sizeValue2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractDebuggingInfo_0010551d(void)\n\n{\n  uint *ptr;\n  byte byteValue;\n  undefined *ptr2;\n  code *codePtr;\n  undefined8 *ptr3;\n  ulong ulongValue;\n  ulong ulongValue2;\n  char *ptr4;\n  char charValue;\n  char charValue2;\n  uint uintValue;\n  int intValue;\n  uint uintValue2;\n  undefined4 uintValue3;\n  int intValue2;\n  long *ptr5;\n  undefined8 ulongValue3;\n  undefined8 ulongValue4;\n  size_t sizeValue;\n  char *ptr6;\n  void *__ptr;\n  void *__ptr_00;\n  ulong ulongValue5;\n  long longValue;\n  ulong ulongValue6;\n  int *piVar23;\n  ulong ulongValue7;\n  long longValue2;\n  FILE *ptr4_00;\n  size_t sizeValue2;\n  long longValue3;\n  long *ptr9;\n  char *ptr7;\n  undefined8 *ptr8;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *ptr24;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pptr27;\n  bool boolValue;\n  byte byteValue2;\n  long param1;\n  ulong param2;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param3;\n  char cStack0000000000000148;\n  char *param4;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteValue2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(ptr9);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  ptr8 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charValue2 = FUN_00113fb0(), charValue2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (longValue2 = *(long *)(unaff_RBP + 0x40), longValue2 == 0))))\n    goto LAB_001151a2;\n    ptr9 = (long *)xmalloc(0x20);\n    ptr9[1] = 0;\n    charValue2 = bfd_get_full_section_contents();\n    if (charValue2 != '\\0') {\n      longValue3 = FUN_001163d0();\n      ptr9[2] = longValue3;\n      if ((longValue3 == longValue2) || (charValue2 = bfd_set_section_size(), charValue2 != '\\0')) {\n        ptr9[3] = (long)unaff_R13;\n        *ptr9 = unaff_RBP;\n        unaff_R13 = ptr9;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param1,unaff_RBP);\n        free((void *)ptr9[1]);\n        free(ptr9);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longValue2 = *(long *)(unaff_RBP + 8); longValue2 != 0; longValue2 = *(long *)(longValue2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; ptr8 != (undefined8 *)0x0; ptr8 = (undefined8 *)*ptr8) {\n    longValue2 = bfd_get_section_by_name();\n    if (longValue2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(longValue2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sizeValue = *(size_t *)(longValue2 + 0x40);\n      ptr4_00 = fopen((char *)ptr8[2],\"w\");\n      if (ptr4_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(ptr8[2],0,0);\n      }\n      else {\n        charValue2 = bfd_malloc_and_get_section();\n        if (charValue2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sizeValue != 0) &&\n                (sizeValue2 = fwrite(param3,1,sizeValue,ptr4_00), sizeValue2 != sizeValue)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          ulongValue4 = ptr8[2];\n          ulongValue3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(ulongValue3,ulongValue4,pcVar33);\n          free(param3);\n          fclose(ptr4_00);\n          return 0;\n        }\n        fclose(ptr4_00);\n        free(param3);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longValue2 = bfd_get_section_by_name(param1,\".gnu_debuglink\");\n    if (longValue2 != 0) {\n      ulongValue4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(ulongValue4);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param1);\n    longValue2 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      ulongValue4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param1,0,ulongValue4,longValue2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param1 + 8) + 8) == 2) {\n      ulongValue5 = 0;\n      for (ulongValue7 = *(ulong *)(param1 + 0x90); ulongValue7 != 0;\n          ulongValue7 = *(ulong *)(ulongValue7 + 8)) {\n        ulongValue6 = *(ulong *)(ulongValue7 + 0x30);\n        uVar30 = ulongValue5;\n        ulongValue = ulongValue7;\n        ulongValue2 = ulongValue5;\n        if (ulongValue6 != 0) {\n          while ((uVar30 = ulongValue, ulongValue2 != 0 &&\n                 (uVar30 = ulongValue7, ulongValue6 <= *(ulong *)(ulongValue5 + 0x30)))) {\n            ulongValue7 = *(ulong *)(ulongValue7 + 8);\n            if (ulongValue7 == 0) goto LAB_00107db8;\n            ulongValue6 = *(ulong *)(ulongValue7 + 0x30);\n            ulongValue = ulongValue5;\n            ulongValue2 = ulongValue6;\n          }\n        }\n        ulongValue5 = uVar30;\n      }\nLAB_00107db8:\n      if (ulongValue5 == 0) {\n        ulongValue7 = 0x1000;\n      }\n      else {\n        ulongValue5 = *(long *)(ulongValue5 + 0x40) + *(long *)(ulongValue5 + 0x30);\n        ulongValue7 = 0xffffffffffffffff;\n        if (ulongValue5 < 0xfffffffffffff001) {\n          ulongValue7 = ulongValue5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = ulongValue7;\n      *(ulong *)(lStack0000000000000078 + 0x38) = ulongValue7;\n    }\n  }\n  plVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param1 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    ulongValue7 = FUN_0010554f();\n    return ulongValue7;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pptr27 = &PTR_sptr4tab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptr24 = puStack0000000000000020;\n    for (longValue2 = 0x18; longValue2 != 0; longValue2 = longValue2 + -1) {\n      *ptr24 = 0;\n      ptr24 = ptr24 + (ulong)byteValue2 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptr2 = *pptr27;\n      longValue2 = bfd_get_section_by_name();\n      longValue3 = bfd_get_section_by_name();\n      if ((longValue2 != 0) && (longValue3 != 0)) {\n        longValue2 = *(long *)(longValue2 + 0x40);\n        __ptr = (void *)xmalloc(longValue2);\n        charValue2 = bfd_get_section_contents();\n        if (charValue2 == '\\0') {\n          uintValue3 = bfd_get_error();\n          bfd_errmsg(uintValue3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          ulongValue7 = *(ulong *)(longValue3 + 0x40);\n          __ptr_00 = (void *)xmalloc(ulongValue7 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintValue3 = bfd_get_error();\n            bfd_errmsg(uintValue3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + ulongValue7) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + longValue2 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                ulongValue5 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteValue = *(byte *)((long)pvVar36 + 4);\n                uintValue3 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                longValue3 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteValue == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longValue3;\n                }\n                else {\n                  ulongValue6 = (ulongValue5 & 0xffffffff) + lStack0000000000000088;\n                  if (ulongValue6 < ulongValue7) {\n                    pcVar33 = (char *)((long)__ptr_00 + ulongValue6);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeValue = strlen(pcVar33);\n                      if (((sizeValue == 0) || (ptr7 = pcVar33 + (sizeValue - 1), *ptr7 != '\\')) ||\n                         ((ulong)((long)__ptr + longValue2) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *ptr7 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intValue = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      ulongValue5 = (ulong)(uint)(intValue + (int)lStack0000000000000088);\n                      if (ulongValue7 <= ulongValue5) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + ulongValue5,0);\n                      *ptr7 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    ulongValue4 = *unaff_R14;\n                    ptr7 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,ptr7,ulongValue4,ptr2,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteValue,uintValue3,longValue3,pcVar33);\n                    charValue2 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteValue);\n                    if (charValue2 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongValue4 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,ulongValue4,ptr2,((long)pvVar36 - (long)__ptr) / 0xc,\n                            ulongValue5 & 0xffffffff,(ulong)byteValue,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pptr27 = pptr27 + 2;\n    } while (pptr27 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charValue2 = FUN_0010c892(), charValue2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      longValue2 = 0;\n      for (ptr5 = plVar32; ptr5 < plVar32 + param2; ptr5 = ptr5 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longValue2 != 0) || (longValue2 = FUN_00112894(), longValue2 != 0)) &&\n             ((param4 != (char *)0x0 && (*param4 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            ptr7 = param4;\n            while (((*ptr7 != '\\0' && (sizeValue = strlen(ptr7), ptr7[sizeValue - 1] == '\\')) &&\n                   (ptr5 + 1 < plVar32 + param2))) {\n              ptr6 = (char *)xstrdup(ptr7);\n              sizeValue = strlen(ptr6);\n              ptr6[sizeValue - 1] = '\\0';\n              ptr7 = (char *)concat(ptr6,*(undefined8 *)(ptr5[1] + 8),0);\n              free(ptr6);\n              free(pcVar33);\n              ptr5 = ptr5 + 1;\n              pcVar33 = ptr7;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param3,\n                         ptr7);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,longValue2,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((longValue2 != 0) && (charValue2 = FUN_0010c892(), charValue2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (param2 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      param3 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = param2;\n      in_stack_000000d8 = 0;\n      ptr8 = (undefined8 *)&stack0x00000148;\n      for (longValue2 = 0x22; longValue2 != 0; longValue2 = longValue2 + -1) {\n        *(undefined4 *)ptr8 = 0;\n        ptr8 = (undefined8 *)((long)ptr8 + (ulong)byteValue2 * -8 + 4);\n      }\n      charValue2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)param2 <= in_stack_000000d0) break;\n        longValue2 = plVar32[in_stack_000000d0];\n        charValue = bfd_coff_get_syment();\n        longValue3 = in_stack_000000d8;\n        if (charValue == '\\0') {\n          uintValue3 = bfd_get_error();\n          bfd_errmsg(uintValue3);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongValue4 = dcgettext(0,pcVar33,5);\n          FUN_00119ed0(ulongValue4);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(longValue2 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charValue = bfd_coff_get_auxent(), charValue == '\\0')) {\n          uintValue3 = bfd_get_error();\n          bfd_errmsg(uintValue3);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longValue3) {\n          if (bStack0000000000000100 != 0x67) {\n            charValue = FUN_0010bbd3(puStack0000000000000020);\n            if (charValue == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charValue = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intValue = strcmp(pcVar33,\".bb\");\n              if (intValue == 0) {\n                charValue = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intValue = strcmp(pcVar33,\".eb\");\n              if (intValue == 0) {\n                charValue = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intValue = strcmp(pcVar33,\".bf\");\n              if (intValue == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longValue3 = FUN_0010dac0();\n                  if ((longValue3 == 0) ||\n                     (charValue2 = FUN_0010bc80(puStack0000000000000020), charValue2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intValue = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intValue = in_stack_00000118 - 1;\n                    }\n                    longValue2 = *(long *)(*(long *)(longValue2 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      charValue = FUN_0010bf86(puStack0000000000000020,intValue + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + longValue2);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charValue == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intValue = strcmp(pcVar33,\".ef\");\n                if (intValue != 0) goto switchD_00106e1a_caseD_68;\n                if (charValue2 != '\\0') {\n                  charValue2 = FUN_0010be1a(puStack0000000000000020);\n                  if (charValue2 == '\\0') goto LAB_00105981;\n                  charValue2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongValue4 = dcgettext(0,pcVar33,5);\n              FUN_00119ed0(ulongValue4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longValue = FUN_0010dac0();\n          if (longValue == 0) goto LAB_00105981;\n          charValue = FUN_00112a33(&stack0x00000140,longValue2,longValue3);\n        }\njoined_r0x00107247:\n        if (charValue == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(param1 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(param1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param1 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param2 != 0) {\n        plVar32 = DAT_001278b0 + param2;\n        ptr5 = DAT_001278b0;\n        do {\n          uintValue = *(uint *)(*ptr5 + 0x18);\n          if ((uintValue & 0x1000000) != 0) {\n            *(uint *)(*ptr5 + 0x18) = uintValue & 0xfeffffff;\n          }\n          ptr5 = ptr5 + 1;\n        } while (plVar32 != ptr5);\n      }\n    }\n    else {\n      for (longValue2 = *(long *)(param1 + 0x90); longValue2 != 0; longValue2 = *(long *)(longValue2 + 8)\n          ) {\n        if (*(long *)(longValue2 + 0xe8) != 0) {\n          ptr = (uint *)(*(long *)(longValue2 + 0xe8) + 0x18);\n          *ptr = *ptr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intValue = bfd_get_error();\n      if (intValue != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    longValue2 = xmalloc();\n    plVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278a8 = longValue2;\n    if (param2 == 0) {\n      ulongValue7 = 0;\n    }\n    else {\n      ulongValue7 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intValue = DAT_001279a0;\n        ptr5 = (long *)plVar32[_in_stack_00000018];\n        codePtr = (code *)ptr5[4];\n        uintValue = *(uint *)(ptr5 + 3);\n        pcVar33 = (char *)ptr5[1];\n        ptr7 = pcVar33;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          ptr8 = DAT_001279a8;\n          while( true ) {\n            if ((intValue <= iVar31) || (ptr6 = (char *)ptr8[5], ptr6 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (ptr6 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intValue2 = strcmp(ptr6,pcVar33);\n          if (intValue2 != 0) {\n            ptr8 = (undefined8 *)*ptr8;\n            goto LAB_0010750b;\n          }\n          free(ptr6);\n          ulongValue5 = ulongValue7 + 1;\n          ptr8[5] = \"\";\n          ulongValue3 = FUN_0011a2e0(ptr8);\n          ulongValue4 = DAT_001278d0;\n          *(undefined8 *)(longValue2 + ulongValue7 * 8) = ulongValue3;\n          longValue3 = htab_elements(ulongValue4);\n          if ((longValue3 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charValue2 = *pcVar33;\n          if (charValue2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param1 + 8) + 0x1c) != '\\0')\n             ) {\n            longValue3 = unaff_R14[1];\n            charValue2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longValue3 = htab_elements(DAT_001278d0);\n        ulongValue5 = ulongValue7;\n        if ((longValue3 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intValue = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intValue == 0)) {\n            ulongValue4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(ulongValue4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        param3 = pcVar33;\n        longValue3 = htab_find(DAT_001278d0);\n        if (((longValue3 == 0) || (ptr7 = *(char **)(longValue3 + 8), pcVar33 == ptr7)) &&\n           (ptr7 = pcVar33, ppcVar35 = DAT_001278d8, (uintValue & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intValue = strcmp(*ppcVar35,pcVar33);\n            if (intValue == 0) {\n              ptr7 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        ptr5[1] = (long)ptr7;\n        charValue2 = *ptr7;\n        if (charValue2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127908;\n        longValue3 = unaff_R14[1];\n        if (*(char *)(longValue3 + 0x1c) == charValue2) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uintValue & 0x82) == 0 && (codePtr != bfd_map_over_sections)) &&\n                ((*(byte *)(ptr5[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            ptr7 = ptr7 + 1;\n            ptr5[1] = (long)ptr7;\n            goto joined_r0x00106565;\n          }\n          charValue2 = *(char *)(*(long *)(param1 + 8) + 0x1c);\n          if (charValue2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            ptr7 = ptr7 + 1;\n            ptr5[1] = (long)ptr7;\n            sizeValue = strlen(ptr7);\n            longValue3 = sizeValue + 2;\n            goto LAB_001066bc;\n          }\n          *ptr7 = charValue2;\n          ptr5[1] = (long)ptr7;\n          ulongValue7 = ulongValue5;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param1 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulongValue7 = ulongValue5;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sizeValue = strlen(ptr7);\n            sizeValue2 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sizeValue2 + sizeValue + 1);\n            ptr6 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127908;\n            if ((*(char *)(longValue3 + 0x1c) != '\\0') && (charValue2 != *(char *)(longValue3 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeValue = strlen(ptr7);\n            longValue3 = sizeValue + 2;\n            if (pcVar33 == (char *)0x0) {\n              ptr6 = (char *)xmalloc(longValue3);\n            }\n            else {\nLAB_001066bc:\n              sizeValue = strlen(pcVar33);\n              ptr6 = (char *)xmalloc(sizeValue + longValue3);\n            }\n            pcVar33 = ptr6 + 1;\n            *ptr6 = *(char *)(*(long *)(param1 + 8) + 0x1c);\n          }\n          ptr4 = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127908);\n            sizeValue = strlen(ptr4);\n            pcVar33 = pcVar33 + sizeValue;\n          }\n          strcpy(pcVar33,ptr7);\n          ptr5[1] = (long)ptr6;\n          ptr7 = ptr6;\n          ulongValue7 = ulongValue5;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uintValue & 0x20) == 0) &&\n           (((uintValue & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(ptr5[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintValue & 0x82) != 0 || ((*(byte *)(ptr5[4] + 0x25) & 0x10) != 0)))) ||\n             (intValue = bfd_decode_symclass(ptr5), intValue == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              longValue3 = htab_find();\n              if (longValue3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param3 = ptr7;\n              htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintValue & 0x82) == 0) && (codePtr != bfd_map_over_sections)) &&\n                  ((*(byte *)(ptr5[4] + 0x25) & 0x10) == 0)) {\n            if ((uintValue & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (longValue3 = *(long *)(ptr5[4] + 0xd0), longValue3 == 0)) ||\n                 (*(long *)(longValue3 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charValue2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charValue2 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charValue2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          longValue3 = htab_find();\n          if (longValue3 != 0) {\nLAB_0010687f:\n            ulongValue4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(ulongValue4);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          param3 = ptr7;\n          htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintValue & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param3 = ptr7;\n            htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longValue3 = htab_find();\n          if (longValue3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uintValue & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            longValue3 = htab_find();\n            if (longValue3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param3 = ptr7;\n            htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charValue2 = FUN_001159d0(ptr5[4]);\n          if (charValue2 == '\\0') {\n            if (((uintValue & 0x800002) == 0) && (codePtr != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintValue & 0x82) != 0) {\n                charValue2 = FUN_00115d70(ptr7);\n                if ((charValue2 == '\\0') &&\n                   ((longValue3 = htab_elements(DAT_001279d8), longValue3 == 0 ||\n                    (charValue2 = FUN_00115d70(ptr7), charValue2 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uintValue2 = *(uint *)(ptr5 + 3), (uintValue2 & 0x200000) != 0)) ||\n                       (longValue3 = *ptr5, longValue3 == 0)) ||\n                      ((*(int *)(*(long *)(longValue3 + 8) + 8) != 5 || (*(long *)(longValue3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)ptr5 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintValue2 = *(uint *)(ptr5 + 3);\n                }\n                *(uint *)(ptr5 + 3) = uintValue2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintValue & 1) != 0) && (charValue2 = FUN_00115d70(ptr7), charValue2 != '\\0')) {\n                *(uint *)(ptr5 + 3) = *(uint *)(ptr5 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charValue2 = FUN_00115d70(ptr7), charValue2 != '\\0')) {\n                *(uint *)(ptr5 + 3) = *(uint *)(ptr5 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (codePtr != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longValue2 + ulongValue7 * 8) = ptr5;\n            ulongValue7 = ulongValue7 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (param2 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      ptr8 = DAT_001279a8;\n      intValue = DAT_001279a0;\n      for (longValue3 = 0; longValue3 < intValue; longValue3 = longValue3 + 1) {\n        pcVar33 = (char *)ptr8[5];\n        if (pcVar33 == (char *)0x0) {\n          longValue = ulongValue7 * 8;\n          ulongValue7 = ulongValue7 + 1;\n          ulongValue4 = FUN_0011a2e0(ptr8,param1);\n          *(undefined8 *)(longValue2 + longValue) = ulongValue4;\n          intValue = DAT_001279a0;\n        }\n        else if (pcVar33 != \"\") {\n          ulongValue4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(ulongValue4,pcVar33);\n        }\n        ptr8 = (undefined8 *)*ptr8;\n      }\n    }\n    boolValue = DAT_00127980 != '\\0';\n    *(undefined8 *)(longValue2 + ulongValue7 * 8) = 0;\n    if ((boolValue) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intValue = *(int *)(*(undefined8 **)(param1 + 8) + 1);\n      if ((intValue != 5) && (intValue != 2)) {\n        ulongValue4 = **(undefined8 **)(param1 + 8);\n        ulongValue3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param1,0,ulongValue3,ulongValue4);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charValue2 = FUN_0011378f(param1,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charValue2 == '\\0') goto LAB_00105d8c;\n      longValue2 = bfd_make_section_with_flags(param1,\".stab\",0x2108);\n      longValue3 = bfd_make_section_with_flags(param1,\".stabstr\",0x2108);\n      if ((((longValue2 == 0) || (longValue3 == 0)) ||\n          (charValue2 = bfd_set_section_size(longValue2,in_stack_00000110), charValue2 == '\\0')) ||\n         (charValue2 = bfd_set_section_size(longValue3,param3), charValue2 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongValue4 = dcgettext(0,pcVar33,5);\n        FUN_001126c0(0,param1,0,ulongValue4);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(longValue2 + 0x7c) = 2;\n      *(undefined4 *)(longValue3 + 0x7c) = 0;\n      charValue2 = bfd_set_section_contents\n                        (param1,longValue2,in_stack_000000c0,0,in_stack_00000110);\n      if ((charValue2 == '\\0') ||\n         (charValue2 = bfd_set_section_contents\n                            (param1,longValue3,in_stack_000000e0,0,param3),\n         charValue2 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    param2 = ulongValue7 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    longValue2 = htab_elements(DAT_001279f8);\n    if (((longValue2 != 0) ||\n        (((((((longValue2 = htab_elements(DAT_00127a08), longValue2 != 0 ||\n              (longValue2 = htab_elements(DAT_001279e8), longValue2 != 0)) ||\n             (longValue2 = htab_elements(DAT_001279e0), longValue2 != 0)) ||\n            ((longValue2 = htab_elements(DAT_001279d8), longValue2 != 0 ||\n             (longValue2 = htab_elements(DAT_001279d0), longValue2 != 0)))) ||\n           (longValue2 = htab_elements(DAT_001278d0), longValue2 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(param1,DAT_001278a8,param2 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,param1);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,param1);\n  for (ptr8 = DAT_001279c0; ptr3 = DAT_001279b8, ptr8 != (undefined8 *)0x0;\n      ptr8 = (undefined8 *)*ptr8) {\n    charValue2 = bfd_set_section_contents(param1,ptr8[5],ptr8[4],0,ptr8[3]);\n    if (charValue2 == '\\0') {\n      FUN_001126c0(0,param1,ptr8[5],0);\n      return 0;\n    }\n  }\n  for (; ptr3 != (undefined8 *)0x0; ptr3 = (undefined8 *)*ptr3) {\n    ulongValue4 = *(undefined8 *)(ptr3[5] + 0x60);\n    charValue2 = bfd_set_section_contents(param1,ulongValue4,ptr3[4],0,ptr3[3]);\n    if (charValue2 == '\\0') {\n      FUN_001126c0(0,param1,ulongValue4,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulongValue4 = *unaff_R14;\n      ulongValue3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(ulongValue3,ulongValue4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charValue2 = bfd_fill_in_gnu_debuglink_section(param1,lStack0000000000000078),\n       longValue2 = DAT_00127a10, charValue2 != '\\0')) {\n      uintValue = (**(code **)(*(long *)(param1 + 8) + 0x140))(unaff_R14);\n      ulongValue7 = (ulong)uintValue;\n      if ((char)uintValue != '\\0') {\n        if (DAT_00127910 == 0) {\n          return ulongValue7;\n        }\n        charValue2 = bfd_alt_mach_code(param1,DAT_00127910 & 0xffffffff);\n        ulongValue5 = DAT_00127910;\n        if (charValue2 != '\\0') {\n          return ulongValue7;\n        }\n        ulongValue4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(ulongValue4,ulongValue5);\n        if (*(int *)(*(long *)(param1 + 8) + 8) != 5) {\n          ulongValue4 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(ulongValue4);\n          return ulongValue7;\n        }\n        ulongValue4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(ulongValue4);\n        *(short *)(*(long *)(param1 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return ulongValue7;\n      }\n      ulongValue4 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param1,0,ulongValue4);\n    }\n    else {\n      ulongValue4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param1,0,ulongValue4,longValue2);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  ptr8 = *(undefined8 **)(param1 + 0x90);\n  do {\n    if (ptr8 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param1 + 8) + 8) == 5)) &&\n        (*(int *)(ptr8[0x1a] + 4) == 7)) &&\n       (charValue2 = FUN_00113fb0(*ptr8,\".gnu.build.attributes\"), charValue2 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      ptr5 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == ptr8) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charValue2 = bfd_set_section_contents(param1,ptr8,plVar32[1],0,plVar32[2]);\n          if (charValue2 == '\\0') {\n            ulongValue4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,param1,ptr8,ulongValue4);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = ptr5;\n          if (*(undefined8 **)(*ptr5 + 0x60) == ptr8) goto LAB_0010625f;\n          plVar32 = (long *)ptr5[3];\n          ptr5 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      ulongValue4 = dcgettext(0,pcVar33,5);\n      FUN_001126c0(0,param1,ptr8,ulongValue4);\n    }\nLAB_001061be:\n    ptr8 = (undefined8 *)ptr8[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_debugging_info_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "param"
            },
            "code": "\nvoid hashString_00108800(undefined8 *param)\n\n{\n  htab_hash_string(*param);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_memory_0010c1c6",
                "param_1": "function_ptr",
                "param_2": "struct_ptr",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "next_ptr",
                "cVar2": "result",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined deallocate_memory_0010c1c6(undefined8 function_ptr,long struct_ptr,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *next_ptr;\n  char result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(struct_ptr + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(struct_ptr + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(function_ptr,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "deallocate_memory_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "dataPointer",
                "uVar1": "numElements",
                "lVar2": "tempVar",
                "cVar3": "resultChar",
                "unaff_RBP": "savedFramePointer",
                "puVar4": "outputPointer",
                "puVar5": "currentOutputPointer",
                "uVar6": "loopIndex",
                "unaff_R13": "inputPointer"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint numElements;\n  long tempVar;\n  char resultChar;\n  long dataPointer;\n  undefined8 *outputPointer;\n  undefined8 *currentOutputPointer;\n  long savedFramePointer;\n  ulong loopIndex;\n  undefined8 *inputPointer;\n  \n  numElements = *(uint *)(dataPointer + 0x78);\n  if (DAT_00127a2c == 7) {\n    outputPointer = inputPointer;\n    for (loopIndex = 0; loopIndex != numElements; loopIndex = loopIndex + 1) {\n      currentOutputPointer = outputPointer;\n      if (((*(long **)inputPointer[loopIndex] != (long *)0x0) &&\n          (tempVar = **(long **)inputPointer[loopIndex], tempVar != 0)) &&\n         (resultChar = FUN_00115d70(*(undefined8 *)(tempVar + 8),DAT_00127a08), resultChar != '\\0')) {\n        currentOutputPointer = outputPointer + 1;\n        *outputPointer = inputPointer[loopIndex];\n      }\n      outputPointer = currentOutputPointer;\n    }\n    *outputPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(savedFramePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_content_00114d60",
                "param_1": "fileInfo",
                "iVar1": "endOfFile",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "__stream": "file",
                "uVar4": "errorString",
                "uVar5": "heapMemory",
                "sVar6": "bytesRead",
                "lVar7": "currentSize",
                "lVar8": "maxSize"
            },
            "code": "\nvoid readFileAndStoreContent_00114d60(long fileInfo)\n\n{\n  int endOfFile;\n  int *error;\n  char *errorMessage;\n  undefined8 errorString;\n  FILE *file;\n  undefined8 heapMemory;\n  size_t bytesRead;\n  long currentSize;\n  long maxSize;\n  \n  file = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (file == (FILE *)0x0) {\n    error = __errno_location();\n    errorMessage = strerror(*error);\n    heapMemory = *(undefined8 *)(fileInfo + 0x10);\n    errorString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(errorString,heapMemory,errorMessage);\n  }\n  maxSize = 0x1000;\n  currentSize = 0;\n  heapMemory = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = heapMemory;\n  while( true ) {\n    endOfFile = feof(file);\n    if (endOfFile != 0) {\n      *(long *)(fileInfo + 0x18) = currentSize;\n      fclose(file);\n      return;\n    }\n    if (currentSize == maxSize) {\n      maxSize = currentSize * 2;\n      heapMemory = xrealloc(*(undefined8 *)(fileInfo + 0x20),maxSize);\n      *(undefined8 *)(fileInfo + 0x20) = heapMemory;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + currentSize),1,maxSize - currentSize,file);\n    endOfFile = ferror(file);\n    if (endOfFile != 0) break;\n    currentSize = currentSize + bytesRead;\n  }\n  heapMemory = *(undefined8 *)(fileInfo + 0x10);\n  errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(errorString,heapMemory);\n}\n\n",
            "called": [
                "fopen",
                "FUN_0010543c",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_store_content_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_section_and_print_message_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findSectionAndPrintMessage_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionAddress = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_section_and_print_message_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_and_process_lines_00104d1c",
                "unaff_EBP": "line_count",
                "unaff_R13": "file_handle",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "uVar1": "error_message",
                "ppbVar2": "hash_table_slot",
                "pbVar3": "junk_ptr",
                "bVar4": "current_char_value",
                "pbVar5": "next_char_ptr",
                "pbVar6": "current_char_ptr",
                "pbVar7": "next_line_char_ptr"
            },
            "code": "\nvoid parse_and_process_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot;\n  byte *junk_ptr;\n  byte current_char_value;\n  byte *next_char_ptr;\n  int line_count;\n  byte *current_char_ptr;\n  undefined8 file_handle;\n  byte *next_line_char_ptr;\n  byte *current_line;\n  byte *current_char;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char_value = *current_line;\n    next_line_char_ptr = current_line;\n    if (current_char_value == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_line_char_ptr = current_line + 1;\n        next_char_ptr = current_line + 2;\n      }\n      else {\n        next_char_ptr = current_line + 1;\n      }\n    }\n    else if ((char)current_char_value < '\\v') {\n      if (current_char_value != 0) goto LAB_00114520;\n      next_char_ptr = current_line + 1;\n    }\n    else {\n      if (current_char_value != 0xd) break;\n      *current_line = 0;\n      next_char_ptr = current_line + 1;\n      if (current_line[1] == 10) {\n        next_char_ptr = current_line + 2;\n        next_line_char_ptr = current_line + 1;\n      }\n    }\n    current_char_value = *current_char;\n    while ((current_char_value == 0x20 || (current_char_ptr = current_char, current_char_value == 9))) {\n      current_char_ptr = current_char + 1;\n      current_char = current_char + 1;\n      current_char_value = *current_char_ptr;\n    }\n    do {\n      if ((current_char_value == 10) || (current_char_value == 0xd)) goto LAB_00114676;\n      if (current_char_value == 0) goto LAB_00114599;\n      current_char_value = current_char_ptr[1];\n      current_char_ptr = current_char_ptr + 1;\n    } while ((current_char_value != 0x20) && (current_char_value != 9));\n    if ((char)current_char_value < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char_value & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char_value = current_char_ptr[1];\n      if ((((((current_char_value == 9) || (current_char_value == 0x20)) &&\n            ((current_char_value = current_char_ptr[2], current_char_value == 9 || (current_char_value == 0x20)))) &&\n           ((current_char_value = current_char_ptr[3], current_char_value == 9 || (current_char_value == 0x20)))) &&\n          ((current_char_value = current_char_ptr[4], current_char_value == 9 || (current_char_value == 0x20)))) &&\n         ((current_char_value = current_char_ptr[5], current_char_value == 9 || (current_char_value == 0x20)))) {\n        current_char_value = current_char_ptr[6];\n        junk_ptr = current_char_ptr + 6;\n        if ((current_char_value == 9) || (current_char_value == 0x20)) {\n          do {\n            do {\n              current_char_value = junk_ptr[1];\n              junk_ptr = junk_ptr + 1;\n            } while (current_char_value == 0x20);\n          } while (current_char_value == 9);\n        }\n      }\n      if ((0xd < current_char_value) || ((-0x2402L >> (current_char_value & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(error_message,format_string,line_count);\n      }\n    }\nLAB_00114599:\n    *current_char_ptr = 0;\n    if (current_char < current_char_ptr) {\n      hash_table_slot = (byte **)htab_find_slot();\n      *hash_table_slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_char_ptr;\n    current_char = next_char_ptr;\n    if (next_line_char_ptr[1] == 0) {\n      *return_address = file_handle;\n      return;\n    }\n  } while( true );\n  if (current_char_value == 0x23) {\n    parse_and_process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_print_number_00119940",
                "param_1": "memory_address",
                "param_2": "error_message",
                "uVar1": "localized_error_message",
                "local_20": "scanned_vma"
            },
            "code": "\nvoid validate_and_print_number_00119940(undefined8 memory_address,undefined8 error_message)\n\n{\n  undefined8 localized_error_message;\n  char *scanned_vma [2];\n  \n  bfd_scan_vma(memory_address,scanned_vma,0);\n  if (*scanned_vma[0] == '\\0') {\n    return;\n  }\n  localized_error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(localized_error_message,error_message,memory_address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_and_print_number_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "inputRAX"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long inputRAX;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(inputRAX + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_data_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "param4",
                "param_5": "param5",
                "cVar1": "result",
                "uVar2": "output",
                "puVar3": "ptr",
                "auVar4": "resultArray"
            },
            "code": "\nundefined8\nprocessData_00113a4d(undefined8 input1,undefined8 input2,long data,undefined8 param4,\n            undefined8 param5)\n\n{\n  char result;\n  undefined8 output;\n  undefined8 *ptr;\n  undefined resultArray [16];\n  \n  result = FUN_00112502(input1,input2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = FUN_0010ec73(input2,*(undefined8 *)(data + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(input1,input2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = processData_00113a4d(input1,input2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    resultArray = FUN_00112502(input1,input2,*(undefined8 *)(data + 0x20));\n    if (resultArray[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return resultArray._0_8_;\n      }\n      output = FUN_0010ed2c(input2,*(undefined8 *)(data + 0x20),resultArray._8_8_,param5);\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_001135a5",
                "FUN_0010ed2c",
                "FUN_00113a4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnVal",
                "unaff_RBX": "memoryBlock",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnVal;\n  void *memoryBlock;\n  undefined8 returnValue;\n  \n  returnValue = returnVal;\n  free(memoryBlock);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010922b",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_001135a5",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a94e",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_structure_00113b71",
                "param_1": "inputValue",
                "lVar1": "dataStructurePointer"
            },
            "code": "\nlong initializeDataStructure_00113b71(long inputValue)\n\n{\n  long dataStructurePointer;\n  \n  if (inputValue != 0) {\n    dataStructurePointer = FUN_00112904(0x14,0);\n    if (dataStructurePointer == 0) {\n      dataStructurePointer = 0;\n    }\n    else {\n      *(long *)(dataStructurePointer + 0x10) = inputValue;\n    }\n    return dataStructurePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_parameter_00109dfe",
                "param_1": "parameter",
                "lVar1": "counter",
                "local_40": "formattedString"
            },
            "code": "\nvoid processParameter_00109dfe(long parameter)\n\n{\n  long counter;\n  char formattedString [40];\n  \n  if (*(long *)(parameter + 0x70) != 0) {\n    FUN_00109cf4(parameter,*(long *)(parameter + 0x70),0);\n    return;\n  }\n  counter = *(long *)(parameter + 0x68);\n  *(long *)(parameter + 0x68) = counter + 1;\n  *(long *)(parameter + 0x70) = counter;\n  sprintf(formattedString,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(parameter,formattedString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_parameter_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "add_semicolon_to_end_00109bbb",
                "param_1": "input",
                "__s": "string_ptr",
                "sVar1": "string_length"
            },
            "code": "\nbool addSemicolonToEnd_00109bbb(long input)\n\n{\n  char *string_ptr;\n  size_t string_length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string_ptr = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string_ptr != (char *)0x0) {\n      string_length = strlen(string_ptr);\n      *(undefined2 *)(string_ptr + string_length) = 0x3b;\n    }\n    return string_ptr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "add_semicolon_to_end_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "reconstruct_string_0010ae0e",
                "param_1": "input",
                "lVar1": "structPtr",
                "lVar2": "innerStructPtr",
                "__ptr": "memoryPtr",
                "pcVar3": "tempStringPtr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "resultStringPtr",
                "uVar7": "returnValue",
                "lVar8": "totalLength",
                "uVar9": "index",
                "uVar10": "count"
            },
            "code": "\nundefined8 reconstructString_0010ae0e(long input)\n\n{\n  long structPtr;\n  long innerStructPtr;\n  void *memoryPtr;\n  char *tempStringPtr;\n  size_t len1;\n  size_t len2;\n  char *resultStringPtr;\n  undefined8 returnValue;\n  long totalLength;\n  uint index;\n  ulong count;\n  \n  returnValue = 0;\n  structPtr = *(long *)(input + 0x60);\n  if (((structPtr != 0) && (*(char **)(structPtr + 8) != (char *)0x0)) &&\n     (resultStringPtr = *(char **)(structPtr + 0x20), resultStringPtr != (char *)0x0)) {\n    len1 = strlen(*(char **)(structPtr + 8));\n    len2 = strlen(resultStringPtr);\n    innerStructPtr = *(long *)(structPtr + 0x28);\n    if (innerStructPtr == 0) {\n      totalLength = len1 + len2 + 10;\n      count = 0;\n    }\n    else {\n      totalLength = len1 + len2 + 0x1e;\n      count = 0;\n      while( true ) {\n        resultStringPtr = *(char **)(innerStructPtr + count * 8);\n        if (resultStringPtr == (char *)0x0) break;\n        len1 = strlen(resultStringPtr);\n        count = (ulong)((int)count + 1);\n        totalLength = totalLength + len1;\n      }\n    }\n    if (*(char **)(structPtr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(structPtr + 0x30));\n      totalLength = totalLength + len1;\n    }\n    if (*(char **)(structPtr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(structPtr + 0x38));\n      totalLength = totalLength + len1;\n    }\n    resultStringPtr = (char *)xmalloc(totalLength);\n    structPtr = *(long *)(input + 0x60);\n    strcpy(resultStringPtr,*(char **)(structPtr + 8));\n    if (*(long *)(structPtr + 0x28) != 0) {\n      index = 0;\n      len1 = strlen(resultStringPtr);\n      sprintf(resultStringPtr + len1,\"!%u,\",count);\n      while( true ) {\n        structPtr = *(long *)(input + 0x60);\n        count = (ulong)index;\n        memoryPtr = *(void **)(structPtr + 0x28);\n        tempStringPtr = *(char **)((long)memoryPtr + count * 8);\n        if (tempStringPtr == (char *)0x0) break;\n        index = index + 1;\n        strcat(resultStringPtr,tempStringPtr);\n        free(*(void **)(*(long *)(structPtr + 0x28) + count * 8));\n      }\n      free(memoryPtr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    structPtr = *(long *)(input + 0x60);\n    strcat(resultStringPtr,*(char **)(structPtr + 0x20));\n    free(*(void **)(structPtr + 0x20));\n    structPtr = *(long *)(input + 0x60);\n    *(undefined8 *)(structPtr + 0x20) = 0;\n    if (*(char **)(structPtr + 0x30) != (char *)0x0) {\n      strcat(resultStringPtr,*(char **)(structPtr + 0x30));\n      free(*(void **)(structPtr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(resultStringPtr);\n    structPtr = *(long *)(input + 0x60);\n    *(undefined2 *)(resultStringPtr + len1) = 0x3b;\n    tempStringPtr = *(char **)(structPtr + 0x38);\n    if (tempStringPtr != (char *)0x0) {\n      strcpy(resultStringPtr + len1 + 1,tempStringPtr);\n      free(*(void **)(structPtr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    structPtr = *(long *)(input + 0x60);\n    *(char **)(structPtr + 8) = resultStringPtr;\n    returnValue = CONCAT71((int7)((ulong)structPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "xmalloc",
                "free",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reconstruct_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "execute_operation_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "operationInfo",
                "iVar1": "index",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "currentNode",
                "puVar5": "headNode"
            },
            "code": "\nundefined8 executeOperation_001135a5(undefined8 input1,undefined8 input2,long operationInfo)\n\n{\n  int index;\n  char flag;\n  undefined8 result;\n  undefined8 *currentNode;\n  undefined8 *headNode;\n  \n  if (6 < *(uint *)(operationInfo + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(operationInfo + 0x14)) {\n  case 0:\n    flag = FUN_00112c1f(input1,input2,*(undefined8 *)(operationInfo + 0x20),operationInfo);\n    if (flag != '\\0') {\n      result = FUN_0010e6a8(input2,*(undefined8 *)(operationInfo + 8));\n      return result;\n    }\n    break;\n  case 1:\n    flag = FUN_00112c1f(input1,input2,*(undefined8 *)(operationInfo + 0x20),operationInfo);\n    if (flag != '\\0') {\n      result = FUN_0010e7c2(input2,*(undefined8 *)(operationInfo + 8));\n      return result;\n    }\n    break;\n  case 2:\n    flag = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(operationInfo + 0x20) + 8),0);\n    if (flag != '\\0') {\n      result = FUN_0010e9a0(input2,*(undefined8 *)(operationInfo + 8),**(undefined4 **)(operationInfo + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(operationInfo + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    headNode = *(undefined8 **)(operationInfo + 0x20);\n    index = *(int *)(operationInfo + 0x18);\n    result = *(undefined8 *)(operationInfo + 8);\n    flag = FUN_00112502(input1,input2,*(undefined8 *)(headNode[2] + 0x18));\n    if (((flag != '\\0') && (flag = FUN_00112c1f(input1,input2,*headNode,0), flag != '\\0')) &&\n       (flag = FUN_0010eafe(input2,result,index == 2), flag != '\\0')) {\n      for (currentNode = (undefined8 *)headNode[1]; currentNode != (undefined8 *)0x0;\n          currentNode = (undefined8 *)*currentNode) {\n        flag = FUN_00112c1f(input1,input2,currentNode[2],0);\n        if (flag == '\\0') {\n          return 0;\n        }\n        flag = FUN_0010ebb0(input2,currentNode[1],*(undefined4 *)(currentNode + 3));\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n      headNode = (undefined8 *)headNode[2];\n      while( true ) {\n        if (headNode == (undefined8 *)0x0) {\n          result = FUNC_00108f05(input2);\n          return result;\n        }\n        flag = FUN_00113a4d(input1,input2,headNode);\n        if (flag == '\\0') break;\n        headNode = (undefined8 *)*headNode;\n      }\n    }\n    break;\n  case 4:\n    result = FUN_0010e842(input2,*(undefined8 *)(operationInfo + 8),*(undefined8 *)(operationInfo + 0x20));\n    return result;\n  case 5:\n    result = FUN_0010e8a9(*(undefined8 *)(operationInfo + 0x20),input2,*(undefined8 *)(operationInfo + 8));\n    return result;\n  case 6:\n    flag = FUN_00112c1f(input1,input2,**(undefined8 **)(operationInfo + 0x20),0);\n    if (flag != '\\0') {\n      result = FUN_0010e918(input2,*(undefined8 *)(operationInfo + 8),\n                           *(undefined8 *)(*(long *)(operationInfo + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "abort",
                "FUN_0010ebb0",
                "FUN_0010e842",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112c1f",
                "FUN_00113a4d",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "execute_operation_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001152b6",
                "bfd_get_mach",
                "bfd_set_file_flags",
                "FUN_001125fa",
                "printf",
                "bfd_get_arch",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00119970",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ae0e",
                "FUN_00115530",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "demangle_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "component",
                "iVar2": "comparison",
                "pcVar3": "result",
                "plVar4": "pointerArray",
                "pcVar5": "message",
                "sVar6": "length",
                "__ptr": "pointer",
                "lVar7": "size",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * demangle_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint component;\n  int comparison;\n  char *result;\n  long *pointerArray;\n  char *message;\n  size_t length;\n  void *pointer;\n  long size;\n  undefined localArray [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    component = *param3;\n    if (0x29 < component) break;\n    if (0x17 < component) {\n      switch(component) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)demangle_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)FUN_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)FUN_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)FUN_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)FUN_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_0010b0fa_print(3,param3,0x14,localArray);\n        if (result == (char *)0x0) {\n          message = \"Couldn\\'t get demangle_0010b0fad builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison = strcmp(result,\"signed char\");\n        if (comparison == 0) {\nLAB_0010b406:\n          message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"bool\");\n        if (comparison == 0) {\n          message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"char\");\n        if (comparison == 0) goto LAB_0010b406;\n        comparison = strcmp(result,\"double\");\n        if ((comparison == 0) || (comparison = strcmp(result,\"long double\"), comparison == 0)) {\n          message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"float\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"__float128\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"unsigned char\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"int\");\n        if (comparison == 0) {\nLAB_0010b504:\n          message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"unsigned int\");\n        if (comparison == 0) {\nLAB_0010b528:\n          message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"long\");\n        if (comparison == 0) goto LAB_0010b504;\n        comparison = strcmp(result,\"unsigned long\");\n        if (comparison == 0) goto LAB_0010b528;\n        comparison = strcmp(result,\"__int128\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"unsigned __int128\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"short\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"unsigned short\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"void\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"wchar_t\");\n        if (comparison == 0) goto LAB_0010b528;\n        comparison = strcmp(result,\"long long\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"unsigned long long\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(result,\"...\");\n        if (comparison == 0) {\n          message = \"Unexpected demangle_0010b0fad varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          message = \"Unrecognized demangle_0010b0fad builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return message;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          pointer = (void *)FUN_00113e17();\n        }\n        else {\n          pointer = (void *)demangle_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (pointer != (void *)0x0) {\n          size = FUN_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),localArray);\n          if (size != 0) {\n            result = (char *)FUN_00113ce0(pointer,size,localArray[0]);\n            return result;\n          }\n          free(pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (component != 1) {\n      if (component == 4) {\n        result = (char *)cplus_demangle_0010b0fa_print(3,param3,0x14,localArray);\n        message = \"Failed to print demangle_0010b0fad template\\n\";\n        if (result != (char *)0x0) {\n          length = strlen(result);\n          message = (char *)FUN_0010afd5(param1,param2,result,length & 0xffffffff,9);\n          free(result);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return result;\n      }\n      if (component == 0) {\n        if ((param4 == 0) || (pointerArray = (long *)FUN_00113b1e(param4), pointerArray == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = demangle_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle_0010b0fa component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)component);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*pointerArray == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)FUN_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result;\n  }\n  result = *(char **)(*pointerArray + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)FUN_001129f4(result);\n  if (message != (char *)0x0) {\n    length = strlen(message);\n    if ((param3[6] == (uint)length) &&\n       (comparison = strncmp(message,*(char **)(param3 + 4),(long)(int)param3[6]), comparison == 0)) {\n      return result;\n    }\n  }\n  pointerArray = pointerArray + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "fprintf",
                "FUN_00113ce0",
                "abort",
                "strlen",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "FUN_001129f4",
                "strncmp",
                "FUN_00112904",
                "FUN_0010b6ea",
                "free",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_lines_00104c36",
                "in_CL": "currentChar",
                "uVar1": "translation",
                "ppbVar2": "slot",
                "pbVar3": "nextChar",
                "bVar4": "nextNextChar",
                "unaff_RBX": "lineBuffer",
                "unaff_EBP": "lineCount",
                "pbVar5": "currentLine",
                "unaff_R13": "fileName",
                "unaff_R14": "currentPosition",
                "unaff_R15": "lineEnd",
                "in_stack_00000008": "errorFormat",
                "in_stack_00000010": "returnAddress"
            },
            "code": "\nvoid parseLines_00104c36(void)\n\n{\n  undefined8 translation;\n  byte **slot;\n  byte *nextChar;\n  byte currentChar;\n  byte nextNextChar;\n  byte *lineBuffer;\n  int lineCount;\n  byte *currentLine;\n  undefined8 fileName;\n  byte *currentPosition;\n  byte *lineEnd;\n  undefined8 errorFormat;\n  undefined8 *returnAddress;\n  \n  do {\n    currentLine = lineEnd;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextNextChar = currentLine[1];\n      if ((((((nextNextChar == 9) || (nextNextChar == 0x20)) &&\n            ((nextNextChar = currentLine[2], nextNextChar == 9 || (nextNextChar == 0x20)))) &&\n           ((nextNextChar = currentLine[3], nextNextChar == 9 || (nextNextChar == 0x20)))) &&\n          ((nextNextChar = currentLine[4], nextNextChar == 9 || (nextNextChar == 0x20)))) &&\n         ((nextNextChar = currentLine[5], nextNextChar == 9 || (nextNextChar == 0x20)))) {\n        nextNextChar = currentLine[6];\n        nextChar = currentLine + 6;\n        if ((nextNextChar == 9) || (nextNextChar == 0x20)) {\n          do {\n            do {\n              nextNextChar = nextChar[1];\n              nextChar = nextChar + 1;\n            } while (nextNextChar == 0x20);\n          } while (nextNextChar == 9);\n        }\n      }\n      if ((0xd < nextNextChar) || ((-0x2402L >> (nextNextChar & 0x3f) & 1U) != 0)) {\n        translation = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(translation,errorFormat,lineCount);\n      }\n    }\nLAB_00114599:\n    *currentLine = 0;\n    if (lineEnd < currentLine) {\n      slot = (byte **)htab_find_slot();\n      *slot = lineEnd;\n    }\n    lineCount = lineCount + 1;\n    currentLine = lineBuffer;\n    if (currentPosition[1] == 0) {\n      *returnAddress = fileName;\n      return;\n    }\n    for (; nextNextChar = *currentLine, currentPosition = currentLine, nextNextChar != 10; currentLine = currentLine + 1) {\n      if ((char)nextNextChar < '\\v') {\n        if (nextNextChar == 0) {\n          nextChar = currentLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextNextChar == 0xd) {\n          *currentLine = 0;\n          nextChar = currentLine + 1;\n          if (currentLine[1] == 10) {\n            nextChar = currentLine + 2;\n            currentPosition = currentLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextNextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentLine = 0;\n    if (currentLine[1] == 0xd) {\n      currentPosition = currentLine + 1;\n      nextChar = currentLine + 2;\n    }\n    else {\n      nextChar = currentLine + 1;\n    }\nLAB_00114553:\n    currentChar = *lineBuffer;\n    lineEnd = lineBuffer;\n    while (lineBuffer = nextChar, currentChar == 0x20) {\nLAB_00104c3f:\n      currentLine = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      nextChar = lineBuffer;\n      currentChar = *currentLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_debugging_information_0010554f",
                "puVar1": "pointer1",
                "bVar2": "byteVariable2",
                "pcVar3": "functionPointer3",
                "puVar4": "pointer4",
                "uVar5": "undefinedVariable5",
                "uVar6": "ushortVariable6",
                "cVar7": "charVariable7",
                "cVar8": "charVariable8",
                "uVar9": "undefinedVariable9",
                "iVar10": "integerVariable10",
                "iVar11": "integerVariable11",
                "uVar12": "uintVariable12",
                "uVar13": "uintVariable13",
                "lVar14": "longVariable14",
                "plVar15": "longPointer15",
                "plVar20": "longPointer20",
                "plVar25": "longPointer25",
                "plVar28": "longPointer28",
                "param_7": "parameter7",
                "param_8": "parameter8",
                "param_9": "parameter9",
                "param_12": "parameter12",
                "param_13": "parameter13",
                "param_14": "parameter14",
                "param_15": "parameter15",
                "param_17": "parameter17",
                "unaff_R14": "unaffectedRegister14",
                "ppuVar36": "pointerToPointer36",
                "lVar37": "longVariable37",
                "bVar38": "boolVariable38",
                "bVar39": "byteVariable39"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improveDebuggingInformation_0010554f(void)\n\n{\n  uint *pointer1;\n  byte byteVariable2;\n  code *functionPointer3;\n  undefined8 *pointer4;\n  undefined undefinedVariable5;\n  ushort ushortVariable6;\n  char charVariable7;\n  char charVariable8;\n  undefined4 undefinedVariable9;\n  int integerVariable10;\n  int integerVariable11;\n  uint uintVariable12;\n  uint uintVariable13;\n  long longVariable14;\n  long *longPointer15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *longPointer20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *longPointer25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *longPointer28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *functionPointer31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **pfunctionPointer34;\n  void *pvVar35;\n  undefined8 *unaffectedRegister14;\n  undefined **pointerToPointer36;\n  long longVariable37;\n  bool boolVariable38;\n  byte byteVariable39;\n  long parameter7;\n  ulong parameter8;\n  char parameter9;\n  undefined4 *__ptr_02;\n  ulong parameter12;\n  char *parameter13;\n  undefined *parameter14;\n  uint parameter15;\n  long *parameter17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  byteVariable39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    parameter12 = 0;\n    parameter14 = (undefined *)0x0;\n    parameter17 = (long *)0x0;\n    uVar29 = parameter12;\n  }\n  else {\n    longVariable14 = (ulong)in_stack_00000068._4_4_ * 8;\n    parameter17 = (long *)xmalloc(longVariable14);\n    param_40 = parameter17;\n    bfd_map_over_sections(parameter7,FUN_0010870e,&stack0x00000140);\n    qsort(parameter17,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    parameter14 = (undefined *)xmalloc(longVariable14);\n    boolVariable38 = DAT_00127978 != '\\0';\n    puVar33 = parameter14;\n    for (; longVariable14 != 0; longVariable14 = longVariable14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)byteVariable39 * -2 + 1;\n    }\n    if (boolVariable38) {\n      uVar29 = 0;\n      parameter12 = 0;\n      do {\n        puVar30 = (ulong *)(parameter14 + uVar29 * 8);\n        longPointer28 = parameter17 + uVar29;\n        uVar21 = parameter12;\n        do {\n          parameter12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uintVariable12 = bfd_octets_per_byte(parameter7,*longPointer28);\n          uintVariable13 = bfd_octets_per_byte(parameter7);\n          longVariable14 = *longPointer28;\n          if ((*(uint *)(longVariable14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uintVariable13 * *(long *)(longPointer28[1] + 0x38);\n          uVar24 = (ulong)uintVariable12 * *(long *)(longVariable14 + 0x38) + *(long *)(longVariable14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          charVariable7 = bfd_set_section_size();\n          if (charVariable7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,parameter7,*longPointer28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          longPointer28 = longPointer28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (parameter12 < uVar21);\n      } while( true );\n    }\n    parameter12 = 0;\nLAB_00107cd1:\n    uVar29 = parameter12;\n    if (DAT_00127969 != '\\0') {\n      uintVariable12 = bfd_octets_per_byte(parameter7);\n      longVariable14 = parameter17[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uintVariable12;\n      uVar24 = *(long *)(longVariable14 + 0x40) + (ulong)uintVariable12 * *(long *)(longVariable14 + 0x38);\n      if (uVar24 < uVar21) {\n        charVariable7 = bfd_set_section_size();\n        if (charVariable7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,parameter7,parameter17[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(parameter14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= parameter12) {\n            uVar29 = parameter12;\n          }\n        }\n      }\n    }\n  }\n  parameter12 = uVar29;\n  longPointer28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    pointerToPointer36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (longVariable14 = 0x18; longVariable14 != 0; longVariable14 = longVariable14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)byteVariable39 * -2 + 1;\n    }\n    parameter13 = (char *)0x0;\n    do {\n      puVar33 = *pointerToPointer36;\n      longVariable14 = bfd_get_section_by_name(unaffectedRegister14,puVar33);\n      longVariable37 = bfd_get_section_by_name();\n      if ((longVariable14 != 0) && (longVariable37 != 0)) {\n        lVar23 = *(long *)(longVariable14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        charVariable7 = bfd_get_section_contents(unaffectedRegister14,longVariable14,__ptr_00,0,lVar23);\n        if (charVariable7 == '\\0') {\n          undefinedVariable9 = bfd_get_error();\n          bfd_errmsg(undefinedVariable9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedRegister14);\n          free(parameter13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(longVariable37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          parameter9 = bfd_get_section_contents(unaffectedRegister14,longVariable37,__ptr_01,0);\n          if (parameter9 == '\\0') {\n            undefinedVariable9 = bfd_get_error();\n            bfd_errmsg(undefinedVariable9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedRegister14);\n            free(parameter13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((parameter13 != (char *)0x0) ||\n               (parameter13 = (char *)FUN_00112894(unaffectedRegister14,1,longPointer28), parameter13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaffectedRegister14[1] + 0x40))(pvVar35);\n                byteVariable2 = *(byte *)((long)pvVar35 + 4);\n                undefinedVariable9 = (**(code **)(unaffectedRegister14[1] + 0x58))((long)pvVar35 + 6);\n                longVariable14 = (**(code **)(unaffectedRegister14[1] + 0x40))((long)pvVar35 + 8);\n                if (byteVariable2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + longVariable14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    functionPointer31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(functionPointer31);\n                      if (((sVar18 == 0) || (pcVar22 = functionPointer31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      integerVariable10 = (**(code **)(unaffectedRegister14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(integerVariable10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      functionPointer31 = (char *)concat(functionPointer31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = functionPointer31;\n                    }\n                    uVar17 = *unaffectedRegister14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteVariable2,undefinedVariable9,longVariable14,functionPointer31);\n                    charVariable7 = FUN_0011173a(__ptr_02,parameter13,byteVariable2);\n                    if (charVariable7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(parameter13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaffectedRegister14;\n                    functionPointer31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,functionPointer31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)byteVariable2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      pointerToPointer36 = pointerToPointer36 + 2;\n    } while (pointerToPointer36 != (undefined **)&DAT_00125c90);\n    if ((parameter13 != (char *)0x0) && (charVariable7 = FUN_0010c892(), charVariable7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaffectedRegister14[1] + 8) == 1) {\n      longVariable14 = 0;\n      for (longPointer15 = longPointer28; longPointer15 < longPointer28 + parameter8; longPointer15 = longPointer15 + 1) {\n        (**(code **)(unaffectedRegister14[1] + 0x218))(unaffectedRegister14,*longPointer15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((longVariable14 == 0) && (longVariable14 = FUN_00112894(unaffectedRegister14,0,longPointer28), longVariable14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          functionPointer31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (longPointer15 + 1 < longPointer28 + parameter8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(longPointer15[1] + 8),0);\n            free(__s);\n            free(functionPointer31);\n            longPointer15 = longPointer15 + 1;\n            functionPointer31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          parameter9 = FUN_0011173a(__ptr_02,longVariable14,param_43);\n          if (parameter9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((longVariable14 != 0) && (charVariable7 = FUN_0010c892(), charVariable7 == '\\0')) goto LAB_00105981;\n    }\n    if (parameter9 == '\\0') {\n      if ((*(int *)(unaffectedRegister14[1] + 8) == 2) && (parameter8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = longPointer28;\n        param_32 = 0;\n        param_31 = parameter8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (longVariable14 = 0x22; longVariable14 != 0; longVariable14 = longVariable14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)byteVariable39 * -8 + 4);\n        }\n        charVariable7 = '\\0';\n        _parameter15 = (int *)0x0;\n        uintVariable12 = 0;\n        parameter13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)parameter8 <= param_32) goto LAB_00105590;\n            longVariable14 = longPointer28[param_32];\n            charVariable8 = bfd_coff_get_syment(unaffectedRegister14,longVariable14,&stack0x000000e0);\n            longVariable37 = in_stack_000000d8;\n            if (charVariable8 == '\\0') {\n              undefinedVariable9 = bfd_get_error();\n              bfd_errmsg(undefinedVariable9);\n              functionPointer31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            functionPointer31 = *(char **)(longVariable14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              charVariable8 = bfd_coff_get_auxent(unaffectedRegister14,longVariable14,0);\n              if (charVariable8 == '\\0') {\n                undefinedVariable9 = bfd_get_error();\n                bfd_errmsg(undefinedVariable9);\n                functionPointer31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)longVariable37) break;\n            if (param_36 != 0x67) {\n              charVariable8 = FUN_0010bbd3(__ptr_02);\n              if (charVariable8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            charVariable8 = FUN_0010bbd3(__ptr_02);\n            if (charVariable8 == '\\0') goto LAB_00105981;\n          }\n          ushortVariable6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaffectedRegister14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            charVariable8 = FUN_00112a33(&stack0x00000140,longVariable14,longVariable37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaffectedRegister14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaffectedRegister14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _parameter15 = (int *)(**(code **)(unaffectedRegister14[1] + 0x238))(unaffectedRegister14);\n                uintVariable12 = (uint)ushortVariable6;\n                parameter13 = functionPointer31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              integerVariable10 = strcmp(functionPointer31,\".bb\");\n              if (integerVariable10 == 0) {\n                charVariable8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                integerVariable10 = strcmp(functionPointer31,\".eb\");\n                if (integerVariable10 != 0) goto switchD_00106e1a_caseD_68;\n                charVariable8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              integerVariable10 = strcmp(functionPointer31,\".bf\");\n              if (integerVariable10 == 0) {\n                if (parameter13 != (char *)0x0) {\n                  uintVariable13 = (int)uintVariable12 >> ((byte)*(undefined4 *)(unaffectedRegister14[0x22] + 0x44) & 0x1f);\n                  longVariable37 = FUN_0010dac0(unaffectedRegister14,&stack0x000000c0,&stack0x00000140,longVariable37,\n                                        uintVariable13 ^ (uintVariable12 ^ uintVariable13) &\n                                                 *(uint *)(unaffectedRegister14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((longVariable37 == 0) || (charVariable7 = FUN_0010bc80(__ptr_02), charVariable7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_parameter15 != (int *)0x0) {\n                    integerVariable10 = 0;\n                    if (param_37 != 0) {\n                      integerVariable10 = param_39 - 1;\n                    }\n                    longVariable14 = *(long *)(*(long *)(longVariable14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _parameter15[4];\n                      if (iVar27 == 0) break;\n                      charVariable8 = FUN_0010bf86(__ptr_02,integerVariable10 + iVar27,\n                                           *(long *)(_parameter15 + 6) + longVariable14);\n                      _parameter15 = _parameter15 + 4;\n                      if (charVariable8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uintVariable12 = 0;\n                  _parameter15 = (int *)0x0;\n                  parameter13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                functionPointer31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                integerVariable10 = strcmp(functionPointer31,\".ef\");\n                if (integerVariable10 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVariable7 != '\\0') {\n                  charVariable7 = FUN_0010be1a(__ptr_02);\n                  if (charVariable7 == '\\0') goto LAB_00105981;\n                  charVariable7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                functionPointer31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,functionPointer31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (charVariable8 != '\\0');\n      }\n      else {\n        functionPointer31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,functionPointer31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(parameter7 + 0x44) & 0x42) != 0) && ((*(uint *)(parameter7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(parameter7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (parameter8 != 0) {\n        longPointer28 = DAT_001278b0 + parameter8;\n        longPointer15 = DAT_001278b0;\n        do {\n          uintVariable12 = *(uint *)(*longPointer15 + 0x18);\n          if ((uintVariable12 & 0x1000000) != 0) {\n            *(uint *)(*longPointer15 + 0x18) = uintVariable12 & 0xfeffffff;\n          }\n          longPointer15 = longPointer15 + 1;\n        } while (longPointer28 != longPointer15);\n      }\n    }\n    else {\n      for (longVariable14 = *(long *)(parameter7 + 0x90); longVariable14 != 0; longVariable14 = *(long *)(longVariable14 + 8)) {\n        if (*(long *)(longVariable14 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(longVariable14 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      longVariable14 = xmalloc();\n      longPointer28 = DAT_001278b0;\n      parameter15 = *(uint *)((long)unaffectedRegister14 + 0x44) & 0x42;\n      DAT_001278a8 = longVariable14;\n      if (parameter8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _parameter9 = 0;\n        do {\n          integerVariable10 = DAT_001279a0;\n          longPointer15 = (long *)longPointer28[_parameter9];\n          functionPointer3 = (code *)longPointer15[4];\n          uintVariable12 = *(uint *)(longPointer15 + 3);\n          longPointer20 = (long *)longPointer15[1];\n          longPointer25 = longPointer20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < integerVariable10 && (functionPointer31 = (char *)puVar26[5], functionPointer31 != (char *)0x0))) {\n              if (functionPointer31 != \"\") {\n                integerVariable11 = strcmp(functionPointer31,(char *)longPointer20);\n                if (integerVariable11 == 0) {\n                  free(functionPointer31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(longVariable14 + uVar29 * 8) = uVar16;\n                  longVariable37 = htab_elements(uVar17);\n                  if ((longVariable37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          longVariable37 = htab_elements(DAT_001278d0);\n          uVar21 = uVar29;\n          if ((longVariable37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (longPointer20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)longPointer20 == '_') && (*(char *)((long)longPointer20 + 1) == '_')) &&\n                 (integerVariable10 = strcmp((char *)((ulong)(*(char *)((long)longPointer20 + 2) == '_') +\n                                          (long)longPointer20),\"__gnu_lto_slim\"), integerVariable10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = longPointer20;\n            longVariable37 = htab_find(DAT_001278d0);\n            if (((longVariable37 == 0) || (longPointer25 = *(long **)(longVariable37 + 8), longPointer20 == longPointer25)) &&\n               (longPointer25 = longPointer20, pfunctionPointer34 = DAT_001278d8, (uintVariable12 & 0x100) != 0)) {\n              for (; pfunctionPointer34 != (char **)0x0; pfunctionPointer34 = (char **)pfunctionPointer34[3]) {\n                integerVariable10 = strcmp(*pfunctionPointer34,(char *)longPointer20);\n                if (integerVariable10 == 0) {\n                  longPointer25 = (long *)pfunctionPointer34[1];\n                  break;\n                }\n              }\n            }\n            longPointer15[1] = (long)longPointer25;\n            charVariable7 = *(char *)longPointer25;\n            if (charVariable7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            functionPointer31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(parameter7 + 8) + 0x1c) != '\\0')) {\n              longVariable37 = unaffectedRegister14[1];\n              charVariable7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          charVariable7 = *(char *)longPointer20;\n          if (charVariable7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          functionPointer31 = DAT_00127908;\n          longVariable37 = unaffectedRegister14[1];\n          if (*(char *)(longVariable37 + 0x1c) == charVariable7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uintVariable12 & 0x82) == 0 && (functionPointer3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(longPointer15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              longPointer25 = (long *)((long)longPointer25 + 1);\n              longPointer15[1] = (long)longPointer25;\n              goto joined_r0x00106565;\n            }\n            charVariable7 = *(char *)(*(long *)(parameter7 + 8) + 0x1c);\n            if (charVariable7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              longPointer25 = (long *)((long)longPointer25 + 1);\n              longPointer15[1] = (long)longPointer25;\n              sVar18 = strlen((char *)longPointer25);\n              longVariable37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(functionPointer31);\n              longPointer20 = (long *)xmalloc(sVar18 + longVariable37);\n              goto LAB_001066d0;\n            }\n            *(char *)longPointer25 = charVariable7;\n            longPointer15[1] = (long)longPointer25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(parameter7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (functionPointer31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)longPointer25);\n              sVar19 = strlen(functionPointer31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              longPointer20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              functionPointer31 = DAT_00127908;\n              if ((*(char *)(longVariable37 + 0x1c) != '\\0') && (charVariable7 != *(char *)(longVariable37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)longPointer25);\n              longVariable37 = sVar18 + 2;\n              if (functionPointer31 != (char *)0x0) goto LAB_001066bc;\n              longPointer20 = (long *)xmalloc(longVariable37);\nLAB_001066d0:\n              __dest = (long *)((long)longPointer20 + 1);\n              *(char *)longPointer20 = *(char *)(*(long *)(parameter7 + 8) + 0x1c);\n            }\n            functionPointer31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(functionPointer31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)longPointer25);\n            longPointer15[1] = (long)longPointer20;\n            longPointer25 = longPointer20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uintVariable12 & 0x20) == 0) &&\n             (((uintVariable12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(longPointer15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((parameter15 == 0) &&\n                (((uintVariable12 & 0x82) != 0 || ((*(byte *)(longPointer15[4] + 0x25) & 0x10) != 0)))) ||\n               (integerVariable10 = bfd_decode_symclass(longPointer15), integerVariable10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                longVariable37 = htab_find();\n                if (longVariable37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = longPointer25;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uintVariable12 & 0x82) == 0) && (functionPointer3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(longPointer15[4] + 0x25) & 0x10) == 0)) {\n              if ((uintVariable12 & 4) == 0) {\n                if (((*(int *)(unaffectedRegister14[1] + 8) != 2) ||\n                    (longVariable37 = *(long *)(longPointer15[4] + 0xd0), longVariable37 == 0)) ||\n                   (*(long *)(longVariable37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    charVariable7 = bfd_is_local_label(unaffectedRegister14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              charVariable7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (charVariable7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            longVariable37 = htab_find();\n            if (longVariable37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = longPointer25;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uintVariable12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = longPointer25;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            longVariable37 = htab_find();\n            if (longVariable37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uintVariable12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              longVariable37 = htab_find();\n              if (longVariable37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = longPointer25;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            charVariable7 = FUN_001159d0(longPointer15[4]);\n            if (charVariable7 == '\\0') {\n              if (((uintVariable12 & 0x800002) == 0) && (functionPointer3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uintVariable12 & 0x82) != 0) {\n                  charVariable7 = FUN_00115d70(longPointer25);\n                  if ((charVariable7 == '\\0') &&\n                     ((longVariable37 = htab_elements(DAT_001279d8), longVariable37 == 0 ||\n                      (charVariable7 = FUN_00115d70(longPointer25), charVariable7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uintVariable13 = *(uint *)(longPointer15 + 3), (uintVariable13 & 0x200000) != 0)) ||\n                         (longVariable37 = *longPointer15, longVariable37 == 0)) ||\n                        ((*(int *)(*(long *)(longVariable37 + 8) + 8) != 5 ||\n                         (*(long *)(longVariable37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)longPointer15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uintVariable13 = *(uint *)(longPointer15 + 3);\n                  }\n                  *(uint *)(longPointer15 + 3) = uintVariable13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uintVariable12 & 1) != 0) && (charVariable7 = FUN_00115d70(longPointer25), charVariable7 != '\\0')) {\n                  *(uint *)(longPointer15 + 3) = *(uint *)(longPointer15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (charVariable7 = FUN_00115d70(longPointer25), charVariable7 != '\\0')) {\n                  *(uint *)(longPointer15 + 3) = *(uint *)(longPointer15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (functionPointer3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(longVariable14 + uVar29 * 8) = longPointer15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _parameter9 = _parameter9 + 1;\n        } while (parameter8 != _parameter9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        integerVariable10 = DAT_001279a0;\n        for (longVariable37 = 0; longVariable37 < integerVariable10; longVariable37 = longVariable37 + 1) {\n          functionPointer31 = (char *)puVar26[5];\n          if (functionPointer31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,parameter7);\n            *(undefined8 *)(longVariable14 + lVar23) = uVar17;\n            integerVariable10 = DAT_001279a0;\n          }\n          else if (functionPointer31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,functionPointer31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      boolVariable38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(longVariable14 + uVar29 * 8) = 0;\n      if ((boolVariable38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        parameter8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      integerVariable10 = *(int *)(*(undefined8 **)(parameter7 + 8) + 1);\n      if ((integerVariable10 == 5) || (integerVariable10 == 2)) {\n        param_33 = (void *)0x0;\n        charVariable7 = FUN_0011378f(parameter7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (charVariable7 != '\\0') {\n          longVariable14 = bfd_make_section_with_flags(parameter7,\".stab\",0x2108);\n          longVariable37 = bfd_make_section_with_flags(parameter7,\".stabstr\",0x2108);\n          if ((((longVariable14 == 0) || (longVariable37 == 0)) ||\n              (charVariable7 = bfd_set_section_size(longVariable14,param_38), charVariable7 == '\\0')) ||\n             (charVariable7 = bfd_set_section_size(longVariable37,param_40), charVariable7 == '\\0')) {\n            functionPointer31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(longVariable14 + 0x7c) = 2;\n            *(undefined4 *)(longVariable37 + 0x7c) = 0;\n            charVariable7 = bfd_set_section_contents(parameter7,longVariable14,param_30,0,param_38);\n            if ((charVariable7 != '\\0') &&\n               (charVariable7 = bfd_set_section_contents(parameter7,longVariable37,param_33,0,param_40), charVariable7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            functionPointer31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,functionPointer31,5);\n          FUN_001126c0(0,parameter7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(parameter7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,parameter7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaffectedRegister14,FUN_00116030,DAT_001278b0);\n      integerVariable10 = bfd_get_error();\n      if (integerVariable10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    longVariable14 = htab_elements(DAT_001279f8);\n    if (((longVariable14 != 0) ||\n        ((((longVariable14 = htab_elements(DAT_00127a08), longVariable14 != 0 ||\n           (longVariable14 = htab_elements(DAT_001279e8), longVariable14 != 0)) ||\n          (longVariable14 = htab_elements(DAT_001279e0), longVariable14 != 0)) ||\n         ((longVariable14 = htab_elements(DAT_001279d8), longVariable14 != 0 ||\n          (longVariable14 = htab_elements(DAT_001279d0), longVariable14 != 0)))))) ||\n       ((((longVariable14 = htab_elements(DAT_001278d0), longVariable14 != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(parameter7,DAT_001278a8,parameter8 & 0xffffffff);\n    bfd_map_over_sections(unaffectedRegister14,FUN_00115dc0,parameter7);\n    bfd_map_over_sections(unaffectedRegister14,FUN_00116110,parameter7);\n    for (puVar26 = DAT_001279c0; pointer4 = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      charVariable7 = bfd_set_section_contents(parameter7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (charVariable7 == '\\0') {\n        FUN_001126c0(0,parameter7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; pointer4 != (undefined8 *)0x0; pointer4 = (undefined8 *)*pointer4) {\n      uVar17 = *(undefined8 *)(pointer4[5] + 0x60);\n      charVariable7 = bfd_set_section_contents(parameter7,uVar17,pointer4[4],0,pointer4[3]);\n      if (charVariable7 == '\\0') {\n        FUN_001126c0(0,parameter7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaffectedRegister14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      longPointer28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(parameter7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(parameter7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (charVariable7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), charVariable7 != '\\0')))) {\n          if (longPointer28 == (long *)0x0) {\n            longPointer28 = in_R10;\n          }\n          longPointer15 = in_R10;\n          if (*(undefined8 **)(*longPointer28 + 0x60) == puVar26) {\nLAB_0010625f:\n            functionPointer31 = \"error: failed to merge notes\";\n            if (longPointer28[1] != 0) {\n              charVariable7 = bfd_set_section_contents(parameter7,puVar26,longPointer28[1],0,longPointer28[2]);\n              if (charVariable7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,parameter7,puVar26,uVar17);\n                return 0;\n              }\n              longPointer28 = (long *)longPointer28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              longPointer28 = longPointer15;\n              if (*(undefined8 **)(*longPointer15 + 0x60) == puVar26) goto LAB_0010625f;\n              longPointer28 = (long *)longPointer15[3];\n              longPointer15 = longPointer28;\n            } while (longPointer28 != (long *)0x0);\n            functionPointer31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,functionPointer31,5);\n          FUN_001126c0(0,parameter7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        longPointer28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = longPointer28;\n      } while (longPointer28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (charVariable7 = bfd_fill_in_gnu_debuglink_section(parameter7,param_21), longVariable14 = DAT_00127a10,\n       charVariable7 != '\\0')) {\n      if (parameter14 != (undefined *)0x0) {\n        if (0x2000 < parameter12) {\n          parameter12 = 0x2000;\n        }\n        longVariable14 = 0;\n        __ptr = (undefined *)xmalloc(parameter12);\n        undefinedVariable5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (parameter12 = parameter12 & 0xffffffff; parameter12 != 0; parameter12 = parameter12 - 1) {\n          *puVar33 = undefinedVariable5;\n          puVar33 = puVar33 + (ulong)byteVariable39 * -2 + 1;\n        }\n        for (; (uint)longVariable14 < in_stack_00000068._4_4_; longVariable14 = longVariable14 + 1) {\n          uVar29 = *(ulong *)(parameter14 + longVariable14 * 8);\n          if (uVar29 != 0) {\n            longVariable37 = *(long *)(*parameter17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              charVariable7 = bfd_set_section_contents(parameter7,*parameter17,__ptr,longVariable37,uVar21);\n              if (charVariable7 == '\\0') {\n                FUN_001126c0(0,parameter7,*parameter17,0);\n                free(__ptr);\n                return 0;\n              }\n              longVariable37 = longVariable37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          parameter17 = parameter17 + 1;\n        }\n        free(__ptr);\n        free(parameter14);\n      }\n      undefinedVariable9 = (**(code **)(*(long *)(parameter7 + 8) + 0x140))(unaffectedRegister14);\n      if ((char)undefinedVariable9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return undefinedVariable9;\n        }\n        charVariable7 = bfd_alt_mach_code(parameter7,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (charVariable7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(parameter7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(parameter7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return undefinedVariable9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return undefinedVariable9;\n        }\n        return undefinedVariable9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,parameter7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,parameter7,0,uVar17,longVariable14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "bfd_is_local_label",
                "bfd_errmsg",
                "free",
                "FUN_0011a170",
                "bfd_get_section_by_name",
                "FUN_0010875d",
                "FUN_00108863",
                "bfd_get_error",
                "FUN_00112a33",
                "FUN_0010bbd3",
                "FUN_00119dd0",
                "bfd_set_section_size",
                "concat",
                "bfd_set_error",
                "bfd_make_section_with_flags",
                "FUN_001159d0",
                "xstrdup",
                "bfd_decode_symclass",
                "bfd_octets_per_byte",
                "FUN_00112894",
                "FUN_00113fb0",
                "strcpy",
                "bfd_set_section_contents",
                "FUN_0011173a",
                "htab_traverse",
                "FUN_00115d70",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_001126c0",
                "xmalloc",
                "qsort",
                "fprintf",
                "FUN_00119ed0",
                "FUN_001088ae",
                "bfd_coff_get_auxent",
                "FUN_0011378f",
                "FUN_0011a2e0",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00116030",
                "strcmp",
                "FUN_0010c892",
                "bfd_map_over_sections",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116110",
                "htab_find",
                "bfd_fill_in_gnu_debuglink_section",
                "bfd_alt_mach_code",
                "htab_elements",
                "strlen",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_0010870e",
                "FUN_0010bf20",
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_debugging_information_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_call_another_function_00109cf4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_3c": "stringValue"
            },
            "code": "\nvoid formatAndCallAnotherFunction_00109cf4(undefined8 input1,undefined8 input2,undefined4 input3)\n\n{\n  char stringValue [28];\n  \n  sprintf(stringValue,\"%ld\",input2);\n  FUN_00109b52(input1,stringValue,input2,0,input3);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010b800",
                "FUN_0010bba1",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "format_and_call_another_function_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "extract_parameters_00109ab1",
                "param_1": "inputString",
                "param_2": "outputArray",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "uVar1": "returnValue",
                "pcVar2": "currentChar",
                "uVar3": "modifiedValue",
                "auVar4": "resultArray"
            },
            "code": "\nundefined  [16]\nextractParameters_00109ab1(char **inputString,undefined4 *outputArray,undefined8 param3Value,undefined8 param4Value,\n            undefined8 param5Value)\n\n{\n  undefined4 returnValue;\n  char *currentChar;\n  undefined8 modifiedValue;\n  undefined resultArray [16];\n  \n  currentChar = *inputString;\n  if (*currentChar == '(') {\n    *inputString = currentChar + 1;\n    returnValue = FUN_00109a32(inputString,0);\n    *outputArray = returnValue;\n    if (**inputString == ',') {\n      *inputString = *inputString + 1;\n      returnValue = FUN_00109a32(inputString,0,param3Value);\n      outputArray[1] = returnValue;\n      if (**inputString == ')') {\n        currentChar = *inputString + 1;\n        *inputString = currentChar;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(currentChar);\n    modifiedValue = 0;\n  }\n  else {\n    *outputArray = 0;\n    currentChar = (char *)FUN_00109a32(inputString,0);\n    outputArray[1] = (int)currentChar;\nLAB_00109b25:\n    modifiedValue = CONCAT71((int7)((ulong)currentChar >> 8),1);\n  }\n  resultArray._8_8_ = param5Value;\n  resultArray._0_8_ = modifiedValue;\n  return resultArray;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_parameters_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_condition_and_execute_001159d0",
                "param_1": "parameter",
                "uVar1": "returnValue",
                "cVar2": "charVar",
                "uVar3": "result",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2"
            },
            "code": "\nundefined4 checkConditionAndExecute_001159d0(long parameter)\n\n{\n  undefined8 returnValue;\n  char charVar;\n  undefined4 result;\n  long tempVar1;\n  long tempVar2;\n  \n  result = FUN_00115b70();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(parameter + 0x27) & 2) == 0) {\n      return result;\n    }\n    tempVar1 = FUN_00115d00(*(undefined8 *)(parameter + 0xd0),*(undefined8 *)(parameter + 0xe0));\n    if ((tempVar1 != 0) &&\n       (((returnValue = *(undefined8 *)(tempVar1 + 8), DAT_00127a2c != 7 ||\n         (charVar = FUN_00115d70(returnValue,DAT_00127a08), charVar != '\\0')) &&\n        (charVar = FUN_00115d70(returnValue,DAT_001279f8), charVar == '\\0')))) {\n      tempVar1 = *(long *)(*(long *)(parameter + 0xd0) + 0xc0);\n      tempVar2 = tempVar1;\n      do {\n        if (tempVar2 == 0) {\n          return 1;\n        }\n        charVar = FUN_00115b70(tempVar2);\n        if (charVar == '\\0') {\n          return result;\n        }\n        tempVar2 = *(long *)(*(long *)(tempVar2 + 0xd0) + 0xc0);\n      } while (tempVar1 != tempVar2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d70",
                "FUN_00115d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_condition_and_execute_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "concatenate_and_send_data_0010a77a",
                "param_1": "data_pointer",
                "uVar1": "undefined_value",
                "lVar2": "data_struct",
                "__s": "string_ptr",
                "uVar3": "undefined_value8",
                "uVar4": "return_value",
                "__s_00": "temp_string_ptr",
                "sVar5": "temp_string_length_1",
                "sVar6": "temp_string_length_2",
                "__s_01": "concatenated_string_ptr"
            },
            "code": "\nundefined4 concatenate_and_send_data_0010a77a(long data_pointer)\n\n{\n  undefined undefined_value;\n  long data_struct;\n  char *string_ptr;\n  undefined8 undefined_value8;\n  undefined4 return_value;\n  char *temp_string_ptr;\n  size_t temp_string_length_1;\n  size_t temp_string_length_2;\n  char *concatenated_string_ptr;\n  \n  data_struct = *(long *)(data_pointer + 0x60);\n  if ((data_struct != 0) && (string_ptr = *(char **)(data_struct + 0x20), string_ptr != (char *)0x0)) {\n    return_value = *(undefined4 *)(data_struct + 0x18);\n    undefined_value = *(undefined *)(data_struct + 0x1c);\n    undefined_value8 = *(undefined8 *)(data_struct + 0x10);\n    temp_string_ptr = (char *)FUN_00109b2f();\n    temp_string_length_1 = strlen(temp_string_ptr);\n    temp_string_length_2 = strlen(string_ptr);\n    concatenated_string_ptr = (char *)xmalloc(temp_string_length_1 + 2 + temp_string_length_2);\n    sprintf(concatenated_string_ptr,\"%s%s;\",temp_string_ptr,string_ptr);\n    free(temp_string_ptr);\n    free(string_ptr);\n    return_value = FUN_00109b52(data_pointer,concatenated_string_ptr,undefined_value8,undefined_value,return_value);\n    if ((char)return_value != '\\0') {\n      free(concatenated_string_ptr);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_and_send_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_error_0010543c",
                "piVar2": "errorCode",
                "pcVar3": "errorMessage",
                "uVar1": "fileAddress",
                "uVar4": "localizedString",
                "unaff_RBP": "stackBase"
            },
            "code": "\nvoid openFileError_0010543c(void)\n\n{\n  undefined8 fileAddress;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 localizedString;\n  long stackBase;\n  \n  errorCode = __errno_location();\n  errorMessage = strerror(*errorCode);\n  fileAddress = *(undefined8 *)(stackBase + 0x10);\n  localizedString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(localizedString,fileAddress,errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "param_1": "dataPtr",
                "param_2": "flag1",
                "param_3": "length",
                "param_4": "flag2",
                "cVar1": "result",
                "bVar2": "byteVal",
                "iVar3": "count",
                "uVar4": "returnValue",
                "pcVar5": "str1",
                "__ptr": "ptrArray",
                "uVar6": "value",
                "__s": "str2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "newStr",
                "lVar9": "iterator",
                "bVar10": "byteVar",
                "lVar11": "countIterator",
                "uVar12": "flag3"
            },
            "code": "\nundefined4 processData_0010a424(long dataPtr,char flag1,int length,char flag2)\n\n{\n  char result;\n  byte byteVal;\n  int count;\n  undefined4 returnValue;\n  char *str1;\n  undefined8 *ptrArray;\n  undefined8 value;\n  char *str2;\n  size_t length1;\n  size_t length2;\n  char *newStr;\n  long iterator;\n  byte byteVar;\n  long countIterator;\n  undefined flag3;\n  \n  if ((flag1 == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  byteVar = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  str1 = (char *)FUN_00109b2f(dataPtr);\n  if (length < 0) {\n    ptrArray = (undefined8 *)0x0;\n    length = 0;\nLAB_0010a582:\n    flag3 = 1;\n    if (byteVar != 0) goto LAB_0010a596;\n  }\n  else {\n    if (length != 0) {\n      count = length + 1;\n      ptrArray = (undefined8 *)xmalloc((long)count * 8);\n      iterator = (long)(length + -1);\n      do {\n        byteVal = 1;\n        if (byteVar == 0) {\n          byteVal = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n        }\n        value = FUN_00109b2f(dataPtr);\n        byteVar = byteVal & 1;\n        ptrArray[iterator] = value;\n        iterator = iterator + -1;\n      } while ((int)iterator != -1);\n      if (flag2 == '\\0') {\n        result = FUN_00109d97(dataPtr);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteVal = 1;\n        if (byteVar == 0) {\n          byteVal = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n        }\n        byteVar = byteVal & 1;\n        value = FUN_00109b2f(dataPtr);\n        ptrArray[(long)count + -1] = value;\n        length = count;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(dataPtr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((byteVar != 0) || (*(char *)(*(long *)(dataPtr + 0x60) + 0x1c) != '\\0')) {\n      value = FUN_00109b2f(dataPtr);\n      length = 1;\n      flag3 = 1;\n      *ptrArray = value;\n      goto LAB_0010a596;\n    }\n    value = FUN_00109b2f(dataPtr);\n    length = 1;\n    *ptrArray = value;\n  }\n  flag3 = *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)FUN_00109b2f(dataPtr);\n  length1 = strlen(str1);\n  length2 = strlen(str2);\n  iterator = length1 + 10 + length2;\n  for (countIterator = 0; (int)countIterator < length; countIterator = countIterator + 1) {\n    length1 = strlen((char *)ptrArray[countIterator]);\n    iterator = iterator + length1;\n  }\n  newStr = (char *)xmalloc(iterator);\n  sprintf(newStr,\"#%s,%s\",str1,str2);\n  iterator = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    length1 = strlen(newStr);\n    if (length <= (int)iterator) break;\n    *(undefined2 *)(newStr + length1) = 0x2c;\n    str1 = (char *)ptrArray[iterator];\n    iterator = iterator + 1;\n    strcpy(newStr + length1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(newStr + length1) = 0x3b;\n  free(ptrArray);\n  returnValue = FUN_00109b52(dataPtr,newStr,0,flag3,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(newStr);\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00109d97",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_binutils_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightText"
            },
            "code": "\nvoid printBinutilsInfo_00119970(undefined8 version)\n\n{\n  char *copyrightText;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightText);\n  copyrightText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binutils_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_query_string_00114c80",
                "param_1": "queryString",
                "param_2": "defaultParam",
                "param_3": "errorMessage",
                "param_4": "extraData",
                "pcVar1": "equalSignPosition",
                "auVar3": "parsedResult",
                "auVar3._0_8_": "resultArray",
                "uVar2": "formatErrorMessage",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nundefined  [16] parseQueryString_00114c80(char *queryString,undefined8 defaultParam,undefined8 errorMessage,undefined8 extraData)\n\n{\n  char *equalSignPosition;\n  undefined8 formatErrorMessage;\n  undefined parsedResult [16];\n  \n  equalSignPosition = strchr(queryString,0x3d);\n  if (equalSignPosition != (char *)0x0) {\n    resultArray = (undefined8 *)xmalloc(0x30);\n    formatErrorMessage = FUN_0011a480(queryString,(long)equalSignPosition - (long)queryString);\n    resultArray[2] = equalSignPosition + 1;\n    resultArray[1] = formatErrorMessage;\n    resultArray[4] = 0;\n    resultArray[3] = 0;\n    *resultArray = defaultParam;\n    parsedResult._8_8_ = extraData;\n    return parsedResult;\n  }\n  formatErrorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(formatErrorMessage,errorMessage);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_0011a480",
                "FUN_001053b5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_query_string_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_long_and_increment_pointer_0010870e",
                "param_1": "valueToStore",
                "param_2": "valueToSet",
                "param_3": "pointer",
                "puVar1": "pointerValue"
            },
            "code": "\nvoid storeLongAndIncrementPointer_0010870e(undefined8 valueToStore,undefined8 valueToSet,long *pointer)\n\n{\n  undefined8 *pointerValue;\n  \n  pointerValue = (undefined8 *)*pointer;\n  *pointerValue = valueToSet;\n  *pointer = (long)(pointerValue + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_long_and_increment_pointer_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_ptr",
                "param_2": "sym_ptr",
                "param_3": "type_ptr",
                "param_4": "undefined8_param",
                "param_5": "type_code",
                "param_6": "param_6_ptr",
                "param_7": "param_7_char",
                "param_8": "undefined8_param",
                "lVar1": "local_var_1",
                "cVar2": "local_var_2",
                "uVar3": "local_var_3",
                "uVar4": "result",
                "lVar5": "local_var_5",
                "uVar6": "local_var_6",
                "plVar7": "local_var_7",
                "__ptr": "ptr_1",
                "__ptr_00": "ptr_2",
                "bVar8": "local_var_8",
                "iVar9": "local_var_9",
                "pcVar10": "local_var_10",
                "uVar11": "local_var_11",
                "lVar12": "local_var_12",
                "uVar13": "local_var_13",
                "uVar14": "local_var_14",
                "uVar15": "local_var_15",
                "local_68": "local_array_68",
                "local_48": "local_char_48",
                "local_47": "local_byte_47"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_ptr,long *sym_ptr,long type_ptr,undefined8 undefined8_param,uint type_code,\n                 long *param_6_ptr,char param_7_char,undefined8 undefined8_param)\n\n{\n  long local_var_1;\n  char local_var_2;\n  undefined4 local_var_3;\n  undefined8 result;\n  long local_var_5;\n  undefined8 local_var_6;\n  long *local_var_7;\n  void *ptr_1;\n  void *ptr_2;\n  byte local_var_8;\n  int local_var_9;\n  char *local_var_10;\n  ulong local_var_11;\n  long local_var_12;\n  uint local_var_13;\n  uint local_var_14;\n  undefined8 local_var_15;\n  undefined local_array_68 [32];\n  char local_char_48;\n  byte local_byte_47;\n  \n  local_var_5 = *(long *)(coff_ptr + 0x110);\n  if ((~*(uint *)(local_var_5 + 0x38) & type_code) != 0) {\n    local_var_13 = (int)type_code >> ((byte)*(undefined4 *)(local_var_5 + 0x44) & 0x1f);\n    local_var_11 = (ulong)(type_code & *(uint *)(local_var_5 + 0x40));\n    local_var_8 = (byte)*(undefined4 *)(local_var_5 + 0x3c);\n    local_var_13 = (local_var_13 ^ type_code) & *(uint *)(local_var_5 + 0x38) ^ local_var_13;\n    if (local_var_11 == 1L << (local_var_8 & 0x3f)) {\n      result = parse_coff_type_0010dac0(coff_ptr,sym_ptr,type_ptr,undefined8_param,local_var_13,param_6_ptr,param_7_char,undefined8_param);\n      local_var_5 = FUN_00113d3a(result);\n      return local_var_5;\n    }\n    if (local_var_11 != 2L << (local_var_8 & 0x3f)) {\n      if (local_var_11 != 3L << (local_var_8 & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(local_var_5 + 0x3c),\n                          local_var_13);\n        FUN_00119ed0(result,type_code);\n        return 0;\n      }\n      local_var_14 = 0;\n      if (param_6_ptr != (long *)0x0) {\n        local_var_14 = (uint)*(ushort *)(param_6_ptr + 2);\n        local_var_7 = param_6_ptr + 2;\n        for (local_var_9 = 0; (*(short *)local_var_7 != 0 && (local_var_9 != 3)); local_var_9 = local_var_9 + 1) {\n          *(short *)local_var_7 = *(short *)((long)local_var_7 + 2);\n          local_var_7 = (long *)((long)local_var_7 + 2);\n        }\n        *(short *)local_var_7 = 0;\n      }\n      local_var_15 = 0;\n      result = undefined8_param;\n      local_var_6 = parse_coff_type_0010dac0(coff_ptr,sym_ptr,type_ptr,undefined8_param,local_var_13,param_6_ptr,0);\n      local_var_5 = *(long *)(type_ptr + 0x28);\n      if (local_var_5 == 0) {\n        result = FUN_00113dfe(4,0,local_var_15,result);\n        local_var_5 = FUN_0010c218(undefined8_param,\"int\",result);\n        *(long *)(type_ptr + 0x28) = local_var_5;\n      }\n      local_var_5 = FUN_00113c43(local_var_6,local_var_5,0,(long)(int)(local_var_14 - 1),0);\n      return local_var_5;\n    }\n    result = parse_coff_type_0010dac0(coff_ptr,sym_ptr,type_ptr,undefined8_param,local_var_13,param_6_ptr,param_7_char,undefined8_param);\n    local_var_5 = FUN_00113ce0(result,0,0);\n    return local_var_5;\n  }\n  if ((param_6_ptr != (long *)0x0) && (0 < *param_6_ptr)) {\n    local_var_7 = (long *)FUN_0010da0b(type_ptr);\n    if (*local_var_7 != 0) {\n      return *local_var_7;\n    }\n    local_var_5 = FUN_00113e23(local_var_7,0);\n    return local_var_5;\n  }\n  if (param_7_char == '\\0') {\n    param_6_ptr = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    local_var_5 = FUN_00113e17();\n    return local_var_5;\n  }\n  local_var_5 = *(long *)(type_ptr + 8 + (long)(int)type_code * 8);\n  if (local_var_5 != 0) {\n    return local_var_5;\n  }\n  switch(type_code) {\n  default:\n    result = FUN_00113e17();\n    local_var_10 = \"void\";\n    break;\n  case 2:\n    result = FUN_00113dfe(1,0);\n    local_var_10 = \"char\";\n    break;\n  case 3:\n    result = FUN_00113dfe(2,0);\n    local_var_10 = \"short\";\n    break;\n  case 4:\n    result = FUN_00113dfe(4,0);\n    local_var_10 = \"int\";\n    break;\n  case 5:\n    result = FUN_00113dfe(4,0);\n    local_var_10 = \"long\";\n    break;\n  case 6:\n    result = FUN_00113df2(4);\n    local_var_10 = \"float\";\n    break;\n  case 7:\n    result = FUN_00113df2(8);\n    local_var_10 = \"double\";\n    break;\n  case 8:\n    if (param_6_ptr == (long *)0x0) {\n      local_var_5 = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (param_6_ptr == (long *)0x0) {\n      local_var_5 = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    local_var_5 = FUN_0010e07c(coff_ptr,sym_ptr,type_ptr,result,param_6_ptr,undefined8_param);\nLAB_0010e046:\n    local_var_7 = (long *)FUN_0010da0b(type_ptr,undefined8_param);\n    *local_var_7 = local_var_5;\n    return local_var_5;\n  case 10:\n    if (param_6_ptr == (long *)0x0) {\n      local_var_5 = FUN_00113d6e(0,0);\n    }\n    else {\n      local_var_5 = param_6_ptr[3];\n      ptr_1 = (void *)xmalloc(0x50);\n      ptr_2 = (void *)xmalloc(0x50);\n      local_var_12 = 0;\n      do {\n        while( true ) {\n          if ((local_var_5 <= sym_ptr[3]) || (sym_ptr[1] <= sym_ptr[2])) goto LAB_0010e032;\n          local_var_9 = (int)local_var_12;\n          local_var_1 = *(long *)(*sym_ptr + sym_ptr[2] * 8);\n          local_var_2 = bfd_coff_get_syment(coff_ptr,local_var_1,local_array_68);\n          local_var_12 = (long)local_var_9;\n          if (local_var_2 == '\\0') {\n            local_var_3 = bfd_get_error();\n            result = bfd_errmsg(local_var_3);\n            local_var_6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(local_var_6,result);\n            free(ptr_1);\n            free(ptr_2);\n            local_var_5 = 0;\n            goto LAB_0010e046;\n          }\n          sym_ptr[2] = sym_ptr[2] + 1;\n          sym_ptr[3] = (ulong)local_byte_47 + 1 + sym_ptr[3];\n          if (local_char_48 != '\\x10') break;\n          if ((int)type_code <= local_var_9 + 1) {\n            type_code = type_code + 10;\n            ptr_1 = (void *)xrealloc(ptr_1);\n            ptr_2 = (void *)xrealloc(ptr_2,(long)(int)type_code << 3);\n          }\n          local_var_12 = *(long *)(local_var_1 + 0x20);\n          *(undefined8 *)((long)ptr_1 + (long)local_var_9 * 8) = *(undefined8 *)(local_var_1 + 8);\n          *(long *)((long)ptr_2 + (long)local_var_9 * 8) =\n               *(long *)(local_var_1 + 0x10) + *(long *)(local_var_12 + 0x30);\n          local_var_12 = (long)(local_var_9 + 1);\n        }\n      } while (local_char_48 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr_1 + local_var_12 * 8) = 0;\n      local_var_5 = FUN_00113d6e(ptr_1,ptr_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    local_var_5 = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = FUN_00113dfe(1,1);\n    local_var_10 = \"unsigned char\";\n    break;\n  case 0xd:\n    result = FUN_00113dfe(2,1);\n    local_var_10 = \"unsigned short\";\n    break;\n  case 0xe:\n    result = FUN_00113dfe(4,1);\n    local_var_10 = \"unsigned int\";\n    break;\n  case 0xf:\n    result = FUN_00113dfe(4,1);\n    local_var_10 = \"unsigned long\";\n    break;\n  case 0x10:\n    result = FUN_00113df2(0xc);\n    local_var_10 = \"long double\";\n  }\n  local_var_5 = FUN_0010c218(undefined8_param,local_var_10,result);\nLAB_0010e065:\n  *(long *)(type_ptr + 8 + (long)(int)type_code * 8) = local_var_5;\n  return local_var_5;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010da0b",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_0010dac0",
                "bfd_errmsg",
                "FUN_0010e07c",
                "bfd_coff_get_syment",
                "free",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "xrealloc",
                "FUN_00113df2",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "inputString",
                "param_2": "comparisonString",
                "__n": "len",
                "extraout_var": "result",
                "iVar1": "comparisonResult",
                "auVar2": "output"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *inputString,char *comparisonString)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t len;\n  undefined4 result;\n  undefined output [16];\n  \n  len = strlen(comparisonString);\n  comparisonResult = strncmp(inputString,comparisonString,len);\n  output._1_7_ = (undefined7)(CONCAT44(result,comparisonResult) >> 8);\n  output[0] = comparisonResult == 0;\n  output._8_8_ = in_RAX;\n  return output;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_error_message_0010882c",
                "piVar1": "errorPtr",
                "uVar2": "errorString"
            },
            "code": "\nvoid printTimeErrorMessage_0010882c(void)\n\n{\n  int *errorPtr;\n  undefined8 errorString;\n  \n  errorPtr = __errno_location();\n  strerror(*errorPtr);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorString);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_time_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_and_send_data_0010ebb0",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "length",
                "param_4": "additionalData",
                "cVar1": "character",
                "__s": "suffix",
                "sVar4": "prefixLength",
                "sVar5": "suffixLength",
                "__s_00": "formattedData",
                "uVar2": "adjustedLength",
                "uVar3": "result"
            },
            "code": "\nundefined4 formatAndSendData_0010ebb0(undefined8 data,char *prefix,int length,undefined8 additionalData)\n\n{\n  char character;\n  uint adjustedLength;\n  undefined4 result;\n  char *suffix;\n  size_t prefixLength;\n  size_t suffixLength;\n  char *formattedData;\n  \n  suffix = (char *)FUN_00109b2f();\n  adjustedLength = length - 1;\n  if (adjustedLength < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)adjustedLength * 4);\n    character = (&DAT_00121334)[adjustedLength];\n    prefixLength = strlen(prefix);\n    suffixLength = strlen(suffix);\n    formattedData = (char *)xmalloc(prefixLength + 3 + suffixLength);\n    sprintf(formattedData,\"%s:%c%s\",prefix,(ulong)(uint)(int)character,suffix);\n    free(suffix);\n    result = FUN_0010e2f0(data,result,0,additionalData,formattedData);\n    if ((char)result != '\\0') {\n      free(formattedData);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_data_00113b98",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "param",
                "lVar1": "result",
                "plVar2": "newData"
            },
            "code": "\nlong initializeData_00113b98(long data,long value1,long value2,undefined param)\n\n{\n  long result;\n  long *newData;\n  \n  if ((data != 0) && (result = FUN_00112904(0x13,0), result != 0)) {\n    newData = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)newData + 0x19) = 0;\n    *newData = data;\n    *(undefined4 *)((long)newData + 0x1c) = 0;\n    newData[1] = value1;\n    newData[2] = value2;\n    *(undefined *)(newData + 3) = param;\n    *(long **)(result + 0x10) = newData;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_data_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "find_value_or_traverse_00115d70",
                "param_1": "value",
                "param_2": "hash_table",
                "lVar1": "result",
                "local_18": "value_ptr",
                "local_10": "is_found"
            },
            "code": "\nundefined find_value_or_traverse_00115d70(undefined8 value,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 value_ptr;\n  undefined is_found;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(hash_table,value);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    value_ptr = value;\n    htab_traverse(hash_table,FUN_0011a170,&value_ptr);\n  }\n  return is_found;\n}\n\n",
            "called": [
                "FUN_0011a170",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001159d0",
                "FUN_0010554f",
                "FUN_001082df"
            ],
            "imported": false,
            "current_name": "find_value_or_traverse_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "resize_and_store_data_00109be3",
                "param_1": "dataStructPtr",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "newAllocatedMemoryPtr",
                "puVar2": "dataPtr",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 resizeAndStoreData_00109be3(long dataStructPtr,undefined8 value,undefined4 flag)\n\n{\n  undefined8 newAllocatedMemoryPtr;\n  undefined8 *dataPtr;\n  uint currentSize;\n  \n  if (*(uint *)(dataStructPtr + 0x2c) <= *(uint *)(dataStructPtr + 0x28)) {\n    currentSize = *(uint *)(dataStructPtr + 0x2c) + 10;\n    *(uint *)(dataStructPtr + 0x2c) = currentSize;\n    newAllocatedMemoryPtr = xrealloc(*(undefined8 *)(dataStructPtr + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataStructPtr + 0x20) = newAllocatedMemoryPtr;\n  }\n  currentSize = *(uint *)(dataStructPtr + 0x28);\n  dataPtr = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataStructPtr + 0x20));\n  *dataPtr = value;\n  *(undefined4 *)(dataPtr + 1) = flag;\n  *(uint *)(dataStructPtr + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)dataPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "resize_and_store_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_and_null_terminate_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "destinationBuffer"
            },
            "code": "\nvoid copyAndNullTerminateString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *destinationBuffer;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  destinationBuffer = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)destinationBuffer + stringLength) = 0;\n  memcpy(destinationBuffer,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strnlen",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "send_data_0010e918",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "length",
                "__s": "result",
                "sVar2": "dataLength",
                "sVar3": "resultLength",
                "__s_00": "combinedData",
                "uVar1": "status"
            },
            "code": "\nundefined4 sendData_0010e918(undefined8 socket,char *data,undefined8 length)\n\n{\n  undefined4 status;\n  char *result;\n  size_t dataLength;\n  size_t resultLength;\n  char *combinedData;\n  \n  result = (char *)FUN_00109b2f();\n  dataLength = strlen(data);\n  resultLength = strlen(result);\n  combinedData = (char *)xmalloc(dataLength + 0x14 + resultLength);\n  sprintf(combinedData,\"%s:c=e%s,%ld\",data,result,length);\n  free(result);\n  status = FUN_0010e2f0(socket,0x80,0,0,combinedData);\n  if ((char)status != '\\0') {\n    free(combinedData);\n  }\n  return status;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ae0e",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "length",
                "iVar4": "variable4",
                "iVar5": "variable5",
                "cVar6": "flag",
                "uVar7": "temp3",
                "__ptr": "buffer",
                "lVar8": "temp4",
                "uVar9": "temp5",
                "iVar10": "variable10",
                "uVar11": "temp6",
                "puVar12": "pointer",
                "lVar13": "temp7",
                "puVar14": "pointer2",
                "puVar15": "pointer3",
                "pvVar16": "pointer4",
                "uVar17": "temp8",
                "uVar18": "temp9",
                "uVar19": "temp10",
                "bVar20": "byteVar",
                "local_38": "sectionLength",
                "local_30": "sectionData"
            },
            "code": "\nvoid reverseSection_00116110(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long length;\n  int variable4;\n  int variable5;\n  char flag;\n  undefined8 temp3;\n  undefined8 *buffer;\n  long temp4;\n  ulong temp5;\n  int variable10;\n  ulong temp6;\n  undefined *pointer;\n  long temp7;\n  undefined8 *pointer2;\n  undefined8 *pointer3;\n  void *pointer4;\n  ulong temp8;\n  ulong temp9;\n  ulong temp10;\n  byte byteVar;\n  ulong sectionLength;\n  void *sectionData;\n  \n  byteVar = 0;\n  flag = FUN_00115f50(param1,param2,1);\n  if (flag != '\\0') {\n    return;\n  }\n  sectionLength = param2[8];\n  length = param2[0xc];\n  if (((*(byte *)((long)param2 + 0x25) & 1) == 0) || ((*(byte *)(length + 0x25) & 1) == 0)) {\n    temp7 = FUN_00114190(*param2,0,0x80);\n    if (temp7 == 0) {\n      return;\n    }\n    if ((*(byte *)(temp7 + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionLength);\n    pointer3 = buffer;\n    if (7 < sectionLength) {\n      for (temp9 = sectionLength >> 3; temp9 != 0; temp9 = temp9 - 1) {\n        *pointer3 = 0;\n        pointer3 = pointer3 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    pointer2 = pointer3;\n    if ((sectionLength & 4) != 0) {\n      pointer2 = (undefined8 *)((long)pointer3 + (ulong)byteVar * -8 + 4);\n      *(undefined4 *)pointer3 = 0;\n    }\n    pointer3 = pointer2;\n    if ((sectionLength & 2) != 0) {\n      pointer3 = (undefined8 *)((long)pointer2 + (ulong)byteVar * -4 + 2);\n      *(undefined2 *)pointer2 = 0;\n    }\n    if ((sectionLength & 1) != 0) {\n      *(undefined *)pointer3 = 0;\n    }\n    flag = bfd_set_section_contents(param3,length,buffer,0);\n    if (flag != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,param3,length,0);\n    free(buffer);\n    return;\n  }\n  sectionData = (void *)0x0;\n  flag = bfd_get_full_section_contents(param1,param2,&sectionData);\n  if ((flag == '\\0') ||\n     (flag = bfd_convert_section_contents(param1,param2,param3,&sectionData,&sectionLength),\n     variable10 = DAT_001278e8, flag == '\\0')) {\n    bfd_set_section_size(length,0);\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,param1,param2,0);\n    free(sectionData);\n    return;\n  }\n  variable4 = DAT_001264b8;\n  variable5 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    temp9 = (ulong)DAT_001278e8;\n    if (sectionLength % temp9 != 0) {\n      temp2 = *param2;\n      temp3 = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(temp3,temp2,variable10);\n    }\n    variable10 = DAT_001278e8 / 2;\n    temp6 = 0;\n    while (temp10 = temp6, variable4 = DAT_001264b8, variable5 = DAT_001264bc, temp10 < sectionLength) {\n      temp6 = temp9 + temp10;\n      temp8 = temp6;\n      for (temp5 = 0; temp5 < (ulong)(long)variable10; temp5 = temp5 + 1) {\n        temp8 = temp8 - 1;\n        pointer = (undefined *)(temp10 + temp5 + (long)sectionData);\n        temp1 = *pointer;\n        *pointer = *(undefined *)((long)sectionData + temp8);\n        *(undefined *)((long)sectionData + temp8) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = variable4;\n  DAT_001264bc = variable5;\n  if (-1 < variable5) {\n    temp9 = (ulong)DAT_00127a1c;\n    variable10 = (int)((ulong)param2[7] % temp9);\n    temp6 = ((long)variable5 - (long)variable10) + (long)sectionData;\n    if (variable5 < variable10) {\n      temp6 = temp6 + temp9;\n    }\n    temp7 = (sectionLength + (long)sectionData) - temp6;\n    pointer4 = sectionData;\n    for (; temp6 < sectionLength + (long)sectionData; temp6 = temp6 + temp9) {\n      for (temp4 = 0; ((int)temp4 < variable4 && (temp4 != temp7)); temp4 = temp4 + 1) {\n        *(undefined *)((long)pointer4 + temp4) = *(undefined *)(temp6 + temp4);\n      }\n      pointer4 = (void *)((long)pointer4 + temp4);\n      temp7 = temp7 - temp9;\n    }\n    sectionLength = ((((temp9 - 1) + sectionLength) - (long)variable5) / temp9) * (long)variable4;\n    temp9 = *(ulong *)(length + 0x38) / temp9;\n    *(ulong *)(length + 0x38) = temp9;\n    if (variable5 < variable10) {\n      *(ulong *)(length + 0x38) = temp9 + 1;\n      flag = bfd_set_section_contents(param3,length,sectionData,0,sectionLength);\n      if (flag == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  flag = bfd_set_section_contents(param3,length,sectionData,0,sectionLength);\n  if (flag == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "FUN_00114190",
                "FUN_001126c0",
                "bfd_get_full_section_contents",
                "xmalloc",
                "bfd_set_section_size",
                "free",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00115f50",
                "FUN_00108466"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "debug_str",
                "param_3": "undef_param",
                "param_4": "result",
                "lVar1": "current_block_ptr",
                "uVar2": "translation",
                "pcVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 debug_str,undefined8 undef_param,undefined8 result)\n\n{\n  long current_block_ptr;\n  undefined8 translation;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block_ptr = *(long *)(block_ptr + 0x20), current_block_ptr == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block_ptr + 8) != 0) {\n      *(undefined8 *)(current_block_ptr + 0x20) = debug_str;\n      translation = CONCAT71((int7)((ulong)current_block_ptr >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block_ptr + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  translation = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",translation);\n  translation = 0;\nLAB_0010bf84:\n  return_value._8_8_ = result;\n  return_value._0_8_ = translation;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "FUNC_0010c95e"
            },
            "code": "\nundefined8 FUNC_0010c95e(undefined8 *param_1,byte **param_2,long *param_3)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  char cVar7;\n  uint uVar8;\n  byte *pbVar9;\n  long lVar10;\n  undefined8 uVar11;\n  char *pcVar12;\n  size_t sVar13;\n  ulong uVar14;\n  void *__ptr;\n  long lVar15;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pcVar19;\n  byte *pbVar20;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    pbVar20 = *param_2;\n    bVar1 = *pbVar20;\n    if ('T' < (char)bVar1) break;\n    if ((char)bVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(bVar1) {\n    case 0x41:\n      lVar15 = 0;\n      pbVar3 = pbVar20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = FUN_00113b71(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x46:\n      *param_2 = pbVar20 + 1;\n      if (param_3 == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      cVar7 = FUN_0010d882(param_1,param_2,ppcVar18,puVar16);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        lVar15 = FUN_00113ce0(*param_3,local_40[0],local_48 & 0xff);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *param_2 = pbVar20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *param_2 = pbVar20 + 1;\n      if (((&_sch_istable)[(ulong)pbVar20[1] * 2] & 4) == 0) {\n        if (pbVar20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = FUN_0010d559(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uVar8 = FUN_00108e76(param_2);\n        pbVar3 = *param_2;\n        sVar13 = strlen((char *)pbVar3);\n        if (sVar13 < uVar8) goto switchD_0010cdf9_caseD_60;\n        *param_2 = pbVar3 + uVar8;\n        if ((param_3 != (long *)0x0) &&\n           (local_40[0] = (char *)FUN_0010afd5(*param_1,param_1[1],pbVar3,uVar8,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      bVar2 = **param_2;\n      if (bVar1 == 0x4d) {\n        if ((bVar2 == 0x43) || (bVar2 == 0x56)) {\n          *param_2 = *param_2 + 1;\n        }\n        if (**param_2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *param_2 = *param_2 + 1;\n        if (param_3 == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        cVar7 = FUN_0010d882(param_1,param_2,puVar16,puVar17);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        if (bVar1 != 0x4d) {\n          lVar15 = FUN_00113bfa(local_40[0],*param_3);\n          *param_3 = lVar15;\n          return 1;\n        }\n        lVar15 = FUN_00113b98(*param_3,local_40[0],local_48,local_49);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uVar11 = FUN_0010d559(param_1,param_2,param_3);\n      return uVar11;\n    case 0x52:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = FUN_00113cb9(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x54:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUN_00108ea1(param_2,&local_48);\n      if (cVar7 != '\\0') {\n        if ((uint)local_48 < *(uint *)(param_1 + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + param_1[4]);\n          cVar7 = FUNC_0010c95e(param_1,local_40,param_3);\n          if (cVar7 == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (bVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *param_2 = pbVar20 + 1;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar15 = FUN_00113d3a(*param_3);\n    *param_3 = lVar15;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bVar6 = false;\n  bVar4 = false;\n  cVar7 = '\\0';\n  bVar5 = false;\n  do {\n    pbVar3 = *param_2;\n    bVar1 = *pbVar3;\n    if (bVar1 == 0x55) {\n      cVar7 = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)bVar1) {\n      if (bVar1 == 0x56) {\n        bVar6 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)bVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)bVar1 < '_') goto LAB_0010cdfb;\n      switch(bVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (param_3 == (long *)0x0) {\nLAB_0010d0aa:\n          *param_2 = pbVar3 + 1;\n          return 1;\n        }\n        lVar15 = FUN_0010914e(*param_1,&DAT_00120436);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00112904(6,4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned char\";\n        if ((cVar7 == '\\0') && (pcVar19 = \"char\", bVar4)) {\n          pcVar19 = \"signed char\";\n        }\n        lVar15 = FUN_0010914e(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113dfe(1,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = FUN_0010914e(*param_1,\"float\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113df2(4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned int\";\n        pcVar12 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long unsigned int\";\n        pcVar12 = \"long int\";\nLAB_0010ced2:\n        if (cVar7 == '\\0') {\n          pcVar19 = pcVar12;\n        }\n        lVar15 = FUN_0010914e(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113dfe(4,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pcVar19 = \"long double\";\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        lVar15 = FUN_0010914e(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113df2(8);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"short unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"short int\";\n        }\n        lVar15 = FUN_0010914e(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113dfe(2,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = FUN_0010d21c(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        sVar13 = strlen(local_40[0]);\n        lVar15 = FUN_0010afd5(*param_1,param_1[1],local_40[0],sVar13 & 0xffffffff,9);\n        *param_3 = lVar15;\n        free(local_40[0]);\n        lVar15 = *param_3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = FUN_0010914e(*param_1,&DAT_00120495);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113e17();\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = FUN_0010914e(*param_1,\"__wchar_t\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113dfe(2,1);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long long unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"long long int\";\n        }\n        lVar15 = FUN_0010914e(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = FUN_00113dfe(8,cVar7);\n          *param_3 = lVar15;\n        }\n      }\n      *param_2 = *param_2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (bVar1 == 0x43) {\n      bVar5 = true;\n      goto LAB_0010cd84;\n    }\n    if (bVar1 != 0x53) goto LAB_0010cdc5;\n    bVar4 = true;\nLAB_0010cd84:\n    *param_2 = pbVar3 + 1;\n  } while( true );\nLAB_0010ca26:\n  pbVar9 = pbVar3 + 1;\n  *param_2 = pbVar9;\n  bVar1 = *pbVar9;\n  if (bVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (bVar1 == 0x5f) {\n    *param_2 = pbVar3 + 2;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar10 = FUN_0010914e(*param_1,\"int\");\n    if (lVar10 == 0) {\n      lVar10 = FUN_00113dfe(4,0);\n    }\n    lVar15 = FUN_00113c43(*param_3,lVar10,0,lVar15,0);\n    *param_3 = lVar15;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)bVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  lVar15 = lVar15 * 10 + (long)((char)bVar1 + -0x30);\n  pbVar3 = pbVar9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)bVar1 < ':') {\n    if ((char)bVar1 < '0') {\n      if (bVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pbVar20);\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((bVar1 != 0x47) || (*param_2 = pbVar3 + 1, ((&_sch_istable)[(ulong)pbVar3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbVar20 = *param_2;\n  uVar8 = FUN_00108e76(param_2);\n  pbVar3 = *param_2;\n  sVar13 = strlen((char *)pbVar3);\n  uVar14 = (ulong)uVar8;\n  if (uVar14 <= sVar13) {\n    *param_2 = pbVar3 + uVar14;\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    __ptr = (void *)FUN_00109a0b(pbVar3,uVar14);\n    lVar15 = FUN_0010914e(*param_1,__ptr);\n    *param_3 = lVar15;\n    free(__ptr);\n    if (*param_3 == 0) {\n      lVar15 = FUN_0010afd5(*param_1,param_1[1],pbVar3,(int)*param_2 - (int)pbVar3,0);\n      *param_3 = lVar15;\njoined_r0x0010d1d8:\n      if (lVar15 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bVar5) {\n      lVar15 = FUN_00113b71(*param_3);\n      *param_3 = lVar15;\n    }\n    if (bVar6) {\n      lVar15 = FUN_00113b4a(*param_3);\n      *param_3 = lVar15;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pbVar20);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_00113c43",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010d21c",
                "strlen",
                "FUN_00109a0b",
                "FUN_00112904",
                "free",
                "FUN_00113bfa",
                "FUN_0010911f",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00108ea1",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010c95e",
                "FUN_00108e76"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_00113e5e",
                "FUN_0010d7d4",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "FUNC_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUNC_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "FUN_001126c0",
                "xmalloc",
                "FUN_00115f30",
                "FUN_0010554f",
                "FUN_00119ed0",
                "fclose",
                "fopen",
                "FUN_00114190",
                "fwrite",
                "bfd_get_full_section_contents",
                "FUN_0010551d",
                "free",
                "bfd_set_format",
                "bfd_get_section_by_name",
                "FUN_001163d0",
                "FUN_00105828",
                "bfd_set_section_size",
                "FUN_00115530",
                "bfd_get_arch",
                "bfd_make_section_with_flags",
                "__errno_location",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "bfd_malloc_and_get_section"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_time_0011a350",
                "param_1": "path",
                "param_2": "data",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMsg",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "timeSpec5"
            },
            "code": "\nvoid setTime_0011a350(char *path,long data)\n\n{\n  int result;\n  int *error;\n  char *errorMessage;\n  undefined8 translatedMsg;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 timeSpec5;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  timeSpec5 = *(undefined4 *)(data + 0x58);\n  uStack_24 = *(undefined4 *)(data + 0x5c);\n  uStack_20 = *(undefined4 *)(data + 0x60);\n  uStack_1c = *(undefined4 *)(data + 100);\n  timeSpec1 = *(undefined4 *)(data + 0x48);\n  timeSpec2 = *(undefined4 *)(data + 0x4c);\n  timeSpec3 = *(undefined4 *)(data + 0x50);\n  timeSpec4 = *(undefined4 *)(data + 0x54);\n  result = utimensat(-100,path,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorMessage = strerror(*error);\n    translatedMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(translatedMsg,path,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "errorStatus",
                "uVar2": "errorMessage",
                "in_R10": "undefinedValue"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int errorStatus;\n  undefined8 errorMessage;\n  undefined8 undefinedValue;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorDescription,errorMessage,undefinedValue);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,undefinedValue);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "paramPointer",
                "param_2": "paramValue",
                "param_3": "paramSize",
                "param_4": "paramVar",
                "param_5": "paramString",
                "lVar1": "localVar1",
                "uVar2": "errorVar",
                "lVar3": "lookupResult",
                "uVar4": "errmsgVar",
                "uVar5": "gettextVar",
                "sVar6": "stringLength",
                "lVar7": "resultVar",
                "local_44": "localVar_44",
                "local_3c": "localVar_3c"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *paramPointer,undefined paramValue,int paramSize,undefined8 paramVar,char *paramString)\n\n{\n  long localVar1;\n  undefined4 errorVar;\n  long lookupResult;\n  undefined8 errmsgVar;\n  undefined8 gettextVar;\n  size_t stringLength;\n  long resultVar;\n  undefined4 localVar_44;\n  undefined uStack_40;\n  undefined uStack_3f;\n  undefined2 uStack_3e;\n  undefined4 localVar_3c [3];\n  \n  if (paramString == (char *)0x0) {\n    resultVar = 0;\n  }\n  else {\n    lookupResult = bfd_hash_lookup(paramPointer + 7,paramString,1,1);\n    if (lookupResult == 0) {\n      errorVar = bfd_get_error();\n      errmsgVar = bfd_errmsg(errorVar);\n      gettextVar = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(gettextVar,errmsgVar);\n      return 0;\n    }\n    resultVar = *(long *)(lookupResult + 0x20);\n    if (resultVar == -1) {\n      resultVar = paramPointer[6];\n      localVar1 = paramPointer[5];\n      *(long *)(lookupResult + 0x20) = resultVar;\n      if (localVar1 == 0) {\n        paramPointer[4] = lookupResult;\n      }\n      else {\n        *(long *)(localVar1 + 0x18) = lookupResult;\n      }\n      paramPointer[5] = lookupResult;\n      stringLength = strlen(paramString);\n      paramPointer[6] = resultVar + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramPointer + 8) + 0x50))(resultVar,&localVar_44);\n  uStack_3f = 0;\n  uStack_40 = paramValue;\n  (**(code **)(*(long *)(*paramPointer + 8) + 0x68))((long)paramSize,&uStack_3e);\n  (**(code **)(*(long *)(*paramPointer + 8) + 0x50))(paramVar,localVar_3c);\n  if ((ulong)paramPointer[3] < paramPointer[2] + 0xcU) {\n    paramPointer[3] = paramPointer[3] * 2;\n    resultVar = xrealloc(paramPointer[1]);\n    paramPointer[1] = resultVar;\n  }\n  resultVar = paramPointer[2];\n  lookupResult = paramPointer[1];\n  *(ulong *)(lookupResult + resultVar) = CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,localVar_44)));\n  *(undefined4 *)(lookupResult + 8 + resultVar) = localVar_3c[0];\n  paramPointer[2] = paramPointer[2] + 0xc;\n  return CONCAT71((int7)((ulong)resultVar >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_00119ed0",
                "xrealloc",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e918",
                "FUN_0010e439",
                "FUN_0010e5db",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010ed2c",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "message",
                "pcVar3": "delimiter",
                "pcVar4": "newInput",
                "sVar5": "length",
                "iVar6": "inputLength",
                "uVar7": "sectionFlags",
                "auVar8": "resultStruct"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *input,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int result;\n  undefined8 message;\n  char *delimiter;\n  char *newInput;\n  size_t length;\n  int inputLength;\n  uint sectionFlags;\n  undefined resultStruct [16];\n  \n  sectionFlags = 0;\n  do {\n    delimiter = strchr(input,0x2c);\n    if (delimiter == (char *)0x0) {\n      length = strlen(input);\n      inputLength = (int)length;\n      newInput = (char *)0x0;\n    }\n    else {\n      newInput = delimiter + 1;\n      inputLength = (int)delimiter - (int)input;\n    }\n    length = (size_t)inputLength;\n    result = strncasecmp(\"alloc\",input,length);\n    if (result == 0) {\n      sectionFlags = sectionFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",input,length);\n      if (result == 0) {\n        sectionFlags = sectionFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",input,length);\n        if (result == 0) {\n          sectionFlags = sectionFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",input,length);\n          if (result == 0) {\n            sectionFlags = sectionFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",input,length);\n            if (result == 0) {\n              sectionFlags = sectionFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",input,length);\n              if (result == 0) {\n                sectionFlags = sectionFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",input,length);\n                if (result == 0) {\n                  sectionFlags = sectionFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",input,length);\n                  if (result == 0) {\n                    sectionFlags = sectionFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",input,length);\n                    if (result == 0) {\n                      sectionFlags = sectionFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",input,length);\n                      if (result == 0) {\n                        sectionFlags = sectionFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",input,length);\n                        if (result == 0) {\n                          sectionFlags = sectionFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",input,length);\n                          if (result == 0) {\n                            sectionFlags = sectionFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",input,length);\n                            if (result != 0) {\n                              delimiter = (char *)xmalloc((long)(inputLength + 1));\n                              strncpy(delimiter,input,length);\n                              delimiter[length] = '\\0';\n                              message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(message,delimiter);\n                              message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            sectionFlags = sectionFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    input = newInput;\n  } while (newInput != (char *)0x0);\n  resultStruct._4_4_ = 0;\n  resultStruct._0_4_ = sectionFlags;\n  resultStruct._8_8_ = param_4;\n  return resultStruct;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "param_1": "paramArray",
                "ppcVar2": "ptrToCharPtr",
                "__s": "inputString",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar1": "totalLength"
            },
            "code": "\nchar * getFormattedString_001125fa(char **paramArray)\n\n{\n  ulong totalLength;\n  char **ptrToCharPtr;\n  size_t length1;\n  size_t length2;\n  char *inputString;\n  \n  if (paramArray == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptrToCharPtr = (char **)paramArray[0x1d];\n  inputString = *paramArray;\n  if ((ptrToCharPtr != (char **)0x0) && ((*(byte *)((long)ptrToCharPtr + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*ptrToCharPtr);\n    length2 = strlen(inputString);\n    totalLength = length1 + 3 + length2;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)paramArray[0x1d],*paramArray);\n    inputString = DAT_00127a30;\n  }\n  return inputString;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "get_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "FUNC_00108f05"
            },
            "code": "\nundefined FUNC_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "FUNC_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "ptrStart",
                "puVar2": "ptrNext"
            },
            "code": "\nvoid clearMemory_00108863(void)\n\n{\n  undefined4 *ptrStart;\n  undefined4 *ptrNext;\n  \n  ptrStart = (undefined4 *)&DAT_00127720;\n  do {\n    ptrNext = ptrStart + 6;\n    free(*(void **)(ptrStart + 4));\n    *(undefined8 *)(ptrStart + 4) = 0;\n    ptrStart = ptrNext;\n  } while (ptrNext != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_debug_source_00108f08",
                "param_1": "debugTablePtr",
                "param_2": "filename",
                "iVar1": "comparisonResult",
                "uVar2": "returnValue",
                "puVar3": "currentEntry",
                "puVar4": "tempEntry",
                "lVar5": "loopCounter",
                "puVar6": "debugTablePtr",
                "pcVar7": "currentFilename",
                "puVar8": "prevEntry",
                "bVar9": "flag"
            },
            "code": "\n\n\nundefined8 addDebugSource_00108f08(long debugTablePtr,char *filename)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined8 *currentEntry;\n  undefined8 *tempEntry;\n  long loopCounter;\n  undefined8 *debugTablePtr;\n  char *currentFilename;\n  undefined8 *prevEntry;\n  byte flag;\n  \n  flag = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  if (*(long *)(debugTablePtr + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    for (currentEntry = *(undefined8 **)(*(long *)(debugTablePtr + 8) + 8); currentEntry != (undefined8 *)0x0;\n        currentEntry = (undefined8 *)*currentEntry) {\n      comparisonResult = filename_cmp(currentEntry[1],currentFilename);\n      if (comparisonResult == 0) goto LAB_00108fad;\n    }\n    currentEntry = (undefined8 *)xmalloc(0x18);\n    debugTablePtr = *(undefined8 **)(debugTablePtr + 0x10);\n    prevEntry = currentEntry;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)prevEntry = 0;\n      prevEntry = (undefined8 *)((long)prevEntry + (ulong)flag * -8 + 4);\n    }\n    currentEntry[1] = currentFilename;\n    prevEntry = (undefined8 *)*debugTablePtr;\n    while (tempEntry = prevEntry, tempEntry != (undefined8 *)0x0) {\n      debugTablePtr = tempEntry;\n      prevEntry = (undefined8 *)*tempEntry;\n    }\n    *debugTablePtr = currentEntry;\nLAB_00108fad:\n    *(undefined8 **)(debugTablePtr + 0x10) = currentEntry;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_debug_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "cleanup_directory_00114b84",
                "param_9": "directory_path"
            },
            "code": "\nvoid cleanup_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "cleanup_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "handle_param_00114190",
                "param_1": "param",
                "param_2": "flag",
                "param_3": "options",
                "uVar1": "optionMask",
                "plVar2": "matchPattern",
                "pplVar3": "result",
                "iVar4": "comparisonResult",
                "uVar5": "errorMessage",
                "pplVar6": "currentResult",
                "pplVar7": "previousResult",
                "pplVar8": "nextResult"
            },
            "code": "\nlong ** handle_param_00114190(long *param,char flag,uint options)\n\n{\n  uint optionMask;\n  long *matchPattern;\n  long **result;\n  int comparisonResult;\n  undefined8 errorMessage;\n  long **currentResult;\n  long **previousResult;\n  long **nextResult;\n  \n  previousResult = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((options & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      currentResult = (long **)*previousResult;\n      if (currentResult == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previousResult = (long **)0x0;\n    }\n    else {\n      matchPattern = DAT_001278e0[1];\n      if (*(char *)matchPattern == '!') {\n        comparisonResult = fnmatch((char *)((long)matchPattern + 1),(char *)param,0);\n        currentResult = previousResult;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)matchPattern,(char *)param,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      currentResult = (long **)*previousResult;\n      if (currentResult == (long **)0x0) goto LAB_00114245;\n    }\n    if ((options & *(uint *)((long)currentResult + 0x14)) != 0) {\n      matchPattern = currentResult[1];\n      if (*(char *)matchPattern == '!') {\n        comparisonResult = fnmatch((char *)((long)matchPattern + 1),(char *)param,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentResult + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)matchPattern,(char *)param,0);\n        if ((previousResult == (long **)0x0) && (comparisonResult == 0)) {\n          nextResult = (long **)*currentResult;\n          previousResult = currentResult;\n          if (nextResult == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextResult = (long **)*currentResult;\n    currentResult = previousResult;\n    if (nextResult != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_001278e0[1],(char *)param);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      optionMask = *(uint *)((long)previousResult + 0x14);\n      if ((((optionMask & 1) != 0) && ((options & 2) != 0)) ||\n         (((options & 1) != 0 && ((optionMask & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(errorMessage,param);\n      }\n      if ((((optionMask & 8) != 0) && ((options & 0x10) != 0)) || ((options & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(errorMessage,param);\n      }\n      if ((((optionMask & 0x20) == 0) || ((options & 0x40) == 0)) && ((options & 0x60) != 0x60)) {\n        *(uint *)((long)previousResult + 0x14) = optionMask | options;\n        return previousResult;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(errorMessage,param);\n    }\n    previousResult = (long **)*previousResult;\n    if (previousResult == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)previousResult[1],(char *)param);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextResult = (long **)*previousResult;\n    currentResult = (long **)0x0;\n    if (nextResult == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previousResult = currentResult;\n      if (flag == '\\0') {\n        while (currentResult = nextResult, result = previousResult, nextResult = currentResult,\n              (options & *(uint *)((long)currentResult + 0x14)) != 0) {\n          matchPattern = currentResult[1];\n          if (*(char *)matchPattern == '!') {\n            comparisonResult = fnmatch((char *)((long)matchPattern + 1),(char *)param,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextResult = (long **)*currentResult;\n            if ((long **)*currentResult == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)matchPattern,(char *)param,0);\n            if ((previousResult == (long **)0x0) && (comparisonResult == 0)) {\n              previousResult = currentResult;\n              nextResult = (long **)*currentResult;\n              if ((long **)*currentResult == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextResult = (long **)*currentResult;\n              if ((long **)*currentResult == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextResult[1],(char *)param);\n        result = currentResult;\n        previousResult = nextResult;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      currentResult = result;\n      nextResult = (long **)*nextResult;\n      previousResult = currentResult;\n    } while (nextResult != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      currentResult = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentResult + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentResult + 2) = 0;\n      *(uint *)((long)currentResult + 0x14) = options;\n      currentResult[5] = (long *)0x0;\n      previousResult = currentResult;\n      *currentResult = (long *)DAT_001278e0;\n      DAT_001278e0 = previousResult;\n      currentResult[1] = param;\n      return currentResult;\n    }\n  }\nLAB_00114212:\n  if (previousResult == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previousResult + 2) = 1;\n  return previousResult;\n}\n\n",
            "called": [
                "fnmatch",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00115dc0",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "handle_param_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "analyze_build_attribute_note_00116490",
                "param_1": "param1",
                "param_2": "noteSize",
                "param_3": "noteData",
                "param_4": "param4",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "flag1",
                "puVar5": "ptr1",
                "iVar6": "var6",
                "lVar7": "loopVar",
                "uVar8": "var8",
                "in_RAX": "currentNoteType",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "allocPtr",
                "uVar13": "var13",
                "unaff_RBX": "remainingDataSize",
                "unaff_RBP": "baseAddr",
                "puVar14": "ptr2",
                "puVar15": "ptr3",
                "cVar16": "charVar",
                "puVar17": "ptr4",
                "puVar18": "ptr5",
                "in_R11": "nameAddr",
                "unaff_R12": "attributeInfo",
                "puVar19": "ptr6",
                "unaff_R13": "flags",
                "__nmemb": "numElements",
                "unaff_R14": "ptr7",
                "puVar20": "ptr8",
                "bVar21": "byteVar",
                "iVar22": "var22",
                "unaff_retaddr": "returnAddress",
                "param_7": "param7",
                "param_8": "versionFlag",
                "param_9": "versionData",
                "in_stack_00000020": "mallocSize",
                "in_stack_00000028": "notesArray",
                "in_stack_00000030": "buffer",
                "in_stack_00000038": "noteFlag",
                "in_stack_00000040": "noteFlag2",
                "in_stack_00000048": "messageArray"
            },
            "code": "\nulong analyzeBuildAttributeNote_00116490(undefined8 param1,ulong noteSize,ulong noteData,long param4)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag1;\n  ulong *ptr1;\n  int var6;\n  long loopVar;\n  undefined8 var8;\n  ulong currentNoteType;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *allocPtr;\n  ulong var13;\n  ulong remainingDataSize;\n  ulong baseAddr;\n  ulong *ptr2;\n  undefined *ptr3;\n  char charVar;\n  undefined *ptr4;\n  undefined *ptr5;\n  ulong nameAddr;\n  ulong *attributeInfo;\n  ulong *ptr6;\n  ulong flags;\n  size_t numElements;\n  undefined8 *ptr7;\n  ulong *ptr8;\n  byte byteVar;\n  int var22;\n  ulong returnAddress;\n  ulong param7;\n  uint versionFlag;\n  ulong versionData;\n  ulong mallocSize;\n  ulong *notesArray;\n  undefined *buffer;\n  uint noteFlag;\n  uint noteFlag2;\n  undefined8 *messageArray;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  loopVar = param4;\n  var10 = baseAddr;\n  var13 = flags;\n  if (currentNoteType == 0) {\n    if (noteSize == 0x100) {\n      attributeInfo[7] = returnAddress;\n      var11 = returnAddress;\nLAB_001164af:\n      var9 = flags;\n      var13 = flags;\n      returnAddress = var11;\n    }\n    else {\n      attributeInfo[7] = versionData;\nLAB_0011669e:\n      var10 = baseAddr;\n      var9 = baseAddr;\n    }\nLAB_001164bb:\n    attributeInfo[8] = var9;\n    if (*(char *)((attributeInfo[3] - 1) + noteData) != '\\0') {\n      loopVar = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = attributeInfo + 9;\n    if (0xb < remainingDataSize) {\n      var9 = (**(code **)(ptr7[1] + 0x40))(loopVar);\n      *ptr6 = var9;\n      var9 = (**(code **)(ptr7[1] + 0x40))(loopVar + 4);\n      attributeInfo[10] = var9;\n      noteSize = (**(code **)(ptr7[1] + 0x40))(loopVar + 8);\n      noteData = *ptr6;\n      attributeInfo[0xb] = noteSize;\n      currentNoteType = attributeInfo[10];\n      var9 = noteData + 3 & 0xfffffffffffffffc;\n      attributeInfo[0xf] = var9;\n      if (currentNoteType != (currentNoteType + 3 & 0xfffffffffffffffc)) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteSize - 0x100) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + currentNoteType + 0xc;\n      if (remainingDataSize < var11) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteData < 2) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      attributeInfo[0xc] = loopVar + 0xc;\n      nameAddr = loopVar + 0xc + var9;\n      attributeInfo[0xd] = nameAddr;\n      remainingDataSize = remainingDataSize + (-0xc - (var9 + currentNoteType));\n      param4 = loopVar + var11;\n      baseAddr = var10;\n      attributeInfo = ptr6;\n      flags = var13;\n      if (noteData != 2) {\n        if (*(char *)(loopVar + 0xc) == '$') {\n          if ((*(char *)(loopVar + 0xd) == '\\x01') && (*(char *)(loopVar + 0xe) == '1')) {\n            var10 = analyzeBuildAttributeNote_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < noteData) && (*(char *)(loopVar + 0xc) == 'G')) &&\n                 (*(char *)(loopVar + 0xd) == 'A')) &&\n                ((*(char *)(loopVar + 0xe) == '$' && (*(char *)(loopVar + 0xf) == '\\x01')))) {\n          if (*(char *)(loopVar + 0x10) == '2') {\n            var10 = analyzeBuildAttributeNote_00116490();\n            return var10;\n          }\n          if (*(char *)(loopVar + 0x10) == '3') {\n            var10 = analyzeBuildAttributeNote_00116490();\n            return var10;\n          }\n          loopVar = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remainingDataSize != 0) {\n      loopVar = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((noteFlag | noteFlag2 | versionFlag) == 0) {\n      var1 = *ptr7;\n      var2 = *messageArray;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      numElements = ((long)ptr6 - (long)notesArray >> 3) * -0x71c71c71c71c71c7;\n      qsort(notesArray,numElements,0x48,FUN_0011a1b0);\n      for (ptr2 = notesArray; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n        var10 = ptr2[2];\n        if (var10 != 0) {\n          var13 = ptr2[7];\n          var9 = ptr2[8];\n          ptr8 = ptr2;\n          var22 = 0;\n          if (var13 == var9) {\n            ptr2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr1 = ptr8;\n                ptr8 = ptr1 + -9;\n                if (ptr8 < notesArray) goto LAB_001167f5;\n                var11 = ptr1[-7];\n              } while (var11 == 0);\n              if ((*ptr8 != *ptr2) ||\n                 (var6 = memcmp((void *)ptr1[-6],(void *)ptr2[3],*ptr2), var6 != 0))\n              break;\n              var3 = ptr1[-2];\n              var12 = ptr1[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr2[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr1[-1] = var12;\n                  ptr1[-2] = var13;\n                  ptr2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nFUN_00116852:\n              flag1 = var22 < 0x11;\n              var22 = var22 + 1;\n            } while (flag1);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(notesArray,numElements,0x48,FUN_0011a250);\n      allocPtr = (undefined *)xmalloc(mallocSize * 2);\n      param7 = 0;\n      versionData = 0;\n      ptr5 = allocPtr;\n      for (ptr2 = notesArray; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n        if (ptr2[2] != 0) {\n          ptr4 = ptr5 + 4;\n          ptr3 = ptr5 + 0xc;\n          if ((ptr2[7] == versionData) && (ptr2[8] == param7)) {\n            (**(code **)(ptr7[1] + 0x50))(*ptr2,ptr5);\n            (**(code **)(ptr7[1] + 0x50))(0,ptr4);\n            (**(code **)(ptr7[1] + 0x50))(ptr2[2],ptr5 + 8);\n            var13 = ptr2[6];\n            var10 = *ptr2;\n            ptr5 = (undefined *)ptr2[3];\n            ptr4 = ptr3;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr4 = *ptr5;\n              ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n              ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (loopVar = var13 - var10; loopVar != 0; loopVar = loopVar + -1) {\n                *ptr4 = 0;\n                ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            ptr5 = ptr3 + var13;\n          }\n          else {\n            (**(code **)(ptr7[1] + 0x50))();\n            if (*(int *)(ptr7[1] + 8) == 5) {\n              charVar = (*(char *)(ptr7[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(ptr7[1] + 0x50))(charVar,ptr4);\n            (**(code **)(ptr7[1] + 0x50))(ptr2[2],ptr5 + 8);\n            var10 = *ptr2;\n            ptr5 = (undefined *)ptr2[3];\n            ptr4 = ptr3;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr4 = *ptr5;\n              ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n              ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n            }\n            var13 = ptr2[6];\n            if (var10 < var13) {\n              for (loopVar = var13 - var10; loopVar != 0; loopVar = loopVar + -1) {\n                *ptr4 = 0;\n                ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            loopVar = ptr7[1];\n            ptr3 = ptr3 + var13;\n            ptr5 = ptr3 + 8;\n            if ((*(int *)(loopVar + 8) == 5) && (*(char *)(ptr7[0x22] + 4) == '\\x02')) {\n              (**(code **)(loopVar + 0x38))(ptr2[7],ptr3);\n              (**(code **)(ptr7[1] + 0x38))(ptr2[8],ptr5);\n              ptr5 = ptr3 + 0x10;\n            }\n            else {\n              (**(code **)(loopVar + 0x50))(ptr2[7],ptr3);\n              (**(code **)(ptr7[1] + 0x50))(ptr2[8],ptr3 + 4);\n            }\n            versionData = ptr2[7];\n            param7 = ptr2[8];\n          }\n        }\n      }\n      var13 = (long)ptr5 - (long)allocPtr;\n      var10 = var13;\n      ptr5 = allocPtr;\n      if (var13 < mallocSize) {\n        for (; mallocSize = var13, var10 != 0; var10 = var10 - 1) {\n          *buffer = *ptr5;\n          ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n          buffer = buffer + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(allocPtr);\nLAB_001166f8:\n      free(notesArray);\n      return mallocSize;\n    }\n    if (((noteFlag2 | versionFlag) == 0) || (noteFlag == 0)) {\n      if (noteFlag2 == 0) {\n        if (versionFlag != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (versionFlag == 0) goto LAB_001166f8;\n    }\n    loopVar = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (currentNoteType == 0x10) {\n      var11 = (**(code **)(ptr7[1] + 0x28))(nameAddr);\n      var9 = (**(code **)(ptr7[1] + 0x28))(attributeInfo[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (attributeInfo[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = returnAddress;\n        }\n        noteData = *attributeInfo;\n        attributeInfo[7] = var11;\n        var13 = var9;\n        returnAddress = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = versionData;\n        }\n        noteData = *attributeInfo;\n        attributeInfo[7] = var11;\n        var10 = var9;\n        versionData = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (currentNoteType < 0x11) {\n      if (currentNoteType == 4) {\n        var11 = (**(code **)(ptr7[1] + 0x40))(nameAddr);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (currentNoteType == 8) {\n        var10 = FUN_001086af();\n        return var10;\n      }\n    }\n    loopVar = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (loopVar != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,ptr7,messageArray,loopVar);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "analyze_build_attribute_note_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "lVar1": "currentTargetValue"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTargetValue;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "free",
                "fprintf",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionData",
                "param_2": "debugString",
                "param_3": "unused",
                "param_4": "result",
                "lVar1": "blockData",
                "uVar2": "errorMessage",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionData,undefined8 debugString,undefined8 unused,undefined8 result)\n\n{\n  long blockData;\n  undefined8 errorMessage;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (blockData = *(long *)(functionData + 0x20), blockData == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockData + 8) == 0) {\n      *(undefined8 *)(blockData + 0x20) = debugString;\n      errorMessage = CONCAT71((int7)((ulong)blockData >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessage = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010be86:\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "byteOffset",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "puVar1": "memoryBlock",
                "lVar2": "loopCounter",
                "puVar3": "currentPointer",
                "bVar4": "byteValue",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] initializeMemory_00113da9(byte byteOffset,undefined8 inputParam1,undefined8 inputParam2,undefined8 inputParam3)\n\n{\n  undefined8 *memoryBlock;\n  long loopCounter;\n  undefined8 *currentPointer;\n  byte byteValue;\n  undefined returnValue [16];\n  \n  byteValue = 0;\n  returnValue._0_8_ = FUN_00112904(8 - (uint)byteOffset);\n  if (returnValue._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    currentPointer = memoryBlock + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)byteValue * -8 + 4);\n    }\n    *memoryBlock = inputParam2;\n    *(undefined8 **)(returnValue._0_8_ + 0x10) = memoryBlock;\n  }\n  returnValue._8_8_ = inputParam3;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_id"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_id;\n  \n  record1_id = record1[2];\n  if (record1_id == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_id == 0) || ((record1_id != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "param_3": "isZero",
                "param_4": "isChar",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "computedValue",
                "sVar3": "length",
                "uVar4": "allocatedPtr",
                "uVar5": "isValue",
                "local_60": "buffer"
            },
            "code": "\nundefined4 processData_0010a69a(long inputPtr,undefined8 outputPtr,int isZero,char isChar,uint value)\n\n{\n  undefined4 result;\n  long computedValue;\n  size_t length;\n  undefined8 allocatedPtr;\n  undefined isValue;\n  char buffer [48];\n  \n  if (isZero == 0) {\n    buffer[0] = '\\0';\n    isValue = 0;\n    computedValue = 0;\n  }\n  else {\n    computedValue = FUN_00109c2e();\n    if (computedValue < 0) {\n      return 0;\n    }\n    isValue = 1;\n    sprintf(buffer,\"%ld=\",computedValue);\n  }\n  length = strlen(buffer);\n  sprintf(buffer + length,\"%c%u\",(ulong)((-(uint)(isChar == '\\0') & 2) + 0x73),(ulong)value);\n  result = FUN_00109b52(inputPtr,buffer,computedValue,isValue,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  computedValue = *(long *)(inputPtr + 0x60);\n  allocatedPtr = xmalloc(1);\n  *(undefined8 *)(computedValue + 0x20) = allocatedPtr;\n  **(undefined **)(*(long *)(inputPtr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109c2e",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "validate_section_00115b70",
                "param_1": "sectionNames",
                "pcVar1": "sectionName",
                "iVar2": "result",
                "iVar3": "sectionType",
                "lVar4": "sectionMatch",
                "lVar5": "sectionCopy",
                "uVar6": "errorMessage",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 validateSection_00115b70(char **sectionNames)\n\n{\n  char *sectionName;\n  int result;\n  int sectionType;\n  long sectionMatch;\n  long sectionCopy;\n  undefined8 errorMessage;\n  long *sectionList;\n  \n  sectionMatch = FUN_00114190(*sectionNames,0,4);\n  if (sectionMatch == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      sectionMatch = FUN_00114190(*sectionNames,0,1);\n      sectionCopy = FUN_00114190(*sectionNames,0,2);\n      if (sectionMatch != 0) {\n        if (sectionCopy != 0) {\n          sectionName = *sectionNames;\n          errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(errorMessage,sectionName);\n        }\n        if (sectionMatch != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          sectionName = *sectionNames;\n          sectionList = DAT_001279b8;\n          do {\n            sectionType = strcmp(sectionName,(char *)sectionList[1]);\n            if (sectionType == 0) {\n              errorMessage = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(errorMessage,sectionName);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (sectionCopy == 0)) {\n        return 1;\n      }\n    }\n    sectionType = DAT_00127a2c;\n    if ((*(byte *)((long)sectionNames + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        sectionName = *sectionNames;\n        result = strcmp(sectionName,\".gnu_debugaltlink\");\n        if ((result != 0) && (result = strcmp(sectionName,\".gnu_debuglink\"), result != 0)) {\n          sectionType = strcmp(sectionName,\".reloc\");\n          if (sectionType != 0) {\n            return 1;\n          }\n          errorMessage = FUN_0010829e();\n          return errorMessage;\n        }\n      }\n      if (sectionType == 5) {\n        errorMessage = FUN_00113ede(sectionNames);\n        return errorMessage;\n      }\n      if (sectionType == 4) {\n        return 0;\n      }\n    }\n    if (sectionType == 6) {\n      errorMessage = FUN_001082b3();\n      return errorMessage;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00114190",
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "validate_section_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocation_data_00116030",
                "param_1": "input",
                "param_2": "size",
                "plVar1": "reloc_entry_ptr",
                "lVar2": "reloc_entry",
                "lVar3": "constant_1",
                "lVar4": "constant_2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "upper_bound",
                "__ptr": "reloc_buffer",
                "lVar7": "num_relocs",
                "extraout_RAX": "return_value",
                "lVar8": "i",
                "uStack_28": "default_result"
            },
            "code": "\n\n\nundefined8 process_relocation_data_00116030(undefined8 *input,long size)\n\n{\n  long *reloc_entry_ptr;\n  long reloc_entry;\n  long constant_1;\n  long constant_2;\n  int error_code;\n  undefined8 result;\n  long upper_bound;\n  void *reloc_buffer;\n  long num_relocs;\n  undefined8 return_value;\n  long i;\n  undefined8 default_result;\n  \n  if (*(long *)(size + 0x60) == 0) {\n    return result;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*input);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(input,size,reloc_buffer);\n    constant_2 = _DAT_00128680;\n    constant_1 = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (num_relocs < 0) {\n      FUN_0011a110(*input);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      i = 0;\n      do {\n        reloc_entry_ptr = **(long ***)((long)reloc_buffer + i * 8);\n        if ((((reloc_entry_ptr != (long *)0x0) && (reloc_entry = *reloc_entry_ptr, reloc_entry != 0)) && (reloc_entry != upper_bound)) &&\n           ((reloc_entry != constant_2 && (reloc_entry != constant_1)))) {\n          *(uint *)(reloc_entry + 0x18) = *(uint *)(reloc_entry + 0x18) | 0x20;\n        }\n        i = i + 1;\n      } while (num_relocs != i);\n    }\n    free(reloc_buffer);\n    return return_value;\n  }\n  return default_result;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "xmalloc",
                "free",
                "FUN_001083b7",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocation_data_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "extract_and_reverse_00113ede",
                "param_1": "strings",
                "__s": "input_string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 extract_and_reverse_00113ede(char **strings)\n\n{\n  char *input_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  input_string = *strings;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(input_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "extract_and_reverse_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Value",
                "lVar2": "record2Value",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Value;\n  long record2Value;\n  int result;\n  uint flag;\n  \n  record1Value = *record1;\n  record2Value = *record2;\n  flag = *(uint *)(record2Value + 0x24) & 0x102;\n  if ((*(uint *)(record1Value + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1Value + 0x38) <= *(ulong *)(record2Value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2Value + 0x38) <= *(ulong *)(record1Value + 0x38)) {\n      if (*(ulong *)(record2Value + 0x40) < *(ulong *)(record1Value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2Value + 0x40) <= *(ulong *)(record1Value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1Value + 0x18) <= *(uint *)(record2Value + 0x18)) {\n            return -(uint)(*(uint *)(record1Value + 0x18) < *(uint *)(record2Value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_data_0010c892",
                "param_1": "input",
                "param_2": "dataStructure",
                "cVar1": "condition",
                "lVar2": "tempVar",
                "lVar3": "tempVar2",
                "uVar4": "result",
                "puVar5": "pointer",
                "iVar6": "value"
            },
            "code": "\n\n\nundefined8 processData_0010c892(undefined8 input,long dataStructure)\n\n{\n  char condition;\n  long tempVar;\n  long tempVar2;\n  undefined8 result;\n  undefined8 *pointer;\n  int value;\n  \n  if (*(char *)(dataStructure + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (pointer = *(undefined8 **)(dataStructure + 0x1a0); pointer != (undefined8 *)0x0;\n        pointer = (undefined8 *)*pointer) {\n      value = *(int *)(pointer + 2);\n      tempVar2 = pointer[1];\n      if (value != 0) {\n        if (tempVar2 != 0) {\n          if (value - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        pointer[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tempVar2 == 0) goto LAB_0010c910;\n      value = 7;\nLAB_0010c8d5:\n      tempVar = FUN_00112904(value,0);\n      if (tempVar == 0) goto LAB_0010c910;\n      tempVar2 = FUN_0010c6be(input,tempVar2,tempVar);\n      pointer[3] = tempVar2;\n      if (tempVar2 == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    condition = FUN_0010c1c6();\n    if (condition != '\\0') {\n      condition = FUN_0010be1a(input,*(undefined8 *)(dataStructure + 0x68));\n      if (condition != '\\0') {\n        *(undefined *)(dataStructure + 0x60) = 0;\n        *(undefined8 *)(dataStructure + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904",
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_memory_block_00112904",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "puVar1": "memoryBlock"
            },
            "code": "\nvoid initializeMemoryBlock_00112904(undefined4 sourceAddress,undefined4 destinationAddress)\n\n{\n  undefined4 *memoryBlock;\n  \n  memoryBlock = (undefined4 *)xmalloc(0x18);\n  *memoryBlock = sourceAddress;\n  memoryBlock[1] = destinationAddress;\n  *(undefined (*) [16])(memoryBlock + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113c43",
                "FUN_00113b4a",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_00113bfa",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "stringComparisonResult",
                "in_RAX": "returnAddress",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int stringComparisonResult;\n  undefined8 returnAddress;\n  undefined result [16];\n  \n  stringComparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = stringComparisonResult == 0;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00107880",
                "FUN_00109a32",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010c6be",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00115b70",
                "FUN_0010922b",
                "FUN_00114190",
                "FUN_0010c7a0",
                "FUN_00108898",
                "FUN_0011173a",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionArray",
                "uVar5": "counter"
            },
            "code": "\nvoid executeFunctions_0011a390(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionArray;\n  uint counter;\n  \n  functionArray = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      counter = *(int *)(functionArray + 1) - 1;\n      if (-1 < (int)counter) {\n        currentIndex = (long)(int)counter;\n        counter = counter & 7;\n        (*(code *)functionArray[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (counter != 0) {\n            if (counter != 1) {\n              if (counter != 2) {\n                if (counter != 3) {\n                  if (counter != 4) {\n                    if (counter != 5) {\n                      if (counter != 6) {\n                        (*(code *)functionArray[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionArray[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionArray[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionArray[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionArray[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionArray[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionArray[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionArray[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionArray[tempIndex + 1])();\n            (*(code *)functionArray[tempIndex])();\n            (*(code *)functionArray[currentIndex])();\n            (*(code *)functionArray[tempIndex + -2])();\n            (*(code *)functionArray[tempIndex + -3])();\n            (*(code *)functionArray[tempIndex + -4])();\n            (*(code *)functionArray[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_0011a466:\n      functionArray = (long *)*functionArray;\n    } while (functionArray != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_functions_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_execute_command_0010e842",
                "param_1": "command",
                "param_2": "string",
                "param_3": "number",
                "param_4": "data",
                "sVar1": "stringLength",
                "__s": "formattedString",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] formatAndExecuteCommand_0010e842(undefined8 command,char *string,undefined8 number,undefined8 data)\n\n{\n  size_t stringLength;\n  char *formattedString;\n  undefined result [16];\n  \n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",string,number);\n  result._0_4_ = FUN_0010e2f0(command,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_execute_command_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_pointer_00113cb9",
                "param_1": "inputValue",
                "lVar1": "result"
            },
            "code": "\nlong initializePointer_00113cb9(long inputValue)\n\n{\n  long result;\n  \n  if (inputValue != 0) {\n    result = FUN_00112904(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = inputValue;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_binary_0010eafe",
                "param_1": "binaryData",
                "param_2": "message",
                "param_3": "flag",
                "__s": "prefix",
                "sVar2": "messageLength",
                "sVar3": "prefixLength",
                "__s_00": "modifiedMessage",
                "uVar1": "result"
            },
            "code": "\nundefined4 processBinary_0010eafe(long binaryData,char *message,char flag)\n\n{\n  undefined4 result;\n  char *prefix;\n  size_t messageLength;\n  size_t prefixLength;\n  char *modifiedMessage;\n  \n  if ((*(int *)(binaryData + 0x1f8) == 0) && (*(long *)(binaryData + 0x1e8) == -1)) {\n    prefix = (char *)FUN_00109b2f();\n    messageLength = strlen(message);\n    prefixLength = strlen(prefix);\n    modifiedMessage = (char *)xmalloc(messageLength + 3 + prefixLength);\n    sprintf(modifiedMessage,\"%s:%c%s\",message,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),prefix);\n    *(undefined8 *)(binaryData + 0x1e8) = *(undefined8 *)(binaryData + 0x10);\n    result = FUN_0010e2f0(binaryData,0x24,0,0,modifiedMessage);\n    if ((char)result != '\\0') {\n      free(modifiedMessage);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_binary_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_00113df2",
                "param_1": "data_array"
            },
            "code": "\nvoid initialize_data_00113df2(undefined4 data_array)\n\n{\n  FUN_00112904(4,data_array);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "extract_and_format_data_0010a377",
                "param_1": "input_value",
                "cVar1": "first_char",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar3": "length_1",
                "sVar4": "length_2",
                "__s_01": "formatted_string",
                "uVar2": "result",
                "uVar5": "check_flag"
            },
            "code": "\nundefined4 extract_and_format_data_0010a377(long input_value)\n\n{\n  char first_char;\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t length_1;\n  size_t length_2;\n  char *formatted_string;\n  undefined check_flag;\n  \n  check_flag = 1;\n  first_char = *(char *)(*(long *)(input_value + 0x60) + 0x1c);\n  string_1 = (char *)FUN_00109b2f();\n  if (first_char == '\\0') {\n    check_flag = *(undefined *)(*(long *)(input_value + 0x60) + 0x1c);\n  }\n  string_2 = (char *)FUN_00109b2f(input_value);\n  length_1 = strlen(string_1);\n  length_2 = strlen(string_2);\n  formatted_string = (char *)xmalloc(length_1 + 3 + length_2);\n  sprintf(formatted_string,\"@%s,%s\",string_2,string_1);\n  free(string_2);\n  free(string_1);\n  result = FUN_00109b52(input_value,formatted_string,0,check_flag,0);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_format_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_binary_data_0010d882",
                "param_1": "binary_data",
                "param_2": "strings",
                "param_3": "output_pointers",
                "param_4": "error_flag",
                "iVar1": "counter",
                "pcVar2": "current_string",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_position",
                "uVar6": "local_value",
                "bVar7": "condition_flag",
                "local_50": "outer_loop_counter",
                "local_4c": "constant",
                "local_48": "inner_loop_counter",
                "local_44": "temp_counter",
                "local_40": "temporary_buffer"
            },
            "code": "\nundefined8 process_binary_data_0010d882(long binary_data,char **strings,long *output_pointers,undefined *error_flag)\n\n{\n  int counter;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_position;\n  ulong local_value;\n  bool condition_flag;\n  uint outer_loop_counter;\n  undefined4 constant;\n  uint inner_loop_counter;\n  int temp_counter;\n  undefined8 temporary_buffer [2];\n  \n  current_string = *strings;\n  constant = 10;\n  if (output_pointers != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_pointers = allocated_memory;\n    *error_flag = 0;\n  }\n  outer_loop_counter = 0;\n  while( true ) {\n    current_position = *strings;\n    current_char = *current_position;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *strings = current_position + 1;\n      if (current_char == 'T') {\n        temp_counter = 1;\n      }\n      else {\n        current_char = FUN_00108ea1(strings,&temp_counter);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = FUN_00108ea1(strings,&inner_loop_counter);\n      if ((current_char == '\\0') || (*(uint *)(binary_data + 0x28) <= inner_loop_counter)) {\nLAB_0010d958:\n        FUN_0010911f(current_string);\n        return 0;\n      }\n      local_value = (ulong)inner_loop_counter;\n      while (counter = temp_counter + -1, condition_flag = temp_counter != 0, temp_counter = counter, condition_flag) {\n        temporary_buffer[0] = *(undefined8 *)(*(long *)(binary_data + 0x20) + local_value * 0x10);\n        current_char = FUN_0010d7d4(binary_data,temporary_buffer,output_pointers,&outer_loop_counter,&constant);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = FUN_0010d7d4(binary_data,strings,output_pointers,&outer_loop_counter,&constant);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_pointers == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_pointers + (ulong)outer_loop_counter * 8) = 0;\n    if (*current_position != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_position = current_position + 1;\n  *strings = current_position;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_position >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_0010d7d4",
                "FUN_00108ea1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_binary_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryPtr",
                "param_2": "param1Value",
                "param_3": "param2Value",
                "param_4": "param3Value",
                "puVar1": "newMemory",
                "pauVar2": "existingMemory",
                "lVar3": "loopCounter",
                "puVar4": "currentMemory",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryPtr) [16],undefined8 param1Value,undefined4 param2Value,undefined4 param3Value)\n\n{\n  undefined4 *newMemory;\n  undefined (*existingMemory) [16];\n  long loopCounter;\n  undefined4 *currentMemory;\n  byte byteValue;\n  \n  byteValue = 0;\n  newMemory = (undefined4 *)xmalloc(0x28);\n  currentMemory = newMemory;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentMemory = 0;\n    currentMemory = currentMemory + (ulong)byteValue * -2 + 1;\n  }\n  existingMemory = *memoryPtr;\n  *(undefined8 *)(newMemory + 2) = param1Value;\n  newMemory[5] = param2Value;\n  newMemory[6] = param3Value;\n  if (existingMemory == (undefined (*) [16])0x0) {\n    existingMemory = (undefined (*) [16])xmalloc(0x10);\n    *existingMemory = ZEXT816(0);\n    *memoryPtr = existingMemory;\n    *(undefined (**) [16])(*existingMemory + 8) = existingMemory;\n  }\n  **(undefined8 **)(*existingMemory + 8) = newMemory;\n  *(undefined4 **)(*existingMemory + 8) = newMemory;\n  return newMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_00112996",
                "FUN_0010bc80",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010c6be"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "debugInfo",
                "param_2": "line",
                "param_3": "unit",
                "uVar1": "errorMessage",
                "puVar2": "currentLine",
                "uVar3": "index",
                "puVar4": "newDebugLine",
                "lVar5": "loopCounter",
                "puVar6": "ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long debugInfo,undefined8 line,undefined8 unit)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentLine;\n  ulong index;\n  undefined4 *newDebugLine;\n  long loopCounter;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(debugInfo + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopCounter = *(long *)(debugInfo + 0x28);\n    if ((loopCounter != 0) && (*(long *)(loopCounter + 8) == *(long *)(debugInfo + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loopCounter + 0x10 + index * 8) == -1) {\n          currentLine = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loopCounter + 0x10 + (long)currentLine * 8) = line;\n          *(undefined8 *)(loopCounter + 0x60 + (long)currentLine * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newDebugLine = (undefined4 *)xmalloc(0xb0);\n    ptr = newDebugLine;\n    for (loopCounter = 0x2c; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(debugInfo + 0x10);\n    *(undefined8 *)(newDebugLine + 4) = line;\n    *(undefined8 *)(newDebugLine + 2) = errorMessage;\n    *(undefined8 *)(newDebugLine + 0x18) = unit;\n    ptr = newDebugLine + 6;\n    for (loopCounter = 0x48; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    currentLine = *(undefined8 **)(debugInfo + 0x28);\n    if (currentLine == (undefined8 *)0x0) {\n      currentLine = *(undefined8 **)(debugInfo + 8);\n      currentLine[2] = newDebugLine;\n    }\n    else {\n      *currentLine = newDebugLine;\n    }\n    *(undefined4 **)(debugInfo + 0x28) = newDebugLine;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentLine >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "check_pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "string",
                "__pattern": "current_pattern",
                "iVar1": "match_result"
            },
            "code": "\nint check_pattern_match_0011a170(char **pattern,char **string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "add_parameter_to_function_0010bd62",
                "param_1": "function",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "lastEntry",
                "uVar2": "errorMessage",
                "puVar3": "newParameter",
                "puVar4": "currentEntry",
                "puVar6": "previousEntry",
                "puVar7": "tempParameter",
                "bVar8": "counter",
                "lVar5": "loopCounter"
            },
            "code": "\n\n\nundefined8\naddParameterToFunction_0010bd62(long function,long param1,long param2,undefined4 param3,undefined8 param4)\n\n{\n  undefined8 *lastEntry;\n  undefined8 errorMessage;\n  undefined4 *newParameter;\n  undefined8 *currentEntry;\n  long loopCounter;\n  undefined8 *previousEntry;\n  undefined4 *tempParameter;\n  byte counter;\n  \n  counter = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(long *)(function + 8) != 0) && (*(long *)(function + 0x18) != 0)) {\n      newParameter = (undefined4 *)xmalloc(0x28);\n      tempParameter = newParameter;\n      for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *tempParameter = 0;\n        tempParameter = tempParameter + (ulong)counter * -2 + 1;\n      }\n      loopCounter = *(long *)(function + 0x18);\n      *(long *)(newParameter + 2) = param1;\n      *(long *)(newParameter + 4) = param2;\n      newParameter[6] = param3;\n      lastEntry = *(undefined8 **)(loopCounter + 8);\n      *(undefined8 *)(newParameter + 8) = param4;\n      previousEntry = (undefined8 *)(loopCounter + 8);\n      while (currentEntry = lastEntry, currentEntry != (undefined8 *)0x0) {\n        previousEntry = currentEntry;\n        lastEntry = (undefined8 *)*currentEntry;\n      }\n      *previousEntry = newParameter;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_parameter_to_function_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_archive_contents_00104ea2",
                "ppcVar6": "filePtr",
                "ppcVar3": "outputFilePtr",
                "cVar1": "character",
                "iVar2": "integerVar",
                "pcVar10": "fileName",
                "pcVar7": "substring",
                "lVar12": "fileSize",
                "pvVar4": "buffer",
                "lVar5": "bytesRead",
                "pcVar13": "callbackFunction"
            },
            "code": "\nvoid extractArchiveContents_00104ea2(void)\n\n{\n  char character;\n  int integerVar;\n  char **outputFilePtr;\n  void *buffer;\n  long bytesRead;\n  char **filePtr;\n  char *substring;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *fileName;\n  undefined8 uVar11;\n  long fileSize;\n  code *callbackFunction;\n  long lVar14;\n  int unaff_EBX;\n  stat *unaff_RBP;\n  char *pcharacter5;\n  stat *psVar16;\n  char *unaff_R12;\n  undefined8 *unaff_R13;\n  char **unaff_R15;\n  byte bVar17;\n  undefined8 unaff_retaddr;\n  undefined8 *param_7;\n  long *param_8;\n  char *param_9;\n  undefined8 *param_10;\n  undefined8 param_11;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long param_19;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  filePtr = (char **)bfd_openw(unaff_R12,param_11);\n  if (filePtr == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(unaff_R12,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    character = FUNC_00114e50(unaff_R15,filePtr,unaff_retaddr);\n    if (character == '\\0') {\n      integerVar = bfd_get_arch(unaff_R15);\n      if (integerVar == 0) goto LAB_00104d75;\n      character = bfd_close_all_done(filePtr);\n      if (character != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(unaff_R12,0,0,0);\n      goto LAB_00104ec9;\n    }\n    character = bfd_close(filePtr);\n    filePtr = unaff_R15;\n    if (character == '\\0') {\n      FUN_001126c0(unaff_R12,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (unaff_EBX == 0)) {\n      FUN_0011a350(unaff_R12,unaff_RBP);\n    }\n    fileSize = bfd_openr(unaff_R12,param_11);\n    unaff_R13[2] = fileSize;\n    *param_8 = fileSize;\n    param_8 = (long *)(fileSize + 0xf0);\n    unaff_R15 = (char **)bfd_openr_next_archived_file(param_10,filePtr);\n    bfd_close(filePtr);\n    while ((DAT_00127a20 == 0 && (unaff_R15 != (char **)0x0))) {\n      fileName = *unaff_R15;\n      substring = fileName;\n      if (*fileName == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(uVar11,fileName);\n        goto LAB_00104e93;\n      }\n      while (*substring != '\\0') {\n        pcharacter5 = substring;\n        if ((*substring == '.') && (pcharacter5 = substring + 1, substring[1] == '.')) {\n          pcharacter5 = substring + 2;\n          if ((substring[2] == '\\0') || (substring[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcharacter5 != '\\0' && (*pcharacter5 != '/')); pcharacter5 = pcharacter5 + 1) {\n        }\n        substring = pcharacter5;\n        if (*pcharacter5 == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      unaff_RBP = (stat *)&stack0x00000050;\n      unaff_R12 = (char *)concat(param_9,&DAT_0011b47d);\n      integerVar = stat(unaff_R12,unaff_RBP);\n      puVar8 = unaff_R13;\n      if (-1 < integerVar) {\n        fileSize = FUN_0011a0e0(unaff_R12);\n        free(unaff_R12);\n        if (fileSize == 0) {\n          piVar9 = __errno_location();\n          fileName = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(uVar11,fileName);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        fileName = *unaff_R15;\n        *puVar8 = unaff_R13;\n        puVar8[2] = 0;\n        puVar8[1] = fileSize;\n        unaff_R12 = (char *)concat(fileSize,&DAT_0011b47d,fileName);\n      }\n      unaff_EBX = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = unaff_RBP;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        filePtr = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          filePtr = unaff_R15;\n        }\n        unaff_EBX = (**(code **)(filePtr[1] + 0x1e8))(unaff_R15,unaff_RBP);\n        if (unaff_EBX != 0) {\n          fileName = *unaff_R15;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(uVar11,fileName);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = unaff_R12;\n      *unaff_R13 = puVar8;\n      unaff_R13[2] = 0;\n      character = bfd_check_format(unaff_R15,1);\n      if (character != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        filePtr = (char **)bfd_openw(unaff_R12,*(undefined8 *)unaff_R15[1]);\n        if (filePtr == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,unaff_R15,0,uVar11);\n      filePtr = (char **)bfd_openw(unaff_R12,param_11);\n      if (filePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      outputFilePtr = (char **)unaff_R15[0x1d];\n      if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n        outputFilePtr = unaff_R15;\n      }\n      integerVar = (**(code **)(outputFilePtr[1] + 0x1e8))(unaff_R15);\n      fileSize = param_19;\n      if (integerVar == 0) {\n        if (param_19 < 0) {\n          FUN_001125fa(unaff_R15);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(uVar11);\n        }\n        else {\n          integerVar = bfd_seek(unaff_R15,0,0);\n          if (integerVar == 0) {\n            if (DAT_001279c9 != '\\0') {\n              fileName = *filePtr;\n              uVar11 = FUN_001125fa(unaff_R15);\n              substring = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(substring,uVar11,fileName);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*filePtr,param_18 | 0x100);\n                free(buffer);\n                character = bfd_close_all_done(filePtr);\n                filePtr = unaff_R15;\n                if (character == '\\0') {\n                  FUN_001126c0(unaff_R12,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (fileSize < 0x2001) {\n                lVar14 = fileSize;\n              }\n              bytesRead = bfd_bread(buffer,lVar14,unaff_R15);\n              outputFilePtr = unaff_R15;\n              if ((lVar14 != bytesRead) ||\n                 (bytesRead = bfd_bwrite(buffer,lVar14,filePtr), outputFilePtr = filePtr, lVar14 != bytesRead))\n              break;\n              fileSize = fileSize - lVar14;\n            }\n            FUN_001126c0(0,outputFilePtr,0,0);\n            free(buffer);\n          }\n          else {\n            uVar11 = FUN_001125fa(unaff_R15);\n            FUN_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,unaff_R15,0,0);\n      }\n      character = bfd_close_all_done(filePtr);\n      if (character == '\\0') {\n        FUN_001126c0(unaff_R12,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(unaff_R12);\n      DAT_00127a20 = 1;\n    }\n    *param_8 = 0;\n    buffer = (void *)xstrdup(*param_7);\n    if (DAT_00127a20 == 0) {\n      callbackFunction = bfd_close;\n    }\n    else {\n      callbackFunction = bfd_close_all_done;\n    }\n    character = (*callbackFunction)(param_7);\n    if (character == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*param_10);\n    character = bfd_close(param_10);\n    if (character == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    puVar8 = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = puVar8;\n  }\n  rmdir(param_9);\n  free(param_9);\n  return;\n}\n\n",
            "called": [
                "bfd_bread",
                "dcgettext",
                "bfd_seek",
                "bfd_bwrite",
                "FUN_001126c0",
                "FUN_0011a350",
                "xmalloc",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "bfd_close",
                "FUN_00114e50",
                "rmdir",
                "bfd_check_format",
                "free",
                "printf",
                "bfd_close",
                "bfd_close_all_done",
                "FUN_00114b84",
                "bfd_close_all_done",
                "FUN_00104ea2",
                "concat",
                "chmod",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_openr",
                "unlink",
                "bfd_openw",
                "xstrdup",
                "__errno_location",
                "FUN_0011a110",
                "strerror",
                "stat",
                "FUN_001125fa",
                "FUN_0011a0e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_contents_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010e2f0",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_memory_00113ce0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "output"
            },
            "code": "\nundefined  [16]\nallocate_memory_00113ce0(long input1,long input2,undefined input3,undefined8 input4,undefined8 input5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined output [16];\n  \n  if (input1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input2;\n      *(undefined *)(allocated_memory + 2) = input3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  output._8_8_ = input5;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_memory_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "bufferOffset",
                "unaff_R14": "bufferSize",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "translatedErrorMessage"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long bufferOffset;\n  long bufferSize;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + bufferOffset),1,bufferSize - bufferOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      translatedErrorMessage = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,translatedErrorMessage);\n    }\n    bufferOffset = bufferOffset + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (bufferOffset == bufferSize) {\n      bufferSize = bufferOffset * 2;\n      translatedErrorMessage = xrealloc(*(undefined8 *)(buffer + 0x20),bufferSize);\n      *(undefined8 *)(buffer + 0x20) = translatedErrorMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = bufferOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_00119dd0",
                "ferror",
                "FUN_00114dc7",
                "xrealloc",
                "feof",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "binary_analysis_00119f70",
                "param_1": "header_info",
                "param_2": "binary_info",
                "uVar1": "header_size",
                "cVar2": "result",
                "iVar3": "arch_mach_num",
                "uVar4": "header_data",
                "uVar5": "data_info",
                "__format": "format_string",
                "lVar6": "buffer_size",
                "uVar7": "header_value",
                "lVar8": "realloc_result"
            },
            "code": "\nundefined4 binary_analysis_00119f70(undefined8 *header_info,undefined8 *binary_info)\n\n{\n  undefined4 header_size;\n  char result;\n  int arch_mach_num;\n  undefined8 header_data;\n  undefined8 data_info;\n  char *format_string;\n  long buffer_size;\n  undefined8 header_value;\n  long realloc_result;\n  \n  arch_mach_num = *(int *)((long)binary_info + 0xc) + 1;\n  *(int *)((long)binary_info + 0xc) = arch_mach_num;\n  if ((ulong)binary_info[2] < (ulong)((long)arch_mach_num * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < arch_mach_num) {\n      buffer_size = (long)arch_mach_num * 0xc0;\n    }\n    realloc_result = xrealloc(binary_info[3]);\n    binary_info[3] = realloc_result;\n    memset((void *)(realloc_result + binary_info[2]),0,buffer_size - binary_info[2]);\n    binary_info[2] = buffer_size;\n  }\n  header_size = *(undefined4 *)((long)header_info + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binary_info + 0xc) * 0x60 + binary_info[3] + -0x60) = *header_info;\n  header_data = FUN_00114e00(header_size);\n  data_info = FUN_00114e00(*(undefined4 *)(header_info + 2));\n  header_value = *header_info;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_value,data_info,header_data);\n  buffer_size = bfd_openw(*binary_info,*header_info);\n  if (buffer_size == 0) {\n    FUN_0011a110(*binary_info);\n    *(undefined4 *)(binary_info + 1) = 1;\n  }\n  else {\n    arch_mach_num = 2;\n    result = bfd_set_format(buffer_size,1);\n    if (result == '\\0') {\n      arch_mach_num = bfd_get_error();\n      if (arch_mach_num != 5) {\n        FUN_0011a110(*header_info);\n        *(undefined4 *)(binary_info + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,arch_mach_num,0);\n        if (result != '\\0') {\n          header_value = bfd_printable_arch_mach(arch_mach_num,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)binary_info + 0xc) * 0x60 + binary_info[3] + -0x58 + (ulong)(arch_mach_num - 2)) =\n               1;\n        }\n        arch_mach_num = arch_mach_num + 1;\n      } while (arch_mach_num != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(binary_info + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "bfd_printable_arch_mach",
                "FUN_00114e00",
                "bfd_set_format",
                "printf",
                "xrealloc",
                "FUN_001053d5",
                "memset",
                "bfd_close_all_done",
                "bfd_openw",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "binary_analysis_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "extract_and_write_to_file_00115a90",
                "param_1": "input_file_descriptor",
                "param_2": "output_file_name",
                "param_3": "file_permissions",
                "iVar1": "error_code",
                "__fd": "output_file_descriptor",
                "iVar2": "bytes_read",
                "_Var3": "current_position",
                "uVar4": "result",
                "sVar5": "bytes_written",
                "piVar6": "error_location",
                "local_2038": "buffer"
            },
            "code": "\nulong extract_and_write_to_file_00115a90(int input_file_descriptor,char *output_file_name,long file_permissions)\n\n{\n  int error_code;\n  int output_file_descriptor;\n  int bytes_read;\n  __off_t current_position;\n  ulong result;\n  size_t bytes_written;\n  int *error_location;\n  undefined buffer [8200];\n  \n  if ((-1 < input_file_descriptor) && (current_position = lseek(input_file_descriptor,0,0), current_position == 0)) {\n    output_file_descriptor = open(output_file_name,0x201);\n    if (output_file_descriptor < 0) {\n      result = FUN_00108237();\n      return result;\n    }\n    do {\n      result = read(input_file_descriptor,buffer,0x2000);\n      bytes_read = (int)result;\n      if (bytes_read < 1) {\n        error_location = __errno_location();\n        error_code = *error_location;\n        fchmod(output_file_descriptor,*(__mode_t *)(file_permissions + 0x18));\n        close(input_file_descriptor);\n        close(output_file_descriptor);\n        if (bytes_read != 0) {\n          *error_location = error_code;\n          return 0xffffffff;\n        }\n        return result & 0xffffffff;\n      }\n      bytes_written = write(output_file_descriptor,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    error_location = __errno_location();\n    bytes_read = *error_location;\n    close(input_file_descriptor);\n    close(output_file_descriptor);\n    *error_location = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108237",
                "close",
                "fchmod",
                "write",
                "read",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "extract_and_write_to_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_unlink_00108200",
                "unaff_RBP": "source_filename",
                "unaff_R12B": "perform_unlink",
                "unaff_R13": "unlink_flag",
                "unaff_retaddr": "return_address",
                "piVar1": "error_location",
                "uVar2": "error_message",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16] copy_file_and_unlink_00108200(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  char *source_filename;\n  char perform_unlink;\n  ulong unlink_flag;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(error_message);\n  unlink(source_filename);\n  if (perform_unlink != '\\0') {\n    FUN_0011a350();\n  }\n  return_value._0_8_ = unlink_flag & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_0011a350",
                "FUN_00119ed0",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_unlink_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 330907,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}