{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_data_structure_00113dfe",
                "param_1": "param",
                "param_2": "value",
                "lVar1": "dataStructure",
                "initialize_data_structure_00112904": "initializeDataStructure"
            },
            "code": "\nvoid updateDataStructure_00113dfe(undefined4 param,undefined value)\n\n{\n  long dataStructure;\n  \n  dataStructure = initializeDataStructure(3,param);\n  if (dataStructure != 0) {\n    *(undefined *)(dataStructure + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "update_data_structure_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "add_string_to_record_0010ab4d",
                "param_1": "record",
                "param_2": "label",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "recordPtr",
                "lVar2": "recordPtr2",
                "auVar3": "result1",
                "sVar4": "labelLen",
                "pcVar5": "recordLabel",
                "sVar6": "recordLabelLen",
                "auVar7": "result2"
            },
            "code": "\nundefined  [16] addStringToRecord_0010ab4d(long record,char *label,undefined8 arg3,undefined8 arg4)\n\n{\n  ulong recordPtr;\n  long recordPtr2;\n  undefined result1 [16];\n  size_t labelLen;\n  char *recordLabel;\n  size_t recordLabelLen;\n  undefined result2 [16];\n  \n  recordPtr = *(ulong *)(record + 0x60);\n  if ((recordPtr != 0) && (*(long *)(recordPtr + 0x20) != 0)) {\n    recordLabel = *(char **)(recordPtr + 0x30);\n    labelLen = strlen(label);\n    if (recordLabel == (char *)0x0) {\n      recordLabel = (char *)xmalloc(labelLen + 3);\n      *recordLabel = '\\0';\n    }\n    else {\n      recordLabelLen = strlen(recordLabel);\n      recordLabel = (char *)xrealloc(recordLabel,labelLen + 4 + recordLabelLen);\n    }\n    labelLen = strlen(recordLabel);\n    sprintf(recordLabel + labelLen,\"%s::\",label);\n    recordPtr2 = *(long *)(record + 0x60);\n    *(char **)(recordPtr2 + 0x30) = recordLabel;\n    result2._1_7_ = (undefined7)((ulong)recordPtr2 >> 8);\n    result2[0] = 1;\n    result2._8_8_ = arg4;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = recordPtr;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "xrealloc",
                "strlen",
                "xmalloc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "add_string_to_record_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_debug_name_0010c218",
                "param_1": "file_data",
                "param_2": "debug_name",
                "param_3": "debug_type",
                "uVar1": "error_msg",
                "lVar2": "data_structure",
                "pauVar3": "malloced_ptr",
                "lVar4": "mem_ptr"
            },
            "code": "\n\n\nlong initialize_debug_name_0010c218(long file_data,long debug_name,long debug_type)\n\n{\n  undefined8 error_msg;\n  long data_structure;\n  undefined (*malloced_ptr) [16];\n  long mem_ptr;\n  \n  if ((debug_name != 0) && (debug_type != 0)) {\n    if ((*(long *)(file_data + 8) == 0) || (*(long *)(file_data + 0x10) == 0)) {\n      error_msg = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_msg);\n    }\n    else {\n      data_structure = initialize_data_structure_00112904(0x16,0);\n      if (data_structure != 0) {\n        malloced_ptr = (undefined (*) [16])xmalloc(0x10);\n        mem_ptr = *(long *)(file_data + 0x10);\n        *malloced_ptr = ZEXT816(0);\n        *(long *)(*malloced_ptr + 8) = debug_type;\n        *(undefined (**) [16])(data_structure + 0x10) = malloced_ptr;\n        mem_ptr = initialize_memory_00112925(mem_ptr + 0x10,debug_name,0,3);\n        if (mem_ptr != 0) {\n          *(long *)(mem_ptr + 0x20) = data_structure;\n          *(long *)*malloced_ptr = mem_ptr;\n          return data_structure;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c2d2",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_debug_name_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = initialize_hash_table_00113f20();\n  DAT_001279f0 = initialize_hash_table_00113f20();\n  DAT_00127a08 = initialize_hash_table_00113f20();\n  DAT_001279e8 = initialize_hash_table_00113f20();\n  DAT_001279e0 = initialize_hash_table_00113f20();\n  DAT_001279d8 = initialize_hash_table_00113f20();\n  DAT_001279d0 = initialize_hash_table_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278c8 = initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_function_chain_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hashtable_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_and_exit_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_and_compare_files_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        process_files_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        process_files_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_gnu_version_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_and_exit_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_binary_info_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_gnu_version_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = compare_strings_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = decode_and_parse_string_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = compare_strings_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = decode_and_parse_string_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_binary_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_delete_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = get_file_information_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_information_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    process_binary_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_delete_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_and_compare_files_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_files_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = parse_assignment_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    read_file_and_store_content_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_files_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = parse_assignment_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_files_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_files_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_files_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_files_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = parse_assignment_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    read_file_and_store_content_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "setlocale",
                "strncpy",
                "FUN_001054af",
                "FUN_00119940",
                "strcasecmp",
                "htab_create_alloc",
                "fopen",
                "FUN_00114cf0",
                "FUN_00114d60",
                "__errno_location",
                "FUN_00108800",
                "strchr",
                "FUN_00114c20",
                "FUN_00108d9a",
                "strerror",
                "textdomain",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "xexit",
                "strcmp",
                "FUN_00113fb0",
                "FUN_00114460",
                "strlen",
                "fprintf",
                "FUN_00108c86",
                "htab_elements",
                "FUN_00108a2a",
                "FUN_00113fe0",
                "xstrdup",
                "unlink_if_ordinary",
                "memcpy",
                "FUN_00114690",
                "strtoul",
                "xcalloc",
                "FUN_00119970",
                "stat",
                "bfd_set_error_program_name",
                "getc",
                "FUN_00113f50",
                "close",
                "free",
                "xmalloc",
                "bfd_set_default_target",
                "malloc",
                "htab_find_slot",
                "FUN_00108916",
                "strncasecmp",
                "memmove",
                "fclose",
                "ftell",
                "xrealloc",
                "FUN_00113f20",
                "getopt_long",
                "FUN_00119ed0",
                "FUN_001199d0",
                "strcpy",
                "FUN_00119dd0",
                "ferror",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00115970",
                "mkstemp",
                "xmalloc_set_program_name",
                "bfd_init",
                "strtol",
                "dup",
                "bfd_scan_arch",
                "bindtextdomain",
                "free",
                "FUN_00108898",
                "FUN_0011a390",
                "filename_cmp",
                "bfd_get_error",
                "fread",
                "fseek"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "blockPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "nextBlockPointer",
                "uVar2": "result",
                "puVar3": "newBlock",
                "puVar4": "currentBlockPointer",
                "lVar5": "blockOffset",
                "puVar6": "lastBlockPointer",
                "puVar7": "tempBlockPointer",
                "bVar8": "shouldInitialize",
                "auVar9": "returnVal"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugging_0010be88(long blockPointer,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *nextBlockPointer;\n  undefined8 result;\n  undefined4 *newBlock;\n  undefined8 *currentBlockPointer;\n  long blockOffset;\n  undefined8 *lastBlockPointer;\n  undefined4 *tempBlockPointer;\n  byte shouldInitialize;\n  undefined returnVal [16];\n  \n  shouldInitialize = 0;\n  if ((*(long *)(blockPointer + 8) == 0) || (*(long *)(blockPointer + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    tempBlockPointer = newBlock;\n    for (blockOffset = 0xc; blockOffset != 0; blockOffset = blockOffset + -1) {\n      *tempBlockPointer = 0;\n      tempBlockPointer = tempBlockPointer + (ulong)shouldInitialize * -2 + 1;\n    }\n    blockOffset = *(long *)(blockPointer + 0x20);\n    *(undefined8 *)(newBlock + 6) = param2;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = blockOffset;\n    nextBlockPointer = *(undefined8 **)(blockOffset + 0x10);\n    lastBlockPointer = (undefined8 *)(blockOffset + 0x10);\n    while (currentBlockPointer = nextBlockPointer, currentBlockPointer != (undefined8 *)0x0) {\n      lastBlockPointer = currentBlockPointer;\n      nextBlockPointer = (undefined8 *)*currentBlockPointer;\n    }\n    *lastBlockPointer = newBlock;\n    result = 1;\n    *(undefined4 **)(blockPointer + 0x20) = newBlock;\n  }\n  returnVal._8_8_ = param4;\n  returnVal._0_8_ = result;\n  return returnVal;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_00115dc0",
                "FUN_0011378f",
                "FUN_001083b7",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011a110",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "create_struct_field_string_0010ba08",
                "param_1": "paramArray",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "size",
                "param_5": "flag",
                "cVar1": "flagChar",
                "iVar2": "fieldSize",
                "lVar3": "paramValue",
                "__s": "pointerValue",
                "sVar4": "param2Length",
                "sVar5": "fieldNameLength",
                "sVar6": "pointerValueLength",
                "__s_00": "resultString",
                "uVar7": "warningMessage",
                "uVar8": "returnValue",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8\ncreateStructFieldString_0010ba08(undefined8 *paramArray,char *fieldName,undefined8 param3,ulong size,int flag)\n\n{\n  char flagChar;\n  int fieldSize;\n  long paramValue;\n  char *pointerValue;\n  size_t param2Length;\n  size_t fieldNameLength;\n  size_t pointerValueLength;\n  char *resultString;\n  undefined8 warningMessage;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flagChar = *(char *)(paramArray[0xc] + 0x1c);\n  fieldSize = *(int *)(paramArray[0xc] + 0x18);\n  pointerValue = (char *)extract_and_free_pointer_00109b2f();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    param2Length = strlen(*(char **)(paramArray[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    pointerValueLength = strlen(pointerValue);\n    resultString = (char *)xmalloc(param2Length + 0x32 + fieldNameLength + pointerValueLength);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((size == 0) && (size = (ulong)(uint)(fieldSize * 8), size == 0)) {\n      returnValue = *(undefined8 *)*paramArray;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message_00119ed0(warningMessage,returnValue,fieldName);\n    }\n    sprintf(resultString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),fieldName,flagString,pointerValue,\n            param3,size);\n    free(*(void **)(paramArray[0xc] + 0x20));\n    paramValue = paramArray[0xc];\n    *(char **)(paramValue + 0x20) = resultString;\n    if (flagChar != '\\0') {\n      *(undefined *)(paramValue + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)paramValue >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "dcgettext",
                "xmalloc",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_struct_field_string_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "dataPtr",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "option",
                "cVar1": "char1",
                "__s": "extractedString",
                "sVar5": "stringLength",
                "pcVar6": "formattedString",
                "cVar3": "char2",
                "lVar2": "dataPtr2",
                "uVar8": "result",
                "uVar9": "tempVar1",
                "uVar10": "tempVar2",
                "uVar4": "loopIndex",
                "lVar7": "reallocPtr"
            },
            "code": "\nundefined8 processData_0010aa53(long dataPtr,undefined8 value,char flag,int option)\n\n{\n  char char1;\n  long dataPtr2;\n  char char2;\n  uint loopIndex;\n  char *extractedString;\n  size_t stringLength;\n  char *formattedString;\n  long reallocPtr;\n  undefined8 result;\n  ulong tempVar1;\n  ulong tempVar2;\n  \n  char1 = *(char *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  extractedString = (char *)extract_and_free_pointer_00109b2f();\n  stringLength = strlen(extractedString);\n  formattedString = (char *)xmalloc(stringLength + 0x19);\n  *formattedString = flag + '0';\n  if (option == 1) {\n    char2 = '1';\n  }\n  else {\n    char2 = '0';\n    if ((option != 2) && (char2 = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedString[1] = char2;\n  sprintf(formattedString + 2,\"%ld,%s;\",value);\n  free(extractedString);\n  dataPtr2 = *(long *)(dataPtr + 0x60);\n  result = 0;\n  if ((dataPtr2 != 0) && (*(long *)(dataPtr2 + 0x20) != 0)) {\n    dataPtr2 = *(long *)(dataPtr2 + 0x28);\n    tempVar2 = 0;\n    if (dataPtr2 != 0) {\n      loopIndex = 0;\n      do {\n        tempVar1 = (ulong)loopIndex;\n        tempVar2 = (ulong)loopIndex;\n        loopIndex = loopIndex + 1;\n      } while (*(long *)(dataPtr2 + tempVar1 * 8) != 0);\n    }\n    reallocPtr = xrealloc(dataPtr2,(ulong)((int)tempVar2 + 2) << 3);\n    *(char **)(reallocPtr + tempVar2 * 8) = formattedString;\n    *(undefined8 *)(reallocPtr + (ulong)((int)tempVar2 + 1) * 8) = 0;\n    dataPtr2 = *(long *)(dataPtr + 0x60);\n    *(long *)(dataPtr2 + 0x28) = reallocPtr;\n    if (char1 != '\\0') {\n      *(undefined *)(dataPtr2 + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "process_debug_info_0011173a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "ptr",
                "cVar3": "charVar3",
                "uVar4": "undefinedVar4",
                "iVar5": "intVar5",
                "puVar6": "ptrVar6",
                "plVar7": "ptrVar7",
                "pcVar8": "ptrVar8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "lVar11": "longVar11",
                "lVar12": "longVar12",
                "pplVar13": "ptrPtrVar13",
                "uVar14": "ulongVar14",
                "uVar15": "ulongVar15",
                "pcVar16": "ptrVar16",
                "uVar17": "uintVar17",
                "dVar19": "doubleVar19",
                "local_48": "localPtrVar48",
                "local_40": "localPtrVar40"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined processDebugInfo_0011173a(undefined8 param1,long *param2,int param3,int param4,ulong param5,\n                      char *param6)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *ptr;\n  char charVar3;\n  undefined undefinedVar4;\n  int intVar5;\n  undefined8 *ptrVar6;\n  long *ptrVar7;\n  char *ptrVar8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  long longVar11;\n  long longVar12;\n  long **ptrPtrVar13;\n  ulong ulongVar14;\n  ulong ulongVar15;\n  char *ptrVar16;\n  uint uintVar17;\n  long **pplVar18;\n  double doubleVar19;\n  char *localPtrVar48;\n  long **localPtrVar40 [2];\n  \n  if (param2[4] != 0) {\n    if (((param3 == 100) && (*param6 != '\\0')) && (param2[5] == param5)) goto LAB_00111a06;\n    charVar3 = initialize_debug_info_0010bbd3(param1);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param2 + 0x44) = 0;\n    *(undefined4 *)(param2 + 8) = 0;\n    param2[9] = param2[4];\n    if (*(char *)(param2 + 1) == '\\0') {\n      param2[6] = param2[5];\n    }\n    *(undefined4 *)(param2 + 0x10) = 1;\n    ptrVar6 = (undefined8 *)xmalloc(8);\n    param2[0x11] = (long)ptrVar6;\n    *ptrVar6 = 0;\n    param2[4] = 0;\n  }\n  strlen(param6);\n  if (param3 == 0x84) {\nLAB_00111ab7:\n    undefinedVar4 = process_debug_start_source_00108f08(param1,param6);\n    return undefinedVar4;\n  }\n  if (param3 < 0x85) {\n    if (param3 == 0x3c) {\n      intVar5 = strcmp(param6,\"gcc2_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(param2 + 8) = 2;\n        return 1;\n      }\n      intVar5 = strcmp(param6,\"gcc_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(param2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param2 + 0x44) = 1;\n      return 1;\n    }\n    if (param3 < 0x3d) {\n      if (param3 == 0x24) {\n        if (*param6 == '\\0') {\n          if (*(char *)(param2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param2 + 1) != '\\0') {\n            param5 = param5 + param2[7];\n          }\n          charVar3 = update_records_0010c1c6(param1,param2);\n          if (charVar3 != '\\0') {\n            charVar3 = end_debug_function_0010be1a(param1,param5);\n            if (charVar3 != '\\0') {\n              *(undefined *)(param2 + 0xc) = 0;\n              param2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param2 + 0xc) != '\\0') &&\n           ((param5 < (ulong)param2[0xd] || (param2[0xd] == 0xffffffffffffffff)))) {\n          param2[0xd] = param5;\n        }\n      }\n      else if (param3 < 0x25) {\n        if (param3 == 0xc) {\n          return 1;\n        }\n        if (param3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param3 == 0x2a) {\n          return 1;\n        }\n        if (param3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param2 + 0xc) != '\\0') {\n          ulongVar14 = param5;\n          if (((*param6 != '\\0') && (ulongVar15 = param2[0xd], ulongVar15 != 0xffffffffffffffff)) &&\n             (ulongVar14 = ulongVar15, param5 < ulongVar15)) {\n            ulongVar14 = param5;\n          }\n          charVar3 = update_records_0010c1c6(param1,param2);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          charVar3 = end_debug_function_0010be1a(param1,ulongVar14);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param2 + 0xc) = 0;\n          param2[0xd] = -1;\n        }\n        if (*param6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param2[4];\n        if (ptr == (void *)0x0) {\n          longVar12 = xstrdup(param6);\n          param2[4] = longVar12;\n        }\n        else {\n          if (*param6 == '/') {\n            longVar12 = xstrdup(param6);\n          }\n          else {\n            longVar12 = concat(ptr,param6,0);\n          }\n          param2[4] = longVar12;\n          free(ptr);\n        }\n        param2[5] = param5;\n        return 1;\n      }\n      if (param3 < 0x65) {\n        if (param3 == 0x44) {\n          longVar12 = 0;\n          if (*(char *)(param2 + 0xc) != '\\0') {\n            longVar12 = param2[7];\n          }\n          undefinedVar4 = record_line_debug_information_0010bf86(param1,(long)param4,longVar12 + param5);\n          return undefinedVar4;\n        }\n        if (param3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param3 == 0x82) {\n        ptrVar7 = (long *)xmalloc();\n        intVar5 = *(int *)(param2 + 0x10);\n        longVar10 = param2[10];\n        longVar11 = param2[0xb];\n        ptrVar7[5] = 0;\n        longVar12 = param2[0x11];\n        *(int *)(ptrVar7 + 4) = intVar5;\n        uintVar17 = intVar5 + 1;\n        *(uint *)(param2 + 0x10) = uintVar17;\n        *ptrVar7 = longVar11;\n        ptrVar7[1] = longVar10;\n        ptrVar7[2] = (long)param6;\n        ptrVar7[3] = param5;\n        param2[10] = (long)ptrVar7;\n        param2[0xb] = (long)ptrVar7;\n        longVar12 = xrealloc(longVar12,(ulong)uintVar17 << 3);\n        uintVar17 = *(uint *)(ptrVar7 + 4);\n        param2[0x11] = longVar12;\n        *(undefined8 *)(longVar12 + (ulong)uintVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    ptrVar8 = strchr(param6,0x3a);\n    if ((ptrVar8 != (char *)0x0) && ((ptrVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param2 + 0xc) != '\\0') {\n        ulongVar14 = param2[0xd];\n        ulongVar15 = param5;\n        if ((ulongVar14 != 0xffffffffffffffff) && (ulongVar15 = ulongVar14, param5 < ulongVar14)) {\n          ulongVar15 = param5;\n        }\n        charVar3 = update_records_0010c1c6(param1,param2);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        charVar3 = end_debug_function_0010be1a(param1,ulongVar15);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        param2[0xd] = -1;\n      }\n      if (*(char *)(param2 + 1) != '\\0') {\n        param2[7] = param5;\n      }\n      *(undefined *)(param2 + 0xc) = 1;\n    }\n    localPtrVar48 = strchr(param6,0x3a);\n    if (localPtrVar48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localPtrVar48[1] == ':') goto code_r0x00111cc7;\n    if (*param6 == '$') {\n      charVar3 = param6[1];\n      ptrVar16 = \"eh_throw\";\n      if (charVar3 != 'e') {\n        if (charVar3 < 'f') {\n          if ((charVar3 != 'X') && (charVar3 != '_')) {\nLAB_00111d1a:\n            undefinedVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_00108fe8(param6,undefinedVar9);\n          }\n        }\n        else {\n          ptrVar16 = \"this\";\n          if (charVar3 == 't') goto LAB_00111d62;\n          if (charVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptrVar16 = (char *)0x0;\n      if ((param6 != localPtrVar48) && ((*param6 != ' ' || (localPtrVar48 != param6 + 1)))) {\n        ptrVar16 = (char *)copy_and_null_terminate_00109a0b(param6,(int)localPtrVar48 - (int)param6);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localPtrVar48[1];\n    ptrVar8 = localPtrVar48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    ptrVar8 = localPtrVar48 + 2;\n    charVar3 = localPtrVar48[1];\n    switch(charVar3) {\n    case 'C':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      ptrVar8 = \"debug_record_label: not implemented\";\n      if (longVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      charVar3 = initialize_debug_record_0010bc80(param1,ptrVar16,longVar12,charVar3 == 'F',param5);\n      if (charVar3 != '\\0') {\n        do {\n          if (*localPtrVar48 != ';') {\n            return 1;\n          }\n          localPtrVar48 = localPtrVar48 + 1;\n          longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (ptrVar16 == (char *)0x0) goto LAB_0011208f;\n      longVar10 = param2[3];\n      ptrVar7 = (long *)param2[2];\n      charVar3 = *(char *)(*(long *)(*param2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param3 == 0x24) {\n        localPtrVar48 = ptrVar8;\n        do {\n          if (*localPtrVar48 != ';') {\n            return 1;\n          }\n          localPtrVar48 = localPtrVar48 + 1;\n          longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      break;\n    case 'S':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar3 = localPtrVar48[2];\n      if (charVar3 == 't') {\n        ptrVar8 = localPtrVar48 + 3;\n      }\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,ptrVar16,&localPtrVar48,localPtrVar40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (ptrVar16 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(param2 + 0x35);\n      ptrVar7 = (long *)debug_tag_type_0010c6be(param1,ptrVar16,longVar12);\n      if (ptrVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrVar40[0] != (long **)0x0) {\n        *localPtrVar40[0] = ptrVar7;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      ptrPtrVar13 = (long **)(param2 + 0x34);\n      pplVar18 = (long **)param2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      ptrVar8 = localPtrVar48 + 3;\n      if (((localPtrVar48[2] != '\\0') && (ptrVar8 = localPtrVar48 + 4, localPtrVar48[3] == 'n')) &&\n         (ptrVar8 = localPtrVar48 + 5, ptrVar16 = localPtrVar48 + 4, localPtrVar48 = ptrVar8, *ptrVar16 == '0')) {\n        for (; ptrVar8 = localPtrVar48, *localPtrVar48 != '\\0'; localPtrVar48 = localPtrVar48 + 1) {\n          if (*localPtrVar48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      break;\n    case 'c':\n      if (localPtrVar48[2] == '=') {\n        ptrVar8 = localPtrVar48 + 4;\n        charVar3 = localPtrVar48[3];\n        localPtrVar48 = ptrVar8;\n        if (charVar3 == 'i') {\n          longVar12 = strtol(ptrVar8,(char **)0x0,10);\n          if (ptrVar16 == (char *)0x0) {\n            return 0;\n          }\n          longVar10 = check_and_initialize_memory_00112996(param1,ptrVar16,4);\n          if (longVar10 != 0) {\n            *(long *)(longVar10 + 0x20) = (long)(int)longVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'r') {\n          doubleVar19 = strtod(ptrVar8,(char **)0x0);\n          if (ptrVar16 == (char *)0x0) {\n            return 0;\n          }\n          longVar12 = check_and_initialize_memory_00112996(param1,ptrVar16,5);\n          if (longVar12 != 0) {\n            *(double *)(longVar12 + 0x20) = doubleVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'e') {\n          longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n          if (longVar12 == 0) {\n            return 0;\n          }\n          ptrVar8 = localPtrVar48;\n          if (*localPtrVar48 == ',') {\n            longVar10 = strtol(localPtrVar48,(char **)0x0,10);\n            if (ptrVar16 == (char *)0x0) {\n              return 0;\n            }\n            longVar11 = check_and_initialize_memory_00112996(param1,ptrVar16,6);\n            if (longVar11 != 0) {\n              ptrVar7 = (long *)xmalloc(0x10);\n              *ptrVar7 = longVar12;\n              ptrVar7[1] = (long)(int)longVar10;\n              *(long **)(longVar11 + 0x20) = ptrVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localPtrVar48[2] == 'F') {\n        localPtrVar48 = localPtrVar48 + 3;\n        longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n        if (longVar12 == 0) {\n          return 0;\n        }\n        undefinedVar9 = initialize_data_structure_00113ce0(longVar12,0,0);\n        longVar12 = initialize_data_structure_00113d3a(undefinedVar9);\n      }\n      else {\n        localPtrVar48 = ptrVar8;\n        longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      }\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 1;\n      break;\n    case 'r':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 5;\nLAB_001123e8:\n      charVar3 = allocate_or_record_variable_0010c139(param1,param2,ptrVar16,longVar12,undefinedVar9,param5);\n      goto joined_r0x001123f8;\n    case 't':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,ptrVar16,&localPtrVar48,localPtrVar40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (ptrVar16 == (char *)0x0) {\n        return 1;\n      }\n      ptrVar7 = (long *)initialize_debug_name_0010c218(param1,ptrVar16,longVar12);\n      if (ptrVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrVar40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrVar40[0] = ptrVar7;\n      return 1;\n    case 'v':\n      localPtrVar48 = ptrVar8;\n      longVar12 = FUNC_0010ee3f(param1,param2,0,&localPtrVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n    }\n    charVar3 = record_parameter_data_0010bd62(param1,ptrVar16,longVar12,undefinedVar9,param5);\n    goto joined_r0x001123f8;\n  }\n  if (param3 == 0xe0) {\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    charVar3 = update_records_0010c1c6(param1,param2);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    charVar3 = debug_end_block_0010bf20(param1,param2[7] + param2[6] + param5);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    param2 = param2 + 0xe;\n    *(int *)param2 = *(int *)param2 + -1;\n    ptrVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param3) {\n      if (param3 == 0xe2) {\n        ptrVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        ptrVar8 = \"debug_end_common_block: not implemented\";\n        if (param3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar9 = dcgettext(0,ptrVar8,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar9);\n      return 0;\n    }\n    if (param3 != 0xc0) {\n      if (param3 == 0xc2) {\n        intVar5 = *(int *)(param2 + 0x10);\n        *(uint *)(param2 + 0x10) = intVar5 + 1U;\n        longVar12 = xrealloc(param2[0x11],(ulong)(intVar5 + 1U) << 3);\n        ptrVar6 = (undefined8 *)param2[0xb];\n        param2[0x11] = longVar12;\n        while( true ) {\n          if (ptrVar6 == (undefined8 *)0x0) {\n            undefinedVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_00108fe8(param6,undefinedVar9);\n            *(undefined8 *)(param2[0x11] + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param5 == ptrVar6[3]) && (intVar5 = strcmp((char *)ptrVar6[2],param6), intVar5 == 0))\n          break;\n          ptrVar6 = (undefined8 *)*ptrVar6;\n        }\n        *(undefined8 *)(longVar12 + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = ptrVar6[5];\n        return 1;\n      }\n      if (param3 == 0xa2) {\n        longVar12 = param2[10];\n        if (longVar12 != 0) {\n          longVar10 = *(long *)(longVar12 + 8);\n          uintVar17 = *(uint *)(longVar12 + 0x20);\n          param2[10] = longVar10;\n          if ((uintVar17 < *(uint *)(param2 + 0x10)) &&\n             (*(undefined8 *)(longVar12 + 0x28) = *(undefined8 *)(param2[0x11] + (ulong)uintVar17 * 8),\n             longVar10 != 0)) {\n            param6 = *(char **)(longVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param6 = (char *)param2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param2 + 0xc) != '\\0') {\n      charVar3 = start_block_debugging_0010be88(param1,param2[7] + param2[6] + param5);\n      if (charVar3 == '\\0') {\n        return 0;\n      }\n      charVar3 = update_records_0010c1c6(param1,param2);\n      if (charVar3 != '\\0') {\n        *(int *)(param2 + 0xe) = *(int *)(param2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    ptrVar8 = \"N_LBRAC not within function\\n\";\n  }\n  ptrVar8 = (char *)dcgettext(0,ptrVar8,5);\n  fprintf(_stderr,ptrVar8);\n  return 0;\ncode_r0x00111cc7:\n  localPtrVar48 = localPtrVar48 + 2;\n  localPtrVar48 = strchr(localPtrVar48,0x3a);\n  if (localPtrVar48 == (char *)0x0) {\n    ptrVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localPtrVar48 = ptrVar8;\n    print_error_message_00108fb9(param6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar3 != 't') {\n      return 1;\n    }\n    ptrVar7 = (long *)initialize_debug_name_0010c218(param1,ptrVar16,ptrVar7);\n    if (ptrVar7 != (long *)0x0) {\n      if (localPtrVar40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrVar40[0] = ptrVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *ptrVar16) &&\n     (intVar5 = strcmp((char *)pplVar18[1],ptrVar16), intVar5 == 0)) {\n    pplVar18[3] = ptrVar7;\n    *ptrPtrVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptrPtrVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar10 < 1) {\nLAB_0011208f:\n    undefinedVar9 = 1;\nLAB_001121c4:\n    charVar3 = record_variable_0010c05d(param1,ptrVar16,longVar12,undefinedVar9,param5);\njoined_r0x001123f8:\n    if (charVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  ptrVar8 = *(char **)(*ptrVar7 + 8);\n  if ((charVar3 != '\\0') && (charVar3 == *ptrVar8)) {\n    ptrVar8 = ptrVar8 + 1;\n  }\n  if ((*ptrVar8 == *ptrVar16) && (intVar5 = strcmp(ptrVar8,ptrVar16), intVar5 == 0)) {\n    param5 = *(long *)(*ptrVar7 + 0x10) + *(long *)(*(long *)(*ptrVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar10 = longVar10 + -1;\n  ptrVar7 = ptrVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strtod",
                "FUN_0010be88",
                "FUN_00108fe8",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_00113d3a",
                "xmalloc",
                "FUN_00112996",
                "FUN_0010bf20",
                "xrealloc",
                "strchr",
                "FUN_0010c1c6",
                "concat",
                "FUN_0010c05d",
                "strcmp",
                "FUN_00108f08",
                "strlen",
                "fprintf",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_0010c139",
                "strtol",
                "FUN_00109a0b",
                "xstrdup",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "free",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010bc80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_and_print_files_00115dc0",
                "param_1": "file_path",
                "param_2": "file_info_array",
                "param_3": "file_count",
                "cVar1": "error_flag",
                "iVar2": "bfd_error_code",
                "uVar3": "reloc_error_message",
                "lVar4": "reloc_upper_bound",
                "puVar5": "reloc_array",
                "uVar6": "reloc_count",
                "UNRECOVERED_JUMPTABLE": "jmp_table",
                "puVar7": "relocated_files",
                "puVar8": "current_reloc_file",
                "uVar9": "relocated_file_count",
                "uStack_38": "dummy_var"
            },
            "code": "\nvoid process_and_print_files_00115dc0(undefined8 file_path,undefined8 *file_info_array,long file_count)\n\n{\n  char error_flag;\n  int bfd_error_code;\n  undefined8 reloc_error_message;\n  long reloc_upper_bound;\n  undefined8 *reloc_array;\n  ulong reloc_count;\n  code *jmp_table;\n  undefined8 *relocated_files;\n  undefined8 *current_reloc_file;\n  ulong relocated_file_count;\n  undefined8 dummy_var;\n  \n  error_flag = process_file_00115f50(file_path,file_info_array,0);\n  if (error_flag != '\\0') {\n    return;\n  }\n  reloc_error_message = file_info_array[0xc];\n  if ((((*(byte *)(file_count + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (reloc_upper_bound = process_files_00114190(*file_info_array,0,0x100), reloc_upper_bound == 0)) {\n    reloc_upper_bound = bfd_get_reloc_upper_bound(file_path,file_info_array);\n    if (reloc_upper_bound < 0) {\n      if ((reloc_upper_bound != -1) || (bfd_error_code = bfd_get_error(), bfd_error_code != 5)) {\n        DAT_00127a20 = 1;\n        reloc_error_message = 0;\nLAB_00108315:\n        print_error_information_001126c0(0,file_path,file_info_array,reloc_error_message,dummy_var);\n        return;\n      }\n    }\n    else if (reloc_upper_bound != 0) {\n      reloc_array = (undefined8 *)file_info_array[0xe];\n      if (reloc_array == (undefined8 *)0x0) {\n        reloc_array = (undefined8 *)bfd_alloc(file_count);\n        if (reloc_array == (undefined8 *)0x0) {\n          print_bfd_error_0011a110(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(file_path,file_info_array,reloc_array,DAT_001278b0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a20 = 1;\n          reloc_error_message = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(file_info_array + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        relocated_files = reloc_array;\n        for (relocated_file_count = 0; relocated_file_count != reloc_count; relocated_file_count = relocated_file_count + 1) {\n          current_reloc_file = relocated_files;\n          if (((*(long **)reloc_array[relocated_file_count] != (long *)0x0) &&\n              (reloc_upper_bound = **(long **)reloc_array[relocated_file_count], reloc_upper_bound != 0)) &&\n             (error_flag = check_pattern_exists_00115d70(*(undefined8 *)(reloc_upper_bound + 8),DAT_00127a08), error_flag != '\\0')) {\n            current_reloc_file = relocated_files + 1;\n            *relocated_files = reloc_array[relocated_file_count];\n          }\n          relocated_files = current_reloc_file;\n        }\n        *relocated_files = 0;\n        reloc_count = (long)relocated_files - (long)reloc_array >> 3;\n      }\n      jmp_table = *(code **)(*(long *)(file_count + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_array = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_array = (undefined8 *)0x0;\n  jmp_table = *(code **)(*(long *)(file_count + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmp_table)(file_count,reloc_error_message,reloc_array,reloc_count);\n  return;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "FUN_001082df",
                "bfd_alloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00114190",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_and_print_files_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "process_data_0010d559",
                "param_1": "inputArray",
                "param_2": "inputString",
                "param_3": "outputCount",
                "bVar1": "firstChar",
                "pbVar2": "currentChar",
                "cVar3": "status",
                "uVar4": "extractedNumber",
                "iVar5": "stringComparisonResult",
                "ppcVar6": "tempArray",
                "sVar7": "stringLength",
                "lVar8": "tempValue",
                "plVar9": "valuePointer",
                "pcVar10": "tempString",
                "__s1": "nextValue",
                "__ptr": "tempPointer",
                "pbVar11": "updatedChar",
                "uVar12": "namedType",
                "local_64": "counter",
                "local_40": "stringArray"
            },
            "code": "\nundefined8 processData_0010d559(undefined8 *inputArray,byte **inputString,long *outputCount)\n\n{\n  byte firstChar;\n  byte *currentChar;\n  char status;\n  uint extractedNumber;\n  int stringComparisonResult;\n  char **tempArray;\n  size_t stringLength;\n  long tempValue;\n  long *valuePointer;\n  char *tempString;\n  char *nextValue;\n  void *tempPointer;\n  byte *updatedChar;\n  undefined8 namedType;\n  byte *__nptr;\n  int counter;\n  char *stringArray [2];\n  \n  currentChar = *inputString;\n  firstChar = currentChar[1];\n  if ((char)firstChar < ':') {\n    if ((char)firstChar < '1') goto LAB_0010d5d8;\n    counter = (char)firstChar + -0x30;\n    if (currentChar[2] == 0x5f) {\n      *inputString = currentChar + 1;\n    }\n    updatedChar = *inputString + 2;\n  }\n  else {\n    if (((firstChar != 0x5f) || (((&_sch_istable)[(ulong)currentChar[2] * 2] & 4) == 0)) ||\n       (currentChar[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = currentChar + 2;\n    tempValue = strtol((char *)__nptr,(char **)0x0,10);\n    counter = (int)tempValue;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    updatedChar = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *inputString = updatedChar;\n  tempArray = (char **)0x0;\n  if (outputCount != (long *)0x0) {\n    tempArray = stringArray;\n  }\n  tempValue = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (outputCount != (long *)0x0) {\n          *outputCount = tempValue;\n        }\n        return 1;\n      }\n      if (**inputString == 0x5f) {\n        *inputString = *inputString + 1;\n      }\n      if (**inputString != 0x74) break;\n      status = extract_string_value_0010d21c(inputArray,inputString,tempArray);\n      tempString = stringArray[0];\n      if (status == '\\0') {\n        return 0;\n      }\n      if (outputCount != (long *)0x0) {\n        stringLength = strlen(stringArray[0]);\n        tempValue = find_match_and_retrieve_data_0010afd5(*inputArray,inputArray[1],tempString,stringLength & 0xffffffff,9);\n        free(tempString);\n        if (tempValue == 0) {\n          return 0;\n        }\n      }\n    }\n    extractedNumber = extract_number_from_byte_00108e76(inputString);\n    stringLength = strlen((char *)*inputString);\n    if (stringLength < extractedNumber) break;\n    if (outputCount != (long *)0x0) {\n      if ((tempValue != 0) && (valuePointer = (long *)extract_real_value_00113b1e(tempValue), valuePointer != (long *)0x0)) {\n        tempString = (char *)copy_and_null_terminate_00109a0b(*inputString,extractedNumber);\n        for (; tempValue = *valuePointer, tempValue != 0; valuePointer = valuePointer + 1) {\n          tempValue = *(long *)(tempValue + 8);\n          if (tempValue == 0) {\n            free(tempString);\n            return 0;\n          }\n          nextValue = (char *)get_next_value_001129f4(tempValue);\n          if ((nextValue != (char *)0x0) && (stringComparisonResult = strcmp(nextValue,tempString), stringComparisonResult == 0)) break;\n        }\n        free(tempString);\n        if (tempValue != 0) goto LAB_0010d7ad;\n      }\n      namedType = 9;\n      if (counter == 0) {\n        tempPointer = (void *)copy_and_null_terminate_00109a0b(*inputString,extractedNumber);\n        tempValue = find_named_type_0010914e(*inputArray,tempPointer);\n        free(tempPointer);\n        if (tempValue != 0) goto LAB_0010d7ad;\n        namedType = 0;\n      }\n      tempValue = find_match_and_retrieve_data_0010afd5(*inputArray,inputArray[1],*inputString,extractedNumber,namedType);\n      if (tempValue == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *inputString = *inputString + extractedNumber;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(currentChar);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00108e76",
                "strlen",
                "FUN_00113b1e",
                "free",
                "FUN_001129f4",
                "FUN_0010914e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_001275e0);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_00108466",
                "param_7": "data_to_free"
            },
            "code": "\nvoid cleanup_and_print_error_00108466(void)\n\n{\n  void *data_to_free;\n  \n  DAT_00127a20 = 1;\n  print_error_information_001126c0(0);\n  free(data_to_free);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_number_from_byte_00108e76",
                "param_1": "bytePointer",
                "bVar1": "currentByte",
                "iVar2": "extractedNumber"
            },
            "code": "\nint extractNumberFromByte_00108e76(byte **bytePointer)\n\n{\n  byte currentByte;\n  int extractedNumber;\n  \n  extractedNumber = 0;\n  while( true ) {\n    currentByte = **bytePointer;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *bytePointer = *bytePointer + 1;\n    extractedNumber = extractedNumber * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return extractedNumber;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "extract_number_from_byte_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "create_bfd_hash_0010bb52",
                "param_1": "hash_size",
                "lVar1": "new_hash",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_func"
            },
            "code": "\nlong create_bfd_hash_0010bb52(long hash_size,undefined8 param_2,undefined8 param_3)\n\n{\n  long new_hash;\n  \n  if (((hash_size != 0) || (hash_size = bfd_hash_allocate(param_2,0x30), hash_size != 0)) &&\n     (new_hash = bfd_hash_newfunc(hash_size,param_2,param_3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "create_bfd_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_value_thunk_0010e439",
                "param_1": "target",
                "param_2": "value",
                "process_string_0010e2f0": "process_string"
            },
            "code": "\nvoid set_param_value_thunk_0010e439(long target,undefined8 value)\n\n{\n  *(undefined8 *)(target + 0x210) = value;\n  process_string(target,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_value_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_and_get_directory_0011283f",
                "param_1": "input_path",
                "param_2": "output_path",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_and_get_directory_0011283f(char *input_path,char *output_path)\n\n{\n  int iVar1;\n  stat file_info;\n  \n  if ((output_path == (char *)0x0) && (input_path != (char *)0x0)) {\n    iVar1 = access(input_path,7);\n    if (iVar1 == 0) {\n      iVar1 = stat(input_path,&file_info);\n      if ((iVar1 == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        output_path = input_path;\n      }\n    }\n  }\n  return output_path;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_and_get_directory_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_handle_00108237",
                "unaff_R12D": "fileHandle",
                "piVar2": "errnoPointer",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFileHandle_00108237(void)\n\n{\n  int errnoValue;\n  int *errnoPointer;\n  int fileHandle;\n  \n  errnoPointer = __errno_location();\n  errnoValue = *errnoPointer;\n  close(fileHandle);\n  *errnoPointer = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_handle_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "initialize_debug_record_0010bc80",
                "param_1": "ptr_debug_context",
                "param_2": "debug_filename",
                "param_3": "debug_record_size",
                "param_4": "debug_record_type",
                "uVar1": "error_message",
                "plVar2": "ptr_debug_record",
                "puVar3": "ptr_memory",
                "lVar4": "temp_value",
                "puVar5": "ptr_temp_memory",
                "pcVar6": "debug_file",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\ninitialize_debug_record_0010bc80(long ptr_debug_context,char *debug_filename,long debug_record_size,uint debug_record_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *ptr_debug_record;\n  undefined4 *ptr_memory;\n  long temp_value;\n  undefined4 *ptr_temp_memory;\n  char *debug_file;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  debug_file = \"\";\n  if (debug_filename != (char *)0x0) {\n    debug_file = debug_filename;\n  }\n  if (debug_record_size != 0) {\n    if (*(long *)(ptr_debug_context + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      ptr_debug_record = (long *)xmalloc(0x18);\n      *ptr_debug_record = debug_record_size;\n      *(undefined (*) [16])(ptr_debug_record + 1) = ZEXT816(0);\n      ptr_memory = (undefined4 *)xmalloc(0x30);\n      *(long **)(ptr_debug_context + 0x18) = ptr_debug_record;\n      ptr_debug_record[2] = (long)ptr_memory;\n      ptr_temp_memory = ptr_memory;\n      for (temp_value = 0xc; temp_value != 0; temp_value = temp_value + -1) {\n        *ptr_temp_memory = 0;\n        ptr_temp_memory = ptr_temp_memory + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(ptr_debug_context + 0x20) = ptr_memory;\n      temp_value = *(long *)(ptr_debug_context + 0x10);\n      *(undefined8 *)(ptr_memory + 6) = param_5;\n      *(undefined8 *)(ptr_memory + 8) = 0xffffffffffffffff;\n      temp_value = initialize_memory_00112925(temp_value + 0x10,debug_file,3,(debug_record_type & 0xff) + 1);\n      if (temp_value != 0) {\n        *(long **)(temp_value + 0x20) = ptr_debug_record;\n        error_message = CONCAT71((int7)((ulong)temp_value >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_record_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_modified_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_modified_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_information_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_information_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_files_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_needed_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_information_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_files_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_files_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_information_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_information_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_information_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_information_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_information_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_information_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improved_extract_and_process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_block_debugging_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_information_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = initialize_section_data_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_exists_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_exists_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_exists_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_exists_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = initialize_section_data_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = reverse_and_improve_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_information_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_information_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_and_print_files_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_information_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_information_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_information_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_information_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_information_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_information_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_gnu_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_information_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlashPtr",
                "lVar2": "remainingChars",
                "lVar3": "copyLength",
                "lVar4": "slashOffset",
                "pcVar5": "copyPtr",
                "bVar6": "slashFound"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlashPtr;\n  long remainingChars;\n  long copyLength;\n  long slashOffset;\n  char *copyPtr;\n  byte slashFound;\n  \n  slashFound = 0;\n  lastSlashPtr = strrchr(filePath,0x2f);\n  if (lastSlashPtr == (char *)0x0) {\n    lastSlashPtr = (char *)xmalloc(9);\n    copyLength = 0;\n  }\n  else {\n    slashOffset = (long)lastSlashPtr - (long)filePath;\n    lastSlashPtr = (char *)xmalloc(slashOffset + 0xb);\n    copyLength = slashOffset + 1;\n    copyPtr = lastSlashPtr;\n    for (remainingChars = slashOffset; remainingChars != 0; remainingChars = remainingChars + -1) {\n      *copyPtr = *filePath;\n      filePath = filePath + (ulong)slashFound * -2 + 1;\n      copyPtr = copyPtr + (ulong)slashFound * -2 + 1;\n    }\n    lastSlashPtr[slashOffset] = '/';\n  }\n  *(undefined8 *)(lastSlashPtr + copyLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlashPtr + copyLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "initialize_data_0010a181",
                "param_1": "ptr",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "cVar1": "charValue",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combinedString",
                "sVar5": "length1",
                "sVar6": "length2",
                "lVar7": "counter",
                "local_41": "flagValue",
                "iVar2": "intVar1",
                "iVar3": "intVar2",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 initialize_data_0010a181(long ptr,long start,long end,byte flag)\n\n{\n  char charValue;\n  int intVar1;\n  int intVar2;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  long counter;\n  byte flagValue;\n  \n  charValue = *(char *)(*(long *)(ptr + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_pointer_00109b2f();\n  flagValue = 1;\n  if (charValue == '\\0') {\n    flagValue = *(byte *)(*(long *)(ptr + 0x60) + 0x1c);\n  }\n  intVar1 = *(int *)(*(long *)(ptr + 0x60) + 0x18);\n  string2 = (char *)extract_and_free_pointer_00109b2f(ptr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combinedString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *combinedString = '\\0';\n    counter = 0;\n    flagValue = flagValue & 1;\n  }\n  else {\n    counter = *(long *)(ptr + 0x68);\n    *(long *)(ptr + 0x68) = counter + 1;\n    sprintf(combinedString,\"%ld=@S;\",counter);\n    flagValue = flag;\n  }\n  length1 = strlen(combinedString);\n  sprintf(combinedString + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  intVar2 = 0;\n  if (start <= end) {\n    intVar2 = intVar1 * (((int)end - (int)start) + 1);\n  }\n  returnValue = initialize_data_0010a181_struct_00109b52(ptr,combinedString,counter,flagValue,intVar2);\n  if ((char)returnValue != '\\0') {\n    free(combinedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "display_binary_info_001199d0",
                "iVar1": "maxWidth",
                "iVar2": "target",
                "iVar3": "cmpResult",
                "pcVar4": "str",
                "sVar5": "strLen",
                "pcVar6": "tempDir",
                "uVar7": "result",
                "piVar8": "errNo",
                "iVar9": "iter",
                "lVar10": "len1",
                "lVar11": "len2",
                "ppcVar12": "binaryData",
                "uVar13": "maxArchLength",
                "uVar14": "archLength",
                "local_70": "counter"
            },
            "code": "\n\n\nvoid displayBinaryInfo_001199d0(void)\n\n{\n  int maxWidth;\n  int target;\n  int cmpResult;\n  char *str;\n  size_t strLen;\n  char *tempDir;\n  undefined8 result;\n  int *errNo;\n  int iter;\n  long len1;\n  long len2;\n  char **binaryData;\n  uint maxArchLength;\n  ulong archLength;\n  int counter;\n  \n  str = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(str,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    str = getenv(\"TMPDIR\");\n    result = check_and_get_directory_0011283f(str,0);\n    str = getenv(\"TMP\");\n    result = check_and_get_directory_0011283f(str,result);\n    str = getenv(\"TEMP\");\n    result = check_and_get_directory_0011283f(str,result);\n    result = check_and_get_directory_0011283f(&DAT_0011b39a,result);\n    result = check_and_get_directory_0011283f(\"/var/tmp\",result);\n    str = (char *)check_and_get_directory_0011283f(&DAT_00120324,result);\n    if (str == (char *)0x0) {\n      str = \".\";\n    }\n    strLen = strlen(str);\n    tempDir = (char *)xmalloc((int)strLen + 2);\n    DAT_001278c0 = strcpy(tempDir,str);\n    DAT_001278c0[strLen & 0xffffffff] = '/';\n    DAT_001278c0[(int)strLen + 1] = '\\0';\n  }\n  str = DAT_001278c0;\n  strLen = strlen(DAT_001278c0);\n  len1 = (long)(int)strLen;\n  tempDir = (char *)xmalloc(len1 + 9);\n  strcpy(tempDir,str);\n  *(undefined2 *)(tempDir + len1) = 0x6363;\n  *(undefined4 *)(tempDir + len1 + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempDir + len1 + 2) + 3) = 0x585858;\n  tempDir[len1 + 8] = '\\0';\n  target = mkstemps(tempDir,0);\n  if (target == -1) {\n    errNo = __errno_location();\n    tempDir = strerror(*errNo);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",str,tempDir);\n                    \n    abort();\n  }\n  target = close(target);\n  if (target != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  target = 2;\n  bfd_iterate_over_targets(process_binary_data_00119f70);\n  unlink(tempDir);\n  free(tempDir);\n  counter = 0;\n  do {\n    str = (char *)bfd_printable_arch_mach(target);\n    strLen = strlen(str);\n    if ((int)maxArchLength < (int)(uint)strLen) {\n      maxArchLength = (uint)strLen;\n    }\n    target = target + 1;\n  } while (target != 0x57);\n  str = getenv(\"COLUMNS\");\n  target = counter;\n  if (str != (char *)0x0) {\n    len1 = strtol(str,(char **)0x0,10);\n    maxWidth = (int)len1;\n    if (maxWidth != 0) goto LAB_00119b11;\n  }\n  maxWidth = 0x50;\nLAB_00119b11:\n  do {\n    counter = target;\n    if (-1 < counter) {\n      return;\n    }\n    len2 = (long)counter;\n    iter = (maxWidth - maxArchLength) + -1;\n    len1 = len2;\n    do {\n      target = (int)len1;\n      if (-1 < target) break;\n      strLen = strlen(*(char **)(len1 * 0x60));\n      len1 = len1 + 1;\n      iter = (iter - (int)strLen) + -1;\n    } while (-1 < iter);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (binaryData = (char **)(len2 * 0x60);\n        ((ulong)(uint)(target - counter) + len2) * 0x60 - (long)binaryData != 0;\n        binaryData = binaryData + 0xc) {\n      printf(\"%s \",*binaryData);\n    }\n    iter = 2;\n    putc(10,_stdout);\n    do {\n      str = (char *)bfd_printable_arch_mach(iter,0);\n      cmpResult = strcmp(str,\"UNKNOWN!\");\n      if (cmpResult != 0) {\n        result = bfd_printable_arch_mach(iter,0);\n        printf(\"%*s \",(ulong)maxArchLength,result);\n        binaryData = (char **)(len2 * 0x60);\n        cmpResult = counter;\n        while (target != cmpResult) {\n          if (*(char *)((long)binaryData + (ulong)(iter - 2) + 8) == '\\0') {\n            strLen = strlen(*binaryData);\n            for (archLength = strLen & 0xffffffff; (int)archLength != 0; archLength = (ulong)((int)archLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*binaryData,_stdout);\n          }\n          cmpResult = cmpResult + 1;\n          if (target != cmpResult) {\n            putc(0x20,_stdout);\n          }\n          binaryData = binaryData + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      iter = iter + 1;\n    } while (iter != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "close",
                "abort",
                "getenv",
                "strlen",
                "fprintf",
                "bfd_printable_arch_mach",
                "xmalloc",
                "dcgettext",
                "FUN_00104943",
                "FUN_00119f70",
                "__errno_location",
                "unlink",
                "FUN_0011283f",
                "free",
                "strerror",
                "mkstemps",
                "bfd_iterate_over_targets",
                "strcpy",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "display_binary_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_data_0010847a"
            },
            "code": "\nvoid initializeData_0010847a(void)\n\n{\n  process_build_attributes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_data_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "extract_string_value_0010d21c",
                "param_1": "input_ptr",
                "param_2": "byte_ptr",
                "param_3": "output_ptr",
                "uVar6": "result",
                "pbVar2": "byte_value",
                "bVar3": "temp1",
                "cVar4": "temp2",
                "bVar5": "temp3",
                "uVar8": "extracted_number",
                "sVar9": "string_length",
                "pbVar10": "current_byte_ptr",
                "__ptr": "copied_string_ptr",
                "__ptr_00": "concatenated_string_ptr",
                "__haystack": "demangled_string",
                "pcVar11": "str_ptr_1",
                "pcVar13": "str_ptr_2",
                "pcVar15": "str_ptr_3",
                "bVar14": "temp4",
                "uVar12": "output_string",
                "bVar16": "temp5",
                "bVar17": "temp6",
                "bVar18": "temp7",
                "bVar19": "temp8",
                "uVar20": "loop_counter",
                "uVar21": "number_value",
                "local_3c": "extracted_values"
            },
            "code": "\nundefined4 extractStringValue_0010d21c(undefined8 input_ptr,byte **byte_ptr,undefined8 *output_ptr)\n\n{\n  byte bVar1;\n  byte *byte_value;\n  byte temp1;\n  char temp2;\n  byte temp3;\n  undefined4 result;\n  int iVar7;\n  uint extracted_number;\n  size_t string_length;\n  byte *current_byte_ptr;\n  void *copied_string_ptr;\n  void *concatenated_string_ptr;\n  char *demangled_string;\n  char *str_ptr_1;\n  undefined8 output_string;\n  char *str_ptr_2;\n  byte temp4;\n  char *str_ptr_3;\n  byte temp5;\n  byte temp6;\n  byte temp7;\n  byte temp8;\n  uint loop_counter;\n  ulong number_value;\n  uint extracted_values [3];\n  \n  byte_value = *byte_ptr;\n  *byte_ptr = byte_value + 1;\n  extracted_values[0] = extract_number_from_byte_00108e76(byte_ptr);\n  number_value = (ulong)extracted_values[0];\n  if (extracted_values[0] != 0) {\n    current_byte_ptr = *byte_ptr;\n    string_length = strlen((char *)current_byte_ptr);\n    if (number_value <= string_length) {\n      *byte_ptr = current_byte_ptr + number_value;\n      loop_counter = 0;\n      result = parse_number_00108ea1(byte_ptr,extracted_values);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (extracted_values[0] <= loop_counter) {\n          if (output_ptr == (undefined8 *)0x0) {\n            return result;\n          }\n          copied_string_ptr = (void *)copy_and_null_terminate_00109a0b(byte_value,(int)*byte_ptr - (int)byte_value);\n          concatenated_string_ptr = (void *)concat(\"NoSuchStrinG__\",copied_string_ptr,0);\n          free(copied_string_ptr);\n          demangled_string = (char *)cplus_demangle(concatenated_string_ptr,2);\n          free(concatenated_string_ptr);\n          if ((demangled_string != (char *)0x0) &&\n             (str_ptr_1 = strstr(demangled_string,\"::NoSuchStrinG\"), str_ptr_2 = demangled_string,\n             str_ptr_3 = demangled_string, str_ptr_1 != (char *)0x0)) {\n            for (; str_ptr_2 != str_ptr_1; str_ptr_2 = str_ptr_2 + 1) {\n              if ((*str_ptr_2 != ' ') ||\n                 (((str_ptr_2[1] == '>' && (demangled_string < str_ptr_2)) && (str_ptr_2[-1] == '>')))) {\n                *str_ptr_3 = *str_ptr_2;\n                str_ptr_3 = str_ptr_3 + 1;\n              }\n            }\n            output_string = copy_and_null_terminate_00109a0b(demangled_string,(int)str_ptr_3 - (int)demangled_string);\n            *output_ptr = output_string;\n            free(demangled_string);\n            return result;\n          }\n          print_error_message_0010911f(byte_value);\n          free(demangled_string);\n          return 0;\n        }\n        current_byte_ptr = *byte_ptr;\n        if (*current_byte_ptr != 0x5a) {\n          temp3 = decode_binary_0010c95e(input_ptr,byte_ptr,0);\n          if (temp3 == 0) {\n            return 0;\n          }\n          temp1 = 0;\n          temp4 = 0;\n          temp7 = 0;\n          temp6 = 0;\n          temp8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              temp5 = temp1;\n              bVar1 = *current_byte_ptr;\n              if ((temp4 | bVar1 == 0) != 0) {\n                temp3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp1 = temp3;\n              temp4 = temp3;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                number_value = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((number_value & 0x11409) == 0) {\n                  if ((number_value & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              current_byte_ptr = current_byte_ptr + 1;\n              temp1 = temp5;\n              temp4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              temp1 = temp5;\n              temp7 = temp3;\n              break;\n            case 99:\n              temp1 = temp5;\n              temp8 = temp3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp1 = temp5;\n              temp6 = temp3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byte_ptr = current_byte_ptr + 1;\n        temp2 = decode_binary_0010c95e(input_ptr,byte_ptr,0);\n        if (temp2 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(byte_value);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (temp5 == 0) {\n    if (temp8 == 0) {\n      if (temp7 == 0) {\n        if (temp6 == 0) {\n          if (temp3 != 0) {\n            extracted_number = extract_number_from_byte_00108e76(byte_ptr);\n            if (extracted_number == 0) goto LAB_0010d280;\n            *byte_ptr = *byte_ptr + extracted_number;\n          }\n        }\n        else {\n          if (**byte_ptr == 0x6d) {\n            *byte_ptr = *byte_ptr + 1;\n          }\n          while( true ) {\n            current_byte_ptr = *byte_ptr;\n            if (((&_sch_istable)[(ulong)*current_byte_ptr * 2] & 4) == 0) break;\n            *byte_ptr = current_byte_ptr + 1;\n          }\n          if (*current_byte_ptr == 0x2e) {\n            do {\n              current_byte_ptr = current_byte_ptr + 1;\n              *byte_ptr = current_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*current_byte_ptr * 2] & 4) != 0);\n          }\n          current_byte_ptr = *byte_ptr;\n          if (*current_byte_ptr == 0x65) {\n            do {\n              current_byte_ptr = current_byte_ptr + 1;\n              *byte_ptr = current_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*current_byte_ptr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        extracted_number = extract_number_from_byte_00108e76(byte_ptr);\n        if (1 < extracted_number) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byte_ptr == 0x6d) {\n        *byte_ptr = *byte_ptr + 1;\n      }\n      iVar7 = extract_number_from_byte_00108e76(byte_ptr);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byte_ptr == 0x6d) {\n      *byte_ptr = *byte_ptr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byte_ptr * 2] & 4) != 0) {\n      *byte_ptr = *byte_ptr + 1;\n    }\n  }\nLAB_0010d2b1:\n  loop_counter = loop_counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "FUN_00108e76",
                "abort",
                "FUN_0010c95e",
                "strlen",
                "free",
                "cplus_demangle",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strstr",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_string_value_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = extract_number_from_byte_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = extract_number_from_byte_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = extract_number_from_byte_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = extract_number_from_byte_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hashtable_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupHashtable_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hashtable_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_or_record_variable_0010c139",
                "param_2": "record_address",
                "uVar1": "previous_value",
                "cVar2": "character",
                "uVar3": "result",
                "puVar4": "allocated_ptr",
                "unaff_R15": "unaffected_value"
            },
            "code": "\nulong allocate_or_record_variable_0010c139(undefined8 param_1,long record_address,undefined8 param_3,undefined8 param_4,\n                  undefined4 param_5,undefined8 param_6)\n\n{\n  undefined8 previous_value;\n  char character;\n  ulong result;\n  undefined8 *allocated_ptr;\n  undefined8 in_R10;\n  undefined8 unaffected_value;\n  \n  character = *(char *)(record_address + 0x60);\n  if ((character != '\\0') && ((*(int *)(record_address + 0x40) != 0 || (*(char *)(record_address + 0x44) == '\\0')))) {\n    allocated_ptr = (undefined8 *)xmalloc(0x28);\n    previous_value = *(undefined8 *)(record_address + 0x78);\n    *(undefined8 *)((long)allocated_ptr + 0x1c) = 0;\n    allocated_ptr[2] = param_4;\n    *(undefined4 *)(allocated_ptr + 3) = param_5;\n    allocated_ptr[4] = param_6;\n    *(undefined8 **)(record_address + 0x78) = allocated_ptr;\n    *allocated_ptr = previous_value;\n    allocated_ptr[1] = param_3;\n    return CONCAT71((int7)((ulong)unaffected_value >> 8),character) & 0xffffffff;\n  }\n  result = record_variable_0010c05d(param_1,param_3,param_4,param_5,param_6,in_R10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_or_record_variable_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_string_data_0010e439",
                "param_1": "dataPtr",
                "param_2": "newData"
            },
            "code": "\nvoid updateStringData_0010e439(long dataPtr,undefined8 newData)\n\n{\n  *(undefined8 *)(dataPtr + 0x210) = newData;\n  process_string_0010e2f0(dataPtr,0x84,0,0,newData);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_string_data_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010554f",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010c95e",
                "FUN_00104943",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_0011173a",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010a2b9",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00115530",
                "FUN_00113fb0",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_00108c86",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010b0fa",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_data_00109d3e",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "selected_value"
            },
            "code": "\nvoid initialize_data_00109d3e(undefined8 data,int size)\n\n{\n  undefined8 selected_value;\n  \n  selected_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    selected_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  initialize_data_00109d3e_struct_00109cf4(data,selected_value,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_and_check_files_00112502",
                "param_1": "file_info",
                "param_2": "file_data",
                "param_3": "file_size",
                "uVar1": "counter",
                "puVar2": "file_array",
                "uVar3": "file_pointer",
                "cVar4": "result"
            },
            "code": "\nundefined process_and_check_files_00112502(long file_info,undefined8 file_data,ulong file_size)\n\n{\n  uint counter;\n  undefined8 *file_array;\n  undefined8 file_pointer;\n  char result;\n  \n  do {\n    file_array = *(undefined8 **)(file_info + 0x40);\n    if (file_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(file_info + 0x48), counter < 10 && (file_array[(ulong)counter + 2] != -1))) {\n      if (file_size <= (ulong)file_array[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = process_file_0010edb4(file_data,*(undefined8 *)(file_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(file_info + 0x48) = *(int *)(file_info + 0x48) + 1;\n    }\n    file_pointer = *file_array;\n    *(undefined4 *)(file_info + 0x48) = 0;\n    *(undefined8 *)(file_info + 0x40) = file_pointer;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_and_check_files_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_and_process_lines_00104cc1",
                "unaff_RBX": "currentLine",
                "pbVar5": "currentToken",
                "unaff_EBP": "lineCount",
                "in_R10": "lineStart",
                "unaff_R13": "defaultReturnValue",
                "unaff_R14": "currentCharacter",
                "unaff_R15": "lineEnd",
                "param_7": "errorMessageFormat",
                "param_8": "returnAddress",
                "param_9": "inputLine"
            },
            "code": "\nvoid parseAndProcessLines_00104cc1(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *currentLine;\n  byte *currentToken;\n  int lineCount;\n  byte *lineStart;\n  undefined8 defaultReturnValue;\n  byte *currentCharacter;\n  byte *lineEnd;\n  undefined8 errorMessageFormat;\n  undefined8 *returnAddress;\n  byte *inputLine;\n  \ncode_r0x00104cc1:\n  inputLine = lineStart;\n  uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(uVar1,errorMessageFormat,lineCount);\n  currentToken = currentLine;\n  lineStart = inputLine;\nLAB_00114599:\n  do {\n    *lineStart = 0;\n    if (lineEnd < lineStart) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = lineEnd;\n    }\n    lineCount = lineCount + 1;\n    pbVar3 = currentToken;\n    if (currentCharacter[1] == 0) {\n      *returnAddress = defaultReturnValue;\n      return;\n    }\n    for (; bVar4 = *pbVar3, currentCharacter = pbVar3, bVar4 != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          currentLine = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *pbVar3 = 0;\n          currentLine = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            currentLine = pbVar3 + 2;\n            currentCharacter = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      currentCharacter = pbVar3 + 1;\n      currentLine = pbVar3 + 2;\n    }\n    else {\n      currentLine = pbVar3 + 1;\n    }\nLAB_00114553:\n    bVar4 = *currentToken;\n    lineEnd = currentToken;\n    while ((bVar4 == 0x20 || (lineStart = lineEnd, bVar4 == 9))) {\n      currentToken = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      bVar4 = *currentToken;\n    }\n    do {\n      currentToken = currentLine;\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = lineStart[1];\n      lineStart = lineStart + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    bVar4 = lineStart[1];\n    if ((((((bVar4 == 9) || (bVar4 == 0x20)) && ((bVar4 = lineStart[2], bVar4 == 9 || (bVar4 == 0x20)))\n          ) && ((bVar4 = lineStart[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n        ((bVar4 = lineStart[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n       ((bVar4 = lineStart[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n      bVar4 = lineStart[6];\n      pbVar3 = lineStart + 6;\n      if ((bVar4 == 9) || (bVar4 == 0x20)) {\n        do {\n          do {\n            bVar4 = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (bVar4 == 0x20);\n        } while (bVar4 == 9);\n      }\n    }\n    if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "dcgettext",
                "FUN_00104c36",
                "FUN_00119ed0",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_0010e07c",
                "FUN_00114dc7",
                "FUN_0010abdd",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_00109be3",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_data_structure_00113bfa",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "data_structure",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong initialize_data_structure_00113bfa(long input_1,long input_2)\n\n{\n  long data_structure;\n  long *allocated_memory;\n  \n  if (((input_1 != 0) && (input_2 != 0)) && (data_structure = initialize_data_structure_00113bfa_00112904(0x12,0), data_structure != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(long **)(data_structure + 0x10) = allocated_memory;\n    return data_structure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "errorMessage",
                "unaff_EBX": "ebx"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 errorMessage;\n  uint ebx;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    value1 = *param2;\n    ebx = ebx & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,value1,param3);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_data_and_initialize_00109e76",
                "param_1": "dataPointer",
                "param_2": "value",
                "lVar1": "originalValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateDataAndInitialize_00109e76(long dataPointer,uint value)\n\n{\n  long originalValue;\n  char formattedString [58];\n  \n  originalValue = *(long *)(dataPointer + 0x68);\n  *(long *)(dataPointer + 0x68) = originalValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",originalValue,originalValue,(ulong)value);\n  initialize_data_struct_00109b52(dataPointer,formattedString,originalValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_and_initialize_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "address1",
                "param_4": "string",
                "lVar2": "index",
                "lVar3": "offset",
                "uVar4": "duplicatedString",
                "iVar1": "newIndex"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 value1,undefined4 value2,undefined8 address1,undefined8 string)\n\n{\n  int newIndex;\n  long index;\n  long offset;\n  undefined8 duplicatedString;\n  \n  index = (long)DAT_001278a0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127730)[index * 3]);\n  *(undefined4 *)(&DAT_00127720 + offset) = value1;\n  *(undefined4 *)(&DAT_00127724 + offset) = value2;\n  *(undefined8 *)(&DAT_00127728 + offset) = address1;\n  duplicatedString = xstrdup(string);\n  (&DAT_00127730)[index * 3] = duplicatedString;\n  newIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_match_and_retrieve_data_0010afd5",
                "param_1": "dataStructureList",
                "param_2": "mainDataStructure",
                "param_3": "inputString",
                "param_4": "inputSize",
                "param_5": "defaultValue",
                "param_6": "resultArgument",
                "iVar1": "comparisonResult",
                "__s2": "inputStringCopy",
                "puVar2": "currentDataStructure",
                "uVar3": "tempVariable",
                "lVar4": "tempVariable2",
                "puVar5": "nestedDataStructureList",
                "puVar6": "tempPointer",
                "bVar7": "loopCounter",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nfindMatchAndRetrieveData_0010afd5(undefined8 *dataStructureList,long mainDataStructure,undefined8 inputString,undefined4 inputSize,\n            undefined4 defaultValue,undefined8 resultArgument)\n\n{\n  int comparisonResult;\n  char *inputStringCopy;\n  undefined8 *currentDataStructure;\n  undefined8 tempVariable;\n  long tempVariable2;\n  undefined8 *nestedDataStructureList;\n  undefined4 *tempPointer;\n  byte loopCounter;\n  undefined returnValue [16];\n  \n  loopCounter = 0;\n  inputStringCopy = (char *)copy_and_null_terminate_00109a0b(inputString,inputSize);\n  for (dataStructureList = (undefined8 *)*dataStructureList; dataStructureList != (undefined8 *)0x0;\n      dataStructureList = (undefined8 *)*dataStructureList) {\n    for (currentDataStructure = (undefined8 *)dataStructureList[1]; currentDataStructure != (undefined8 *)0x0;\n        currentDataStructure = (undefined8 *)*currentDataStructure) {\n      if ((undefined8 *)currentDataStructure[2] != (undefined8 *)0x0) {\n        for (nestedDataStructureList = *(undefined8 **)(undefined8 *)currentDataStructure[2]; nestedDataStructureList != (undefined8 *)0x0;\n            nestedDataStructureList = (undefined8 *)*nestedDataStructureList) {\n          if ((*(int *)((long)nestedDataStructureList + 0x14) == 1) && (*(char *)nestedDataStructureList[1] == *inputStringCopy)) {\n            comparisonResult = strcmp((char *)nestedDataStructureList[1],inputStringCopy);\n            if (comparisonResult == 0) {\n              tempVariable2 = nestedDataStructureList[4];\n              if (tempVariable2 == 0) goto LAB_0010b05b;\n              free(inputStringCopy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentDataStructure = *(undefined8 **)(mainDataStructure + 0x1a0);\n  do {\n    if (currentDataStructure == (undefined8 *)0x0) {\n      currentDataStructure = (undefined8 *)xmalloc(0x28);\n      tempVariable = *(undefined8 *)(mainDataStructure + 0x1a0);\n      tempPointer = (undefined4 *)((long)currentDataStructure + 0x14);\n      for (tempVariable2 = 5; tempVariable2 != 0; tempVariable2 = tempVariable2 + -1) {\n        *tempPointer = 0;\n        tempPointer = tempPointer + (ulong)loopCounter * -2 + 1;\n      }\n      *(undefined4 *)(currentDataStructure + 2) = defaultValue;\n      *currentDataStructure = tempVariable;\n      currentDataStructure[1] = inputStringCopy;\n      tempVariable = create_data_structure_00113e23(currentDataStructure + 3,inputStringCopy);\n      *(undefined8 **)(mainDataStructure + 0x1a0) = currentDataStructure;\n      currentDataStructure[4] = tempVariable;\nLAB_0010b0e7:\n      tempVariable2 = currentDataStructure[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = resultArgument;\n      returnValue._0_8_ = tempVariable2;\n      return returnValue;\n    }\n    if (*(char *)currentDataStructure[1] == *inputStringCopy) {\n      comparisonResult = strcmp((char *)currentDataStructure[1],inputStringCopy);\n      if (comparisonResult == 0) {\n        if (*(int *)(currentDataStructure + 2) == 0) {\n          *(undefined4 *)(currentDataStructure + 2) = defaultValue;\n        }\n        free(inputStringCopy);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentDataStructure = (undefined8 *)*currentDataStructure;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "free",
                "xmalloc",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "find_match_and_retrieve_data_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_coordinates_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_or_update_data_structure_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = extract_file_type_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_data_structure_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_coordinates_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_data_structure_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)extract_file_type_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)extract_file_type_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)create_data_structure_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_error_message_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)find_real_type_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)create_data_structure_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_data_structure_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_data_structure_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_data_structure_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_data_structure_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_data_structure_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_structure_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_coordinates_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = update_data_structure_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_error_message_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_data_structure_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)update_data_structure_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_data_structure_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_error_message_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_error_message_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_data_structure_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_structure_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_structure_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_coordinates_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)update_data_structure_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)update_data_structure_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_data_structure_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_error_message_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_or_update_data_structure_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = update_data_structure_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_data_structure_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)update_data_structure_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_data_structure_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)update_data_structure_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)update_data_structure_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)update_data_structure_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)update_data_structure_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)update_data_structure_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = compare_strings_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = compare_strings_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = compare_strings_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)update_data_structure_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)update_data_structure_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_error_message_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)get_next_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_error_message_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_error_message_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_error_message_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_error_message_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_or_update_data_structure_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = process_data_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = resize_and_add_entry_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = extract_string_value_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = resize_and_add_entry_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = extract_number_from_byte_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = resize_and_add_entry_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)create_data_structure_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = check_string_validity_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = check_string_validity_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = compare_strings_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)create_data_structure_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_coordinates_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_error_message_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_and_populate_data_structure_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_data_structure_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_error_message_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_match_and_retrieve_data_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)extract_file_type_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_error_message_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "FUN_00108fe8",
                "FUN_00113d3a",
                "FUN_00108e76",
                "strchr",
                "concat",
                "FUN_00113fb0",
                "strcmp",
                "FUN_00113b98",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "FUN_00109ab1",
                "FUN_00113ce0",
                "FUN_00113c43",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_0010d559",
                "strncmp",
                "FUN_0010ee3f",
                "FUN_00112b6e",
                "FUN_00109be3",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "strstr",
                "FUN_00112904",
                "FUN_0010c2d2",
                "xmalloc",
                "malloc",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "strspn",
                "FUN_0010afd5",
                "sprintf",
                "FUN_00109a32",
                "cplus_demangle_mangled_name",
                "strcpy",
                "dcgettext",
                "FUN_0010914e",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strcat",
                "FUN_0010d882",
                "free",
                "FUN_00113df2",
                "FUN_00113e5e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "iVar5",
                "lVar3": "entryOffset",
                "piVar4": "stabType",
                "iVar5": "index",
                "fwrite": "writeToFile",
                "fprintf": "printToStream",
                "fputc": "writeCharacter",
                "dcgettext": "getLocaleString",
                "_stderr": "errorStream",
                "bfd_get_stab_name": "getStabName"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long iVar5;\n  long entryOffset;\n  int *stabType;\n  int index;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(errorStream,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,errorStream);\n  index = DAT_001278a0;\n  do {\n    iVar5 = (long)index;\n    entryOffset = iVar5 * 0x18;\n    stabType = (int *)(&DAT_00127720 + entryOffset);\n    if ((&DAT_00127730)[iVar5 * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabType);\n      if (stabName == 0) {\n        if (*stabType == 0) {\n          fwrite(\"HdrSym\",1,6,errorStream);\n        }\n        else {\n          fprintf(errorStream,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(errorStream,\"%-6s\",stabName);\n      }\n      fprintf(errorStream,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + entryOffset));\n      fprintf(errorStream,\"%08lx\",*(undefined8 *)(&DAT_00127728 + entryOffset));\n      if (*stabType != 0) {\n        fprintf(errorStream,\" %s\",(&DAT_00127730)[iVar5 * 3]);\n      }\n      fputc(10,errorStream);\n    }\n    index = (index + 1) % 0x10;\n  } while (DAT_001278a0 != index);\n  return param_3;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "dcgettext",
                "fwrite",
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "data",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a083(long data)\n\n{\n  processData_0010a083Helper(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "arrayAddress",
                "param_2": "data",
                "param_3": "arraySize",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "result",
                "lVar1": "newArrayAddress",
                "plVar2": "currentElement",
                "lVar3": "remainingElements",
                "puVar4": "pointer",
                "uVar5": "currentSize",
                "bVar6": "isZero",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long arrayAddress,long data,ulong arraySize,int flag,undefined4 *output,\n            undefined8 result)\n\n{\n  long newArrayAddress;\n  long *currentElement;\n  long remainingElements;\n  undefined *pointer;\n  ulong currentSize;\n  byte isZero;\n  undefined returnValue [16];\n  \n  isZero = 0;\n  arraySize = arraySize & 0xffffffff;\n  currentSize = *(ulong *)(arrayAddress + 0x1b0);\n  if (currentSize <= arraySize) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= arraySize; currentSize = currentSize * 2) {\n    }\n    newArrayAddress = xrealloc(*(undefined8 *)(arrayAddress + 0x1a8),currentSize * 0x18);\n    *(long *)(arrayAddress + 0x1a8) = newArrayAddress;\n    pointer = (undefined *)(*(long *)(arrayAddress + 0x1b0) * 0x18 + newArrayAddress);\n    for (remainingElements = (currentSize - *(long *)(arrayAddress + 0x1b0)) * 0x18; remainingElements != 0; remainingElements = remainingElements + -1) {\n      *pointer = 0;\n      pointer = pointer + (ulong)isZero * -2 + 1;\n    }\n    *(ulong *)(arrayAddress + 0x1b0) = currentSize;\n  }\n  currentElement = (long *)(arraySize * 0x18 + *(long *)(arrayAddress + 0x1a8));\n  if (*currentElement == 0) {\n    newArrayAddress = *(long *)(arrayAddress + 0x68);\n    *currentElement = newArrayAddress;\n    *(long *)(arrayAddress + 0x68) = newArrayAddress + 1;\n    currentElement[1] = data;\n    *(int *)(currentElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(currentElement + 2) = 0;\n    *(undefined4 *)((long)currentElement + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)currentElement + 0x14);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = *currentElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_00109d5c",
                "FUN_0010a69a"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedText",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid printBadFormatError_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  printErrorAndExit(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "check_and_initialize_memory_00112996",
                "param_1": "ptr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "length"
            },
            "code": "\n\n\nundefined8 checkAndInitializeMemory_00112996(long ptr,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long length;\n  \n  if ((*(long *)(ptr + 8) != 0) && (*(long *)(ptr + 0x10) != 0)) {\n    length = *(long *)(ptr + 0x10) + 0x10;\n    if (*(long *)(ptr + 0x20) != 0) {\n      length = *(long *)(ptr + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112925(length,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "check_and_initialize_memory_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "process_debug_class_id_0010c7a0",
                "param_1": "classId",
                "param_2": "className",
                "param_3": "type",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "typeCount",
                "lVar3": "typePtr",
                "piVar4": "currentType",
                "__s1": "currentClassName",
                "cVar5": "comparisonResult",
                "iVar6": "counter",
                "puVar7": "prevPtr",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] processDebugClassId_0010c7a0(long classId,char *className,int *type,undefined8 param4)\n\n{\n  undefined8 result;\n  uint typeCount;\n  long typePtr;\n  int *currentType;\n  char *currentClassName;\n  char comparisonResult;\n  int counter;\n  undefined8 *prevPtr;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typePtr = *(long *)(type + 4);\n  prevPtr = (undefined8 *)(ulong)*(uint *)(typePtr + 0xc);\n  if (*(uint *)(typePtr + 0xc) <= *(uint *)(classId + 0x38)) {\n    for (prevPtr = *(undefined8 **)(classId + 0x50); prevPtr != (undefined8 *)0x0;\n        prevPtr = (undefined8 *)*prevPtr) {\n      currentType = (int *)prevPtr[1];\n      if (*currentType == *type) {\n        currentClassName = (char *)prevPtr[2];\n        if (className == (char *)0x0) {\n          if (currentClassName == (char *)0x0) {\nLAB_0010c82c:\n            comparisonResult = compare_objects_0010922b(classId,currentType,type);\n            if (comparisonResult != '\\0') {\n              typeCount = *(uint *)(*(long *)(prevPtr[1] + 0x10) + 0xc);\n              prevPtr = (undefined8 *)(ulong)typeCount;\n              *(uint *)(typePtr + 0xc) = typeCount;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((currentClassName != (char *)0x0) && (*currentClassName == *className)) &&\n                (counter = strcmp(currentClassName,className), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(classId + 0x34) + 1;\n    *(int *)(classId + 0x34) = counter;\n    *(int *)(typePtr + 0xc) = counter;\n    prevPtr = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(classId + 0x50);\n    prevPtr[2] = className;\n    *(undefined8 **)(classId + 0x50) = prevPtr;\n    *prevPtr = result;\n    prevPtr[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)prevPtr >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_debug_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_objects_0010922b",
                "param_2": "object1",
                "param_3": "object2",
                "uVar1": "type1",
                "uVar2": "type2",
                "pplVar3": "ptrPtr1",
                "ppcVar4": "ptrPtr2",
                "ppcVar5": "ptrPtr3",
                "lVar6": "len1",
                "lVar7": "len2",
                "lVar8": "len3",
                "pcVar9": "str1",
                "pcVar10": "str2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "cmpResult",
                "uVar14": "param1",
                "uVar15": "param2",
                "puVar16": "paramPtr1",
                "puVar17": "paramPtr2",
                "plVar18": "varPtr1",
                "lVar19": "index",
                "plVar20": "ptrVar1",
                "plVar21": "ptrVar2",
                "lVar22": "ptrVal1",
                "local_70": "localPtr1",
                "local_58": "localVarPtr",
                "plStack_50": "localStackPtr",
                "local_48": "localVarPtr2"
            },
            "code": "\nbyte compareObjects_0010922b(long param_1,long *object1,long *object2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptrPtr1;\n  char **ptrPtr2;\n  char **ptrPtr3;\n  long len1;\n  long len2;\n  long len3;\n  char *str1;\n  char *str2;\n  char result;\n  byte isEqual;\n  int cmpResult;\n  undefined8 param1;\n  undefined8 param2;\n  undefined8 *paramPtr1;\n  undefined8 *paramPtr2;\n  long *varPtr1;\n  long index;\n  long *ptrVar1;\n  long *ptrVar2;\n  long ptrVal1;\n  long *localPtr1;\n  undefined8 *localVarPtr;\n  long *localStackPtr;\n  long *localVarPtr2;\n  \n  varPtr1 = object2;\n  if (object1 == (long *)0x0) {\nLAB_00109241:\n    return object2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (varPtr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)object1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)object2, type2 == 1) {\n      object2 = **(long ***)object2[2];\n      if (object2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (object1 == object2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    object1 = *(long **)(object1[2] + 8);\n    if (object1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    object2 = *(long **)(object2[2] + 8);\n    varPtr1 = object2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*object1 != *object2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(object1 + 2) == *(char *)(object2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  localVarPtr = *(undefined8 **)(param_1 + 0x58);\n  for (paramPtr2 = localVarPtr; paramPtr2 != (undefined8 *)0x0; paramPtr2 = (undefined8 *)*paramPtr2) {\n    if (((long *)paramPtr2[1] == object1) && ((long *)paramPtr2[2] == object2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_1 + 0x58) = &localVarPtr;\n  localStackPtr = object1;\n  localVarPtr2 = object2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    varPtr1 = (long *)object1[2];\n    ptrPtr1 = (long **)object2[2];\n    if (varPtr1 == (long *)0x0) {\n      isEqual = ptrPtr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrPtr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_1 + 0x38) < *(uint *)((long)varPtr1 + 0xc)) &&\n       (*(uint *)((long)varPtr1 + 0xc) == *(uint *)((long)ptrPtr1 + 0xc))) goto LAB_001097af;\n    paramPtr2 = (undefined8 *)*varPtr1;\n    localPtr1 = *ptrPtr1;\n    if (((paramPtr2 == (undefined8 *)0x0) == (localPtr1 == (long *)0x0)) &&\n       ((((varPtr1[2] == 0) == (ptrPtr1[2] == (long *)0x0) &&\n         ((varPtr1[3] == 0) == (ptrPtr1[3] == (long *)0x0))) &&\n        ((varPtr1[4] == 0) == (ptrPtr1[4] == (long *)0x0))))) {\n      if (paramPtr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((varPtr1[4] != 0) &&\n           (result = compareObjects_0010922b(param_1,varPtr1[4],ptrPtr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptrVar2 = (long *)varPtr1[2];\n        if (ptrVar2 == (long *)0x0) {\nLAB_00109540:\n          paramPtr2 = (undefined8 *)varPtr1[3];\n          if (paramPtr2 == (undefined8 *)0x0) goto LAB_001097af;\n          varPtr1 = ptrPtr1[3];\n          while( true ) {\n            ptrPtr3 = (char **)*paramPtr2;\n            if (ptrPtr3 == (char **)0x0) {\n              isEqual = *varPtr1 == 0;\n              goto LAB_001099c4;\n            }\n            ptrPtr2 = (char **)*varPtr1;\n            if (ptrPtr2 == (char **)0x0) break;\n            if ((**ptrPtr3 != **ptrPtr2) || (cmpResult = strcmp(*ptrPtr3,*ptrPtr2), cmpResult != 0))\n            break;\n            str1 = ptrPtr3[1];\n            str2 = ptrPtr2[1];\n            if ((str1 == (char *)0x0) != (str2 == (char *)0x0)) break;\n            if (str1 != (char *)0x0) {\n              ptrVal1 = 0;\n              while( true ) {\n                ptrPtr3 = *(char ***)(str1 + ptrVal1);\n                ptrPtr2 = *(char ***)(str2 + ptrVal1);\n                if (ptrPtr3 == (char **)0x0) break;\n                if (ptrPtr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrPtr3 != **ptrPtr2) ||\n                     ((((ulong)ptrPtr3[2] ^ (ulong)ptrPtr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrPtr3[3] != ptrPtr2[3] ||\n                     ((((ptrPtr3[4] == (char *)0x0) != (ptrPtr2[4] == (char *)0x0) ||\n                       (cmpResult = strcmp(*ptrPtr3,*ptrPtr2), cmpResult != 0)) ||\n                      (result = compareObjects_0010922b(param_1,ptrPtr3[1],ptrPtr2[1]), result == '\\0')))))) ||\n                   ((ptrPtr3[4] != (char *)0x0 &&\n                    (result = compareObjects_0010922b(param_1,ptrPtr3[4],ptrPtr2[4]), result == '\\0'))))\n                goto LAB_00109382;\n                ptrVal1 = ptrVal1 + 8;\n              }\n              if (ptrPtr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            paramPtr2 = paramPtr2 + 1;\n            varPtr1 = varPtr1 + 1;\n          }\n        }\n        else {\n          ptrVar1 = ptrPtr1[2];\n          for (; paramPtr2 = (undefined8 *)*ptrVar2, paramPtr2 != (undefined8 *)0x0;\n              ptrVar2 = ptrVar2 + 1) {\n            paramPtr1 = (undefined8 *)*ptrVar1;\n            if ((((paramPtr1 == (undefined8 *)0x0) ||\n                 (((paramPtr2[1] ^ paramPtr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(paramPtr2 + 2) != *(int *)(paramPtr1 + 2))) ||\n               (result = compareObjects_0010922b(param_1,*paramPtr2,*paramPtr1), result == '\\0'))\n            goto LAB_00109382;\n            ptrVar1 = ptrVar1 + 1;\n          }\n          if (*ptrVar1 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrPtr3 = (char **)*paramPtr2, ptrPtr3 != (char **)0x0; paramPtr2 = paramPtr2 + 1) {\n          ptrPtr2 = (char **)*localPtr1;\n          if (ptrPtr2 == (char **)0x0) goto LAB_00109382;\n          str1 = *ptrPtr2;\n          str2 = *ptrPtr3;\n          if ((*str2 != *str1) ||\n             ((((ulong)ptrPtr3[2] ^ (ulong)ptrPtr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrPtr3 + 0x14) == '\\0') {\n            if (ptrPtr3[3] == ptrPtr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          cmpResult = strcmp(ptrPtr3[3],ptrPtr2[3]);\n          if (cmpResult != 0) goto LAB_00109382;\nLAB_00109480:\n          cmpResult = strcmp(str2,str1);\n          if (((cmpResult != 0) || (ptrPtr3[1] == (char *)0x0)) || (ptrPtr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          param1 = find_real_type_00112b6e(ptrPtr2[1],0);\n          param2 = find_real_type_00112b6e(ptrPtr3[1],0);\n          result = compareObjects_0010922b(param_1,param2,param1);\n          if (result == '\\0') goto LAB_00109382;\n          localPtr1 = localPtr1 + 1;\n        }\n        if (*localPtr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    varPtr1 = (long *)object1[2];\n    ptrVar2 = (long *)object2[2];\n    if (varPtr1 == (long *)0x0) {\n      isEqual = ptrVar2 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrVar2 == (long *)0x0) goto LAB_00109382;\n    ptrVal1 = *varPtr1;\n    len1 = *ptrVar2;\n    index = 0;\n    len2 = varPtr1[1];\n    len3 = ptrVar2[1];\n    do {\n      str1 = *(char **)(ptrVal1 + index);\n      if (str1 == (char *)0x0) {\n        isEqual = *(long *)(len1 + index) == 0;\n        goto LAB_001099c1;\n      }\n      str2 = *(char **)(len1 + index);\n      if (((str2 == (char *)0x0) || (*str1 != *str2)) ||\n         (*(long *)(len2 + index) != *(long *)(len3 + index))) break;\n      cmpResult = strcmp(str1,str2);\n      index = index + 8;\n    } while (cmpResult == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = compareObjects_0010922b(param_1,object1[2],object2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)object1[2] + 2) == *(char *)((undefined8 *)object2[2] + 2)) &&\n       (result = compareObjects_0010922b(param_1,*(undefined8 *)object1[2],*(undefined8 *)object2[2]),\n       result != '\\0')) {\n      varPtr1 = *(long **)(object1[2] + 8);\n      ptrVar2 = *(long **)(object2[2] + 8);\n      if ((varPtr1 == (long *)0x0) == (ptrVar2 == (long *)0x0)) {\n        if (varPtr1 == (long *)0x0) goto LAB_001097af;\n        while (((*varPtr1 != 0 && (*ptrVar2 != 0)) &&\n               (result = compareObjects_0010922b(param_1), result != '\\0'))) {\n          varPtr1 = varPtr1 + 1;\n          ptrVar2 = ptrVar2 + 1;\n        }\nLAB_0010995d:\n        if (*varPtr1 != 0) goto LAB_00109964;\n        isEqual = *ptrVar2 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    paramPtr2 = (undefined8 *)object2[2];\n    paramPtr1 = (undefined8 *)object1[2];\n    isEqual = 0;\n    if ((paramPtr1[1] == paramPtr2[1]) && (paramPtr1[2] == paramPtr2[2])) {\nLAB_00109862:\n      isEqual = compareObjects_0010922b(param_1,*paramPtr1,*paramPtr2);\n    }\n    break;\n  case 0x10:\n    paramPtr2 = (undefined8 *)object2[2];\n    paramPtr1 = (undefined8 *)object1[2];\n    isEqual = 0;\n    if (((paramPtr1[2] == paramPtr2[2]) && (paramPtr1[3] == paramPtr2[3])) &&\n       (*(char *)(paramPtr1 + 4) == *(char *)(paramPtr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    paramPtr2 = (undefined8 *)object2[2];\n    paramPtr1 = (undefined8 *)object1[2];\n    isEqual = 0;\n    if (*(char *)(paramPtr1 + 1) == *(char *)(paramPtr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = compareObjects_0010922b(param_1,*(undefined8 *)object1[2],*(undefined8 *)object2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = compareObjects_0010922b(param_1,*(undefined8 *)(object1[2] + 8),*(undefined8 *)(object2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)object1[2] + 3) == *(char *)((undefined8 *)object2[2] + 3)) &&\n        (result = compareObjects_0010922b(param_1,*(undefined8 *)object1[2],*(undefined8 *)object2[2]),\n        result != '\\0')) &&\n       (result = compareObjects_0010922b(param_1,*(undefined8 *)(object1[2] + 8),\n                              *(undefined8 *)(object2[2] + 8)), result != '\\0')) {\n      varPtr1 = *(long **)(object1[2] + 0x10);\n      ptrVar2 = *(long **)(object2[2] + 0x10);\n      if ((varPtr1 == (long *)0x0) == (ptrVar2 == (long *)0x0)) {\n        if (varPtr1 != (long *)0x0) {\n          while (((*varPtr1 != 0 && (*ptrVar2 != 0)) &&\n                 (result = compareObjects_0010922b(param_1), result != '\\0'))) {\n            varPtr1 = varPtr1 + 1;\n            ptrVar2 = ptrVar2 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    varPtr1 = (long *)object2[2];\n    ptrVar2 = (long *)object1[2];\n    cmpResult = strcmp(*(char **)(*ptrVar2 + 8),*(char **)(*varPtr1 + 8));\n    isEqual = 0;\n    if (cmpResult == 0) {\n      isEqual = compareObjects_0010922b(param_1,ptrVar2[1],varPtr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_1 + 0x58) = localVarPtr;\n  return isEqual;\ncode_r0x00109263:\n  object1 = **(long ***)object1[2];\n  varPtr1 = object1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "compare_objects_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_files_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "charCheck",
                "iVar2": "index",
                "iVar3": "result",
                "ppcVar4": "pointerToPointerChar",
                "lVar5": "longVar",
                "uVar6": "undefinedVar6",
                "__format": "formatString",
                "puVar7": "pointerToUndefinedVar7",
                "piVar8": "pointerToIntVar",
                "uVar9": "undefinedVar9",
                "in_RAX": "raxValue",
                "pcVar10": "pointerCharVar10",
                "ppcVar11": "pointerPointerCharVar11",
                "lVar12": "longVar12",
                "pvVar13": "voidPointerVar",
                "pcVar14": "pointerCodeVar",
                "lVar15": "longVar15",
                "pcVar16": "pointerCharVar16",
                "psVar17": "pointerStatVar",
                "unaff_R14": "unaffectedPointerVar14",
                "unaff_R15": "unaffectedPointerVar15",
                "bVar18": "byteVar18",
                "unaff_retaddr": "unaffectedReturnAddr",
                "in_stack_00000008": "stackPointerVar8",
                "in_stack_00000010": "stackPointerVar10",
                "in_stack_00000018": "stackPointerVar18",
                "in_stack_00000020": "stackPointerVar20",
                "in_stack_00000028": "stackVar28",
                "in_stack_00000030": "stackVar30",
                "in_stack_000000f8": "stackVarF8",
                "in_stack_00000110": "stackVar110"
            },
            "code": "\nvoid extractAndCopyFiles_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char charCheck;\n  int index;\n  int result;\n  char **pointerToPointerChar;\n  long longVar;\n  undefined8 undefinedVar6;\n  char *formatString;\n  undefined8 *pointerToUndefinedVar7;\n  int *pointerToIntVar;\n  undefined8 undefinedVar9;\n  long raxValue;\n  char *pointerCharVar10;\n  char **pointerPointerCharVar11;\n  long longVar12;\n  void *voidPointerVar;\n  code *pointerCodeVar;\n  long longVar15;\n  char *pointerCharVar16;\n  stat *pointerStatVar;\n  undefined8 *unaffectedPointerVar14;\n  char **unaffectedPointerVar15;\n  byte byteVar18;\n  undefined8 unaffectedReturnAddr;\n  undefined8 *stackPointerVar8;\n  long *stackPointerVar10;\n  char *stackPointerVar18;\n  undefined8 *stackPointerVar20;\n  undefined8 stackVar28;\n  undefined8 stackVar30;\n  uint stackVarF8;\n  long stackVar110;\n  \n  byteVar18 = 0;\n  pointerCharVar10 = (char *)(raxValue + 1);\n  do {\n    if (*pointerCharVar10 == '/') {\n      extractAndCopyFiles_001052a2();\n      return;\n    }\n    while (*pointerCharVar10 == '\\0') {\n      pointerCharVar10 = (char *)concat(stackPointerVar18,&DAT_0011b47d);\n      result = stat(pointerCharVar10,(stat *)&stack0x00000050);\n      pointerToUndefinedVar7 = unaffectedPointerVar14;\n      if (-1 < result) {\n        longVar12 = create_temporary_directory_0011a0e0(pointerCharVar10);\n        free(pointerCharVar10);\n        if (longVar12 == 0) {\n          pointerToIntVar = __errno_location();\n          pointerCharVar10 = strerror(*pointerToIntVar);\n          undefinedVar9 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(undefinedVar9,pointerCharVar10);\n          goto LAB_00104e93;\n        }\n        pointerToUndefinedVar7 = (undefined8 *)xmalloc(0x18);\n        pointerCharVar10 = *unaffectedPointerVar15;\n        *pointerToUndefinedVar7 = unaffectedPointerVar14;\n        pointerToUndefinedVar7[2] = 0;\n        pointerToUndefinedVar7[1] = longVar12;\n        pointerCharVar10 = (char *)concat(longVar12,&DAT_0011b47d,pointerCharVar10);\n      }\n      result = 0;\n      if (DAT_001279cb != '\\0') {\n        pointerStatVar = (stat *)&stack0x00000050;\n        for (longVar12 = 0x24; longVar12 != 0; longVar12 = longVar12 + -1) {\n          *(undefined4 *)&pointerStatVar->st_dev = 0;\n          pointerStatVar = (stat *)((long)pointerStatVar + (ulong)byteVar18 * -8 + 4);\n        }\n        pointerPointerCharVar11 = (char **)unaffectedPointerVar15[0x1d];\n        if ((char **)unaffectedPointerVar15[0x1d] == (char **)0x0) {\n          pointerPointerCharVar11 = unaffectedPointerVar15;\n        }\n        result = (**(code **)(pointerPointerCharVar11[1] + 0x1e8))(unaffectedPointerVar15,(stat *)&stack0x00000050);\n        if (result != 0) {\n          pointerCharVar16 = *unaffectedPointerVar15;\n          undefinedVar9 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(undefinedVar9,pointerCharVar16);\n        }\n      }\n      unaffectedPointerVar14 = (undefined8 *)xmalloc(0x18);\n      unaffectedPointerVar14[1] = pointerCharVar10;\n      *unaffectedPointerVar14 = pointerToUndefinedVar7;\n      unaffectedPointerVar14[2] = 0;\n      charCheck = bfd_check_format(unaffectedPointerVar15,1);\n      if (charCheck == '\\0') {\n        undefinedVar9 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_information_001126c0(0,unaffectedPointerVar15,0,undefinedVar9);\n        pointerPointerCharVar11 = (char **)bfd_openw(pointerCharVar10,stackVar28);\n        if (pointerPointerCharVar11 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        pointerToPointerChar = (char **)unaffectedPointerVar15[0x1d];\n        if ((char **)unaffectedPointerVar15[0x1d] == (char **)0x0) {\n          pointerToPointerChar = unaffectedPointerVar15;\n        }\n        index = (**(code **)(pointerToPointerChar[1] + 0x1e8))(unaffectedPointerVar15,&stack0x000000e0);\n        longVar12 = stackVar110;\n        if (index == 0) {\n          if (stackVar110 < 0) {\n            undefinedVar9 = get_modified_string_001125fa(unaffectedPointerVar15);\n            undefinedVar6 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(undefinedVar6,undefinedVar9);\n          }\n          else {\n            index = bfd_seek(unaffectedPointerVar15,0,0);\n            if (index == 0) {\n              if (DAT_001279c9 != '\\0') {\n                pointerCharVar16 = *pointerPointerCharVar11;\n                undefinedVar9 = get_modified_string_001125fa(unaffectedPointerVar15);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,undefinedVar9,pointerCharVar16);\n              }\n              voidPointerVar = (void *)xmalloc(0x2000);\n              for (; longVar12 != 0; longVar12 = longVar12 - longVar15) {\n                longVar15 = 0x2000;\n                if (longVar12 < 0x2001) {\n                  longVar15 = longVar12;\n                }\n                longVar = bfd_bread(voidPointerVar,longVar15,unaffectedPointerVar15);\n                pointerToPointerChar = unaffectedPointerVar15;\n                if ((longVar15 != longVar) ||\n                   (longVar = bfd_bwrite(voidPointerVar,longVar15,pointerPointerCharVar11), pointerToPointerChar = pointerPointerCharVar11, longVar15 != longVar\n                   )) {\n                  print_error_information_001126c0(0,pointerToPointerChar,0,0);\n                  free(voidPointerVar);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*pointerPointerCharVar11,stackVarF8 | 0x100);\n              free(voidPointerVar);\n              charCheck = bfd_close_all_done(pointerPointerCharVar11);\n              if (charCheck == '\\0') {\n                print_error_information_001126c0(pointerCharVar10,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            undefinedVar9 = get_modified_string_001125fa(unaffectedPointerVar15);\n            print_bfd_error_0011a110(undefinedVar9);\n          }\n        }\n        else {\n          print_error_information_001126c0(0,unaffectedPointerVar15,0,0);\n        }\nLAB_00104f00:\n        charCheck = bfd_close_all_done(pointerPointerCharVar11);\n        if (charCheck == '\\0') {\n          print_error_information_001126c0(pointerCharVar10,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(pointerCharVar10);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (stackVar30._7_1_ == '\\0') {\n          pointerPointerCharVar11 = (char **)bfd_openw(pointerCharVar10,*(undefined8 *)unaffectedPointerVar15[1]);\n        }\n        else {\n          pointerPointerCharVar11 = (char **)bfd_openw(pointerCharVar10,stackVar28);\n        }\n        if (pointerPointerCharVar11 == (char **)0x0) {\nLAB_00104e80:\n          print_error_information_001126c0(pointerCharVar10,0,0,0);\n          goto LAB_00104e93;\n        }\n        charCheck = FUNC_00114e50(unaffectedPointerVar15,pointerPointerCharVar11,unaffectedReturnAddr);\n        if (charCheck == '\\0') {\n          index = bfd_get_arch(unaffectedPointerVar15);\n          if (index == 0) goto LAB_00104d75;\n          charCheck = bfd_close_all_done(pointerPointerCharVar11);\n          if (charCheck == '\\0') {\n            print_error_information_001126c0(pointerCharVar10,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        charCheck = bfd_close(pointerPointerCharVar11);\n        if (charCheck == '\\0') {\n          print_error_information_001126c0(pointerCharVar10,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (result == 0)) {\n          set_time_0011a350(pointerCharVar10,(stat *)&stack0x00000050);\n        }\n        longVar12 = bfd_openr(pointerCharVar10,stackVar28);\n        unaffectedPointerVar14[2] = longVar12;\n        *stackPointerVar10 = longVar12;\n        stackPointerVar10 = (long *)(longVar12 + 0xf0);\n        pointerPointerCharVar11 = (char **)bfd_openr_next_archived_file(stackPointerVar20,unaffectedPointerVar15);\n        bfd_close(unaffectedPointerVar15);\n        unaffectedPointerVar15 = pointerPointerCharVar11;\n      }\n      if ((DAT_00127a20 != 0) || (unaffectedPointerVar15 == (char **)0x0)) {\n        *stackPointerVar10 = 0;\n        voidPointerVar = (void *)xstrdup(*stackPointerVar8);\n        if (DAT_00127a20 == 0) {\n          pointerCodeVar = bfd_close;\n        }\n        else {\n          pointerCodeVar = bfd_close_all_done;\n        }\n        charCheck = (*pointerCodeVar)(stackPointerVar8);\n        if (charCheck == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_information_001126c0(voidPointerVar,0,0,0);\n        }\n        free(voidPointerVar);\n        voidPointerVar = (void *)xstrdup(*stackPointerVar20);\n        charCheck = bfd_close(stackPointerVar20);\n        if (charCheck == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_information_001126c0(voidPointerVar,0,0,0);\n        }\n        free(voidPointerVar);\n        goto LAB_00114b4b;\n      }\n      pointerCharVar10 = *unaffectedPointerVar15;\n      param3 = pointerCharVar10;\n      if (*pointerCharVar10 == '/') goto LAB_0010527d;\n    }\n    pointerCharVar16 = pointerCharVar10;\n    if ((*pointerCharVar10 == '.') && (pointerCharVar16 = pointerCharVar10 + 1, pointerCharVar10[1] == '.')) {\n      pointerCharVar16 = pointerCharVar10 + 2;\n      if ((pointerCharVar10[2] == '\\0') || (pointerCharVar10[2] == '/')) {\nLAB_0010527d:\n        undefinedVar9 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(undefinedVar9,param3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (unaffectedPointerVar14 != (undefined8 *)0x0) {\n          if (unaffectedPointerVar14[2] == 0) {\n            rmdir((char *)unaffectedPointerVar14[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)unaffectedPointerVar14[1]);\n          }\n          free((void *)unaffectedPointerVar14[1]);\n          pointerToUndefinedVar7 = (undefined8 *)*unaffectedPointerVar14;\n          free(unaffectedPointerVar14);\n          unaffectedPointerVar14 = pointerToUndefinedVar7;\n        }\n        rmdir(stackPointerVar18);\n        free(stackPointerVar18);\n        return;\n      }\n    }\n    for (; (pointerCharVar10 = pointerCharVar16, *pointerCharVar16 != '\\0' && (*pointerCharVar16 != '/')); pointerCharVar16 = pointerCharVar16 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_files_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_data_0010e453",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "counter",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "buffer",
                "uVar4": "status",
                "lVar5": "totalLength",
                "ppcVar6": "stringArray",
                "lVar7": "offset"
            },
            "code": "\nundefined8 initializeData_0010e453(long param1,char *param2,char **param3)\n\n{\n  long counter;\n  char result;\n  size_t length;\n  undefined2 *buffer;\n  undefined8 status;\n  long totalLength;\n  char **stringArray;\n  long offset;\n  \n  if (param3 == (char **)0x0) {\n    if (param2 != (char *)0x0) {\n      length = strlen(param2);\n      buffer = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)buffer,\"xe%s:\",param2);\nLAB_0010e578:\n      result = initialize_data_struct_00109b52(param1,buffer,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    status = 0;\n  }\n  else {\n    totalLength = 10;\n    stringArray = param3;\n    if (param2 != (char *)0x0) {\n      length = strlen(param2);\n      totalLength = length + 10;\n    }\n    for (; *stringArray != (char *)0x0; stringArray = stringArray + 1) {\n      length = strlen(*stringArray);\n      totalLength = totalLength + 0x14 + length;\n    }\n    buffer = (undefined2 *)xmalloc(totalLength);\n    if (param2 == (char *)0x0) {\n      *buffer = 0x65;\n      totalLength = 0;\n    }\n    else {\n      totalLength = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = totalLength + 1;\n      sprintf((char *)buffer,\"%s:T%ld=e\",param2,totalLength);\n    }\n    offset = 0;\n    while( true ) {\n      counter = *(long *)((long)param3 + offset);\n      length = strlen((char *)buffer);\n      if (counter == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)buffer + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)buffer + length) = 0x3b;\n    if (param2 == (char *)0x0) goto LAB_0010e578;\n    result = process_string_0010e2f0(param1,0x80,0,0,buffer);\n    if ((result == '\\0') || (result = initialize_data_struct_00109cf4(param1,totalLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(buffer);\n    status = 1;\n  }\n  return status;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b52",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_and_resize_array_00109d5c",
                "param_1": "input_data",
                "lVar1": "array_size",
                "uVar2": "result"
            },
            "code": "\nundefined8 initialize_and_resize_array_00109d5c(undefined8 input_data)\n\n{\n  long array_size;\n  undefined8 result;\n  \n  array_size = resize_and_initialize_array_00109c2e();\n  if (-1 < array_size) {\n    result = initialize_data_struct_00109cf4(input_data,array_size,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_resize_array_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "param_1": "ptr",
                "param_2": "new_val",
                "param_3": "old_val",
                "extraout_RDX": "extraout",
                "uVar3": "updated_val",
                "in_R10": "auxiliary_val",
                "cVar1": "result",
                "iVar2": "counter",
                "auVar4": "output"
            },
            "code": "\nundefined  [16] updateMaxValue_0010ed2c(long ptr,ulong new_val,undefined8 old_val)\n\n{\n  char result;\n  int counter;\n  undefined8 extraout;\n  ulong updated_val;\n  undefined8 auxiliary_val;\n  undefined output [16];\n  \n  if (*(ulong *)(ptr + 0x1f0) < new_val) {\n    *(ulong *)(ptr + 0x1f0) = new_val;\n  }\n  if (*(long *)(ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(ptr + 0x1f8) != 0) {\n      counter = *(int *)(ptr + 0x1f8) + -1;\n      updated_val = CONCAT71((int7)((ulong)old_val >> 8),1);\n      *(int *)(ptr + 0x1f8) = counter;\n      if (counter != 0) {\n        output = process_string_0010e2f0(ptr,0xe0,0,new_val - *(long *)(ptr + 0x200),0,auxiliary_val);\n        return output;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(ptr,0xc0,0,*(long *)(ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(ptr + 0x208) = 0xffffffffffffffff;\n      old_val = extraout;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_val = 0;\nLAB_0010edae:\n  output._0_8_ = updated_val & 0xffffffff;\n  output._8_8_ = auxiliary_val;\n  return output;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_max_value_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_and_values_0011a1b0",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "value3",
                "uVar2": "value4",
                "iVar3": "result",
                "extraout_var": "extraOut",
                "uVar4": "combinedResult",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareMemoryAndValues_0011a1b0(ulong *pointer1,ulong *pointer2,undefined8 value1,undefined8 value2)\n\n{\n  ulong value3;\n  ulong value4;\n  int result;\n  undefined4 extraOut;\n  ulong combinedResult;\n  undefined output [16];\n  \n  combinedResult = *pointer1;\n  if (*pointer2 <= *pointer1) {\n    combinedResult = *pointer2;\n  }\n  result = memcmp((void *)(pointer1[3] + 3),(void *)(pointer2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraOut,result);\n  if (result == 0) {\n    value3 = pointer1[8];\n    if (value3 < pointer2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      value4 = pointer2[8];\n      if (value4 < pointer1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (pointer2[7] <= pointer1[7]) {\n          if (value4 < value3) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (value4 <= value3) {\n              if (pointer1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(pointer2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(pointer2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = value2;\n  output._0_8_ = combinedResult;\n  return output;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_and_values_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_gnu_build_attribute_notes_001163d0",
                "param_1": "param_elf_header",
                "param_2": "param_elf_section_header",
                "param_3": "section_size",
                "param_4": "output_buf",
                "uVar1": "result",
                "uVar2": "header_1",
                "uVar3": "header_2",
                "bVar4": "is_match",
                "puVar5": "last_match",
                "iVar6": "memcmp_result",
                "uVar7": "warning_message",
                "lVar8": "error_message",
                "__ptr": "reloc_buffer",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "puVar17": "note_entry",
                "puVar18": "dest_ptr",
                "cVar19": "note_type",
                "puVar20": "name_dest_ptr",
                "iVar21": "loop_counter",
                "puVar22": "note_data",
                "puVar23": "note_data_start",
                "uVar24": "note_data_end",
                "__nmemb": "note_entry_count",
                "puVar25": "first_note_entry",
                "local_88": "saved_value_1",
                "uStack_80": "saved_value_2",
                "local_70": "current_value",
                "local_68": "return_value",
                "local_60": "note_entries"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong process_gnu_build_attribute_notes_001163d0(undefined8 *param_elf_header,undefined8 *param_elf_section_header,ulong section_size,undefined *output_buf)\n\n{\n  ulong result;\n  undefined8 header_1;\n  undefined8 header_2;\n  bool is_match;\n  ulong *last_match;\n  int memcmp_result;\n  undefined8 warning_message;\n  long error_message;\n  void *reloc_buffer;\n  ulong temp1;\n  ulong temp2;\n  ulong result1;\n  ulong result2;\n  undefined *reloc_buffer_00;\n  ulong result3;\n  ulong result4;\n  ulong result5;\n  ulong result6;\n  ulong *note_entry;\n  undefined *dest_ptr;\n  char note_type;\n  undefined *name_dest_ptr;\n  int loop_counter;\n  undefined *note_data;\n  ulong *note_data_start;\n  ulong note_data_end;\n  size_t note_entry_count;\n  ulong *first_note_entry;\n  byte bVar26;\n  ulong saved_value_1;\n  ulong saved_value_2;\n  ulong current_value;\n  ulong return_value;\n  ulong *note_entries;\n  \n  bVar26 = 0;\n  error_message = bfd_get_reloc_upper_bound();\n  return_value = section_size;\n  if (0 < error_message) {\n    reloc_buffer = (void *)xmalloc(error_message);\n    error_message = bfd_canonicalize_reloc(param_elf_header,param_elf_section_header,reloc_buffer,DAT_001278b0);\n    free(reloc_buffer);\n    if (error_message != 0) {\n      if (_DAT_00127a24 == 0) {\n        header_1 = *param_elf_header;\n        header_2 = *param_elf_section_header;\n        warning_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(warning_message,header_1,header_2);\n      }\n      note_entries = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  note_entries = (ulong *)xcalloc(section_size / 0xc,0x48,section_size % 0xc);\n  saved_value_1 = 0;\n  current_value = 0;\n  result6 = section_size;\n  result5 = 0;\n  note_data_start = note_entries;\n  result4 = 0;\n  note_data = output_buf;\n  while (0xb < result6) {\n    temp2 = (**(code **)(param_elf_header[1] + 0x40))(note_data);\n    *note_data_start = temp2;\n    temp2 = (**(code **)(param_elf_header[1] + 0x40))(note_data + 4);\n    note_data_start[1] = temp2;\n    result1 = (**(code **)(param_elf_header[1] + 0x40))(note_data + 8);\n    temp2 = *note_data_start;\n    note_data_start[2] = result1;\n    result2 = note_data_start[1];\n    result3 = temp2 + 3 & 0xfffffffffffffffc;\n    note_data_start[6] = result3;\n    if (result2 != (result2 + 3 & 0xfffffffffffffffc)) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < result1 - 0x100) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = result3 + result2 + 0xc;\n    if (result6 < result) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp2 < 2) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    note_data_start[3] = (ulong)(note_data + 0xc);\n    note_data_start[4] = (ulong)(note_data + result3 + 0xc);\n    result6 = result6 + (-0xc - (result3 + result2));\n    if (temp2 != 2) {\n      if (note_data[0xc] == '$') {\n        if ((note_data[0xd] == '\\x01') && (note_data[0xe] == '1')) {\n          result6 = process_build_attributes_00116490();\n          return result6;\n        }\n      }\n      else if ((((4 < temp2) && (note_data[0xc] == 'G')) && (note_data[0xd] == 'A')) &&\n              ((note_data[0xe] == '$' && (note_data[0xf] == '\\x01')))) {\n        if (note_data[0x10] == '2') {\n          result6 = process_build_attributes_00116490();\n          return result6;\n        }\n        if (note_data[0x10] == '3') {\n          result6 = process_build_attributes_00116490();\n          return result6;\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp1 = result5;\n    note_data_end = result4;\n    if (result2 == 0) {\n      if (result1 == 0x100) {\n        note_data_start[7] = saved_value_1;\nLAB_001164af:\n        result2 = result4;\n        note_data_end = result4;\n      }\n      else {\n        note_data_start[7] = current_value;\nLAB_0011669e:\n        temp1 = result5;\n        result2 = result5;\n      }\n    }\n    else {\n      if (result2 != 0x10) {\n        if (result2 < 0x11) {\n          if (result2 == 4) {\n            result1 = (**(code **)(param_elf_header[1] + 0x40))();\n            result2 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (result2 == 8) {\n            result6 = decode_and_process_data_001086af();\n            return result6;\n          }\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      result1 = (**(code **)(param_elf_header[1] + 0x28))(note_data + result3 + 0xc);\n      result2 = (**(code **)(param_elf_header[1] + 0x28))();\n      if (result2 < result1) {\n        result1 = result2;\n      }\nLAB_00116631:\n      if (note_data_start[2] == 0x100) {\n        if (result1 == 0) {\n          result1 = saved_value_1;\n        }\n        temp2 = *note_data_start;\n        note_data_start[7] = result1;\n        note_data_end = result2;\n        saved_value_1 = result1;\n        if (result2 == 0) goto LAB_001164af;\n      }\n      else {\n        if (result1 == 0) {\n          result1 = current_value;\n        }\n        temp2 = *note_data_start;\n        note_data_start[7] = result1;\n        temp1 = result2;\n        current_value = result1;\n        if (result2 == 0) goto LAB_0011669e;\n      }\n    }\n    note_data_start[8] = result2;\n    if (*(char *)((note_data_start[3] - 1) + temp2) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_data_start = note_data_start + 9;\n    result5 = temp1;\n    result4 = note_data_end;\n    note_data = note_data + result;\n  }\n  if (result6 == 0) {\n    header_1 = *param_elf_header;\n    header_2 = *param_elf_section_header;\n    warning_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(warning_message,header_1,header_2);\n    note_entry_count = ((long)note_data_start - (long)note_entries >> 3) * -0x71c71c71c71c71c7;\n    qsort(note_entries,note_entry_count,0x48,compare_memory_and_values_0011a1b0);\n    for (note_entry = note_entries; note_entry < note_data_start; note_entry = note_entry + 9) {\n      result6 = note_entry[2];\n      if (result6 != 0) {\n        result5 = note_entry[7];\n        result4 = note_entry[8];\n        first_note_entry = note_entry;\n        loop_counter = 0;\n        if (result5 == result4) {\n          note_entry[2] = 0;\n        }\n        else {\n          do {\n            do {\n              last_match = first_note_entry;\n              first_note_entry = last_match + -9;\n              if (first_note_entry < note_entries) goto LAB_001167f5;\n              temp2 = last_match[-7];\n            } while (temp2 == 0);\n            if ((*first_note_entry != *note_entry) ||\n               (memcmp_result = memcmp((void *)last_match[-6],(void *)note_entry[3],*note_entry), memcmp_result != 0)) break;\n            result2 = last_match[-2];\n            result1 = last_match[-1];\n            if (result5 == result2) {\n              if (result4 == result1) {\n                note_entry[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (result4 <= result1) {\n                note_entry[2] = 0;\n                break;\n              }\n              if (result1 < result5) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < result1) || (result5 <= (result1 + 0xf & 0xfffffffffffffff0))\n                   ) goto decode_and_process_data_00116852;\n              }\nLAB_001167b8:\n              if ((result6 == 0x101) == (temp2 == 0x101)) {\n                if (result1 <= result4) {\n                  result1 = result4;\n                }\n                if (result2 < result5) {\n                  result5 = result2;\n                }\n                last_match[-1] = result1;\n                last_match[-2] = result5;\n                note_entry[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (result2 <= result5) goto LAB_001167a6;\n              if (result1 < result5) goto LAB_0010852c;\n              if (result4 < result5) {\n                if ((0xfffffffffffffff0 < result4) || (result2 <= (result4 + 0xf & 0xfffffffffffffff0))\n                   ) goto decode_and_process_data_00116852;\n                goto LAB_001167b8;\n              }\n              if (result4 != result1) goto LAB_001167b8;\n            }\ndecode_and_process_data_00116852:\n            is_match = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (is_match);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(note_entries,note_entry_count,0x48,compare_ulong_arrays_0011a250);\n    reloc_buffer_00 = (undefined *)xmalloc(section_size * 2);\n    saved_value_2 = 0;\n    current_value = 0;\n    note_data = reloc_buffer_00;\n    for (note_entry = note_entries; note_entry < note_data_start; note_entry = note_entry + 9) {\n      if (note_entry[2] != 0) {\n        dest_ptr = note_data + 0xc;\n        if ((note_entry[7] == current_value) && (note_entry[8] == saved_value_2)) {\n          (**(code **)(param_elf_header[1] + 0x50))(*note_entry,note_data);\n          (**(code **)(param_elf_header[1] + 0x50))(0,note_data + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(note_entry[2],note_data + 8);\n          result5 = note_entry[6];\n          result6 = *note_entry;\n          note_data = (undefined *)note_entry[3];\n          name_dest_ptr = dest_ptr;\n          for (result4 = result6; result4 != 0; result4 = result4 - 1) {\n            *name_dest_ptr = *note_data;\n            note_data = note_data + (ulong)bVar26 * -2 + 1;\n            name_dest_ptr = name_dest_ptr + (ulong)bVar26 * -2 + 1;\n          }\n          if (result6 < result5) {\n            for (error_message = result5 - result6; error_message != 0; error_message = error_message + -1) {\n              *name_dest_ptr = 0;\n              name_dest_ptr = name_dest_ptr + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          note_data = dest_ptr + result5;\n        }\n        else {\n          (**(code **)(param_elf_header[1] + 0x50))();\n          if (*(int *)(param_elf_header[1] + 8) == 5) {\n            note_type = (*(char *)(param_elf_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            note_type = '\\b';\n          }\n          (**(code **)(param_elf_header[1] + 0x50))(note_type,note_data + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(note_entry[2],note_data + 8);\n          result6 = *note_entry;\n          note_data = (undefined *)note_entry[3];\n          name_dest_ptr = dest_ptr;\n          for (result5 = result6; result5 != 0; result5 = result5 - 1) {\n            *name_dest_ptr = *note_data;\n            note_data = note_data + (ulong)bVar26 * -2 + 1;\n            name_dest_ptr = name_dest_ptr + (ulong)bVar26 * -2 + 1;\n          }\n          result5 = note_entry[6];\n          if (result6 < result5) {\n            for (error_message = result5 - result6; error_message != 0; error_message = error_message + -1) {\n              *name_dest_ptr = 0;\n              name_dest_ptr = name_dest_ptr + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          error_message = param_elf_header[1];\n          dest_ptr = dest_ptr + result5;\n          note_data = dest_ptr + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(param_elf_header[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(note_entry[7],dest_ptr);\n            (**(code **)(param_elf_header[1] + 0x38))(note_entry[8],note_data);\n            note_data = dest_ptr + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(note_entry[7],dest_ptr);\n            (**(code **)(param_elf_header[1] + 0x50))(note_entry[8],dest_ptr + 4);\n          }\n          current_value = note_entry[7];\n          saved_value_2 = note_entry[8];\n        }\n      }\n    }\n    result5 = (long)note_data - (long)reloc_buffer_00;\n    result6 = result5;\n    note_data = reloc_buffer_00;\n    return_value = section_size;\n    if (result5 < section_size) {\n      for (; return_value = result5, result6 != 0; result6 = result6 - 1) {\n        *output_buf = *note_data;\n        note_data = note_data + (ulong)bVar26 * -2 + 1;\n        output_buf = output_buf + (ulong)bVar26 * -2 + 1;\n      }\n    }\n    free(reloc_buffer_00);\n  }\n  else {\n    error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (error_message != 0) {\n      bfd_set_error(0x11);\n      print_error_information_001126c0(0,param_elf_header,param_elf_section_header,error_message);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(note_entries);\n  return return_value;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xcalloc",
                "free",
                "xmalloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_gnu_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "output_file",
                "param_2": "exit_code",
                "uVar1": "default_usage",
                "pcVar2": "localized_string"
            },
            "code": "\nvoid print_usage_and_exit_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 default_usage;\n  char *localized_string;\n  \n  default_usage = DAT_001275e0;\n  localized_string = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,localized_string,default_usage);\n  localized_string = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,localized_string);\n  print_supported_targets_00104a35(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    localized_string = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,localized_string,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "decode_and_parse_string_00108c86",
                "param_1": "input_pointer",
                "cVar1": "comparison_result",
                "iVar2": "string_comparison_result",
                "sVar3": "string_length",
                "puVar4": "allocated_memory",
                "lVar5": "param_value",
                "__s": "string",
                "__s1": "string_part",
                "puVar6": "destination_pointer",
                "uVar7": "return_value",
                "bVar8": "byte_value"
            },
            "code": "\nundefined8 decode_and_parse_string_00108c86(long *input_pointer)\n\n{\n  char comparison_result;\n  int string_comparison_result;\n  size_t string_length;\n  undefined2 *allocated_memory;\n  long param_value;\n  char *string;\n  char *string_part;\n  undefined2 *destination_pointer;\n  undefined8 return_value;\n  byte byte_value;\n  \n  byte_value = 0;\n  param_value = *input_pointer;\n  string = (char *)(param_value + 4);\n  comparison_result = compare_strings_00113fb0(string,&DAT_0011b73b);\n  if (comparison_result == '\\0') {\n    comparison_result = compare_strings_00113fb0(string,\"bsdrv-\");\n    if (comparison_result == '\\0') {\n      comparison_result = compare_strings_00113fb0(string,\"rtdrv-\");\n      if (comparison_result == '\\0') {\n        return 0xffffffff;\n      }\n      string = (char *)(param_value + 6);\n      return_value = 0xc;\n    }\n    else {\n      string = (char *)(param_value + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string);\n  allocated_memory = (undefined2 *)xmalloc(string_length + 8);\n  string_part = string + 4;\n  destination_pointer = allocated_memory;\n  for (param_value = string_length + 1; param_value != 0; param_value = param_value + -1) {\n    *(char *)destination_pointer = *string;\n    string = string + (ulong)byte_value * -2 + 1;\n    destination_pointer = (undefined2 *)((long)destination_pointer + (ulong)byte_value * -2 + 1);\n  }\n  *(undefined *)(allocated_memory + 1) = 0x69;\n  *allocated_memory = 0x6570;\n  string_comparison_result = strcmp(string_part,\"ia32\");\n  if (string_comparison_result == 0) {\n    *(undefined *)((long)allocated_memory + 7) = 0x36;\n    *(undefined2 *)((long)allocated_memory + 5) = 0x3833;\n  }\n  else {\n    string_comparison_result = strcmp(string_part,\"x86_64\");\n    if (string_comparison_result == 0) {\n      *(undefined *)((long)allocated_memory + 7) = 0x2d;\n    }\n    else {\n      string_comparison_result = strcmp(string_part,\"aarch64\");\n      if (string_comparison_result == 0) {\n        *(undefined8 *)((long)allocated_memory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_pointer = (long)allocated_memory;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "decode_and_parse_string_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "messageFormat"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *messageFormat;\n  \n  messageFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,messageFormat,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_bfd_error_and_set_status_001053d5",
                "unaff_R12": "error_status",
                "unaff_R14": "bfd_file_ptr"
            },
            "code": "\nundefined4 print_bfd_error_and_set_status_001053d5(void)\n\n{\n  long error_status;\n  undefined8 *bfd_file_ptr;\n  \n  print_bfd_error_0011a110(*bfd_file_ptr);\n  *(undefined4 *)(error_status + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(error_status + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_bfd_error_and_set_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "eaxValue",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value"
            },
            "code": "\nvoid checkAndSetFlags_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "remainingLength",
                "puVar3": "currentDestination",
                "bVar4": "isReverse"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long remainingLength;\n  undefined *currentDestination;\n  byte isReverse;\n  \n  isReverse = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  currentDestination = destination;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *currentDestination = *source;\n    source = source + (ulong)isReverse * -2 + 1;\n    currentDestination = currentDestination + (ulong)isReverse * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010afd5",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slotPointer",
                "param_2": "slotIndex",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "errorMessage",
                "plVar2": "newSlot",
                "lVar3": "slotOffset",
                "lVar4": "loopCounter",
                "uVar5": "remainingSlots",
                "bVar6": "bitVariable",
                "auVar7": "resultSlot"
            },
            "code": "\nundefined  [16] allocateAndInitializeSlots_0010da0b(long **slotPointer,ulong slotIndex,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 errorMessage;\n  long *newSlot;\n  long slotOffset;\n  long loopCounter;\n  ulong remainingSlots;\n  byte bitVariable;\n  undefined resultSlot [16];\n  \n  bitVariable = 0;\n  remainingSlots = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*slotPointer == (long *)0x0) {\n        newSlot = (long *)xmalloc(0x88);\n        *slotPointer = newSlot;\n        for (slotOffset = 0x22; slotOffset != 0; slotOffset = slotOffset + -1) {\n          *(undefined4 *)newSlot = 0;\n          newSlot = (long *)((long)newSlot + (ulong)bitVariable * -8 + 4);\n        }\n      }\n      slotPointer = (long **)*slotPointer;\n    }\n    slotOffset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      slotOffset = 0;\n    }\n    if (*slotPointer == (long *)0x0) {\n      newSlot = (long *)xmalloc(0x88);\n      *slotPointer = newSlot;\n      for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *(undefined4 *)newSlot = 0;\n        newSlot = (long *)((long)newSlot + (ulong)bitVariable * -8 + 4);\n      }\n    }\n    resultSlot._8_8_ = param4;\n    resultSlot._0_8_ = *slotPointer + slotIndex + slotOffset + 1;\n    return resultSlot;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "puVar1": "data_structure",
                "puVar2": "ptr",
                "lVar3": "counter",
                "bVar4": "initializer"
            },
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 input_1,undefined input_2,undefined8 input_3,undefined8 input_4)\n\n{\n  undefined8 *data_structure;\n  undefined8 *ptr;\n  long counter;\n  byte initializer;\n  \n  initializer = 0;\n  data_structure = (undefined8 *)xmalloc(0x1b0);\n  ptr = data_structure;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)ptr = 0;\n    ptr = (undefined8 *)((long)ptr + (ulong)initializer * -8 + 4);\n  }\n  *data_structure = input_1;\n  *(undefined *)(data_structure + 1) = input_2;\n  data_structure[2] = input_3;\n  data_structure[3] = input_4;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  ptr = (undefined8 *)xmalloc(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = ptr;\n  *ptr = 0;\n  return data_structure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_pointer_00109b2f",
                "param_1": "arg1",
                "__ptr": "pointer",
                "puVar1": "next_pointer"
            },
            "code": "\nundefined8 * extract_and_free_pointer_00109b2f(long arg1)\n\n{\n  undefined8 *pointer;\n  undefined8 *next_pointer;\n  \n  pointer = *(undefined8 **)(arg1 + 0x60);\n  if (pointer != (undefined8 *)0x0) {\n    next_pointer = (undefined8 *)pointer[1];\n    *(undefined8 *)(arg1 + 0x60) = *pointer;\n    free(pointer);\n    return next_pointer;\n  }\n  return pointer;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a94e",
                "FUN_0010a0e9",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "extract_and_free_pointer_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "param_error_msg",
                "param_2": "symbol_name_1",
                "param_3": "symbol_name_2",
                "param_4": "return_value",
                "ppcVar1": "symbol_names",
                "pcVar2": "duplicated_symbol_name",
                "lVar3": "symbol_redefinition_result",
                "uVar4": "error_msg",
                "plVar5": "symbol_names_slot"
            },
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 param_error_msg,char *symbol_name_1,char *symbol_name_2,undefined8 return_value)\n\n{\n  char **symbol_names;\n  char *duplicated_symbol_name;\n  long symbol_redefinition_result;\n  undefined8 error_msg;\n  long *symbol_names_slot;\n  \n  symbol_names = (char **)xmalloc(0x10);\n  duplicated_symbol_name = strdup(symbol_name_1);\n  *symbol_names = duplicated_symbol_name;\n  duplicated_symbol_name = strdup(symbol_name_2);\n  error_msg = DAT_001278d0;\n  symbol_names[1] = duplicated_symbol_name;\n  symbol_redefinition_result = htab_find(error_msg,symbol_names);\n  if (symbol_redefinition_result != 0) {\n    error_msg = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit_00119dd0(error_msg,param_error_msg,symbol_name_1);\n  }\n  symbol_redefinition_result = htab_find(DAT_001278c8,symbol_name_2);\n  if (symbol_redefinition_result != 0) {\n    error_msg = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit_00119dd0(error_msg,param_error_msg,symbol_name_2);\n  }\n  symbol_names_slot = (long *)htab_find_slot(DAT_001278d0,symbol_names,1);\n  error_msg = DAT_001278c8;\n  *symbol_names_slot = (long)symbol_names;\n  duplicated_symbol_name = symbol_names[1];\n  symbol_names = (char **)htab_find_slot(error_msg,duplicated_symbol_name,1);\n  *symbol_names = duplicated_symbol_name;\n  return return_value;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "strdup",
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "generate_formatted_string_0010e9a0",
                "param_1": "dataPointer",
                "param_2": "prefixString",
                "param_3": "option",
                "param_4": "additionalData",
                "__s": "extractedString",
                "__s_00": "formattedString",
                "lVar1": "counter",
                "pcVar5": "typeString",
                "uVar6": "formattingCharacter",
                "__s_01": "finalString",
                "sVar3": "prefixLength",
                "sVar4": "suffixLength",
                "uVar2": "result"
            },
            "code": "\nundefined4 generateFormattedString_0010e9a0(long dataPointer,char *prefixString,undefined4 option,undefined8 additionalData)\n\n{\n  long counter;\n  undefined4 result;\n  byte *extractedString;\n  byte *formattedString;\n  size_t prefixLength;\n  size_t suffixLength;\n  char *finalString;\n  char *typeString;\n  undefined8 formattingCharacter;\n  \n  extractedString = (byte *)extract_and_free_pointer_00109b2f();\n  switch(option) {\n  case 1:\n    typeString = \"G\";\n    formattingCharacter = 0x20;\n    break;\n  case 2:\n    typeString = \"S\";\n    formattingCharacter = 0x26;\n    break;\n  case 3:\n    typeString = \"V\";\n    formattingCharacter = 0x26;\n    break;\n  case 4:\n    typeString = \"\";\n    formattingCharacter = 0x80;\n    if (((&_sch_istable)[(ulong)*extractedString * 2] & 4) == 0) {\n      counter = *(long *)(dataPointer + 0x68);\n      *(long *)(dataPointer + 0x68) = counter + 1;\n      prefixLength = strlen((char *)extractedString);\n      formattedString = (byte *)xmalloc(prefixLength + 0x14);\n      sprintf((char *)formattedString,\"%ld=%s\",counter,extractedString);\n      free(extractedString);\n      extractedString = formattedString;\n    }\n    break;\n  case 5:\n    typeString = \"r\";\n    formattingCharacter = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  prefixLength = strlen(prefixString);\n  suffixLength = strlen((char *)extractedString);\n  finalString = (char *)xmalloc(prefixLength + 3 + suffixLength);\n  sprintf(finalString,\"%s:%s%s\",prefixString,typeString,extractedString);\n  free(extractedString);\n  result = process_string_0010e2f0(dataPointer,formattingCharacter,0,additionalData,finalString);\n  if ((char)result != '\\0') {\n    free(finalString);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_matching_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage",
                "print_error_and_exit_00119dd0": "printErrorMessageAndExit"
            },
            "code": "\nvoid handleSectionMatching_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  printErrorMessageAndExit(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_section_matching_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_error_00104920",
                "uVar1": "errorString",
                "dcgettext": "getErrorMessage",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid handleBadNumberError_00104920(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  printErrorAndExit(errorString);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_bad_number_error_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,isEqualString,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "free",
                "htab_hash_string",
                "htab_create_alloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "messagePtr",
                "lVar2": "matchingValue",
                "cVar3": "isError",
                "lVar4": "errorMsg",
                "lVar5": "newValue",
                "unaff_RBX": "previousValue",
                "unaff_RBP": "argumentPtr",
                "unaff_R12": "constantValue",
                "unaff_R14B": "shouldCopyData",
                "unaff_R15": "newValue2"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long messagePtr;\n  long matchingValue;\n  char isError;\n  long errorMsg;\n  long newValue;\n  long previousValue;\n  long argumentPtr;\n  long constantValue;\n  char shouldCopyData;\n  long newValue2;\n  \n  errorMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(newValue2 + 0xb4) = *(undefined4 *)(previousValue + 0xb4);\n  *(byte *)(newValue2 + 0x28) =\n       *(byte *)(newValue2 + 0x28) & 0xcf | *(byte *)(previousValue + 0x28) & 0x30;\n  *(long *)(previousValue + 0x60) = newValue2;\n  *(undefined8 *)(previousValue + 0x58) = 0;\n  if ((*(byte *)(previousValue + 0x27) & 2) != 0) {\n    messagePtr = *(long *)(previousValue + 0xd0);\n    newValue = get_matching_value_00115d00(messagePtr,*(undefined8 *)(previousValue + 0xe0));\n    if ((newValue != 0) &&\n       (matchingValue = *(long *)(constantValue + 8), *(uint *)(newValue + 0x18) = *(uint *)(newValue + 0x18) | 0x20,\n       *(int *)(matchingValue + 8) == 5)) {\n      *(long *)(messagePtr + 0xb0) = newValue;\n      isError = (**(code **)(*(long *)(argumentPtr + 8) + 0x158))();\n      if (isError == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  isError = (**(code **)(*(long *)(argumentPtr + 8) + 0x158))();\n  if (isError == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (shouldCopyData != '\\0') {\n    *(undefined4 *)(*(long *)(newValue2 + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "dcgettext",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "extract_file_type_00109022",
                "param_1": "filePointer",
                "param_2": "fileNumbers",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "secondFileNumber",
                "pcVar2": "errMsg",
                "plVar3": "fileTypePtr",
                "lVar4": "loopCounter",
                "uVar5": "firstFileNumber",
                "pplVar6": "fileTypeListPtrPtr",
                "bVar7": "byteVar",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] extractFileType_00109022(long filePointer,uint *fileNumbers,undefined8 arg3,undefined8 arg4)\n\n{\n  uint secondFileNumber;\n  char *errMsg;\n  long *fileTypePtr;\n  long loopCounter;\n  uint firstFileNumber;\n  long **fileTypeListPtrPtr;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  firstFileNumber = *fileNumbers;\n  secondFileNumber = fileNumbers[1];\n  if (((int)firstFileNumber < 0) || (*(uint *)(filePointer + 0x80) <= firstFileNumber)) {\n    errMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errMsg,(ulong)firstFileNumber);\n  }\n  else {\n    if (-1 < (int)secondFileNumber) {\n      fileTypeListPtrPtr = (long **)(*(long *)(filePointer + 0x88) + (long)(int)firstFileNumber * 8);\n      for (firstFileNumber = secondFileNumber; 0xf < (int)firstFileNumber; firstFileNumber = firstFileNumber - 0x10) {\n        if (*fileTypeListPtrPtr == (long *)0x0) {\n          fileTypePtr = (long *)xmalloc(0x88);\n          *fileTypeListPtrPtr = fileTypePtr;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileTypePtr = 0;\n            fileTypePtr = (long *)((long)fileTypePtr + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileTypeListPtrPtr = (long **)*fileTypeListPtrPtr;\n      }\n      if (*fileTypeListPtrPtr == (long *)0x0) {\n        fileTypePtr = (long *)xmalloc(0x88);\n        *fileTypeListPtrPtr = fileTypePtr;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileTypePtr = 0;\n          fileTypePtr = (long *)((long)fileTypePtr + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileTypePtr = *fileTypeListPtrPtr + (long)(int)((secondFileNumber >> 4) * -0x10 + secondFileNumber) + 1;\n      goto LAB_00109117;\n    }\n    errMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errMsg,(ulong)secondFileNumber);\n  }\n  fileTypePtr = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = arg4;\n  result._0_8_ = fileTypePtr;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_file_type_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "file",
                "param_2": "size",
                "param_3": "addr",
                "param_4": "type",
                "param_5": "arg1",
                "param_6": "arg2",
                "auVar1": "result",
                "uVar2": "status",
                "piVar3": "ptr",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "mem_addr",
                "piVar7": "ptr2",
                "bVar8": "zero",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long file,long size,ulong addr,int type,undefined8 arg1,\n            undefined8 arg2)\n\n{\n  undefined result [16];\n  undefined8 status;\n  int *ptr;\n  char flag;\n  long counter;\n  long mem_addr;\n  int *ptr2;\n  byte zero;\n  undefined return_value [16];\n  \n  zero = 0;\n  if (size == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = addr;\n    return result << 0x40;\n  }\n  if (addr != 0) {\n    if ((*(long *)(file + 8) == 0) || (mem_addr = *(long *)(file + 0x10), mem_addr == 0)) {\n      status = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",status);\n    }\n    else {\n      if (type - 1U < 2) {\n        mem_addr = mem_addr + 0x10;\n        flag = (type == 1) + '\\x01';\n      }\n      else if (*(long *)(file + 0x20) == 0) {\n        mem_addr = mem_addr + 0x10;\n        flag = '\\0';\n      }\n      else {\n        mem_addr = *(long *)(file + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      mem_addr = initialize_memory_00112925(mem_addr,size,2,flag);\n      if (mem_addr != 0) {\n        ptr = (int *)xmalloc(0x18);\n        ptr2 = ptr + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)zero * -2 + 1;\n        }\n        *ptr = type;\n        status = 1;\n        *(ulong *)(ptr + 2) = addr;\n        *(undefined8 *)(ptr + 4) = arg1;\n        *(int **)(mem_addr + 0x20) = ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  return_value._8_8_ = arg2;\n  return_value._0_8_ = status;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c139",
                "FUN_0010c1c6"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_update_data_00109d97",
                "param_1": "data",
                "local_40": "formatted_string",
                "lVar1": "incremented_count"
            },
            "code": "\nvoid initialize_or_update_data_00109d97(long data)\n\n{\n  long incremented_count;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    initialize_data_struct_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  incremented_count = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = incremented_count + 1;\n  sprintf(formatted_string,\"%ld=%ld\",incremented_count,incremented_count);\n  initialize_data_struct_00109b52(data,formatted_string,incremented_count,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "initialize_or_update_data_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "decode_and_process_data_001086af",
                "unaff_R14": "function_pointers",
                "unaff_RBX": "note_count",
                "unaff_R12": "notes",
                "unaff_RBP": "note_type",
                "unaff_R13": "version",
                "unaff_retaddr": "return_address",
                "param_7": "input_param_1",
                "in_RCX": "input_param_2",
                "param_14": "input_param_3",
                "param_9": "temp_var_1",
                "param_8": "temp_var_2",
                "param_10": "output_param",
                "param_11": "sorted_notes",
                "in_stack_00000030": "description_buffer",
                "in_stack_00000038": "buffer_length",
                "param_13": "note_version",
                "bVar22": "flag",
                "iVar23": "counter",
                "iVar6": "memcmp_result",
                "lVar7": "error_message",
                "uVar1": "temp_var_3",
                "uVar2": "temp_var_4",
                "uVar3": "temp_var_5",
                "bVar4": "boolean_flag",
                "uVar5": "pointer_var",
                "puVar5": "pointer_var_2",
                "puVar15": "note_pointer",
                "puVar16": "pointer_var_3",
                "puVar18": "pointer_var_4",
                "puVar19": "pointer_var_5",
                "puVar21": "pointer_var_6",
                "uVar8": "temp_var_6",
                "uVar9": "temp_var_7",
                "uVar10": "temp_var_8",
                "uVar11": "temp_var_9",
                "uVar12": "temp_var_10",
                "uVar13": "temp_var_11",
                "uVar14": "temp_var_12",
                "uVar20": "temp_var_13",
                "__ptr": "memory_buffer",
                "__nmemb": "note_count_2",
                "cVar17": "character_var"
            },
            "code": "\nulong decode_and_process_data_001086af(void)\n\n{\n  ulong temp_var_3;\n  undefined8 temp_var_4;\n  undefined8 temp_var_5;\n  bool boolean_flag;\n  ulong *pointer_var_2;\n  int memcmp_result;\n  long error_message;\n  undefined8 temp_var_6;\n  ulong temp_var_7;\n  ulong temp_var_8;\n  ulong temp_var_9;\n  undefined *memory_buffer;\n  ulong input_param_2;\n  ulong temp_var_10;\n  ulong temp_var_11;\n  ulong temp_var_12;\n  ulong note_count;\n  ulong note_type;\n  ulong *note_pointer;\n  undefined *pointer_var_3;\n  char character_var;\n  undefined *pointer_var_4;\n  undefined *pointer_var_5;\n  ulong *notes;\n  ulong version;\n  ulong temp_var_13;\n  size_t note_count_2;\n  undefined8 *function_pointers;\n  ulong *pointer_var_6;\n  byte flag;\n  int counter;\n  ulong return_address;\n  ulong input_param_1;\n  uint temp_var_2;\n  ulong temp_var_1;\n  ulong output_param;\n  ulong *sorted_notes;\n  undefined *description_buffer;\n  uint buffer_length;\n  uint note_version;\n  undefined8 *input_param_3;\n  \n  flag = 0;\n  input_param_1 = input_param_2;\n  temp_var_7 = (**(code **)(function_pointers[1] + 0x40))();\n  temp_var_8 = (**(code **)(function_pointers[1] + 0x40))(notes[4] + 4);\nLAB_0011662a:\n  temp_var_11 = note_type;\n  temp_var_13 = version;\n  if (temp_var_8 < temp_var_7) {\n    temp_var_7 = temp_var_8;\n  }\n  do {\n    temp_var_9 = input_param_1;\n    temp_var_10 = input_param_1;\n    note_pointer = notes;\n    if (notes[2] == 0x100) {\n      if (temp_var_7 == 0) {\n        temp_var_7 = return_address;\n      }\n      temp_var_12 = *notes;\n      notes[7] = temp_var_7;\n      note_type = temp_var_11;\n      version = temp_var_8;\n      return_address = temp_var_7;\n      if (temp_var_8 == 0) goto LAB_001164af;\n    }\n    else {\n      if (temp_var_7 == 0) {\n        temp_var_7 = temp_var_1;\n      }\n      temp_var_12 = *notes;\n      notes[7] = temp_var_7;\n      note_type = temp_var_8;\n      version = temp_var_13;\n      temp_var_1 = temp_var_7;\n      if (temp_var_8 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    note_pointer[8] = temp_var_8;\n    if (*(char *)((note_pointer[3] - 1) + temp_var_12) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    notes = note_pointer + 9;\n    if (note_count < 0xc) {\n      if (note_count != 0) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((buffer_length | note_version | temp_var_2) != 0) {\n        if (((note_version | temp_var_2) == 0) || (buffer_length == 0)) {\n          if (note_version == 0) {\n            if (temp_var_2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (temp_var_2 == 0) goto LAB_001166f8;\n        }\n        error_message = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      temp_var_4 = *function_pointers;\n      temp_var_5 = *input_param_3;\n      temp_var_6 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(temp_var_6,temp_var_4,temp_var_5);\nLAB_0011671b:\n      note_count_2 = ((long)notes - (long)sorted_notes >> 3) * -0x71c71c71c71c71c7;\n      qsort(sorted_notes,note_count_2,0x48,compare_memory_and_values_0011a1b0);\n      note_pointer = sorted_notes;\n      goto LAB_001167f9;\n    }\n    temp_var_8 = (**(code **)(function_pointers[1] + 0x40))(temp_var_10);\n    *notes = temp_var_8;\n    temp_var_8 = (**(code **)(function_pointers[1] + 0x40))(temp_var_10 + 4);\n    note_pointer[10] = temp_var_8;\n    temp_var_7 = (**(code **)(function_pointers[1] + 0x40))(temp_var_10 + 8);\n    temp_var_12 = *notes;\n    note_pointer[0xb] = temp_var_7;\n    temp_var_8 = note_pointer[10];\n    temp_var_11 = temp_var_12 + 3 & 0xfffffffffffffffc;\n    note_pointer[0xf] = temp_var_11;\n    if (temp_var_8 != (temp_var_8 + 3 & 0xfffffffffffffffc)) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp_var_7 - 0x100) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    temp_var_9 = temp_var_11 + temp_var_8 + 0xc;\n    if (note_count < temp_var_9) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_var_12 < 2) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    note_pointer[0xc] = temp_var_10 + 0xc;\n    temp_var_3 = temp_var_10 + 0xc + temp_var_11;\n    note_pointer[0xd] = temp_var_3;\n    note_count = note_count + (-0xc - (temp_var_11 + temp_var_8));\n    temp_var_9 = temp_var_10 + temp_var_9;\n    if (temp_var_12 != 2) {\n      if (*(char *)(temp_var_10 + 0xc) == '$') {\n        if ((*(char *)(temp_var_10 + 0xd) == '\\x01') && (*(char *)(temp_var_10 + 0xe) == '1')) {\n          temp_var_8 = process_build_attributes_00116490();\n          return temp_var_8;\n        }\n      }\n      else if ((((4 < temp_var_12) && (*(char *)(temp_var_10 + 0xc) == 'G')) &&\n               (*(char *)(temp_var_10 + 0xd) == 'A')) &&\n              ((*(char *)(temp_var_10 + 0xe) == '$' && (*(char *)(temp_var_10 + 0xf) == '\\x01')))) {\n        if (*(char *)(temp_var_10 + 0x10) == '2') {\n          temp_var_8 = process_build_attributes_00116490();\n          return temp_var_8;\n        }\n        if (*(char *)(temp_var_10 + 0x10) == '3') {\n          temp_var_8 = process_build_attributes_00116490();\n          return temp_var_8;\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_var_11 = note_type;\n    temp_var_13 = version;\n    if (temp_var_8 == 0) {\n      if (temp_var_7 == 0x100) {\n        note_pointer[0x10] = return_address;\nLAB_001164af:\n        temp_var_10 = temp_var_9;\n        temp_var_8 = temp_var_13;\n        note_pointer = notes;\n        version = temp_var_13;\n      }\n      else {\n        note_pointer[0x10] = temp_var_1;\nLAB_0011669e:\n        note_type = temp_var_11;\n        temp_var_10 = temp_var_9;\n        temp_var_8 = temp_var_11;\n        note_pointer = notes;\n        version = temp_var_13;\n      }\n      goto LAB_001164bb;\n    }\n    if (temp_var_8 == 0x10) break;\n    if (0x10 < temp_var_8) {\nLAB_00116679:\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (error_message != 0) {\n        bfd_set_error(0x11);\n        print_error_information_001126c0(0,function_pointers,input_param_3,error_message);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (temp_var_8 != 4) {\n      if (temp_var_8 == 8) {\n        temp_var_8 = decode_and_process_data_001086af();\n        return temp_var_8;\n      }\n      goto LAB_00116679;\n    }\n    input_param_1 = temp_var_9;\n    temp_var_7 = (**(code **)(function_pointers[1] + 0x40))();\n    temp_var_8 = 0xffffffffffffffff;\n  } while( true );\n  input_param_1 = temp_var_9;\n  temp_var_7 = (**(code **)(function_pointers[1] + 0x28))(temp_var_3);\n  temp_var_8 = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (notes <= note_pointer) {\n    qsort(sorted_notes,note_count_2,0x48,compare_ulong_arrays_0011a250);\n    memory_buffer = (undefined *)xmalloc(output_param * 2);\n    input_param_1 = 0;\n    temp_var_1 = 0;\n    pointer_var_5 = memory_buffer;\n    for (note_pointer = sorted_notes; note_pointer < notes; note_pointer = note_pointer + 9) {\n      if (note_pointer[2] != 0) {\n        pointer_var_4 = pointer_var_5 + 4;\n        pointer_var_3 = pointer_var_5 + 0xc;\n        if ((note_pointer[7] == temp_var_1) && (note_pointer[8] == input_param_1)) {\n          (**(code **)(function_pointers[1] + 0x50))(*note_pointer,pointer_var_5);\n          (**(code **)(function_pointers[1] + 0x50))(0,pointer_var_4);\n          (**(code **)(function_pointers[1] + 0x50))(note_pointer[2],pointer_var_5 + 8);\n          temp_var_7 = note_pointer[6];\n          temp_var_8 = *note_pointer;\n          pointer_var_5 = (undefined *)note_pointer[3];\n          pointer_var_4 = pointer_var_3;\n          for (temp_var_11 = temp_var_8; temp_var_11 != 0; temp_var_11 = temp_var_11 - 1) {\n            *pointer_var_4 = *pointer_var_5;\n            pointer_var_5 = pointer_var_5 + (ulong)flag * -2 + 1;\n            pointer_var_4 = pointer_var_4 + (ulong)flag * -2 + 1;\n          }\n          if (temp_var_8 < temp_var_7) {\n            for (error_message = temp_var_7 - temp_var_8; error_message != 0; error_message = error_message + -1) {\n              *pointer_var_4 = 0;\n              pointer_var_4 = pointer_var_4 + (ulong)flag * -2 + 1;\n            }\n          }\n          pointer_var_5 = pointer_var_3 + temp_var_7;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            character_var = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            character_var = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(character_var,pointer_var_4);\n          (**(code **)(function_pointers[1] + 0x50))(note_pointer[2],pointer_var_5 + 8);\n          temp_var_8 = *note_pointer;\n          pointer_var_5 = (undefined *)note_pointer[3];\n          pointer_var_4 = pointer_var_3;\n          for (temp_var_7 = temp_var_8; temp_var_7 != 0; temp_var_7 = temp_var_7 - 1) {\n            *pointer_var_4 = *pointer_var_5;\n            pointer_var_5 = pointer_var_5 + (ulong)flag * -2 + 1;\n            pointer_var_4 = pointer_var_4 + (ulong)flag * -2 + 1;\n          }\n          temp_var_7 = note_pointer[6];\n          if (temp_var_8 < temp_var_7) {\n            for (error_message = temp_var_7 - temp_var_8; error_message != 0; error_message = error_message + -1) {\n              *pointer_var_4 = 0;\n              pointer_var_4 = pointer_var_4 + (ulong)flag * -2 + 1;\n            }\n          }\n          error_message = function_pointers[1];\n          pointer_var_3 = pointer_var_3 + temp_var_7;\n          pointer_var_5 = pointer_var_3 + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(note_pointer[7],pointer_var_3);\n            (**(code **)(function_pointers[1] + 0x38))(note_pointer[8],pointer_var_5);\n            pointer_var_5 = pointer_var_3 + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(note_pointer[7],pointer_var_3);\n            (**(code **)(function_pointers[1] + 0x50))(note_pointer[8],pointer_var_3 + 4);\n          }\n          temp_var_1 = note_pointer[7];\n          input_param_1 = note_pointer[8];\n        }\n      }\n    }\n    temp_var_7 = (long)pointer_var_5 - (long)memory_buffer;\n    temp_var_8 = temp_var_7;\n    pointer_var_5 = memory_buffer;\n    if (temp_var_7 < output_param) {\n      for (; output_param = temp_var_7, temp_var_8 != 0; temp_var_8 = temp_var_8 - 1) {\n        *description_buffer = *pointer_var_5;\n        pointer_var_5 = pointer_var_5 + (ulong)flag * -2 + 1;\n        description_buffer = description_buffer + (ulong)flag * -2 + 1;\n      }\n    }\n    free(memory_buffer);\nLAB_001166f8:\n    free(sorted_notes);\n    return output_param;\n  }\n  if (note_pointer[2] != 0) {\n    temp_var_8 = note_pointer[7];\n    temp_var_7 = note_pointer[8];\n    temp_var_11 = note_pointer[2];\n    pointer_var_6 = note_pointer;\n    counter = 0;\n    if (temp_var_8 == temp_var_7) {\n      note_pointer[2] = 0;\n    }\n    else {\n      do {\n        do {\n          pointer_var_2 = pointer_var_6;\n          pointer_var_6 = pointer_var_2 + -9;\n          if (pointer_var_6 < sorted_notes) goto LAB_001167f5;\n          temp_var_13 = pointer_var_2[-7];\n        } while (temp_var_13 == 0);\n        input_param_1 = temp_var_11;\n        if ((*pointer_var_6 != *note_pointer) ||\n           (memcmp_result = memcmp((void *)pointer_var_2[-6],(void *)note_pointer[3],*note_pointer), memcmp_result != 0)) break;\n        temp_var_11 = pointer_var_2[-2];\n        temp_var_9 = pointer_var_2[-1];\n        if (temp_var_8 == temp_var_11) {\n          if (temp_var_7 == temp_var_9) {\n            note_pointer[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (temp_var_7 <= temp_var_9) {\n            note_pointer[2] = 0;\n            break;\n          }\n          if (temp_var_9 < temp_var_8) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < temp_var_9) || (temp_var_8 <= (temp_var_9 + 0xf & 0xfffffffffffffff0)))\n            goto decode_and_process_data_001086af_00116852;\n          }\nLAB_001167b8:\n          if ((input_param_1 == 0x101) == (temp_var_13 == 0x101)) {\n            if (temp_var_9 <= temp_var_7) {\n              temp_var_9 = temp_var_7;\n            }\n            if (temp_var_11 < temp_var_8) {\n              temp_var_8 = temp_var_11;\n            }\n            pointer_var_2[-1] = temp_var_9;\n            pointer_var_2[-2] = temp_var_8;\n            note_pointer[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (temp_var_11 <= temp_var_8) goto LAB_001167a6;\n          if (temp_var_9 < temp_var_8) goto LAB_0010852c;\n          if (temp_var_7 < temp_var_8) {\n            if ((0xfffffffffffffff0 < temp_var_7) || (temp_var_11 <= (temp_var_7 + 0xf & 0xfffffffffffffff0)))\n            goto decode_and_process_data_001086af_00116852;\n            goto LAB_001167b8;\n          }\n          if (temp_var_7 != temp_var_9) goto LAB_001167b8;\n        }\ndecode_and_process_data_001086af_00116852:\n        boolean_flag = counter < 0x11;\n        temp_var_11 = input_param_1;\n        counter = counter + 1;\n      } while (boolean_flag);\n    }\n  }\nLAB_001167f5:\n  note_pointer = note_pointer + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_0011a1b0",
                "qsort",
                "FUN_00116490",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_0010847a",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "process_data_0010add5"
            },
            "code": "\nvoid process_data_0010add5(void)\n\n{\n  process_data_0010add5_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_data_structure_00113e17",
                "initialize_data_structure_00112904": "initDataStructure"
            },
            "code": "\nvoid initializeDataStructure_00113e17(void)\n\n{\n  initDataStructure(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_struct_00109b52",
                "param_1": "dataStructPtr",
                "param_2": "sourceString",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "uVar1": "tempVar1",
                "puVar2": "allocatedMemory",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStruct_00109b52(long dataStructPtr,undefined8 sourceString,undefined8 param3Value,undefined param4Value,\n                      undefined4 param5Value)\n\n{\n  undefined8 tempVar1;\n  undefined8 *allocatedMemory;\n  undefined8 duplicatedString;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  allocatedMemory[2] = param3Value;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  tempVar1 = *(undefined8 *)(dataStructPtr + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = param4Value;\n  *(undefined4 *)(allocatedMemory + 3) = param5Value;\n  *(undefined8 **)(dataStructPtr + 0x60) = allocatedMemory;\n  *allocatedMemory = tempVar1;\n  allocatedMemory[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010a0e9",
                "FUN_0010a181",
                "FUN_00109d97",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_0010a2b9",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "string_ptr",
                "param_2": "error_flag_ptr",
                "param_3": "end_of_string",
                "param_4": "param4",
                "param_5": "param5",
                "__nptr": "numeric_string",
                "piVar1": "errno_ptr",
                "uVar2": "result",
                "uVar3": "error_msg",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **string_ptr,undefined *error_flag_ptr,char *end_of_string,undefined8 param4,undefined8 param5)\n\n{\n  char *numeric_string;\n  int *errno_ptr;\n  ulong result;\n  undefined8 error_msg;\n  undefined return_value [16];\n  \n  if (error_flag_ptr != (undefined *)0x0) {\n    *error_flag_ptr = 0;\n  }\n  numeric_string = *string_ptr;\n  if ((numeric_string < end_of_string) && (*numeric_string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    result = strtoul(numeric_string,string_ptr,0);\n    if ((result != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag_ptr == (undefined *)0x0) {\n      error_msg = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(numeric_string,error_msg);\n    }\n    else {\n      *error_flag_ptr = 1;\n    }\n  }\n  result = 0;\nLAB_00109aa9:\n  return_value._8_8_ = param5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108fe8",
                "dcgettext",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "param_1": "file_offset",
                "param_2": "file_name",
                "param_3": "tag",
                "iVar1": "comparison_result",
                "uVar2": "translated_message",
                "piVar3": "initialized_structure",
                "pauVar4": "allocated_memory",
                "lVar5": "initialized_memory",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * debug_tag_type_0010c6be(long file_offset,char *file_name,int *tag)\n\n{\n  int comparison_result;\n  undefined8 translated_message;\n  int *initialized_structure;\n  undefined (*allocated_memory) [16];\n  long initialized_memory;\n  char *error_message;\n  \n  if ((file_name != (char *)0x0) && (tag != (int *)0x0)) {\n    if (*(long *)(file_offset + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*tag != 0x17) {\n        initialized_structure = (int *)initialize_data_structure_00112904(0x17,0);\n        if (initialized_structure == (int *)0x0) {\n          return (int *)0x0;\n        }\n        allocated_memory = (undefined (*) [16])xmalloc(0x10);\n        initialized_memory = *(long *)(file_offset + 0x10);\n        *allocated_memory = ZEXT816(0);\n        *(int **)(*allocated_memory + 8) = tag;\n        *(undefined (**) [16])(initialized_structure + 4) = allocated_memory;\n        initialized_memory = initialize_memory_00112925(initialized_memory + 0x10,file_name,1,3);\n        if (initialized_memory == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(initialized_memory + 0x20) = initialized_structure;\n        *(long *)*allocated_memory = initialized_memory;\n        return initialized_structure;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag + 4) + 8),file_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag;\n      }\n    }\n    translated_message = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",translated_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist_ptr",
                "param_4": "failure_flag_ptr",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "demangled_value",
                "uVar2": "value_count",
                "uVar3": "allocated_count",
                "uVar4": "updated_count",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist_ptr,undefined *failure_flag_ptr)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long demangled_value;\n  ulong value_count;\n  ulong allocated_count;\n  uint updated_count;\n  char buffer [9];\n  \n  allocated_count = 10;\n  value_count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *failure_flag_ptr = 0;\n  for (; arglist_ptr != (int *)0x0; arglist_ptr = *(int **)(arglist_ptr + 6)) {\n    if (*arglist_ptr != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist_ptr + 4) == 0) break;\n    demangled_value = extract_and_initialize_data_structure_0010b0fa(arg1,arg2,*(long *)(arglist_ptr + 4),0,buffer);\n    if (demangled_value == 0) {\n      if (buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *failure_flag_ptr = 1;\n    }\n    else {\n      updated_count = (int)value_count + 1;\n      if ((uint)allocated_count <= updated_count) {\n        allocated_count = (ulong)((uint)allocated_count + 10);\n        result_ptr = (void *)xrealloc(result_ptr,allocated_count << 3);\n      }\n      *(long *)((long)result_ptr + value_count * 8) = demangled_value;\n      value_count = (ulong)updated_count;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + value_count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "xrealloc",
                "fprintf",
                "free",
                "dcgettext",
                "FUN_0010b0fa",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "initialize_section_data_0011a2e0",
                "param_1": "sectionData",
                "param_2": "binaryData",
                "uVar1": "sectionSize",
                "uVar2": "sectionName",
                "lVar3": "sectionDataPtr",
                "lVar4": "sectionPtr"
            },
            "code": "\nlong initializeSectionData_0011a2e0(long sectionData,long binaryData)\n\n{\n  undefined8 sectionSize;\n  undefined8 sectionName;\n  long sectionDataPtr;\n  long sectionPtr;\n  \n  sectionDataPtr = (**(code **)(*(long *)(binaryData + 8) + 0x208))(binaryData);\n  sectionPtr = *(long *)(sectionData + 0x20);\n  *(undefined8 *)(sectionDataPtr + 8) = *(undefined8 *)(sectionData + 8);\n  *(undefined8 *)(sectionDataPtr + 0x10) = *(undefined8 *)(sectionData + 0x10);\n  *(undefined4 *)(sectionDataPtr + 0x18) = *(undefined4 *)(sectionData + 0x18);\n  if (sectionPtr == 0) {\n    sectionPtr = 0x128598;\n  }\n  else {\n    sectionPtr = bfd_get_section_by_name(binaryData);\n    if (sectionPtr == 0) {\n      sectionSize = *(undefined8 *)(sectionData + 0x20);\n      sectionName = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit_00119dd0(sectionName,sectionSize);\n    }\n  }\n  *(long *)(sectionDataPtr + 0x20) = sectionPtr;\n  return sectionDataPtr;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_section_data_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_string",
                "uVar1": "result",
                "sVar2": "string_length",
                "__s": "processed_string"
            },
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 input_1,undefined8 input_2,char *input_string)\n\n{\n  undefined4 result;\n  size_t string_length;\n  char *processed_string;\n  \n  string_length = strlen(input_string);\n  processed_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(processed_string,\"%s:c=f%g\",input_1,input_string);\n  result = process_string_0010e2f0(input_2,0x80,0,0,processed_string);\n  if ((char)result != '\\0') {\n    free(processed_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "find_section_flags_00104ad6",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "sectionName",
                "unaff_RBP": "str",
                "__s": "ptr",
                "sVar4": "len",
                "iVar1": "cmpResult",
                "iVar5": "strLen",
                "unaff_retaddr": "returnAddress",
                "auVar6": "result",
                "pcVar3": "commaIndex"
            },
            "code": "\nundefined  [16] findSectionFlags_00104ad6(void)\n\n{\n  int cmpResult;\n  undefined8 uVar2;\n  char *commaIndex;\n  char *str;\n  char *ptr;\n  size_t len;\n  int strLen;\n  uint sectionFlags;\n  char *sectionName;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    ptr = str;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (ptr == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaIndex = strchr(ptr,0x2c);\n              if (commaIndex == (char *)0x0) {\n                len = strlen(ptr);\n                strLen = (int)len;\n                str = (char *)0x0;\n              }\n              else {\n                str = commaIndex + 1;\n                strLen = (int)commaIndex - (int)ptr;\n              }\n              len = (size_t)strLen;\n              cmpResult = strncasecmp(sectionName,ptr,len);\n              if (cmpResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              ptr = str;\n            }\n            cmpResult = strncasecmp(\"load\",ptr,len);\n            if (cmpResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            ptr = str;\n          }\n          cmpResult = strncasecmp(\"noload\",ptr,len);\n          if (cmpResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          ptr = str;\n        }\n        cmpResult = strncasecmp(\"readonly\",ptr,len);\n        if (cmpResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        ptr = str;\n      }\n      cmpResult = strncasecmp(\"debug\",ptr,len);\n      if (cmpResult == 0) break;\n      cmpResult = strncasecmp(\"code\",ptr,len);\n      if (cmpResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        ptr = str;\n      }\n      else {\n        cmpResult = strncasecmp(\"data\",ptr,len);\n        if (cmpResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          ptr = str;\n        }\n        else {\n          cmpResult = strncasecmp(\"rom\",ptr,len);\n          if (cmpResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            ptr = str;\n          }\n          else {\n            cmpResult = strncasecmp(\"exclude\",ptr,len);\n            if (cmpResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              ptr = str;\n            }\n            else {\n              cmpResult = strncasecmp(\"share\",ptr,len);\n              if (cmpResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                ptr = str;\n              }\n              else {\n                cmpResult = strncasecmp(\"contents\",ptr,len);\n                if (cmpResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  ptr = str;\n                }\n                else {\n                  cmpResult = strncasecmp(\"merge\",ptr,len);\n                  if (cmpResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    ptr = str;\n                  }\n                  else {\n                    cmpResult = strncasecmp(\"strings\",ptr,len);\n                    if (cmpResult != 0) {\n                      commaIndex = (char *)xmalloc((long)(strLen + 1));\n                      strncpy(commaIndex,ptr,len);\n                      commaIndex[len] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(uVar2,commaIndex);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    ptr = str;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strncpy",
                "strlen",
                "dcgettext",
                "strchr",
                "xmalloc",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "find_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "value",
                "auVar1": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] check_RAX_value_001087da(void)\n\n{\n  long value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = value == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f",
                "FUN_001125fa"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "output",
                "lVar1": "currentCompilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "pointer1",
                "lVar5": "var1",
                "puVar6": "pointer2",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 param3,undefined8 output)\n\n{\n  long currentCompilationUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *pointer1;\n  long var1;\n  undefined8 *pointer2;\n  undefined result [16];\n  \n  currentCompilationUnit = *(long *)(compilationUnit + 8);\n  if (currentCompilationUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (var1 = *(long *)(compilationUnit + 0x20); var1 != 0; var1 = *(long *)(var1 + 8)) {\n      if (*(undefined8 **)(var1 + 0x28) != (undefined8 *)0x0) {\n        for (pointer1 = (undefined8 *)**(undefined8 **)(var1 + 0x28); pointer1 != (undefined8 *)0x0;\n            pointer1 = (undefined8 *)*pointer1) {\n          if (*(int *)((long)pointer1 + 0x14) == 0) {\n            if (*(char *)pointer1[1] == *typeName) {\n              comparisonResult = strcmp((char *)pointer1[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (pointer2 = *(undefined8 **)(currentCompilationUnit + 8); pointer2 != (undefined8 *)0x0;\n        pointer2 = (undefined8 *)*pointer2) {\n      if ((undefined8 *)pointer2[2] != (undefined8 *)0x0) {\n        for (pointer1 = *(undefined8 **)(undefined8 *)pointer2[2]; pointer1 != (undefined8 *)0x0;\n            pointer1 = (undefined8 *)*pointer1) {\n          if (*(int *)((long)pointer1 + 0x14) == 0) {\n            if (*(char *)pointer1[1] == *typeName) {\n              comparisonResult = strcmp((char *)pointer1[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  result._8_8_ = output;\n  result._0_8_ = errorMessage;\n  return result;\nLAB_00109216:\n  errorMessage = pointer1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_logic_0010829e",
                "unaff_EBP": "inputValue",
                "uVar1": "returnValue"
            },
            "code": "\nundefined8 processLogic_0010829e(void)\n\n{\n  undefined8 returnValue;\n  int inputValue;\n  \n  if (inputValue == 5) {\n    returnValue = check_last_four_chars_00113ede();\n    return returnValue;\n  }\n  if ((inputValue != 4) && (inputValue == 6)) {\n    returnValue = verify_and_toggle_last_four_bits_001082b3();\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "process_logic_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "in_RAX": "binaryFilePath",
                "lVar3": "convertedValue",
                "iVar1": "defaultLength",
                "iVar9": "currentLength",
                "uStack000000000000000c": "indentation",
                "param_7": "maxLineLength",
                "unaff_R15D": "lineCount",
                "uVar10": "strLength",
                "uVar11": "archIndex",
                "param_11": "paramStruct",
                "param_13": "paramList"
            },
            "code": "\n\n\nvoid printBinaryInfo_00104943(void)\n\n{\n  int defaultLength;\n  int iVar2;\n  char *binaryFilePath;\n  long convertedValue;\n  size_t sVar4;\n  char *pcVar5;\n  undefined8 uVar6;\n  int iVar7;\n  long lVar8;\n  int currentLength;\n  uint lineCount;\n  ulong strLength;\n  uint archIndex;\n  int maxLineLength;\n  uint indentation;\n  undefined8 paramStruct;\n  long paramList;\n  \n  convertedValue = strtol(binaryFilePath,(char **)0x0,10);\n  defaultLength = (int)convertedValue;\n  currentLength = maxLineLength;\n  indentation = lineCount;\n  if (defaultLength == 0) {\n    defaultLength = 0x50;\n  }\n  do {\n    maxLineLength = currentLength;\n    if (paramStruct._4_4_ <= maxLineLength) {\n      return;\n    }\n    lVar8 = (long)maxLineLength;\n    iVar7 = (defaultLength - indentation) + -1;\n    convertedValue = lVar8;\n    do {\n      currentLength = (int)convertedValue;\n      if (paramStruct._4_4_ <= currentLength) break;\n      sVar4 = strlen(*(char **)(paramList + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      iVar7 = (iVar7 - (int)sVar4) + -1;\n    } while (-1 < iVar7);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (convertedValue = lVar8 * 0x60; ((ulong)(uint)(currentLength - maxLineLength) + lVar8) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(paramList + convertedValue));\n    }\n    iVar7 = 2;\n    putc(10,_stdout);\n    do {\n      pcVar5 = (char *)bfd_printable_arch_mach(iVar7,0);\n      iVar2 = strcmp(pcVar5,\"UNKNOWN!\");\n      if (iVar2 != 0) {\n        uVar6 = bfd_printable_arch_mach(iVar7,0);\n        printf(\"%*s \",(ulong)indentation,uVar6);\n        archIndex = iVar7 - 2;\n        convertedValue = lVar8 * 0x60;\n        iVar2 = maxLineLength;\n        while (currentLength != iVar2) {\n          pcVar5 = *(char **)(paramList + convertedValue);\n          if (*(char *)((long)(char **)(paramList + convertedValue) + (ulong)archIndex + 8) == '\\0') {\n            sVar4 = strlen(pcVar5);\n            for (strLength = sVar4 & 0xffffffff; (int)strLength != 0; strLength = (ulong)((int)strLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(pcVar5,_stdout);\n          }\n          iVar2 = iVar2 + 1;\n          if (currentLength != iVar2) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      iVar7 = iVar7 + 1;\n    } while (iVar7 != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "strlen",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_binary_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_data_structure_00113e23",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "dataStructure",
                "puVar2": "dataPointer"
            },
            "code": "\nlong createDataStructure_00113e23(undefined8 value1,undefined8 value2)\n\n{\n  long dataStructure;\n  undefined8 *dataPointer;\n  \n  dataStructure = initialize_data_structure_00112904(1,0);\n  if (dataStructure != 0) {\n    dataPointer = (undefined8 *)xmalloc(0x10);\n    *dataPointer = value1;\n    dataPointer[1] = value2;\n    *(undefined8 **)(dataStructure + 0x10) = dataPointer;\n  }\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_error_message_00108fb9",
                "param_1": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_00108fb9(undefined8 message)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "print_error_message_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input_ptr",
                "param_2": "output_num",
                "pbVar2": "current_ptr",
                "pbVar3": "next_ptr",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output_num)\n\n{\n  int iVar1;\n  byte *current_ptr;\n  byte *next_ptr;\n  ulong result;\n  \n  current_ptr = *input_ptr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_ptr * 2] & 4) != 0) {\n    next_ptr = current_ptr + 1;\n    iVar1 = (char)*current_ptr + -0x30;\n    *output_num = iVar1;\n    *input_ptr = next_ptr;\n    if (((&_sch_istable)[(ulong)current_ptr[1] * 2] & 4) != 0) {\n      do {\n        current_ptr = next_ptr;\n        iVar1 = iVar1 * 10 + -0x30 + (int)(char)*current_ptr;\n        next_ptr = current_ptr + 1;\n      } while (((&_sch_istable)[(ulong)current_ptr[1] * 2] & 4) != 0);\n      if (current_ptr[1] == 0x5f) {\n        next_ptr = current_ptr + 2;\n        *input_ptr = next_ptr;\n        *output_num = iVar1;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_ptr >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "process_file_00108072",
                "unaff_RBX": "parameters",
                "unaff_RBP": "basePointer",
                "unaff_R12": "filePointer",
                "unaff_R14B": "isReversed",
                "unaff_R15": "result",
                "bVar1": "byteVar",
                "uVar2": "undefinedVar",
                "cVar3": "charVar",
                "uVar4": "uintVar",
                "lVar5": "errorMessage",
                "lVar6": "fileResult",
                "lVar7": "fileSize",
                "lVar8": "fileOffset"
            },
            "code": "\n\n\nvoid processFile_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 undefinedVar;\n  char charVar;\n  uint uintVar;\n  long errorMessage;\n  long fileResult;\n  long fileSize;\n  undefined8 *parameters;\n  long basePointer;\n  long filePointer;\n  long fileOffset;\n  char isReversed;\n  long result;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  fileOffset = parameters[6];\n  fileResult = process_files_00114190(*parameters,0,0x18);\n  if (fileResult == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    undefinedVar = *parameters;\n    fileOffset = fileOffset + _DAT_00127990;\n    *(long *)(result + 0x30) = fileOffset;\n    *(long *)(result + 0x38) = fileOffset;\n    fileOffset = parameters[7];\n    fileResult = process_files_00114190(undefinedVar,0,0x60);\n    if (fileResult == 0) goto LAB_00115695;\nLAB_00115860:\n    fileSize = *(long *)(fileResult + 0x20);\n    if ((*(byte *)(fileResult + 0x14) & 0x40) != 0) {\n      fileSize = fileSize + fileOffset;\n    }\n    *(long *)(result + 0x38) = fileSize;\n    fileOffset = process_files_00114190(*parameters,0,0x200);\n    if (fileOffset != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)parameters + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byteVar = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    fileSize = *(long *)(fileResult + 0x18);\n    if ((*(byte *)(fileResult + 0x14) & 8) == 0) {\n      fileSize = fileSize + fileOffset;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    undefinedVar = *parameters;\n    *(long *)(result + 0x30) = fileSize;\n    *(long *)(result + 0x38) = fileSize;\n    fileOffset = parameters[7];\n    fileResult = process_files_00114190(undefinedVar,0,0x60);\n    if (fileResult != 0) goto LAB_00115860;\nLAB_00115695:\n    undefinedVar = *parameters;\n    *(long *)(result + 0x38) = fileOffset + _DAT_00127990;\n    fileOffset = process_files_00114190(undefinedVar,0,0x200);\n    if (fileOffset == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(fileOffset + 0x2c);\n    if (0x3e < uintVar) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result + 0x7c) = uintVar;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byteVar = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    fileOffset = parameters[0x1a];\n    fileResult = get_matching_value_00115d00(fileOffset,parameters[0x1c]);\n    if ((fileResult != 0) &&\n       (fileSize = *(long *)(filePointer + 8), *(uint *)(fileResult + 0x18) = *(uint *)(fileResult + 0x18) | 0x20,\n       *(int *)(fileSize + 8) == 5)) {\n      *(long *)(fileOffset + 0xb0) = fileResult;\n      charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charVar == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charVar == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (isReversed != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "dcgettext",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "process_file_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "dataPtr",
                "param_2": "flag",
                "param_3": "var1",
                "param_4": "var2",
                "cVar1": "char1",
                "__s": "extractedString",
                "sVar2": "stringLength",
                "__s_00": "newString",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long dataPtr,char flag,undefined8 var1,undefined8 var2)\n\n{\n  char char1;\n  char *extractedString;\n  size_t stringLength;\n  char *newString;\n  long counter;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  extractedString = (char *)extract_and_free_pointer_00109b2f();\n  stringLength = strlen(extractedString);\n  newString = (char *)xmalloc(stringLength + 0x1e);\n  if (flag == '\\0') {\n    *newString = '\\0';\n    counter = 0;\n    flag = char1;\n  }\n  else {\n    counter = *(long *)(dataPtr + 0x68);\n    *(long *)(dataPtr + 0x68) = counter + 1;\n    sprintf(newString,\"%ld=@S;\",counter);\n  }\n  stringLength = strlen(newString);\n  sprintf(newString + stringLength,\"S%s\",extractedString);\n  free(extractedString);\n  result._0_4_ = initialize_data_struct_00109b52(dataPtr,newString,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(newString);\n  }\n  result._8_8_ = var2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_and_process_values_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "param_5": "param3",
                "param_6": "param4",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined updateAndProcessValues_0010ec73(long *data,long value,undefined8 param1,undefined8 param2,\n                      undefined8 param3,undefined8 param4)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = process_string_0010e2f0(data,0xc0,0,data[0x41],0,param4,param2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_and_process_values_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endiannessFlag",
                "dcgettext": "printEndianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endiannessFlag)\n\n{\n  if (endiannessFlag == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessFlag == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "fileSize",
                "param_5": "preserveTimestamp",
                "param_6": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMessage",
                "uVar4": "errorStr",
                "uVar5": "errorCodeValue",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 fileSize,char preserveTimestamp,\n            undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errnoPtr;\n  char *errorMessage;\n  undefined8 errorStr;\n  ulong errorCodeValue;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    errorCodeValue = 0;\n  }\n  else {\n    copyResult = copy_file_contents_00115a90(filePermissions,destinationFilePath,fileSize);\n    errorCodeValue = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPtr = __errno_location();\n      errorMessage = strerror(*errnoPtr);\n      errorStr = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(errorStr,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  if (preserveTimestamp != '\\0') {\n    set_time_0011a350(destinationFilePath,fileSize);\n  }\n  returnValue._8_8_ = errorCode;\n  returnValue._0_8_ = errorCodeValue;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "process_data_0010adf2"
            },
            "code": "\nvoid process_data_0010adf2(void)\n\n{\n  process_data_0010adf2_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "add_entry_and_update_0010d7d4",
                "param_1": "entryId",
                "param_2": "data",
                "param_3": "existingEntries",
                "param_4": "entryCount",
                "param_5": "maxEntryCount",
                "uVar1": "startAddress",
                "cVar2": "isSuccessful",
                "uVar3": "resizeResult",
                "lVar4": "tempAddress",
                "plVar5": "targetEntries",
                "uVar6": "newEntryCount",
                "local_40": "updatedEntry"
            },
            "code": "\nundefined4\naddEntryAndUpdate_0010d7d4(undefined8 entryId,undefined8 *data,long *existingEntries,uint *entryCount,uint *maxEntryCount)\n\n{\n  undefined8 startAddress;\n  char isSuccessful;\n  undefined4 resizeResult;\n  long tempAddress;\n  long *targetEntries;\n  uint newEntryCount;\n  long updatedEntry [2];\n  \n  startAddress = *data;\n  targetEntries = updatedEntry;\n  if (existingEntries == (long *)0x0) {\n    targetEntries = (long *)0x0;\n  }\n  isSuccessful = decode_binary_0010c95e(entryId,data,targetEntries);\n  if ((isSuccessful != '\\0') &&\n     (resizeResult = resize_and_add_entry_00109be3(entryId,startAddress,(int)*data - (int)startAddress), (char)resizeResult != '\\0')) {\n    if (existingEntries == (long *)0x0) {\n      return resizeResult;\n    }\n    if (updatedEntry[0] != 0) {\n      if (*maxEntryCount <= *entryCount + 1) {\n        newEntryCount = *maxEntryCount + 10;\n        tempAddress = *existingEntries;\n        *maxEntryCount = newEntryCount;\n        tempAddress = xrealloc(tempAddress,(ulong)newEntryCount << 3);\n        *existingEntries = tempAddress;\n      }\n      newEntryCount = *entryCount;\n      *(long *)(*existingEntries + (ulong)newEntryCount * 8) = updatedEntry[0];\n      *entryCount = newEntryCount + 1;\n      return resizeResult;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "xrealloc",
                "FUN_00109be3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "add_entry_and_update_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = resize_and_add_entry_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "param_1": "filePath",
                "iVar1": "errorCode",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "strErrorMessage",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong getFileInformation_00113f50(char *filePath)\n\n{\n  int errorCode;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *strErrorMessage;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    errorCode = stat(filePath,&fileStat);\n    if (errorCode < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(errorMessage,filePath);\n      }\n      else {\n        strErrorMessage = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(errorMessage,filePath,strErrorMessage);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "stat",
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "get_file_information_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_default_value_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "get_default_value_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "data",
                "__format": "formatMessage",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 data;\n  char *formatMessage;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  data = DAT_001275e0;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMessage,data);\n  for (currentFormatString = formatStrings; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fflush",
                "free",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "reverse_and_improve_0011378f",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "array_size",
                "param_4": "hash_table",
                "param_5": "string_array",
                "param_6": "result",
                "auVar1": "temp_var1",
                "cVar2": "char_result",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "dest_pointer",
                "sVar6": "string_length",
                "lVar7": "loop_variable",
                "puVar8": "temp_pointer",
                "puVar9": "array_pointer",
                "__dest": "destination",
                "puVar10": "input_pointer",
                "plVar11": "long_pointer",
                "bVar12": "byte_variable",
                "local_258": "local_input_array",
                "local_250": "local_array_size",
                "local_248": "local_var1",
                "uStack_244": "stack_var1",
                "uStack_240": "stack_var2",
                "uStack_23c": "stack_var3",
                "local_238": "local_temp",
                "local_228": "local_var2",
                "local_220": "local_hash_table",
                "local_1f8": "local_var3",
                "local_1f0": "local_var4",
                "local_1e8": "local_array",
                "local_a0": "local_temp2",
                "local_78": "local_var5",
                "uStack_70": "stack_var4",
                "local_68": "local_var6",
                "local_60": "local_var7",
                "local_58": "local_var8",
                "uStack_54": "stack_var5",
                "uStack_50": "stack_var6",
                "uStack_4c": "stack_var7"
            },
            "code": "\nundefined4\nreverse_and_improve_0011378f(undefined8 *input_array,undefined8 *output_array,long *array_size,undefined8 *hash_table,\n            undefined8 *string_array,undefined8 *result)\n\n{\n  undefined temp_var1 [16];\n  char char_result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *dest_pointer;\n  size_t string_length;\n  long loop_variable;\n  undefined8 *temp_pointer;\n  undefined4 *array_pointer;\n  char *destination;\n  undefined8 *input_pointer;\n  long *long_pointer;\n  byte byte_variable;\n  undefined8 *local_input_array;\n  long local_array_size;\n  undefined4 local_var1;\n  undefined4 stack_var1;\n  undefined4 stack_var2;\n  undefined4 stack_var3;\n  undefined local_temp [16];\n  undefined8 local_var2;\n  undefined local_hash_table [40];\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined4 local_array [82];\n  undefined local_temp2 [40];\n  undefined local_var5 [8];\n  undefined8 stack_var4;\n  undefined8 local_var6;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  undefined4 stack_var5;\n  undefined4 stack_var6;\n  undefined4 stack_var7;\n  \n  byte_variable = 0;\n  local_var1 = 0;\n  stack_var1 = 0;\n  stack_var2 = 500;\n  stack_var3 = 0;\n  local_input_array = input_array;\n  local_array_size = xmalloc(500);\n  local_var2 = 1;\n  local_temp = ZEXT816(0);\n  char_result = bfd_hash_table_init(local_hash_table,create_bfd_hash_0010bb52,0x30);\n  if ((char_result == '\\0') || (char_result = bfd_hash_table_init(local_temp2,create_bfd_hash_0010bb52,0x30), char_result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    local_var3 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_var5 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    array_pointer = local_array;\n    for (loop_variable = 0x52; loop_variable != 0; loop_variable = loop_variable + -1) {\n      *array_pointer = 0;\n      array_pointer = array_pointer + (ulong)byte_variable * -2 + 1;\n    }\n    local_var6 = 0;\n    local_var7 = 0;\n    local_var4 = 1;\n    local_var8 = 0;\n    stack_var5 = 0;\n    stack_var6 = 0xffffffff;\n    stack_var7 = 0xffffffff;\n    char_result = process_string_0010e2f0(&local_input_array,0,0,0,0);\n    temp_var1 = _local_var5;\n    if (char_result != '\\0') {\n      local_var5._4_4_ = stack_var1;\n      local_var5._0_4_ = local_var1;\n      stack_var4 = temp_var1._8_8_;\n      char_result = process_string_0010e2f0(&local_input_array,100,0,0,*input_array);\n      if (char_result != '\\0') {\n        *(int *)(output_array + 6) = *(int *)(output_array + 6) + 1;\n        output_array[10] = 0;\n        input_pointer = (undefined8 *)*output_array;\n        *(undefined4 *)(output_array + 7) = *(undefined4 *)((long)output_array + 0x34);\n        for (; input_pointer != (undefined8 *)0x0; input_pointer = (undefined8 *)*input_pointer) {\n          output_array[8] = input_pointer[2];\n          *(undefined4 *)(output_array + 9) = 0;\n          char_result = thunk_update_string_data_0010e439(&local_input_array,*(undefined8 *)(input_pointer[1] + 8));\n          if (char_result == '\\0') {\n            return 0;\n          }\n          long_pointer = (long *)input_pointer[1];\n          if (long_pointer != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)long_pointer[2] != (undefined8 *)0x0) {\n                for (temp_pointer = *(undefined8 **)(undefined8 *)long_pointer[2]; temp_pointer != (undefined8 *)0x0;\n                    temp_pointer = (undefined8 *)*temp_pointer) {\n                  char_result = process_data_001135a5(output_array,&local_input_array);\n                  if (char_result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              long_pointer = (long *)*long_pointer;\n              if (long_pointer == (long *)0x0) break;\n              char_result = update_string_data_0010e439(&local_input_array,long_pointer[1]);\n              if (char_result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          char_result = process_and_check_files_00112502(output_array,&local_input_array,0xffffffffffffffff);\n          if (char_result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(stack_var7,stack_var6) == -1) &&\n           (error_code = process_string_0010e2f0(&local_input_array,100,0,local_var6,0), (char)error_code != '\\0')) {\n          (**(code **)(input_array[1] + 0x50))(local_var2,local_array_size + 8);\n          *array_size = local_array_size;\n          *hash_table = CONCAT44(stack_var1,local_var1);\n          *result = local_var2;\n          dest_pointer = (undefined *)xmalloc();\n          *dest_pointer = 0;\n          destination = dest_pointer + 1;\n          *string_array = dest_pointer;\n          for (loop_variable = local_temp._0_8_; loop_variable != 0; loop_variable = *(long *)(loop_variable + 0x18)) {\n            strcpy(destination,*(char **)(loop_variable + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010e439",
                "thunk_FUN_0010e439",
                "bfd_errmsg",
                "bfd_hash_table_init",
                "strlen",
                "xmalloc",
                "FUN_0010bb52",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00112502",
                "strcpy",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,create_bfd_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,create_bfd_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_update_string_data_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = update_string_data_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_and_check_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "ptrErrno",
                "uVar2": "result",
                "dcgettext": "getLocalizedMessage",
                "print_error_message_00119ed0": "printErrorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *ptrErrno;\n  undefined8 result;\n  \n  ptrErrno = __errno_location();\n  if (*ptrErrno == 2) {\n    result = dcgettext(0,\"\\'%s\\': No such file\",5);\n    printErrorMessage(result);\n  }\n  else {\n    strerror(*ptrErrno);\n    result = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    printErrorMessage(result);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data_pointer",
                "process_data_00109ed3": "process_data_internal"
            },
            "code": "\nvoid process_data_0010a0a0(long data_pointer)\n\n{\n  process_data_0010a0a0_internal(data_pointer,0x26,4,data_pointer + 0x198,data_pointer + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "value1",
                "param_11": "value2",
                "param_12": "value3",
                "param_13": "value4",
                "param_14": "value5",
                "in_AL": "bool_condition",
                "local_d8": "bufferSize",
                "local_d4": "copySize",
                "local_d0": "bufferAddress",
                "local_c8": "localBuffer",
                "local_b8": "buffer",
                "local_b0": "value1_copy",
                "local_a8": "value2_copy",
                "local_a0": "value3_copy",
                "local_98": "value4_copy",
                "local_90": "value5_copy",
                "local_88": "errorCode_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\nvoid print_error_message_00119ed0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 value1,undefined8 value2,undefined8 value3,\n                 undefined8 value4,undefined8 value5)\n\n{\n  char bool_condition;\n  undefined4 bufferSize;\n  undefined4 copySize;\n  undefined *bufferAddress;\n  undefined *localBuffer;\n  undefined buffer [8];\n  undefined8 value1_copy;\n  undefined8 value2_copy;\n  undefined8 value3_copy;\n  undefined8 value4_copy;\n  undefined8 value5_copy;\n  undefined4 errorCode_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (bool_condition != '\\0') {\n    errorCode_copy = errorCode;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  bufferAddress = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = buffer;\n  copySize = 0x30;\n  value1_copy = value1;\n  value2_copy = value2;\n  value3_copy = value3;\n  value4_copy = value4;\n  value5_copy = value5;\n  print_error_message_00119ed0_00119e70(errorMessage,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_0010554f",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010e07c",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001163d0",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00108375",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "improve_and_process_data_00112c1f",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "type_info",
                "param_4": "additional_data",
                "plVar1": "pointer1",
                "lVar2": "variable1",
                "puVar3": "pointer2",
                "puVar4": "pointer3",
                "cVar5": "flag",
                "piVar6": "pointer4",
                "uVar7": "result",
                "uVar8": "variable2",
                "iVar9": "value",
                "uVar10": "variable3",
                "uVar11": "variable4",
                "uVar12": "value2",
                "uVar13": "value3",
                "bVar14": "boolean_flag",
                "local_3c": "local_variable"
            },
            "code": "\n\n\nundefined8 improve_and_process_data_00112c1f(ulong input_data,undefined8 output_data,int *type_info,long additional_data)\n\n{\n  long *pointer1;\n  long variable1;\n  undefined8 *pointer2;\n  undefined8 *pointer3;\n  char flag;\n  int *pointer4;\n  undefined8 result;\n  undefined8 variable2;\n  int value;\n  undefined4 variable3;\n  undefined8 variable4;\n  ulong value2;\n  uint value3;\n  bool boolean_flag;\n  uint local_variable;\n  \n  value2 = input_data;\nLAB_00112c39:\n  if (type_info != (int *)0x0) {\n    value = *type_info;\n    if (value - 0x16U < 2) {\n      do {\n        pointer1 = *(long **)(type_info + 4);\n        value3 = *(uint *)(input_data + 0x30);\n        value2 = (ulong)value3;\n        variable1 = *pointer1;\n        if (*(uint *)(variable1 + 0x10) == value3) {\n          if (value == 0x16) {\n            result = lookup_and_initialize_data_struct_0010bba1(output_data,*(undefined8 *)(variable1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          pointer4 = (int *)find_real_type_00112b6e(type_info,0);\n          if (pointer4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*pointer4 - 7U < 4) && (*(long *)(pointer4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(pointer4 + 4) + 0xc) <= *(uint *)(input_data + 0x38)) &&\n               (flag = process_debug_class_id_0010c7a0(input_data,*(undefined8 *)(**(long **)(type_info + 4) + 8),pointer4),\n               flag == '\\0')) {\n              return 0;\n            }\n            value3 = *(uint *)(*(long *)(pointer4 + 4) + 0xc);\n          }\n          else {\n            value3 = 0;\n          }\n          value = *pointer4;\n          result = *(undefined8 *)(**(long **)(type_info + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (value == 0x17) {\n          if (variable1 != additional_data) goto LAB_00112c94;\n          *(uint *)(additional_data + 0x10) = value3;\n          additional_data = *pointer1;\n          type_info = (int *)pointer1[1];\n          goto LAB_00112c39;\n        }\n        if (additional_data != 0) {\n          *(uint *)(additional_data + 0x10) = value3;\n        }\n        type_info = (int *)pointer1[1];\n        if (type_info == (int *)0x0) goto LAB_00112dd6;\n        value = *type_info;\n        additional_data = 0;\n      } while (value - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (additional_data == 0) goto LAB_00112d74;\n      *(undefined4 *)(additional_data + 0x10) = *(undefined4 *)(input_data + 0x30);\n      if (*(int *)(additional_data + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(additional_data + 8);\n    }\n    switch(value) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = initialize_or_increment_data_struct_00109dfe(output_data);\n      return result;\n    case 3:\n      result = initialize_data_structure_0010b800(output_data,type_info[1],*(undefined *)(type_info + 4));\n      return result;\n    case 4:\n      result = initialize_data_structure_0010b948(output_data,type_info[1]);\n      return result;\n    case 5:\n      result = update_data_and_initialize_00109e76(output_data,type_info[1]);\n      return result;\n    case 6:\n      result = initialize_data_00109d3e(output_data,type_info[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(type_info + 4) != 0) {\n        if ((*(uint *)(*(long *)(type_info + 4) + 0xc) <= *(uint *)(input_data + 0x38)) &&\n           (flag = process_debug_class_id_0010c7a0(input_data,result,type_info), flag == '\\0')) {\n          return 0;\n        }\n        variable1 = *(long *)(type_info + 4);\n        if (*(int *)(input_data + 0x30) == *(int *)(variable1 + 8)) {\n          value3 = *(uint *)(variable1 + 0xc);\n          if (value3 <= *(uint *)(input_data + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          value = *type_info;\nLAB_00112ed2:\n          result = initialize_and_resize_array_00109d5c(output_data,result,value3,value);\n          return result;\n        }\n        *(int *)(variable1 + 8) = *(int *)(input_data + 0x30);\n      }\n      variable3 = 0;\n      if (*(long *)(type_info + 4) != 0) {\n        variable3 = *(undefined4 *)(*(long *)(type_info + 4) + 0xc);\n      }\n      flag = process_data_0010a69a(output_data,result,variable3,*type_info == 7,type_info[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type_info + 4) != (long *)0x0) && (value2 = 0, **(long **)(type_info + 4) != 0)) {\n        while( true ) {\n          pointer3 = *(undefined8 **)(**(long **)(type_info + 4) + value2 * 8);\n          if (pointer3 == (undefined8 *)0x0) break;\n          flag = improve_and_process_data_00112c1f(input_data,output_data,pointer3[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = create_struct_field_string_0010ba08(output_data,*pointer3,*(undefined4 *)(pointer3 + 3),\n                               *(undefined4 *)((long)pointer3 + 0x1c),*(undefined4 *)(pointer3 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          value2 = (ulong)((int)value2 + 1);\n        }\n      }\n      result = extract_and_initialize_data_0010a77a(output_data);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(type_info + 4) == 0) {\n        value3 = 0;\n        pointer4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type_info + 4) + 0xc) <= *(uint *)(input_data + 0x38)) &&\n           (value2 = input_data, flag = process_debug_class_id_0010c7a0(input_data,result,type_info), flag == '\\0')) {\n          return 0;\n        }\n        variable1 = *(long *)(type_info + 4);\n        value3 = *(uint *)(variable1 + 0xc);\n        if (*(int *)(input_data + 0x30) == *(int *)(variable1 + 8)) {\n          if (value3 <= *(uint *)(input_data + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          value = *type_info;\n          goto LAB_00112ed2;\n        }\n        pointer4 = *(int **)(variable1 + 0x20);\n        *(int *)(variable1 + 8) = *(int *)(input_data + 0x30);\n        if (((pointer4 != (int *)0x0) && (type_info != pointer4)) &&\n           (value2 = input_data, flag = improve_and_process_data_00112c1f(input_data,output_data,pointer4,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = process_and_update_data_0010a83e(output_data,result,value3,*type_info == 9,type_info[1],pointer4 != (int *)0x0,\n                           type_info == pointer4,value2);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type_info + 4) != (long *)0x0) {\n        value3 = 0;\n        if (**(long **)(type_info + 4) != 0) {\n          while (pointer3 = *(undefined8 **)(**(long **)(type_info + 4) + (ulong)value3 * 8),\n                pointer3 != (undefined8 *)0x0) {\n            flag = improve_and_process_data_00112c1f(input_data,output_data,pointer3[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointer3 + 0x14) == '\\0') {\n              flag = create_struct_field_string_0010ba08(output_data,*pointer3,*(undefined4 *)(pointer3 + 3));\n            }\n            else {\n              flag = generate_connection_string_0010a94e(output_data,*pointer3,pointer3[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            value3 = value3 + 1;\n          }\n        }\n        value3 = 0;\n        if (*(long *)(*(long *)(type_info + 4) + 0x10) != 0) {\n          while (pointer3 = *(undefined8 **)\n                           (*(long *)(*(long *)(type_info + 4) + 0x10) + (ulong)value3 * 8),\n                pointer3 != (undefined8 *)0x0) {\n            flag = improve_and_process_data_00112c1f(input_data,output_data,*pointer3,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = process_data_0010aa53(output_data,*(undefined4 *)(pointer3 + 1),\n                                 *(undefined *)((long)pointer3 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            value3 = value3 + 1;\n          }\n        }\n        local_variable = 0;\n        if (*(long *)(*(long *)(type_info + 4) + 0x18) != 0) {\n          while (pointer3 = *(undefined8 **)\n                           (*(long *)(*(long *)(type_info + 4) + 0x18) + (ulong)local_variable * 8),\n                pointer3 != (undefined8 *)0x0) {\n            flag = add_string_to_record_0010ab4d(output_data,*pointer3);\n            if (flag == '\\0') {\n              return 0;\n            }\n            value3 = 0;\n            while (pointer2 = *(undefined8 **)(pointer3[1] + (ulong)value3 * 8),\n                  pointer2 != (undefined8 *)0x0) {\n              if ((pointer2[4] != 0) &&\n                 (flag = improve_and_process_data_00112c1f(input_data,output_data,pointer2[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = improve_and_process_data_00112c1f(input_data,output_data,pointer2[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (pointer2[3] == -1) {\n                flag = process_data_0010adf2(output_data,*pointer2,*(undefined4 *)(pointer2 + 2),\n                                     *(undefined *)((long)pointer2 + 0x14),\n                                     *(undefined *)((long)pointer2 + 0x15));\n              }\n              else {\n                flag = process_data_0010add5(output_data);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              value3 = value3 + 1;\n            }\n            flag = check_and_append_semicolon_00109bbb(output_data);\n            if (flag == '\\0') {\n              return 0;\n            }\n            local_variable = local_variable + 1;\n          }\n        }\n      }\n      result = merge_strings_0010ae0e(output_data);\n      return result;\n    case 0xb:\n      pointer3 = *(undefined8 **)(type_info + 4);\n      if (pointer3 == (undefined8 *)0x0) {\n        variable2 = 0;\n        variable4 = 0;\n      }\n      else {\n        variable2 = pointer3[1];\n        variable4 = *pointer3;\n      }\n      result = initialize_data_0010e453(output_data,result,variable4,variable2);\n      return result;\n    case 0xc:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,*(undefined8 *)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a083(output_data);\n      return result;\n    case 0xd:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,**(undefined8 **)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      value2 = 0;\n      if (*(long *)(*(long *)(type_info + 4) + 8) == 0) {\n        value2 = 0xffffffff;\n      }\n      else {\n        while (variable1 = *(long *)(*(long *)(*(long *)(type_info + 4) + 8) + value2 * 8), variable1 != 0) {\n          value2 = value2 + 1;\n          flag = improve_and_process_data_00112c1f(input_data,output_data,variable1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        value2 = value2 & 0xffffffff;\n      }\n      result = process_data_and_string_0010e5db(output_data,value2,*(undefined *)(*(long *)(type_info + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,*(undefined8 *)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0a0(output_data);\n      return result;\n    case 0xf:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,**(undefined8 **)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = construct_request_0010a0e9(output_data,*(undefined8 *)(*(long *)(type_info + 4) + 8),\n                           *(undefined8 *)(*(long *)(type_info + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,**(undefined8 **)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = improve_and_process_data_00112c1f(input_data,output_data,*(undefined8 *)(*(long *)(type_info + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      variable1 = *(long *)(type_info + 4);\n      result = initialize_data_0010a181(output_data,*(undefined8 *)(variable1 + 0x10),*(undefined8 *)(variable1 + 0x18),\n                           *(undefined *)(variable1 + 0x20));\n      return result;\n    case 0x11:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,**(undefined8 **)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a2b9(output_data,*(undefined *)(*(long *)(type_info + 4) + 8));\n      return result;\n    case 0x12:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,**(undefined8 **)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = improve_and_process_data_00112c1f(input_data,output_data,*(undefined8 *)(*(long *)(type_info + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = construct_and_initialize_data_0010a377(output_data);\n      return result;\n    case 0x13:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,**(undefined8 **)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      value2 = 0;\n      if (*(long *)(*(long *)(type_info + 4) + 0x10) == 0) {\n        value2 = 0xffffffff;\n      }\n      else {\n        while (variable1 = *(long *)(*(long *)(*(long *)(type_info + 4) + 0x10) + value2 * 8), variable1 != 0)\n        {\n          value2 = value2 + 1;\n          flag = improve_and_process_data_00112c1f(input_data,output_data,variable1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type_info + 4) + 8) != 0) &&\n         (flag = improve_and_process_data_00112c1f(input_data,output_data,*(long *)(*(long *)(type_info + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = format_data_0010a424(output_data,*(long *)(*(long *)(type_info + 4) + 8) != 0,value2 & 0xffffffff,\n                           *(undefined *)(*(long *)(type_info + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,*(undefined8 *)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(output_data);\n      return result;\n    case 0x15:\n      flag = improve_and_process_data_00112c1f(input_data,output_data,*(undefined8 *)(type_info + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0d3(output_data);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolean_flag = *(int **)**(undefined8 **)(type_info + 4) == type_info;\n  type_info = *(int **)**(undefined8 **)(type_info + 4);\n  if (boolean_flag) {\nLAB_00112dd6:\n    result = initialize_or_update_data_00109d97(output_data);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010adf2",
                "FUN_0010e5db",
                "abort",
                "FUN_0010a0e9",
                "FUN_00109d5c",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_0010a181",
                "fprintf",
                "dcgettext",
                "FUN_0010a0a0",
                "FUN_0010a083",
                "FUN_0010a424",
                "FUN_0010add5",
                "FUN_0010a0d3",
                "FUN_0010a377",
                "FUN_00112c1f",
                "FUN_00109dfe",
                "FUN_00112b6e",
                "FUN_0010a69a",
                "__assert_fail",
                "FUN_0010b800",
                "FUN_00109d3e",
                "FUN_0010bba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "improve_and_process_data_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "flag",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char flag;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "in_RAX": "result",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 result;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,source,message,result);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "iVar1": "arch",
                "uVar2": "archType",
                "uVar3": "fileName",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileArchitecture_00105828(void)\n\n{\n  int arch;\n  undefined4 archType;\n  undefined8 fileName;\n  undefined8 errorMessage;\n  \n  arch = bfd_get_arch();\n  if (arch == 0) {\n    fileName = get_modified_string_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,fileName);\n  }\n  else {\n    fileName = bfd_get_mach();\n    archType = bfd_get_arch();\n    fileName = bfd_printable_arch_mach(archType,fileName);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,fileName);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "file_path",
                "pcVar1": "temp_dir",
                "allocate_file_path_00114cf0": "allocate_file_path",
                "mkdtemp": "make_temp_directory"
            },
            "code": "\nchar * create_temporary_directory_0011a0e0(void)\n\n{\n  char *file_path;\n  char *temp_dir;\n  \n  file_path = (char *)allocate_file_path();\n  temp_dir = mkdtemp(file_path);\n  if (temp_dir == (char *)0x0) {\n    free(file_path);\n  }\n  return temp_dir;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "mkdtemp",
                "FUN_00114cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_struct_0010bba1",
                "param_1": "binary_data",
                "param_2": "hash_key",
                "lVar1": "lookup_result",
                "uVar2": "data_struct_ptr"
            },
            "code": "\nundefined8 lookup_and_initialize_data_struct_0010bba1(long binary_data,undefined8 hash_key)\n\n{\n  long lookup_result;\n  undefined8 data_struct_ptr;\n  \n  lookup_result = bfd_hash_lookup(binary_data + 0x1b8,hash_key,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    data_struct_ptr = initialize_data_struct_00109cf4(binary_data,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return data_struct_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_initialize_data_struct_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_and_update_string_0010e6a8",
                "param_1": "param_pointer",
                "param_2": "string",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "extracted_string",
                "sVar3": "string_length1",
                "sVar4": "string_length2",
                "__s_00": "formatted_string",
                "lVar8": "counter",
                "uVar2": "error_code",
                "uVar1": "process_result",
                "lVar5": "hash_lookup_result",
                "uVar6": "error_message",
                "uVar7": "localized_error_message",
                "uVar9": "return_value",
                "auVar10": "result"
            },
            "code": "\nundefined  [16] process_and_update_string_0010e6a8(long param_pointer,char *string,undefined8 param3,undefined8 param4)\n\n{\n  uint process_result;\n  undefined4 error_code;\n  char *extracted_string;\n  size_t string_length1;\n  size_t string_length2;\n  char *formatted_string;\n  long hash_lookup_result;\n  undefined8 error_message;\n  undefined8 localized_error_message;\n  long counter;\n  ulong return_value;\n  undefined result [16];\n  \n  counter = *(long *)(*(long *)(param_pointer + 0x60) + 0x10);\n  error_code = *(undefined4 *)(*(long *)(param_pointer + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_pointer_00109b2f();\n  string_length1 = strlen(string);\n  string_length2 = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length1 + 0x14 + string_length2);\n  if (counter < 1) {\n    counter = *(long *)(param_pointer + 0x68);\n    *(long *)(param_pointer + 0x68) = counter + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",string,counter,extracted_string);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",string,extracted_string);\n  }\n  free(extracted_string);\n  process_result = process_string_0010e2f0(param_pointer,0x80,0,0,formatted_string);\n  return_value = (ulong)process_result;\n  if ((char)process_result != '\\0') {\n    free(formatted_string);\n    hash_lookup_result = bfd_hash_lookup(param_pointer + 0x1b8,string,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = counter;\n      *(undefined4 *)(hash_lookup_result + 0x28) = error_code;\n      goto LAB_0010e7b3;\n    }\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    localized_error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(localized_error_message,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  result._8_8_ = param4;\n  result._0_8_ = return_value;\n  return result;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "strlen",
                "free",
                "xmalloc",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_update_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "process_and_format_string_0010e7c2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "result",
                "__s": "extractedString",
                "sVar1": "input2Length",
                "sVar2": "extractedStringLength",
                "__s_00": "formattedString",
                "auVar3": "output"
            },
            "code": "\nundefined  [16] processAndFormatString_0010e7c2(undefined8 input1,char *input2,undefined8 input3,undefined8 result)\n\n{\n  char *extractedString;\n  size_t input2Length;\n  size_t extractedStringLength;\n  char *formattedString;\n  undefined output [16];\n  \n  extractedString = (char *)extract_and_free_pointer_00109b2f();\n  input2Length = strlen(input2);\n  extractedStringLength = strlen(extractedString);\n  formattedString = (char *)xmalloc(input2Length + 3 + extractedStringLength);\n  sprintf(formattedString,\"%s:T%s\",input2,extractedString);\n  free(extractedString);\n  output._0_4_ = process_string_0010e2f0(input1,0x80,0,0,formattedString);\n  output._4_4_ = 0;\n  if ((char)output._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  output._8_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_string_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "input_flag",
                "local_d8": "buffer_size",
                "local_d4": "local_variable_1",
                "local_d0": "local_variable_2",
                "local_c8": "local_variable_3",
                "local_b8": "local_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "local_param_1",
                "local_78": "local_param_2",
                "local_68": "local_param_3",
                "local_58": "local_param_4",
                "local_48": "local_param_5",
                "local_38": "local_param_6",
                "local_28": "local_param_7",
                "local_18": "local_param_8"
            },
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char input_flag;\n  undefined4 buffer_size;\n  undefined4 local_variable_1;\n  undefined *local_variable_2;\n  undefined *local_variable_3;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 local_param_5;\n  undefined4 local_param_6;\n  undefined4 local_param_7;\n  undefined4 local_param_8;\n  \n  if (input_flag != '\\0') {\n    local_param_1 = error_code;\n    local_param_2 = param_2;\n    local_param_3 = param_3;\n    local_param_4 = param_4;\n    local_param_5 = param_5;\n    local_param_6 = param_6;\n    local_param_7 = param_7;\n    local_param_8 = param_8;\n  }\n  local_variable_2 = &stack0x00000008;\n  buffer_size = 8;\n  local_variable_3 = local_buffer;\n  local_variable_1 = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_00119e70(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_001083de",
                "FUN_0010554f",
                "FUN_00104ad6",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114dc7",
                "FUN_0010827b",
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_0010da0b"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "pointerToErrorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleBfdError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *pointerToErrorCode;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnAddress;\n    }\n  }\n  print_bfd_error_0011a110(*pointerToErrorCode);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "decode_and_process_data_00116852",
                "in_RCX": "data_array",
                "in_R10": "iteration",
                "unaff_R14": "current_data",
                "unaff_R13": "end_of_data",
                "unaff_RBP": "original_data",
                "unaff_RBX": "original_data_len",
                "unaff_R15": "current_data_len",
                "param_10": "output_len",
                "param_11": "original_data_copy",
                "param_12": "output_data",
                "param_14": "original_data_copy_len",
                "sVar1": "size",
                "uVar4": "temp_var",
                "uVar5": "temp_var2",
                "uVar6": "temp_var3",
                "lVar7": "loop_var",
                "uVar8": "temp_var4",
                "bVar14": "bit_var",
                "pcVar2": "function_ptr",
                "iVar3": "comparison_result",
                "__ptr": "temp_ptr",
                "puVar9": "other_ptr",
                "cVar10": "char_var",
                "puVar11": "other_ptr2",
                "puVar12": "last_ptr",
                "psVar13": "other_data_ptr"
            },
            "code": "\nulong decode_and_process_data_00116852(void)\n\n{\n  size_t size;\n  code *function_ptr;\n  int comparison_result;\n  uint temp_var;\n  undefined *temp_ptr;\n  size_t *data_array;\n  ulong temp_var2;\n  ulong temp_var3;\n  long loop_var;\n  ulong temp_var4;\n  size_t original_data_len;\n  size_t *original_data;\n  undefined *other_ptr;\n  char char_var;\n  undefined *other_ptr2;\n  ulong iteration;\n  undefined *last_ptr;\n  size_t in_R11;\n  size_t *end_of_data;\n  size_t *current_data;\n  size_t current_data_len;\n  size_t *other_data_ptr;\n  byte bit_var;\n  size_t param_7;\n  size_t param_9;\n  ulong output_len;\n  size_t *original_data_copy;\n  undefined *output_data;\n  long param_13;\n  size_t original_data_copy_len;\n  \n  bit_var = 0;\ncode_r0x00116852:\n  temp_var = (int)iteration + 1;\n  if (0x10 < (int)iteration) goto LAB_001167f5;\nLAB_00116863:\n  current_data = current_data + -9;\n  do {\n    if (end_of_data <= current_data) {\n      size = current_data[2];\n      if (size == 0) goto LAB_00116863;\n      temp_var4 = (ulong)temp_var;\n      if ((*current_data == *original_data) &&\n         (comparison_result = memcmp((void *)current_data[3],(void *)original_data[3],*original_data), comparison_result == 0)) {\n        temp_var3 = current_data[7];\n        temp_var2 = current_data[8];\n        iteration = temp_var4 & 0xffffffff;\n        if (current_data_len == temp_var3) {\n          if (original_data_len != temp_var2) goto LAB_001167a6;\n          original_data[2] = 0;\n        }\n        else {\n          if (current_data_len < temp_var3) {\n            if (temp_var2 < current_data_len) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < temp_var2) || (current_data_len <= (temp_var2 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (original_data_len < current_data_len) {\n              if ((0xfffffffffffffff0 < original_data_len) ||\n                 (temp_var3 <= (original_data_len + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (original_data_len == temp_var2) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (original_data_len <= temp_var2) {\n              original_data[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (temp_var2 < current_data_len) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (size == 0x101)) goto code_r0x00116852;\n          if (temp_var2 <= original_data_len) {\n            temp_var2 = original_data_len;\n          }\n          if (temp_var3 < current_data_len) {\n            current_data_len = temp_var3;\n          }\n          current_data[8] = temp_var2;\n          current_data[7] = current_data_len;\n          original_data[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_data = original_data;\n        original_data = current_data + 9;\n        if (data_array <= original_data) {\n          qsort(original_data_copy,original_data_copy_len,0x48,compare_ulong_arrays_0011a250);\n          temp_ptr = (undefined *)xmalloc(output_len * 2);\n          param_7 = 0;\n          last_ptr = temp_ptr;\n          for (other_data_ptr = original_data_copy; other_data_ptr < data_array; other_data_ptr = other_data_ptr + 9) {\n            if (other_data_ptr[2] != 0) {\n              other_ptr2 = last_ptr + 4;\n              other_ptr = last_ptr + 0xc;\n              function_ptr = *(code **)(*(long *)(param_13 + 8) + 0x50);\n              if ((other_data_ptr[7] == param_9) && (other_data_ptr[8] == param_7)) {\n                (*function_ptr)(*other_data_ptr,last_ptr);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(0,other_ptr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(other_data_ptr[2],last_ptr + 8);\n                temp_var3 = other_data_ptr[6];\n                temp_var4 = *other_data_ptr;\n                last_ptr = (undefined *)other_data_ptr[3];\n                other_ptr2 = other_ptr;\n                for (temp_var2 = temp_var4; temp_var2 != 0; temp_var2 = temp_var2 - 1) {\n                  *other_ptr2 = *last_ptr;\n                  last_ptr = last_ptr + (ulong)bit_var * -2 + 1;\n                  other_ptr2 = other_ptr2 + (ulong)bit_var * -2 + 1;\n                }\n                if (temp_var4 < temp_var3) {\n                  for (loop_var = temp_var3 - temp_var4; loop_var != 0; loop_var = loop_var + -1) {\n                    *other_ptr2 = 0;\n                    other_ptr2 = other_ptr2 + (ulong)bit_var * -2 + 1;\n                  }\n                }\n                last_ptr = other_ptr + temp_var3;\n              }\n              else {\n                (*function_ptr)();\n                if (*(int *)(*(long *)(param_13 + 8) + 8) == 5) {\n                  char_var = (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  char_var = '\\b';\n                }\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(char_var,other_ptr2);\n                (**(code **)(*(long *)(param_13 + 8) + 0x50))(other_data_ptr[2],last_ptr + 8);\n                temp_var4 = *other_data_ptr;\n                last_ptr = (undefined *)other_data_ptr[3];\n                other_ptr2 = other_ptr;\n                for (temp_var3 = temp_var4; temp_var3 != 0; temp_var3 = temp_var3 - 1) {\n                  *other_ptr2 = *last_ptr;\n                  last_ptr = last_ptr + (ulong)bit_var * -2 + 1;\n                  other_ptr2 = other_ptr2 + (ulong)bit_var * -2 + 1;\n                }\n                temp_var3 = other_data_ptr[6];\n                if (temp_var4 < temp_var3) {\n                  for (loop_var = temp_var3 - temp_var4; loop_var != 0; loop_var = loop_var + -1) {\n                    *other_ptr2 = 0;\n                    other_ptr2 = other_ptr2 + (ulong)bit_var * -2 + 1;\n                  }\n                }\n                loop_var = *(long *)(param_13 + 8);\n                other_ptr = other_ptr + temp_var3;\n                last_ptr = other_ptr + 8;\n                if ((*(int *)(loop_var + 8) == 5) &&\n                   (*(char *)(*(long *)(param_13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_var + 0x38))(other_data_ptr[7],other_ptr);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x38))(other_data_ptr[8],last_ptr);\n                  last_ptr = other_ptr + 0x10;\n                }\n                else {\n                  (**(code **)(loop_var + 0x50))(other_data_ptr[7],other_ptr);\n                  (**(code **)(*(long *)(param_13 + 8) + 0x50))(other_data_ptr[8],other_ptr + 4);\n                }\n                param_9 = other_data_ptr[7];\n                param_7 = other_data_ptr[8];\n              }\n            }\n          }\n          temp_var3 = (long)last_ptr - (long)temp_ptr;\n          temp_var4 = temp_var3;\n          last_ptr = temp_ptr;\n          if (temp_var3 < output_len) {\n            for (; output_len = temp_var3, temp_var4 != 0; temp_var4 = temp_var4 - 1) {\n              *output_data = *last_ptr;\n              last_ptr = last_ptr + (ulong)bit_var * -2 + 1;\n              output_data = output_data + (ulong)bit_var * -2 + 1;\n            }\n          }\n          free(temp_ptr);\n          free(original_data_copy);\n          return output_len;\n        }\n        in_R11 = current_data[0xb];\n      } while (in_R11 == 0);\n      current_data_len = current_data[0x10];\n      original_data_len = current_data[0x11];\n      temp_var = 0;\n      if (current_data_len != original_data_len) break;\n      current_data[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "qsort",
                "FUN_00116852",
                "free",
                "xmalloc",
                "memcmp",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_data_structure_00113d3a",
                "param_1": "input_value",
                "lVar1": "initialized_structure"
            },
            "code": "\nlong initialize_data_structure_00113d3a(long input_value)\n\n{\n  long initialized_structure;\n  \n  if (input_value != 0) {\n    initialized_structure = *(long *)(input_value + 8);\n    if (initialized_structure == 0) {\n      initialized_structure = initialize_data_structure_00113d3a_00112904(0xc,0);\n      if (initialized_structure == 0) {\n        initialized_structure = 0;\n      }\n      else {\n        *(long *)(initialized_structure + 0x10) = input_value;\n        *(long *)(input_value + 8) = initialized_structure;\n      }\n    }\n    return initialized_structure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "inputData",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a0d3(long inputData)\n\n{\n  processData_0010a0d3Helper(inputData,0x42,*(undefined4 *)(*(long *)(inputData + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_and_create_output_section_00115530",
                "param_1": "binary_param",
                "param_2": "arguments",
                "param_3": "bfd_param",
                "lVar1": "length_var",
                "pcVar2": "pointer_var",
                "ppcVar3": "array_var",
                "cVar4": "char_var",
                "iVar5": "int_var",
                "uVar6": "uint_var",
                "sVar7": "size_t_var_1",
                "sVar8": "size_t_var_2",
                "lVar9": "file_process_var",
                "pcVar10": "str_var_1",
                "pcVar11": "str_var_2",
                "pcVar12": "str_var_3",
                "uVar13": "uint_var_2",
                "bVar14": "bool_var",
                "local_50": "local_str_var",
                "local_48": "local_pcVar",
                "local_40": "local_long_arr"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_and_create_output_section_00115530(long binary_param,char **arguments,long bfd_param)\n\n{\n  long length_var;\n  char *pointer_var;\n  char **array_var;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  size_t size_t_var_1;\n  size_t size_t_var_2;\n  long file_process_var;\n  char *str_var_1;\n  char *str_var_2;\n  char *str_var_3;\n  uint uint_var_2;\n  bool bool_var;\n  long local_str_var;\n  char *local_pcVar;\n  long local_long_arr [2];\n  \n  char_var = process_section_001159d0(arguments);\n  if (char_var != '\\0') {\n    return;\n  }\n  str_var_1 = *arguments;\n  uint_var_2 = *(uint *)((long)arguments + 0x24);\n  local_pcVar = str_var_1;\n  array_var = DAT_001278d8;\n  if (*(int *)(*(long *)(binary_param + 8) + 8) != *(int *)(*(long *)(bfd_param + 8) + 8)) {\n    uint_var_2 = uint_var_2 & *(uint *)(*(long *)(binary_param + 8) + 0x18) &\n             *(uint *)(*(long *)(bfd_param + 8) + 0x18);\n  }\n  for (; array_var != (char **)0x0; array_var = (char **)array_var[3]) {\n    int_var = strcmp(*array_var,str_var_1);\n    if (int_var == 0) {\n      if (*(uint *)(array_var + 2) != 0xffffffff) {\n        uint_var_2 = *(uint *)(array_var + 2);\n      }\n      if (str_var_1 != array_var[1]) {\n        local_pcVar = array_var[1];\n        uint_var_2 = drop_share_flag_if_needed_00115f30(uint_var_2,bfd_param);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (str_var_1 = DAT_001278f8, (*(byte *)((long)arguments + 0x24) & 1) != 0)) ||\n     (str_var_1 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    size_t_var_1 = strlen(str_var_1);\n    size_t_var_2 = strlen(local_pcVar);\n    str_var_3 = (char *)xmalloc(size_t_var_1 + 1 + size_t_var_2);\n    str_var_1 = strcpy(str_var_3,str_var_1);\n    local_pcVar = strcat(str_var_1,local_pcVar);\n  }\n  file_process_var = process_files_00114190(*arguments,0,0x80);\n  bool_var = false;\n  if (file_process_var == 0) {\n    if ((DAT_00127a2c == 4) && ((uint_var_2 & 0x2000001) != 0)) {\n      int_var = *(int *)(*(long *)(binary_param + 8) + 8);\n      if (int_var == 5) {\n        if (*(int *)(arguments[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(bfd_param + 8) + 8) == 5) {\n            bool_var = (uint_var_2 & 0x2000000) == 0;\n            uint_var = ~((-(uint)((uint_var_2 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)arguments + 0x24) = *(uint *)((long)arguments + 0x24) & uint_var;\n          }\n          else {\n            uint_var = 0xfdfffefd;\n          }\n          uint_var_2 = uint_var_2 & uint_var;\n        }\n      }\n      else if ((int_var != 2) || (int_var = strcmp(*arguments,\".buildid\"), int_var != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uint_var_2 = drop_share_flag_if_needed_00115f30(uint_var_2 & 0x104 | *(uint *)(file_process_var + 0x28),bfd_param,*arguments);\n  }\n  char_var = bfd_convert_section_setup(binary_param,arguments,bfd_param,&local_pcVar,local_long_arr);\n  if (char_var == '\\0') {\n    str_var_1 = (char *)0x0;\n    local_str_var = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  str_var_1 = (char *)bfd_make_section_anyway_with_flags(bfd_param,local_pcVar,uint_var_2);\n  if (str_var_1 == (char *)0x0) {\n    local_str_var = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      local_long_arr[0] = 0;\n      goto LAB_001158e7;\n    }\n    char_var = bfd_set_section_size(str_var_1,local_long_arr[0]);\n    if (char_var == '\\0') {\n      process_file_00108072();\n      return;\n    }\n  }\n  else {\n    local_long_arr[0] = ((((long)DAT_00127a1c - 1U) + local_long_arr[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    char_var = bfd_set_section_size(str_var_1);\n    if (char_var == '\\0') {\n      process_file_00108072();\n      return;\n    }\n  }\n  local_str_var = 0;\n  str_var_3 = arguments[6];\n  file_process_var = process_files_00114190(*arguments,0,0x18);\n  if (file_process_var == 0) {\n    str_var_1[0x28] = str_var_1[0x28] | 1;\n    str_var_2 = *arguments;\n    str_var_3 = str_var_3 + _DAT_00127990;\n    *(char **)(str_var_1 + 0x30) = str_var_3;\n    *(char **)(str_var_1 + 0x38) = str_var_3;\n    str_var_3 = arguments[7];\n    file_process_var = process_files_00114190(str_var_2,0,0x60);\n    if (file_process_var == 0) goto LAB_00115695;\nLAB_00115860:\n    str_var_2 = *(char **)(file_process_var + 0x20);\n    if ((*(byte *)(file_process_var + 0x14) & 0x40) != 0) {\n      str_var_2 = str_var_2 + (long)str_var_3;\n    }\n    *(char **)(str_var_1 + 0x38) = str_var_2;\n    file_process_var = process_files_00114190(*arguments,0,0x200);\n    if (file_process_var != 0) goto LAB_00115889;\nLAB_001156b8:\n    uint_var_2 = *(uint *)((long)arguments + 0x7c);\n    if (uint_var_2 < 0x3f) goto LAB_001156c4;\n    local_str_var = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(str_var_1 + 0xb4) = *(undefined4 *)((long)arguments + 0xb4);\n    str_var_1[0x28] = str_var_1[0x28] & 0xcfU | *(byte *)(arguments + 5) & 0x30;\n    arguments[0xc] = str_var_1;\n    arguments[0xb] = (char *)0x0;\n    if ((*(byte *)((long)arguments + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    char_var = (**(code **)(*(long *)(bfd_param + 8) + 0x158))(binary_param,arguments,bfd_param,str_var_1);\n    if (char_var == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    str_var_2 = *(char **)(file_process_var + 0x18);\n    if ((*(byte *)(file_process_var + 0x14) & 8) == 0) {\n      str_var_2 = str_var_2 + (long)str_var_3;\n    }\n    str_var_1[0x28] = str_var_1[0x28] | 1;\n    pointer_var = *arguments;\n    *(char **)(str_var_1 + 0x30) = str_var_2;\n    *(char **)(str_var_1 + 0x38) = str_var_2;\n    str_var_3 = arguments[7];\n    file_process_var = process_files_00114190(pointer_var,0,0x60);\n    if (file_process_var != 0) goto LAB_00115860;\nLAB_00115695:\n    str_var_2 = *arguments;\n    *(char **)(str_var_1 + 0x38) = str_var_3 + _DAT_00127990;\n    file_process_var = process_files_00114190(str_var_2,0,0x200);\n    if (file_process_var == 0) goto LAB_001156b8;\nLAB_00115889:\n    uint_var_2 = *(uint *)(file_process_var + 0x2c);\n    if (0x3e < uint_var_2) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(str_var_1 + 0x7c) = uint_var_2;\n    *(undefined4 *)(str_var_1 + 0xb4) = *(undefined4 *)((long)arguments + 0xb4);\n    str_var_1[0x28] = str_var_1[0x28] & 0xcfU | *(byte *)(arguments + 5) & 0x30;\n    arguments[0xc] = str_var_1;\n    arguments[0xb] = (char *)0x0;\n    if ((*(byte *)((long)arguments + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    str_var_3 = arguments[0x1a];\n    file_process_var = get_matching_value_00115d00(str_var_3,arguments[0x1c]);\n    if ((file_process_var == 0) ||\n       (length_var = *(long *)(binary_param + 8), *(uint *)(file_process_var + 0x18) = *(uint *)(file_process_var + 0x18) | 0x20,\n       *(int *)(length_var + 8) != 5)) goto LAB_00115700;\n    *(long *)(str_var_3 + 0xb0) = file_process_var;\n    char_var = (**(code **)(*(long *)(bfd_param + 8) + 0x158))(binary_param,arguments,bfd_param,str_var_1);\n    if (char_var == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (bool_var) {\n    *(undefined4 *)(*(long *)(str_var_1 + 0xd0) + 4) = 8;\n  }\n  if (local_str_var == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  print_error_information_001126c0(0,bfd_param,str_var_1,local_str_var);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00115f30",
                "strlen",
                "dcgettext",
                "xmalloc",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "FUN_001159d0",
                "strcpy",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_and_create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "input",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a0bd(long input)\n\n{\n  processData_0010a0bdHelper(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_string_validity_00113e5e",
                "param_1": "input",
                "param_2": "stringArray",
                "param_3": "stringLength",
                "local_20": "currentString"
            },
            "code": "\nundefined8 checkStringValidity_00113e5e(undefined8 input,char **stringArray,long stringLength)\n\n{\n  char cVar1;\n  char *currentString [2];\n  \n  currentString[0] = *stringArray;\n  *stringArray = (char *)(stringLength + 2);\n  if ((((long)(char *)(stringLength + 2) - (long)currentString[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(currentString[0],\"type\"), cVar1 == '\\0')) ||\n     ((currentString[0][4] != '$' && (currentString[0][4] != '.')))) {\n    if (*currentString[0] != '_') {\n      return 1;\n    }\n    if (currentString[0][1] != '_') {\n      return 1;\n    }\n    if (currentString[0][2] != 'o') {\n      return 1;\n    }\n    if (currentString[0][3] != 'p') {\n      return 1;\n    }\n    currentString[0] = currentString[0] + 4;\n  }\n  else {\n    currentString[0] = currentString[0] + 5;\n  }\n  cVar1 = decode_binary_0010c95e(input,currentString,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "check_string_validity_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "var1",
                "pcVar2": "ptr1",
                "bVar3": "byteValue",
                "pcVar4": "ptr2",
                "__s": "ptr3",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "returnValue",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long data,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long var1;\n  char *ptr1;\n  byte byteValue;\n  char *ptr2;\n  char *ptr3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 returnValue;\n  char char1;\n  char char2;\n  byte localByte;\n  \n  ptr3 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  ptr2 = (char *)extract_and_free_pointer_00109b2f();\n  if (flag4 != '\\0') {\n    byteValue = 1;\n    if (localByte == 0) {\n      byteValue = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    localByte = byteValue & 1;\n    ptr3 = (char *)extract_and_free_pointer_00109b2f(data);\n  }\n  var1 = *(long *)(data + 0x60);\n  if ((var1 == 0) || (ptr1 = *(char **)(var1 + 0x30), ptr1 == (char *)0x0)) {\n    returnValue = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(ptr1);\n    length2 = strlen(ptr2);\n    length3 = strlen(string1);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(ptr3);\n    }\n    returnValue = xrealloc(ptr1,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(var1 + 0x30) = returnValue;\n    ptr1 = *(char **)(*(long *)(data + 0x60) + 0x30);\n    length1 = strlen(ptr1);\n    sprintf(ptr1 + length1,\"%s:%s;%c%c%c\",ptr2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,length1);\n    free(ptr2);\n    if (flag4 != '\\0') {\n      ptr2 = *(char **)(*(long *)(data + 0x60) + 0x30);\n      length1 = strlen(ptr2);\n      sprintf(ptr2 + length1,\"%ld;%s;\",value,ptr3);\n      free(ptr3);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_needed_00115f30",
                "param_1": "flag",
                "param_2": "args",
                "param_3": "outputFormat",
                "uVar1": "value",
                "uVar2": "errorMessage"
            },
            "code": "\nuint dropShareFlagIfNeeded_00115f30(uint flag,undefined8 *args,undefined8 outputFormat)\n\n{\n  undefined8 value;\n  undefined8 errorMessage;\n  \n  if (((flag & 0x8000000) != 0) && (*(int *)(args[1] + 8) != 2)) {\n    value = *args;\n    flag = flag & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,value,outputFormat);\n  }\n  return flag;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_needed_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_next_value_001129f4",
                "param_1": "input_array",
                "puVar1": "array_ptr",
                "piVar2": "current_ptr"
            },
            "code": "\nundefined8 get_next_value_001129f4(int *input_array)\n\n{\n  undefined8 *array_ptr;\n  int *current_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    array_ptr = (undefined8 *)(input_array + 4);\n    current_ptr = **(int ***)(undefined8 *)*array_ptr;\n  } while ((input_array != current_ptr) && (input_array = current_ptr, current_ptr != (int *)0x0));\n  return ((undefined8 *)*array_ptr)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_next_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "verify_and_toggle_last_four_bits_001082b3",
                "uVar1": "result",
                "check_last_four_chars_00113ede": "retrieve_last_four_chars"
            },
            "code": "\nuint verify_and_toggle_last_four_bits_001082b3(void)\n\n{\n  uint result;\n  \n  result = retrieve_last_four_chars();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "verify_and_toggle_last_four_bits_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_binary_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "outputFileStat",
                "param_5": "bfdParameters",
                "param_6": "fileMode",
                "param_7": "customParameter",
                "bVar1": "byteValue",
                "cVar2": "charValue",
                "cVar3": "charValue2",
                "iVar4": "intValue",
                "iVar5": "bfdReturnValue",
                "ppcVar6": "filePtrArray",
                "pvVar7": "bufferPtr",
                "lVar8": "fileSize",
                "puVar9": "bfdFilePtr",
                "piVar10": "errnoPtr",
                "uVar11": "translatedString",
                "uVar12": "errorMessage",
                "lVar13": "returnValue",
                "puVar14": "inputBfdFile",
                "ppcVar16": "currentFilePtr",
                "pcVar17": "currentFilePath",
                "pcVar18": "tempFilePath",
                "pcVar23": "tempFilePathIter",
                "psVar24": "fileStatPtr",
                "bVar25": "boolValue",
                "bVar26": "byteValue2",
                "local_1a0": "outputBfdFileArray",
                "local_198": "outputFileArrayIter",
                "local_158": "outputFileStatStruct",
                "local_c8": "temporaryDirectoryPathArray",
                "uStack_b0": "filePermission",
                "lStack_98": "fileSize2"
            },
            "code": "\n\n\nvoid processBinary_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 outputFileStat,\n                 undefined8 bfdParameters,long fileMode,undefined8 customParameter)\n\n{\n  byte byteValue;\n  char charValue;\n  char charValue2;\n  int intValue;\n  int bfdReturnValue;\n  char **filePtrArray;\n  void *bufferPtr;\n  long fileSize;\n  undefined8 *bfdFilePtr;\n  int *errnoPtr;\n  undefined8 translatedString;\n  undefined8 errorMessage;\n  long returnValue;\n  undefined8 *inputBfdFile;\n  char *pcVar15;\n  char **currentFilePtr;\n  char *currentFilePath;\n  char *tempFilePath;\n  undefined8 *__ptr;\n  char **ppcVar19;\n  code *pcharValue0;\n  long lVar21;\n  uint uVar22;\n  char *tempFilePathIter;\n  stat *fileStatPtr;\n  bool boolValue;\n  byte byteValue2;\n  undefined8 *outputBfdFileArray;\n  long *outputFileArrayIter;\n  stat outputFileStatStruct;\n  void *temporaryDirectoryPathArray [3];\n  uint filePermission;\n  long fileSize2;\n  \n  byteValue2 = 0;\n  returnValue = get_file_information_00113f50();\n  if (returnValue < 1) {\n    if (returnValue == 0) {\n      errorMessage = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(errorMessage,inputFilePath);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  inputBfdFile = (undefined8 *)bfd_openr(inputFilePath,bfdParameters);\n  if ((inputBfdFile == (undefined8 *)0x0) || (bfdReturnValue = bfd_stat(inputBfdFile,outputFileStat), bfdReturnValue != 0)) {\n    print_error_information_001126c0(inputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)inputBfdFile + 0x44) = *(uint *)((long)inputBfdFile + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)inputBfdFile + 0x44) = *(uint *)((long)inputBfdFile + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)inputBfdFile + 0x44) = *(uint *)((long)inputBfdFile + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)inputBfdFile + 0x44) = *(uint *)((long)inputBfdFile + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)inputBfdFile + 0x44) = *(uint *)((long)inputBfdFile + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)inputBfdFile + 0x44) = *(uint *)((long)inputBfdFile + 0x44) | 0x40000;\n  }\n  charValue = bfd_check_format(inputBfdFile,2);\n  if (charValue != '\\0') {\n    if (fileMode == 0) {\n      charValue = '\\0';\n      fileMode = *(long *)inputBfdFile[1];\n    }\n    if (fileDescriptor < 0) {\n      outputBfdFileArray = (undefined8 *)bfd_openw(outputFilePath,fileMode);\n    }\n    else {\n      outputBfdFileArray = (undefined8 *)bfd_fdopenw(outputFilePath,fileMode,fileDescriptor);\n    }\n    if (outputBfdFileArray != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        errorMessage = *inputBfdFile;\n        translatedString = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(translatedString,errorMessage);\n        DAT_00127a10 = 0;\n      }\n      execute_function_00114d50(outputBfdFileArray,inputBfdFile,DAT_001264b4);\n      outputFileArrayIter = outputBfdFileArray + 0x1f;\n      if ((*(byte *)((long)inputBfdFile + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        errorMessage = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_information_001126c0(0,inputBfdFile,0,errorMessage);\n        return;\n      }\n      pcVar15 = (char *)create_temporary_directory_0011a0e0(*outputBfdFileArray);\n      if (pcVar15 == (char *)0x0) {\n        errnoPtr = __errno_location();\n        pcVar15 = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,pcVar15);\n      }\n      if (DAT_00127a2c == 7) {\n        byteValue = *(byte *)((long)inputBfdFile + 0x49);\n        uVar22 = 0;\n      }\n      else {\n        byteValue = *(byte *)((long)inputBfdFile + 0x49);\n        uVar22 = byteValue >> 3 & 1;\n      }\n      boolValue = _DAT_001264b0 != 0;\n      *(byte *)((long)outputBfdFileArray + 0x49) =\n           byteValue & 0x10 | (byte)(uVar22 << 3) | *(byte *)((long)outputBfdFileArray + 0x49) & 0xe7;\n      if (boolValue) {\n        *(uint *)((long)outputBfdFileArray + 0x44) = *(uint *)((long)outputBfdFileArray + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      currentFilePtr = (char **)bfd_openr_next_archived_file(inputBfdFile,0);\n      charValue2 = bfd_set_format(outputBfdFileArray,*(byte *)(inputBfdFile + 9) & 7);\n      if (charValue2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_information_001126c0(0,outputBfdFileArray,0,0);\n        remove_and_free_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (currentFilePtr != (char **)0x0))) {\n        tempFilePath = *currentFilePtr;\n        currentFilePath = tempFilePath;\n        if (*tempFilePath == '/') {\nLAB_0010527d:\n          errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(errorMessage,tempFilePath);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*currentFilePath != '\\0') {\n          tempFilePathIter = currentFilePath;\n          if ((*currentFilePath == '.') && (tempFilePathIter = currentFilePath + 1, currentFilePath[1] == '.')) {\n            tempFilePathIter = currentFilePath + 2;\n            if ((currentFilePath[2] == '\\0') || (currentFilePath[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*tempFilePathIter != '\\0' && (*tempFilePathIter != '/')); tempFilePathIter = tempFilePathIter + 1) {\n          }\n          currentFilePath = tempFilePathIter;\n          if (*tempFilePathIter == '/') {\n            extract_and_copy_files_001052a2();\n            return;\n          }\n        }\n        tempFilePath = (char *)concat(pcVar15,&DAT_0011b47d);\n        bfdReturnValue = stat(tempFilePath,&outputFileStatStruct);\n        bfdFilePtr = __ptr;\n        if (-1 < bfdReturnValue) {\n          returnValue = create_temporary_directory_0011a0e0(tempFilePath);\n          free(tempFilePath);\n          if (returnValue == 0) {\n            errnoPtr = __errno_location();\n            tempFilePath = strerror(*errnoPtr);\n            errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(errorMessage,tempFilePath);\n            goto LAB_00104e93;\n          }\n          bfdFilePtr = (undefined8 *)xmalloc(0x18);\n          tempFilePath = *currentFilePtr;\n          *bfdFilePtr = __ptr;\n          bfdFilePtr[2] = 0;\n          bfdFilePtr[1] = returnValue;\n          tempFilePath = (char *)concat(returnValue,&DAT_0011b47d,tempFilePath);\n        }\n        bfdReturnValue = 0;\n        if (DAT_001279cb != '\\0') {\n          fileStatPtr = &outputFileStatStruct;\n          for (returnValue = 0x24; returnValue != 0; returnValue = returnValue + -1) {\n            *(undefined4 *)&fileStatPtr->st_dev = 0;\n            fileStatPtr = (stat *)((long)fileStatPtr + (ulong)byteValue2 * -8 + 4);\n          }\n          ppcVar19 = (char **)currentFilePtr[0x1d];\n          if ((char **)currentFilePtr[0x1d] == (char **)0x0) {\n            ppcVar19 = currentFilePtr;\n          }\n          bfdReturnValue = (**(code **)(ppcVar19[1] + 0x1e8))(currentFilePtr,&outputFileStatStruct);\n          if (bfdReturnValue != 0) {\n            currentFilePath = *currentFilePtr;\n            errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(errorMessage,currentFilePath);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = tempFilePath;\n        *__ptr = bfdFilePtr;\n        __ptr[2] = 0;\n        charValue2 = bfd_check_format(currentFilePtr,1);\n        if (charValue2 == '\\0') {\n          errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_information_001126c0(0,currentFilePtr,0,errorMessage);\n          ppcVar19 = (char **)bfd_openw(tempFilePath,fileMode);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            print_error_information_001126c0(tempFilePath,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          filePtrArray = (char **)currentFilePtr[0x1d];\n          if ((char **)currentFilePtr[0x1d] == (char **)0x0) {\n            filePtrArray = currentFilePtr;\n          }\n          intValue = (**(code **)(filePtrArray[1] + 0x1e8))(currentFilePtr);\n          returnValue = fileSize2;\n          if (intValue == 0) {\n            if (fileSize2 < 0) {\n              get_modified_string_001125fa(currentFilePtr);\n              errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(errorMessage);\n            }\n            else {\n              intValue = bfd_seek(currentFilePtr,0,0);\n              if (intValue == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  currentFilePath = *ppcVar19;\n                  errorMessage = get_modified_string_001125fa(currentFilePtr);\n                  tempFilePathIter = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(tempFilePathIter,errorMessage,currentFilePath);\n                }\n                bufferPtr = (void *)xmalloc(0x2000);\n                for (; returnValue != 0; returnValue = returnValue - lVar21) {\n                  lVar21 = 0x2000;\n                  if (returnValue < 0x2001) {\n                    lVar21 = returnValue;\n                  }\n                  fileSize = bfd_bread(bufferPtr,lVar21,currentFilePtr);\n                  filePtrArray = currentFilePtr;\n                  if ((lVar21 != fileSize) ||\n                     (fileSize = bfd_bwrite(bufferPtr,lVar21,ppcVar19), filePtrArray = ppcVar19,\n                     lVar21 != fileSize)) {\n                    print_error_information_001126c0(0,filePtrArray,0,0);\n                    free(bufferPtr);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,filePermission | 0x100);\n                free(bufferPtr);\n                charValue2 = bfd_close_all_done(ppcVar19);\n                if (charValue2 == '\\0') {\n                  print_error_information_001126c0(tempFilePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              errorMessage = get_modified_string_001125fa(currentFilePtr);\n              print_bfd_error_0011a110(errorMessage);\n            }\n          }\n          else {\n            print_error_information_001126c0(0,currentFilePtr,0,0);\n          }\nLAB_00104f00:\n          charValue2 = bfd_close_all_done(ppcVar19);\n          if (charValue2 == '\\0') {\n            print_error_information_001126c0(tempFilePath,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(tempFilePath);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (charValue == '\\0') {\n            ppcVar19 = (char **)bfd_openw(tempFilePath,*(undefined8 *)currentFilePtr[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(tempFilePath,fileMode);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          charValue2 = FUNC_00114e50(currentFilePtr,ppcVar19,customParameter);\n          if (charValue2 == '\\0') {\n            intValue = bfd_get_arch(currentFilePtr);\n            if (intValue == 0) goto LAB_00104d75;\n            charValue2 = bfd_close_all_done(ppcVar19);\n            if (charValue2 == '\\0') {\n              print_error_information_001126c0(tempFilePath,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charValue2 = bfd_close(ppcVar19);\n          if (charValue2 == '\\0') {\n            print_error_information_001126c0(tempFilePath,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (bfdReturnValue == 0)) {\n            set_time_0011a350(tempFilePath,&outputFileStatStruct);\n          }\n          returnValue = bfd_openr(tempFilePath,fileMode);\n          __ptr[2] = returnValue;\n          *outputFileArrayIter = returnValue;\n          outputFileArrayIter = (long *)(returnValue + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(inputBfdFile);\n          bfd_close(currentFilePtr);\n          currentFilePtr = ppcVar19;\n        }\n      }\n      *outputFileArrayIter = 0;\n      bufferPtr = (void *)xstrdup(*outputBfdFileArray);\n      if (DAT_00127a20 == 0) {\n        pcharValue0 = bfd_close;\n      }\n      else {\n        pcharValue0 = bfd_close_all_done;\n      }\n      charValue = (*pcharValue0)(outputBfdFileArray);\n      if (charValue == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_information_001126c0(bufferPtr,0,0,0);\n      }\n      free(bufferPtr);\n      bufferPtr = (void *)xstrdup(*inputBfdFile);\n      charValue = bfd_close(inputBfdFile);\n      if (charValue == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_information_001126c0(bufferPtr,0,0,0);\n      }\n      free(bufferPtr);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        inputBfdFile = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = inputBfdFile;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_information_001126c0(outputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  charValue = bfd_check_format_matches(inputBfdFile,1,temporaryDirectoryPathArray);\n  if (charValue == '\\0') {\n    bfdReturnValue = bfd_get_error();\n    charValue = bfd_check_format_matches(inputBfdFile,3,&outputFileStatStruct);\n    if (charValue == '\\0') {\n      intValue = bfd_get_error();\n      if (bfdReturnValue != intValue) {\n        bfd_set_error(bfdReturnValue);\n      }\n      print_error_information_001126c0(inputFilePath,0,0,0);\n      if (bfdReturnValue == 0xd) {\n        print_matching_formats_0011256b(temporaryDirectoryPathArray[0]);\n      }\n      if (intValue != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(outputFileStatStruct.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (bfdReturnValue == 0xd) {\n      free(temporaryDirectoryPathArray[0]);\n    }\n  }\n  if (fileMode == 0) {\n    fileMode = *(long *)inputBfdFile[1];\n  }\n  if (fileDescriptor < 0) {\n    returnValue = bfd_openw(outputFilePath,fileMode);\n  }\n  else {\n    returnValue = bfd_fdopenw(outputFilePath,fileMode,fileDescriptor);\n  }\n  if (returnValue == 0) goto LAB_00105231;\n  execute_function_00114d50(returnValue,inputBfdFile,DAT_001264b4);\n  charValue = FUNC_00114e50(inputBfdFile,returnValue,customParameter);\n  if (charValue == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    charValue = bfd_close(returnValue);\n    goto LAB_001147d5;\n  }\n  charValue = bfd_close_all_done(returnValue);\nLAB_001147d5:\n  if (charValue != '\\x01') {\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charValue = bfd_close(inputBfdFile);\n  if (charValue == '\\0') {\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "close",
                "FUN_00113f50",
                "bfd_stat",
                "bfd_set_error",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_00114d50",
                "FUN_0011a0e0",
                "FUN_00119dd0",
                "FUN_00104d25",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_fdopenw",
                "bfd_openr_next_archived_file",
                "FUN_0011256b",
                "bfd_check_format",
                "free",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_binary_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "is_initialized",
                "plVar1": "ptr_to_long",
                "uVar2": "result",
                "sVar3": "string_length",
                "lVar4": "value",
                "lVar5": "shifted_value",
                "local_8c": "formatted_string",
                "auStack_8a": "stack_array"
            },
            "code": "\nundefined8 initialize_data_structure_0010b800(long data_ptr,int size,char is_initialized)\n\n{\n  long *ptr_to_long;\n  undefined8 result;\n  size_t string_length;\n  long value;\n  long shifted_value;\n  undefined2 formatted_string;\n  undefined4 stack_array [24];\n  \n  if (size - 1U < 8) {\n    value = data_ptr + 0xb8;\n    if (is_initialized != '\\0') {\n      value = data_ptr + 0x78;\n    }\n    ptr_to_long = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr_to_long;\n    if (value != 0) {\n      result = initialize_data_struct_00109cf4(data_ptr,value,size);\n      return result;\n    }\n    value = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = value + 1;\n    *ptr_to_long = value;\n    sprintf((char *)&formatted_string,\"%ld=r%ld;\",value,value);\n    if (is_initialized == '\\0') {\n      shifted_value = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&formatted_string);\n      sprintf((char *)((long)&formatted_string + string_length),\"%ld;%ld;\",-shifted_value,shifted_value + -1);\n    }\n    else {\n      string_length = strlen((char *)&formatted_string);\n      *(undefined2 *)((long)&formatted_string + string_length) = 0x3b30;\n      *(undefined *)((long)&formatted_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formatted_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formatted_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_struct_00109b52(data_ptr,&formatted_string,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "size",
                "uVar2": "newSize",
                "cVar3": "result",
                "pcVar4": "strPtr",
                "sVar5": "strLen",
                "__s": "formattedStr",
                "lVar6": "count",
                "__ptr": "extractedPtr",
                "uVar7": "returnVal",
                "uVar8": "useExtracted",
                "lVar9": "loopCount",
                "uVar10": "currentSize",
                "puVar11": "ptr",
                "bVar12": "flag"
            },
            "code": "\nundefined8 processData_00109ed3(long param1,uint param2,undefined4 param3,long *param4,ulong *param5)\n\n{\n  ulong size;\n  ulong newSize;\n  char result;\n  char *strPtr;\n  size_t strLen;\n  char *formattedStr;\n  long count;\n  void *extractedPtr;\n  undefined8 returnVal;\n  undefined useExtracted;\n  long loopCount;\n  ulong currentSize;\n  undefined *ptr;\n  byte flag;\n  \n  flag = 0;\n  count = *(long *)(param1 + 0x60);\n  if (count != 0) {\n    size = *(ulong *)(count + 0x10);\n    if (((long)size < 1) || (param4 == (long *)0x0)) {\n      useExtracted = *(undefined *)(count + 0x1c);\n      strPtr = (char *)extract_and_free_pointer_00109b2f(param1);\n      strLen = strlen(strPtr);\n      formattedStr = (char *)xmalloc(strLen + 2);\n      sprintf(formattedStr,\"%c%s\",(ulong)param2,strPtr);\n      free(strPtr);\n      count = 0;\n    }\n    else {\n      currentSize = *param5;\n      if (currentSize <= size) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= size; currentSize = currentSize * 2) {\n        }\n        count = xrealloc(*param4,currentSize * 8);\n        newSize = *param5;\n        *param4 = count;\n        ptr = (undefined *)(count + newSize * 8);\n        for (loopCount = (currentSize - newSize) * 8; loopCount != 0; loopCount = loopCount + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)flag * -2 + 1;\n        }\n        *param5 = currentSize;\n      }\n      count = *(long *)(*param4 + size * 8);\n      if ((count != 0) && (*(char *)(*(long *)(param1 + 0x60) + 0x1c) == '\\0')) {\n        extractedPtr = (void *)extract_and_free_pointer_00109b2f(param1);\n        free(extractedPtr);\n        returnVal = initialize_data_struct_00109cf4(param1,count,param3);\n        return returnVal;\n      }\n      count = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = count + 1;\n      strPtr = (char *)extract_and_free_pointer_00109b2f(param1);\n      strLen = strlen(strPtr);\n      formattedStr = (char *)xmalloc(strLen + 0x14);\n      sprintf(formattedStr,\"%ld=%c%s\",count,(ulong)param2,strPtr);\n      free(strPtr);\n      useExtracted = 1;\n      *(long *)(*param4 + size * 8) = count;\n    }\n    result = initialize_data_struct_00109b52(param1,formattedStr,count,useExtracted,param3);\n    if (result != '\\0') {\n      free(formattedStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00112925",
                "FUN_0010bf86",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_00114cf0",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_00114d60",
                "FUN_0010a2b9",
                "FUN_00108d9a",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "FUN_00115530",
                "FUN_00113b98",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a181",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00108c86",
                "FUN_0010c139",
                "FUN_0010e9a0",
                "FUN_00109022",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010bd62",
                "FUN_001125fa",
                "FUN_00109ed3",
                "FUN_00112904",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bbd3",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010aa53",
                "FUN_0010da0b",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_00113e23",
                "FUN_00109a0b",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010d882",
                "FUN_0010c6be",
                "FUN_00112894",
                "FUN_0010bc80",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "prevDebugInfo",
                "puVar2": "units1",
                "puVar3": "units2",
                "lVar4": "loopCounter",
                "puVar5": "ptr",
                "pcVar6": "filePath",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *prevDebugInfo;\n  undefined4 *units1;\n  undefined4 *units2;\n  long loopCounter;\n  undefined4 *ptr;\n  char *filePath;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  filePath = \"\";\n  if (filename != (char *)0x0) {\n    filePath = filename;\n  }\n  units1 = (undefined4 *)xmalloc(0x18);\n  ptr = units1;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  *(char **)(units1 + 2) = filePath;\n  units2 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)units1;\n  ptr = units2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  prevDebugInfo = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(units2 + 2) = units1;\n  if (prevDebugInfo == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)units2;\n  }\n  else {\n    *prevDebugInfo = units2;\n  }\n  debugInfo[1] = (long)units2;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_modified_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_modified_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_information_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_modified_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = get_modified_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = get_modified_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_modified_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_modified_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_information_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = compare_strings_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = compare_strings_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_and_create_output_section_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_information_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_files_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_needed_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_information_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_information_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_information_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_files_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_files_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_information_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_information_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_information_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_information_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_information_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_information_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improved_extract_and_process_debug_info_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_data_structure_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = process_debug_info_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_data_structure_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_entry_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = process_debug_info_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_record_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_block_debugging_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = initialize_debug_record_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_line_debug_information_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = end_debug_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = initialize_section_data_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_section_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_exists_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_exists_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_exists_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = check_pattern_exists_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = initialize_section_data_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = reverse_and_improve_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_information_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_information_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocations_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_and_print_files_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_section_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_information_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_information_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = compare_strings_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_information_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_information_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_information_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = compare_strings_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_information_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)process_gnu_build_attribute_notes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_information_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_format",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_00107976",
                "FUN_001125fa",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "get_matching_value_00115d00",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "numIterations",
                "lVar2": "matchedValue"
            },
            "code": "\nlong getMatchingValue_00115d00(long value1,long value2)\n\n{\n  uint numIterations;\n  long matchedValue;\n  \n  matchedValue = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(value2 + 8) + 8) == 5) {\n      if (*(int *)(value1 + 0x28) == *(int *)(*(long *)(value2 + 0x110) + 0xd40)) {\n        numIterations = *(uint *)(value1 + 0x2c);\n        if (numIterations == 0) {\n          matchedValue = 0;\n        }\n        else if ((ulong)numIterations <\n                 *(ulong *)(*(long *)(value2 + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(value2 + 8) + 0x380) + 0x340) + 5))\n        {\n          matchedValue = *(long *)(DAT_001278b0 + (ulong)(numIterations - 1) * 8);\n        }\n        else {\n          matchedValue = 0;\n        }\n      }\n      else {\n        matchedValue = 0;\n      }\n    }\n    else {\n      matchedValue = 0;\n    }\n  }\n  return matchedValue;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "get_matching_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "lVar1": "data_structure",
                "plVar2": "ptr_data",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ninitialize_data_structure_00113c43(long data_1,long data_2,long data_3,long data_4,undefined param_5,\n            undefined8 param_6)\n\n{\n  long data_structure;\n  long *ptr_data;\n  undefined return_value [16];\n  \n  if ((data_1 != 0) && (data_2 != 0)) {\n    data_structure = initialize_data_structure_00113c43_00112904(0x10,0);\n    if (data_structure != 0) {\n      ptr_data = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)ptr_data + 0x21) = 0;\n      *ptr_data = data_1;\n      *(undefined4 *)((long)ptr_data + 0x24) = 0;\n      ptr_data[1] = data_2;\n      ptr_data[2] = data_3;\n      ptr_data[3] = data_4;\n      *(undefined *)(ptr_data + 4) = param_5;\n      *(long **)(data_structure + 0x10) = ptr_data;\n      goto LAB_00113caa;\n    }\n  }\n  data_structure = 0;\nLAB_00113caa:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = data_structure;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_record_00112a33",
                "param_1": "functionContext",
                "param_2": "recordData",
                "param_3": "contextData",
                "param_4": "recordType",
                "param_5": "debugData",
                "param_6": "paramData",
                "param_7": "extraData",
                "uVar1": "returnValue",
                "lVar2": "result",
                "plVar3": "slotPointer"
            },
            "code": "\nbool processRecord_00112a33(undefined8 functionContext,long recordData,undefined8 contextData,byte recordType,undefined8 debugData\n                 ,undefined8 paramData,uint extraData)\n\n{\n  undefined returnValue;\n  long result;\n  long *slotPointer;\n  \n  if (recordType < 0x12) {\n    if (recordType != 0) {\n      switch(recordType) {\n      case 1:\n        returnValue = record_variable_0010c05d(debugData,*(undefined8 *)(recordData + 8),paramData,4,\n                             *(long *)(recordData + 0x10) + *(long *)(*(long *)(recordData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        returnValue = record_variable_0010c05d(debugData,*(undefined8 *)(recordData + 8),paramData,(extraData & 0xff) + 2,\n                             *(long *)(recordData + 0x10) + *(long *)(*(long *)(recordData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 4:\n        returnValue = record_variable_0010c05d(debugData,*(undefined8 *)(recordData + 8),paramData,5,\n                             *(long *)(recordData + 0x10) + *(long *)(*(long *)(recordData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 9:\n        returnValue = record_parameter_data_0010bd62(debugData,*(undefined8 *)(recordData + 8),paramData,1,\n                             *(long *)(recordData + 0x10) + *(long *)(*(long *)(recordData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        result = debug_tag_type_0010c6be(debugData,*(undefined8 *)(recordData + 8));\n        if (result == 0) {\n          return false;\n        }\n        slotPointer = (long *)allocate_and_initialize_slots_0010da0b(functionContext,contextData);\n        *slotPointer = result;\n        break;\n      case 0xd:\n        result = initialize_debug_name_0010c218(debugData,*(undefined8 *)(recordData + 8));\n        return result != 0;\n      case 0x11:\n        returnValue = record_parameter_data_0010bd62(debugData,*(undefined8 *)(recordData + 8),paramData,2,\n                             *(long *)(recordData + 0x10) + *(long *)(*(long *)(recordData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (recordType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    returnValue = record_variable_0010c05d(debugData,*(undefined8 *)(recordData + 8),paramData,1,\n                         *(long *)(recordData + 0x10) + *(long *)(*(long *)(recordData + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_record_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "initialize_or_update_data_structure_0010c2d2",
                "uVar1": "type_code",
                "pcVar2": "data_type",
                "uVar3": "result",
                "lVar4": "data_structure",
                "plVar5": "data_structure_ptr",
                "uVar6": "type_index"
            },
            "code": "\n\n\nlong initialize_or_update_data_structure_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint type_code;\n  char *data_type;\n  undefined8 result;\n  long data_structure;\n  long *data_structure_ptr;\n  uint type_index;\n  \n  if ((*param_3 == 0) && (type_code = param_3[1], (int)type_code < 0)) {\n    type_index = ~type_code;\n    if (type_index < 0x22) {\n      data_structure = *(long *)(param_2 + 0x90 + (ulong)type_index * 8);\n      if (data_structure == 0) {\n        switch(type_index) {\n        case 1:\n          result = update_data_structure_00113dfe(1,0);\n          data_type = \"char\";\n          break;\n        case 2:\n          result = update_data_structure_00113dfe(2,0);\n          data_type = \"short\";\n          break;\n        case 3:\n          result = update_data_structure_00113dfe(4,0);\n          data_type = \"long\";\n          break;\n        case 4:\n          result = update_data_structure_00113dfe(1,1);\n          data_type = \"unsigned char\";\n          break;\n        case 5:\n          result = update_data_structure_00113dfe(1,0);\n          data_type = \"signed char\";\n          break;\n        case 6:\n          result = update_data_structure_00113dfe(2,1);\n          data_type = \"unsigned short\";\n          break;\n        case 7:\n          result = update_data_structure_00113dfe(4,1);\n          data_type = \"unsigned int\";\n          break;\n        case 8:\n          result = update_data_structure_00113dfe(4,1);\n          data_type = \"unsigned\";\n          break;\n        case 9:\n          result = update_data_structure_00113dfe(4,1);\n          data_type = \"unsigned long\";\n          break;\n        case 10:\n          result = initialize_data_structure_00113e17();\n          data_type = \"void\";\n          break;\n        case 0xb:\n          result = initialize_data_structure_00113df2(4);\n          data_type = \"float\";\n          break;\n        case 0xc:\n          result = initialize_data_structure_00113df2(8);\n          data_type = \"double\";\n          break;\n        case 0xd:\n          result = initialize_data_structure_00113df2(8);\n          data_type = \"long double\";\n          break;\n        case 0xe:\n          result = update_data_structure_00113dfe(4,0);\n          data_type = \"integer\";\n          break;\n        case 0xf:\n          result = initialize_data_structure_00112904(6,4);\n          data_type = \"boolean\";\n          break;\n        case 0x10:\n          result = initialize_data_structure_00113df2(4);\n          data_type = \"short real\";\n          break;\n        case 0x11:\n          result = initialize_data_structure_00113df2(8);\n          data_type = \"real\";\n          break;\n        case 0x12:\n          data_type = \"stringptr\";\n          result = 0;\n          break;\n        case 0x13:\n          result = update_data_structure_00113dfe(1,1);\n          data_type = \"character\";\n          break;\n        case 0x14:\n          result = initialize_data_structure_00112904(6,1);\n          data_type = \"logical*1\";\n          break;\n        case 0x15:\n          result = initialize_data_structure_00112904(6,2);\n          data_type = \"logical*2\";\n          break;\n        case 0x16:\n          result = initialize_data_structure_00112904(6,4);\n          data_type = \"logical*4\";\n          break;\n        case 0x17:\n          result = initialize_data_structure_00112904(6,4);\n          data_type = \"logical\";\n          break;\n        case 0x18:\n          result = initialize_data_structure_00112904(5,8);\n          data_type = \"complex\";\n          break;\n        case 0x19:\n          result = initialize_data_structure_00112904(5,0x10);\n          data_type = \"double complex\";\n          break;\n        case 0x1a:\n          result = update_data_structure_00113dfe(1,0);\n          data_type = \"integer*1\";\n          break;\n        case 0x1b:\n          result = update_data_structure_00113dfe(2,0);\n          data_type = \"integer*2\";\n          break;\n        case 0x1c:\n          result = update_data_structure_00113dfe(4,0);\n          data_type = \"integer*4\";\n          break;\n        case 0x1d:\n          result = update_data_structure_00113dfe(2,0);\n          data_type = \"wchar\";\n          break;\n        case 0x1e:\n          result = update_data_structure_00113dfe(8,0);\n          data_type = \"long long\";\n          break;\n        case 0x1f:\n          result = update_data_structure_00113dfe(8,1);\n          data_type = \"unsigned long long\";\n          break;\n        case 0x20:\n          result = initialize_data_structure_00112904(6,8);\n          data_type = \"logical*8\";\n          break;\n        case 0x21:\n          result = update_data_structure_00113dfe(8,0);\n          data_type = \"integer*8\";\n          break;\n        default:\n          result = update_data_structure_00113dfe(4,0);\n          data_type = \"int\";\n        }\n        data_structure = initialize_debug_name_0010c218(param_1,data_type,result);\n        *(long *)(param_2 + 0x90 + (ulong)type_index * 8) = data_structure;\n        return data_structure;\n      }\n      return data_structure;\n    }\n    data_type = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,data_type,(ulong)type_code);\n  }\n  else {\n    data_structure_ptr = (long *)extract_file_type_00109022(param_2);\n    if (data_structure_ptr != (long *)0x0) {\n      if (*data_structure_ptr == 0) {\n        data_structure = create_data_structure_00113e23(data_structure_ptr,0);\n        return data_structure;\n      }\n      return *data_structure_ptr;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "fprintf",
                "dcgettext",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00109022",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_or_update_data_structure_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_data_0010e07c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "sectionAddress",
                "lVar2": "symbolAddress",
                "lVar3": "currentCount",
                "cVar4": "result",
                "uVar5": "errorValue",
                "__ptr": "dataBuffer",
                "uVar6": "auxValue",
                "uVar7": "errorMessage",
                "puVar8": "newRecord",
                "pcVar9": "errorMsgFormat",
                "puVar10": "auxData",
                "uVar11": "value",
                "lVar12": "recordCount",
                "iVar13": "offset",
                "iVar14": "bufferSize",
                "local_a8": "value1",
                "uStack_a4": "value2",
                "uStack_a0": "value3",
                "uStack_9c": "value4",
                "local_88": "symbolName",
                "local_6a": "anotherValue",
                "local_68": "flag1",
                "local_67": "flag2",
                "local_60": "buffer",
                "local_56": "index"
            },
            "code": "\nundefined8\nprocessBinaryData_0010e07c(undefined8 param1,long *param2,undefined8 param3,int param4,long param5,\n            undefined8 param6)\n\n{\n  long sectionAddress;\n  long symbolAddress;\n  long currentCount;\n  char result;\n  undefined4 errorValue;\n  void *dataBuffer;\n  undefined8 auxValue;\n  undefined8 errorMessage;\n  undefined4 *newRecord;\n  char *errorMsgFormat;\n  undefined *auxData;\n  uint value;\n  long recordCount;\n  int offset;\n  int bufferSize;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined symbolName [30];\n  undefined2 anotherValue;\n  byte flag1;\n  byte flag2;\n  undefined buffer [10];\n  ushort index;\n  \n  bufferSize = 10;\n  recordCount = 0;\n  sectionAddress = *(long *)(param5 + 0x18);\n  dataBuffer = (void *)xmalloc(0x50);\n  while ((param2[3] < sectionAddress && (param2[2] < param2[1]))) {\n    symbolAddress = *(long *)(*param2 + param2[2] * 8);\n    result = bfd_coff_get_syment(param1,symbolAddress,symbolName);\n    if (result == '\\0') {\n      errorValue = bfd_get_error();\n      auxValue = bfd_errmsg(errorValue);\n      errorMsgFormat = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errorMessage = dcgettext(0,errorMsgFormat,5);\n      print_error_message_00119ed0(errorMessage,auxValue);\n      free(dataBuffer);\n      return 0;\n    }\n    currentCount = param2[3];\n    auxData = (undefined *)0x0;\n    param2[2] = param2[2] + 1;\n    param2[3] = currentCount + 1 + (ulong)flag2;\n    if (flag2 != 0) {\n      auxData = buffer;\n      result = bfd_coff_get_auxent(param1,symbolAddress,0,auxData);\n      if (result == '\\0') {\n        errorValue = bfd_get_error();\n        auxValue = bfd_errmsg(errorValue);\n        errorMsgFormat = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (flag1 == 0x12) {\n      value = (uint)index;\n      offset = (int)*(undefined8 *)(symbolAddress + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolAddress + 0x20) + 0x30);\n    }\n    else {\n      if (flag1 < 0x13) {\n        if ((flag1 == 8) || (flag1 == 0xb)) {\n          value = 0;\n          offset = ((int)*(undefined8 *)(symbolAddress + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolAddress + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (flag1 == 0x66) break;\n      value = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    errorMessage = parse_coff_type_0010dac0(param1,param2,param3,currentCount,anotherValue,auxData,1);\n    auxValue = *(undefined8 *)(symbolAddress + 8);\n    newRecord = (undefined4 *)xmalloc(0x20);\n    value1 = (undefined4)auxValue;\n    value2 = (undefined4)((ulong)auxValue >> 0x20);\n    value3 = (undefined4)errorMessage;\n    value4 = (undefined4)((ulong)errorMessage >> 0x20);\n    *(undefined8 *)(newRecord + 5) = 0;\n    newRecord[6] = offset;\n    newRecord[7] = value;\n    newRecord[4] = 0;\n    *newRecord = value1;\n    newRecord[1] = value2;\n    newRecord[2] = value3;\n    newRecord[3] = value4;\n    if (bufferSize <= (int)recordCount + 1) {\n      bufferSize = bufferSize + 10;\n      dataBuffer = (void *)xrealloc(dataBuffer,(long)bufferSize << 3,newRecord,0,param6);\n    }\n    *(undefined4 **)((long)dataBuffer + recordCount * 8) = newRecord;\n    recordCount = recordCount + 1;\n  }\n  *(undefined8 *)((long)dataBuffer + (long)(int)recordCount * 8) = 0;\n  auxValue = initialize_and_populate_data_structure_00113da9(param4 == 8,*(undefined2 *)(param5 + 10),dataBuffer);\n  return auxValue;\n}\n\n",
            "called": [
                "FUN_00113da9",
                "xrealloc",
                "bfd_errmsg",
                "free",
                "dcgettext",
                "xmalloc",
                "bfd_coff_get_syment",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "FUN_0010dac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_data_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_and_populate_data_structure_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3"
            },
            "code": "\nundefined8 get_default_value_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_default_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "fileData",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableEntry",
                "pbVar7": "currentByte",
                "bVar8": "currentChar",
                "pbVar9": "nextByte",
                "pbVar10": "currentPtr",
                "pbVar11": "lastPtr",
                "pbVar12": "startPtr"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *filename,undefined8 hashTable,byte **fileData)\n\n{\n  int iVar1;\n  int *piVar2;\n  char *pcVar3;\n  undefined8 uVar4;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashTableEntry;\n  byte *currentByte;\n  byte currentChar;\n  byte *nextByte;\n  byte *currentPtr;\n  byte *lastPtr;\n  byte *startPtr;\n  \n  fileSize = get_file_information_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      piVar2 = __errno_location();\n      pcVar3 = strerror(*piVar2);\n      uVar4 = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar4,filename,pcVar3);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (iVar1 = ferror(fileStream), iVar1 != 0)) {\n      uVar4 = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(uVar4,filename);\n    }\n    iVar1 = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentChar = *fileBuffer;\n    startPtr = fileBuffer;\n    while (currentPtr = startPtr, currentChar != 0) {\n      for (; currentChar = *currentPtr, lastPtr = currentPtr, currentChar != 10; currentPtr = currentPtr + 1) {\n        if ((char)currentChar < '\\v') {\n          if (currentChar == 0) {\n            nextByte = currentPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentChar == 0xd) {\n            *currentPtr = 0;\n            nextByte = currentPtr + 1;\n            if (currentPtr[1] == 10) {\n              nextByte = currentPtr + 2;\n              lastPtr = currentPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentChar == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr = 0;\n      if (currentPtr[1] == 0xd) {\n        lastPtr = currentPtr + 1;\n        nextByte = currentPtr + 2;\n      }\n      else {\n        nextByte = currentPtr + 1;\n      }\nLAB_00114553:\n      currentChar = *startPtr;\n      while ((currentChar == 0x20 || (currentPtr = startPtr, currentChar == 9))) {\n        currentPtr = startPtr + 1;\n        startPtr = startPtr + 1;\n        currentChar = *currentPtr;\n      }\n      do {\n        if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n        if (currentChar == 0) goto LAB_00114599;\n        currentChar = currentPtr[1];\n        currentPtr = currentPtr + 1;\n      } while ((currentChar != 0x20) && (currentChar != 9));\n      if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentChar = currentPtr[1];\n        if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n              ((currentChar = currentPtr[2], currentChar == 9 || (currentChar == 0x20)))) &&\n             ((currentChar = currentPtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n            ((currentChar = currentPtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = currentPtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n          currentChar = currentPtr[6];\n          currentByte = currentPtr + 6;\n          if ((currentChar == 9) || (currentChar == 0x20)) {\n            do {\n              do {\n                currentChar = currentByte[1];\n                currentByte = currentByte + 1;\n              } while (currentChar == 0x20);\n            } while (currentChar == 9);\n          }\n        }\n        if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n          uVar4 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(uVar4,filename,iVar1);\n        }\n      }\nLAB_00114599:\n      *currentPtr = 0;\n      if (startPtr < currentPtr) {\n        hashTableEntry = (byte **)htab_find_slot(hashTable,startPtr,1);\n        *hashTableEntry = startPtr;\n      }\n      iVar1 = iVar1 + 1;\n      startPtr = nextByte;\n      currentChar = lastPtr[1];\n    }\n    *fileData = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "__errno_location",
                "FUN_00113f50",
                "dcgettext",
                "xmalloc",
                "strerror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_connection_string_0010a94e",
                "param_1": "connectionInfo",
                "param_2": "username",
                "param_3": "password",
                "param_4": "securityLevel",
                "cVar1": "securityEnabled",
                "__s": "extractedPointer",
                "sVar3": "configLength",
                "sVar4": "usernameLength",
                "sVar5": "extractedLength",
                "sVar6": "passwordLength",
                "pcVar7": "connectionString",
                "uVar8": "result",
                "pcVar9": "securityFlag",
                "lVar2": "connectionData"
            },
            "code": "\nundefined8 generateConnectionString_0010a94e(long connectionInfo,char *username,char *password,int securityLevel)\n\n{\n  char securityEnabled;\n  long connectionData;\n  char *extractedPointer;\n  size_t configLength;\n  size_t usernameLength;\n  size_t extractedLength;\n  size_t passwordLength;\n  char *connectionString;\n  undefined8 result;\n  char *securityFlag;\n  \n  securityEnabled = *(char *)(*(long *)(connectionInfo + 0x60) + 0x1c);\n  extractedPointer = (char *)extract_and_free_pointer_00109b2f();\n  connectionString = *(char **)(*(long *)(connectionInfo + 0x60) + 0x20);\n  if (connectionString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    configLength = strlen(connectionString);\n    usernameLength = strlen(username);\n    extractedLength = strlen(extractedPointer);\n    passwordLength = strlen(password);\n    connectionString = (char *)xmalloc(configLength + 10 + usernameLength + extractedLength + passwordLength);\n    if (securityLevel == 1) {\n      securityFlag = \"/1\";\n    }\n    else {\n      securityFlag = \"/0\";\n      if ((securityLevel != 2) && (securityFlag = \"\", securityLevel != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(connectionString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(connectionInfo + 0x60) + 0x20),username,securityFlag,\n            extractedPointer,password,*(long *)(connectionInfo + 0x60));\n    free(*(void **)(*(long *)(connectionInfo + 0x60) + 0x20));\n    connectionData = *(long *)(connectionInfo + 0x60);\n    *(char **)(connectionData + 0x20) = connectionString;\n    if (securityEnabled != '\\0') {\n      *(undefined *)(connectionData + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)connectionData >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_connection_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_value_00113b1e",
                "param_1": "inputParam",
                "param_2": "someParam",
                "param_3": "defaultValue",
                "param_4": "additionalValue",
                "auVar1": "result1",
                "piVar2": "realTypePtr",
                "uVar3": "realValue",
                "auVar4": "finalResult"
            },
            "code": "\nundefined  [16] extractRealValue_00113b1e(long inputParam,undefined8 someParam,ulong defaultValue,undefined8 additionalValue)\n\n{\n  undefined result1 [16];\n  int *realTypePtr;\n  undefined8 realValue;\n  undefined finalResult [16];\n  \n  if (inputParam != 0) {\n    realTypePtr = (int *)find_real_type_00112b6e(inputParam,0);\n    if ((realTypePtr == (int *)0x0) || (3 < *realTypePtr - 7U)) {\n      realValue = 0;\n    }\n    else {\n      realValue = **(undefined8 **)(realTypePtr + 4);\n    }\n    finalResult._8_8_ = additionalValue;\n    finalResult._0_8_ = realValue;\n    return finalResult;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = defaultValue;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_real_value_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "construct_request_0010a0e9",
                "param_1": "param",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "ptr1",
                "uVar2": "ptr2",
                "__s": "string",
                "sVar3": "length",
                "__s_00": "newString"
            },
            "code": "\nundefined4 constructRequest_0010a0e9(long param,undefined8 value1,undefined8 value2)\n\n{\n  undefined ptr1;\n  undefined4 ptr2;\n  char *string;\n  size_t length;\n  char *newString;\n  \n  ptr1 = *(undefined *)(*(long *)(param + 0x60) + 0x1c);\n  ptr2 = *(undefined4 *)(*(long *)(param + 0x60) + 0x18);\n  string = (char *)extract_and_free_pointer_00109b2f();\n  length = strlen(string);\n  newString = (char *)xmalloc(length + 100);\n  sprintf(newString,\"r%s;%ld;%ld;\",string,value1,value2);\n  free(string);\n  ptr2 = initialize_data_struct_00109b52(param,newString,0,ptr1,ptr2);\n  if ((char)ptr2 != '\\0') {\n    free(newString);\n  }\n  return ptr2;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_and_compare_files_00114c20",
                "param_1": "filePointer",
                "cVar1": "comparisonResult",
                "pcVar2": "nextFilePath"
            },
            "code": "\nvoid processAndCompareFiles_00114c20(long filePointer)\n\n{\n  char comparisonResult;\n  char *nextFilePath;\n  \n  process_files_00114190(filePointer,1,1);\n  comparisonResult = compare_strings_00113fb0(filePointer,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    nextFilePath = (char *)(filePointer + 5);\n    if (*(char *)(filePointer + 4) != 'a') {\n      nextFilePath = (char *)(filePointer + 4);\n    }\n    if (*nextFilePath != '\\0') {\n      process_files_00114190(nextFilePath,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_and_compare_files_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "process_file_00115f50",
                "param_1": "fileSize",
                "param_2": "fileData",
                "param_3": "isLinuxBinary",
                "__s1": "sectionName",
                "uVar1": "stringComparisonResult",
                "uVar2": "result",
                "extraout_EDX": "comparisonResult",
                "plVar3": "linkedSection",
                "auVar4": "checkResult"
            },
            "code": "\nuint processFile_00115f50(long fileSize,char **fileData,char isLinuxBinary)\n\n{\n  char *sectionName;\n  uint stringComparisonResult;\n  undefined4 result;\n  undefined4 comparisonResult;\n  long *linkedSection;\n  undefined checkResult [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  checkResult = process_section_001159d0(fileData);\n  if (checkResult[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      sectionName = *fileData;\n      linkedSection = DAT_001279b8;\n      do {\n        stringComparisonResult = strcmp(sectionName,(char *)linkedSection[1]);\n        checkResult._4_4_ = 0;\n        checkResult._0_4_ = stringComparisonResult;\n        checkResult._8_4_ = comparisonResult;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        linkedSection = (long *)*linkedSection;\n      } while (linkedSection != (long *)0x0);\n    }\n    result = checkResult._8_4_;\n    if (((((isLinuxBinary == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (checkResult._8_4_ = result, checkResult._0_8_ = *(long *)(fileSize + 8),\n         *(int *)(*(long *)(fileSize + 8) + 8) != 5)) ||\n        ((checkResult._0_8_ = (ulong)fileData[0x1a], *(int *)(fileData[0x1a] + 4) != 7 ||\n         (checkResult = compare_strings_00113fb0(*fileData,\".gnu.build.attributes\"), checkResult[0] == '\\0')))) &&\n       ((*(byte *)((long)fileData + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(checkResult._1_7_,fileData[8] == (char *)0x0) |\n             CONCAT31(checkResult._9_3_,fileData[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_file_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "handle_section_length_error_001083de",
                "unaff_RBX": "sectionPtr",
                "unaff_EBP": "errorValue",
                "uVar1": "sectionLength",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionLengthError_001083de(void)\n\n{\n  undefined8 sectionLength;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  undefined4 errorValue;\n  \n  sectionLength = *sectionPtr;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_00119dd0(errorMessage,sectionLength,errorValue);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "handle_section_length_error_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880",
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "param_1": "data",
                "param_2": "size",
                "lVar1": "ptr",
                "cVar2": "result",
                "__ptr": "extractedPtr",
                "uVar3": "sizeAsUnsigned",
                "uVar4": "sizeMinusOne",
                "local_5a": "formattedString"
            },
            "code": "\nvoid initializeDataStructure_0010b948(long data,uint size)\n\n{\n  long ptr;\n  char result;\n  void *extractedPtr;\n  ulong sizeAsUnsigned;\n  uint sizeMinusOne;\n  char formattedString [50];\n  \n  sizeMinusOne = size - 1;\n  sizeAsUnsigned = (ulong)size;\n  if ((sizeMinusOne < 0x10) && (ptr = *(long *)(data + 0xf8 + (ulong)sizeMinusOne * 8), ptr != 0)) {\n    initialize_data_struct_00109cf4(data,ptr,sizeAsUnsigned);\n    return;\n  }\n  result = initialize_data_structure_0010b800(data,4,0);\n  if (result != '\\0') {\n    extractedPtr = (void *)extract_and_free_pointer_00109b2f(data);\n    ptr = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = ptr + 1;\n    if (sizeMinusOne < 0x10) {\n      *(long *)(data + 0xf8 + (ulong)sizeMinusOne * 8) = ptr;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",ptr,extractedPtr,sizeAsUnsigned);\n    free(extractedPtr);\n    initialize_data_struct_00109b52(data,formattedString,ptr,1,sizeAsUnsigned);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010b800",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104966",
                "FUN_00116490",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010827b",
                "FUN_00104cc1",
                "FUN_0010bf20",
                "FUN_00108b3e",
                "FUN_00108072",
                "FUN_00114e50",
                "FUN_00104a35",
                "FUN_00107976",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00115530",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00108fb9",
                "FUN_00115dc0",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0011256b",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_00114690",
                "FUN_00115b70",
                "FUN_0010e2f0",
                "FUN_00119970",
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010882c",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010be88",
                "FUN_0010543c",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_00112996",
                "FUN_0010dac0",
                "FUN_00108916",
                "FUN_00108808",
                "FUN_0011173a",
                "FUN_0010871c",
                "FUN_001086af",
                "FUN_00109a32",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010808f",
                "FUN_0010da0b",
                "FUN_00108200",
                "FUN_0010551d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010bc80",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_00104920"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "param_1": "source",
                "param_2": "debug_info",
                "iVar1": "source_value",
                "__format": "format_str",
                "piVar3": "result",
                "plVar4": "current_info",
                "bVar5": "is_circular",
                "local_18": "visited_info",
                "local_10": "current_source"
            },
            "code": "\n\n\nint * find_real_type_00112b6e(int *source,long *debug_info)\n\n{\n  int source_value;\n  undefined8 uVar2;\n  char *format_str;\n  int *result;\n  long *current_info;\n  bool is_circular;\n  long *visited_info;\n  int *current_source;\n  \n  source_value = *source;\n  if ((source_value != 1) && (1 < source_value - 0x16U)) {\n    return source;\n  }\n  current_info = debug_info;\n  while (current_info != (long *)0x0) {\n    if ((source == (int *)current_info[1]) ||\n       (is_circular = current_info == (long *)*current_info, current_info = (long *)*current_info, is_circular)) {\n      uVar2 = get_next_value_001129f4(source,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_str = (char *)dcgettext(0);\n      fprintf(_stderr,format_str,uVar2);\n      return (int *)0x0;\n    }\n  }\n  visited_info = debug_info;\n  current_source = source;\n  if (source_value - 0x16U < 2) {\n    result = (int *)find_real_type_00112b6e((*(undefined8 **)(source + 4))[1],&visited_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(source + 4);\n  if (source == result) {\n    return source;\n  }\n  if (result == (int *)0x0) {\n    return source;\n  }\n  result = (int *)find_real_type_00112b6e(result,&visited_info);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "find_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_and_update_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "value_1",
                "param_4": "value_2",
                "param_5": "value_3",
                "param_6": "flag_1",
                "param_7": "flag_2",
                "uVar1": "result",
                "__s": "str_ptr_1",
                "__s_00": "str_ptr_2",
                "sVar2": "str_len",
                "cVar3": "char_var",
                "extract_and_free_pointer_00109b2f": "extract_and_free_pointer",
                "process_data_0010a69a": "process_data",
                "xmalloc": "allocate_memory",
                "strlen": "get_string_length",
                "sprintf": "format_string",
                "free": "release_memory"
            },
            "code": "\nundefined4\nprocess_and_update_data_0010a83e(long data_ptr,undefined8 param_ptr,ulong value_1,undefined value_2,ulong value_3,\n            byte flag_1,byte flag_2)\n\n{\n  undefined4 result;\n  char *str_ptr_1;\n  char *str_ptr_2;\n  size_t str_len;\n  char char_var;\n  \n  if (((flag_2 ^ 1) & flag_1) == 0) {\n    str_ptr_1 = (char *)0x0;\n    char_var = '\\0';\n  }\n  else {\n    char_var = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    str_ptr_1 = (char *)extract_and_free_pointer();\n    value_3 = value_3 & 0xffffffff;\n    value_1 = value_1 & 0xffffffff;\n  }\n  result = process_data(data_ptr,param_ptr,value_1,value_2,value_3);\n  if ((char)result != '\\0') {\n    if (flag_1 == 0) {\n      return result;\n    }\n    if (flag_2 == 0) {\n      if (str_ptr_1 == (char *)0x0) {\n        return 0;\n      }\n      str_len = strlen(str_ptr_1);\n      str_ptr_2 = (char *)xmalloc(str_len + 3);\n      sprintf(str_ptr_2,\"~%%%s\",str_ptr_1);\n      release_memory(str_ptr_1);\n      if (char_var != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      str_ptr_2 = (char *)xmalloc(0x14);\n      sprintf(str_ptr_2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = str_ptr_2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_update_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "initialize_data_structure_00113d6e",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "lVar1": "data_structure_ptr",
                "puVar2": "ptr_to_data",
                "xmalloc": "allocate_memory"
            },
            "code": "\nlong initialize_data_structure_00113d6e(undefined8 input_param1,undefined8 input_param2)\n\n{\n  long data_structure_ptr;\n  undefined8 *ptr_to_data;\n  \n  data_structure_ptr = initialize_data_structure_00113d6e_00112904(0xb,0);\n  if (data_structure_ptr != 0) {\n    ptr_to_data = (undefined8 *)xmalloc(0x10);\n    *ptr_to_data = input_param1;\n    ptr_to_data[1] = input_param2;\n    *(undefined8 **)(data_structure_ptr + 0x10) = ptr_to_data;\n  }\n  return data_structure_ptr;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_00104a35",
                "FUN_0010c1c6",
                "FUN_00109b2f",
                "FUN_0010e918",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_00108466",
                "FUN_001163d0",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0011256b",
                "FUN_0010eafe",
                "FUN_001081e9",
                "FUN_0010ee3f",
                "FUN_00114690",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_00109ed3",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00114b84",
                "FUN_0010a94e",
                "FUN_0010551d",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_0010d21c",
                "FUN_00108863",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010b0fa",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "functionPointer1",
                "param_2": "functionPointer2",
                "param_3": "flag"
            },
            "code": "\nvoid executeFunction_00114d50(long functionPointer1,long functionPointer2,uint flag)\n\n{\n  if (*(int *)(*(long *)(functionPointer1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(functionPointer2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(functionPointer2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(functionPointer1 + 8) + 0x380) + 0x78))(functionPointer1,flag != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00114d60",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00113f50",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "fileStream",
                "param_2": "errorCode",
                "uVar1": "defaultMessage",
                "pcVar2": "translatedString"
            },
            "code": "\nvoid printUsage_00108916(FILE *fileStream,int errorCode)\n\n{\n  undefined8 defaultMessage;\n  char *translatedString;\n  \n  defaultMessage = DAT_001275e0;\n  translatedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(fileStream,translatedString,defaultMessage);\n  translatedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(fileStream,translatedString);\n  translatedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(fileStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(fileStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(fileStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(fileStream,translatedString);\n  print_supported_targets_00104a35(DAT_001275e0,fileStream);\n  if (errorCode == 0) {\n    translatedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(fileStream,translatedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_information_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "errorMessage",
                "param_10": "modifiedStringLength",
                "param_11": "modifiedString",
                "param_12": "additionalErrorMessage",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "conditionFlag",
                "iVar1": "bfdError",
                "uVar2": "errorMessageAddress",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localVar3",
                "local_f0": "localVar4",
                "local_e8": "localCharArray",
                "local_c8": "localVar5",
                "local_c0": "localVar6",
                "local_b8": "localVar7",
                "local_a8": "localVar8",
                "local_98": "localVar9",
                "local_88": "localVar10",
                "local_78": "localVar11",
                "local_68": "localVar12",
                "local_58": "localVar13",
                "local_48": "localVar14"
            },
            "code": "\n\n\nvoid printErrorInformation_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long errorMessage,long modifiedStringLength,long *modifiedString,char *additionalErrorMessage,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char conditionFlag;\n  int bfdError;\n  undefined8 errorMessageAddress;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localCharArray [32];\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  \n  if (conditionFlag != '\\0') {\n    localVar7 = errorCode1;\n    localVar8 = errorCode2;\n    localVar9 = errorCode3;\n    localVar10 = errorCode4;\n    localVar11 = errorCode5;\n    localVar12 = errorCode6;\n    localVar13 = errorCode7;\n    localVar14 = errorCode8;\n  }\n  localVar5 = param13;\n  localVar6 = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessageAddress = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageAddress = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (modifiedStringLength != 0) {\n    if (errorMessage == 0) {\n      errorMessage = get_modified_string_001125fa(modifiedStringLength);\n    }\n    if ((modifiedString != (long *)0x0) && (*modifiedString != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (additionalErrorMessage != (char *)0x0) {\n    localVar3 = &stack0x00000008;\n    localVar4 = localCharArray;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,additionalErrorMessage,&localVar1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessageAddress);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "bfd_errmsg",
                "fprintf",
                "fflush",
                "dcgettext",
                "fwrite",
                "bfd_get_error",
                "vfprintf",
                "FUN_001125fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_0010554f",
                "FUN_00104d25",
                "FUN_0010551d",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00108466",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_information_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_00109b52"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_data_structure_00113b4a",
                "param_1": "inputValue",
                "lVar1": "dataStructure",
                "initialize_data_structure_00112904": "createDataStructure"
            },
            "code": "\nlong initializeDataStructure_00113b4a(long inputValue)\n\n{\n  long dataStructure;\n  \n  if (inputValue != 0) {\n    dataStructure = createDataStructure(0x15,0);\n    if (dataStructure == 0) {\n      dataStructure = 0;\n    }\n    else {\n      *(long *)(dataStructure + 0x10) = inputValue;\n    }\n    return dataStructure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "process_file_0010edb4",
                "param_1": "file_data",
                "param_2": "filename",
                "param_3": "length",
                "param_4": "current_size",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "uVar3": "status",
                "in_R10": "extra_param"
            },
            "code": "\nundefined8 process_file_0010edb4(long file_data,undefined8 filename,undefined4 length,ulong current_size)\n\n{\n  char result;\n  int comparison_result;\n  undefined8 status;\n  undefined8 extra_param;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < current_size) {\n    *(ulong *)(file_data + 0x1f0) = current_size;\n  }\n  comparison_result = filename_cmp(filename);\n  if (comparison_result != 0) {\n    result = process_string_0010e2f0(file_data,0x84,0,current_size,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = filename;\n  }\n  status = process_string_0010e2f0(file_data,0x44,length,current_size - *(long *)(file_data + 0x200),0,extra_param);\n  return status;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "process_file_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_00112996",
                "FUN_00108916",
                "FUN_0011173a",
                "FUN_0010bf20",
                "FUN_0010871c",
                "FUN_00108b3e",
                "FUN_00104a35",
                "FUN_001126c0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_0010c6be",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_0010bc80"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_and_string_0010e5db",
                "param_1": "ptr",
                "param_2": "num_iterations",
                "__ptr": "ptr_extracted_free",
                "__s": "str_extracted_free",
                "sVar2": "strlen_result",
                "__s_00": "str_modified",
                "in_R10": "data",
                "iVar3": "iteration_counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] process_data_and_string_0010e5db(long ptr,int num_iterations)\n\n{\n  char cVar1;\n  void *ptr_extracted_free;\n  char *str_extracted_free;\n  size_t strlen_result;\n  char *str_modified;\n  ulong data;\n  int iteration_counter;\n  undefined result [16];\n  \n  iteration_counter = 0;\n  do {\n    if (num_iterations <= iteration_counter) {\n      result = process_data_00109ed3(ptr,0x66,0,ptr + 0x188,ptr + 400,data);\n      return result;\n    }\n    if (*(char *)(*(long *)(ptr + 0x60) + 0x1c) == '\\0') {\n      ptr_extracted_free = (void *)extract_and_free_pointer_00109b2f(ptr);\n      free(ptr_extracted_free);\n    }\n    else {\n      str_extracted_free = (char *)extract_and_free_pointer_00109b2f(ptr);\n      strlen_result = strlen(str_extracted_free);\n      str_modified = (char *)xmalloc(strlen_result + 3);\n      sprintf(str_modified,\":t%s\",str_extracted_free);\n      free(str_extracted_free);\n      cVar1 = process_string_0010e2f0(ptr,0x80,0,0,str_modified);\n      if (cVar1 == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = data;\n        return result << 0x40;\n      }\n      free(str_modified);\n    }\n    iteration_counter = iteration_counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_and_string_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_before_exit_00104d25",
                "param_7": "unusedParam"
            },
            "code": "\nvoid cleanupBeforeExit_00104d25(void)\n\n{\n  undefined8 unusedParam;\n  \n  DAT_00127a20 = 1;\n  print_error_information_001126c0(0,unusedParam,0,0);\n  remove_and_free_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_before_exit_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "process_debug_info_0010551d",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "puVar3": "pointerVar3",
                "pcVar4": "functionVar4",
                "puVar5": "pointerVar5",
                "uVar6": "unsignedVar6",
                "uVar7": "unsignedVar7",
                "__s": "stringVar",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "uVar10": "unsignedVar10",
                "iVar11": "intVar11",
                "uVar12": "unsignedVar12",
                "uVar13": "unsignedVar13",
                "iVar14": "intVar14",
                "plVar15": "pointerVar15",
                "uVar16": "unsignedVar16",
                "uVar17": "unsignedVar17",
                "sVar18": "sizeVar18",
                "pcVar19": "pointerVar19",
                "sVar26": "sizeVar26",
                "lVar21": "longVar21",
                "lVar25": "longVar25",
                "lVar27": "longVar27",
                "puVar29": "pointerVar29",
                "uVar30": "unsignedVar30",
                "iVar31": "intVar31"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong processDebugInfo_0010551d(void)\n\n{\n  uint *pointerVar1;\n  byte byteVar2;\n  undefined *pointerVar3;\n  code *functionVar4;\n  undefined8 *pointerVar5;\n  ulong unsignedVar6;\n  ulong unsignedVar7;\n  char *stringVar;\n  char charVar8;\n  char charVar9;\n  uint unsignedVar10;\n  int intVar11;\n  uint unsignedVar12;\n  undefined4 unsignedVar13;\n  int intVar14;\n  long *pointerVar15;\n  undefined8 unsignedVar16;\n  undefined8 unsignedVar17;\n  size_t sizeVar18;\n  char *pointerVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long longVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long longVar25;\n  FILE *stringVar_00;\n  size_t sizeVar26;\n  long longVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *pointerVar29;\n  ulong unsignedVar30;\n  int intVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *pointerVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppointerVar37;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_information_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  pointerVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar9 = compare_strings_00113fb0(), charVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (longVar25 = *(long *)(unaff_RBP + 0x40), longVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar9 = bfd_get_full_section_contents();\n    if (charVar9 != '\\0') {\n      longVar27 = process_gnu_build_attribute_notes_001163d0();\n      unaff_RBX[2] = longVar27;\n      if ((longVar27 == longVar25) || (charVar9 = bfd_set_section_size(), charVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_information_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longVar25 = *(long *)(unaff_RBP + 8); longVar25 != 0; longVar25 = *(long *)(longVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointerVar29 != (undefined8 *)0x0; pointerVar29 = (undefined8 *)*pointerVar29) {\n    longVar25 = bfd_get_section_by_name();\n    if (longVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_information_001126c0(0);\n    }\n    else if ((*(byte *)(longVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_information_001126c0(0);\n    }\n    else {\n      sizeVar18 = *(size_t *)(longVar25 + 0x40);\n      stringVar_00 = fopen((char *)pointerVar29[2],\"w\");\n      if (stringVar_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_information_001126c0(pointerVar29[2],0,0);\n      }\n      else {\n        charVar9 = bfd_malloc_and_get_section();\n        if (charVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_information_001126c0(0);\n        }\n        else if ((sizeVar18 != 0) &&\n                (sizeVar26 = fwrite(in_stack_00000140,1,sizeVar18,stringVar_00), sizeVar26 != sizeVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          unsignedVar17 = pointerVar29[2];\n          unsignedVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(unsignedVar16,unsignedVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(stringVar_00);\n          return 0;\n        }\n        fclose(stringVar_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (longVar25 != 0) {\n      unsignedVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(unsignedVar17);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    longVar25 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      unsignedVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,in_stack_00000008,0,unsignedVar17,longVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        unsignedVar30 = uVar20;\n        unsignedVar6 = uVar24;\n        unsignedVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((unsignedVar30 = unsignedVar6, unsignedVar7 != 0 &&\n                 (unsignedVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            unsignedVar6 = uVar20;\n            unsignedVar7 = uVar22;\n          }\n        }\n        uVar20 = unsignedVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = improved_extract_and_process_debug_info_0010554f();\n    return uVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppointerVar37 = &PTR_sstringVartab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointerVar34 = puStack0000000000000020;\n    for (longVar25 = 0x18; longVar25 != 0; longVar25 = longVar25 + -1) {\n      *pointerVar34 = 0;\n      pointerVar34 = pointerVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerVar3 = *ppointerVar37;\n      longVar25 = bfd_get_section_by_name();\n      longVar27 = bfd_get_section_by_name();\n      if ((longVar25 != 0) && (longVar27 != 0)) {\n        longVar25 = *(long *)(longVar25 + 0x40);\n        __ptr = (void *)xmalloc(longVar25);\n        charVar9 = bfd_get_section_contents();\n        if (charVar9 == '\\0') {\n          unsignedVar13 = bfd_get_error();\n          bfd_errmsg(unsignedVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(longVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            unsignedVar13 = bfd_get_error();\n            bfd_errmsg(unsignedVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + longVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar2 = *(byte *)((long)pvVar36 + 4);\n                unsignedVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                longVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar18 = strlen(pcVar33);\n                      if (((sizeVar18 == 0) || (pcVar28 = pcVar33 + (sizeVar18 - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + longVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(intVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    unsignedVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,unsignedVar17,pointerVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)byteVar2,unsignedVar13,longVar27,pcVar33);\n                    charVar9 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar2);\n                    if (charVar9 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    unsignedVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,unsignedVar17,pointerVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppointerVar37 = ppointerVar37 + 2;\n    } while (ppointerVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar9 = process_debug_data_0010c892(), charVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      longVar25 = 0;\n      for (pointerVar15 = plVar32; pointerVar15 < plVar32 + in_stack_00000010; pointerVar15 = pointerVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longVar25 != 0) || (longVar25 = initialize_data_structure_00112894(), longVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sizeVar18 = strlen(pcVar28), pcVar28[sizeVar18 - 1] == '\\')) &&\n                   (pointerVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pointerVar19 = (char *)xstrdup(pcVar28);\n              sizeVar18 = strlen(pointerVar19);\n              pointerVar19[sizeVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pointerVar19,*(undefined8 *)(pointerVar15[1] + 8),0);\n              free(pointerVar19);\n              free(pcVar33);\n              pointerVar15 = pointerVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pcVar28);\n            in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,longVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      cleanup_memory_00108863();\n      if ((longVar25 != 0) && (charVar9 = process_debug_data_0010c892(), charVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      pointerVar29 = (undefined8 *)&stack0x00000148;\n      for (longVar25 = 0x22; longVar25 != 0; longVar25 = longVar25 + -1) {\n        *(undefined4 *)pointerVar29 = 0;\n        pointerVar29 = (undefined8 *)((long)pointerVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        longVar25 = plVar32[in_stack_000000d0];\n        charVar8 = bfd_coff_get_syment();\n        longVar27 = in_stack_000000d8;\n        if (charVar8 == '\\0') {\n          unsignedVar13 = bfd_get_error();\n          bfd_errmsg(unsignedVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          unsignedVar17 = dcgettext(0,pcVar33,5);\n          print_error_message_00119ed0(unsignedVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(longVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar8 = bfd_coff_get_auxent(), charVar8 == '\\0')) {\n          unsignedVar13 = bfd_get_error();\n          bfd_errmsg(unsignedVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar8 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (charVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar8 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar11 = strcmp(pcVar33,\".bb\");\n              if (intVar11 == 0) {\n                charVar8 = start_block_debugging_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar11 = strcmp(pcVar33,\".eb\");\n              if (intVar11 == 0) {\n                charVar8 = debug_end_block_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar11 = strcmp(pcVar33,\".bf\");\n              if (intVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longVar27 = parse_coff_type_0010dac0();\n                  if ((longVar27 == 0) ||\n                     (charVar9 = initialize_debug_record_0010bc80(puStack0000000000000020), charVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar11 = in_stack_00000118 - 1;\n                    }\n                    longVar25 = *(long *)(*(long *)(longVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar31 = _uStack0000000000000048[4];\n                      if (intVar31 == 0) break;\n                      charVar8 = record_line_debug_information_0010bf86(puStack0000000000000020,intVar11 + intVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + longVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar11 = strcmp(pcVar33,\".ef\");\n                if (intVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar9 != '\\0') {\n                  charVar9 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (charVar9 == '\\0') goto LAB_00105981;\n                  charVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              unsignedVar17 = dcgettext(0,pcVar33,5);\n              print_error_message_00119ed0(unsignedVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar21 = parse_coff_type_0010dac0();\n          if (longVar21 == 0) goto LAB_00105981;\n          charVar8 = process_record_00112a33(&stack0x00000140,longVar25,longVar27);\n        }\njoined_r0x00107247:\n        if (charVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278b0 + in_stack_00000010;\n        pointerVar15 = DAT_001278b0;\n        do {\n          unsignedVar10 = *(uint *)(*pointerVar15 + 0x18);\n          if ((unsignedVar10 & 0x1000000) != 0) {\n            *(uint *)(*pointerVar15 + 0x18) = unsignedVar10 & 0xfeffffff;\n          }\n          pointerVar15 = pointerVar15 + 1;\n        } while (plVar32 != pointerVar15);\n      }\n    }\n    else {\n      for (longVar25 = *(long *)(in_stack_00000008 + 0x90); longVar25 != 0; longVar25 = *(long *)(longVar25 + 8)\n          ) {\n        if (*(long *)(longVar25 + 0xe8) != 0) {\n          pointerVar1 = (uint *)(*(long *)(longVar25 + 0xe8) + 0x18);\n          *pointerVar1 = *pointerVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar11 = bfd_get_error();\n      if (intVar11 != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    longVar25 = xmalloc();\n    plVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278a8 = longVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar11 = DAT_001279a0;\n        pointerVar15 = (long *)plVar32[_in_stack_00000018];\n        functionVar4 = (code *)pointerVar15[4];\n        unsignedVar10 = *(uint *)(pointerVar15 + 3);\n        pcVar33 = (char *)pointerVar15[1];\n        pcVar28 = pcVar33;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          intVar31 = 0;\n          pointerVar29 = DAT_001279a8;\n          while( true ) {\n            if ((intVar11 <= intVar31) || (pointerVar19 = (char *)pointerVar29[5], pointerVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointerVar19 != \"\") break;\nLAB_0010750b:\n            intVar31 = intVar31 + 1;\n          }\n          intVar14 = strcmp(pointerVar19,pcVar33);\n          if (intVar14 != 0) {\n            pointerVar29 = (undefined8 *)*pointerVar29;\n            goto LAB_0010750b;\n          }\n          free(pointerVar19);\n          uVar20 = uVar24 + 1;\n          pointerVar29[5] = \"\";\n          unsignedVar16 = initialize_section_data_0011a2e0(pointerVar29);\n          unsignedVar17 = DAT_001278d0;\n          *(undefined8 *)(longVar25 + uVar24 * 8) = unsignedVar16;\n          longVar27 = htab_elements(unsignedVar17);\n          if ((longVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar9 = *pcVar33;\n          if (charVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            longVar27 = unaff_R14[1];\n            charVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longVar27 = htab_elements(DAT_001278d0);\n        uVar20 = uVar24;\n        if ((longVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intVar11 == 0)) {\n            unsignedVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(unsignedVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        longVar27 = htab_find(DAT_001278d0);\n        if (((longVar27 == 0) || (pcVar28 = *(char **)(longVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = DAT_001278d8, (unsignedVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar11 = strcmp(*ppcVar35,pcVar33);\n            if (intVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        pointerVar15[1] = (long)pcVar28;\n        charVar9 = *pcVar28;\n        if (charVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127908;\n        longVar27 = unaff_R14[1];\n        if (*(char *)(longVar27 + 0x1c) == charVar9) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((unsignedVar10 & 0x82) == 0 && (functionVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            pointerVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          charVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar9 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            pointerVar15[1] = (long)pcVar28;\n            sizeVar18 = strlen(pcVar28);\n            longVar27 = sizeVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = charVar9;\n          pointerVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sizeVar18 = strlen(pcVar28);\n            sizeVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sizeVar26 + sizeVar18 + 1);\n            pointerVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127908;\n            if ((*(char *)(longVar27 + 0x1c) != '\\0') && (charVar9 != *(char *)(longVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar18 = strlen(pcVar28);\n            longVar27 = sizeVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pointerVar19 = (char *)xmalloc(longVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar18 = strlen(pcVar33);\n              pointerVar19 = (char *)xmalloc(sizeVar18 + longVar27);\n            }\n            pcVar33 = pointerVar19 + 1;\n            *pointerVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          stringVar = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127908);\n            sizeVar18 = strlen(stringVar);\n            pcVar33 = pcVar33 + sizeVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          pointerVar15[1] = (long)pointerVar19;\n          pcVar28 = pointerVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((unsignedVar10 & 0x20) == 0) &&\n           (((unsignedVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointerVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((unsignedVar10 & 0x82) != 0 || ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar11 = bfd_decode_symclass(pointerVar15), intVar11 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              longVar27 = htab_find();\n              if (longVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((unsignedVar10 & 0x82) == 0) && (functionVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((unsignedVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (longVar27 = *(long *)(pointerVar15[4] + 0xd0), longVar27 == 0)) ||\n                 (*(long *)(longVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar9 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          longVar27 = htab_find();\n          if (longVar27 != 0) {\nLAB_0010687f:\n            unsignedVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(unsignedVar17);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((unsignedVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longVar27 = htab_find();\n          if (longVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((unsignedVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            longVar27 = htab_find();\n            if (longVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar9 = process_section_001159d0(pointerVar15[4]);\n          if (charVar9 == '\\0') {\n            if (((unsignedVar10 & 0x800002) == 0) && (functionVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((unsignedVar10 & 0x82) != 0) {\n                charVar9 = check_pattern_exists_00115d70(pcVar28);\n                if ((charVar9 == '\\0') &&\n                   ((longVar27 = htab_elements(DAT_001279d8), longVar27 == 0 ||\n                    (charVar9 = check_pattern_exists_00115d70(pcVar28), charVar9 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (unsignedVar12 = *(uint *)(pointerVar15 + 3), (unsignedVar12 & 0x200000) != 0)) ||\n                       (longVar27 = *pointerVar15, longVar27 == 0)) ||\n                      ((*(int *)(*(long *)(longVar27 + 8) + 8) != 5 || (*(long *)(longVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointerVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  unsignedVar12 = *(uint *)(pointerVar15 + 3);\n                }\n                *(uint *)(pointerVar15 + 3) = unsignedVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((unsignedVar10 & 1) != 0) && (charVar9 = check_pattern_exists_00115d70(pcVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charVar9 = check_pattern_exists_00115d70(pcVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longVar25 + uVar24 * 8) = pointerVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      pointerVar29 = DAT_001279a8;\n      intVar11 = DAT_001279a0;\n      for (longVar27 = 0; longVar27 < intVar11; longVar27 = longVar27 + 1) {\n        pcVar33 = (char *)pointerVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          longVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          unsignedVar17 = initialize_section_data_0011a2e0(pointerVar29,in_stack_00000008);\n          *(undefined8 *)(longVar25 + longVar21) = unsignedVar17;\n          intVar11 = DAT_001279a0;\n        }\n        else if (pcVar33 != \"\") {\n          unsignedVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(unsignedVar17,pcVar33);\n        }\n        pointerVar29 = (undefined8 *)*pointerVar29;\n      }\n    }\n    bVar38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(longVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar11 != 5) && (intVar11 != 2)) {\n        unsignedVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        unsignedVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_information_001126c0(0,in_stack_00000008,0,unsignedVar16,unsignedVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar9 = reverse_and_improve_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar9 == '\\0') goto LAB_00105d8c;\n      longVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      longVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((longVar25 == 0) || (longVar27 == 0)) ||\n          (charVar9 = bfd_set_section_size(longVar25,in_stack_00000110), charVar9 == '\\0')) ||\n         (charVar9 = bfd_set_section_size(longVar27,in_stack_00000140), charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        unsignedVar17 = dcgettext(0,pcVar33,5);\n        print_error_information_001126c0(0,in_stack_00000008,0,unsignedVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(longVar25 + 0x7c) = 2;\n      *(undefined4 *)(longVar27 + 0x7c) = 0;\n      charVar9 = bfd_set_section_contents\n                        (in_stack_00000008,longVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar9 == '\\0') ||\n         (charVar9 = bfd_set_section_contents\n                            (in_stack_00000008,longVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    longVar25 = htab_elements(DAT_001279f8);\n    if (((longVar25 != 0) ||\n        (((((((longVar25 = htab_elements(DAT_00127a08), longVar25 != 0 ||\n              (longVar25 = htab_elements(DAT_001279e8), longVar25 != 0)) ||\n             (longVar25 = htab_elements(DAT_001279e0), longVar25 != 0)) ||\n            ((longVar25 = htab_elements(DAT_001279d8), longVar25 != 0 ||\n             (longVar25 = htab_elements(DAT_001279d0), longVar25 != 0)))) ||\n           (longVar25 = htab_elements(DAT_001278d0), longVar25 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,process_and_print_files_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,process_section_00116110,in_stack_00000008);\n  for (pointerVar29 = DAT_001279c0; pointerVar5 = DAT_001279b8, pointerVar29 != (undefined8 *)0x0;\n      pointerVar29 = (undefined8 *)*pointerVar29) {\n    charVar9 = bfd_set_section_contents(in_stack_00000008,pointerVar29[5],pointerVar29[4],0,pointerVar29[3]);\n    if (charVar9 == '\\0') {\n      print_error_information_001126c0(0,in_stack_00000008,pointerVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pointerVar5 != (undefined8 *)0x0; pointerVar5 = (undefined8 *)*pointerVar5) {\n    unsignedVar17 = *(undefined8 *)(pointerVar5[5] + 0x60);\n    charVar9 = bfd_set_section_contents(in_stack_00000008,unsignedVar17,pointerVar5[4],0,pointerVar5[3]);\n    if (charVar9 == '\\0') {\n      print_error_information_001126c0(0,in_stack_00000008,unsignedVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      unsignedVar17 = *unaff_R14;\n      unsignedVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(unsignedVar16,unsignedVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       longVar25 = DAT_00127a10, charVar9 != '\\0')) {\n      unsignedVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)unsignedVar10;\n      if ((char)unsignedVar10 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar24;\n        }\n        charVar9 = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        uVar20 = DAT_00127910;\n        if (charVar9 != '\\0') {\n          return uVar24;\n        }\n        unsignedVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(unsignedVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          unsignedVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(unsignedVar17);\n          return uVar24;\n        }\n        unsignedVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(unsignedVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return uVar24;\n      }\n      unsignedVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_information_001126c0(0,in_stack_00000008,0,unsignedVar17);\n    }\n    else {\n      unsignedVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,in_stack_00000008,0,unsignedVar17,longVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  pointerVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointerVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointerVar29[0x1a] + 4) == 7)) &&\n       (charVar9 = compare_strings_00113fb0(*pointerVar29,\".gnu.build.attributes\"), charVar9 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      pointerVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == pointerVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charVar9 = bfd_set_section_contents(in_stack_00000008,pointerVar29,plVar32[1],0,plVar32[2]);\n          if (charVar9 == '\\0') {\n            unsignedVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_information_001126c0(0,in_stack_00000008,pointerVar29,unsignedVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = pointerVar15;\n          if (*(undefined8 **)(*pointerVar15 + 0x60) == pointerVar29) goto LAB_0010625f;\n          plVar32 = (long *)pointerVar15[3];\n          pointerVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      unsignedVar17 = dcgettext(0,pcVar33,5);\n      print_error_information_001126c0(0,in_stack_00000008,pointerVar29,unsignedVar17);\n    }\nLAB_001061be:\n    pointerVar29 = (undefined8 *)pointerVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00104943",
                "FUN_00105828",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid hashString_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "update_records_0010c1c6",
                "param_1": "record",
                "param_2": "userData",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "__ptr": "recordPtr",
                "puVar1": "nextRecordPtr",
                "cVar2": "result"
            },
            "code": "\nundefined updateRecords_0010c1c6(undefined8 record,long userData,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextRecordPtr;\n  char result;\n  undefined8 *recordPtr;\n  \n  recordPtr = *(undefined8 **)(userData + 0x78);\n  while( true ) {\n    if (recordPtr == (undefined8 *)0x0) {\n      *(undefined8 *)(userData + 0x78) = 0;\n      return 1;\n    }\n    result = record_variable_0010c05d(record,recordPtr[1],recordPtr[2],*(undefined4 *)(recordPtr + 3),recordPtr[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    nextRecordPtr = (undefined8 *)*recordPtr;\n    free(recordPtr);\n    recordPtr = nextRecordPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "update_records_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "inputData",
                "uVar1": "numElements",
                "lVar2": "currentElement",
                "cVar3": "patternExists",
                "puVar4": "outputArray",
                "puVar5": "nextOutputArray",
                "unaff_RBP": "basePointer",
                "uVar6": "index",
                "unaff_R13": "dataArray",
                "check_pattern_exists_00115d70": "checkPatternExists"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint numElements;\n  long currentElement;\n  char patternExists;\n  long inputData;\n  undefined8 *outputArray;\n  undefined8 *nextOutputArray;\n  long basePointer;\n  ulong index;\n  undefined8 *dataArray;\n  \n  numElements = *(uint *)(inputData + 0x78);\n  if (DAT_00127a2c == 7) {\n    outputArray = dataArray;\n    for (index = 0; index != numElements; index = index + 1) {\n      nextOutputArray = outputArray;\n      if (((*(long **)dataArray[index] != (long *)0x0) &&\n          (currentElement = **(long **)dataArray[index], currentElement != 0)) &&\n         (patternExists = checkPatternExists(*(undefined8 *)(currentElement + 8),DAT_00127a08), patternExists != '\\0')) {\n        nextOutputArray = outputArray + 1;\n        *outputArray = dataArray[index];\n      }\n      outputArray = nextOutputArray;\n    }\n    *outputArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(basePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_content_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofIndicator",
                "piVar2": "errNum",
                "pcVar3": "errMsg",
                "uVar4": "errorMsg",
                "__stream": "filePointer",
                "uVar5": "fileInfoArg",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readFileAndStoreContent_00114d60(long fileInfo)\n\n{\n  int eofIndicator;\n  int *errNum;\n  char *errMsg;\n  undefined8 errorMsg;\n  FILE *filePointer;\n  undefined8 fileInfoArg;\n  size_t bytesRead;\n  long totalBytesRead;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errNum = __errno_location();\n    errMsg = strerror(*errNum);\n    fileInfoArg = *(undefined8 *)(fileInfo + 0x10);\n    errorMsg = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit_00119dd0(errorMsg,fileInfoArg,errMsg);\n  }\n  bufferSize = 0x1000;\n  totalBytesRead = 0;\n  fileInfoArg = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = fileInfoArg;\n  while( true ) {\n    eofIndicator = feof(filePointer);\n    if (eofIndicator != 0) {\n      *(long *)(fileInfo + 0x18) = totalBytesRead;\n      fclose(filePointer);\n      return;\n    }\n    if (totalBytesRead == bufferSize) {\n      bufferSize = totalBytesRead * 2;\n      fileInfoArg = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = fileInfoArg;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + totalBytesRead),1,bufferSize - totalBytesRead,filePointer);\n    eofIndicator = ferror(filePointer);\n    if (eofIndicator != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  fileInfoArg = *(undefined8 *)(fileInfo + 0x10);\n  errorMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit_00119dd0(errorMsg,fileInfoArg);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_store_content_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_missing_section_00108808",
                "unaff_RBP": "stackFrame",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findMissingSection_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long stackFrame;\n  \n  sectionAddress = *(undefined8 *)(stackFrame + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_missing_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "lineIndex",
                "unaff_R13": "message",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "format",
                "in_stack_00000010": "returnAddress",
                "ppbVar2": "slotPtr",
                "pbVar3": "tempPtr",
                "bVar4": "currentCharValue",
                "pbVar5": "nextLine",
                "pbVar6": "tempPtr2",
                "pbVar7": "nextChar"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **slotPtr;\n  byte *tempPtr;\n  byte currentCharValue;\n  byte *nextLine;\n  int lineIndex;\n  byte *tempPtr2;\n  undefined8 message;\n  byte *nextChar;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 format;\n  undefined8 *returnAddress;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    currentCharValue = *currentLine;\n    nextChar = currentLine;\n    if (currentCharValue == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        nextChar = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)currentCharValue < '\\v') {\n      if (currentCharValue != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (currentCharValue != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        nextChar = currentLine + 1;\n      }\n    }\n    currentCharValue = *currentChar;\n    while ((currentCharValue == 0x20 || (tempPtr2 = currentChar, currentCharValue == 9))) {\n      tempPtr2 = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentCharValue = *tempPtr2;\n    }\n    do {\n      if ((currentCharValue == 10) || (currentCharValue == 0xd)) goto LAB_00114676;\n      if (currentCharValue == 0) goto LAB_00114599;\n      currentCharValue = tempPtr2[1];\n      tempPtr2 = tempPtr2 + 1;\n    } while ((currentCharValue != 0x20) && (currentCharValue != 9));\n    if ((char)currentCharValue < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentCharValue = tempPtr2[1];\n      if ((((((currentCharValue == 9) || (currentCharValue == 0x20)) &&\n            ((currentCharValue = tempPtr2[2], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n           ((currentCharValue = tempPtr2[3], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n          ((currentCharValue = tempPtr2[4], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n         ((currentCharValue = tempPtr2[5], currentCharValue == 9 || (currentCharValue == 0x20)))) {\n        currentCharValue = tempPtr2[6];\n        tempPtr = tempPtr2 + 6;\n        if ((currentCharValue == 9) || (currentCharValue == 0x20)) {\n          do {\n            do {\n              currentCharValue = tempPtr[1];\n              tempPtr = tempPtr + 1;\n            } while (currentCharValue == 0x20);\n          } while (currentCharValue == 9);\n        }\n      }\n      if ((0xd < currentCharValue) || ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(uVar1,format,lineIndex);\n      }\n    }\nLAB_00114599:\n    *tempPtr2 = 0;\n    if (currentChar < tempPtr2) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = currentChar;\n    }\n    lineIndex = lineIndex + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (nextChar[1] == 0) {\n      *returnAddress = message;\n      return;\n    }\n  } while( true );\n  if (currentCharValue == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "errorMessage",
                "local_20": "scannedVma"
            },
            "code": "\nvoid checkAndPrintError_00119940(undefined8 inputParam1,undefined8 inputParam2)\n\n{\n  undefined8 errorMessage;\n  char *scannedVma [2];\n  \n  bfd_scan_vma(inputParam1,scannedVma,0);\n  if (*scannedVma[0] == '\\0') {\n    return;\n  }\n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,inputParam2,inputParam1);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "destination",
                "param_2": "input",
                "param_3": "condition",
                "in_RAX": "address"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 destination,long input,uint condition)\n\n{\n  long address;\n  \n  if ((condition == 2) && (*(int *)(*(long *)(input + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(input + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(address + 0x380) + 0x78))(destination,condition != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_and_check_files_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "input4",
                "param_5": "input5",
                "cVar1": "result",
                "uVar2": "updatedValue",
                "puVar3": "ptr",
                "auVar4": "auxiliaryArray"
            },
            "code": "\nundefined8\nprocessAndCheckFiles_00113a4d(undefined8 input1,undefined8 input2,long data,undefined8 input4,\n            undefined8 input5)\n\n{\n  char result;\n  undefined8 updatedValue;\n  undefined8 *ptr;\n  undefined auxiliaryArray [16];\n  \n  result = process_and_check_files_00112502(input1,input2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = update_and_process_values_0010ec73(input2,*(undefined8 *)(data + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = process_data_001135a5(input1,input2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = processAndCheckFiles_00113a4d(input1,input2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    auxiliaryArray = process_and_check_files_00112502(input1,input2,*(undefined8 *)(data + 0x20));\n    if (auxiliaryArray[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return auxiliaryArray._0_8_;\n      }\n      updatedValue = update_max_value_0010ed2c(input2,*(undefined8 *)(data + 0x20),auxiliaryArray._8_8_,input5);\n      return updatedValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_00112502",
                "FUN_0010ec73"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_and_check_files_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryAddress",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryAddress;\n  undefined8 returnValue;\n  \n  returnValue = returnValue;\n  free(memoryAddress);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010b0fa",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_001199d0",
                "FUN_0010aa53"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_structure_00113b71",
                "param_1": "input_value",
                "lVar1": "data_structure_ptr"
            },
            "code": "\nlong initialize_data_structure_00113b71(long input_value)\n\n{\n  long data_structure_ptr;\n  \n  if (input_value != 0) {\n    data_structure_ptr = initialize_data_structure_00113b71_00112904(0x14,0);\n    if (data_structure_ptr == 0) {\n      data_structure_ptr = 0;\n    }\n    else {\n      *(long *)(data_structure_ptr + 0x10) = input_value;\n    }\n    return data_structure_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_data_struct_00109dfe",
                "param_1": "dataStructPointer",
                "lVar1": "currentValue",
                "local_40": "formattedString"
            },
            "code": "\nvoid initializeOrIncrementDataStruct_00109dfe(long dataStructPointer)\n\n{\n  long currentValue;\n  char formattedString [40];\n  \n  if (*(long *)(dataStructPointer + 0x70) != 0) {\n    initialize_data_struct_00109cf4(dataStructPointer,*(long *)(dataStructPointer + 0x70),0);\n    return;\n  }\n  currentValue = *(long *)(dataStructPointer + 0x68);\n  *(long *)(dataStructPointer + 0x68) = currentValue + 1;\n  *(long *)(dataStructPointer + 0x70) = currentValue;\n  sprintf(formattedString,\"%ld=%ld\",currentValue,currentValue);\n  initialize_data_struct_00109b52(dataStructPointer,formattedString,currentValue,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_data_struct_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "param",
                "__s": "string",
                "sVar1": "length"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long param)\n\n{\n  char *string;\n  size_t length;\n  \n  if (*(long *)(param + 0x60) != 0) {\n    string = *(char **)(*(long *)(param + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      length = strlen(string);\n      *(undefined2 *)(string + length) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "merge_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "struct_ptr",
                "lVar2": "array_ptr",
                "__ptr": "temp_ptr",
                "pcVar3": "temp_str",
                "sVar4": "len_str1",
                "sVar5": "len_str2",
                "pcVar6": "result_str",
                "uVar7": "success",
                "lVar8": "result_len",
                "uVar9": "count",
                "uVar10": "index"
            },
            "code": "\nundefined8 mergeStrings_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long array_ptr;\n  void *temp_ptr;\n  char *temp_str;\n  size_t len_str1;\n  size_t len_str2;\n  char *result_str;\n  undefined8 success;\n  long result_len;\n  uint count;\n  ulong index;\n  \n  success = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_str = *(char **)(struct_ptr + 0x20), result_str != (char *)0x0)) {\n    len_str1 = strlen(*(char **)(struct_ptr + 8));\n    len_str2 = strlen(result_str);\n    array_ptr = *(long *)(struct_ptr + 0x28);\n    if (array_ptr == 0) {\n      result_len = len_str1 + len_str2 + 10;\n      index = 0;\n    }\n    else {\n      result_len = len_str1 + len_str2 + 0x1e;\n      index = 0;\n      while( true ) {\n        result_str = *(char **)(array_ptr + index * 8);\n        if (result_str == (char *)0x0) break;\n        len_str1 = strlen(result_str);\n        index = (ulong)((int)index + 1);\n        result_len = result_len + len_str1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      len_str1 = strlen(*(char **)(struct_ptr + 0x30));\n      result_len = result_len + len_str1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      len_str1 = strlen(*(char **)(struct_ptr + 0x38));\n      result_len = result_len + len_str1;\n    }\n    result_str = (char *)xmalloc(result_len);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(result_str,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      count = 0;\n      len_str1 = strlen(result_str);\n      sprintf(result_str + len_str1,\"!%u,\",index);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        index = (ulong)count;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        temp_str = *(char **)((long)temp_ptr + index * 8);\n        if (temp_str == (char *)0x0) break;\n        count = count + 1;\n        strcat(result_str,temp_str);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + index * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(result_str,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_str,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len_str1 = strlen(result_str);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result_str + len_str1) = 0x3b;\n    temp_str = *(char **)(struct_ptr + 0x38);\n    if (temp_str != (char *)0x0) {\n      strcpy(result_str + len_str1 + 1,temp_str);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = result_str;\n    success = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return success;\n}\n\n",
            "called": [
                "strcat",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "merge_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "dataInfo",
                "iVar1": "count",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "currentNode",
                "puVar5": "headNode"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 inputData,undefined8 outputData,long dataInfo)\n\n{\n  int count;\n  char result;\n  undefined8 returnValue;\n  undefined8 *currentNode;\n  undefined8 *headNode;\n  \n  if (6 < *(uint *)(dataInfo + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(dataInfo + 0x14)) {\n  case 0:\n    result = improve_and_process_data_00112c1f(inputData,outputData,*(undefined8 *)(dataInfo + 0x20),dataInfo);\n    if (result != '\\0') {\n      returnValue = process_and_update_string_0010e6a8(outputData,*(undefined8 *)(dataInfo + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = improve_and_process_data_00112c1f(inputData,outputData,*(undefined8 *)(dataInfo + 0x20),dataInfo);\n    if (result != '\\0') {\n      returnValue = process_and_format_string_0010e7c2(outputData,*(undefined8 *)(dataInfo + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = improve_and_process_data_00112c1f(inputData,outputData,*(undefined8 *)(*(long *)(dataInfo + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = generate_formatted_string_0010e9a0(outputData,*(undefined8 *)(dataInfo + 8),**(undefined4 **)(dataInfo + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(dataInfo + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    headNode = *(undefined8 **)(dataInfo + 0x20);\n    count = *(int *)(dataInfo + 0x18);\n    returnValue = *(undefined8 *)(dataInfo + 8);\n    result = process_and_check_files_00112502(inputData,outputData,*(undefined8 *)(headNode[2] + 0x18));\n    if (((result != '\\0') && (result = improve_and_process_data_00112c1f(inputData,outputData,*headNode,0), result != '\\0')) &&\n       (result = process_and_free_string_0010eafe(outputData,returnValue,count == 2), result != '\\0')) {\n      for (currentNode = (undefined8 *)headNode[1]; currentNode != (undefined8 *)0x0;\n          currentNode = (undefined8 *)*currentNode) {\n        result = improve_and_process_data_00112c1f(inputData,outputData,currentNode[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_string_0010ebb0(outputData,currentNode[1],*(undefined4 *)(currentNode + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      headNode = (undefined8 *)headNode[2];\n      while( true ) {\n        if (headNode == (undefined8 *)0x0) {\n          returnValue = initialize_value_00108f05(outputData);\n          return returnValue;\n        }\n        result = process_and_check_files_00113a4d(inputData,outputData,headNode);\n        if (result == '\\0') break;\n        headNode = (undefined8 *)*headNode;\n      }\n    }\n    break;\n  case 4:\n    returnValue = process_and_format_string_0010e842(outputData,*(undefined8 *)(dataInfo + 8),*(undefined8 *)(dataInfo + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = process_and_free_string_0010e8a9(*(undefined8 *)(dataInfo + 0x20),outputData,*(undefined8 *)(dataInfo + 8));\n    return returnValue;\n  case 6:\n    result = improve_and_process_data_00112c1f(inputData,outputData,**(undefined8 **)(dataInfo + 0x20),0);\n    if (result != '\\0') {\n      returnValue = process_and_send_data_0010e918(outputData,*(undefined8 *)(dataInfo + 8),\n                           *(undefined8 *)(*(long *)(dataInfo + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e8a9",
                "FUN_0010e842",
                "abort",
                "FUN_0010e918",
                "FUN_0010ebb0",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_00108f05",
                "FUN_0010e7c2",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "FUN_00112c1f",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = improve_and_process_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_update_string_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = improve_and_process_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_format_string_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = improve_and_process_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = generate_formatted_string_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_and_check_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = improve_and_process_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_and_free_string_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = improve_and_process_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = initialize_value_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = process_and_format_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = improve_and_process_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_modified_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_modified_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_modified_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_information_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_information_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_files_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_needed_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_information_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_files_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_files_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_information_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_information_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_information_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_information_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_information_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_information_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improved_extract_and_process_debug_info_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_data_structure_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_block_debugging_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_line_debug_information_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = initialize_section_data_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_exists_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_exists_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_exists_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_exists_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = initialize_section_data_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = reverse_and_improve_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_information_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_information_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_and_print_files_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_information_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_information_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_information_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_information_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_information_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)process_gnu_build_attribute_notes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_information_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_set_file_flags",
                "dcgettext",
                "FUN_001152b6",
                "FUN_001125fa",
                "bfd_get_arch",
                "printf",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_00104943",
                "FUN_00107976",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ee3f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "extract_and_initialize_data_structure_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "data",
                "iVar2": "comparisonResult",
                "pcVar3": "result",
                "plVar4": "dataPointer",
                "pcVar5": "tempResult",
                "sVar6": "stringLength",
                "__ptr": "pointer",
                "lVar7": "value",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * extractAndInitializeDataStructure_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint data;\n  int comparisonResult;\n  char *result;\n  long *dataPointer;\n  char *tempResult;\n  size_t stringLength;\n  void *pointer;\n  long value;\n  undefined localArray [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    data = *param3;\n    if (0x29 < data) break;\n    if (0x17 < data) {\n      switch(data) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)extractAndInitializeDataStructure_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)initialize_data_structure_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)initialize_data_structure_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)initialize_data_structure_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)initialize_data_structure_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        if (result == (char *)0x0) {\n          tempResult = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparisonResult = strcmp(result,\"signed char\");\n        if (comparisonResult == 0) {\nLAB_0010b406:\n          tempResult = (char *)update_data_structure_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"bool\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)initialize_data_structure_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"char\");\n        if (comparisonResult == 0) goto LAB_0010b406;\n        comparisonResult = strcmp(result,\"double\");\n        if ((comparisonResult == 0) || (comparisonResult = strcmp(result,\"long double\"), comparisonResult == 0)) {\n          tempResult = (char *)initialize_data_structure_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"float\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)initialize_data_structure_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"__float128\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)initialize_data_structure_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned char\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"int\");\n        if (comparisonResult == 0) {\nLAB_0010b504:\n          tempResult = (char *)update_data_structure_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned int\");\n        if (comparisonResult == 0) {\nLAB_0010b528:\n          tempResult = (char *)update_data_structure_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"long\");\n        if (comparisonResult == 0) goto LAB_0010b504;\n        comparisonResult = strcmp(result,\"unsigned long\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(result,\"__int128\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned __int128\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"short\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned short\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"void\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)initialize_data_structure_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"wchar_t\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(result,\"long long\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned long long\");\n        if (comparisonResult == 0) {\n          tempResult = (char *)update_data_structure_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"...\");\n        if (comparisonResult == 0) {\n          tempResult = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          tempResult = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          tempResult = (char *)dcgettext(0,tempResult,5);\n          fprintf(_stderr,tempResult);\n        }\n        tempResult = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return tempResult;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          pointer = (void *)initialize_data_structure_00113e17();\n        }\n        else {\n          pointer = (void *)extractAndInitializeDataStructure_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (pointer != (void *)0x0) {\n          value = demangle_arglist_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),localArray);\n          if (value != 0) {\n            result = (char *)initialize_data_structure_00113ce0(pointer,value,localArray[0]);\n            return result;\n          }\n          free(pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (data != 1) {\n      if (data == 4) {\n        result = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        tempResult = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          stringLength = strlen(result);\n          tempResult = (char *)find_match_and_retrieve_data_0010afd5(param1,param2,result,stringLength & 0xffffffff,9);\n          free(result);\n          return tempResult;\n        }\nLAB_0010b3d3:\n        tempResult = (char *)dcgettext(0,tempResult,5);\n        fprintf(_stderr,tempResult);\n        return result;\n      }\n      if (data == 0) {\n        if ((param4 == 0) || (dataPointer = (long *)extract_real_value_00113b1e(param4), dataPointer == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = extractAndInitializeDataStructure_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)data);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*dataPointer == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)find_match_and_retrieve_data_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result;\n  }\n  result = *(char **)(*dataPointer + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  tempResult = (char *)get_next_value_001129f4(result);\n  if (tempResult != (char *)0x0) {\n    stringLength = strlen(tempResult);\n    if ((param3[6] == (uint)stringLength) &&\n       (comparisonResult = strncmp(tempResult,*(char **)(param3 + 4),(long)(int)param3[6]), comparisonResult == 0)) {\n      return result;\n    }\n  }\n  dataPointer = dataPointer + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_00113d3a",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113b71",
                "cplus_demangle_print",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strncmp",
                "FUN_00113b1e",
                "free",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_structure_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "unaff_RBX": "current_line_ptr",
                "unaff_EBP": "line_count",
                "unaff_R13": "filename",
                "unaff_R14": "prev_line_ptr",
                "unaff_R15": "line_ptr",
                "in_stack_00000008": "category",
                "in_stack_00000010": "result_ptr",
                "uVar1": "error_msg",
                "ppbVar2": "slot_ptr",
                "pbVar3": "next_char",
                "pbVar5": "char_ptr",
                "in_CL": "current_char",
                "bVar4": "next_byte"
            },
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 error_msg;\n  byte **slot_ptr;\n  byte *next_char;\n  byte current_char;\n  byte next_byte;\n  byte *current_line_ptr;\n  int line_count;\n  byte *char_ptr;\n  undefined8 filename;\n  byte *prev_line_ptr;\n  byte *line_ptr;\n  undefined8 category;\n  undefined8 *result_ptr;\n  \n  do {\n    char_ptr = line_ptr;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = char_ptr[1];\n      char_ptr = char_ptr + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_byte = char_ptr[1];\n      if ((((((next_byte == 9) || (next_byte == 0x20)) &&\n            ((next_byte = char_ptr[2], next_byte == 9 || (next_byte == 0x20)))) &&\n           ((next_byte = char_ptr[3], next_byte == 9 || (next_byte == 0x20)))) &&\n          ((next_byte = char_ptr[4], next_byte == 9 || (next_byte == 0x20)))) &&\n         ((next_byte = char_ptr[5], next_byte == 9 || (next_byte == 0x20)))) {\n        next_byte = char_ptr[6];\n        next_char = char_ptr + 6;\n        if ((next_byte == 9) || (next_byte == 0x20)) {\n          do {\n            do {\n              next_byte = next_char[1];\n              next_char = next_char + 1;\n            } while (next_byte == 0x20);\n          } while (next_byte == 9);\n        }\n      }\n      if ((0xd < next_byte) || ((-0x2402L >> (next_byte & 0x3f) & 1U) != 0)) {\n        error_msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(error_msg,category,line_count);\n      }\n    }\nLAB_00114599:\n    *char_ptr = 0;\n    if (line_ptr < char_ptr) {\n      slot_ptr = (byte **)htab_find_slot();\n      *slot_ptr = line_ptr;\n    }\n    line_count = line_count + 1;\n    char_ptr = current_line_ptr;\n    if (prev_line_ptr[1] == 0) {\n      *result_ptr = filename;\n      return;\n    }\n    for (; next_byte = *char_ptr, prev_line_ptr = char_ptr, next_byte != 10; char_ptr = char_ptr + 1) {\n      if ((char)next_byte < '\\v') {\n        if (next_byte == 0) {\n          next_char = char_ptr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_byte == 0xd) {\n          *char_ptr = 0;\n          next_char = char_ptr + 1;\n          if (char_ptr[1] == 10) {\n            next_char = char_ptr + 2;\n            prev_line_ptr = char_ptr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_byte == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *char_ptr = 0;\n    if (char_ptr[1] == 0xd) {\n      prev_line_ptr = char_ptr + 1;\n      next_char = char_ptr + 2;\n    }\n    else {\n      next_char = char_ptr + 1;\n    }\nLAB_00114553:\n    current_char = *current_line_ptr;\n    line_ptr = current_line_ptr;\n    while (current_line_ptr = next_char, current_char == 0x20) {\nLAB_00104c3f:\n      char_ptr = line_ptr + 1;\n      line_ptr = line_ptr + 1;\n      next_char = current_line_ptr;\n      current_char = *char_ptr;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improved_extract_and_process_debug_info_0010554f",
                "param_7": "bfd_handle",
                "param_8": "number_of_sections",
                "in_stack_00000068": "section_information",
                "param_14": "gap_sizes",
                "param_17": "sorted_section_sizes",
                "param_21": "debug_file_name",
                "param_30": "debug_sections",
                "param_31": "debug_section_sizes",
                "param_33": "debug_section_contents",
                "param_36": "section_alignment",
                "param_37": "padding_byte",
                "param_38": "stab_section_size",
                "param_39": "stab_string_section_size",
                "param_40": "stab_section_contents",
                "param_41": "discard_local",
                "param_42": "prefix",
                "param_43": "symbol_type",
                "param_44": "symbol_binding",
                "plVar28": "section_iterator",
                "pcVar31": "section_name",
                "uVar6": "symbol_index",
                "puVar26": "aux_entry",
                "param_12": "max_gap_size",
                "uVar29": "max_gap_size"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improved_extract_and_process_debug_info_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort symbol_index;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *aux_entry;\n  int iVar27;\n  long *section_iterator;\n  ulong max_gap_size;\n  ulong *puVar30;\n  char *section_name;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long bfd_handle;\n  ulong number_of_sections;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong max_gap_size;\n  char *param_13;\n  undefined *gap_sizes;\n  uint param_15;\n  long *sorted_section_sizes;\n  undefined8 section_information;\n  undefined8 debug_file_name;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *debug_sections;\n  ulong debug_section_sizes;\n  long param_32;\n  long in_stack_000000d8;\n  void *debug_section_contents;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte section_alignment;\n  byte padding_byte;\n  undefined8 stab_section_size;\n  ushort stab_string_section_size;\n  long *stab_section_contents;\n  char discard_local;\n  char *prefix;\n  undefined symbol_type;\n  short symbol_binding;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    max_gap_size = 0;\n    gap_sizes = (undefined *)0x0;\n    sorted_section_sizes = (long *)0x0;\n    max_gap_size = max_gap_size;\n  }\n  else {\n    lVar14 = (ulong)section_information._4_4_ * 8;\n    sorted_section_sizes = (long *)xmalloc(lVar14);\n    stab_section_contents = sorted_section_sizes;\n    bfd_map_over_sections(bfd_handle,store_value_in_memory_0010870e,&stack0x00000140);\n    qsort(sorted_section_sizes,(ulong)section_information._4_4_,8,compare_records_0010875d);\n    gap_sizes = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = gap_sizes;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      max_gap_size = 0;\n      max_gap_size = 0;\n      do {\n        puVar30 = (ulong *)(gap_sizes + max_gap_size * 8);\n        section_iterator = sorted_section_sizes + max_gap_size;\n        uVar21 = max_gap_size;\n        do {\n          max_gap_size = uVar21;\n          if (section_information._4_4_ - 1 <= (uint)max_gap_size) goto LAB_00107cd1;\n          max_gap_size = (ulong)((uint)max_gap_size + 1);\n          uVar12 = bfd_octets_per_byte(bfd_handle,*section_iterator);\n          uVar13 = bfd_octets_per_byte(bfd_handle);\n          lVar14 = *section_iterator;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(section_iterator[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_information_001126c0(0,bfd_handle,*section_iterator);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          section_iterator = section_iterator + 1;\n          puVar30 = puVar30 + 1;\n        } while (max_gap_size < uVar21);\n      } while( true );\n    }\n    max_gap_size = 0;\nLAB_00107cd1:\n    max_gap_size = max_gap_size;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(bfd_handle);\n      lVar14 = sorted_section_sizes[section_information._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_information_001126c0(0,bfd_handle,sorted_section_sizes[section_information._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          max_gap_size = uVar21 - uVar24;\n          *(ulong *)(gap_sizes + (ulong)(section_information._4_4_ - 1) * 8) = max_gap_size;\n          if (max_gap_size <= max_gap_size) {\n            max_gap_size = max_gap_size;\n          }\n        }\n      }\n    }\n  }\n  max_gap_size = max_gap_size;\n  section_iterator = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          max_gap_size = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(max_gap_size + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + max_gap_size) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)initialize_data_structure_00112894(unaff_R14,1,section_iterator), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < max_gap_size) {\n                    section_name = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(section_name);\n                      if (((sVar18 == 0) || (pcVar22 = section_name + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (max_gap_size <= uVar21) break;\n                      section_name = (char *)concat(section_name,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = section_name;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar9,lVar14,section_name);\n                    cVar7 = process_debug_info_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    section_name = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,section_name,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = section_iterator; plVar15 < section_iterator + number_of_sections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (discard_local == '-') {\n          if (((lVar14 == 0) && (lVar14 = initialize_data_structure_00112894(unaff_R14,0,section_iterator), lVar14 == 0)) ||\n             ((prefix == (char *)0x0 || (*prefix == '\\0')))) goto LAB_00105981;\n          section_name = (char *)0x0;\n          pcVar22 = prefix;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < section_iterator + number_of_sections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(section_name);\n            plVar15 = plVar15 + 1;\n            section_name = pcVar22;\n          }\n          update_data_entry_001088ae(symbol_type,(int)symbol_binding,stab_section_contents,pcVar22);\n          param_9 = process_debug_info_0011173a(__ptr_02,lVar14,symbol_type);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar14 != 0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (number_of_sections != 0)) {\n        stab_section_contents = (long *)0x0;\n        debug_sections = section_iterator;\n        param_32 = 0;\n        debug_section_sizes = number_of_sections;\n        in_stack_000000d8 = 0;\n        aux_entry = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)aux_entry = 0;\n          aux_entry = (undefined8 *)((long)aux_entry + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)number_of_sections <= param_32) goto LAB_00105590;\n            lVar14 = section_iterator[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              section_name = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            section_name = *(char **)(lVar14 + 8);\n            aux_entry = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)padding_byte + 1 + in_stack_000000d8;\n            if (padding_byte != 0) {\n              aux_entry = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                section_name = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (section_alignment != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          symbol_index = in_stack_000000f8._6_2_;\n          if ((char)section_alignment < '\\0') {\n            if (section_alignment == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = process_record_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (section_alignment < 100) {\n              switch(section_alignment) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)symbol_index;\n                param_13 = section_name;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(section_alignment) {\n            case 100:\n              iVar10 = strcmp(section_name,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = start_block_debugging_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(section_name,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(section_name,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),aux_entry,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = initialize_debug_record_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (padding_byte != 0) {\n                      iVar10 = stab_string_section_size - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_line_debug_information_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                section_name = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(section_name,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = end_debug_function_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                section_name = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,section_name,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        section_name = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,section_name,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(bfd_handle + 0x44) & 0x42) != 0) && ((*(uint *)(bfd_handle + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(bfd_handle + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (number_of_sections != 0) {\n        section_iterator = DAT_001278b0 + number_of_sections;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (section_iterator != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(bfd_handle + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      section_iterator = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = lVar14;\n      if (number_of_sections == 0) {\n        max_gap_size = 0;\n      }\n      else {\n        max_gap_size = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)section_iterator[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            aux_entry = DAT_001279a8;\n            while ((iVar27 < iVar10 && (section_name = (char *)aux_entry[5], section_name != (char *)0x0))) {\n              if (section_name != \"\") {\n                iVar11 = strcmp(section_name,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(section_name);\n                  uVar21 = max_gap_size + 1;\n                  aux_entry[5] = \"\";\n                  uVar16 = initialize_section_data_0011a2e0(aux_entry);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(lVar14 + max_gap_size * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                aux_entry = (undefined8 *)*aux_entry;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = max_gap_size;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar17);\n              }\n            }\n            _discard_local = 0;\n            stab_section_contents = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            section_name = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(bfd_handle + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          section_name = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(bfd_handle + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(section_name);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            max_gap_size = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(bfd_handle + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              max_gap_size = uVar21;\n              if (section_name == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(section_name);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              section_name = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (section_name != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(bfd_handle + 8) + 0x1c);\n            }\n            section_name = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(section_name);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            max_gap_size = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _discard_local = _discard_local & 0xffffffffffffff00;\n                stab_section_contents = plVar25;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (discard_local == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _discard_local = _discard_local & 0xffffffffffffff00;\n            stab_section_contents = plVar25;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (discard_local != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _discard_local = _discard_local & 0xffffffffffffff00;\n              stab_section_contents = plVar25;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (discard_local != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _discard_local = _discard_local & 0xffffffffffffff00;\n              stab_section_contents = plVar25;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (discard_local != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = process_section_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = check_pattern_exists_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = check_pattern_exists_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = check_pattern_exists_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = check_pattern_exists_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + max_gap_size * 8) = plVar15;\n              max_gap_size = max_gap_size + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (number_of_sections != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        aux_entry = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          section_name = (char *)aux_entry[5];\n          if (section_name == (char *)0x0) {\n            lVar23 = max_gap_size * 8;\n            max_gap_size = max_gap_size + 1;\n            uVar17 = initialize_section_data_0011a2e0(aux_entry,bfd_handle);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (section_name != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17,section_name);\n          }\n          aux_entry = (undefined8 *)*aux_entry;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(lVar14 + max_gap_size * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        number_of_sections = max_gap_size & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(bfd_handle + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        debug_section_contents = (void *)0x0;\n        cVar7 = reverse_and_improve_0011378f(bfd_handle,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(bfd_handle,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(bfd_handle,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,stab_section_size), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,stab_section_contents), cVar7 == '\\0')) {\n            section_name = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(bfd_handle,lVar14,debug_sections,0,stab_section_size);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(bfd_handle,lVar37,debug_section_contents,0,stab_section_contents), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            section_name = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,section_name,5);\n          print_error_information_001126c0(0,bfd_handle,0,uVar17);\n          free(debug_section_contents);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(bfd_handle + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_information_001126c0(0,bfd_handle,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,process_relocations_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_001279f8);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a08), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_001279e8), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_001279e0), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279d8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279d0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278d0), lVar14 != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(bfd_handle,DAT_001278a8,number_of_sections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_and_print_files_00115dc0,bfd_handle);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,bfd_handle);\n    for (aux_entry = DAT_001279c0; puVar4 = DAT_001279b8, aux_entry != (undefined8 *)0x0;\n        aux_entry = (undefined8 *)*aux_entry) {\n      cVar7 = bfd_set_section_contents(bfd_handle,aux_entry[5],aux_entry[4],0,aux_entry[3]);\n      if (cVar7 == '\\0') {\n        print_error_information_001126c0(0,bfd_handle,aux_entry[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(bfd_handle,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        print_error_information_001126c0(0,bfd_handle,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      section_iterator = (long *)0x0;\n      for (aux_entry = *(undefined8 **)(bfd_handle + 0x90); aux_entry != (undefined8 *)0x0;\n          aux_entry = (undefined8 *)aux_entry[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(bfd_handle + 8) + 8) == 5)) &&\n           ((*(int *)(aux_entry[0x1a] + 4) == 7 &&\n            (cVar7 = compare_strings_00113fb0(*aux_entry,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (section_iterator == (long *)0x0) {\n            section_iterator = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*section_iterator + 0x60) == aux_entry) {\nLAB_0010625f:\n            section_name = \"error: failed to merge notes\";\n            if (section_iterator[1] != 0) {\n              cVar7 = bfd_set_section_contents(bfd_handle,aux_entry,section_iterator[1],0,section_iterator[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_information_001126c0(0,bfd_handle,aux_entry,uVar17);\n                return 0;\n              }\n              section_iterator = (long *)section_iterator[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              section_iterator = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == aux_entry) goto LAB_0010625f;\n              section_iterator = (long *)plVar15[3];\n              plVar15 = section_iterator;\n            } while (section_iterator != (long *)0x0);\n            section_name = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,section_name,5);\n          print_error_information_001126c0(0,bfd_handle,aux_entry,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        section_iterator = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = section_iterator;\n      } while (section_iterator != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(bfd_handle,debug_file_name), lVar14 = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (gap_sizes != (undefined *)0x0) {\n        if (0x2000 < max_gap_size) {\n          max_gap_size = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(max_gap_size);\n        uVar5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (max_gap_size = max_gap_size & 0xffffffff; max_gap_size != 0; max_gap_size = max_gap_size - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < section_information._4_4_; lVar14 = lVar14 + 1) {\n          max_gap_size = *(ulong *)(gap_sizes + lVar14 * 8);\n          if (max_gap_size != 0) {\n            lVar37 = *(long *)(*sorted_section_sizes + 0x40) - max_gap_size;\n            do {\n              uVar21 = 0x2000;\n              if (max_gap_size < 0x2001) {\n                uVar21 = max_gap_size;\n              }\n              cVar7 = bfd_set_section_contents(bfd_handle,*sorted_section_sizes,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                print_error_information_001126c0(0,bfd_handle,*sorted_section_sizes,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              max_gap_size = max_gap_size - uVar21;\n            } while (max_gap_size != 0);\n          }\n          sorted_section_sizes = sorted_section_sizes + 1;\n        }\n        free(__ptr);\n        free(gap_sizes);\n      }\n      uVar9 = (**(code **)(*(long *)(bfd_handle + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(bfd_handle,DAT_00127910 & 0xffffffff);\n        max_gap_size = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,max_gap_size);\n          if (*(int *)(*(long *)(bfd_handle + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(bfd_handle + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_information_001126c0(0,bfd_handle,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,bfd_handle,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_0010bf86",
                "FUN_0011a170",
                "FUN_00115d70",
                "FUN_0011378f",
                "bfd_set_error",
                "FUN_0010bf20",
                "qsort",
                "FUN_00108b3e",
                "bfd_coff_get_syment",
                "bfd_make_section_with_flags",
                "FUN_001126c0",
                "FUN_001159d0",
                "concat",
                "bfd_set_section_size",
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "fprintf",
                "FUN_00115dc0",
                "htab_elements",
                "xstrdup",
                "bfd_get_section_by_name",
                "FUN_0010870e",
                "FUN_0010c892",
                "bfd_is_local_label",
                "FUN_001088ae",
                "htab_traverse",
                "FUN_0010be88",
                "FUN_0010bbd3",
                "bfd_map_over_sections",
                "xmalloc",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33",
                "bfd_map_over_sections",
                "FUN_00119ed0",
                "bfd_get_section_contents",
                "strcpy",
                "bfd_set_section_contents",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_00119dd0",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00116110",
                "FUN_0010be1a",
                "FUN_00108863",
                "FUN_0011a2e0",
                "FUN_00116030",
                "FUN_0010875d",
                "bfd_set_symtab",
                "free",
                "FUN_00112894",
                "bfd_get_error",
                "bfd_octets_per_byte",
                "FUN_0010bc80",
                "bfd_coff_get_auxent",
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improved_extract_and_process_debug_info_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_data_struct_00109cf4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_3c": "converted_param2"
            },
            "code": "\nvoid initialize_data_struct_00109cf4(undefined8 arg1,undefined8 arg2,undefined4 arg3)\n\n{\n  char converted_param2 [28];\n  \n  sprintf(converted_param2,\"%ld\",arg2);\n  initialize_data_struct_00109cf4_00109b52(arg1,converted_param2,arg2,0,arg3);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "initialize_data_struct_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_coordinates_00109ab1",
                "param_1": "input_string",
                "param_2": "x_coordinate",
                "param_3": "input_length",
                "param_4": "unknown_data",
                "param_5": "output_data",
                "uVar1": "parsed_value",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "output"
            },
            "code": "\nundefined  [16]\nparse_coordinates_00109ab1(char **input_string,undefined4 *x_coordinate,undefined8 input_length,undefined8 unknown_data,\n            undefined8 output_data)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined output [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_value = parse_numeric_string_00109a32(input_string,0);\n    *x_coordinate = parsed_value;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_value = parse_numeric_string_00109a32(input_string,0,input_length);\n      x_coordinate[1] = parsed_value;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_error_message_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *x_coordinate = 0;\n    current_char = (char *)parse_numeric_string_00109a32(input_string,0);\n    x_coordinate[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  output._8_8_ = output_data;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_coordinates_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "process_section_001159d0",
                "param_1": "sectionParam",
                "uVar1": "dynamicValue",
                "cVar2": "patternExists",
                "uVar3": "sectionResult",
                "lVar4": "matchingValue",
                "lVar5": "nextMatchingValue"
            },
            "code": "\nundefined4 processSection_001159d0(long sectionParam)\n\n{\n  undefined8 dynamicValue;\n  char patternExists;\n  undefined4 sectionResult;\n  long matchingValue;\n  long nextMatchingValue;\n  \n  sectionResult = process_section_00115b70();\n  if ((char)sectionResult == '\\0') {\n    if ((*(byte *)(sectionParam + 0x27) & 2) == 0) {\n      return sectionResult;\n    }\n    matchingValue = get_matching_value_00115d00(*(undefined8 *)(sectionParam + 0xd0),*(undefined8 *)(sectionParam + 0xe0));\n    if ((matchingValue != 0) &&\n       (((dynamicValue = *(undefined8 *)(matchingValue + 8), DAT_00127a2c != 7 ||\n         (patternExists = check_pattern_exists_00115d70(dynamicValue,DAT_00127a08), patternExists != '\\0')) &&\n        (patternExists = check_pattern_exists_00115d70(dynamicValue,DAT_001279f8), patternExists == '\\0')))) {\n      matchingValue = *(long *)(*(long *)(sectionParam + 0xd0) + 0xc0);\n      nextMatchingValue = matchingValue;\n      do {\n        if (nextMatchingValue == 0) {\n          return 1;\n        }\n        patternExists = process_section_00115b70(nextMatchingValue);\n        if (patternExists == '\\0') {\n          return sectionResult;\n        }\n        nextMatchingValue = *(long *)(*(long *)(nextMatchingValue + 0xd0) + 0xc0);\n      } while (matchingValue != nextMatchingValue);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "process_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "extract_and_initialize_data_0010a77a",
                "param_1": "input_param",
                "uVar1": "status_flag",
                "lVar2": "data_struct_ptr",
                "__s": "string_ptr",
                "uVar3": "value",
                "uVar4": "result",
                "__s_00": "extracted_string",
                "sVar5": "string_length_1",
                "sVar6": "string_length_2",
                "__s_01": "combined_string"
            },
            "code": "\nundefined4 extract_and_initialize_data_0010a77a(long input_param)\n\n{\n  undefined status_flag;\n  long data_struct_ptr;\n  char *string_ptr;\n  undefined8 value;\n  undefined4 result;\n  char *extracted_string;\n  size_t string_length_1;\n  size_t string_length_2;\n  char *combined_string;\n  \n  data_struct_ptr = *(long *)(input_param + 0x60);\n  if ((data_struct_ptr != 0) && (string_ptr = *(char **)(data_struct_ptr + 0x20), string_ptr != (char *)0x0)) {\n    result = *(undefined4 *)(data_struct_ptr + 0x18);\n    status_flag = *(undefined *)(data_struct_ptr + 0x1c);\n    value = *(undefined8 *)(data_struct_ptr + 0x10);\n    extracted_string = (char *)extract_and_free_pointer_00109b2f();\n    string_length_1 = strlen(extracted_string);\n    string_length_2 = strlen(string_ptr);\n    combined_string = (char *)xmalloc(string_length_1 + 2 + string_length_2);\n    sprintf(combined_string,\"%s%s;\",extracted_string,string_ptr);\n    free(extracted_string);\n    free(string_ptr);\n    result = initialize_data_struct_00109b52(input_param,combined_string,value,status_flag,result);\n    if ((char)result != '\\0') {\n      free(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "piVar2": "error_location",
                "pcVar3": "error_message",
                "uVar1": "file_descriptor",
                "uVar4": "error_format"
            },
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *error_location;\n  char *error_message;\n  undefined8 error_format;\n  long unaff_RBP;\n  \n  error_location = __errno_location();\n  error_message = strerror(*error_location);\n  file_descriptor = *(undefined8 *)(unaff_RBP + 0x10);\n  error_format = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c_00119dd0(error_format,file_descriptor,error_message);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "format_data_0010a424",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "update_flag",
                "cVar1": "init_result",
                "bVar2": "byte_val",
                "iVar3": "index",
                "uVar4": "result",
                "pcVar5": "str1",
                "__ptr": "ptr_array",
                "uVar6": "extracted_val",
                "__s": "str2",
                "sVar7": "len1",
                "sVar8": "len2",
                "__s_00": "formatted_str",
                "lVar9": "loop_var1",
                "bVar10": "byte_flag",
                "lVar11": "loop_var2",
                "uVar12": "uVar",
                "initialize_or_update_data_00109d97": "initialize_or_update_data",
                "extract_and_free_pointer_00109b2f": "extract_and_free_pointer",
                "xmalloc": "allocate_memory",
                "strlen": "string_length",
                "sprintf": "format_string",
                "strcpy": "copy_string",
                "free": "deallocate_memory",
                "initialize_data_struct_00109b52": "initialize_data_struct"
            },
            "code": "\nundefined4 format_data_0010a424(long data_ptr,char flag,int count,char update_flag)\n\n{\n  char init_result;\n  byte byte_val;\n  int index;\n  undefined4 result;\n  char *str1;\n  undefined8 *ptr_array;\n  undefined8 extracted_val;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *formatted_str;\n  long loop_var1;\n  byte byte_flag;\n  long loop_var2;\n  undefined uVar;\n  \n  if ((flag == '\\0') && (init_result = initialize_or_update_data(), init_result == '\\0')) {\n    return 0;\n  }\n  byte_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_pointer(data_ptr);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    uVar = 1;\n    if (byte_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptr_array = (undefined8 *)xmalloc((long)index * 8);\n      loop_var1 = (long)(count + -1);\n      do {\n        byte_val = 1;\n        if (byte_flag == 0) {\n          byte_val = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n        }\n        extracted_val = extract_and_free_pointer(data_ptr);\n        byte_flag = byte_val & 1;\n        ptr_array[loop_var1] = extracted_val;\n        loop_var1 = loop_var1 + -1;\n      } while ((int)loop_var1 != -1);\n      if (update_flag == '\\0') {\n        init_result = initialize_or_update_data(data_ptr);\n        if (init_result == '\\0') {\n          return 0;\n        }\n        byte_val = 1;\n        if (byte_flag == 0) {\n          byte_val = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n        }\n        byte_flag = byte_val & 1;\n        extracted_val = extract_and_free_pointer(data_ptr);\n        ptr_array[(long)index + -1] = extracted_val;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (update_flag != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)xmalloc(8);\n    init_result = initialize_or_update_data(data_ptr);\n    if (init_result == '\\0') {\n      return 0;\n    }\n    if ((byte_flag != 0) || (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) != '\\0')) {\n      extracted_val = extract_and_free_pointer(data_ptr);\n      count = 1;\n      uVar = 1;\n      *ptr_array = extracted_val;\n      goto LAB_0010a596;\n    }\n    extracted_val = extract_and_free_pointer(data_ptr);\n    count = 1;\n    *ptr_array = extracted_val;\n  }\n  uVar = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_and_free_pointer(data_ptr);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  loop_var1 = len1 + 10 + len2;\n  for (loop_var2 = 0; (int)loop_var2 < count; loop_var2 = loop_var2 + 1) {\n    len1 = strlen((char *)ptr_array[loop_var2]);\n    loop_var1 = loop_var1 + len1;\n  }\n  formatted_str = (char *)xmalloc(loop_var1);\n  sprintf(formatted_str,\"#%s,%s\",str1,str2);\n  loop_var1 = 0;\n  dexmalloc(str1);\n  dexmalloc(str2);\n  while( true ) {\n    len1 = strlen(formatted_str);\n    if (count <= (int)loop_var1) break;\n    *(undefined2 *)(formatted_str + len1) = 0x2c;\n    str1 = (char *)ptr_array[loop_var1];\n    loop_var1 = loop_var1 + 1;\n    strcpy(formatted_str + len1 + 1,str1);\n    dexmalloc(str1);\n  }\n  *(undefined2 *)(formatted_str + len1) = 0x3b;\n  dexmalloc(ptr_array);\n  result = initialize_data_struct(data_ptr,formatted_str,0,uVar,0);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  dexmalloc(formatted_str);\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_00109d97",
                "sprintf",
                "FUN_00109b2f",
                "strcpy",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_gnu_version_00119970",
                "param_1": "versionString",
                "pcVar1": "copyRightMsg"
            },
            "code": "\nvoid printGnuVersion_00119970(undefined8 versionString)\n\n{\n  char *copyRightMsg;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyRightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightMsg);\n  copyRightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_gnu_version_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_assignment_00114c80",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_msg",
                "param_4": "value_2",
                "pcVar1": "equals_symbol_position",
                "uVar2": "error_message",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] parse_assignment_00114c80(char *input_string,undefined8 value_1,undefined8 error_msg,undefined8 value_2)\n\n{\n  char *equals_symbol_position;\n  undefined8 error_message;\n  undefined result [16];\n  \n  equals_symbol_position = strchr(input_string,0x3d);\n  if (equals_symbol_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_message = copy_string_0011a480(input_string,(long)equals_symbol_position - (long)input_string);\n    result._0_8_[2] = equals_symbol_position + 1;\n    result._0_8_[1] = error_message;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value_1;\n    result._8_8_ = value_2;\n    return result;\n  }\n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,error_msg);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_001053b5",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_assignment_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_value_in_memory_0010870e",
                "param_1": "destination",
                "param_2": "valueToStore",
                "param_3": "memoryAddress",
                "puVar1": "pointerToMemoryAddress"
            },
            "code": "\nvoid storeValueInMemory_0010870e(undefined8 destination,undefined8 valueToStore,long *memoryAddress)\n\n{\n  undefined8 *pointerToMemoryAddress;\n  \n  pointerToMemoryAddress = (undefined8 *)*memoryAddress;\n  *pointerToMemoryAddress = valueToStore;\n  *memoryAddress = (long)(pointerToMemoryAddress + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_value_in_memory_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "file_path",
                "param_2": "coff_header",
                "param_3": "debug_info",
                "param_4": "symbol_table",
                "param_5": "type_code",
                "param_6": "type_name",
                "param_7": "is_unsigned",
                "param_8": "debug_name",
                "lVar1": "symbol",
                "cVar2": "success",
                "uVar3": "error_code",
                "uVar4": "result",
                "lVar5": "data_structure",
                "uVar6": "debug_info_result",
                "plVar7": "slots",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "shift_amount",
                "iVar9": "counter",
                "pcVar10": "data_type_string",
                "uVar11": "mask",
                "lVar12": "iterate_index",
                "uVar13": "temp_var1",
                "uVar14": "temp_var2",
                "uVar15": "temp_var3",
                "local_68": "local_buffer1",
                "local_48": "local_char",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long file_path,long *coff_header,long debug_info,undefined8 symbol_table,uint type_code,\n                 long *type_name,char is_unsigned,undefined8 debug_name)\n\n{\n  long symbol;\n  char success;\n  undefined4 error_code;\n  undefined8 result;\n  long data_structure;\n  undefined8 debug_info_result;\n  long *slots;\n  void *ptr1;\n  void *ptr2;\n  byte shift_amount;\n  int counter;\n  char *data_type_string;\n  ulong mask;\n  long iterate_index;\n  uint temp_var1;\n  uint temp_var2;\n  undefined8 temp_var3;\n  undefined local_buffer1 [32];\n  char local_char;\n  byte local_byte;\n  \n  data_structure = *(long *)(file_path + 0x110);\n  if ((~*(uint *)(data_structure + 0x38) & type_code) != 0) {\n    temp_var1 = (int)type_code >> ((byte)*(undefined4 *)(data_structure + 0x44) & 0x1f);\n    mask = (ulong)(type_code & *(uint *)(data_structure + 0x40));\n    shift_amount = (byte)*(undefined4 *)(data_structure + 0x3c);\n    temp_var1 = (temp_var1 ^ type_code) & *(uint *)(data_structure + 0x38) ^ temp_var1;\n    if (mask == 1L << (shift_amount & 0x3f)) {\n      result = parse_coff_type_0010dac0(file_path,coff_header,debug_info,symbol_table,temp_var1,type_name,is_unsigned,debug_name);\n      data_structure = initialize_data_structure_00113d3a(result);\n      return data_structure;\n    }\n    if (mask != 2L << (shift_amount & 0x3f)) {\n      if (mask != 3L << (shift_amount & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(data_structure + 0x3c),\n                          temp_var1);\n        print_error_message_00119ed0(result,type_code);\n        return 0;\n      }\n      temp_var2 = 0;\n      if (type_name != (long *)0x0) {\n        temp_var2 = (uint)*(ushort *)(type_name + 2);\n        slots = type_name + 2;\n        for (counter = 0; (*(short *)slots != 0 && (counter != 3)); counter = counter + 1) {\n          *(short *)slots = *(short *)((long)slots + 2);\n          slots = (long *)((long)slots + 2);\n        }\n        *(short *)slots = 0;\n      }\n      temp_var3 = 0;\n      result = debug_name;\n      debug_info_result = parse_coff_type_0010dac0(file_path,coff_header,debug_info,symbol_table,temp_var1,type_name,0);\n      data_structure = *(long *)(debug_info + 0x28);\n      if (data_structure == 0) {\n        result = update_data_structure_00113dfe(4,0,temp_var3,result);\n        data_structure = initialize_debug_name_0010c218(debug_name,\"int\",result);\n        *(long *)(debug_info + 0x28) = data_structure;\n      }\n      data_structure = initialize_data_structure_00113c43(debug_info_result,data_structure,0,(long)(int)(temp_var2 - 1),0);\n      return data_structure;\n    }\n    result = parse_coff_type_0010dac0(file_path,coff_header,debug_info,symbol_table,temp_var1,type_name,is_unsigned,debug_name);\n    data_structure = initialize_data_structure_00113ce0(result,0,0);\n    return data_structure;\n  }\n  if ((type_name != (long *)0x0) && (0 < *type_name)) {\n    slots = (long *)allocate_and_initialize_slots_0010da0b(debug_info);\n    if (*slots != 0) {\n      return *slots;\n    }\n    data_structure = create_data_structure_00113e23(slots,0);\n    return data_structure;\n  }\n  if (is_unsigned == '\\0') {\n    type_name = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    data_structure = initialize_data_structure_00113e17();\n    return data_structure;\n  }\n  data_structure = *(long *)(debug_info + 8 + (long)(int)type_code * 8);\n  if (data_structure != 0) {\n    return data_structure;\n  }\n  switch(type_code) {\n  default:\n    result = initialize_data_structure_00113e17();\n    data_type_string = \"void\";\n    break;\n  case 2:\n    result = update_data_structure_00113dfe(1,0);\n    data_type_string = \"char\";\n    break;\n  case 3:\n    result = update_data_structure_00113dfe(2,0);\n    data_type_string = \"short\";\n    break;\n  case 4:\n    result = update_data_structure_00113dfe(4,0);\n    data_type_string = \"int\";\n    break;\n  case 5:\n    result = update_data_structure_00113dfe(4,0);\n    data_type_string = \"long\";\n    break;\n  case 6:\n    result = initialize_data_structure_00113df2(4);\n    data_type_string = \"float\";\n    break;\n  case 7:\n    result = initialize_data_structure_00113df2(8);\n    data_type_string = \"double\";\n    break;\n  case 8:\n    if (type_name == (long *)0x0) {\n      data_structure = initialize_and_populate_data_structure_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_name == (long *)0x0) {\n      data_structure = initialize_and_populate_data_structure_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    data_structure = process_binary_data_0010e07c(file_path,coff_header,debug_info,result,type_name,debug_name);\nLAB_0010e046:\n    slots = (long *)allocate_and_initialize_slots_0010da0b(debug_info,symbol_table);\n    *slots = data_structure;\n    return data_structure;\n  case 10:\n    if (type_name == (long *)0x0) {\n      data_structure = initialize_data_structure_00113d6e(0,0);\n    }\n    else {\n      data_structure = type_name[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      iterate_index = 0;\n      do {\n        while( true ) {\n          if ((data_structure <= coff_header[3]) || (coff_header[1] <= coff_header[2])) goto LAB_0010e032;\n          counter = (int)iterate_index;\n          symbol = *(long *)(*coff_header + coff_header[2] * 8);\n          success = bfd_coff_get_syment(file_path,symbol,local_buffer1);\n          iterate_index = (long)counter;\n          if (success == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            debug_info_result = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(debug_info_result,result);\n            free(ptr1);\n            free(ptr2);\n            data_structure = 0;\n            goto LAB_0010e046;\n          }\n          coff_header[2] = coff_header[2] + 1;\n          coff_header[3] = (ulong)local_byte + 1 + coff_header[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= counter + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          iterate_index = *(long *)(symbol + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)counter * 8) = *(undefined8 *)(symbol + 8);\n          *(long *)((long)ptr2 + (long)counter * 8) =\n               *(long *)(symbol + 0x10) + *(long *)(iterate_index + 0x30);\n          iterate_index = (long)(counter + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + iterate_index * 8) = 0;\n      data_structure = initialize_data_structure_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    data_structure = initialize_data_structure_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = update_data_structure_00113dfe(1,1);\n    data_type_string = \"unsigned char\";\n    break;\n  case 0xd:\n    result = update_data_structure_00113dfe(2,1);\n    data_type_string = \"unsigned short\";\n    break;\n  case 0xe:\n    result = update_data_structure_00113dfe(4,1);\n    data_type_string = \"unsigned int\";\n    break;\n  case 0xf:\n    result = update_data_structure_00113dfe(4,1);\n    data_type_string = \"unsigned long\";\n    break;\n  case 0x10:\n    result = initialize_data_structure_00113df2(0xc);\n    data_type_string = \"long double\";\n  }\n  data_structure = initialize_debug_name_0010c218(debug_name,data_type_string,result);\nLAB_0010e065:\n  *(long *)(debug_info + 8 + (long)(int)type_code * 8) = data_structure;\n  return data_structure;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00113d3a",
                "FUN_0010e07c",
                "FUN_00113c43",
                "dcgettext",
                "FUN_00113ce0",
                "xmalloc",
                "FUN_00113e23",
                "FUN_0010dac0",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "FUN_0010c218",
                "free",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "iVar1": "comparisonResult",
                "extraout_var": "extraResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extraResult;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraResult,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_00113ede",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_setting_error_0010882c",
                "piVar1": "errno_ptr",
                "uVar2": "time_error_message"
            },
            "code": "\nvoid print_time_setting_error_0010882c(void)\n\n{\n  int *errno_ptr;\n  undefined8 time_error_message;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  time_error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00119ed0(time_error_message);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_time_setting_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_string_0010ebb0",
                "param_1": "handle",
                "param_2": "prefix",
                "param_3": "length",
                "param_4": "data",
                "cVar1": "character",
                "__s": "extractedString",
                "sVar4": "prefixLength",
                "sVar5": "extractedStringLength",
                "__s_00": "modifiedString",
                "uVar2": "adjustedLength",
                "uVar3": "result"
            },
            "code": "\nundefined4 processString_0010ebb0(undefined8 handle,char *prefix,int length,undefined8 data)\n\n{\n  char character;\n  uint adjustedLength;\n  undefined4 result;\n  char *extractedString;\n  size_t prefixLength;\n  size_t extractedStringLength;\n  char *modifiedString;\n  \n  extractedString = (char *)extract_and_free_pointer_00109b2f();\n  adjustedLength = length - 1;\n  if (adjustedLength < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)adjustedLength * 4);\n    character = (&DAT_00121334)[adjustedLength];\n    prefixLength = strlen(prefix);\n    extractedStringLength = strlen(extractedString);\n    modifiedString = (char *)xmalloc(prefixLength + 3 + extractedStringLength);\n    sprintf(modifiedString,\"%s:%c%s\",prefix,(ulong)(uint)(int)character,extractedString);\n    free(extractedString);\n    result = process_string_0010e2f0(handle,result,0,data,modifiedString);\n    if ((char)result != '\\0') {\n      free(modifiedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_data_structure_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "dataStructure",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong createDataStructure_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long dataStructure;\n  long *allocatedMemory;\n  \n  if ((input1 != 0) && (dataStructure = initialize_data_structure_00112904(0x13,0), dataStructure != 0)) {\n    allocatedMemory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocatedMemory + 0x19) = 0;\n    *allocatedMemory = input1;\n    *(undefined4 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[1] = input2;\n    allocatedMemory[2] = input3;\n    *(undefined *)(allocatedMemory + 3) = input4;\n    *(long **)(dataStructure + 0x10) = allocatedMemory;\n    return dataStructure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_pattern_exists_00115d70",
                "param_1": "inputValue",
                "param_2": "hashTable",
                "lVar1": "result",
                "local_18": "pattern",
                "local_10": "patternExists"
            },
            "code": "\nundefined checkPatternExists_00115d70(undefined8 inputValue,undefined8 hashTable)\n\n{\n  long result;\n  undefined8 pattern;\n  undefined patternExists;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(hashTable,inputValue);\n    patternExists = result != 0;\n  }\n  else {\n    patternExists = 0;\n    pattern = inputValue;\n    htab_traverse(hashTable,pattern_match_0011a170,&pattern);\n  }\n  return patternExists;\n}\n\n",
            "called": [
                "htab_find",
                "htab_traverse",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_0010554f",
                "FUN_001082df",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_pattern_exists_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "resize_and_add_entry_00109be3",
                "param_1": "array_ptr",
                "param_2": "data",
                "param_3": "value",
                "uVar1": "result_ptr",
                "puVar2": "new_entry_ptr",
                "uVar3": "current_size"
            },
            "code": "\nundefined8 resizeAndAddEntry_00109be3(long array_ptr,undefined8 data,undefined4 value)\n\n{\n  undefined8 result_ptr;\n  undefined8 *new_entry_ptr;\n  uint current_size;\n  \n  if (*(uint *)(array_ptr + 0x2c) <= *(uint *)(array_ptr + 0x28)) {\n    current_size = *(uint *)(array_ptr + 0x2c) + 10;\n    *(uint *)(array_ptr + 0x2c) = current_size;\n    result_ptr = xrealloc(*(undefined8 *)(array_ptr + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(array_ptr + 0x20) = result_ptr;\n  }\n  current_size = *(uint *)(array_ptr + 0x28);\n  new_entry_ptr = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(array_ptr + 0x20));\n  *new_entry_ptr = data;\n  *(undefined4 *)(new_entry_ptr + 1) = value;\n  *(uint *)(array_ptr + 0x28) = current_size + 1;\n  return CONCAT71((int7)((ulong)new_entry_ptr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "resize_and_add_entry_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "newString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *newString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  newString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)newString + stringLength) = 0;\n  memcpy(newString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_and_send_data_0010e918",
                "param_1": "data_ptr",
                "param_2": "string",
                "param_3": "number",
                "uVar1": "result",
                "__s": "extracted_string",
                "sVar2": "string_length",
                "sVar3": "extracted_string_length",
                "__s_00": "formatted_string"
            },
            "code": "\nundefined4 process_and_send_data_0010e918(undefined8 data_ptr,char *string,undefined8 number)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t string_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  \n  extracted_string = (char *)extract_and_free_pointer_00109b2f();\n  string_length = strlen(string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14 + extracted_string_length);\n  sprintf(formatted_string,\"%s:c=e%s,%ld\",string,extracted_string,number);\n  free(extracted_string);\n  result = process_string_0010e2f0(data_ptr,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010ae0e",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "param_1": "file1",
                "param_2": "parameters",
                "param_3": "file2",
                "uVar1": "tempByte",
                "uVar2": "tempVar1",
                "lVar3": "tempVar2",
                "iVar4": "tempVar3",
                "iVar5": "tempVar4",
                "cVar6": "errorFlag",
                "uVar7": "errorMsg",
                "__ptr": "allocatedMemory",
                "lVar8": "tempVar5",
                "uVar9": "loopVar1",
                "iVar10": "loopVar2",
                "uVar11": "loopVar3",
                "puVar12": "tempPtr",
                "lVar13": "tempVar6",
                "puVar14": "tempPtr1",
                "puVar15": "tempPtr2",
                "pvVar16": "tempPtr3",
                "uVar17": "tempVar7",
                "uVar18": "tempVar8",
                "uVar19": "tempVar9",
                "bVar20": "tempByte2",
                "local_38": "sectionSize",
                "local_30": "sectionData"
            },
            "code": "\nvoid processSection_00116110(undefined8 file1,undefined8 *parameters,undefined8 file2)\n\n{\n  undefined tempByte;\n  undefined8 tempVar1;\n  long tempVar2;\n  int tempVar3;\n  int tempVar4;\n  char errorFlag;\n  undefined8 errorMsg;\n  undefined8 *allocatedMemory;\n  long tempVar5;\n  ulong loopVar1;\n  int loopVar2;\n  ulong loopVar3;\n  undefined *tempPtr;\n  long tempVar6;\n  undefined8 *tempPtr1;\n  undefined8 *tempPtr2;\n  void *tempPtr3;\n  ulong tempVar7;\n  ulong tempVar8;\n  ulong tempVar9;\n  byte tempByte2;\n  ulong sectionSize;\n  void *sectionData;\n  \n  tempByte2 = 0;\n  errorFlag = process_file_00115f50(file1,parameters,1);\n  if (errorFlag != '\\0') {\n    return;\n  }\n  sectionSize = parameters[8];\n  tempVar2 = parameters[0xc];\n  if (((*(byte *)((long)parameters + 0x25) & 1) == 0) || ((*(byte *)(tempVar2 + 0x25) & 1) == 0)) {\n    tempVar6 = process_files_00114190(*parameters,0,0x80);\n    if (tempVar6 == 0) {\n      return;\n    }\n    if ((*(byte *)(tempVar6 + 0x29) & 1) == 0) {\n      return;\n    }\n    allocatedMemory = (undefined8 *)xmalloc(sectionSize);\n    tempPtr2 = allocatedMemory;\n    if (7 < sectionSize) {\n      for (tempVar8 = sectionSize >> 3; tempVar8 != 0; tempVar8 = tempVar8 - 1) {\n        *tempPtr2 = 0;\n        tempPtr2 = tempPtr2 + (ulong)tempByte2 * -2 + 1;\n      }\n    }\n    tempPtr1 = tempPtr2;\n    if ((sectionSize & 4) != 0) {\n      tempPtr1 = (undefined8 *)((long)tempPtr2 + (ulong)tempByte2 * -8 + 4);\n      *(undefined4 *)tempPtr2 = 0;\n    }\n    tempPtr2 = tempPtr1;\n    if ((sectionSize & 2) != 0) {\n      tempPtr2 = (undefined8 *)((long)tempPtr1 + (ulong)tempByte2 * -4 + 2);\n      *(undefined2 *)tempPtr1 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)tempPtr2 = 0;\n    }\n    errorFlag = bfd_set_section_contents(file2,tempVar2,allocatedMemory,0);\n    if (errorFlag != '\\0') {\n      free(allocatedMemory);\n      return;\n    }\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(0,file2,tempVar2,0);\n    free(allocatedMemory);\n    return;\n  }\n  sectionData = (void *)0x0;\n  errorFlag = bfd_get_full_section_contents(file1,parameters,&sectionData);\n  if ((errorFlag == '\\0') ||\n     (errorFlag = bfd_convert_section_contents(file1,parameters,file2,&sectionData,&sectionSize),\n     loopVar2 = DAT_001278e8, errorFlag == '\\0')) {\n    bfd_set_section_size(tempVar2,0);\n    DAT_00127a20 = 1;\n    print_error_information_001126c0(0,file1,parameters,0);\n    free(sectionData);\n    return;\n  }\n  tempVar3 = DAT_001264b8;\n  tempVar4 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    tempVar8 = (ulong)DAT_001278e8;\n    if (sectionSize % tempVar8 != 0) {\n      tempVar1 = *parameters;\n      errorMsg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(errorMsg,tempVar1,loopVar2);\n    }\n    loopVar2 = DAT_001278e8 / 2;\n    loopVar3 = 0;\n    while (tempVar9 = loopVar3, tempVar3 = DAT_001264b8, tempVar4 = DAT_001264bc, tempVar9 < sectionSize) {\n      loopVar3 = tempVar8 + tempVar9;\n      tempVar7 = loopVar3;\n      for (loopVar1 = 0; loopVar1 < (ulong)(long)loopVar2; loopVar1 = loopVar1 + 1) {\n        tempVar7 = tempVar7 - 1;\n        tempPtr = (undefined *)(tempVar9 + loopVar1 + (long)sectionData);\n        tempByte = *tempPtr;\n        *tempPtr = *(undefined *)((long)sectionData + tempVar7);\n        *(undefined *)((long)sectionData + tempVar7) = tempByte;\n      }\n    }\n  }\n  DAT_001264b8 = tempVar3;\n  DAT_001264bc = tempVar4;\n  if (-1 < tempVar4) {\n    tempVar8 = (ulong)DAT_00127a1c;\n    loopVar2 = (int)((ulong)parameters[7] % tempVar8);\n    loopVar3 = ((long)tempVar4 - (long)loopVar2) + (long)sectionData;\n    if (tempVar4 < loopVar2) {\n      loopVar3 = loopVar3 + tempVar8;\n    }\n    tempVar6 = (sectionSize + (long)sectionData) - loopVar3;\n    tempPtr3 = sectionData;\n    for (; loopVar3 < sectionSize + (long)sectionData; loopVar3 = loopVar3 + tempVar8) {\n      for (tempVar5 = 0; ((int)tempVar5 < tempVar3 && (tempVar5 != tempVar6)); tempVar5 = tempVar5 + 1) {\n        *(undefined *)((long)tempPtr3 + tempVar5) = *(undefined *)(loopVar3 + tempVar5);\n      }\n      tempPtr3 = (void *)((long)tempPtr3 + tempVar5);\n      tempVar6 = tempVar6 - tempVar8;\n    }\n    sectionSize = ((((tempVar8 - 1) + sectionSize) - (long)tempVar4) / tempVar8) * (long)tempVar3;\n    tempVar8 = *(ulong *)(tempVar2 + 0x38) / tempVar8;\n    *(ulong *)(tempVar2 + 0x38) = tempVar8;\n    if (tempVar4 < loopVar2) {\n      *(ulong *)(tempVar2 + 0x38) = tempVar8 + 1;\n      errorFlag = bfd_set_section_contents(file2,tempVar2,sectionData,0,sectionSize);\n      if (errorFlag == '\\0') {\n        cleanup_and_print_error_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  errorFlag = bfd_set_section_contents(file2,tempVar2,sectionData,0,sectionSize);\n  if (errorFlag == '\\0') {\n    cleanup_and_print_error_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "bfd_get_full_section_contents",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "free",
                "xmalloc",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00108466",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessageId"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessageId;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessageId = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessageId,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_handle",
                "param_2": "end_address",
                "param_3": "reserved",
                "param_4": "result",
                "lVar1": "current_block",
                "uVar2": "translation",
                "pcVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_handle,undefined8 end_address,undefined8 reserved,undefined8 result)\n\n{\n  long current_block;\n  undefined8 translation;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_handle + 8) == 0) || (current_block = *(long *)(block_handle + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = end_address;\n      translation = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_handle + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  translation = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",translation);\n  translation = 0;\nLAB_0010bf84:\n  return_value._8_8_ = result;\n  return_value._0_8_ = translation;\n  return return_value;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "decode_binary_0010c95e",
                "param_1": "config",
                "param_2": "data",
                "param_3": "result",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "pbVar3": "current_data",
                "bVar4": "is_signed",
                "bVar5": "is_char",
                "bVar6": "is_void",
                "cVar7": "error_check",
                "uVar8": "num_chars",
                "pbVar9": "next_data",
                "lVar10": "type_id",
                "uVar11": "return_val",
                "pcVar12": "type_int",
                "pcVar19": "type",
                "sVar13": "str_len",
                "uVar14": "num_entries",
                "__ptr": "type_string",
                "lVar15": "struct_address",
                "puVar16": "num_structure",
                "puVar17": "is_initialized",
                "ppcVar18": "structure_ptr",
                "local_49": "is_long_long_int",
                "local_48": "num_elements",
                "local_40": "char_array"
            },
            "code": "\nundefined8 decode_binary_0010c95e(undefined8 *config,byte **data,long *result)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *current_data;\n  bool is_signed;\n  bool is_char;\n  bool is_void;\n  char error_check;\n  uint num_chars;\n  byte *next_data;\n  long type_id;\n  undefined8 return_val;\n  char *type_int;\n  size_t str_len;\n  ulong num_entries;\n  void *type_string;\n  long struct_address;\n  ulong *num_structure;\n  undefined *is_initialized;\n  char **structure_ptr;\n  char *type;\n  byte *pnext_byte0;\n  undefined is_long_long_int;\n  ulong num_elements;\n  char *char_array [2];\n  \n  while( true ) {\n    pnext_byte0 = *data;\n    current_byte = *pnext_byte0;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      struct_address = 0;\n      current_data = pnext_byte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *data = pnext_byte0 + 1;\n      error_check = decode_binary_0010c95e(config,data,result);\n      if (error_check == '\\0') {\n        return 0;\n      }\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      struct_address = initialize_data_structure_00113b71(*result);\n      *result = struct_address;\n      return 1;\n    case 0x46:\n      *data = pnext_byte0 + 1;\n      if (result == (long *)0x0) {\n        num_structure = (ulong *)0x0;\n        structure_ptr = (char **)0x0;\n      }\n      else {\n        num_structure = &num_elements;\n        structure_ptr = char_array;\n      }\n      error_check = parse_entries_0010d882(config,data,structure_ptr,num_structure);\n      if (error_check == '\\0') {\n        return 0;\n      }\n      if (**data == 0x5f) {\n        *data = *data + 1;\n        error_check = decode_binary_0010c95e(config,data,result);\n        if (error_check == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        struct_address = initialize_data_structure_00113ce0(*result,char_array[0],num_elements & 0xff);\n        *result = struct_address;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *data = pnext_byte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      is_long_long_int = 0;\n      char_array[0] = (char *)0x0;\n      num_elements = 0;\n      *data = pnext_byte0 + 1;\n      if (((&_sch_istable)[(ulong)pnext_byte0[1] * 2] & 4) == 0) {\n        if (pnext_byte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        structure_ptr = char_array;\n        if (result == (long *)0x0) {\n          structure_ptr = (char **)0x0;\n        }\n        error_check = process_data_0010d559(config,data,structure_ptr);\n        if (error_check == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        num_chars = extract_number_from_byte_00108e76(data);\n        current_data = *data;\n        str_len = strlen((char *)current_data);\n        if (str_len < num_chars) goto switchD_0010cdf9_caseD_60;\n        *data = current_data + num_chars;\n        if ((result != (long *)0x0) &&\n           (char_array[0] = (char *)find_match_and_retrieve_data_0010afd5(*config,config[1],current_data,num_chars,9),\n           char_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **data;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *data = *data + 1;\n        }\n        if (**data != 0x46) goto switchD_0010cdf9_caseD_60;\n        *data = *data + 1;\n        if (result == (long *)0x0) {\n          is_initialized = (undefined *)0x0;\n          num_structure = (ulong *)0x0;\n        }\n        else {\n          is_initialized = &is_long_long_int;\n          num_structure = &num_elements;\n        }\n        error_check = parse_entries_0010d882(config,data,num_structure,is_initialized);\n        if (error_check == '\\0') {\n          return 0;\n        }\n      }\n      if (**data == 0x5f) {\n        *data = *data + 1;\n        error_check = decode_binary_0010c95e(config,data,result);\n        if (error_check == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          struct_address = initialize_data_structure_00113bfa(char_array[0],*result);\n          *result = struct_address;\n          return 1;\n        }\n        struct_address = create_data_structure_00113b98(*result,char_array[0],num_elements,is_long_long_int);\n        *result = struct_address;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_val = process_data_0010d559(config,data,result);\n      return return_val;\n    case 0x52:\n      *data = pnext_byte0 + 1;\n      error_check = decode_binary_0010c95e(config,data,result);\n      if (error_check == '\\0') {\n        return 0;\n      }\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      struct_address = initialize_data_structure_00113cb9(*result);\n      *result = struct_address;\n      return 1;\n    case 0x54:\n      *data = pnext_byte0 + 1;\n      error_check = parse_number_00108ea1(data,&num_elements);\n      if (error_check != '\\0') {\n        if ((uint)num_elements < *(uint *)(config + 5)) {\n          char_array[0] = *(char **)((num_elements & 0xffffffff) * 0x10 + config[4]);\n          error_check = decode_binary_0010c95e(config,char_array,result);\n          if (error_check == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *data = pnext_byte0 + 1;\n    error_check = decode_binary_0010c95e(config,data,result);\n    if (error_check == '\\0') {\n      return 0;\n    }\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    struct_address = initialize_data_structure_00113d3a(*result);\n    *result = struct_address;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  is_void = false;\n  is_signed = false;\n  error_check = '\\0';\n  is_char = false;\n  do {\n    current_data = *data;\n    current_byte = *current_data;\n    if (current_byte == 0x55) {\n      error_check = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        is_void = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (result == (long *)0x0) {\nLAB_0010d0aa:\n          *data = current_data + 1;\n          return 1;\n        }\n        struct_address = find_named_type_0010914e(*config,&DAT_00120436);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = initialize_data_structure_00112904(6,4);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        type = \"unsigned char\";\n        if ((error_check == '\\0') && (type = \"char\", is_signed)) {\n          type = \"signed char\";\n        }\n        struct_address = find_named_type_0010914e(*config,type);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = update_data_structure_00113dfe(1,error_check);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        type = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        struct_address = find_named_type_0010914e(*config,\"float\");\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = initialize_data_structure_00113df2(4);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        type = \"unsigned int\";\n        type_int = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        type = \"long unsigned int\";\n        type_int = \"long int\";\nLAB_0010ced2:\n        if (error_check == '\\0') {\n          type = type_int;\n        }\n        struct_address = find_named_type_0010914e(*config,type);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = update_data_structure_00113dfe(4,error_check);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        type = \"long double\";\n        if (result == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        struct_address = find_named_type_0010914e(*config,type);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = initialize_data_structure_00113df2(8);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        type = \"short unsigned int\";\n        if (error_check == '\\0') {\n          type = \"short int\";\n        }\n        struct_address = find_named_type_0010914e(*config,type);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = update_data_structure_00113dfe(2,error_check);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        structure_ptr = char_array;\n        if (result == (long *)0x0) {\n          structure_ptr = (char **)0x0;\n        }\n        error_check = extract_string_value_0010d21c(config,data,structure_ptr);\n        if (error_check == '\\0') {\n          return 0;\n        }\n        if (result == (long *)0x0) {\n          return 1;\n        }\n        str_len = strlen(char_array[0]);\n        struct_address = find_match_and_retrieve_data_0010afd5(*config,config[1],char_array[0],str_len & 0xffffffff,9);\n        *result = struct_address;\n        free(char_array[0]);\n        struct_address = *result;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        struct_address = find_named_type_0010914e(*config,&DAT_00120495);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = initialize_data_structure_00113e17();\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        struct_address = find_named_type_0010914e(*config,\"__wchar_t\");\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = update_data_structure_00113dfe(2,1);\n          *result = struct_address;\n          *data = *data + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (result == (long *)0x0) goto LAB_0010d0aa;\n        type = \"long long unsigned int\";\n        if (error_check == '\\0') {\n          type = \"long long int\";\n        }\n        struct_address = find_named_type_0010914e(*config,type);\n        *result = struct_address;\n        if (struct_address == 0) {\n          struct_address = update_data_structure_00113dfe(8,error_check);\n          *result = struct_address;\n        }\n      }\n      *data = *data + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_char = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *data = current_data + 1;\n  } while( true );\nLAB_0010ca26:\n  next_data = current_data + 1;\n  *data = next_data;\n  current_byte = *next_data;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *data = current_data + 2;\n    error_check = decode_binary_0010c95e(config,data,result);\n    if (error_check == '\\0') {\n      return 0;\n    }\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    type_id = find_named_type_0010914e(*config,\"int\");\n    if (type_id == 0) {\n      type_id = update_data_structure_00113dfe(4,0);\n    }\n    struct_address = initialize_data_structure_00113c43(*result,type_id,0,struct_address,0);\n    *result = struct_address;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  struct_address = struct_address * 10 + (long)((char)current_byte + -0x30);\n  current_data = next_data;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(pnext_byte0);\n      if (result == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*data = current_data + 1, ((&_sch_istable)[(ulong)current_data[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnext_byte0 = *data;\n  num_chars = extract_number_from_byte_00108e76(data);\n  current_data = *data;\n  str_len = strlen((char *)current_data);\n  num_entries = (ulong)num_chars;\n  if (num_entries <= str_len) {\n    *data = current_data + num_entries;\n    if (result == (long *)0x0) {\n      return 1;\n    }\n    type_string = (void *)copy_and_null_terminate_00109a0b(current_data,num_entries);\n    struct_address = find_named_type_0010914e(*config,type_string);\n    *result = struct_address;\n    free(type_string);\n    if (*result == 0) {\n      struct_address = find_match_and_retrieve_data_0010afd5(*config,config[1],current_data,(int)*data - (int)current_data,0);\n      *result = struct_address;\njoined_r0x0010d1d8:\n      if (struct_address == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_char) {\n      struct_address = initialize_data_structure_00113b71(*result);\n      *result = struct_address;\n    }\n    if (is_void) {\n      struct_address = initialize_data_structure_00113b4a(*result);\n      *result = struct_address;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(pnext_byte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b98",
                "FUN_0010c95e",
                "strlen",
                "FUN_00113d3a",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00108e76",
                "FUN_0010d882",
                "free",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17",
                "FUN_00108ea1",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010c95e",
                "FUN_00113e5e",
                "FUN_0010d21c",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "decode_binary_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_modified_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_information_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_information_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_files_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_needed_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_information_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_files_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_files_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_information_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_information_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_information_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_information_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_information_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_information_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improved_extract_and_process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = process_debug_info_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_block_debugging_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = initialize_debug_record_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_information_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debug_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = initialize_section_data_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_exists_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_exists_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_exists_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_exists_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = initialize_section_data_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = reverse_and_improve_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_information_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_information_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_and_print_files_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_information_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_information_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_information_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_information_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_information_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_information_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_information_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_gnu_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_information_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_0010554f",
                "xmalloc",
                "fopen",
                "bfd_get_full_section_contents",
                "fclose",
                "bfd_map_over_sections",
                "__errno_location",
                "fwrite",
                "bfd_make_section_with_flags",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "FUN_00114190",
                "bfd_set_section_size",
                "bfd_create_gnu_debuglink_section",
                "FUN_00115530",
                "bfd_set_format",
                "FUN_00113fb0",
                "FUN_0010551d",
                "FUN_00115f30",
                "dcgettext",
                "bfd_get_arch",
                "FUN_001163d0",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "free",
                "FUN_00105828"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_time_0011a350",
                "param_1": "filePath",
                "param_2": "settings",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "uVar4": "translatedErrMsg",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "fileFlags",
                "uStack_24": "flag2",
                "uStack_20": "flag3",
                "uStack_1c": "flag4"
            },
            "code": "\nvoid setTime_0011a350(char *filePath,long settings)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 translatedErrMsg;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 fileFlags;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  \n  fileFlags = *(undefined4 *)(settings + 0x58);\n  flag2 = *(undefined4 *)(settings + 0x5c);\n  flag3 = *(undefined4 *)(settings + 0x60);\n  flag4 = *(undefined4 *)(settings + 100);\n  timeSpec1 = *(undefined4 *)(settings + 0x48);\n  timeSpec2 = *(undefined4 *)(settings + 0x4c);\n  timeSpec3 = *(undefined4 *)(settings + 0x50);\n  timeSpec4 = *(undefined4 *)(settings + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    translatedErrMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(translatedErrMsg,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_bfd_error_0011a110",
                "param_1": "errorCause",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "undefinedArg",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "dcgettext": "getLocalizedMessage",
                "bfd_get_error": "getBFDError",
                "bfd_errmsg": "getBFDErrorMessage",
                "fflush": "flushStream"
            },
            "code": "\n\n\nvoid printBFDError_0011a110(long errorCause)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 undefinedArg;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(standardOutput);\n  if (errorCause != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_001275e0,errorCause,errorMessage,undefinedArg);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_001275e0,errorMessage,undefinedArg);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_bfd_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "ptr_to_data",
                "param_2": "flag",
                "param_3": "int_value",
                "param_4": "ptr_to_data2",
                "param_5": "string_data",
                "lVar1": "temp1",
                "uVar2": "error_code",
                "lVar3": "temp2",
                "uVar4": "error_message",
                "uVar5": "translated_error_message",
                "sVar6": "string_length",
                "lVar7": "result",
                "local_44": "local_variable1",
                "uStack_40": "uStack40",
                "uStack_3f": "uStack3f",
                "uStack_3e": "uStack3e",
                "local_3c": "local_array",
                "bfd_hash_lookup": "hash_lookup",
                "bfd_get_error": "get_error",
                "bfd_errmsg": "get_error_message",
                "dcgettext": "get_translated_message",
                "print_error_message_00119ed0": "print_error_message",
                "strlen": "get_string_length",
                "xrealloc": "reallocate_memory",
                "CONCAT26": "concatenate_26",
                "CONCAT15": "concatenate_15",
                "CONCAT14": "concatenate_14",
                "CONCAT71": "concatenate_71"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *ptr_to_data,undefined flag,int int_value,undefined8 ptr_to_data2,char *string_data)\n\n{\n  long temp1;\n  undefined4 error_code;\n  long temp2;\n  undefined8 error_message;\n  undefined8 translated_error_message;\n  size_t string_length;\n  long result;\n  undefined4 local_variable1;\n  undefined uStack40;\n  undefined uStack3f;\n  undefined2 uStack3e;\n  undefined4 local_array [3];\n  \n  if (string_data == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    temp2 = bfd_hash_lookup(ptr_to_data + 7,string_data,1,1);\n    if (temp2 == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      translated_error_message = dcgettext(0,\"string_bfd_hash_lookup failed: %s\",5);\n      print_error_message(translated_error_message,error_message);\n      return 0;\n    }\n    result = *(long *)(temp2 + 0x20);\n    if (result == -1) {\n      result = ptr_to_data[6];\n      temp1 = ptr_to_data[5];\n      *(long *)(temp2 + 0x20) = result;\n      if (temp1 == 0) {\n        ptr_to_data[4] = temp2;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = temp2;\n      }\n      ptr_to_data[5] = temp2;\n      string_length = strlen(string_data);\n      ptr_to_data[6] = result + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*ptr_to_data + 8) + 0x50))(result,&local_variable1);\n  uStack3f = 0;\n  uStack40 = flag;\n  (**(code **)(*(long *)(*ptr_to_data + 8) + 0x68))((long)int_value,&uStack3e);\n  (**(code **)(*(long *)(*ptr_to_data + 8) + 0x50))(ptr_to_data2,local_array);\n  if ((ulong)ptr_to_data[3] < ptr_to_data[2] + 0xcU) {\n    ptr_to_data[3] = ptr_to_data[3] * 2;\n    result = xrealloc(ptr_to_data[1]);\n    ptr_to_data[1] = result;\n  }\n  result = ptr_to_data[2];\n  temp2 = ptr_to_data[1];\n  *(ulong *)(temp2 + result) = concatenate_26(uStack3e,concatenate_15(uStack3f,concatenate_14(uStack40,local_variable1)));\n  *(undefined4 *)(temp2 + 8 + result) = local_array[0];\n  ptr_to_data[2] = ptr_to_data[2] + 0xc;\n  return concatenate_71((int7)((ulong)result >> 8),1);\n}\n\n",
            "called": [
                "xrealloc",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e8a9",
                "FUN_0010e5db",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010ed2c",
                "FUN_0010ebb0",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010edb4",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010eafe"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "param_4": "unusedParam3",
                "iVar1": "comparisonResult",
                "uVar2": "message",
                "pcVar3": "commaPointer",
                "pcVar4": "nextSectionFlag",
                "sVar5": "flagLength",
                "iVar6": "sectionFlagLength",
                "uVar7": "parsedFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 unusedParam1,undefined8 unusedParam2,undefined8 unusedParam3)\n\n{\n  int comparisonResult;\n  undefined8 message;\n  char *commaPointer;\n  char *nextSectionFlag;\n  size_t flagLength;\n  int sectionFlagLength;\n  uint parsedFlags;\n  undefined result [16];\n  \n  parsedFlags = 0;\n  do {\n    commaPointer = strchr(sectionFlags,0x2c);\n    if (commaPointer == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      sectionFlagLength = (int)flagLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaPointer + 1;\n      sectionFlagLength = (int)commaPointer - (int)sectionFlags;\n    }\n    flagLength = (size_t)sectionFlagLength;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (comparisonResult == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (comparisonResult == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (comparisonResult == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (comparisonResult == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (comparisonResult == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (comparisonResult == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (comparisonResult == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (comparisonResult == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (comparisonResult == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (comparisonResult == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (comparisonResult == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (comparisonResult != 0) {\n                              commaPointer = (char *)xmalloc((long)(sectionFlagLength + 1));\n                              strncpy(commaPointer,sectionFlags,flagLength);\n                              commaPointer[flagLength] = '\\0';\n                              message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(message,commaPointer);\n                              message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = parsedFlags;\n  result._8_8_ = unusedParam3;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_modified_string_001125fa",
                "param_1": "inputParams",
                "uVar1": "totalLength",
                "ppcVar2": "stringPtr",
                "sVar3": "firstStringLength",
                "sVar4": "secondStringLength",
                "__s": "concatenatedString"
            },
            "code": "\nchar * getModifiedString_001125fa(char **inputParams)\n\n{\n  ulong totalLength;\n  char **stringPtr;\n  size_t firstStringLength;\n  size_t secondStringLength;\n  char *concatenatedString;\n  \n  if (inputParams == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  stringPtr = (char **)inputParams[0x1d];\n  concatenatedString = *inputParams;\n  if ((stringPtr != (char **)0x0) && ((*(byte *)((long)stringPtr + 0x49) & 0x10) == 0)) {\n    firstStringLength = strlen(*stringPtr);\n    secondStringLength = strlen(concatenatedString);\n    totalLength = firstStringLength + 3 + secondStringLength;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)inputParams[0x1d],*inputParams);\n    concatenatedString = DAT_00127a30;\n  }\n  return concatenatedString;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "get_modified_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "initialize_value_00108f05"
            },
            "code": "\nundefined initializeValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "initialize_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_memory_00108863",
                "puVar1": "arrayPointer",
                "puVar2": "nextArrayPointer"
            },
            "code": "\nvoid cleanupMemory_00108863(void)\n\n{\n  undefined4 *arrayPointer;\n  undefined4 *nextArrayPointer;\n  \n  arrayPointer = (undefined4 *)&DAT_00127720;\n  do {\n    nextArrayPointer = arrayPointer + 6;\n    free(*(void **)(arrayPointer + 4));\n    *(undefined8 *)(arrayPointer + 4) = 0;\n    arrayPointer = nextArrayPointer;\n  } while (nextArrayPointer != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "process_debug_start_source_00108f08",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "iVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "currentNode",
                "puVar4": "previousNode",
                "lVar5": "loopCounter",
                "puVar6": "ptr3",
                "pcVar7": "filenamePtr",
                "puVar8": "lastNode",
                "bVar9": "byteValue"
            },
            "code": "\n\n\nundefined8 processDebugStartSource_00108f08(long ptr1,char *ptr2)\n\n{\n  int result;\n  undefined8 returnValue;\n  undefined8 *currentNode;\n  undefined8 *previousNode;\n  long loopCounter;\n  undefined8 *ptr3;\n  char *filenamePtr;\n  undefined8 *lastNode;\n  byte byteValue;\n  \n  byteValue = 0;\n  filenamePtr = \"\";\n  if (ptr2 != (char *)0x0) {\n    filenamePtr = ptr2;\n  }\n  if (*(long *)(ptr1 + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    for (currentNode = *(undefined8 **)(*(long *)(ptr1 + 8) + 8); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      result = filename_cmp(currentNode[1],filenamePtr);\n      if (result == 0) goto LAB_00108fad;\n    }\n    currentNode = (undefined8 *)xmalloc(0x18);\n    ptr3 = *(undefined8 **)(ptr1 + 0x10);\n    lastNode = currentNode;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)lastNode = 0;\n      lastNode = (undefined8 *)((long)lastNode + (ulong)byteValue * -8 + 4);\n    }\n    currentNode[1] = filenamePtr;\n    lastNode = (undefined8 *)*ptr3;\n    while (previousNode = lastNode, previousNode != (undefined8 *)0x0) {\n      ptr3 = previousNode;\n      lastNode = (undefined8 *)*previousNode;\n    }\n    *ptr3 = currentNode;\nLAB_00108fad:\n    *(undefined8 **)(ptr1 + 0x10) = currentNode;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_start_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_files_00114190",
                "param_1": "fileNames",
                "param_2": "processMode",
                "param_3": "flags",
                "uVar1": "bitMask",
                "plVar2": "pattern",
                "pplVar3": "current",
                "iVar4": "result",
                "uVar5": "errorMessage",
                "pplVar6": "next",
                "pplVar7": "previous",
                "pplVar8": "temp"
            },
            "code": "\nlong ** processFiles_00114190(long *fileNames,char processMode,uint flags)\n\n{\n  uint bitMask;\n  long *pattern;\n  long **current;\n  int result;\n  undefined8 errorMessage;\n  long **next;\n  long **previous;\n  long **temp;\n  \n  previous = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (processMode == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (processMode == '\\0') {\n    if ((flags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      next = (long **)*previous;\n      if (next == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous = (long **)0x0;\n    }\n    else {\n      pattern = DAT_001278e0[1];\n      if (*(char *)pattern == '!') {\n        result = fnmatch((char *)((long)pattern + 1),(char *)fileNames,0);\n        next = previous;\n        if (result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      result = fnmatch((char *)pattern,(char *)fileNames,0);\n      if (result != 0) goto LAB_001141e5;\n      next = (long **)*previous;\n      if (next == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)next + 0x14)) != 0) {\n      pattern = next[1];\n      if (*(char *)pattern == '!') {\n        result = fnmatch((char *)((long)pattern + 1),(char *)fileNames,0);\n        if (result == 0) {\nLAB_0011438e:\n          *(undefined *)(next + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = fnmatch((char *)pattern,(char *)fileNames,0);\n        if ((previous == (long **)0x0) && (result == 0)) {\n          temp = (long **)*next;\n          previous = next;\n          if (temp == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    temp = (long **)*next;\n    next = previous;\n    if (temp != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = strcmp((char *)DAT_001278e0[1],(char *)fileNames);\n    if (result == 0) {\nLAB_001143cd:\n      bitMask = *(uint *)((long)previous + 0x14);\n      if ((((bitMask & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((bitMask & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,fileNames);\n      }\n      if ((((bitMask & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,fileNames);\n      }\n      if ((((bitMask & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous + 0x14) = bitMask | flags;\n        return previous;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,fileNames);\n    }\n    previous = (long **)*previous;\n    if (previous == (long **)0x0) goto LAB_001142a9;\n    result = strcmp((char *)previous[1],(char *)fileNames);\n    if (result == 0) goto LAB_001143cd;\n    temp = (long **)*previous;\n    next = (long **)0x0;\n    if (temp == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous = next;\n      if (processMode == '\\0') {\n        while (next = temp, current = previous, temp = next,\n              (flags & *(uint *)((long)next + 0x14)) != 0) {\n          pattern = next[1];\n          if (*(char *)pattern == '!') {\n            result = fnmatch((char *)((long)pattern + 1),(char *)fileNames,0);\n            if (result == 0) goto LAB_0011438e;\n            temp = (long **)*next;\n            if ((long **)*next == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = fnmatch((char *)pattern,(char *)fileNames,0);\n            if ((previous == (long **)0x0) && (result == 0)) {\n              previous = next;\n              temp = (long **)*next;\n              if ((long **)*next == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              temp = (long **)*next;\n              if ((long **)*next == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = strcmp((char *)temp[1],(char *)fileNames);\n        current = next;\n        previous = temp;\n        if (result == 0) goto LAB_001143cd;\n      }\n      next = current;\n      temp = (long **)*temp;\n      previous = next;\n    } while (temp != (long **)0x0);\nLAB_001142a1:\n    if (processMode != '\\0') {\nLAB_001142a9:\n      next = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(next + 3) = (undefined  [16])0x0;\n      *(undefined *)(next + 2) = 0;\n      *(uint *)((long)next + 0x14) = flags;\n      next[5] = (long *)0x0;\n      previous = next;\n      *next = (long *)DAT_001278e0;\n      DAT_001278e0 = previous;\n      next[1] = fileNames;\n      return next;\n    }\n  }\nLAB_00114212:\n  if (previous == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous + 2) = 1;\n  return previous;\n}\n\n",
            "called": [
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00114c20",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_files_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_build_attributes_00116490",
                "param_1": "param1",
                "param_2": "nAttributes",
                "param_3": "attributeData",
                "param_4": "attributeSize",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "flag",
                "puVar5": "ptr5",
                "iVar6": "var6",
                "lVar7": "var7",
                "uVar8": "var8",
                "in_RAX": "noteType",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "ptr",
                "uVar13": "var13",
                "unaff_RBX": "endOfNotes",
                "unaff_RBP": "endOfAttributes",
                "puVar14": "ptr14",
                "puVar15": "ptr15",
                "cVar16": "charVar",
                "puVar17": "ptr17",
                "puVar18": "ptr18",
                "in_R11": "descriptionSize",
                "unaff_R12": "attribute",
                "puVar19": "ptr19",
                "unaff_R13": "startOfNotes",
                "__nmemb": "size",
                "unaff_R14": "functionPointer",
                "puVar20": "ptr20",
                "bVar21": "byteVar",
                "iVar22": "intVar",
                "unaff_retaddr": "returnAddress",
                "param_9": "noteDescription",
                "in_stack_00000020": "resultSize",
                "in_stack_00000028": "sortedAttributes",
                "in_stack_00000030": "ptrVar",
                "in_stack_00000038": "flag1",
                "in_stack_00000040": "flag2",
                "in_stack_00000048": "errorMessages"
            },
            "code": "\nulong processBuildAttributes_00116490(undefined8 param1,ulong nAttributes,ulong attributeData,long attributeSize)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *ptr5;\n  int var6;\n  long var7;\n  undefined8 var8;\n  ulong noteType;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr;\n  ulong var13;\n  ulong endOfNotes;\n  ulong endOfAttributes;\n  ulong *ptr14;\n  undefined *ptr15;\n  char charVar;\n  undefined *ptr17;\n  undefined *ptr18;\n  ulong descriptionSize;\n  ulong *attribute;\n  ulong *ptr19;\n  ulong startOfNotes;\n  size_t size;\n  undefined8 *functionPointer;\n  ulong *ptr20;\n  byte byteVar;\n  int intVar;\n  ulong returnAddress;\n  ulong param_7;\n  uint param_8;\n  ulong noteDescription;\n  ulong resultSize;\n  ulong *sortedAttributes;\n  undefined *ptrVar;\n  uint flag1;\n  uint flag2;\n  undefined8 *errorMessages;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  var7 = attributeSize;\n  var10 = endOfAttributes;\n  var13 = startOfNotes;\n  if (noteType == 0) {\n    if (nAttributes == 0x100) {\n      attribute[7] = returnAddress;\n      var11 = returnAddress;\nLAB_001164af:\n      var9 = startOfNotes;\n      var13 = startOfNotes;\n      returnAddress = var11;\n    }\n    else {\n      attribute[7] = noteDescription;\nLAB_0011669e:\n      var10 = endOfAttributes;\n      var9 = endOfAttributes;\n    }\nLAB_001164bb:\n    attribute[8] = var9;\n    if (*(char *)((attribute[3] - 1) + attributeData) != '\\0') {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr19 = attribute + 9;\n    if (0xb < endOfNotes) {\n      var9 = (**(code **)(functionPointer[1] + 0x40))(var7);\n      *ptr19 = var9;\n      var9 = (**(code **)(functionPointer[1] + 0x40))(var7 + 4);\n      attribute[10] = var9;\n      nAttributes = (**(code **)(functionPointer[1] + 0x40))(var7 + 8);\n      attributeData = *ptr19;\n      attribute[0xb] = nAttributes;\n      noteType = attribute[10];\n      var9 = attributeData + 3 & 0xfffffffffffffffc;\n      attribute[0xf] = var9;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < nAttributes - 0x100) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + noteType + 0xc;\n      if (endOfNotes < var11) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attributeData < 2) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      attribute[0xc] = var7 + 0xc;\n      descriptionSize = var7 + 0xc + var9;\n      attribute[0xd] = descriptionSize;\n      endOfNotes = endOfNotes + (-0xc - (var9 + noteType));\n      attributeSize = var7 + var11;\n      endOfAttributes = var10;\n      attribute = ptr19;\n      startOfNotes = var13;\n      if (attributeData != 2) {\n        if (*(char *)(var7 + 0xc) == '$') {\n          if ((*(char *)(var7 + 0xd) == '\\x01') && (*(char *)(var7 + 0xe) == '1')) {\n            var10 = processBuildAttributes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < attributeData) && (*(char *)(var7 + 0xc) == 'G')) &&\n                 (*(char *)(var7 + 0xd) == 'A')) &&\n                ((*(char *)(var7 + 0xe) == '$' && (*(char *)(var7 + 0xf) == '\\x01')))) {\n          if (*(char *)(var7 + 0x10) == '2') {\n            var10 = processBuildAttributes_00116490();\n            return var10;\n          }\n          if (*(char *)(var7 + 0x10) == '3') {\n            var10 = processBuildAttributes_00116490();\n            return var10;\n          }\n          var7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (endOfNotes != 0) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag1 | flag2 | param_8) == 0) {\n      var1 = *functionPointer;\n      var2 = *errorMessages;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      size = ((long)ptr19 - (long)sortedAttributes >> 3) * -0x71c71c71c71c71c7;\n      qsort(sortedAttributes,size,0x48,compare_memory_and_values_0011a1b0);\n      for (ptr14 = sortedAttributes; ptr14 < ptr19; ptr14 = ptr14 + 9) {\n        var10 = ptr14[2];\n        if (var10 != 0) {\n          var13 = ptr14[7];\n          var9 = ptr14[8];\n          ptr20 = ptr14;\n          intVar = 0;\n          if (var13 == var9) {\n            ptr14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr5 = ptr20;\n                ptr20 = ptr5 + -9;\n                if (ptr20 < sortedAttributes) goto LAB_001167f5;\n                var11 = ptr5[-7];\n              } while (var11 == 0);\n              if ((*ptr20 != *ptr14) ||\n                 (var6 = memcmp((void *)ptr5[-6],(void *)ptr14[3],*ptr14), var6 != 0))\n              break;\n              var3 = ptr5[-2];\n              var12 = ptr5[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr14[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto decode_and_process_data_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr5[-1] = var12;\n                  ptr5[-2] = var13;\n                  ptr14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto decode_and_process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\ndecode_and_process_data_00116852:\n              flag = intVar < 0x11;\n              intVar = intVar + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(sortedAttributes,size,0x48,compare_ulong_arrays_0011a250);\n      ptr = (undefined *)xmalloc(resultSize * 2);\n      param_7 = 0;\n      noteDescription = 0;\n      ptr18 = ptr;\n      for (ptr14 = sortedAttributes; ptr14 < ptr19; ptr14 = ptr14 + 9) {\n        if (ptr14[2] != 0) {\n          ptr17 = ptr18 + 4;\n          ptr15 = ptr18 + 0xc;\n          if ((ptr14[7] == noteDescription) && (ptr14[8] == param_7)) {\n            (**(code **)(functionPointer[1] + 0x50))(*ptr14,ptr18);\n            (**(code **)(functionPointer[1] + 0x50))(0,ptr17);\n            (**(code **)(functionPointer[1] + 0x50))(ptr14[2],ptr18 + 8);\n            var13 = ptr14[6];\n            var10 = *ptr14;\n            ptr18 = (undefined *)ptr14[3];\n            ptr17 = ptr15;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr17 = *ptr18;\n              ptr18 = ptr18 + (ulong)byteVar * -2 + 1;\n              ptr17 = ptr17 + (ulong)byteVar * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (var7 = var13 - var10; var7 != 0; var7 = var7 + -1) {\n                *ptr17 = 0;\n                ptr17 = ptr17 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            ptr18 = ptr15 + var13;\n          }\n          else {\n            (**(code **)(functionPointer[1] + 0x50))();\n            if (*(int *)(functionPointer[1] + 8) == 5) {\n              charVar = (*(char *)(functionPointer[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(functionPointer[1] + 0x50))(charVar,ptr17);\n            (**(code **)(functionPointer[1] + 0x50))(ptr14[2],ptr18 + 8);\n            var10 = *ptr14;\n            ptr18 = (undefined *)ptr14[3];\n            ptr17 = ptr15;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr17 = *ptr18;\n              ptr18 = ptr18 + (ulong)byteVar * -2 + 1;\n              ptr17 = ptr17 + (ulong)byteVar * -2 + 1;\n            }\n            var13 = ptr14[6];\n            if (var10 < var13) {\n              for (var7 = var13 - var10; var7 != 0; var7 = var7 + -1) {\n                *ptr17 = 0;\n                ptr17 = ptr17 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            var7 = functionPointer[1];\n            ptr15 = ptr15 + var13;\n            ptr18 = ptr15 + 8;\n            if ((*(int *)(var7 + 8) == 5) && (*(char *)(functionPointer[0x22] + 4) == '\\x02')) {\n              (**(code **)(var7 + 0x38))(ptr14[7],ptr15);\n              (**(code **)(functionPointer[1] + 0x38))(ptr14[8],ptr18);\n              ptr18 = ptr15 + 0x10;\n            }\n            else {\n              (**(code **)(var7 + 0x50))(ptr14[7],ptr15);\n              (**(code **)(functionPointer[1] + 0x50))(ptr14[8],ptr15 + 4);\n            }\n            noteDescription = ptr14[7];\n            param_7 = ptr14[8];\n          }\n        }\n      }\n      var13 = (long)ptr18 - (long)ptr;\n      var10 = var13;\n      ptr18 = ptr;\n      if (var13 < resultSize) {\n        for (; resultSize = var13, var10 != 0; var10 = var10 - 1) {\n          *ptrVar = *ptr18;\n          ptr18 = ptr18 + (ulong)byteVar * -2 + 1;\n          ptrVar = ptrVar + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(sortedAttributes);\n      return resultSize;\n    }\n    if (((flag2 | param_8) == 0) || (flag1 == 0)) {\n      if (flag2 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    var7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      var11 = (**(code **)(functionPointer[1] + 0x28))(descriptionSize);\n      var9 = (**(code **)(functionPointer[1] + 0x28))(attribute[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (attribute[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = returnAddress;\n        }\n        attributeData = *attribute;\n        attribute[7] = var11;\n        var13 = var9;\n        returnAddress = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = noteDescription;\n        }\n        attributeData = *attribute;\n        attribute[7] = var11;\n        var10 = var9;\n        noteDescription = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        var11 = (**(code **)(functionPointer[1] + 0x40))(descriptionSize);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        var10 = decode_and_process_data_001086af();\n        return var10;\n      }\n    }\n    var7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (var7 != 0) {\n    bfd_set_error(0x11);\n    print_error_information_001126c0(0,functionPointer,errorMessages,var7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "process_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_and_values_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto decode_and_process_data_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto decode_and_process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\ndecode_and_process_data_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_ulong_arrays_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_information_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "targetName",
                "param_2": "outputFile",
                "lVar1": "target",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long targetName,FILE *outputFile)\n\n{\n  long target;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    target = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (target == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "free",
                "dcgettext",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_debug_function_0010be1a",
                "param_1": "functionContext",
                "param_2": "newFunction",
                "param_3": "unused1",
                "param_4": "unused2",
                "lVar1": "currentBlock",
                "uVar2": "translation",
                "pcVar3": "errorMessage"
            },
            "code": "\n\n\nundefined  [16] endDebugFunction_0010be1a(long functionContext,undefined8 newFunction,undefined8 unused1,undefined8 unused2)\n\n{\n  long currentBlock;\n  undefined8 translation;\n  char *errorMessage;\n  undefined auVar4 [16];\n  \n  if (((*(long *)(functionContext + 8) == 0) || (currentBlock = *(long *)(functionContext + 0x20), currentBlock == 0)) ||\n     (*(long *)(functionContext + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) == 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newFunction;\n      translation = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(undefined (*) [16])(functionContext + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  translation = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",translation);\n  translation = 0;\nLAB_0010be86:\n  auVar4._8_8_ = unused2;\n  auVar4._0_8_ = translation;\n  return auVar4;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "end_debug_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_and_populate_data_structure_00113da9",
                "param_1": "input_byte",
                "param_2": "unused_param",
                "param_3": "initial_value",
                "param_4": "secondary_value",
                "puVar1": "data_structure_pointer",
                "lVar2": "counter",
                "puVar3": "pointer_to_data",
                "bVar4": "zero_byte",
                "auVar5": "result_structure"
            },
            "code": "\nundefined  [16] initialize_and_populate_data_structure_00113da9(byte input_byte,undefined8 unused_param,undefined8 initial_value,undefined8 secondary_value)\n\n{\n  undefined8 *data_structure_pointer;\n  long counter;\n  undefined8 *pointer_to_data;\n  byte zero_byte;\n  undefined result_structure [16];\n  \n  zero_byte = 0;\n  result_structure._0_8_ = initialize_data_structure_00112904(8 - (uint)input_byte);\n  if (result_structure._0_8_ != 0) {\n    data_structure_pointer = (undefined8 *)xmalloc(0x28);\n    pointer_to_data = data_structure_pointer + 1;\n    for (counter = 8; counter != 0; counter = counter + -1) {\n      *(undefined4 *)pointer_to_data = 0;\n      pointer_to_data = (undefined8 *)((long)pointer_to_data + (ulong)zero_byte * -8 + 4);\n    }\n    *data_structure_pointer = initial_value;\n    *(undefined8 **)(result_structure._0_8_ + 0x10) = data_structure_pointer;\n  }\n  result_structure._8_8_ = secondary_value;\n  return result_structure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_populate_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_ulong_arrays_0011a250",
                "param_1": "array_1",
                "param_2": "array_2",
                "uVar1": "value1"
            },
            "code": "\nint compare_ulong_arrays_0011a250(ulong *array_1,ulong *array_2)\n\n{\n  ulong value1;\n  \n  value1 = array_1[2];\n  if (value1 == array_2[2]) {\n    if (array_2[7] <= array_1[7]) {\n      if (array_1[7] <= array_2[7]) {\n        if (array_2[8] < array_1[8]) {\n          return -1;\n        }\n        if (array_2[8] <= array_1[8]) {\n          if ((4 < *array_1) && (4 < *array_2)) {\n            if (*(char *)(array_1[3] + 3) != *(char *)(array_2[3] + 3)) {\n              return (int)*(char *)(array_1[3] + 3) - (int)*(char *)(array_2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((value1 == 0) || ((value1 != 0x100 && (array_2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_ulong_arrays_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "dataPtr",
                "param_2": "configPtr",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "arraySize",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "initializedFlag",
                "local_60": "outputBuffer"
            },
            "code": "\nundefined4 processData_0010a69a(long dataPtr,undefined8 configPtr,int size,char flag,uint value)\n\n{\n  undefined4 result;\n  long arraySize;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined initializedFlag;\n  char outputBuffer [48];\n  \n  if (size == 0) {\n    outputBuffer[0] = '\\0';\n    initializedFlag = 0;\n    arraySize = 0;\n  }\n  else {\n    arraySize = resize_and_initialize_array_00109c2e();\n    if (arraySize < 0) {\n      return 0;\n    }\n    initializedFlag = 1;\n    sprintf(outputBuffer,\"%ld=\",arraySize);\n  }\n  stringLength = strlen(outputBuffer);\n  sprintf(outputBuffer + stringLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_struct_00109b52(dataPtr,outputBuffer,arraySize,initializedFlag,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  arraySize = *(long *)(dataPtr + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(arraySize + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(dataPtr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "strlen",
                "xmalloc",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_section_00115b70",
                "param_1": "sectionNames",
                "pcVar1": "currentSection",
                "iVar2": "sectionComparison1",
                "iVar3": "sectionComparison2",
                "lVar4": "result1",
                "lVar5": "result2",
                "uVar6": "returnValue",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 processSection_00115b70(char **sectionNames)\n\n{\n  char *currentSection;\n  int sectionComparison1;\n  int sectionComparison2;\n  long result1;\n  long result2;\n  undefined8 returnValue;\n  long *sectionList;\n  \n  result1 = process_files_00114190(*sectionNames,0,4);\n  if (result1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      result1 = process_files_00114190(*sectionNames,0,1);\n      result2 = process_files_00114190(*sectionNames,0,2);\n      if (result1 != 0) {\n        if (result2 != 0) {\n          currentSection = *sectionNames;\n          returnValue = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(returnValue,currentSection);\n        }\n        if (result1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *sectionNames;\n          sectionList = DAT_001279b8;\n          do {\n            sectionComparison2 = strcmp(currentSection,(char *)sectionList[1]);\n            if (sectionComparison2 == 0) {\n              returnValue = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(returnValue,currentSection);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (result2 == 0)) {\n        return 1;\n      }\n    }\n    sectionComparison2 = DAT_00127a2c;\n    if ((*(byte *)((long)sectionNames + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        currentSection = *sectionNames;\n        sectionComparison1 = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((sectionComparison1 != 0) && (sectionComparison1 = strcmp(currentSection,\".gnu_debuglink\"), sectionComparison1 != 0)) {\n          sectionComparison2 = strcmp(currentSection,\".reloc\");\n          if (sectionComparison2 != 0) {\n            return 1;\n          }\n          returnValue = process_logic_0010829e();\n          return returnValue;\n        }\n      }\n      if (sectionComparison2 == 5) {\n        returnValue = check_last_four_chars_00113ede(sectionNames);\n        return returnValue;\n      }\n      if (sectionComparison2 == 4) {\n        return 0;\n      }\n    }\n    if (sectionComparison2 == 6) {\n      returnValue = verify_and_toggle_last_four_bits_001082b3();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00119dd0",
                "dcgettext",
                "FUN_0010829e",
                "FUN_00114190",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "process_section_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocations_00116030",
                "param_1": "param_buffer",
                "param_2": "buffer_size",
                "plVar1": "current_reloc",
                "lVar2": "reloc_value",
                "lVar3": "constant1",
                "lVar4": "constant2",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "reloc_upper_bound",
                "__ptr": "reloc_data",
                "lVar7": "num_relocs",
                "extraout_RAX": "extra_return_value",
                "lVar8": "counter",
                "uStack_28": "stack_variable"
            },
            "code": "\n\n\nundefined8 process_relocations_00116030(undefined8 *param_buffer,long buffer_size)\n\n{\n  long *current_reloc;\n  long reloc_value;\n  long constant1;\n  long constant2;\n  int error_code;\n  undefined8 return_value;\n  long reloc_upper_bound;\n  void *reloc_data;\n  long num_relocs;\n  undefined8 extra_return_value;\n  long counter;\n  undefined8 stack_variable;\n  \n  if (*(long *)(buffer_size + 0x60) == 0) {\n    return return_value;\n  }\n  reloc_upper_bound = bfd_get_reloc_upper_bound();\n  if (reloc_upper_bound < 0) {\n    if ((reloc_upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_bfd_error_0011a110(*param_buffer);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_upper_bound != 0) {\n    reloc_data = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(param_buffer,buffer_size,reloc_data);\n    constant2 = _DAT_00128680;\n    constant1 = _DAT_00128568;\n    reloc_upper_bound = _fwrite;\n    if (num_relocs < 0) {\n      print_bfd_error_0011a110(*param_buffer);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      counter = 0;\n      do {\n        current_reloc = **(long ***)((long)reloc_data + counter * 8);\n        if ((((current_reloc != (long *)0x0) && (reloc_value = *current_reloc, reloc_value != 0)) && (reloc_value != reloc_upper_bound)) &&\n           ((reloc_value != constant2 && (reloc_value != constant1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        counter = counter + 1;\n      } while (num_relocs != counter);\n    }\n    free(reloc_data);\n    return extra_return_value;\n  }\n  return stack_variable;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "fwrite",
                "free",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "FUN_001083b7",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocations_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_last_four_chars_00113ede",
                "param_1": "strings_array",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "code": "\nundefined8 check_last_four_chars_00113ede(char **strings_array)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (strings_array == (char **)0x0) {\n    return 0;\n  }\n  string = *strings_array;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      comparison_result = compare_strings_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_last_four_chars_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record_1",
                "param_2": "record_2",
                "lVar1": "value_1",
                "lVar2": "value_2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record_1,long *record_2)\n\n{\n  long value_1;\n  long value_2;\n  int result;\n  uint flag;\n  \n  value_1 = *record_1;\n  value_2 = *record_2;\n  flag = *(uint *)(value_2 + 0x24) & 0x102;\n  if ((*(uint *)(value_1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value_1 + 0x38) <= *(ulong *)(value_2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value_2 + 0x38) <= *(ulong *)(value_1 + 0x38)) {\n      if (*(ulong *)(value_2 + 0x40) < *(ulong *)(value_1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value_2 + 0x40) <= *(ulong *)(value_1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value_1 + 0x18) <= *(uint *)(value_2 + 0x18)) {\n            return -(uint)(*(uint *)(value_1 + 0x18) < *(uint *)(value_2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_data_0010c892",
                "param_1": "functionPointer",
                "param_2": "dataStructure",
                "cVar1": "flag",
                "lVar2": "structurePtr",
                "lVar3": "tagType",
                "uVar4": "returnValue",
                "puVar5": "currentNode",
                "iVar6": "kind",
                "_stderr": "errorFile"
            },
            "code": "\n\n\nundefined8 processDebugData_0010c892(undefined8 functionPointer,long dataStructure)\n\n{\n  char flag;\n  long structurePtr;\n  long tagType;\n  undefined8 returnValue;\n  undefined8 *currentNode;\n  int kind;\n  \n  if (*(char *)(dataStructure + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (currentNode = *(undefined8 **)(dataStructure + 0x1a0); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      kind = *(int *)(currentNode + 2);\n      tagType = currentNode[1];\n      if (kind != 0) {\n        if (tagType != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(errorFile,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        currentNode[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagType == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      structurePtr = initialize_data_structure_00112904(kind,0);\n      if (structurePtr == 0) goto LAB_0010c910;\n      tagType = debug_tag_type_0010c6be(functionPointer,tagType,structurePtr);\n      currentNode[3] = tagType;\n      if (tagType == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    flag = update_records_0010c1c6();\n    if (flag != '\\0') {\n      flag = end_debug_function_0010be1a(functionPointer,*(undefined8 *)(dataStructure + 0x68));\n      if (flag != '\\0') {\n        *(undefined *)(dataStructure + 0x60) = 0;\n        *(undefined8 *)(dataStructure + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_0010c6be",
                "dcgettext",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = firstParameter;\n  allocatedMemory[1] = secondParameter;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00113e23",
                "FUN_00113b71",
                "FUN_00113b4a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "stringComparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "comparisonResult"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int stringComparisonResult;\n  undefined8 returnValue;\n  undefined comparisonResult [16];\n  \n  stringComparisonResult = strcmp(*string1,*string2);\n  comparisonResult._1_7_ = 0;\n  comparisonResult[0] = stringComparisonResult == 0;\n  comparisonResult._8_8_ = returnValue;\n  return comparisonResult;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0010922b",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010914e",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00115f50",
                "FUN_00115b70",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "index",
                "lVar2": "temp1",
                "lVar3": "temp2",
                "plVar4": "functionChain",
                "uVar5": "count"
            },
            "code": "\nvoid executeFunctionChain_0011a390(void)\n\n{\n  long index;\n  long temp1;\n  long temp2;\n  long *functionChain;\n  uint count;\n  \n  functionChain = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionChain[index + 2])();\n        temp1 = index + -1;\n        if (-1 < (int)temp1) {\n          temp2 = temp1;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionChain[index + 1])();\n                        temp1 = index + -2;\n                      }\n                      (*(code *)functionChain[temp1 + 2])();\n                      temp1 = temp1 + -1;\n                    }\n                    (*(code *)functionChain[temp1 + 2])();\n                    temp1 = temp1 + -1;\n                  }\n                  (*(code *)functionChain[temp1 + 2])();\n                  temp1 = temp1 + -1;\n                }\n                (*(code *)functionChain[temp1 + 2])();\n                temp1 = temp1 + -1;\n              }\n              (*(code *)functionChain[temp1 + 2])();\n              temp1 = temp1 + -1;\n            }\n            (*(code *)functionChain[temp1 + 2])();\n            temp2 = temp1 + -1;\n            if ((int)(temp1 + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionChain[temp2 + 2])();\n            index = temp2 + -1;\n            (*(code *)functionChain[temp2 + 1])();\n            (*(code *)functionChain[temp2])();\n            (*(code *)functionChain[index])();\n            (*(code *)functionChain[temp2 + -2])();\n            (*(code *)functionChain[temp2 + -3])();\n            (*(code *)functionChain[temp2 + -4])();\n            (*(code *)functionChain[temp2 + -5])();\n            temp2 = temp2 + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_function_chain_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "process_and_format_string_0010e842",
                "param_1": "input",
                "param_2": "string",
                "param_3": "value",
                "param_4": "output",
                "__s": "formatted_string",
                "auVar2": "result",
                "sVar1": "string_length"
            },
            "code": "\nundefined  [16] process_and_format_string_0010e842(undefined8 input,char *string,undefined8 value,undefined8 output)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",string,value);\n  result._0_4_ = process_string_0010e2f0(input,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_structure_00113cb9",
                "param_1": "input_value",
                "lVar1": "data_structure_ptr"
            },
            "code": "\nlong initialize_data_structure_00113cb9(long input_value)\n\n{\n  long data_structure_ptr;\n  \n  if (input_value != 0) {\n    data_structure_ptr = initialize_data_structure_00113cb9_00112904(0xe,0);\n    if (data_structure_ptr == 0) {\n      data_structure_ptr = 0;\n    }\n    else {\n      *(long *)(data_structure_ptr + 0x10) = input_value;\n    }\n    return data_structure_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_and_free_string_0010eafe",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "suffix",
                "__s": "extractedString",
                "sVar2": "prefixLength",
                "sVar3": "extractedStringLength",
                "__s_00": "combinedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processAndFreeString_0010eafe(long input,char *prefix,char suffix)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t prefixLength;\n  size_t extractedStringLength;\n  char *combinedString;\n  \n  if ((*(int *)(input + 0x1f8) == 0) && (*(long *)(input + 0x1e8) == -1)) {\n    extractedString = (char *)extract_and_free_pointer_00109b2f();\n    prefixLength = strlen(prefix);\n    extractedStringLength = strlen(extractedString);\n    combinedString = (char *)xmalloc(prefixLength + 3 + extractedStringLength);\n    sprintf(combinedString,\"%s:%c%s\",prefix,(ulong)((-(uint)(suffix == '\\0') & 0x20) + 0x46),extractedString);\n    *(undefined8 *)(input + 0x1e8) = *(undefined8 *)(input + 0x10);\n    result = process_string_0010e2f0(input,0x24,0,0,combinedString);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_structure_00113df2",
                "param_1": "param"
            },
            "code": "\nvoid initializeDataStructure_00113df2(undefined4 param)\n\n{\n  initialize_data_structure_00112904(4,param);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "construct_and_initialize_data_0010a377",
                "param_1": "input_ptr",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "len1",
                "sVar4": "len2",
                "__s_01": "combined_string",
                "uVar2": "result",
                "uVar5": "default_value"
            },
            "code": "\nundefined4 construct_and_initialize_data_0010a377(long input_ptr)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t len1;\n  size_t len2;\n  char *combined_string;\n  undefined default_value;\n  \n  default_value = 1;\n  flag = *(char *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_pointer_00109b2f();\n  if (flag == '\\0') {\n    default_value = *(undefined *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  }\n  string2 = (char *)extract_and_free_pointer_00109b2f(input_ptr);\n  len1 = strlen(string1);\n  len2 = strlen(string2);\n  combined_string = (char *)xmalloc(len1 + 3 + len2);\n  sprintf(combined_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = initialize_data_struct_00109b52(input_ptr,combined_string,0,default_value,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_and_initialize_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_entries_0010d882",
                "param_1": "input_data",
                "param_2": "strings",
                "param_3": "output_data",
                "param_4": "parse_error",
                "iVar1": "loop_counter",
                "pcVar2": "current_string",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_pointer",
                "uVar6": "entry_index",
                "bVar7": "is_valid_entry",
                "local_50": "entry_count",
                "local_4c": "max_entries",
                "local_48": "entry_value",
                "local_44": "entry_repeat",
                "local_40": "temp_entry"
            },
            "code": "\nundefined8 parse_entries_0010d882(long input_data,char **strings,long *output_data,undefined *parse_error)\n\n{\n  int loop_counter;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_pointer;\n  ulong entry_index;\n  bool is_valid_entry;\n  uint entry_count;\n  undefined4 max_entries;\n  uint entry_value;\n  int entry_repeat;\n  undefined8 temp_entry [2];\n  \n  current_string = *strings;\n  max_entries = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *parse_error = 0;\n  }\n  entry_count = 0;\n  while( true ) {\n    current_pointer = *strings;\n    current_char = *current_pointer;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *strings = current_pointer + 1;\n      if (current_char == 'T') {\n        entry_repeat = 1;\n      }\n      else {\n        current_char = parse_number_00108ea1(strings,&entry_repeat);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = parse_number_00108ea1(strings,&entry_value);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= entry_value)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_string);\n        return 0;\n      }\n      entry_index = (ulong)entry_value;\n      while (loop_counter = entry_repeat + -1, is_valid_entry = entry_repeat != 0, entry_repeat = loop_counter, is_valid_entry) {\n        temp_entry[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + entry_index * 0x10);\n        current_char = add_entry_and_update_0010d7d4(input_data,temp_entry,output_data,&entry_count,&max_entries);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = add_entry_and_update_0010d7d4(input_data,strings,output_data,&entry_count,&max_entries);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)entry_count * 8) = 0;\n    if (*current_pointer != 'e') goto LAB_0010d9fa;\n    *parse_error = 1;\n  }\n  current_pointer = current_pointer + 1;\n  *strings = current_pointer;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_pointer >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010d7d4",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_entries_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryArray",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryPtr",
                "pauVar2": "existingMemoryArray",
                "lVar3": "loopCounter",
                "puVar4": "currentMemoryPtr",
                "bVar5": "isFirstIteration"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryArray) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *memoryPtr;\n  undefined (*existingMemoryArray) [16];\n  long loopCounter;\n  undefined4 *currentMemoryPtr;\n  byte isFirstIteration;\n  \n  isFirstIteration = 0;\n  memoryPtr = (undefined4 *)xmalloc(0x28);\n  currentMemoryPtr = memoryPtr;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentMemoryPtr = 0;\n    currentMemoryPtr = currentMemoryPtr + (ulong)isFirstIteration * -2 + 1;\n  }\n  existingMemoryArray = *memoryArray;\n  *(undefined8 *)(memoryPtr + 2) = value;\n  memoryPtr[5] = param3;\n  memoryPtr[6] = param4;\n  if (existingMemoryArray == (undefined (*) [16])0x0) {\n    existingMemoryArray = (undefined (*) [16])xmalloc(0x10);\n    *existingMemoryArray = ZEXT816(0);\n    *memoryArray = existingMemoryArray;\n    *(undefined (**) [16])(*existingMemoryArray + 8) = existingMemoryArray;\n  }\n  **(undefined8 **)(*existingMemoryArray + 8) = memoryPtr;\n  *(undefined4 **)(*existingMemoryArray + 8) = memoryPtr;\n  return memoryPtr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bc80",
                "FUN_00112996",
                "FUN_0010c05d"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_information_0010bf86",
                "param_1": "data",
                "param_2": "lineNumber",
                "param_3": "fileOffset",
                "uVar1": "result",
                "puVar2": "ptr",
                "uVar3": "index",
                "puVar4": "memAllocated",
                "lVar5": "loopVar",
                "puVar6": "loopPtr",
                "bVar7": "isZero"
            },
            "code": "\n\n\nundefined8 recordLineDebugInformation_0010bf86(long data,undefined8 lineNumber,undefined8 fileOffset)\n\n{\n  undefined8 result;\n  undefined8 *ptr;\n  ulong index;\n  undefined4 *memAllocated;\n  long loopVar;\n  undefined4 *loopPtr;\n  byte isZero;\n  \n  isZero = 0;\n  if (*(long *)(data + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    loopVar = *(long *)(data + 0x28);\n    if ((loopVar != 0) && (*(long *)(loopVar + 8) == *(long *)(data + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loopVar + 0x10 + index * 8) == -1) {\n          ptr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loopVar + 0x10 + (long)ptr * 8) = lineNumber;\n          *(undefined8 *)(loopVar + 0x60 + (long)ptr * 8) = fileOffset;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    memAllocated = (undefined4 *)xmalloc(0xb0);\n    loopPtr = memAllocated;\n    for (loopVar = 0x2c; loopVar != 0; loopVar = loopVar + -1) {\n      *loopPtr = 0;\n      loopPtr = loopPtr + (ulong)isZero * -2 + 1;\n    }\n    result = *(undefined8 *)(data + 0x10);\n    *(undefined8 *)(memAllocated + 4) = lineNumber;\n    *(undefined8 *)(memAllocated + 2) = result;\n    *(undefined8 *)(memAllocated + 0x18) = fileOffset;\n    loopPtr = memAllocated + 6;\n    for (loopVar = 0x48; loopVar != 0; loopVar = loopVar + -1) {\n      *(undefined *)loopPtr = 0xff;\n      loopPtr = (undefined4 *)((long)loopPtr + (ulong)isZero * -2 + 1);\n    }\n    ptr = *(undefined8 **)(data + 0x28);\n    if (ptr == (undefined8 *)0x0) {\n      ptr = *(undefined8 **)(data + 8);\n      ptr[2] = memAllocated;\n    }\n    else {\n      *ptr = memAllocated;\n    }\n    *(undefined4 **)(data + 0x28) = memAllocated;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_information_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_00116852",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "text",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **text)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*text,0);\n    if (matchResult == 0) {\n      *(undefined *)(text + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*text,0);\n    if (matchResult == 0) {\n      *(undefined *)(text + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_data_0010bd62",
                "param_1": "function_data",
                "param_2": "param_value",
                "param_3": "param_size",
                "param_4": "param_type",
                "param_5": "debug_record",
                "puVar1": "current_ptr",
                "uVar2": "error_message",
                "puVar3": "allocated_memory",
                "puVar4": "temp_ptr",
                "lVar5": "loop_counter",
                "puVar6": "last_ptr",
                "puVar7": "initial_ptr",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_data_0010bd62(long function_data,long param_value,long param_size,undefined4 param_type,undefined8 debug_record)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *allocated_memory;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *initial_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param_value == 0) {\n    return 0;\n  }\n  if (param_size != 0) {\n    if ((*(long *)(function_data + 8) != 0) && (*(long *)(function_data + 0x18) != 0)) {\n      allocated_memory = (undefined4 *)xmalloc(0x28);\n      initial_ptr = allocated_memory;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *initial_ptr = 0;\n        initial_ptr = initial_ptr + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_data + 0x18);\n      *(long *)(allocated_memory + 2) = param_value;\n      *(long *)(allocated_memory + 4) = param_size;\n      allocated_memory[6] = param_type;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(allocated_memory + 8) = debug_record;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = allocated_memory;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_data_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_files_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "archiveFormat",
                "ppcVar6": "archive",
                "unaff_R15": "archivedFiles",
                "unaff_retaddr": "returnAddress",
                "print_error_information_001126c0": "printErrorInformation",
                "bfd_get_arch": "getArchitecture",
                "bfd_close_all_done": "closeAllDone",
                "bfd_close": "close",
                "bfd_openr": "openRead",
                "unaff_R13": "temporaryDirs",
                "stat": "getStats",
                "unaff_RBP": "fileStatPtr",
                "concat": "concatenateStrings",
                "free": "deallocateMemory",
                "malloc": "allocateMemory",
                "xmalloc": "allocateMemorySafe",
                "get_modified_string_001125fa": "getModifiedString",
                "create_temporary_directory_0011a0e0": "createTemporaryDirectory",
                "xstrdup": "duplicateString",
                "unlink": "removeFile",
                "print_error_message_00119ed0": "printErrorMessage",
                "dcgettext": "getTranslatedString",
                "printf": "printFormattedOutput"
            },
            "code": "\nvoid extractAndCopyFiles_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **archive;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int unaff_EBX;\n  stat *fileStatPtr;\n  char *pcVar15;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *temporaryDirs;\n  char **archivedFiles;\n  byte bVar17;\n  undefined8 returnAddress;\n  undefined8 *param_7;\n  long *param_8;\n  char *param_9;\n  undefined8 *param_10;\n  undefined8 archiveFormat;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long param_19;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  archive = (char **)bfd_openw(archivePath,archiveFormat);\n  if (archive == (char **)0x0) {\nLAB_00104e80:\n    printErrorInformation(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(archivedFiles,archive,returnAddress);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(archivedFiles);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(archive);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      printErrorInformation(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(archive);\n    archive = archivedFiles;\n    if (cVar1 == '\\0') {\n      printErrorInformation(archivePath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (unaff_EBX == 0)) {\n      set_time_0011a350(archivePath,fileStatPtr);\n    }\n    lVar12 = bfd_openr(archivePath,archiveFormat);\n    temporaryDirs[2] = lVar12;\n    *param_8 = lVar12;\n    param_8 = (long *)(lVar12 + 0xf0);\n    archivedFiles = (char **)bfd_openr_next_archived_file(param_10,archive);\n    bfd_close(archive);\n    while ((DAT_00127a20 == 0 && (archivedFiles != (char **)0x0))) {\n      pcVar10 = *archivedFiles;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        printErrorMessage(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          extract_and_copy_files_001052a2();\n          return;\n        }\n      }\n      fileStatPtr = (stat *)&stack0x00000050;\n      archivePath = (char *)concatenateStrings(param_9,&DAT_0011b47d);\n      iVar2 = stat(archivePath,fileStatPtr);\n      puVar8 = temporaryDirs;\n      if (-1 < iVar2) {\n        lVar12 = createTemporaryDirectory(archivePath);\n        free(archivePath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          printErrorMessage(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *archivedFiles;\n        *puVar8 = temporaryDirs;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        archivePath = (char *)concatenateStrings(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      unaff_EBX = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = fileStatPtr;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        archive = (char **)archivedFiles[0x1d];\n        if ((char **)archivedFiles[0x1d] == (char **)0x0) {\n          archive = archivedFiles;\n        }\n        unaff_EBX = (**(code **)(archive[1] + 0x1e8))(archivedFiles,fileStatPtr);\n        if (unaff_EBX != 0) {\n          pcVar10 = *archivedFiles;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          printErrorMessage(uVar11,pcVar10);\n        }\n      }\n      temporaryDirs = (undefined8 *)xmalloc(0x18);\n      temporaryDirs[1] = archivePath;\n      *temporaryDirs = puVar8;\n      temporaryDirs[2] = 0;\n      cVar1 = bfd_check_format(archivedFiles,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        archive = (char **)bfd_openw(archivePath,*(undefined8 *)archivedFiles[1]);\n        if (archive == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      printErrorInformation(0,archivedFiles,0,uVar11);\n      archive = (char **)bfd_openw(archivePath,archiveFormat);\n      if (archive == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)archivedFiles[0x1d];\n      if ((char **)archivedFiles[0x1d] == (char **)0x0) {\n        ppcVar3 = archivedFiles;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(archivedFiles);\n      lVar12 = param_19;\n      if (iVar2 == 0) {\n        if (param_19 < 0) {\n          getModifiedString(archivedFiles);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          printErrorMessage(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(archivedFiles,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279c9 != '\\0') {\n              pcVar10 = *archive;\n              uVar11 = getModifiedString(archivedFiles);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*archive,param_18 | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(archive);\n                archive = archivedFiles;\n                if (cVar1 == '\\0') {\n                  printErrorInformation(archivePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,archivedFiles);\n              ppcVar3 = archivedFiles;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,archive), ppcVar3 = archive, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            printErrorInformation(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = getModifiedString(archivedFiles);\n            print_bfd_error_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        printErrorInformation(0,archivedFiles,0,0);\n      }\n      cVar1 = bfd_close_all_done(archive);\n      if (cVar1 == '\\0') {\n        printErrorInformation(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a20 = 1;\n    }\n    *param_8 = 0;\n    pvVar4 = (void *)xstrdup(*param_7);\n    if (DAT_00127a20 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(param_7);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      printErrorInformation(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*param_10);\n    cVar1 = bfd_close(param_10);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      printErrorInformation(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (temporaryDirs != (undefined8 *)0x0) {\n    if (temporaryDirs[2] == 0) {\n      rmdir((char *)temporaryDirs[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temporaryDirs[1]);\n    }\n    free((void *)temporaryDirs[1]);\n    puVar8 = (undefined8 *)*temporaryDirs;\n    free(temporaryDirs);\n    temporaryDirs = puVar8;\n  }\n  rmdir(param_9);\n  free(param_9);\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "stat",
                "bfd_close",
                "xmalloc",
                "rmdir",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "bfd_seek",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "concat",
                "printf",
                "FUN_0011a0e0",
                "FUN_00114b84",
                "FUN_001052a2",
                "chmod",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_bread",
                "bfd_get_arch",
                "FUN_0011a110",
                "FUN_00104ea2",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "unlink",
                "free",
                "FUN_0011a350",
                "bfd_bwrite",
                "FUN_001125fa",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_001126c0",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_data_structure_00113ce0",
                "param_1": "input_param",
                "param_2": "secondary_param",
                "param_3": "undefined_param",
                "param_4": "ptr_param_4",
                "param_5": "ptr_param_5",
                "lVar1": "data_structure",
                "plVar2": "dynamic_array"
            },
            "code": "\nundefined  [16]\ninitialize_data_structure_00113ce0(long input_param,long secondary_param,undefined undefined_param,undefined8 ptr_param_4,undefined8 ptr_param_5)\n\n{\n  long data_structure;\n  long *dynamic_array;\n  undefined auVar3 [16];\n  \n  if (input_param != 0) {\n    data_structure = initialize_data_structure_00113ce0_00112904(0xd,0);\n    if (data_structure != 0) {\n      dynamic_array = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)dynamic_array + 0x11) = 0;\n      *dynamic_array = input_param;\n      *(undefined4 *)((long)dynamic_array + 0x14) = 0;\n      dynamic_array[1] = secondary_param;\n      *(undefined *)(dynamic_array + 2) = undefined_param;\n      *(long **)(data_structure + 0x10) = dynamic_array;\n      goto LAB_00113d2f;\n    }\n  }\n  data_structure = 0;\nLAB_00113d2f:\n  auVar3._8_8_ = ptr_param_5;\n  auVar3._0_8_ = data_structure;\n  return auVar3;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_data_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "bufferSize",
                "unaff_R12": "currentPosition",
                "unaff_R14": "maxPosition",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMsg",
                "uVar3": "translatedMsg"
            },
            "code": "\nvoid readAndResizeData_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMsg;\n  undefined8 translatedMsg;\n  size_t bytesRead;\n  FILE *file;\n  long bufferSize;\n  long currentPosition;\n  long maxPosition;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(bufferSize + 0x20) + currentPosition),1,maxPosition - currentPosition,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      translatedMsg = *(undefined8 *)(bufferSize + 0x10);\n      errorMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(errorMsg,translatedMsg);\n    }\n    currentPosition = currentPosition + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (currentPosition == maxPosition) {\n      maxPosition = currentPosition * 2;\n      translatedMsg = xrealloc(*(undefined8 *)(bufferSize + 0x20),maxPosition);\n      *(undefined8 *)(bufferSize + 0x20) = translatedMsg;\n    }\n  }\n  *(long *)(bufferSize + 0x18) = currentPosition;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "xrealloc",
                "dcgettext",
                "FUN_00114dc7",
                "fread",
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_data_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "param_1": "header_data",
                "param_2": "binary_data",
                "uVar1": "header_info",
                "cVar2": "flag",
                "iVar3": "index",
                "uVar4": "endianness_header",
                "uVar5": "endianness_data",
                "__format": "format_string",
                "lVar6": "size",
                "uVar7": "header_value",
                "lVar8": "allocated_memory"
            },
            "code": "\nundefined4 process_binary_data_00119f70(undefined8 *header_data,undefined8 *binary_data)\n\n{\n  undefined4 header_info;\n  char flag;\n  int index;\n  undefined8 endianness_header;\n  undefined8 endianness_data;\n  char *format_string;\n  long size;\n  undefined8 header_value;\n  long allocated_memory;\n  \n  index = *(int *)((long)binary_data + 0xc) + 1;\n  *(int *)((long)binary_data + 0xc) = index;\n  if ((ulong)binary_data[2] < (ulong)((long)index * 0x60)) {\n    size = 0x3000;\n    if (0x3f < index) {\n      size = (long)index * 0xc0;\n    }\n    allocated_memory = xrealloc(binary_data[3]);\n    binary_data[3] = allocated_memory;\n    memset((void *)(allocated_memory + binary_data[2]),0,size - binary_data[2]);\n    binary_data[2] = size;\n  }\n  header_info = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binary_data + 0xc) * 0x60 + binary_data[3] + -0x60) = *header_data;\n  endianness_header = get_endianness_00114e00(header_info);\n  endianness_data = get_endianness_00114e00(*(undefined4 *)(header_data + 2));\n  header_value = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_value,endianness_data,endianness_header);\n  size = bfd_openw(*binary_data,*header_data);\n  if (size == 0) {\n    print_bfd_error_0011a110(*binary_data);\n    *(undefined4 *)(binary_data + 1) = 1;\n  }\n  else {\n    index = 2;\n    flag = bfd_set_format(size,1);\n    if (flag == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        print_bfd_error_0011a110(*header_data);\n        *(undefined4 *)(binary_data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(size + 8) + 0x2a0))(size,index,0);\n        if (flag != '\\0') {\n          header_value = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)binary_data + 0xc) * 0x60 + binary_data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(size);\n  }\n  return *(undefined4 *)(binary_data + 1);\n}\n\n",
            "called": [
                "memset",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "xrealloc",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_get_error",
                "FUN_00114e00",
                "printf",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_contents_00115a90",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_name",
                "param_3": "permissions_address",
                "_Var3": "source_file_position",
                "uVar4": "bytes_read",
                "sVar5": "bytes_written",
                "iVar1": "errno_value",
                "__fd": "destination_file_descriptor",
                "iVar2": "read_result",
                "piVar6": "errno_location",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_contents_00115a90(int source_file_descriptor,char *destination_file_name,long permissions_address)\n\n{\n  int errno_value;\n  int destination_file_descriptor;\n  int read_result;\n  __off_t source_file_position;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (source_file_position = lseek(source_file_descriptor,0,0), source_file_position == 0)) {\n    destination_file_descriptor = open(destination_file_name,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = close_file_handle_00108237();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        errno_value = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(permissions_address + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = errno_value;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "close",
                "__errno_location",
                "open",
                "write",
                "fchmod",
                "FUN_00108237",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_contents_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "copyFlag",
                "unaff_R13": "filePermissions",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoPtr",
                "auVar3": "resultVar",
                "__errno_location": "getErrorNumber",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedErrorMessage",
                "print_error_message_00119ed0": "printErrorMessage",
                "unlink": "deleteFile",
                "set_time_0011a350": "setFileTime"
            },
            "code": "\nundefined  [16] copyFile_00108200(void)\n\n{\n  int *errnoPtr;\n  undefined8 uVar2;\n  char *filePath;\n  char copyFlag;\n  ulong filePermissions;\n  undefined resultVar [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  printErrorMessage(uVar2);\n  unlink(filePath);\n  if (copyFlag != '\\0') {\n    setFileTime();\n  }\n  resultVar._0_8_ = filePermissions & 0xffffffff;\n  resultVar._8_8_ = returnAddress;\n  return resultVar;\n}\n\n",
            "called": [
                "__errno_location",
                "unlink",
                "dcgettext",
                "FUN_0011a350",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 285595,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}